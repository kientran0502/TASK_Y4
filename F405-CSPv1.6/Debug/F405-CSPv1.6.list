
F405-CSPv1.6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ee98  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001704  0800f028  0800f028  00010028  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801072c  0801072c  00012220  2**0
                  CONTENTS
  4 .ARM          00000008  0801072c  0801072c  0001172c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010734  08010734  00012220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010734  08010734  00011734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010738  08010738  00011738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  0801073c  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00012220  2**0
                  CONTENTS
 10 .bss          00004d44  20000220  20000220  00012220  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004f64  20004f64  00012220  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00012220  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021391  00000000  00000000  00012250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006823  00000000  00000000  000335e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d88  00000000  00000000  00039e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001632  00000000  00000000  0003bb90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00009d93  00000000  00000000  0003d1c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002635e  00000000  00000000  00046f55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dbfb4  00000000  00000000  0006d2b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00149267  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008bf8  00000000  00000000  001492ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000042  00000000  00000000  00151ea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000220 	.word	0x20000220
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f010 	.word	0x0800f010

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000224 	.word	0x20000224
 80001cc:	0800f010 	.word	0x0800f010

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001024:	4b04      	ldr	r3, [pc, #16]	@ (8001038 <__NVIC_GetPriorityGrouping+0x18>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	0a1b      	lsrs	r3, r3, #8
 800102a:	f003 0307 	and.w	r3, r3, #7
}
 800102e:	4618      	mov	r0, r3
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	2b00      	cmp	r3, #0
 800104c:	db0b      	blt.n	8001066 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	f003 021f 	and.w	r2, r3, #31
 8001054:	4907      	ldr	r1, [pc, #28]	@ (8001074 <__NVIC_EnableIRQ+0x38>)
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	095b      	lsrs	r3, r3, #5
 800105c:	2001      	movs	r0, #1
 800105e:	fa00 f202 	lsl.w	r2, r0, r2
 8001062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	e000e100 	.word	0xe000e100

08001078 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	6039      	str	r1, [r7, #0]
 8001082:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001088:	2b00      	cmp	r3, #0
 800108a:	db0a      	blt.n	80010a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	b2da      	uxtb	r2, r3
 8001090:	490c      	ldr	r1, [pc, #48]	@ (80010c4 <__NVIC_SetPriority+0x4c>)
 8001092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001096:	0112      	lsls	r2, r2, #4
 8001098:	b2d2      	uxtb	r2, r2
 800109a:	440b      	add	r3, r1
 800109c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010a0:	e00a      	b.n	80010b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	b2da      	uxtb	r2, r3
 80010a6:	4908      	ldr	r1, [pc, #32]	@ (80010c8 <__NVIC_SetPriority+0x50>)
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	f003 030f 	and.w	r3, r3, #15
 80010ae:	3b04      	subs	r3, #4
 80010b0:	0112      	lsls	r2, r2, #4
 80010b2:	b2d2      	uxtb	r2, r2
 80010b4:	440b      	add	r3, r1
 80010b6:	761a      	strb	r2, [r3, #24]
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	e000e100 	.word	0xe000e100
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b089      	sub	sp, #36	@ 0x24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	f1c3 0307 	rsb	r3, r3, #7
 80010e6:	2b04      	cmp	r3, #4
 80010e8:	bf28      	it	cs
 80010ea:	2304      	movcs	r3, #4
 80010ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	3304      	adds	r3, #4
 80010f2:	2b06      	cmp	r3, #6
 80010f4:	d902      	bls.n	80010fc <NVIC_EncodePriority+0x30>
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	3b03      	subs	r3, #3
 80010fa:	e000      	b.n	80010fe <NVIC_EncodePriority+0x32>
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001100:	f04f 32ff 	mov.w	r2, #4294967295
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43da      	mvns	r2, r3
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	401a      	ands	r2, r3
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001114:	f04f 31ff 	mov.w	r1, #4294967295
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	fa01 f303 	lsl.w	r3, r1, r3
 800111e:	43d9      	mvns	r1, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001124:	4313      	orrs	r3, r2
         );
}
 8001126:	4618      	mov	r0, r3
 8001128:	3724      	adds	r7, #36	@ 0x24
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001132:	b480      	push	{r7}
 8001134:	b083      	sub	sp, #12
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	68db      	ldr	r3, [r3, #12]
 800113e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	60da      	str	r2, [r3, #12]
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001152:	b480      	push	{r7}
 8001154:	b083      	sub	sp, #12
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	691b      	ldr	r3, [r3, #16]
 800115e:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	695b      	ldr	r3, [r3, #20]
 800116a:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	615a      	str	r2, [r3, #20]
}
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 800117e:	b480      	push	{r7}
 8001180:	b083      	sub	sp, #12
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0320 	and.w	r3, r3, #32
 800118e:	2b20      	cmp	r3, #32
 8001190:	bf0c      	ite	eq
 8001192:	2301      	moveq	r3, #1
 8001194:	2300      	movne	r3, #0
 8001196:	b2db      	uxtb	r3, r3
}
 8001198:	4618      	mov	r0, r3
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011b4:	2b40      	cmp	r3, #64	@ 0x40
 80011b6:	bf0c      	ite	eq
 80011b8:	2301      	moveq	r3, #1
 80011ba:	2300      	movne	r3, #0
 80011bc:	b2db      	uxtb	r3, r3
}
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 80011ca:	b480      	push	{r7}
 80011cc:	b083      	sub	sp, #12
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011da:	2b80      	cmp	r3, #128	@ 0x80
 80011dc:	bf0c      	ite	eq
 80011de:	2301      	moveq	r3, #1
 80011e0:	2300      	movne	r3, #0
 80011e2:	b2db      	uxtb	r3, r3
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b089      	sub	sp, #36	@ 0x24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	330c      	adds	r3, #12
 80011fc:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	e853 3f00 	ldrex	r3, [r3]
 8001204:	60bb      	str	r3, [r7, #8]
   return(result);
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	f043 0320 	orr.w	r3, r3, #32
 800120c:	61fb      	str	r3, [r7, #28]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	330c      	adds	r3, #12
 8001212:	69fa      	ldr	r2, [r7, #28]
 8001214:	61ba      	str	r2, [r7, #24]
 8001216:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001218:	6979      	ldr	r1, [r7, #20]
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	e841 2300 	strex	r3, r2, [r1]
 8001220:	613b      	str	r3, [r7, #16]
   return(result);
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d1e7      	bne.n	80011f8 <LL_USART_EnableIT_RXNE+0x8>
}
 8001228:	bf00      	nop
 800122a:	bf00      	nop
 800122c:	3724      	adds	r7, #36	@ 0x24
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 8001236:	b480      	push	{r7}
 8001238:	b083      	sub	sp, #12
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	b2db      	uxtb	r3, r3
}
 8001244:	4618      	mov	r0, r3
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	460b      	mov	r3, r1
 800125a:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800125c:	78fa      	ldrb	r2, [r7, #3]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	605a      	str	r2, [r3, #4]
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
	...

08001270 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001278:	4b08      	ldr	r3, [pc, #32]	@ (800129c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800127a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800127c:	4907      	ldr	r1, [pc, #28]	@ (800129c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4313      	orrs	r3, r2
 8001282:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001284:	4b05      	ldr	r3, [pc, #20]	@ (800129c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001286:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4013      	ands	r3, r2
 800128c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800128e:	68fb      	ldr	r3, [r7, #12]
}
 8001290:	bf00      	nop
 8001292:	3714      	adds	r7, #20
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	40023800 	.word	0x40023800

080012a0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80012a8:	4b08      	ldr	r3, [pc, #32]	@ (80012cc <LL_APB2_GRP1_EnableClock+0x2c>)
 80012aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80012ac:	4907      	ldr	r1, [pc, #28]	@ (80012cc <LL_APB2_GRP1_EnableClock+0x2c>)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80012b4:	4b05      	ldr	r3, [pc, #20]	@ (80012cc <LL_APB2_GRP1_EnableClock+0x2c>)
 80012b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4013      	ands	r3, r2
 80012bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012be:	68fb      	ldr	r3, [r7, #12]
}
 80012c0:	bf00      	nop
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	40023800 	.word	0x40023800

080012d0 <csp_conf_get_defaults>:
} csp_conf_t;

/**
   Get default CSP configuration.
*/
static inline void csp_conf_get_defaults(csp_conf_t * conf) {
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
	conf->address = 1;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2201      	movs	r2, #1
 80012dc:	701a      	strb	r2, [r3, #0]
	conf->hostname = "hostname";
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a13      	ldr	r2, [pc, #76]	@ (8001330 <csp_conf_get_defaults+0x60>)
 80012e2:	605a      	str	r2, [r3, #4]
	conf->model = "model";
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4a13      	ldr	r2, [pc, #76]	@ (8001334 <csp_conf_get_defaults+0x64>)
 80012e8:	609a      	str	r2, [r3, #8]
	conf->revision = "resvision";
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a12      	ldr	r2, [pc, #72]	@ (8001338 <csp_conf_get_defaults+0x68>)
 80012ee:	60da      	str	r2, [r3, #12]
	conf->conn_max = 10;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	220a      	movs	r2, #10
 80012f4:	741a      	strb	r2, [r3, #16]
	conf->conn_queue_length = 10;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	220a      	movs	r2, #10
 80012fa:	745a      	strb	r2, [r3, #17]
	conf->fifo_length = 25;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2219      	movs	r2, #25
 8001300:	749a      	strb	r2, [r3, #18]
	conf->port_max_bind = 24;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2218      	movs	r2, #24
 8001306:	74da      	strb	r2, [r3, #19]
	conf->rdp_max_window = 20;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2214      	movs	r2, #20
 800130c:	751a      	strb	r2, [r3, #20]
	conf->buffers = 10;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	220a      	movs	r2, #10
 8001312:	82da      	strh	r2, [r3, #22]
	conf->buffer_data_size = 256;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800131a:	831a      	strh	r2, [r3, #24]
	conf->conn_dfl_so = CSP_O_NONE;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2200      	movs	r2, #0
 8001320:	61da      	str	r2, [r3, #28]
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	0800f028 	.word	0x0800f028
 8001334:	0800f034 	.word	0x0800f034
 8001338:	0800f03c 	.word	0x0800f03c

0800133c <csp_can_tx_frame>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/*TX FUNCTION*/
static int csp_can_tx_frame(void *driver_data, uint32_t id, const uint8_t *data, uint8_t dlc){
 800133c:	b580      	push	{r7, lr}
 800133e:	b08c      	sub	sp, #48	@ 0x30
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
 8001348:	70fb      	strb	r3, [r7, #3]

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_5);
 800134a:	2120      	movs	r1, #32
 800134c:	4810      	ldr	r0, [pc, #64]	@ (8001390 <csp_can_tx_frame+0x54>)
 800134e:	f004 fb1e 	bl	800598e <HAL_GPIO_TogglePin>

	CAN_TxHeaderTypeDef txHeader;
	txHeader.DLC = dlc;
 8001352:	78fb      	ldrb	r3, [r7, #3]
 8001354:	62bb      	str	r3, [r7, #40]	@ 0x28
	txHeader.IDE = CAN_ID_EXT;
 8001356:	2304      	movs	r3, #4
 8001358:	623b      	str	r3, [r7, #32]
	txHeader.RTR = CAN_RTR_DATA;
 800135a:	2300      	movs	r3, #0
 800135c:	627b      	str	r3, [r7, #36]	@ 0x24
	txHeader.ExtId = id;
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	61fb      	str	r3, [r7, #28]
	txHeader.TransmitGlobalTime = DISABLE;
 8001362:	2300      	movs	r3, #0
 8001364:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

	uint32_t canMailBox;
	if (HAL_CAN_AddTxMessage(&hcan1, &txHeader, (uint8_t *)data, &canMailBox) != HAL_OK) {
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	f107 0118 	add.w	r1, r7, #24
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	4808      	ldr	r0, [pc, #32]	@ (8001394 <csp_can_tx_frame+0x58>)
 8001374:	f003 fc32 	bl	8004bdc <HAL_CAN_AddTxMessage>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d002      	beq.n	8001384 <csp_can_tx_frame+0x48>
	        return CSP_ERR_DRIVER;
 800137e:	f06f 030a 	mvn.w	r3, #10
 8001382:	e000      	b.n	8001386 <csp_can_tx_frame+0x4a>
	    }
	return CSP_ERR_NONE;
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3730      	adds	r7, #48	@ 0x30
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40020800 	.word	0x40020800
 8001394:	200002e0 	.word	0x200002e0

08001398 <csp_uart_tx_frame>:
//	return CSP_ERR_NONE;
//}


void csp_uart_tx_frame(void *driver, const uint8_t *data, uint32_t len)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]

    for (uint32_t i = 0; i < len; i++)
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]
 80013a8:	e011      	b.n	80013ce <csp_uart_tx_frame+0x36>
    {
        // chờ khi TXE = 1 (thanh ghi truyền trống)
        while (!LL_USART_IsActiveFlag_TXE(USART6));
 80013aa:	bf00      	nop
 80013ac:	4810      	ldr	r0, [pc, #64]	@ (80013f0 <csp_uart_tx_frame+0x58>)
 80013ae:	f7ff ff0c 	bl	80011ca <LL_USART_IsActiveFlag_TXE>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d0f9      	beq.n	80013ac <csp_uart_tx_frame+0x14>
        LL_USART_TransmitData8(USART6, data[i]);  // cấn phải sửa biến truyền vào
 80013b8:	68ba      	ldr	r2, [r7, #8]
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	4413      	add	r3, r2
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	4619      	mov	r1, r3
 80013c2:	480b      	ldr	r0, [pc, #44]	@ (80013f0 <csp_uart_tx_frame+0x58>)
 80013c4:	f7ff ff44 	bl	8001250 <LL_USART_TransmitData8>
    for (uint32_t i = 0; i < len; i++)
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	3301      	adds	r3, #1
 80013cc:	617b      	str	r3, [r7, #20]
 80013ce:	697a      	ldr	r2, [r7, #20]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d3e9      	bcc.n	80013aa <csp_uart_tx_frame+0x12>
    }

    // chờ truyền xong byte cuối
    while (!LL_USART_IsActiveFlag_TC(USART6));
 80013d6:	bf00      	nop
 80013d8:	4805      	ldr	r0, [pc, #20]	@ (80013f0 <csp_uart_tx_frame+0x58>)
 80013da:	f7ff fee3 	bl	80011a4 <LL_USART_IsActiveFlag_TC>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d0f9      	beq.n	80013d8 <csp_uart_tx_frame+0x40>
}
 80013e4:	bf00      	nop
 80013e6:	bf00      	nop
 80013e8:	3718      	adds	r7, #24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40011400 	.word	0x40011400

080013f4 <HAL_CAN_RxFifo0MsgPendingCallback>:

/*CALLBACK*/
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08e      	sub	sp, #56	@ 0x38
 80013f8:	af02      	add	r7, sp, #8
 80013fa:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef rxHeader;
	uint8_t rxData[8];

	CSP_BASE_TYPE xCspTaskWoken = pdFALSE;
 80013fc:	2300      	movs	r3, #0
 80013fe:	60bb      	str	r3, [r7, #8]
	 if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, rxData) == HAL_OK) {
 8001400:	f107 030c 	add.w	r3, r7, #12
 8001404:	f107 0214 	add.w	r2, r7, #20
 8001408:	2100      	movs	r1, #0
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f003 fcc1 	bl	8004d92 <HAL_CAN_GetRxMessage>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d11d      	bne.n	8001452 <HAL_CAN_RxFifo0MsgPendingCallback+0x5e>
		 csp_can_rx(&can_iface, rxHeader.ExtId, rxData, rxHeader.DLC, &xCspTaskWoken);
 8001416:	69b9      	ldr	r1, [r7, #24]
 8001418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800141a:	b2d8      	uxtb	r0, r3
 800141c:	f107 020c 	add.w	r2, r7, #12
 8001420:	f107 0308 	add.w	r3, r7, #8
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	4603      	mov	r3, r0
 8001428:	480c      	ldr	r0, [pc, #48]	@ (800145c <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 800142a:	f002 fb07 	bl	8003a3c <csp_can_rx>
		 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_5);
 800142e:	2120      	movs	r1, #32
 8001430:	480b      	ldr	r0, [pc, #44]	@ (8001460 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 8001432:	f004 faac 	bl	800598e <HAL_GPIO_TogglePin>

	    	if(xCspTaskWoken) {
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d00a      	beq.n	8001452 <HAL_CAN_RxFifo0MsgPendingCallback+0x5e>
	    		portYIELD_FROM_ISR(xCspTaskWoken);
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d007      	beq.n	8001452 <HAL_CAN_RxFifo0MsgPendingCallback+0x5e>
 8001442:	4b08      	ldr	r3, [pc, #32]	@ (8001464 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001444:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	f3bf 8f4f 	dsb	sy
 800144e:	f3bf 8f6f 	isb	sy
	    	}
	 }
}
 8001452:	bf00      	nop
 8001454:	3730      	adds	r7, #48	@ 0x30
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000244 	.word	0x20000244
 8001460:	40020800 	.word	0x40020800
 8001464:	e000ed04 	.word	0xe000ed04

08001468 <CSP_UART_IRQHandler>:
//    }
//}


void CSP_UART_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800146e:	2300      	movs	r3, #0
 8001470:	607b      	str	r3, [r7, #4]

    // Kiểm tra có dữ liệu mới nhận
    if(LL_USART_IsActiveFlag_RXNE(USART6))
 8001472:	4810      	ldr	r0, [pc, #64]	@ (80014b4 <CSP_UART_IRQHandler+0x4c>)
 8001474:	f7ff fe83 	bl	800117e <LL_USART_IsActiveFlag_RXNE>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d00a      	beq.n	8001494 <CSP_UART_IRQHandler+0x2c>
    {
        uint8_t rx_byte = LL_USART_ReceiveData8(USART6);
 800147e:	480d      	ldr	r0, [pc, #52]	@ (80014b4 <CSP_UART_IRQHandler+0x4c>)
 8001480:	f7ff fed9 	bl	8001236 <LL_USART_ReceiveData8>
 8001484:	4603      	mov	r3, r0
 8001486:	70fb      	strb	r3, [r7, #3]

        // Gửi dữ liệu vào stream buffer FreeRTOS từ ISR
//        xStreamBufferSendFromISR(xUartRxStream, &rx_byte, 1, &xHigherPriorityTaskWoken);
        csp_kiss_rx(&uart_iface, &rx_byte, 1, &xHigherPriorityTaskWoken);
 8001488:	1d3b      	adds	r3, r7, #4
 800148a:	1cf9      	adds	r1, r7, #3
 800148c:	2201      	movs	r2, #1
 800148e:	480a      	ldr	r0, [pc, #40]	@ (80014b8 <CSP_UART_IRQHandler+0x50>)
 8001490:	f002 fe86 	bl	80041a0 <csp_kiss_rx>
        // Echo lại byte nhận
//        LL_USART_TransmitData8(USART6, rx_byte);
    }

    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d007      	beq.n	80014aa <CSP_UART_IRQHandler+0x42>
 800149a:	4b08      	ldr	r3, [pc, #32]	@ (80014bc <CSP_UART_IRQHandler+0x54>)
 800149c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	f3bf 8f4f 	dsb	sy
 80014a6:	f3bf 8f6f 	isb	sy
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40011400 	.word	0x40011400
 80014b8:	200002a0 	.word	0x200002a0
 80014bc:	e000ed04 	.word	0xe000ed04

080014c0 <can_csp_init>:

/*INTERFACE INIT*/
static void can_csp_init(void) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0

	can_ifdata.tx_func        = csp_can_tx_frame;
 80014c4:	4b08      	ldr	r3, [pc, #32]	@ (80014e8 <can_csp_init+0x28>)
 80014c6:	4a09      	ldr	r2, [pc, #36]	@ (80014ec <can_csp_init+0x2c>)
 80014c8:	605a      	str	r2, [r3, #4]
	can_iface.name            = "can";
 80014ca:	4b09      	ldr	r3, [pc, #36]	@ (80014f0 <can_csp_init+0x30>)
 80014cc:	4a09      	ldr	r2, [pc, #36]	@ (80014f4 <can_csp_init+0x34>)
 80014ce:	601a      	str	r2, [r3, #0]
	can_iface.driver_data     = &hcan1;
 80014d0:	4b07      	ldr	r3, [pc, #28]	@ (80014f0 <can_csp_init+0x30>)
 80014d2:	4a09      	ldr	r2, [pc, #36]	@ (80014f8 <can_csp_init+0x38>)
 80014d4:	609a      	str	r2, [r3, #8]
	can_iface.interface_data  = &can_ifdata;
 80014d6:	4b06      	ldr	r3, [pc, #24]	@ (80014f0 <can_csp_init+0x30>)
 80014d8:	4a03      	ldr	r2, [pc, #12]	@ (80014e8 <can_csp_init+0x28>)
 80014da:	605a      	str	r2, [r3, #4]

	csp_can_add_interface(&can_iface);
 80014dc:	4804      	ldr	r0, [pc, #16]	@ (80014f0 <can_csp_init+0x30>)
 80014de:	f002 fca9 	bl	8003e34 <csp_can_add_interface>
 }
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	2000023c 	.word	0x2000023c
 80014ec:	0800133d 	.word	0x0800133d
 80014f0:	20000244 	.word	0x20000244
 80014f4:	0800f068 	.word	0x0800f068
 80014f8:	200002e0 	.word	0x200002e0

080014fc <uart_csp_init>:

static void uart_csp_init(void) {
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0

	uart_ifdata.tx_func        = csp_uart_tx_frame;
 8001500:	4b08      	ldr	r3, [pc, #32]	@ (8001524 <uart_csp_init+0x28>)
 8001502:	4a09      	ldr	r2, [pc, #36]	@ (8001528 <uart_csp_init+0x2c>)
 8001504:	605a      	str	r2, [r3, #4]
	uart_iface.name            = "uart";
 8001506:	4b09      	ldr	r3, [pc, #36]	@ (800152c <uart_csp_init+0x30>)
 8001508:	4a09      	ldr	r2, [pc, #36]	@ (8001530 <uart_csp_init+0x34>)
 800150a:	601a      	str	r2, [r3, #0]
	uart_iface.driver_data     = USART6;
 800150c:	4b07      	ldr	r3, [pc, #28]	@ (800152c <uart_csp_init+0x30>)
 800150e:	4a09      	ldr	r2, [pc, #36]	@ (8001534 <uart_csp_init+0x38>)
 8001510:	609a      	str	r2, [r3, #8]
	uart_iface.interface_data  = &uart_ifdata;
 8001512:	4b06      	ldr	r3, [pc, #24]	@ (800152c <uart_csp_init+0x30>)
 8001514:	4a03      	ldr	r2, [pc, #12]	@ (8001524 <uart_csp_init+0x28>)
 8001516:	605a      	str	r2, [r3, #4]

	csp_kiss_add_interface(&uart_iface);
 8001518:	4804      	ldr	r0, [pc, #16]	@ (800152c <uart_csp_init+0x30>)
 800151a:	f002 ff3d 	bl	8004398 <csp_kiss_add_interface>
 }
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000284 	.word	0x20000284
 8001528:	08001399 	.word	0x08001399
 800152c:	200002a0 	.word	0x200002a0
 8001530:	0800f06c 	.word	0x0800f06c
 8001534:	40011400 	.word	0x40011400

08001538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800153c:	f003 f8ec 	bl	8004718 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001540:	f000 f856 	bl	80015f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001544:	f000 f974 	bl	8001830 <MX_GPIO_Init>
  MX_CAN1_Init();
 8001548:	f000 f8ba 	bl	80016c0 <MX_CAN1_Init>
  MX_USART6_UART_Init();
 800154c:	f000 f910 	bl	8001770 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  /*UART INIT*/
  // Ví dụ UART6
  LL_USART_EnableIT_RXNE(USART6);  // Bật ngắt khi RX buffer có dữ liệu
 8001550:	481d      	ldr	r0, [pc, #116]	@ (80015c8 <main+0x90>)
 8001552:	f7ff fe4d 	bl	80011f0 <LL_USART_EnableIT_RXNE>
  LL_USART_Enable(USART6);          // Bật UART
 8001556:	481c      	ldr	r0, [pc, #112]	@ (80015c8 <main+0x90>)
 8001558:	f7ff fdeb 	bl	8001132 <LL_USART_Enable>
//  uart_debug_init();

  /*CAN INIT*/
  HAL_CAN_Start(&hcan1);
 800155c:	481b      	ldr	r0, [pc, #108]	@ (80015cc <main+0x94>)
 800155e:	f003 faf9 	bl	8004b54 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001562:	2102      	movs	r1, #2
 8001564:	4819      	ldr	r0, [pc, #100]	@ (80015cc <main+0x94>)
 8001566:	f003 fd26 	bl	8004fb6 <HAL_CAN_ActivateNotification>
  /*UART INIT*/
//  xUartRxStream = xStreamBufferCreate(UART_RX_STREAM_SIZE, 1);
//  HAL_UART_Receive_IT(&huart6, &rx_byte, 1);

  /*CSP INIT*/
  csp_conf_get_defaults(&csp_conf);
 800156a:	4819      	ldr	r0, [pc, #100]	@ (80015d0 <main+0x98>)
 800156c:	f7ff feb0 	bl	80012d0 <csp_conf_get_defaults>
  csp_conf.address = 1;
 8001570:	4b17      	ldr	r3, [pc, #92]	@ (80015d0 <main+0x98>)
 8001572:	2201      	movs	r2, #1
 8001574:	701a      	strb	r2, [r3, #0]
  csp_init(&csp_conf);
 8001576:	4816      	ldr	r0, [pc, #88]	@ (80015d0 <main+0x98>)
 8001578:	f001 fc72 	bl	8002e60 <csp_init>

  /*CSP INTERFACE INIT*/
  can_csp_init();
 800157c:	f7ff ffa0 	bl	80014c0 <can_csp_init>
  uart_csp_init();
 8001580:	f7ff ffbc 	bl	80014fc <uart_csp_init>
//  i2c_csp_init();

  /*CSP ROUTER INIT*/
  csp_route_start_task(500, 6);
 8001584:	2106      	movs	r1, #6
 8001586:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800158a:	f002 fa2b 	bl	80039e4 <csp_route_start_task>
//  csp_rtable_set(1, CSP_ID_HOST_SIZE, &can_iface, CSP_NO_VIA_ADDRESS);
  csp_rtable_set(1, CSP_ID_HOST_SIZE, &uart_iface, CSP_NO_VIA_ADDRESS);
 800158e:	23ff      	movs	r3, #255	@ 0xff
 8001590:	4a10      	ldr	r2, [pc, #64]	@ (80015d4 <main+0x9c>)
 8001592:	2105      	movs	r1, #5
 8001594:	2001      	movs	r0, #1
 8001596:	f002 ff7b 	bl	8004490 <csp_rtable_set>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800159a:	f005 ff15 	bl	80073c8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800159e:	4a0e      	ldr	r2, [pc, #56]	@ (80015d8 <main+0xa0>)
 80015a0:	2100      	movs	r1, #0
 80015a2:	480e      	ldr	r0, [pc, #56]	@ (80015dc <main+0xa4>)
 80015a4:	f005 ff5a 	bl	800745c <osThreadNew>
 80015a8:	4603      	mov	r3, r0
 80015aa:	4a0d      	ldr	r2, [pc, #52]	@ (80015e0 <main+0xa8>)
 80015ac:	6013      	str	r3, [r2, #0]

  /* creation of canReceive */
  canReceiveHandle = osThreadNew(CANReceive, NULL, &canReceive_attributes);
 80015ae:	4a0d      	ldr	r2, [pc, #52]	@ (80015e4 <main+0xac>)
 80015b0:	2100      	movs	r1, #0
 80015b2:	480d      	ldr	r0, [pc, #52]	@ (80015e8 <main+0xb0>)
 80015b4:	f005 ff52 	bl	800745c <osThreadNew>
 80015b8:	4603      	mov	r3, r0
 80015ba:	4a0c      	ldr	r2, [pc, #48]	@ (80015ec <main+0xb4>)
 80015bc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80015be:	f005 ff27 	bl	8007410 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015c2:	bf00      	nop
 80015c4:	e7fd      	b.n	80015c2 <main+0x8a>
 80015c6:	bf00      	nop
 80015c8:	40011400 	.word	0x40011400
 80015cc:	200002e0 	.word	0x200002e0
 80015d0:	20000388 	.word	0x20000388
 80015d4:	200002a0 	.word	0x200002a0
 80015d8:	0800fe3c 	.word	0x0800fe3c
 80015dc:	08001911 	.word	0x08001911
 80015e0:	20000308 	.word	0x20000308
 80015e4:	0800fe60 	.word	0x0800fe60
 80015e8:	08001921 	.word	0x08001921
 80015ec:	2000030c 	.word	0x2000030c

080015f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b094      	sub	sp, #80	@ 0x50
 80015f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015f6:	f107 0320 	add.w	r3, r7, #32
 80015fa:	2230      	movs	r2, #48	@ 0x30
 80015fc:	2100      	movs	r1, #0
 80015fe:	4618      	mov	r0, r3
 8001600:	f00a f940 	bl	800b884 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001604:	f107 030c 	add.w	r3, r7, #12
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001614:	2300      	movs	r3, #0
 8001616:	60bb      	str	r3, [r7, #8]
 8001618:	4b27      	ldr	r3, [pc, #156]	@ (80016b8 <SystemClock_Config+0xc8>)
 800161a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161c:	4a26      	ldr	r2, [pc, #152]	@ (80016b8 <SystemClock_Config+0xc8>)
 800161e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001622:	6413      	str	r3, [r2, #64]	@ 0x40
 8001624:	4b24      	ldr	r3, [pc, #144]	@ (80016b8 <SystemClock_Config+0xc8>)
 8001626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001628:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001630:	2300      	movs	r3, #0
 8001632:	607b      	str	r3, [r7, #4]
 8001634:	4b21      	ldr	r3, [pc, #132]	@ (80016bc <SystemClock_Config+0xcc>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a20      	ldr	r2, [pc, #128]	@ (80016bc <SystemClock_Config+0xcc>)
 800163a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800163e:	6013      	str	r3, [r2, #0]
 8001640:	4b1e      	ldr	r3, [pc, #120]	@ (80016bc <SystemClock_Config+0xcc>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001648:	607b      	str	r3, [r7, #4]
 800164a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800164c:	2302      	movs	r3, #2
 800164e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001650:	2301      	movs	r3, #1
 8001652:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001654:	2310      	movs	r3, #16
 8001656:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001658:	2302      	movs	r3, #2
 800165a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800165c:	2300      	movs	r3, #0
 800165e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001660:	2308      	movs	r3, #8
 8001662:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001664:	2348      	movs	r3, #72	@ 0x48
 8001666:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001668:	2302      	movs	r3, #2
 800166a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800166c:	2304      	movs	r3, #4
 800166e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001670:	f107 0320 	add.w	r3, r7, #32
 8001674:	4618      	mov	r0, r3
 8001676:	f004 f9a5 	bl	80059c4 <HAL_RCC_OscConfig>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001680:	f000 f9bc 	bl	80019fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001684:	230f      	movs	r3, #15
 8001686:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001688:	2302      	movs	r3, #2
 800168a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001690:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001694:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001696:	2300      	movs	r3, #0
 8001698:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800169a:	f107 030c 	add.w	r3, r7, #12
 800169e:	2102      	movs	r1, #2
 80016a0:	4618      	mov	r0, r3
 80016a2:	f004 fc07 	bl	8005eb4 <HAL_RCC_ClockConfig>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80016ac:	f000 f9a6 	bl	80019fc <Error_Handler>
  }
}
 80016b0:	bf00      	nop
 80016b2:	3750      	adds	r7, #80	@ 0x50
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40023800 	.word	0x40023800
 80016bc:	40007000 	.word	0x40007000

080016c0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b08a      	sub	sp, #40	@ 0x28
 80016c4:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80016c6:	4b28      	ldr	r3, [pc, #160]	@ (8001768 <MX_CAN1_Init+0xa8>)
 80016c8:	4a28      	ldr	r2, [pc, #160]	@ (800176c <MX_CAN1_Init+0xac>)
 80016ca:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 80016cc:	4b26      	ldr	r3, [pc, #152]	@ (8001768 <MX_CAN1_Init+0xa8>)
 80016ce:	2212      	movs	r2, #18
 80016d0:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80016d2:	4b25      	ldr	r3, [pc, #148]	@ (8001768 <MX_CAN1_Init+0xa8>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80016d8:	4b23      	ldr	r3, [pc, #140]	@ (8001768 <MX_CAN1_Init+0xa8>)
 80016da:	2200      	movs	r2, #0
 80016dc:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80016de:	4b22      	ldr	r3, [pc, #136]	@ (8001768 <MX_CAN1_Init+0xa8>)
 80016e0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80016e4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80016e6:	4b20      	ldr	r3, [pc, #128]	@ (8001768 <MX_CAN1_Init+0xa8>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80016ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001768 <MX_CAN1_Init+0xa8>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80016f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001768 <MX_CAN1_Init+0xa8>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80016f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001768 <MX_CAN1_Init+0xa8>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80016fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001768 <MX_CAN1_Init+0xa8>)
 8001700:	2200      	movs	r2, #0
 8001702:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001704:	4b18      	ldr	r3, [pc, #96]	@ (8001768 <MX_CAN1_Init+0xa8>)
 8001706:	2200      	movs	r2, #0
 8001708:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800170a:	4b17      	ldr	r3, [pc, #92]	@ (8001768 <MX_CAN1_Init+0xa8>)
 800170c:	2200      	movs	r2, #0
 800170e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001710:	4815      	ldr	r0, [pc, #84]	@ (8001768 <MX_CAN1_Init+0xa8>)
 8001712:	f003 f843 	bl	800479c <HAL_CAN_Init>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800171c:	f000 f96e 	bl	80019fc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef filterconf = {0};
 8001720:	463b      	mov	r3, r7
 8001722:	2228      	movs	r2, #40	@ 0x28
 8001724:	2100      	movs	r1, #0
 8001726:	4618      	mov	r0, r3
 8001728:	f00a f8ac 	bl	800b884 <memset>
  filterconf.FilterBank = 0;
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]
  filterconf.FilterMode = CAN_FILTERMODE_IDMASK;
 8001730:	2300      	movs	r3, #0
 8001732:	61bb      	str	r3, [r7, #24]
  filterconf.FilterScale = CAN_FILTERSCALE_32BIT;
 8001734:	2301      	movs	r3, #1
 8001736:	61fb      	str	r3, [r7, #28]
  filterconf.FilterIdHigh = 0;
 8001738:	2300      	movs	r3, #0
 800173a:	603b      	str	r3, [r7, #0]
  filterconf.FilterIdLow = 0;
 800173c:	2300      	movs	r3, #0
 800173e:	607b      	str	r3, [r7, #4]
  filterconf.FilterMaskIdHigh = 0;
 8001740:	2300      	movs	r3, #0
 8001742:	60bb      	str	r3, [r7, #8]
  filterconf.FilterMaskIdLow = 0;
 8001744:	2300      	movs	r3, #0
 8001746:	60fb      	str	r3, [r7, #12]
  filterconf.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001748:	2300      	movs	r3, #0
 800174a:	613b      	str	r3, [r7, #16]
  filterconf.FilterActivation = ENABLE;
 800174c:	2301      	movs	r3, #1
 800174e:	623b      	str	r3, [r7, #32]
  filterconf.SlaveStartFilterBank = 14;
 8001750:	230e      	movs	r3, #14
 8001752:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_CAN_ConfigFilter(&hcan1, &filterconf);
 8001754:	463b      	mov	r3, r7
 8001756:	4619      	mov	r1, r3
 8001758:	4803      	ldr	r0, [pc, #12]	@ (8001768 <MX_CAN1_Init+0xa8>)
 800175a:	f003 f91b 	bl	8004994 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 800175e:	bf00      	nop
 8001760:	3728      	adds	r7, #40	@ 0x28
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	200002e0 	.word	0x200002e0
 800176c:	40006400 	.word	0x40006400

08001770 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08e      	sub	sp, #56	@ 0x38
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001776:	f107 031c 	add.w	r3, r7, #28
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]
 8001780:	609a      	str	r2, [r3, #8]
 8001782:	60da      	str	r2, [r3, #12]
 8001784:	611a      	str	r2, [r3, #16]
 8001786:	615a      	str	r2, [r3, #20]
 8001788:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178a:	1d3b      	adds	r3, r7, #4
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]
 8001798:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 800179a:	2020      	movs	r0, #32
 800179c:	f7ff fd80 	bl	80012a0 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80017a0:	2004      	movs	r0, #4
 80017a2:	f7ff fd65 	bl	8001270 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80017a6:	23c0      	movs	r3, #192	@ 0xc0
 80017a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80017aa:	2302      	movs	r3, #2
 80017ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80017ae:	2303      	movs	r3, #3
 80017b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80017b6:	2300      	movs	r3, #0
 80017b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80017ba:	2308      	movs	r3, #8
 80017bc:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017be:	1d3b      	adds	r3, r7, #4
 80017c0:	4619      	mov	r1, r3
 80017c2:	4819      	ldr	r0, [pc, #100]	@ (8001828 <MX_USART6_UART_Init+0xb8>)
 80017c4:	f005 f927 	bl	8006a16 <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 80017c8:	f7ff fc2a 	bl	8001020 <__NVIC_GetPriorityGrouping>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2200      	movs	r2, #0
 80017d0:	2105      	movs	r1, #5
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff fc7a 	bl	80010cc <NVIC_EncodePriority>
 80017d8:	4603      	mov	r3, r0
 80017da:	4619      	mov	r1, r3
 80017dc:	2047      	movs	r0, #71	@ 0x47
 80017de:	f7ff fc4b 	bl	8001078 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 80017e2:	2047      	movs	r0, #71	@ 0x47
 80017e4:	f7ff fc2a 	bl	800103c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80017e8:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80017ec:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80017ee:	2300      	movs	r3, #0
 80017f0:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80017f2:	2300      	movs	r3, #0
 80017f4:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80017f6:	2300      	movs	r3, #0
 80017f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80017fa:	230c      	movs	r3, #12
 80017fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80017fe:	2300      	movs	r3, #0
 8001800:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001802:	2300      	movs	r3, #0
 8001804:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 8001806:	f107 031c 	add.w	r3, r7, #28
 800180a:	4619      	mov	r1, r3
 800180c:	4807      	ldr	r0, [pc, #28]	@ (800182c <MX_USART6_UART_Init+0xbc>)
 800180e:	f005 fd17 	bl	8007240 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 8001812:	4806      	ldr	r0, [pc, #24]	@ (800182c <MX_USART6_UART_Init+0xbc>)
 8001814:	f7ff fc9d 	bl	8001152 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 8001818:	4804      	ldr	r0, [pc, #16]	@ (800182c <MX_USART6_UART_Init+0xbc>)
 800181a:	f7ff fc8a 	bl	8001132 <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800181e:	bf00      	nop
 8001820:	3738      	adds	r7, #56	@ 0x38
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40020800 	.word	0x40020800
 800182c:	40011400 	.word	0x40011400

08001830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08a      	sub	sp, #40	@ 0x28
 8001834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001836:	f107 0314 	add.w	r3, r7, #20
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	609a      	str	r2, [r3, #8]
 8001842:	60da      	str	r2, [r3, #12]
 8001844:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	613b      	str	r3, [r7, #16]
 800184a:	4b2e      	ldr	r3, [pc, #184]	@ (8001904 <MX_GPIO_Init+0xd4>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184e:	4a2d      	ldr	r2, [pc, #180]	@ (8001904 <MX_GPIO_Init+0xd4>)
 8001850:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001854:	6313      	str	r3, [r2, #48]	@ 0x30
 8001856:	4b2b      	ldr	r3, [pc, #172]	@ (8001904 <MX_GPIO_Init+0xd4>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800185e:	613b      	str	r3, [r7, #16]
 8001860:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	60fb      	str	r3, [r7, #12]
 8001866:	4b27      	ldr	r3, [pc, #156]	@ (8001904 <MX_GPIO_Init+0xd4>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186a:	4a26      	ldr	r2, [pc, #152]	@ (8001904 <MX_GPIO_Init+0xd4>)
 800186c:	f043 0304 	orr.w	r3, r3, #4
 8001870:	6313      	str	r3, [r2, #48]	@ 0x30
 8001872:	4b24      	ldr	r3, [pc, #144]	@ (8001904 <MX_GPIO_Init+0xd4>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001876:	f003 0304 	and.w	r3, r3, #4
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	4b20      	ldr	r3, [pc, #128]	@ (8001904 <MX_GPIO_Init+0xd4>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001886:	4a1f      	ldr	r2, [pc, #124]	@ (8001904 <MX_GPIO_Init+0xd4>)
 8001888:	f043 0301 	orr.w	r3, r3, #1
 800188c:	6313      	str	r3, [r2, #48]	@ 0x30
 800188e:	4b1d      	ldr	r3, [pc, #116]	@ (8001904 <MX_GPIO_Init+0xd4>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	60bb      	str	r3, [r7, #8]
 8001898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	607b      	str	r3, [r7, #4]
 800189e:	4b19      	ldr	r3, [pc, #100]	@ (8001904 <MX_GPIO_Init+0xd4>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a2:	4a18      	ldr	r2, [pc, #96]	@ (8001904 <MX_GPIO_Init+0xd4>)
 80018a4:	f043 0302 	orr.w	r3, r3, #2
 80018a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018aa:	4b16      	ldr	r3, [pc, #88]	@ (8001904 <MX_GPIO_Init+0xd4>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	607b      	str	r3, [r7, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80018b6:	2200      	movs	r2, #0
 80018b8:	2120      	movs	r1, #32
 80018ba:	4813      	ldr	r0, [pc, #76]	@ (8001908 <MX_GPIO_Init+0xd8>)
 80018bc:	f004 f84e 	bl	800595c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80018c0:	2320      	movs	r3, #32
 80018c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c4:	2301      	movs	r3, #1
 80018c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018cc:	2300      	movs	r3, #0
 80018ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018d0:	f107 0314 	add.w	r3, r7, #20
 80018d4:	4619      	mov	r1, r3
 80018d6:	480c      	ldr	r0, [pc, #48]	@ (8001908 <MX_GPIO_Init+0xd8>)
 80018d8:	f003 fea4 	bl	8005624 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018dc:	23c0      	movs	r3, #192	@ 0xc0
 80018de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018e0:	2312      	movs	r3, #18
 80018e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e8:	2303      	movs	r3, #3
 80018ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018ec:	2304      	movs	r3, #4
 80018ee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f0:	f107 0314 	add.w	r3, r7, #20
 80018f4:	4619      	mov	r1, r3
 80018f6:	4805      	ldr	r0, [pc, #20]	@ (800190c <MX_GPIO_Init+0xdc>)
 80018f8:	f003 fe94 	bl	8005624 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018fc:	bf00      	nop
 80018fe:	3728      	adds	r7, #40	@ 0x28
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40023800 	.word	0x40023800
 8001908:	40020800 	.word	0x40020800
 800190c:	40020400 	.word	0x40020400

08001910 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(100);
 8001918:	2064      	movs	r0, #100	@ 0x64
 800191a:	f005 fe31 	bl	8007580 <osDelay>
 800191e:	e7fb      	b.n	8001918 <StartDefaultTask+0x8>

08001920 <CANReceive>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CANReceive */
void CANReceive(void *argument)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CANReceive */
	/* Create socket with no specific socket options, e.g. accepts CRC32, HMAC, XTEA, etc. if enabled during compilation */
	csp_socket_t *sock = csp_socket(CSP_SO_NONE);
 8001928:	2000      	movs	r0, #0
 800192a:	f001 fadd 	bl	8002ee8 <csp_socket>
 800192e:	6178      	str	r0, [r7, #20]

	/* Bind socket to all ports, e.g. all incoming connections will be handled here */
	csp_bind(sock, CSP_ANY);
 8001930:	21ff      	movs	r1, #255	@ 0xff
 8001932:	6978      	ldr	r0, [r7, #20]
 8001934:	f001 fd08 	bl	8003348 <csp_bind>

	/* Create a backlog of 10 connections, i.e. up to 10 new connections can be queued */
	csp_listen(sock, 10);
 8001938:	210a      	movs	r1, #10
 800193a:	6978      	ldr	r0, [r7, #20]
 800193c:	f001 fcde 	bl	80032fc <csp_listen>
  /* Infinite loop */
  for(;;)
  {
	  /* Wait for a new connection, 10000 mS timeout */
	  	csp_conn_t *conn;
	  	if ((conn = csp_accept(sock, 10000)) == NULL) {
 8001940:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001944:	6978      	ldr	r0, [r7, #20]
 8001946:	f001 fb59 	bl	8002ffc <csp_accept>
 800194a:	6138      	str	r0, [r7, #16]
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d03a      	beq.n	80019c8 <CANReceive+0xa8>
	  		continue;
	  	}

	  	/* Read packets on connection, timout is 100 mS */
	  	csp_packet_t *packet;
	  	while ((packet = csp_read(conn, 100)) != NULL) {
 8001952:	e030      	b.n	80019b6 <CANReceive+0x96>
	  		switch (csp_conn_dport(conn)) {
 8001954:	6938      	ldr	r0, [r7, #16]
 8001956:	f001 f8b9 	bl	8002acc <csp_conn_dport>
 800195a:	4603      	mov	r3, r0
 800195c:	2b30      	cmp	r3, #48	@ 0x30
 800195e:	d015      	beq.n	800198c <CANReceive+0x6c>
 8001960:	2b30      	cmp	r3, #48	@ 0x30
 8001962:	dc27      	bgt.n	80019b4 <CANReceive+0x94>
 8001964:	2b0a      	cmp	r3, #10
 8001966:	dc0f      	bgt.n	8001988 <CANReceive+0x68>
 8001968:	2b00      	cmp	r3, #0
 800196a:	db23      	blt.n	80019b4 <CANReceive+0x94>
 800196c:	461a      	mov	r2, r3
 800196e:	f240 530b 	movw	r3, #1291	@ 0x50b
 8001972:	40d3      	lsrs	r3, r2
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	2b00      	cmp	r3, #0
 800197a:	bf14      	ite	ne
 800197c:	2301      	movne	r3, #1
 800197e:	2300      	moveq	r3, #0
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b00      	cmp	r3, #0
 8001984:	d102      	bne.n	800198c <CANReceive+0x6c>
	  			break;

	  		default:
	  			/* Call the default CSP service handler, handle pings, buffer use, etc. */
	  	//				csp_service_handler(conn, packet);
	  			break;
 8001986:	e015      	b.n	80019b4 <CANReceive+0x94>
	  		switch (csp_conn_dport(conn)) {
 8001988:	2b1a      	cmp	r3, #26
 800198a:	d113      	bne.n	80019b4 <CANReceive+0x94>
	  			csp_log_info("Packet received on MY_SERVER_PORT: %s", (char *) packet->data);
 800198c:	4b0f      	ldr	r3, [pc, #60]	@ (80019cc <CANReceive+0xac>)
 800198e:	789b      	ldrb	r3, [r3, #2]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d006      	beq.n	80019a2 <CANReceive+0x82>
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	3310      	adds	r3, #16
 8001998:	461a      	mov	r2, r3
 800199a:	490d      	ldr	r1, [pc, #52]	@ (80019d0 <CANReceive+0xb0>)
 800199c:	2002      	movs	r0, #2
 800199e:	f001 f95d 	bl	8002c5c <do_csp_debug>
	  			csp_buffer_free(packet);
 80019a2:	68f8      	ldr	r0, [r7, #12]
 80019a4:	f000 fd8a 	bl	80024bc <csp_buffer_free>
	  			++server_received;
 80019a8:	4b0a      	ldr	r3, [pc, #40]	@ (80019d4 <CANReceive+0xb4>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	3301      	adds	r3, #1
 80019ae:	4a09      	ldr	r2, [pc, #36]	@ (80019d4 <CANReceive+0xb4>)
 80019b0:	6013      	str	r3, [r2, #0]
	  			break;
 80019b2:	e000      	b.n	80019b6 <CANReceive+0x96>
	  			break;
 80019b4:	bf00      	nop
	  	while ((packet = csp_read(conn, 100)) != NULL) {
 80019b6:	2164      	movs	r1, #100	@ 0x64
 80019b8:	6938      	ldr	r0, [r7, #16]
 80019ba:	f001 fb41 	bl	8003040 <csp_read>
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1c6      	bne.n	8001954 <CANReceive+0x34>
 80019c6:	e7bb      	b.n	8001940 <CANReceive+0x20>
	  		continue;
 80019c8:	bf00      	nop
  {
 80019ca:	e7b9      	b.n	8001940 <CANReceive+0x20>
 80019cc:	20000004 	.word	0x20000004
 80019d0:	0800f074 	.word	0x0800f074
 80019d4:	20000310 	.word	0x20000310

080019d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a04      	ldr	r2, [pc, #16]	@ (80019f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d101      	bne.n	80019ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80019ea:	f002 feb7 	bl	800475c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40010000 	.word	0x40010000

080019fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001a00:	b672      	cpsid	i
}
 8001a02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a04:	bf00      	nop
 8001a06:	e7fd      	b.n	8001a04 <Error_Handler+0x8>

08001a08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	607b      	str	r3, [r7, #4]
 8001a12:	4b12      	ldr	r3, [pc, #72]	@ (8001a5c <HAL_MspInit+0x54>)
 8001a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a16:	4a11      	ldr	r2, [pc, #68]	@ (8001a5c <HAL_MspInit+0x54>)
 8001a18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a5c <HAL_MspInit+0x54>)
 8001a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a26:	607b      	str	r3, [r7, #4]
 8001a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	603b      	str	r3, [r7, #0]
 8001a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a5c <HAL_MspInit+0x54>)
 8001a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a32:	4a0a      	ldr	r2, [pc, #40]	@ (8001a5c <HAL_MspInit+0x54>)
 8001a34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a38:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a3a:	4b08      	ldr	r3, [pc, #32]	@ (8001a5c <HAL_MspInit+0x54>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a42:	603b      	str	r3, [r7, #0]
 8001a44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a46:	2200      	movs	r2, #0
 8001a48:	210f      	movs	r1, #15
 8001a4a:	f06f 0001 	mvn.w	r0, #1
 8001a4e:	f003 fdbf 	bl	80055d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40023800 	.word	0x40023800

08001a60 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08a      	sub	sp, #40	@ 0x28
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a68:	f107 0314 	add.w	r3, r7, #20
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]
 8001a76:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a1d      	ldr	r2, [pc, #116]	@ (8001af4 <HAL_CAN_MspInit+0x94>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d134      	bne.n	8001aec <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	613b      	str	r3, [r7, #16]
 8001a86:	4b1c      	ldr	r3, [pc, #112]	@ (8001af8 <HAL_CAN_MspInit+0x98>)
 8001a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8a:	4a1b      	ldr	r2, [pc, #108]	@ (8001af8 <HAL_CAN_MspInit+0x98>)
 8001a8c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a90:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a92:	4b19      	ldr	r3, [pc, #100]	@ (8001af8 <HAL_CAN_MspInit+0x98>)
 8001a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a9a:	613b      	str	r3, [r7, #16]
 8001a9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	4b15      	ldr	r3, [pc, #84]	@ (8001af8 <HAL_CAN_MspInit+0x98>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa6:	4a14      	ldr	r2, [pc, #80]	@ (8001af8 <HAL_CAN_MspInit+0x98>)
 8001aa8:	f043 0302 	orr.w	r3, r3, #2
 8001aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aae:	4b12      	ldr	r3, [pc, #72]	@ (8001af8 <HAL_CAN_MspInit+0x98>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001aba:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001acc:	2309      	movs	r3, #9
 8001ace:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad0:	f107 0314 	add.w	r3, r7, #20
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4809      	ldr	r0, [pc, #36]	@ (8001afc <HAL_CAN_MspInit+0x9c>)
 8001ad8:	f003 fda4 	bl	8005624 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001adc:	2200      	movs	r2, #0
 8001ade:	2105      	movs	r1, #5
 8001ae0:	2014      	movs	r0, #20
 8001ae2:	f003 fd75 	bl	80055d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001ae6:	2014      	movs	r0, #20
 8001ae8:	f003 fd8e 	bl	8005608 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001aec:	bf00      	nop
 8001aee:	3728      	adds	r7, #40	@ 0x28
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40006400 	.word	0x40006400
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40020400 	.word	0x40020400

08001b00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b08c      	sub	sp, #48	@ 0x30
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001b10:	2300      	movs	r3, #0
 8001b12:	60bb      	str	r3, [r7, #8]
 8001b14:	4b2e      	ldr	r3, [pc, #184]	@ (8001bd0 <HAL_InitTick+0xd0>)
 8001b16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b18:	4a2d      	ldr	r2, [pc, #180]	@ (8001bd0 <HAL_InitTick+0xd0>)
 8001b1a:	f043 0301 	orr.w	r3, r3, #1
 8001b1e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b20:	4b2b      	ldr	r3, [pc, #172]	@ (8001bd0 <HAL_InitTick+0xd0>)
 8001b22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	60bb      	str	r3, [r7, #8]
 8001b2a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b2c:	f107 020c 	add.w	r2, r7, #12
 8001b30:	f107 0310 	add.w	r3, r7, #16
 8001b34:	4611      	mov	r1, r2
 8001b36:	4618      	mov	r0, r3
 8001b38:	f004 fb88 	bl	800624c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001b3c:	f004 fb72 	bl	8006224 <HAL_RCC_GetPCLK2Freq>
 8001b40:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b44:	4a23      	ldr	r2, [pc, #140]	@ (8001bd4 <HAL_InitTick+0xd4>)
 8001b46:	fba2 2303 	umull	r2, r3, r2, r3
 8001b4a:	0c9b      	lsrs	r3, r3, #18
 8001b4c:	3b01      	subs	r3, #1
 8001b4e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001b50:	4b21      	ldr	r3, [pc, #132]	@ (8001bd8 <HAL_InitTick+0xd8>)
 8001b52:	4a22      	ldr	r2, [pc, #136]	@ (8001bdc <HAL_InitTick+0xdc>)
 8001b54:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001b56:	4b20      	ldr	r3, [pc, #128]	@ (8001bd8 <HAL_InitTick+0xd8>)
 8001b58:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b5c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001b5e:	4a1e      	ldr	r2, [pc, #120]	@ (8001bd8 <HAL_InitTick+0xd8>)
 8001b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b62:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001b64:	4b1c      	ldr	r3, [pc, #112]	@ (8001bd8 <HAL_InitTick+0xd8>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b6a:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd8 <HAL_InitTick+0xd8>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b70:	4b19      	ldr	r3, [pc, #100]	@ (8001bd8 <HAL_InitTick+0xd8>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001b76:	4818      	ldr	r0, [pc, #96]	@ (8001bd8 <HAL_InitTick+0xd8>)
 8001b78:	f004 fb9a 	bl	80062b0 <HAL_TIM_Base_Init>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001b82:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d11b      	bne.n	8001bc2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001b8a:	4813      	ldr	r0, [pc, #76]	@ (8001bd8 <HAL_InitTick+0xd8>)
 8001b8c:	f004 fbea 	bl	8006364 <HAL_TIM_Base_Start_IT>
 8001b90:	4603      	mov	r3, r0
 8001b92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001b96:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d111      	bne.n	8001bc2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001b9e:	2019      	movs	r0, #25
 8001ba0:	f003 fd32 	bl	8005608 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b0f      	cmp	r3, #15
 8001ba8:	d808      	bhi.n	8001bbc <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001baa:	2200      	movs	r2, #0
 8001bac:	6879      	ldr	r1, [r7, #4]
 8001bae:	2019      	movs	r0, #25
 8001bb0:	f003 fd0e 	bl	80055d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bb4:	4a0a      	ldr	r2, [pc, #40]	@ (8001be0 <HAL_InitTick+0xe0>)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6013      	str	r3, [r2, #0]
 8001bba:	e002      	b.n	8001bc2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001bc2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3730      	adds	r7, #48	@ 0x30
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	431bde83 	.word	0x431bde83
 8001bd8:	20000314 	.word	0x20000314
 8001bdc:	40010000 	.word	0x40010000
 8001be0:	2000004c 	.word	0x2000004c

08001be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001be8:	bf00      	nop
 8001bea:	e7fd      	b.n	8001be8 <NMI_Handler+0x4>

08001bec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bf0:	bf00      	nop
 8001bf2:	e7fd      	b.n	8001bf0 <HardFault_Handler+0x4>

08001bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bf8:	bf00      	nop
 8001bfa:	e7fd      	b.n	8001bf8 <MemManage_Handler+0x4>

08001bfc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c00:	bf00      	nop
 8001c02:	e7fd      	b.n	8001c00 <BusFault_Handler+0x4>

08001c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c08:	bf00      	nop
 8001c0a:	e7fd      	b.n	8001c08 <UsageFault_Handler+0x4>

08001c0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
	...

08001c1c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001c20:	4802      	ldr	r0, [pc, #8]	@ (8001c2c <CAN1_RX0_IRQHandler+0x10>)
 8001c22:	f003 f9ee 	bl	8005002 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	200002e0 	.word	0x200002e0

08001c30 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c34:	4802      	ldr	r0, [pc, #8]	@ (8001c40 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001c36:	f004 fc05 	bl	8006444 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20000314 	.word	0x20000314

08001c44 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	CSP_UART_IRQHandler();
 8001c48:	f7ff fc0e 	bl	8001468 <CSP_UART_IRQHandler>
  /* USER CODE END USART6_IRQn 0 */

  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001c4c:	bf00      	nop
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  return 1;
 8001c54:	2301      	movs	r3, #1
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <_kill>:

int _kill(int pid, int sig)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c6a:	f009 fedb 	bl	800ba24 <__errno>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2216      	movs	r2, #22
 8001c72:	601a      	str	r2, [r3, #0]
  return -1;
 8001c74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <_exit>:

void _exit (int status)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c88:	f04f 31ff 	mov.w	r1, #4294967295
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7ff ffe7 	bl	8001c60 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c92:	bf00      	nop
 8001c94:	e7fd      	b.n	8001c92 <_exit+0x12>

08001c96 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b086      	sub	sp, #24
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	60f8      	str	r0, [r7, #12]
 8001c9e:	60b9      	str	r1, [r7, #8]
 8001ca0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]
 8001ca6:	e00a      	b.n	8001cbe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ca8:	f3af 8000 	nop.w
 8001cac:	4601      	mov	r1, r0
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	1c5a      	adds	r2, r3, #1
 8001cb2:	60ba      	str	r2, [r7, #8]
 8001cb4:	b2ca      	uxtb	r2, r1
 8001cb6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	617b      	str	r3, [r7, #20]
 8001cbe:	697a      	ldr	r2, [r7, #20]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	dbf0      	blt.n	8001ca8 <_read+0x12>
  }

  return len;
 8001cc6:	687b      	ldr	r3, [r7, #4]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]
 8001ce0:	e009      	b.n	8001cf6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	1c5a      	adds	r2, r3, #1
 8001ce6:	60ba      	str	r2, [r7, #8]
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	617b      	str	r3, [r7, #20]
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	dbf1      	blt.n	8001ce2 <_write+0x12>
  }
  return len;
 8001cfe:	687b      	ldr	r3, [r7, #4]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3718      	adds	r7, #24
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <_close>:

int _close(int file)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d30:	605a      	str	r2, [r3, #4]
  return 0;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <_isatty>:

int _isatty(int file)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d48:	2301      	movs	r3, #1
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d56:	b480      	push	{r7}
 8001d58:	b085      	sub	sp, #20
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	60f8      	str	r0, [r7, #12]
 8001d5e:	60b9      	str	r1, [r7, #8]
 8001d60:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d62:	2300      	movs	r3, #0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d78:	4a14      	ldr	r2, [pc, #80]	@ (8001dcc <_sbrk+0x5c>)
 8001d7a:	4b15      	ldr	r3, [pc, #84]	@ (8001dd0 <_sbrk+0x60>)
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d84:	4b13      	ldr	r3, [pc, #76]	@ (8001dd4 <_sbrk+0x64>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d102      	bne.n	8001d92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d8c:	4b11      	ldr	r3, [pc, #68]	@ (8001dd4 <_sbrk+0x64>)
 8001d8e:	4a12      	ldr	r2, [pc, #72]	@ (8001dd8 <_sbrk+0x68>)
 8001d90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d92:	4b10      	ldr	r3, [pc, #64]	@ (8001dd4 <_sbrk+0x64>)
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4413      	add	r3, r2
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d207      	bcs.n	8001db0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001da0:	f009 fe40 	bl	800ba24 <__errno>
 8001da4:	4603      	mov	r3, r0
 8001da6:	220c      	movs	r2, #12
 8001da8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001daa:	f04f 33ff 	mov.w	r3, #4294967295
 8001dae:	e009      	b.n	8001dc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001db0:	4b08      	ldr	r3, [pc, #32]	@ (8001dd4 <_sbrk+0x64>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001db6:	4b07      	ldr	r3, [pc, #28]	@ (8001dd4 <_sbrk+0x64>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	4a05      	ldr	r2, [pc, #20]	@ (8001dd4 <_sbrk+0x64>)
 8001dc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3718      	adds	r7, #24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	20020000 	.word	0x20020000
 8001dd0:	00000400 	.word	0x00000400
 8001dd4:	2000035c 	.word	0x2000035c
 8001dd8:	20004f68 	.word	0x20004f68

08001ddc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001de0:	4b06      	ldr	r3, [pc, #24]	@ (8001dfc <SystemInit+0x20>)
 8001de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001de6:	4a05      	ldr	r2, [pc, #20]	@ (8001dfc <SystemInit+0x20>)
 8001de8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001dec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001df0:	bf00      	nop
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	e000ed00 	.word	0xe000ed00

08001e00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e04:	480d      	ldr	r0, [pc, #52]	@ (8001e3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e06:	490e      	ldr	r1, [pc, #56]	@ (8001e40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e08:	4a0e      	ldr	r2, [pc, #56]	@ (8001e44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e0c:	e002      	b.n	8001e14 <LoopCopyDataInit>

08001e0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e12:	3304      	adds	r3, #4

08001e14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e18:	d3f9      	bcc.n	8001e0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e1a:	4a0b      	ldr	r2, [pc, #44]	@ (8001e48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e1c:	4c0b      	ldr	r4, [pc, #44]	@ (8001e4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e20:	e001      	b.n	8001e26 <LoopFillZerobss>

08001e22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e24:	3204      	adds	r2, #4

08001e26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e28:	d3fb      	bcc.n	8001e22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e2a:	f7ff ffd7 	bl	8001ddc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e2e:	f009 fdff 	bl	800ba30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e32:	f7ff fb81 	bl	8001538 <main>
  bx  lr    
 8001e36:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e40:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 8001e44:	0801073c 	.word	0x0801073c
  ldr r2, =_sbss
 8001e48:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8001e4c:	20004f64 	.word	0x20004f64

08001e50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e50:	e7fe      	b.n	8001e50 <ADC_IRQHandler>
	...

08001e54 <csp_get_uptime_s>:

#include <csp/arch/csp_time.h>

static uint32_t uptime_s_offset = 0;

uint32_t csp_get_uptime_s(void) {
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0

	uint32_t seconds = csp_get_s();
 8001e5a:	f000 f9df 	bl	800221c <csp_get_s>
 8001e5e:	6078      	str	r0, [r7, #4]
	if (uptime_s_offset == 0) {
 8001e60:	4b07      	ldr	r3, [pc, #28]	@ (8001e80 <csp_get_uptime_s+0x2c>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d102      	bne.n	8001e6e <csp_get_uptime_s+0x1a>
		uptime_s_offset = seconds;
 8001e68:	4a05      	ldr	r2, [pc, #20]	@ (8001e80 <csp_get_uptime_s+0x2c>)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6013      	str	r3, [r2, #0]
	}
	return (seconds - uptime_s_offset);
 8001e6e:	4b04      	ldr	r3, [pc, #16]	@ (8001e80 <csp_get_uptime_s+0x2c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	1ad3      	subs	r3, r2, r3
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20000360 	.word	0x20000360

08001e84 <csp_malloc>:

#include <string.h>

#include <FreeRTOS.h>

void * csp_malloc(size_t size) {
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
	return pvPortMalloc(size);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f008 f9f5 	bl	800a27c <pvPortMalloc>
 8001e92:	4603      	mov	r3, r0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <csp_calloc>:

void * csp_calloc(size_t nmemb, size_t size) {
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
	size = (nmemb * size); 
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	fb02 f303 	mul.w	r3, r2, r3
 8001eae:	603b      	str	r3, [r7, #0]
	void * ptr = csp_malloc(size);
 8001eb0:	6838      	ldr	r0, [r7, #0]
 8001eb2:	f7ff ffe7 	bl	8001e84 <csp_malloc>
 8001eb6:	60f8      	str	r0, [r7, #12]
	if (ptr) {
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d004      	beq.n	8001ec8 <csp_calloc+0x2c>
		memset(ptr, 0, size);
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	68f8      	ldr	r0, [r7, #12]
 8001ec4:	f009 fcde 	bl	800b884 <memset>
	}
	return ptr;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <csp_free>:

void csp_free(void *ptr) {
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b082      	sub	sp, #8
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
	vPortFree(ptr);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f008 fa9c 	bl	800a418 <vPortFree>
}
 8001ee0:	bf00      	nop
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <csp_queue_create>:
#include <csp/arch/csp_queue.h>

#include <FreeRTOS.h>
#include <queue.h> // FreeRTOS

csp_queue_handle_t csp_queue_create(int length, size_t item_size) {
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
	return xQueueCreate(length, item_size);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	6839      	ldr	r1, [r7, #0]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f005 fd2c 	bl	8007956 <xQueueGenericCreate>
 8001efe:	4603      	mov	r3, r0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <csp_queue_remove>:

void csp_queue_remove(csp_queue_handle_t queue) {
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
	vQueueDelete(queue);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f006 f9e4 	bl	80082de <vQueueDelete>
}
 8001f16:	bf00      	nop
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <csp_queue_enqueue>:

int csp_queue_enqueue(csp_queue_handle_t handle, const void * value, uint32_t timeout) {
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b084      	sub	sp, #16
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	60f8      	str	r0, [r7, #12]
 8001f26:	60b9      	str	r1, [r7, #8]
 8001f28:	607a      	str	r2, [r7, #4]
	if (timeout != CSP_MAX_TIMEOUT)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
		timeout = timeout / portTICK_RATE_MS;
	return xQueueSendToBack(handle, value, timeout);
 8001f30:	2300      	movs	r3, #0
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	68b9      	ldr	r1, [r7, #8]
 8001f36:	68f8      	ldr	r0, [r7, #12]
 8001f38:	f005 fd9e 	bl	8007a78 <xQueueGenericSend>
 8001f3c:	4603      	mov	r3, r0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <csp_queue_enqueue_isr>:

int csp_queue_enqueue_isr(csp_queue_handle_t handle, const void * value, CSP_BASE_TYPE * task_woken) {
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b084      	sub	sp, #16
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	60f8      	str	r0, [r7, #12]
 8001f4e:	60b9      	str	r1, [r7, #8]
 8001f50:	607a      	str	r2, [r7, #4]
	return xQueueSendToBackFromISR(handle, value, task_woken);
 8001f52:	2300      	movs	r3, #0
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	68b9      	ldr	r1, [r7, #8]
 8001f58:	68f8      	ldr	r0, [r7, #12]
 8001f5a:	f005 fe8f 	bl	8007c7c <xQueueGenericSendFromISR>
 8001f5e:	4603      	mov	r3, r0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <csp_queue_dequeue>:

int csp_queue_dequeue(csp_queue_handle_t handle, void * buf, uint32_t timeout) {
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
	if (timeout != CSP_MAX_TIMEOUT)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f1b3 3fff 	cmp.w	r3, #4294967295
		timeout = timeout / portTICK_RATE_MS;
	return xQueueReceive(handle, buf, timeout);
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	68b9      	ldr	r1, [r7, #8]
 8001f7e:	68f8      	ldr	r0, [r7, #12]
 8001f80:	f005 ff1a 	bl	8007db8 <xQueueReceive>
 8001f84:	4603      	mov	r3, r0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3710      	adds	r7, #16
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <csp_queue_dequeue_isr>:

int csp_queue_dequeue_isr(csp_queue_handle_t handle, void * buf, CSP_BASE_TYPE * task_woken) {
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b084      	sub	sp, #16
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	60f8      	str	r0, [r7, #12]
 8001f96:	60b9      	str	r1, [r7, #8]
 8001f98:	607a      	str	r2, [r7, #4]
	return xQueueReceiveFromISR(handle, buf, task_woken);
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	68b9      	ldr	r1, [r7, #8]
 8001f9e:	68f8      	ldr	r0, [r7, #12]
 8001fa0:	f006 f8fc 	bl	800819c <xQueueReceiveFromISR>
 8001fa4:	4603      	mov	r3, r0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <csp_queue_size>:

int csp_queue_size(csp_queue_handle_t handle) {
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b082      	sub	sp, #8
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
	return uxQueueMessagesWaiting(handle);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f006 f972 	bl	80082a0 <uxQueueMessagesWaiting>
 8001fbc:	4603      	mov	r3, r0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <csp_mutex_create>:
*/

#include <csp/arch/csp_semaphore.h>
#include <csp/csp_debug.h>

int csp_mutex_create(csp_mutex_t * mutex) {
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b082      	sub	sp, #8
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
	*mutex = xSemaphoreCreateMutex();
 8001fce:	2001      	movs	r0, #1
 8001fd0:	f005 fd39 	bl	8007a46 <xQueueCreateMutex>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	601a      	str	r2, [r3, #0]
	if (*mutex) {
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <csp_mutex_create+0x20>
		return CSP_SEMAPHORE_OK;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e000      	b.n	8001fe8 <csp_mutex_create+0x22>
	} else {
		return CSP_SEMAPHORE_ERROR;
 8001fe6:	2300      	movs	r3, #0
	}
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <csp_mutex_lock>:

int csp_mutex_remove(csp_mutex_t * mutex) {
	return csp_bin_sem_remove(mutex);
}

int csp_mutex_lock(csp_mutex_t * mutex, uint32_t timeout) {
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
	return csp_bin_sem_wait(mutex, timeout);
 8001ffa:	6839      	ldr	r1, [r7, #0]
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f000 f82d 	bl	800205c <csp_bin_sem_wait>
 8002002:	4603      	mov	r3, r0
}
 8002004:	4618      	mov	r0, r3
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <csp_mutex_unlock>:

int csp_mutex_unlock(csp_mutex_t * mutex) {
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
	return csp_bin_sem_post(mutex);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 f847 	bl	80020a8 <csp_bin_sem_post>
 800201a:	4603      	mov	r3, r0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3708      	adds	r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <csp_bin_sem_create>:

int csp_bin_sem_create(csp_bin_sem_handle_t * sem) {
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
	vSemaphoreCreateBinary(*sem);
 800202c:	2203      	movs	r2, #3
 800202e:	2100      	movs	r1, #0
 8002030:	2001      	movs	r0, #1
 8002032:	f005 fc90 	bl	8007956 <xQueueGenericCreate>
 8002036:	4602      	mov	r2, r0
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d006      	beq.n	8002052 <csp_bin_sem_create+0x2e>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6818      	ldr	r0, [r3, #0]
 8002048:	2300      	movs	r3, #0
 800204a:	2200      	movs	r2, #0
 800204c:	2100      	movs	r1, #0
 800204e:	f005 fd13 	bl	8007a78 <xQueueGenericSend>
	return CSP_SEMAPHORE_OK;
 8002052:	2301      	movs	r3, #1
}
 8002054:	4618      	mov	r0, r3
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <csp_bin_sem_wait>:
		vSemaphoreDelete(*sem);
	}
	return CSP_SEMAPHORE_OK;
}

int csp_bin_sem_wait(csp_bin_sem_handle_t * sem, uint32_t timeout) {
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
	csp_log_lock("Wait: %p", sem);
 8002066:	4b0e      	ldr	r3, [pc, #56]	@ (80020a0 <csp_bin_sem_wait+0x44>)
 8002068:	799b      	ldrb	r3, [r3, #6]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d004      	beq.n	8002078 <csp_bin_sem_wait+0x1c>
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	490c      	ldr	r1, [pc, #48]	@ (80020a4 <csp_bin_sem_wait+0x48>)
 8002072:	2006      	movs	r0, #6
 8002074:	f000 fdf2 	bl	8002c5c <do_csp_debug>
	if (timeout != CSP_MAX_TIMEOUT) {
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	f1b3 3fff 	cmp.w	r3, #4294967295
		timeout = timeout / portTICK_RATE_MS;
	}
	if (xSemaphoreTake(*sem, timeout) == pdPASS) {
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6839      	ldr	r1, [r7, #0]
 8002084:	4618      	mov	r0, r3
 8002086:	f005 ff79 	bl	8007f7c <xQueueSemaphoreTake>
 800208a:	4603      	mov	r3, r0
 800208c:	2b01      	cmp	r3, #1
 800208e:	d101      	bne.n	8002094 <csp_bin_sem_wait+0x38>
		return CSP_SEMAPHORE_OK;
 8002090:	2301      	movs	r3, #1
 8002092:	e000      	b.n	8002096 <csp_bin_sem_wait+0x3a>
	}
	return CSP_SEMAPHORE_ERROR;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	20000004 	.word	0x20000004
 80020a4:	0800f0ac 	.word	0x0800f0ac

080020a8 <csp_bin_sem_post>:

int csp_bin_sem_post(csp_bin_sem_handle_t * sem) {
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
	csp_log_lock("Post: %p", sem);
 80020b0:	4b0c      	ldr	r3, [pc, #48]	@ (80020e4 <csp_bin_sem_post+0x3c>)
 80020b2:	799b      	ldrb	r3, [r3, #6]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d004      	beq.n	80020c2 <csp_bin_sem_post+0x1a>
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	490b      	ldr	r1, [pc, #44]	@ (80020e8 <csp_bin_sem_post+0x40>)
 80020bc:	2006      	movs	r0, #6
 80020be:	f000 fdcd 	bl	8002c5c <do_csp_debug>
	if (xSemaphoreGive(*sem) == pdPASS) {
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6818      	ldr	r0, [r3, #0]
 80020c6:	2300      	movs	r3, #0
 80020c8:	2200      	movs	r2, #0
 80020ca:	2100      	movs	r1, #0
 80020cc:	f005 fcd4 	bl	8007a78 <xQueueGenericSend>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d101      	bne.n	80020da <csp_bin_sem_post+0x32>
		return CSP_SEMAPHORE_OK;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e000      	b.n	80020dc <csp_bin_sem_post+0x34>
	}
	return CSP_SEMAPHORE_ERROR;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	20000004 	.word	0x20000004
 80020e8:	0800f0b8 	.word	0x0800f0b8

080020ec <csp_sys_set_color>:

	return (uint32_t) xPortGetFreeHeapSize();

}

void csp_sys_set_color(csp_color_t color) {
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	71fb      	strb	r3, [r7, #7]

	unsigned int color_code, modifier_code;
	switch (color & COLOR_MASK_COLOR) {
 80020f6:	79fb      	ldrb	r3, [r7, #7]
 80020f8:	f003 030f 	and.w	r3, r3, #15
 80020fc:	3b01      	subs	r3, #1
 80020fe:	2b07      	cmp	r3, #7
 8002100:	d82a      	bhi.n	8002158 <csp_sys_set_color+0x6c>
 8002102:	a201      	add	r2, pc, #4	@ (adr r2, 8002108 <csp_sys_set_color+0x1c>)
 8002104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002108:	08002129 	.word	0x08002129
 800210c:	0800212f 	.word	0x0800212f
 8002110:	08002135 	.word	0x08002135
 8002114:	0800213b 	.word	0x0800213b
 8002118:	08002141 	.word	0x08002141
 800211c:	08002147 	.word	0x08002147
 8002120:	0800214d 	.word	0x0800214d
 8002124:	08002153 	.word	0x08002153
		case COLOR_BLACK:
			color_code = 30; break;
 8002128:	231e      	movs	r3, #30
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	e017      	b.n	800215e <csp_sys_set_color+0x72>
		case COLOR_RED:
			color_code = 31; break;
 800212e:	231f      	movs	r3, #31
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	e014      	b.n	800215e <csp_sys_set_color+0x72>
		case COLOR_GREEN:
			color_code = 32; break;
 8002134:	2320      	movs	r3, #32
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	e011      	b.n	800215e <csp_sys_set_color+0x72>
		case COLOR_YELLOW:
			color_code = 33; break;
 800213a:	2321      	movs	r3, #33	@ 0x21
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	e00e      	b.n	800215e <csp_sys_set_color+0x72>
		case COLOR_BLUE:
			color_code = 34; break;
 8002140:	2322      	movs	r3, #34	@ 0x22
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	e00b      	b.n	800215e <csp_sys_set_color+0x72>
		case COLOR_MAGENTA:
			color_code = 35; break;
 8002146:	2323      	movs	r3, #35	@ 0x23
 8002148:	60fb      	str	r3, [r7, #12]
 800214a:	e008      	b.n	800215e <csp_sys_set_color+0x72>
		case COLOR_CYAN:
			color_code = 36; break;
 800214c:	2324      	movs	r3, #36	@ 0x24
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	e005      	b.n	800215e <csp_sys_set_color+0x72>
		case COLOR_WHITE:
			color_code = 37; break;
 8002152:	2325      	movs	r3, #37	@ 0x25
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	e002      	b.n	800215e <csp_sys_set_color+0x72>
		case COLOR_RESET:
		default:
			color_code = 0; break;
 8002158:	2300      	movs	r3, #0
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	bf00      	nop
	}
	
	switch (color & COLOR_MASK_MODIFIER) {
 800215e:	79fb      	ldrb	r3, [r7, #7]
 8002160:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002164:	2b40      	cmp	r3, #64	@ 0x40
 8002166:	d013      	beq.n	8002190 <csp_sys_set_color+0xa4>
 8002168:	2b40      	cmp	r3, #64	@ 0x40
 800216a:	dc14      	bgt.n	8002196 <csp_sys_set_color+0xaa>
 800216c:	2b30      	cmp	r3, #48	@ 0x30
 800216e:	d00c      	beq.n	800218a <csp_sys_set_color+0x9e>
 8002170:	2b30      	cmp	r3, #48	@ 0x30
 8002172:	dc10      	bgt.n	8002196 <csp_sys_set_color+0xaa>
 8002174:	2b10      	cmp	r3, #16
 8002176:	d002      	beq.n	800217e <csp_sys_set_color+0x92>
 8002178:	2b20      	cmp	r3, #32
 800217a:	d003      	beq.n	8002184 <csp_sys_set_color+0x98>
 800217c:	e00b      	b.n	8002196 <csp_sys_set_color+0xaa>
		case COLOR_BOLD:
			modifier_code = 1; break;
 800217e:	2301      	movs	r3, #1
 8002180:	60bb      	str	r3, [r7, #8]
 8002182:	e00b      	b.n	800219c <csp_sys_set_color+0xb0>
		case COLOR_UNDERLINE:
			modifier_code = 2; break;
 8002184:	2302      	movs	r3, #2
 8002186:	60bb      	str	r3, [r7, #8]
 8002188:	e008      	b.n	800219c <csp_sys_set_color+0xb0>
		case COLOR_BLINK:
			modifier_code = 3; break;
 800218a:	2303      	movs	r3, #3
 800218c:	60bb      	str	r3, [r7, #8]
 800218e:	e005      	b.n	800219c <csp_sys_set_color+0xb0>
		case COLOR_HIDE:
			modifier_code = 4; break;
 8002190:	2304      	movs	r3, #4
 8002192:	60bb      	str	r3, [r7, #8]
 8002194:	e002      	b.n	800219c <csp_sys_set_color+0xb0>
		case COLOR_NORMAL:
		default:
			modifier_code = 0; break;
 8002196:	2300      	movs	r3, #0
 8002198:	60bb      	str	r3, [r7, #8]
 800219a:	bf00      	nop
	}

	printf("\033[%u;%um", modifier_code, color_code);
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	68b9      	ldr	r1, [r7, #8]
 80021a0:	4803      	ldr	r0, [pc, #12]	@ (80021b0 <csp_sys_set_color+0xc4>)
 80021a2:	f009 f9eb 	bl	800b57c <iprintf>
}
 80021a6:	bf00      	nop
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	0800f0c4 	.word	0x0800f0c4

080021b4 <csp_thread_create>:
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
*/

#include <csp/arch/csp_thread.h>

int csp_thread_create(csp_thread_func_t routine, const char * const thread_name, unsigned int stack_size, void * parameters, unsigned int priority, csp_thread_handle_t * return_handle) {
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b088      	sub	sp, #32
 80021b8:	af02      	add	r7, sp, #8
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
 80021c0:	603b      	str	r3, [r7, #0]

	csp_thread_handle_t handle;
#if (tskKERNEL_VERSION_MAJOR >= 8)
	portBASE_TYPE ret = xTaskCreate(routine, thread_name, stack_size, parameters, priority, &handle);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	f107 0310 	add.w	r3, r7, #16
 80021ca:	9301      	str	r3, [sp, #4]
 80021cc:	6a3b      	ldr	r3, [r7, #32]
 80021ce:	9300      	str	r3, [sp, #0]
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	68b9      	ldr	r1, [r7, #8]
 80021d4:	68f8      	ldr	r0, [r7, #12]
 80021d6:	f006 fab7 	bl	8008748 <xTaskCreate>
 80021da:	6178      	str	r0, [r7, #20]
#else
	portBASE_TYPE ret = xTaskCreate(routine, (signed char *) thread_name, stack_size, parameters, priority, &handle);
#endif
	if (ret != pdTRUE) {
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d002      	beq.n	80021e8 <csp_thread_create+0x34>
		return CSP_ERR_NOMEM;
 80021e2:	f04f 33ff 	mov.w	r3, #4294967295
 80021e6:	e006      	b.n	80021f6 <csp_thread_create+0x42>
	}
	if (return_handle) {
 80021e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d002      	beq.n	80021f4 <csp_thread_create+0x40>
		*return_handle = handle;
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f2:	601a      	str	r2, [r3, #0]
	}
	return CSP_ERR_NONE;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3718      	adds	r7, #24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <csp_get_ms>:
#include <csp/arch/csp_time.h>

#include <FreeRTOS.h>
#include <task.h> // FreeRTOS

uint32_t csp_get_ms(void) {
 80021fe:	b580      	push	{r7, lr}
 8002200:	af00      	add	r7, sp, #0
	return (uint32_t)(xTaskGetTickCount() * (1000/configTICK_RATE_HZ));
 8002202:	f006 fd51 	bl	8008ca8 <xTaskGetTickCount>
 8002206:	4603      	mov	r3, r0
}
 8002208:	4618      	mov	r0, r3
 800220a:	bd80      	pop	{r7, pc}

0800220c <csp_get_ms_isr>:

uint32_t csp_get_ms_isr(void) {
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
	return (uint32_t)(xTaskGetTickCountFromISR() * (1000/configTICK_RATE_HZ));
 8002210:	f006 fd5a 	bl	8008cc8 <xTaskGetTickCountFromISR>
 8002214:	4603      	mov	r3, r0
}
 8002216:	4618      	mov	r0, r3
 8002218:	bd80      	pop	{r7, pc}
	...

0800221c <csp_get_s>:

uint32_t csp_get_s(void) {
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
	return (uint32_t)(xTaskGetTickCount()/configTICK_RATE_HZ);
 8002220:	f006 fd42 	bl	8008ca8 <xTaskGetTickCount>
 8002224:	4603      	mov	r3, r0
 8002226:	4a03      	ldr	r2, [pc, #12]	@ (8002234 <csp_get_s+0x18>)
 8002228:	fba2 2303 	umull	r2, r3, r2, r3
 800222c:	099b      	lsrs	r3, r3, #6
}
 800222e:	4618      	mov	r0, r3
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	10624dd3 	.word	0x10624dd3

08002238 <csp_buffer_init>:
CSP_STATIC_ASSERT(sizeof(csp_packet_t) == 16, csp_packet);
CSP_STATIC_ASSERT(offsetof(csp_packet_t, length) == 10, length_field_misaligned);
CSP_STATIC_ASSERT(offsetof(csp_packet_t, id) == 12, csp_id_field_misaligned);
CSP_STATIC_ASSERT(offsetof(csp_packet_t, data) == 16, data_field_misaligned);

int csp_buffer_init(void) {
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0

	// calculate total size and ensure correct alignment (int *) for buffers
	const unsigned int skbfsize = CSP_BUFFER_ALIGN * ((sizeof(csp_skbf_t) + csp_buffer_size() + (CSP_BUFFER_ALIGN - 1)) / CSP_BUFFER_ALIGN);
 800223e:	f000 f9b5 	bl	80025ac <csp_buffer_size>
 8002242:	4603      	mov	r3, r0
 8002244:	330b      	adds	r3, #11
 8002246:	f023 0303 	bic.w	r3, r3, #3
 800224a:	60bb      	str	r3, [r7, #8]

	csp_buffer_pool = csp_malloc(csp_conf.buffers * skbfsize);
 800224c:	4b23      	ldr	r3, [pc, #140]	@ (80022dc <csp_buffer_init+0xa4>)
 800224e:	8adb      	ldrh	r3, [r3, #22]
 8002250:	461a      	mov	r2, r3
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	fb02 f303 	mul.w	r3, r2, r3
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff fe13 	bl	8001e84 <csp_malloc>
 800225e:	4603      	mov	r3, r0
 8002260:	4a1f      	ldr	r2, [pc, #124]	@ (80022e0 <csp_buffer_init+0xa8>)
 8002262:	6013      	str	r3, [r2, #0]
	if (csp_buffer_pool == NULL)
 8002264:	4b1e      	ldr	r3, [pc, #120]	@ (80022e0 <csp_buffer_init+0xa8>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d030      	beq.n	80022ce <csp_buffer_init+0x96>
		goto fail_malloc;

	csp_buffers = csp_queue_create(csp_conf.buffers, sizeof(void *));
 800226c:	4b1b      	ldr	r3, [pc, #108]	@ (80022dc <csp_buffer_init+0xa4>)
 800226e:	8adb      	ldrh	r3, [r3, #22]
 8002270:	2104      	movs	r1, #4
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff fe38 	bl	8001ee8 <csp_queue_create>
 8002278:	4603      	mov	r3, r0
 800227a:	4a1a      	ldr	r2, [pc, #104]	@ (80022e4 <csp_buffer_init+0xac>)
 800227c:	6013      	str	r3, [r2, #0]
	if (!csp_buffers)
 800227e:	4b19      	ldr	r3, [pc, #100]	@ (80022e4 <csp_buffer_init+0xac>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d01f      	beq.n	80022c6 <csp_buffer_init+0x8e>
		goto fail_queue;

	for (unsigned int i = 0; i < csp_conf.buffers; i++) {
 8002286:	2300      	movs	r3, #0
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	e014      	b.n	80022b6 <csp_buffer_init+0x7e>
		csp_skbf_t * buf = (void *) &csp_buffer_pool[i * skbfsize];
 800228c:	4b14      	ldr	r3, [pc, #80]	@ (80022e0 <csp_buffer_init+0xa8>)
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	68b9      	ldr	r1, [r7, #8]
 8002294:	fb01 f303 	mul.w	r3, r1, r3
 8002298:	4413      	add	r3, r2
 800229a:	607b      	str	r3, [r7, #4]
		buf->skbf_addr = buf;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	605a      	str	r2, [r3, #4]
		csp_queue_enqueue(csp_buffers, &buf, 0);
 80022a2:	4b10      	ldr	r3, [pc, #64]	@ (80022e4 <csp_buffer_init+0xac>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	1d39      	adds	r1, r7, #4
 80022a8:	2200      	movs	r2, #0
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7ff fe37 	bl	8001f1e <csp_queue_enqueue>
	for (unsigned int i = 0; i < csp_conf.buffers; i++) {
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	3301      	adds	r3, #1
 80022b4:	60fb      	str	r3, [r7, #12]
 80022b6:	4b09      	ldr	r3, [pc, #36]	@ (80022dc <csp_buffer_init+0xa4>)
 80022b8:	8adb      	ldrh	r3, [r3, #22]
 80022ba:	461a      	mov	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	4293      	cmp	r3, r2
 80022c0:	d3e4      	bcc.n	800228c <csp_buffer_init+0x54>
	}

	return CSP_ERR_NONE;
 80022c2:	2300      	movs	r3, #0
 80022c4:	e006      	b.n	80022d4 <csp_buffer_init+0x9c>
		goto fail_queue;
 80022c6:	bf00      	nop

fail_queue:
	csp_buffer_free_resources();
 80022c8:	f000 f80e 	bl	80022e8 <csp_buffer_free_resources>
 80022cc:	e000      	b.n	80022d0 <csp_buffer_init+0x98>
		goto fail_malloc;
 80022ce:	bf00      	nop
fail_malloc:
	return CSP_ERR_NOMEM;
 80022d0:	f04f 33ff 	mov.w	r3, #4294967295

}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3710      	adds	r7, #16
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	20000388 	.word	0x20000388
 80022e0:	20000368 	.word	0x20000368
 80022e4:	20000364 	.word	0x20000364

080022e8 <csp_buffer_free_resources>:

void csp_buffer_free_resources(void) {
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0

	if (csp_buffers) {
 80022ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002318 <csp_buffer_free_resources+0x30>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d007      	beq.n	8002304 <csp_buffer_free_resources+0x1c>
		csp_queue_remove(csp_buffers);
 80022f4:	4b08      	ldr	r3, [pc, #32]	@ (8002318 <csp_buffer_free_resources+0x30>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff fe05 	bl	8001f08 <csp_queue_remove>
		csp_buffers = NULL;
 80022fe:	4b06      	ldr	r3, [pc, #24]	@ (8002318 <csp_buffer_free_resources+0x30>)
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
	}
	csp_free(csp_buffer_pool);
 8002304:	4b05      	ldr	r3, [pc, #20]	@ (800231c <csp_buffer_free_resources+0x34>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff fde2 	bl	8001ed2 <csp_free>
	csp_buffer_pool = NULL;
 800230e:	4b03      	ldr	r3, [pc, #12]	@ (800231c <csp_buffer_free_resources+0x34>)
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]

}
 8002314:	bf00      	nop
 8002316:	bd80      	pop	{r7, pc}
 8002318:	20000364 	.word	0x20000364
 800231c:	20000368 	.word	0x20000368

08002320 <csp_buffer_get_isr>:

void *csp_buffer_get_isr(size_t _data_size) {
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]

	if (_data_size > csp_conf.buffer_data_size)
 8002328:	4b14      	ldr	r3, [pc, #80]	@ (800237c <csp_buffer_get_isr+0x5c>)
 800232a:	8b1b      	ldrh	r3, [r3, #24]
 800232c:	461a      	mov	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4293      	cmp	r3, r2
 8002332:	d901      	bls.n	8002338 <csp_buffer_get_isr+0x18>
		return NULL;
 8002334:	2300      	movs	r3, #0
 8002336:	e01d      	b.n	8002374 <csp_buffer_get_isr+0x54>

	csp_skbf_t * buffer = NULL;
 8002338:	2300      	movs	r3, #0
 800233a:	60fb      	str	r3, [r7, #12]
	CSP_BASE_TYPE task_woken = 0;
 800233c:	2300      	movs	r3, #0
 800233e:	60bb      	str	r3, [r7, #8]
	csp_queue_dequeue_isr(csp_buffers, &buffer, &task_woken);
 8002340:	4b0f      	ldr	r3, [pc, #60]	@ (8002380 <csp_buffer_get_isr+0x60>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f107 0208 	add.w	r2, r7, #8
 8002348:	f107 010c 	add.w	r1, r7, #12
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff fe1e 	bl	8001f8e <csp_queue_dequeue_isr>
	if (buffer == NULL)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d101      	bne.n	800235c <csp_buffer_get_isr+0x3c>
		return NULL;
 8002358:	2300      	movs	r3, #0
 800235a:	e00b      	b.n	8002374 <csp_buffer_get_isr+0x54>

	if (buffer != buffer->skbf_addr)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	429a      	cmp	r2, r3
 8002364:	d001      	beq.n	800236a <csp_buffer_get_isr+0x4a>
		return NULL;
 8002366:	2300      	movs	r3, #0
 8002368:	e004      	b.n	8002374 <csp_buffer_get_isr+0x54>

	buffer->refcount = 1;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2201      	movs	r2, #1
 800236e:	601a      	str	r2, [r3, #0]
	return buffer->skbf_data;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	3308      	adds	r3, #8

}
 8002374:	4618      	mov	r0, r3
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	20000388 	.word	0x20000388
 8002380:	20000364 	.word	0x20000364

08002384 <csp_buffer_get>:

void *csp_buffer_get(size_t _data_size) {
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]

	if (_data_size > csp_conf.buffer_data_size) {
 800238c:	4b27      	ldr	r3, [pc, #156]	@ (800242c <csp_buffer_get+0xa8>)
 800238e:	8b1b      	ldrh	r3, [r3, #24]
 8002390:	461a      	mov	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4293      	cmp	r3, r2
 8002396:	d90c      	bls.n	80023b2 <csp_buffer_get+0x2e>
		csp_log_error("GET: Attempt to allocate too large data size %u > max %u", (unsigned int) _data_size, (unsigned int) csp_conf.buffer_data_size);
 8002398:	4b25      	ldr	r3, [pc, #148]	@ (8002430 <csp_buffer_get+0xac>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d006      	beq.n	80023ae <csp_buffer_get+0x2a>
 80023a0:	4b22      	ldr	r3, [pc, #136]	@ (800242c <csp_buffer_get+0xa8>)
 80023a2:	8b1b      	ldrh	r3, [r3, #24]
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	4923      	ldr	r1, [pc, #140]	@ (8002434 <csp_buffer_get+0xb0>)
 80023a8:	2000      	movs	r0, #0
 80023aa:	f000 fc57 	bl	8002c5c <do_csp_debug>
		return NULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	e037      	b.n	8002422 <csp_buffer_get+0x9e>
	}

	csp_skbf_t * buffer = NULL;
 80023b2:	2300      	movs	r3, #0
 80023b4:	60fb      	str	r3, [r7, #12]
	csp_queue_dequeue(csp_buffers, &buffer, 0);
 80023b6:	4b20      	ldr	r3, [pc, #128]	@ (8002438 <csp_buffer_get+0xb4>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f107 010c 	add.w	r1, r7, #12
 80023be:	2200      	movs	r2, #0
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff fdd1 	bl	8001f68 <csp_queue_dequeue>
	if (buffer == NULL) {
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d109      	bne.n	80023e0 <csp_buffer_get+0x5c>
		csp_log_error("GET: Out of buffers");
 80023cc:	4b18      	ldr	r3, [pc, #96]	@ (8002430 <csp_buffer_get+0xac>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d003      	beq.n	80023dc <csp_buffer_get+0x58>
 80023d4:	4919      	ldr	r1, [pc, #100]	@ (800243c <csp_buffer_get+0xb8>)
 80023d6:	2000      	movs	r0, #0
 80023d8:	f000 fc40 	bl	8002c5c <do_csp_debug>
		return NULL;
 80023dc:	2300      	movs	r3, #0
 80023de:	e020      	b.n	8002422 <csp_buffer_get+0x9e>
	}

	if (buffer != buffer->skbf_addr) {
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	685a      	ldr	r2, [r3, #4]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d00c      	beq.n	8002404 <csp_buffer_get+0x80>
		csp_log_error("GET: Corrupt CSP buffer %p != %p", buffer, buffer->skbf_addr);
 80023ea:	4b11      	ldr	r3, [pc, #68]	@ (8002430 <csp_buffer_get+0xac>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d006      	beq.n	8002400 <csp_buffer_get+0x7c>
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	4911      	ldr	r1, [pc, #68]	@ (8002440 <csp_buffer_get+0xbc>)
 80023fa:	2000      	movs	r0, #0
 80023fc:	f000 fc2e 	bl	8002c5c <do_csp_debug>
		return NULL;
 8002400:	2300      	movs	r3, #0
 8002402:	e00e      	b.n	8002422 <csp_buffer_get+0x9e>
	}

	csp_log_buffer("GET: %p", buffer);
 8002404:	4b0a      	ldr	r3, [pc, #40]	@ (8002430 <csp_buffer_get+0xac>)
 8002406:	78db      	ldrb	r3, [r3, #3]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d005      	beq.n	8002418 <csp_buffer_get+0x94>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	461a      	mov	r2, r3
 8002410:	490c      	ldr	r1, [pc, #48]	@ (8002444 <csp_buffer_get+0xc0>)
 8002412:	2003      	movs	r0, #3
 8002414:	f000 fc22 	bl	8002c5c <do_csp_debug>

	buffer->refcount = 1;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2201      	movs	r2, #1
 800241c:	601a      	str	r2, [r3, #0]
	return buffer->skbf_data;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	3308      	adds	r3, #8
}
 8002422:	4618      	mov	r0, r3
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	20000388 	.word	0x20000388
 8002430:	20000004 	.word	0x20000004
 8002434:	0800f0d0 	.word	0x0800f0d0
 8002438:	20000364 	.word	0x20000364
 800243c:	0800f10c 	.word	0x0800f10c
 8002440:	0800f120 	.word	0x0800f120
 8002444:	0800f144 	.word	0x0800f144

08002448 <csp_buffer_free_isr>:

void csp_buffer_free_isr(void *packet) {
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]

	if (packet == NULL) {
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d023      	beq.n	800249e <csp_buffer_free_isr+0x56>
		// freeing a NULL pointer is OK, e.g. standard free()
		return;
	}

	csp_skbf_t * buf = (void*)(((uint8_t*)packet) - sizeof(csp_skbf_t));
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	3b08      	subs	r3, #8
 800245a:	60fb      	str	r3, [r7, #12]

	if (((uintptr_t) buf % CSP_BUFFER_ALIGN) > 0) {
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f003 0303 	and.w	r3, r3, #3
 8002462:	2b00      	cmp	r3, #0
 8002464:	d11d      	bne.n	80024a2 <csp_buffer_free_isr+0x5a>
		return;
	}

	if (buf->skbf_addr != buf) {
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	685a      	ldr	r2, [r3, #4]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	429a      	cmp	r2, r3
 800246e:	d11a      	bne.n	80024a6 <csp_buffer_free_isr+0x5e>
		return;
	}

	if (buf->refcount == 0) {
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d018      	beq.n	80024aa <csp_buffer_free_isr+0x62>
		return;
	}

	if (--(buf->refcount) > 0) {
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	3a01      	subs	r2, #1
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d113      	bne.n	80024ae <csp_buffer_free_isr+0x66>
		return;
	}

	CSP_BASE_TYPE task_woken = 0;
 8002486:	2300      	movs	r3, #0
 8002488:	60bb      	str	r3, [r7, #8]
	csp_queue_enqueue_isr(csp_buffers, &buf, &task_woken);
 800248a:	4b0b      	ldr	r3, [pc, #44]	@ (80024b8 <csp_buffer_free_isr+0x70>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f107 0208 	add.w	r2, r7, #8
 8002492:	f107 010c 	add.w	r1, r7, #12
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff fd55 	bl	8001f46 <csp_queue_enqueue_isr>
 800249c:	e008      	b.n	80024b0 <csp_buffer_free_isr+0x68>
		return;
 800249e:	bf00      	nop
 80024a0:	e006      	b.n	80024b0 <csp_buffer_free_isr+0x68>
		return;
 80024a2:	bf00      	nop
 80024a4:	e004      	b.n	80024b0 <csp_buffer_free_isr+0x68>
		return;
 80024a6:	bf00      	nop
 80024a8:	e002      	b.n	80024b0 <csp_buffer_free_isr+0x68>
		return;
 80024aa:	bf00      	nop
 80024ac:	e000      	b.n	80024b0 <csp_buffer_free_isr+0x68>
		return;
 80024ae:	bf00      	nop

}
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	20000364 	.word	0x20000364

080024bc <csp_buffer_free>:

void csp_buffer_free(void *packet) {
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]

	if (packet == NULL) {
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d055      	beq.n	8002576 <csp_buffer_free+0xba>
		/* freeing a NULL pointer is OK, e.g. standard free() */
		return;
	}

	csp_skbf_t * buf = (void*)(((uint8_t*)packet) - sizeof(csp_skbf_t));
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	3b08      	subs	r3, #8
 80024ce:	60fb      	str	r3, [r7, #12]

	if (((uintptr_t) buf % CSP_BUFFER_ALIGN) > 0) {
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f003 0303 	and.w	r3, r3, #3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d009      	beq.n	80024ee <csp_buffer_free+0x32>
		csp_log_error("FREE: Unaligned CSP buffer pointer %p", packet);
 80024da:	4b2d      	ldr	r3, [pc, #180]	@ (8002590 <csp_buffer_free+0xd4>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d04b      	beq.n	800257a <csp_buffer_free+0xbe>
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	492b      	ldr	r1, [pc, #172]	@ (8002594 <csp_buffer_free+0xd8>)
 80024e6:	2000      	movs	r0, #0
 80024e8:	f000 fbb8 	bl	8002c5c <do_csp_debug>
		return;
 80024ec:	e045      	b.n	800257a <csp_buffer_free+0xbe>
	}

	if (buf->skbf_addr != buf) {
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	685a      	ldr	r2, [r3, #4]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d009      	beq.n	800250c <csp_buffer_free+0x50>
		csp_log_error("FREE: Invalid CSP buffer pointer %p", packet);
 80024f8:	4b25      	ldr	r3, [pc, #148]	@ (8002590 <csp_buffer_free+0xd4>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d03e      	beq.n	800257e <csp_buffer_free+0xc2>
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	4925      	ldr	r1, [pc, #148]	@ (8002598 <csp_buffer_free+0xdc>)
 8002504:	2000      	movs	r0, #0
 8002506:	f000 fba9 	bl	8002c5c <do_csp_debug>
		return;
 800250a:	e038      	b.n	800257e <csp_buffer_free+0xc2>
	}

	if (buf->refcount == 0) {
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d10a      	bne.n	800252a <csp_buffer_free+0x6e>
		csp_log_error("FREE: Buffer already free %p", buf);
 8002514:	4b1e      	ldr	r3, [pc, #120]	@ (8002590 <csp_buffer_free+0xd4>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d032      	beq.n	8002582 <csp_buffer_free+0xc6>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	461a      	mov	r2, r3
 8002520:	491e      	ldr	r1, [pc, #120]	@ (800259c <csp_buffer_free+0xe0>)
 8002522:	2000      	movs	r0, #0
 8002524:	f000 fb9a 	bl	8002c5c <do_csp_debug>
		return;
 8002528:	e02b      	b.n	8002582 <csp_buffer_free+0xc6>
	}

	if (--(buf->refcount) > 0) {
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	3a01      	subs	r2, #1
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00b      	beq.n	8002550 <csp_buffer_free+0x94>
		csp_log_error("FREE: Buffer %p in use by %u users", buf, buf->refcount);
 8002538:	4b15      	ldr	r3, [pc, #84]	@ (8002590 <csp_buffer_free+0xd4>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d022      	beq.n	8002586 <csp_buffer_free+0xca>
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4916      	ldr	r1, [pc, #88]	@ (80025a0 <csp_buffer_free+0xe4>)
 8002548:	2000      	movs	r0, #0
 800254a:	f000 fb87 	bl	8002c5c <do_csp_debug>
		return;
 800254e:	e01a      	b.n	8002586 <csp_buffer_free+0xca>
	}

	csp_log_buffer("FREE: %p", buf);
 8002550:	4b0f      	ldr	r3, [pc, #60]	@ (8002590 <csp_buffer_free+0xd4>)
 8002552:	78db      	ldrb	r3, [r3, #3]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d005      	beq.n	8002564 <csp_buffer_free+0xa8>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	461a      	mov	r2, r3
 800255c:	4911      	ldr	r1, [pc, #68]	@ (80025a4 <csp_buffer_free+0xe8>)
 800255e:	2003      	movs	r0, #3
 8002560:	f000 fb7c 	bl	8002c5c <do_csp_debug>
	csp_queue_enqueue(csp_buffers, &buf, 0);
 8002564:	4b10      	ldr	r3, [pc, #64]	@ (80025a8 <csp_buffer_free+0xec>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f107 010c 	add.w	r1, r7, #12
 800256c:	2200      	movs	r2, #0
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff fcd5 	bl	8001f1e <csp_queue_enqueue>
 8002574:	e008      	b.n	8002588 <csp_buffer_free+0xcc>
		return;
 8002576:	bf00      	nop
 8002578:	e006      	b.n	8002588 <csp_buffer_free+0xcc>
		return;
 800257a:	bf00      	nop
 800257c:	e004      	b.n	8002588 <csp_buffer_free+0xcc>
		return;
 800257e:	bf00      	nop
 8002580:	e002      	b.n	8002588 <csp_buffer_free+0xcc>
		return;
 8002582:	bf00      	nop
 8002584:	e000      	b.n	8002588 <csp_buffer_free+0xcc>
		return;
 8002586:	bf00      	nop

}
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	20000004 	.word	0x20000004
 8002594:	0800f14c 	.word	0x0800f14c
 8002598:	0800f174 	.word	0x0800f174
 800259c:	0800f198 	.word	0x0800f198
 80025a0:	0800f1b8 	.word	0x0800f1b8
 80025a4:	0800f1dc 	.word	0x0800f1dc
 80025a8:	20000364 	.word	0x20000364

080025ac <csp_buffer_size>:

int csp_buffer_remaining(void) {
	return csp_queue_size(csp_buffers);
}

size_t csp_buffer_size(void) {
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
	return (csp_conf.buffer_data_size + CSP_BUFFER_PACKET_OVERHEAD);
 80025b0:	4b03      	ldr	r3, [pc, #12]	@ (80025c0 <csp_buffer_size+0x14>)
 80025b2:	8b1b      	ldrh	r3, [r3, #24]
 80025b4:	3310      	adds	r3, #16
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	20000388 	.word	0x20000388

080025c4 <csp_buffer_data_size>:

size_t csp_buffer_data_size(void) {
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
	return csp_conf.buffer_data_size;
 80025c8:	4b03      	ldr	r3, [pc, #12]	@ (80025d8 <csp_buffer_data_size+0x14>)
 80025ca:	8b1b      	ldrh	r3, [r3, #24]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	20000388 	.word	0x20000388

080025dc <csp_conn_get_rxq>:
		}
	}
#endif
}

int csp_conn_get_rxq(int prio) {
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]

#if (CSP_USE_QOS)
	return prio;
#else
	return 0;
 80025e4:	2300      	movs	r3, #0
#endif

}
 80025e6:	4618      	mov	r0, r3
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
	...

080025f4 <csp_conn_enqueue_packet>:

int csp_conn_enqueue_packet(csp_conn_t * conn, csp_packet_t * packet) {
 80025f4:	b590      	push	{r4, r7, lr}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]

	if (!conn)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d102      	bne.n	800260a <csp_conn_enqueue_packet+0x16>
		return CSP_ERR_INVAL;
 8002604:	f06f 0301 	mvn.w	r3, #1
 8002608:	e039      	b.n	800267e <csp_conn_enqueue_packet+0x8a>

	int rxq;
	if (packet != NULL) {
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d009      	beq.n	8002624 <csp_conn_enqueue_packet+0x30>
		rxq = csp_conn_get_rxq(packet->id.pri);
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	7bdb      	ldrb	r3, [r3, #15]
 8002614:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8002618:	b2db      	uxtb	r3, r3
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff ffde 	bl	80025dc <csp_conn_get_rxq>
 8002620:	60f8      	str	r0, [r7, #12]
 8002622:	e001      	b.n	8002628 <csp_conn_enqueue_packet+0x34>
	} else {
		rxq = CSP_RX_QUEUES - 1;
 8002624:	2300      	movs	r3, #0
 8002626:	60fb      	str	r3, [r7, #12]
	}

	if (csp_queue_enqueue(conn->rx_queue[rxq], &packet, 0) != CSP_QUEUE_OK) {
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	3302      	adds	r3, #2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4413      	add	r3, r2
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	4639      	mov	r1, r7
 8002636:	2200      	movs	r2, #0
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff fc70 	bl	8001f1e <csp_queue_enqueue>
 800263e:	4603      	mov	r3, r0
 8002640:	2b01      	cmp	r3, #1
 8002642:	d01b      	beq.n	800267c <csp_conn_enqueue_packet+0x88>
		csp_log_error("RX queue %p full with %u items", conn->rx_queue[rxq], csp_queue_size(conn->rx_queue[rxq]));
 8002644:	4b10      	ldr	r3, [pc, #64]	@ (8002688 <csp_conn_enqueue_packet+0x94>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d014      	beq.n	8002676 <csp_conn_enqueue_packet+0x82>
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	3302      	adds	r3, #2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4413      	add	r3, r2
 8002656:	685c      	ldr	r4, [r3, #4]
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	3302      	adds	r3, #2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff fca2 	bl	8001fae <csp_queue_size>
 800266a:	4603      	mov	r3, r0
 800266c:	4622      	mov	r2, r4
 800266e:	4907      	ldr	r1, [pc, #28]	@ (800268c <csp_conn_enqueue_packet+0x98>)
 8002670:	2000      	movs	r0, #0
 8002672:	f000 faf3 	bl	8002c5c <do_csp_debug>
		return CSP_ERR_NOMEM;
 8002676:	f04f 33ff 	mov.w	r3, #4294967295
 800267a:	e000      	b.n	800267e <csp_conn_enqueue_packet+0x8a>
		csp_log_error("QOS event queue full");
		return CSP_ERR_NOMEM;
	}
#endif

	return CSP_ERR_NONE;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3714      	adds	r7, #20
 8002682:	46bd      	mov	sp, r7
 8002684:	bd90      	pop	{r4, r7, pc}
 8002686:	bf00      	nop
 8002688:	20000004 	.word	0x20000004
 800268c:	0800f1e8 	.word	0x0800f1e8

08002690 <csp_conn_init>:

int csp_conn_init(void) {
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0

	arr_conn = csp_calloc(csp_conf.conn_max, sizeof(*arr_conn));
 8002696:	4b4d      	ldr	r3, [pc, #308]	@ (80027cc <csp_conn_init+0x13c>)
 8002698:	7c1b      	ldrb	r3, [r3, #16]
 800269a:	211c      	movs	r1, #28
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff fbfd 	bl	8001e9c <csp_calloc>
 80026a2:	4603      	mov	r3, r0
 80026a4:	4a4a      	ldr	r2, [pc, #296]	@ (80027d0 <csp_conn_init+0x140>)
 80026a6:	6013      	str	r3, [r2, #0]
	if (arr_conn == NULL) {
 80026a8:	4b49      	ldr	r3, [pc, #292]	@ (80027d0 <csp_conn_init+0x140>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d10d      	bne.n	80026cc <csp_conn_init+0x3c>
		csp_log_error("Allocation for %u connections failed", csp_conf.conn_max);
 80026b0:	4b48      	ldr	r3, [pc, #288]	@ (80027d4 <csp_conn_init+0x144>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d006      	beq.n	80026c6 <csp_conn_init+0x36>
 80026b8:	4b44      	ldr	r3, [pc, #272]	@ (80027cc <csp_conn_init+0x13c>)
 80026ba:	7c1b      	ldrb	r3, [r3, #16]
 80026bc:	461a      	mov	r2, r3
 80026be:	4946      	ldr	r1, [pc, #280]	@ (80027d8 <csp_conn_init+0x148>)
 80026c0:	2000      	movs	r0, #0
 80026c2:	f000 facb 	bl	8002c5c <do_csp_debug>
		return CSP_ERR_NOMEM;
 80026c6:	f04f 33ff 	mov.w	r3, #4294967295
 80026ca:	e07b      	b.n	80027c4 <csp_conn_init+0x134>
	}

	if (csp_bin_sem_create(&conn_lock) != CSP_SEMAPHORE_OK) {
 80026cc:	4843      	ldr	r0, [pc, #268]	@ (80027dc <csp_conn_init+0x14c>)
 80026ce:	f7ff fca9 	bl	8002024 <csp_bin_sem_create>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d00a      	beq.n	80026ee <csp_conn_init+0x5e>
		csp_log_error("csp_bin_sem_create(&conn_lock) failed");
 80026d8:	4b3e      	ldr	r3, [pc, #248]	@ (80027d4 <csp_conn_init+0x144>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d003      	beq.n	80026e8 <csp_conn_init+0x58>
 80026e0:	493f      	ldr	r1, [pc, #252]	@ (80027e0 <csp_conn_init+0x150>)
 80026e2:	2000      	movs	r0, #0
 80026e4:	f000 faba 	bl	8002c5c <do_csp_debug>
		return CSP_ERR_NOMEM;
 80026e8:	f04f 33ff 	mov.w	r3, #4294967295
 80026ec:	e06a      	b.n	80027c4 <csp_conn_init+0x134>
	}

	/* Initialize source port */
	srand(csp_get_ms());
 80026ee:	f7ff fd86 	bl	80021fe <csp_get_ms>
 80026f2:	4603      	mov	r3, r0
 80026f4:	4618      	mov	r0, r3
 80026f6:	f007 ffaf 	bl	800a658 <srand>
	sport = (rand() % (CSP_ID_PORT_MAX - csp_conf.port_max_bind)) + (csp_conf.port_max_bind + 1);
 80026fa:	f007 ffdb 	bl	800a6b4 <rand>
 80026fe:	4602      	mov	r2, r0
 8002700:	4b32      	ldr	r3, [pc, #200]	@ (80027cc <csp_conn_init+0x13c>)
 8002702:	7cdb      	ldrb	r3, [r3, #19]
 8002704:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8002708:	fb92 f1f3 	sdiv	r1, r2, r3
 800270c:	fb01 f303 	mul.w	r3, r1, r3
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	b2da      	uxtb	r2, r3
 8002714:	4b2d      	ldr	r3, [pc, #180]	@ (80027cc <csp_conn_init+0x13c>)
 8002716:	7cdb      	ldrb	r3, [r3, #19]
 8002718:	4413      	add	r3, r2
 800271a:	b2db      	uxtb	r3, r3
 800271c:	3301      	adds	r3, #1
 800271e:	b2da      	uxtb	r2, r3
 8002720:	4b30      	ldr	r3, [pc, #192]	@ (80027e4 <csp_conn_init+0x154>)
 8002722:	701a      	strb	r2, [r3, #0]

	if (csp_bin_sem_create(&sport_lock) != CSP_SEMAPHORE_OK) {
 8002724:	4830      	ldr	r0, [pc, #192]	@ (80027e8 <csp_conn_init+0x158>)
 8002726:	f7ff fc7d 	bl	8002024 <csp_bin_sem_create>
 800272a:	4603      	mov	r3, r0
 800272c:	2b01      	cmp	r3, #1
 800272e:	d00a      	beq.n	8002746 <csp_conn_init+0xb6>
		csp_log_error("csp_bin_sem_create(&sport_lock) failed");
 8002730:	4b28      	ldr	r3, [pc, #160]	@ (80027d4 <csp_conn_init+0x144>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d003      	beq.n	8002740 <csp_conn_init+0xb0>
 8002738:	492c      	ldr	r1, [pc, #176]	@ (80027ec <csp_conn_init+0x15c>)
 800273a:	2000      	movs	r0, #0
 800273c:	f000 fa8e 	bl	8002c5c <do_csp_debug>
		return CSP_ERR_NOMEM;
 8002740:	f04f 33ff 	mov.w	r3, #4294967295
 8002744:	e03e      	b.n	80027c4 <csp_conn_init+0x134>
	}

	for (int i = 0; i < csp_conf.conn_max; i++) {
 8002746:	2300      	movs	r3, #0
 8002748:	60fb      	str	r3, [r7, #12]
 800274a:	e034      	b.n	80027b6 <csp_conn_init+0x126>
		csp_conn_t * conn = &arr_conn[i];
 800274c:	4b20      	ldr	r3, [pc, #128]	@ (80027d0 <csp_conn_init+0x140>)
 800274e:	6819      	ldr	r1, [r3, #0]
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	4613      	mov	r3, r2
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	1a9b      	subs	r3, r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	440b      	add	r3, r1
 800275c:	607b      	str	r3, [r7, #4]
		for (int prio = 0; prio < CSP_RX_QUEUES; prio++) {
 800275e:	2300      	movs	r3, #0
 8002760:	60bb      	str	r3, [r7, #8]
 8002762:	e022      	b.n	80027aa <csp_conn_init+0x11a>
			conn->rx_queue[prio] = csp_queue_create(csp_conf.conn_queue_length, sizeof(csp_packet_t *));
 8002764:	4b19      	ldr	r3, [pc, #100]	@ (80027cc <csp_conn_init+0x13c>)
 8002766:	7c5b      	ldrb	r3, [r3, #17]
 8002768:	2104      	movs	r1, #4
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff fbbc 	bl	8001ee8 <csp_queue_create>
 8002770:	4601      	mov	r1, r0
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	3302      	adds	r3, #2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	4413      	add	r3, r2
 800277c:	6059      	str	r1, [r3, #4]
			if (conn->rx_queue[prio] == NULL) {
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	3302      	adds	r3, #2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	4413      	add	r3, r2
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10a      	bne.n	80027a4 <csp_conn_init+0x114>
				csp_log_error("rx_queue = csp_queue_create() failed");
 800278e:	4b11      	ldr	r3, [pc, #68]	@ (80027d4 <csp_conn_init+0x144>)
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <csp_conn_init+0x10e>
 8002796:	4916      	ldr	r1, [pc, #88]	@ (80027f0 <csp_conn_init+0x160>)
 8002798:	2000      	movs	r0, #0
 800279a:	f000 fa5f 	bl	8002c5c <do_csp_debug>
				return CSP_ERR_NOMEM;
 800279e:	f04f 33ff 	mov.w	r3, #4294967295
 80027a2:	e00f      	b.n	80027c4 <csp_conn_init+0x134>
		for (int prio = 0; prio < CSP_RX_QUEUES; prio++) {
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	3301      	adds	r3, #1
 80027a8:	60bb      	str	r3, [r7, #8]
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	ddd9      	ble.n	8002764 <csp_conn_init+0xd4>
	for (int i = 0; i < csp_conf.conn_max; i++) {
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	3301      	adds	r3, #1
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	4b05      	ldr	r3, [pc, #20]	@ (80027cc <csp_conn_init+0x13c>)
 80027b8:	7c1b      	ldrb	r3, [r3, #16]
 80027ba:	461a      	mov	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	4293      	cmp	r3, r2
 80027c0:	dbc4      	blt.n	800274c <csp_conn_init+0xbc>
			return CSP_ERR_NOMEM;
		}
#endif
	}

	return CSP_ERR_NONE;
 80027c2:	2300      	movs	r3, #0

}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	20000388 	.word	0x20000388
 80027d0:	2000036c 	.word	0x2000036c
 80027d4:	20000004 	.word	0x20000004
 80027d8:	0800f208 	.word	0x0800f208
 80027dc:	20000370 	.word	0x20000370
 80027e0:	0800f230 	.word	0x0800f230
 80027e4:	20000374 	.word	0x20000374
 80027e8:	20000378 	.word	0x20000378
 80027ec:	0800f258 	.word	0x0800f258
 80027f0:	0800f280 	.word	0x0800f280

080027f4 <csp_conn_find>:

        sport = 0;
    }
}

csp_conn_t * csp_conn_find(uint32_t id, uint32_t mask) {
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]

	/* Search for matching connection */
	id = (id & mask);
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	4013      	ands	r3, r2
 8002804:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < csp_conf.conn_max; i++) {
 8002806:	2300      	movs	r3, #0
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	e01c      	b.n	8002846 <csp_conn_find+0x52>
		csp_conn_t * conn = &arr_conn[i];
 800280c:	4b14      	ldr	r3, [pc, #80]	@ (8002860 <csp_conn_find+0x6c>)
 800280e:	6819      	ldr	r1, [r3, #0]
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	4613      	mov	r3, r2
 8002814:	00db      	lsls	r3, r3, #3
 8002816:	1a9b      	subs	r3, r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	440b      	add	r3, r1
 800281c:	60bb      	str	r3, [r7, #8]
		if ((conn->state == CONN_OPEN) && (conn->type == CONN_CLIENT) && ((conn->idin.ext & mask) == id)) {
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	785b      	ldrb	r3, [r3, #1]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d10c      	bne.n	8002840 <csp_conn_find+0x4c>
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d108      	bne.n	8002840 <csp_conn_find+0x4c>
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	4013      	ands	r3, r2
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	429a      	cmp	r2, r3
 800283a:	d101      	bne.n	8002840 <csp_conn_find+0x4c>
			return conn;
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	e009      	b.n	8002854 <csp_conn_find+0x60>
	for (int i = 0; i < csp_conf.conn_max; i++) {
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	3301      	adds	r3, #1
 8002844:	60fb      	str	r3, [r7, #12]
 8002846:	4b07      	ldr	r3, [pc, #28]	@ (8002864 <csp_conn_find+0x70>)
 8002848:	7c1b      	ldrb	r3, [r3, #16]
 800284a:	461a      	mov	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4293      	cmp	r3, r2
 8002850:	dbdc      	blt.n	800280c <csp_conn_find+0x18>
		}
	}
	
	return NULL;
 8002852:	2300      	movs	r3, #0

}
 8002854:	4618      	mov	r0, r3
 8002856:	3714      	adds	r7, #20
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr
 8002860:	2000036c 	.word	0x2000036c
 8002864:	20000388 	.word	0x20000388

08002868 <csp_conn_flush_rx_queue>:

static int csp_conn_flush_rx_queue(csp_conn_t * conn) {
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
	csp_packet_t * packet;

	int prio;

	/* Flush packet queues */
	for (prio = 0; prio < CSP_RX_QUEUES; prio++) {
 8002870:	2300      	movs	r3, #0
 8002872:	60fb      	str	r3, [r7, #12]
 8002874:	e018      	b.n	80028a8 <csp_conn_flush_rx_queue+0x40>
		while (csp_queue_dequeue(conn->rx_queue[prio], &packet, 0) == CSP_QUEUE_OK)
			if (packet != NULL)
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d003      	beq.n	8002884 <csp_conn_flush_rx_queue+0x1c>
				csp_buffer_free(packet);
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	4618      	mov	r0, r3
 8002880:	f7ff fe1c 	bl	80024bc <csp_buffer_free>
		while (csp_queue_dequeue(conn->rx_queue[prio], &packet, 0) == CSP_QUEUE_OK)
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	3302      	adds	r3, #2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4413      	add	r3, r2
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f107 0108 	add.w	r1, r7, #8
 8002894:	2200      	movs	r2, #0
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff fb66 	bl	8001f68 <csp_queue_dequeue>
 800289c:	4603      	mov	r3, r0
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d0e9      	beq.n	8002876 <csp_conn_flush_rx_queue+0xe>
	for (prio = 0; prio < CSP_RX_QUEUES; prio++) {
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	3301      	adds	r3, #1
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	ddea      	ble.n	8002884 <csp_conn_flush_rx_queue+0x1c>
#if (CSP_USE_QOS)
	int event;
	while (csp_queue_dequeue(conn->rx_event, &event, 0) == CSP_QUEUE_OK);
#endif

	return CSP_ERR_NONE;
 80028ae:	2300      	movs	r3, #0

}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3710      	adds	r7, #16
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <csp_conn_allocate>:

csp_conn_t * csp_conn_allocate(csp_conn_type_t type) {
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	71fb      	strb	r3, [r7, #7]

	static uint8_t csp_conn_last_given = 0;

	if (csp_bin_sem_wait(&conn_lock, CSP_MAX_TIMEOUT) != CSP_SEMAPHORE_OK) {
 80028c2:	f04f 31ff 	mov.w	r1, #4294967295
 80028c6:	4838      	ldr	r0, [pc, #224]	@ (80029a8 <csp_conn_allocate+0xf0>)
 80028c8:	f7ff fbc8 	bl	800205c <csp_bin_sem_wait>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d009      	beq.n	80028e6 <csp_conn_allocate+0x2e>
		csp_log_error("Failed to lock conn array");
 80028d2:	4b36      	ldr	r3, [pc, #216]	@ (80029ac <csp_conn_allocate+0xf4>)
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d003      	beq.n	80028e2 <csp_conn_allocate+0x2a>
 80028da:	4935      	ldr	r1, [pc, #212]	@ (80029b0 <csp_conn_allocate+0xf8>)
 80028dc:	2000      	movs	r0, #0
 80028de:	f000 f9bd 	bl	8002c5c <do_csp_debug>
		return NULL;
 80028e2:	2300      	movs	r3, #0
 80028e4:	e05b      	b.n	800299e <csp_conn_allocate+0xe6>
	}

	/* Search for free connection */
	csp_conn_t * conn = NULL;
 80028e6:	2300      	movs	r3, #0
 80028e8:	617b      	str	r3, [r7, #20]
	int i = csp_conn_last_given;
 80028ea:	4b32      	ldr	r3, [pc, #200]	@ (80029b4 <csp_conn_allocate+0xfc>)
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	613b      	str	r3, [r7, #16]
	for (int j = 0; j < csp_conf.conn_max; j++) {
 80028f0:	2300      	movs	r3, #0
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	e019      	b.n	800292a <csp_conn_allocate+0x72>
		i = (i + 1) % csp_conf.conn_max;
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	3301      	adds	r3, #1
 80028fa:	4a2f      	ldr	r2, [pc, #188]	@ (80029b8 <csp_conn_allocate+0x100>)
 80028fc:	7c12      	ldrb	r2, [r2, #16]
 80028fe:	fb93 f1f2 	sdiv	r1, r3, r2
 8002902:	fb01 f202 	mul.w	r2, r1, r2
 8002906:	1a9b      	subs	r3, r3, r2
 8002908:	613b      	str	r3, [r7, #16]
		conn = &arr_conn[i];
 800290a:	4b2c      	ldr	r3, [pc, #176]	@ (80029bc <csp_conn_allocate+0x104>)
 800290c:	6819      	ldr	r1, [r3, #0]
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	4613      	mov	r3, r2
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	1a9b      	subs	r3, r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	440b      	add	r3, r1
 800291a:	617b      	str	r3, [r7, #20]
		if (conn->state == CONN_CLOSED) {
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	785b      	ldrb	r3, [r3, #1]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d009      	beq.n	8002938 <csp_conn_allocate+0x80>
	for (int j = 0; j < csp_conf.conn_max; j++) {
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	3301      	adds	r3, #1
 8002928:	60fb      	str	r3, [r7, #12]
 800292a:	4b23      	ldr	r3, [pc, #140]	@ (80029b8 <csp_conn_allocate+0x100>)
 800292c:	7c1b      	ldrb	r3, [r3, #16]
 800292e:	461a      	mov	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4293      	cmp	r3, r2
 8002934:	dbdf      	blt.n	80028f6 <csp_conn_allocate+0x3e>
 8002936:	e000      	b.n	800293a <csp_conn_allocate+0x82>
			break;
 8002938:	bf00      	nop
		}
	}

	if (conn && (conn->state == CONN_CLOSED)) {
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d01a      	beq.n	8002976 <csp_conn_allocate+0xbe>
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	785b      	ldrb	r3, [r3, #1]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d116      	bne.n	8002976 <csp_conn_allocate+0xbe>
		conn->idin.ext = 0;
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	2200      	movs	r2, #0
 800294c:	605a      	str	r2, [r3, #4]
		conn->idout.ext = 0;
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	2200      	movs	r2, #0
 8002952:	609a      	str	r2, [r3, #8]
		conn->socket = NULL;
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	2200      	movs	r2, #0
 8002958:	611a      	str	r2, [r3, #16]
		conn->timestamp = 0;
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	2200      	movs	r2, #0
 800295e:	615a      	str	r2, [r3, #20]
		conn->type = type;
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	79fa      	ldrb	r2, [r7, #7]
 8002964:	701a      	strb	r2, [r3, #0]
		conn->state = CONN_OPEN;
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	2201      	movs	r2, #1
 800296a:	705a      	strb	r2, [r3, #1]
		csp_conn_last_given = i;
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	b2da      	uxtb	r2, r3
 8002970:	4b10      	ldr	r3, [pc, #64]	@ (80029b4 <csp_conn_allocate+0xfc>)
 8002972:	701a      	strb	r2, [r3, #0]
 8002974:	e001      	b.n	800297a <csp_conn_allocate+0xc2>
	} else {
		// no free connections
		conn = NULL;
 8002976:	2300      	movs	r3, #0
 8002978:	617b      	str	r3, [r7, #20]
	}

	csp_bin_sem_post(&conn_lock);
 800297a:	480b      	ldr	r0, [pc, #44]	@ (80029a8 <csp_conn_allocate+0xf0>)
 800297c:	f7ff fb94 	bl	80020a8 <csp_bin_sem_post>

	if (conn == NULL) {
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10a      	bne.n	800299c <csp_conn_allocate+0xe4>
		csp_log_error("No free connections, max %u", csp_conf.conn_max);
 8002986:	4b09      	ldr	r3, [pc, #36]	@ (80029ac <csp_conn_allocate+0xf4>)
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d006      	beq.n	800299c <csp_conn_allocate+0xe4>
 800298e:	4b0a      	ldr	r3, [pc, #40]	@ (80029b8 <csp_conn_allocate+0x100>)
 8002990:	7c1b      	ldrb	r3, [r3, #16]
 8002992:	461a      	mov	r2, r3
 8002994:	490a      	ldr	r1, [pc, #40]	@ (80029c0 <csp_conn_allocate+0x108>)
 8002996:	2000      	movs	r0, #0
 8002998:	f000 f960 	bl	8002c5c <do_csp_debug>
	}

	return conn;
 800299c:	697b      	ldr	r3, [r7, #20]

}
 800299e:	4618      	mov	r0, r3
 80029a0:	3718      	adds	r7, #24
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	20000370 	.word	0x20000370
 80029ac:	20000004 	.word	0x20000004
 80029b0:	0800f2a8 	.word	0x0800f2a8
 80029b4:	2000037c 	.word	0x2000037c
 80029b8:	20000388 	.word	0x20000388
 80029bc:	2000036c 	.word	0x2000036c
 80029c0:	0800f2c4 	.word	0x0800f2c4

080029c4 <csp_conn_new>:

csp_conn_t * csp_conn_new(csp_id_t idin, csp_id_t idout) {
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]

	/* Allocate connection structure */
	csp_conn_t * conn = csp_conn_allocate(CONN_CLIENT);
 80029ce:	2000      	movs	r0, #0
 80029d0:	f7ff ff72 	bl	80028b8 <csp_conn_allocate>
 80029d4:	60f8      	str	r0, [r7, #12]

	if (conn) {
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00d      	beq.n	80029f8 <csp_conn_new+0x34>
		/* No lock is needed here, because nobody else *
		 * has a reference to this connection yet.     */
		conn->idin.ext = idin.ext;
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	605a      	str	r2, [r3, #4]
		conn->idout.ext = idout.ext;
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	609a      	str	r2, [r3, #8]
		conn->timestamp = csp_get_ms();
 80029e8:	f7ff fc09 	bl	80021fe <csp_get_ms>
 80029ec:	4602      	mov	r2, r0
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	615a      	str	r2, [r3, #20]

		/* Ensure connection queue is empty */
		csp_conn_flush_rx_queue(conn);
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f7ff ff38 	bl	8002868 <csp_conn_flush_rx_queue>
	}

	return conn;
 80029f8:	68fb      	ldr	r3, [r7, #12]

}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <csp_close>:

int csp_close(csp_conn_t * conn) {
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b082      	sub	sp, #8
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
    return csp_conn_close(conn, CSP_RDP_CLOSED_BY_USERSPACE);
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 f805 	bl	8002a1c <csp_conn_close>
 8002a12:	4603      	mov	r3, r0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3708      	adds	r7, #8
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <csp_conn_close>:

int csp_conn_close(csp_conn_t * conn, uint8_t closed_by) {
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	460b      	mov	r3, r1
 8002a26:	70fb      	strb	r3, [r7, #3]

	if (conn == NULL) {
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <csp_conn_close+0x16>
		return CSP_ERR_NONE;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	e040      	b.n	8002ab4 <csp_conn_close+0x98>
	}

	if (conn->state == CONN_CLOSED) {
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	785b      	ldrb	r3, [r3, #1]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d109      	bne.n	8002a4e <csp_conn_close+0x32>
		csp_log_protocol("Conn already closed");
 8002a3a:	4b20      	ldr	r3, [pc, #128]	@ (8002abc <csp_conn_close+0xa0>)
 8002a3c:	795b      	ldrb	r3, [r3, #5]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d003      	beq.n	8002a4a <csp_conn_close+0x2e>
 8002a42:	491f      	ldr	r1, [pc, #124]	@ (8002ac0 <csp_conn_close+0xa4>)
 8002a44:	2005      	movs	r0, #5
 8002a46:	f000 f909 	bl	8002c5c <do_csp_debug>
		return CSP_ERR_NONE;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	e032      	b.n	8002ab4 <csp_conn_close+0x98>
		}
	}
#endif

	/* Lock connection array while closing connection */
	if (csp_bin_sem_wait(&conn_lock, CSP_MAX_TIMEOUT) != CSP_SEMAPHORE_OK) {
 8002a4e:	f04f 31ff 	mov.w	r1, #4294967295
 8002a52:	481c      	ldr	r0, [pc, #112]	@ (8002ac4 <csp_conn_close+0xa8>)
 8002a54:	f7ff fb02 	bl	800205c <csp_bin_sem_wait>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d00a      	beq.n	8002a74 <csp_conn_close+0x58>
		csp_log_error("Failed to lock conn array");
 8002a5e:	4b17      	ldr	r3, [pc, #92]	@ (8002abc <csp_conn_close+0xa0>)
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <csp_conn_close+0x52>
 8002a66:	4918      	ldr	r1, [pc, #96]	@ (8002ac8 <csp_conn_close+0xac>)
 8002a68:	2000      	movs	r0, #0
 8002a6a:	f000 f8f7 	bl	8002c5c <do_csp_debug>
		return CSP_ERR_TIMEDOUT;
 8002a6e:	f06f 0302 	mvn.w	r3, #2
 8002a72:	e01f      	b.n	8002ab4 <csp_conn_close+0x98>
	}

	/* Set to closed */
	conn->state = CONN_CLOSED;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	705a      	strb	r2, [r3, #1]

	/* Ensure connection queue is empty */
	csp_conn_flush_rx_queue(conn);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f7ff fef4 	bl	8002868 <csp_conn_flush_rx_queue>

        if (conn->socket && (conn->type == CONN_SERVER) && (conn->opts & (CSP_SO_CONN_LESS | CSP_SO_INTERNAL_LISTEN))) {
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d011      	beq.n	8002aac <csp_conn_close+0x90>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d10d      	bne.n	8002aac <csp_conn_close+0x90>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	f403 5388 	and.w	r3, r3, #4352	@ 0x1100
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d007      	beq.n	8002aac <csp_conn_close+0x90>
		csp_queue_remove(conn->socket);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff fa31 	bl	8001f08 <csp_queue_remove>
		conn->socket = NULL;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	611a      	str	r2, [r3, #16]
		csp_rdp_flush_all(conn);
	}
#endif

	/* Unlock connection array */
	csp_bin_sem_post(&conn_lock);
 8002aac:	4805      	ldr	r0, [pc, #20]	@ (8002ac4 <csp_conn_close+0xa8>)
 8002aae:	f7ff fafb 	bl	80020a8 <csp_bin_sem_post>

	return CSP_ERR_NONE;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3708      	adds	r7, #8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	20000004 	.word	0x20000004
 8002ac0:	0800f2e0 	.word	0x0800f2e0
 8002ac4:	20000370 	.word	0x20000370
 8002ac8:	0800f2a8 	.word	0x0800f2a8

08002acc <csp_conn_dport>:
	/* We have a successful connection */
	return conn;

}

int csp_conn_dport(csp_conn_t * conn) {
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]

	return conn->idin.dport;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f3c3 3385 	ubfx	r3, r3, #14, #6
 8002adc:	b2db      	uxtb	r3, r3

}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
	...

08002aec <csp_crc32_memory>:
		0xE330A81A, 0x115B2B19, 0x020BD8ED, 0xF0605BEE, 0x24AA3F05, 0xD6C1BC06, 0xC5914FF2, 0x37FACCF1,
		0x69E9F0D5, 0x9B8273D6, 0x88D28022, 0x7AB90321, 0xAE7367CA, 0x5C18E4C9, 0x4F48173D, 0xBD23943E,
		0xF36E6F75, 0x0105EC76, 0x12551F82, 0xE03E9C81, 0x34F4F86A, 0xC69F7B69, 0xD5CF889D, 0x27A40B9E,
		0x79B737BA, 0x8BDCB4B9, 0x988C474D, 0x6AE7C44E, 0xBE2DA0A5, 0x4C4623A6, 0x5F16D052, 0xAD7D5351 };

uint32_t csp_crc32_memory(const uint8_t * data, uint32_t length) {
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
   uint32_t crc;

   crc = 0xFFFFFFFF;
 8002af6:	f04f 33ff 	mov.w	r3, #4294967295
 8002afa:	60fb      	str	r3, [r7, #12]
   while (length--)
 8002afc:	e00e      	b.n	8002b1c <csp_crc32_memory+0x30>
#ifdef __AVR__
	   crc = pgm_read_dword(&crc_tab[(crc ^ *data++) & 0xFFL]) ^ (crc >> 8);
#else
	   crc = crc_tab[(crc ^ *data++) & 0xFFL] ^ (crc >> 8);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	1c5a      	adds	r2, r3, #1
 8002b02:	607a      	str	r2, [r7, #4]
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	461a      	mov	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	4053      	eors	r3, r2
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	4a0a      	ldr	r2, [pc, #40]	@ (8002b38 <csp_crc32_memory+0x4c>)
 8002b10:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	0a1b      	lsrs	r3, r3, #8
 8002b18:	4053      	eors	r3, r2
 8002b1a:	60fb      	str	r3, [r7, #12]
   while (length--)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	1e5a      	subs	r2, r3, #1
 8002b20:	603a      	str	r2, [r7, #0]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1eb      	bne.n	8002afe <csp_crc32_memory+0x12>
#endif

   return (crc ^ 0xFFFFFFFF);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	43db      	mvns	r3, r3
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3714      	adds	r7, #20
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	0800fe9c 	.word	0x0800fe9c

08002b3c <csp_crc32_append>:

int csp_crc32_append(csp_packet_t * packet, bool include_header) {
 8002b3c:	b590      	push	{r4, r7, lr}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	460b      	mov	r3, r1
 8002b46:	70fb      	strb	r3, [r7, #3]

	uint32_t crc;

	if ((packet->length + sizeof(crc)) > csp_buffer_data_size()) {
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	895b      	ldrh	r3, [r3, #10]
 8002b4c:	1d1c      	adds	r4, r3, #4
 8002b4e:	f7ff fd39 	bl	80025c4 <csp_buffer_data_size>
 8002b52:	4603      	mov	r3, r0
 8002b54:	429c      	cmp	r4, r3
 8002b56:	d902      	bls.n	8002b5e <csp_crc32_append+0x22>
		return CSP_ERR_NOMEM;
 8002b58:	f04f 33ff 	mov.w	r3, #4294967295
 8002b5c:	e02e      	b.n	8002bbc <csp_crc32_append+0x80>
	}

	/* Calculate CRC32, convert to network byte order */
	if (include_header) {
 8002b5e:	78fb      	ldrb	r3, [r7, #3]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00c      	beq.n	8002b7e <csp_crc32_append+0x42>
		crc = csp_crc32_memory((uint8_t *) &packet->id, packet->length + sizeof(packet->id));
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f103 020c 	add.w	r2, r3, #12
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	895b      	ldrh	r3, [r3, #10]
 8002b6e:	3304      	adds	r3, #4
 8002b70:	4619      	mov	r1, r3
 8002b72:	4610      	mov	r0, r2
 8002b74:	f7ff ffba 	bl	8002aec <csp_crc32_memory>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	60fb      	str	r3, [r7, #12]
 8002b7c:	e00a      	b.n	8002b94 <csp_crc32_append+0x58>
	} else {
		crc = csp_crc32_memory(packet->data, packet->length);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f103 0210 	add.w	r2, r3, #16
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	895b      	ldrh	r3, [r3, #10]
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4610      	mov	r0, r2
 8002b8c:	f7ff ffae 	bl	8002aec <csp_crc32_memory>
 8002b90:	4603      	mov	r3, r0
 8002b92:	60fb      	str	r3, [r7, #12]
	}
	/* Convert to network byte order */
	crc = csp_hton32(crc);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f000 f8ee 	bl	8002d78 <csp_hton32>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	60fb      	str	r3, [r7, #12]

	/* Copy checksum to packet */
	memcpy(&packet->data[packet->length], &crc, sizeof(crc));
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	895b      	ldrh	r3, [r3, #10]
 8002ba4:	3310      	adds	r3, #16
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	4413      	add	r3, r2
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	601a      	str	r2, [r3, #0]
	packet->length += sizeof(crc);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	895b      	ldrh	r3, [r3, #10]
 8002bb2:	3304      	adds	r3, #4
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	815a      	strh	r2, [r3, #10]

	return CSP_ERR_NONE;
 8002bba:	2300      	movs	r3, #0

}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3714      	adds	r7, #20
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd90      	pop	{r4, r7, pc}

08002bc4 <csp_crc32_verify>:

int csp_crc32_verify(csp_packet_t * packet, bool include_header) {
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	460b      	mov	r3, r1
 8002bce:	70fb      	strb	r3, [r7, #3]

	uint32_t crc;

	if (packet->length < sizeof(crc)) {
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	895b      	ldrh	r3, [r3, #10]
 8002bd4:	2b03      	cmp	r3, #3
 8002bd6:	d802      	bhi.n	8002bde <csp_crc32_verify+0x1a>
		return CSP_ERR_CRC32;
 8002bd8:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8002bdc:	e039      	b.n	8002c52 <csp_crc32_verify+0x8e>
	}

	/* Calculate CRC32, convert to network byte order */
	if (include_header) {
 8002bde:	78fb      	ldrb	r3, [r7, #3]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d00b      	beq.n	8002bfc <csp_crc32_verify+0x38>
		crc = csp_crc32_memory((uint8_t *) &packet->id, packet->length + sizeof(packet->id) - sizeof(crc));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f103 020c 	add.w	r2, r3, #12
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	895b      	ldrh	r3, [r3, #10]
 8002bee:	4619      	mov	r1, r3
 8002bf0:	4610      	mov	r0, r2
 8002bf2:	f7ff ff7b 	bl	8002aec <csp_crc32_memory>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	60fb      	str	r3, [r7, #12]
 8002bfa:	e00b      	b.n	8002c14 <csp_crc32_verify+0x50>
	} else {
		crc = csp_crc32_memory(packet->data, packet->length - sizeof(crc));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f103 0210 	add.w	r2, r3, #16
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	895b      	ldrh	r3, [r3, #10]
 8002c06:	3b04      	subs	r3, #4
 8002c08:	4619      	mov	r1, r3
 8002c0a:	4610      	mov	r0, r2
 8002c0c:	f7ff ff6e 	bl	8002aec <csp_crc32_memory>
 8002c10:	4603      	mov	r3, r0
 8002c12:	60fb      	str	r3, [r7, #12]
	}
	crc = csp_hton32(crc);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f000 f8ae 	bl	8002d78 <csp_hton32>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	60fb      	str	r3, [r7, #12]

	/* Compare calculated checksum with packet header */
	if (memcmp(&packet->data[packet->length] - sizeof(crc), &crc, sizeof(crc)) != 0) {
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	895b      	ldrh	r3, [r3, #10]
 8002c24:	3310      	adds	r3, #16
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	4413      	add	r3, r2
 8002c2a:	3b04      	subs	r3, #4
 8002c2c:	f107 010c 	add.w	r1, r7, #12
 8002c30:	2204      	movs	r2, #4
 8002c32:	4618      	mov	r0, r3
 8002c34:	f008 fe16 	bl	800b864 <memcmp>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d002      	beq.n	8002c44 <csp_crc32_verify+0x80>
		/* CRC32 failed */
		return CSP_ERR_CRC32;
 8002c3e:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8002c42:	e006      	b.n	8002c52 <csp_crc32_verify+0x8e>
	}

	/* Strip CRC32 */
	packet->length -= sizeof(crc);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	895b      	ldrh	r3, [r3, #10]
 8002c48:	3b04      	subs	r3, #4
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	815a      	strh	r2, [r3, #10]
	return CSP_ERR_NONE;
 8002c50:	2300      	movs	r3, #0

}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
	...

08002c5c <do_csp_debug>:
void csp_debug_hook_set(csp_debug_hook_func_t f) {

	csp_debug_hook_func = f;
}

void do_csp_debug(csp_debug_level_t level, const char *format, ...) {
 8002c5c:	b40e      	push	{r1, r2, r3}
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b085      	sub	sp, #20
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	4603      	mov	r3, r0
 8002c66:	71fb      	strb	r3, [r7, #7]

	int color = COLOR_RESET;
 8002c68:	23f0      	movs	r3, #240	@ 0xf0
 8002c6a:	60fb      	str	r3, [r7, #12]
	va_list args;

	/* Don't print anything if log level is disabled */
	if (level > CSP_LOCK || !csp_debug_level_enabled[level])
 8002c6c:	79fb      	ldrb	r3, [r7, #7]
 8002c6e:	2b06      	cmp	r3, #6
 8002c70:	d84f      	bhi.n	8002d12 <do_csp_debug+0xb6>
 8002c72:	79fb      	ldrb	r3, [r7, #7]
 8002c74:	4a2b      	ldr	r2, [pc, #172]	@ (8002d24 <do_csp_debug+0xc8>)
 8002c76:	5cd3      	ldrb	r3, [r2, r3]
 8002c78:	f083 0301 	eor.w	r3, r3, #1
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d147      	bne.n	8002d12 <do_csp_debug+0xb6>
		return;

	switch(level) {
 8002c82:	79fb      	ldrb	r3, [r7, #7]
 8002c84:	2b06      	cmp	r3, #6
 8002c86:	d846      	bhi.n	8002d16 <do_csp_debug+0xba>
 8002c88:	a201      	add	r2, pc, #4	@ (adr r2, 8002c90 <do_csp_debug+0x34>)
 8002c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c8e:	bf00      	nop
 8002c90:	08002cb3 	.word	0x08002cb3
 8002c94:	08002cb9 	.word	0x08002cb9
 8002c98:	08002cad 	.word	0x08002cad
 8002c9c:	08002cbf 	.word	0x08002cbf
 8002ca0:	08002cc5 	.word	0x08002cc5
 8002ca4:	08002ccb 	.word	0x08002ccb
 8002ca8:	08002cd1 	.word	0x08002cd1
	case CSP_INFO:
		color = COLOR_GREEN | COLOR_BOLD;
 8002cac:	2313      	movs	r3, #19
 8002cae:	60fb      	str	r3, [r7, #12]
		break;
 8002cb0:	e011      	b.n	8002cd6 <do_csp_debug+0x7a>
	case CSP_ERROR:
		color = COLOR_RED | COLOR_BOLD;
 8002cb2:	2312      	movs	r3, #18
 8002cb4:	60fb      	str	r3, [r7, #12]
		break;
 8002cb6:	e00e      	b.n	8002cd6 <do_csp_debug+0x7a>
	case CSP_WARN:
		color = COLOR_YELLOW | COLOR_BOLD;
 8002cb8:	2314      	movs	r3, #20
 8002cba:	60fb      	str	r3, [r7, #12]
		break;
 8002cbc:	e00b      	b.n	8002cd6 <do_csp_debug+0x7a>
	case CSP_BUFFER:
		color = COLOR_MAGENTA;
 8002cbe:	2306      	movs	r3, #6
 8002cc0:	60fb      	str	r3, [r7, #12]
		break;
 8002cc2:	e008      	b.n	8002cd6 <do_csp_debug+0x7a>
	case CSP_PACKET:
		color = COLOR_GREEN;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	60fb      	str	r3, [r7, #12]
		break;
 8002cc8:	e005      	b.n	8002cd6 <do_csp_debug+0x7a>
	case CSP_PROTOCOL:
		color = COLOR_BLUE;
 8002cca:	2305      	movs	r3, #5
 8002ccc:	60fb      	str	r3, [r7, #12]
		break;
 8002cce:	e002      	b.n	8002cd6 <do_csp_debug+0x7a>
	case CSP_LOCK:
		color = COLOR_CYAN;
 8002cd0:	2307      	movs	r3, #7
 8002cd2:	60fb      	str	r3, [r7, #12]
		break;
 8002cd4:	bf00      	nop
	default:
		return;
	}

	va_start(args, format);
 8002cd6:	f107 0320 	add.w	r3, r7, #32
 8002cda:	60bb      	str	r3, [r7, #8]

	/* If csp_debug_hook symbol is defined, pass on the message.
	 * Otherwise, just print with pretty colors ... */
	if (csp_debug_hook_func) {
 8002cdc:	4b12      	ldr	r3, [pc, #72]	@ (8002d28 <do_csp_debug+0xcc>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d006      	beq.n	8002cf2 <do_csp_debug+0x96>
		csp_debug_hook_func(level, format, args);
 8002ce4:	4b10      	ldr	r3, [pc, #64]	@ (8002d28 <do_csp_debug+0xcc>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	79f8      	ldrb	r0, [r7, #7]
 8002cea:	68ba      	ldr	r2, [r7, #8]
 8002cec:	69f9      	ldr	r1, [r7, #28]
 8002cee:	4798      	blx	r3
 8002cf0:	e012      	b.n	8002d18 <do_csp_debug+0xbc>
	} else {
		csp_sys_set_color(color);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff f9f8 	bl	80020ec <csp_sys_set_color>
                printf("%u.%06u ", ts.tv_sec, ts.tv_nsec / 1000U);
#endif
#ifdef __AVR__
		vfprintf_P(stdout, format, args);
#else
		vprintf(format, args);
 8002cfc:	68b9      	ldr	r1, [r7, #8]
 8002cfe:	69f8      	ldr	r0, [r7, #28]
 8002d00:	f008 fd12 	bl	800b728 <viprintf>
#endif
		printf("\r\n");
 8002d04:	4809      	ldr	r0, [pc, #36]	@ (8002d2c <do_csp_debug+0xd0>)
 8002d06:	f008 fca1 	bl	800b64c <puts>
		csp_sys_set_color(COLOR_RESET);
 8002d0a:	20f0      	movs	r0, #240	@ 0xf0
 8002d0c:	f7ff f9ee 	bl	80020ec <csp_sys_set_color>
 8002d10:	e002      	b.n	8002d18 <do_csp_debug+0xbc>
		return;
 8002d12:	bf00      	nop
 8002d14:	e000      	b.n	8002d18 <do_csp_debug+0xbc>
		return;
 8002d16:	bf00      	nop
	}

	va_end(args);
}
 8002d18:	3714      	adds	r7, #20
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002d20:	b003      	add	sp, #12
 8002d22:	4770      	bx	lr
 8002d24:	20000004 	.word	0x20000004
 8002d28:	20000380 	.word	0x20000380
 8002d2c:	0800f4b0 	.word	0x0800f4b0

08002d30 <csp_hton16>:
*/

#include <csp/csp_endian.h>

/* Convert 16-bit number from host byte order to network byte order */
inline uint16_t __attribute__ ((__const__)) csp_hton16(uint16_t h16) {
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	4603      	mov	r3, r0
 8002d38:	80fb      	strh	r3, [r7, #6]
#if (CSP_BIG_ENDIAN)
	return h16;
#else
	return (((h16 & 0xff00) >> 8) |
 8002d3a:	88fb      	ldrh	r3, [r7, #6]
 8002d3c:	0a1b      	lsrs	r3, r3, #8
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	b21a      	sxth	r2, r3
 8002d42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d46:	021b      	lsls	r3, r3, #8
 8002d48:	b21b      	sxth	r3, r3
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	b21b      	sxth	r3, r3
 8002d4e:	b29b      	uxth	r3, r3
			((h16 & 0x00ff) << 8));
#endif
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <csp_ntoh16>:

/* Convert 16-bit number from network byte order to host byte order */
inline uint16_t __attribute__ ((__const__)) csp_ntoh16(uint16_t n16) {
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	4603      	mov	r3, r0
 8002d64:	80fb      	strh	r3, [r7, #6]
	return csp_hton16(n16);
 8002d66:	88fb      	ldrh	r3, [r7, #6]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7ff ffe1 	bl	8002d30 <csp_hton16>
 8002d6e:	4603      	mov	r3, r0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3708      	adds	r7, #8
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <csp_hton32>:

/* Convert 32-bit number from host byte order to network byte order */
inline uint32_t __attribute__ ((__const__)) csp_hton32(uint32_t h32) {
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
#if (CSP_BIG_ENDIAN)
	return h32;
#else
	return (((h32 & 0xff000000) >> 24) |
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	0e1a      	lsrs	r2, r3, #24
			((h32 & 0x000000ff) << 24) |
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	061b      	lsls	r3, r3, #24
	return (((h32 & 0xff000000) >> 24) |
 8002d88:	431a      	orrs	r2, r3
			((h32 & 0x0000ff00) <<  8) |
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	021b      	lsls	r3, r3, #8
 8002d8e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
			((h32 & 0x000000ff) << 24) |
 8002d92:	431a      	orrs	r2, r3
			((h32 & 0x00ff0000) >>  8));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	0a1b      	lsrs	r3, r3, #8
 8002d98:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
			((h32 & 0x0000ff00) <<  8) |
 8002d9c:	4313      	orrs	r3, r2
#endif
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <csp_ntoh32>:

/* Convert 32-bit number from network byte order to host byte order */
inline uint32_t __attribute__ ((__const__)) csp_ntoh32(uint32_t n32) {
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b082      	sub	sp, #8
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
	return csp_hton32(n32);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f7ff ffe0 	bl	8002d78 <csp_hton32>
 8002db8:	4603      	mov	r3, r0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
	...

08002dc4 <csp_iflist_add>:
		ifc = ifc->next;
	}
	return ifc;
}

int csp_iflist_add(csp_iface_t *ifc) {
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]

	ifc->next = NULL;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	63da      	str	r2, [r3, #60]	@ 0x3c

	/* Add interface to pool */
	if (interfaces == NULL) {
 8002dd2:	4b18      	ldr	r3, [pc, #96]	@ (8002e34 <csp_iflist_add+0x70>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d103      	bne.n	8002de2 <csp_iflist_add+0x1e>
		/* This is the first interface to be added */
		interfaces = ifc;
 8002dda:	4a16      	ldr	r2, [pc, #88]	@ (8002e34 <csp_iflist_add+0x70>)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6013      	str	r3, [r2, #0]
 8002de0:	e022      	b.n	8002e28 <csp_iflist_add+0x64>
	} else {
		/* Insert interface last if not already in pool */
		csp_iface_t * last = NULL;
 8002de2:	2300      	movs	r3, #0
 8002de4:	60fb      	str	r3, [r7, #12]
		for (csp_iface_t * i = interfaces; i != NULL; i = i->next) {
 8002de6:	4b13      	ldr	r3, [pc, #76]	@ (8002e34 <csp_iflist_add+0x70>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	60bb      	str	r3, [r7, #8]
 8002dec:	e016      	b.n	8002e1c <csp_iflist_add+0x58>
			if ((i == ifc) || (strncasecmp(ifc->name, i->name, CSP_IFLIST_NAME_MAX) == 0)) {
 8002dee:	68ba      	ldr	r2, [r7, #8]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d00a      	beq.n	8002e0c <csp_iflist_add+0x48>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6818      	ldr	r0, [r3, #0]
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	220a      	movs	r2, #10
 8002e00:	4619      	mov	r1, r3
 8002e02:	f008 fd47 	bl	800b894 <strncasecmp>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d102      	bne.n	8002e12 <csp_iflist_add+0x4e>
				return CSP_ERR_ALREADY;
 8002e0c:	f06f 0306 	mvn.w	r3, #6
 8002e10:	e00b      	b.n	8002e2a <csp_iflist_add+0x66>
			}
			last = i;
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	60fb      	str	r3, [r7, #12]
		for (csp_iface_t * i = interfaces; i != NULL; i = i->next) {
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e1a:	60bb      	str	r3, [r7, #8]
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1e5      	bne.n	8002dee <csp_iflist_add+0x2a>
		}

		last->next = ifc;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	63da      	str	r2, [r3, #60]	@ 0x3c
	}

	return CSP_ERR_NONE;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	20000384 	.word	0x20000384

08002e38 <csp_route_set>:
   @param[in] dest_address destination address.
   @param[in] ifc interface.
   @param[in] via assosicated via address.
   @return #CSP_ERR_NONE on success, or an error code.
*/
static inline int csp_route_set(uint8_t dest_address, csp_iface_t *ifc, uint8_t via) {
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	4603      	mov	r3, r0
 8002e40:	6039      	str	r1, [r7, #0]
 8002e42:	71fb      	strb	r3, [r7, #7]
 8002e44:	4613      	mov	r3, r2
 8002e46:	71bb      	strb	r3, [r7, #6]
    return csp_rtable_set(dest_address, CSP_ID_HOST_SIZE, ifc, via);
 8002e48:	79bb      	ldrb	r3, [r7, #6]
 8002e4a:	79f8      	ldrb	r0, [r7, #7]
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	2105      	movs	r1, #5
 8002e50:	f001 fb1e 	bl	8004490 <csp_rtable_set>
 8002e54:	4603      	mov	r3, r0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
	...

08002e60 <csp_init>:
uint8_t csp_get_address(void) {

	return csp_conf.address;
}

int csp_init(const csp_conf_t * conf) {
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]

	/* make offset first time, so uptime is counted from process/task boot */
	csp_get_uptime_s();
 8002e68:	f7fe fff4 	bl	8001e54 <csp_get_uptime_s>

	/* Make a copy of the configuration
	 * The copy is kept hidden for the user in csp_init.h
	 * Configuration cannot be changed after calling init
	 * unless specific get/set functions are made */
	memcpy(&csp_conf, conf, sizeof(csp_conf));
 8002e6c:	2220      	movs	r2, #32
 8002e6e:	6879      	ldr	r1, [r7, #4]
 8002e70:	481b      	ldr	r0, [pc, #108]	@ (8002ee0 <csp_init+0x80>)
 8002e72:	f008 fe04 	bl	800ba7e <memcpy>

	int ret = csp_buffer_init();
 8002e76:	f7ff f9df 	bl	8002238 <csp_buffer_init>
 8002e7a:	60f8      	str	r0, [r7, #12]
	if (ret != CSP_ERR_NONE) {
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <csp_init+0x26>
		return ret;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	e027      	b.n	8002ed6 <csp_init+0x76>
	}

	ret = csp_conn_init();
 8002e86:	f7ff fc03 	bl	8002690 <csp_conn_init>
 8002e8a:	60f8      	str	r0, [r7, #12]
	if (ret != CSP_ERR_NONE) {
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <csp_init+0x36>
		return ret;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	e01f      	b.n	8002ed6 <csp_init+0x76>
	}

	ret = csp_port_init();
 8002e96:	f000 fa17 	bl	80032c8 <csp_port_init>
 8002e9a:	60f8      	str	r0, [r7, #12]
	if (ret != CSP_ERR_NONE) {
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <csp_init+0x46>
		return ret;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	e017      	b.n	8002ed6 <csp_init+0x76>
	}

	ret = csp_qfifo_init();
 8002ea6:	f000 fab5 	bl	8003414 <csp_qfifo_init>
 8002eaa:	60f8      	str	r0, [r7, #12]
	if (ret != CSP_ERR_NONE) {
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <csp_init+0x56>
		return ret;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	e00f      	b.n	8002ed6 <csp_init+0x76>
	}

	/* Loopback */
	csp_iflist_add(&csp_if_lo);
 8002eb6:	480b      	ldr	r0, [pc, #44]	@ (8002ee4 <csp_init+0x84>)
 8002eb8:	f7ff ff84 	bl	8002dc4 <csp_iflist_add>

	/* Register loopback route */
	csp_route_set(csp_conf.address, &csp_if_lo, CSP_NO_VIA_ADDRESS);
 8002ebc:	4b08      	ldr	r3, [pc, #32]	@ (8002ee0 <csp_init+0x80>)
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	22ff      	movs	r2, #255	@ 0xff
 8002ec2:	4908      	ldr	r1, [pc, #32]	@ (8002ee4 <csp_init+0x84>)
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff ffb7 	bl	8002e38 <csp_route_set>

	/* Also register loopback as default, until user redefines default route */
	csp_route_set(CSP_DEFAULT_ROUTE, &csp_if_lo, CSP_NO_VIA_ADDRESS);
 8002eca:	22ff      	movs	r2, #255	@ 0xff
 8002ecc:	4905      	ldr	r1, [pc, #20]	@ (8002ee4 <csp_init+0x84>)
 8002ece:	2020      	movs	r0, #32
 8002ed0:	f7ff ffb2 	bl	8002e38 <csp_route_set>

	return CSP_ERR_NONE;
 8002ed4:	2300      	movs	r3, #0

}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	20000388 	.word	0x20000388
 8002ee4:	2000000c 	.word	0x2000000c

08002ee8 <csp_socket>:

#if (CSP_USE_PROMISC)
extern csp_queue_handle_t csp_promisc_queue;
#endif

csp_socket_t * csp_socket(uint32_t opts) {
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
	
	/* Validate socket options */
#if (CSP_USE_RDP == 0)
	if (opts & CSP_SO_RDPREQ) {
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d009      	beq.n	8002f0e <csp_socket+0x26>
		csp_log_error("Attempt to create socket that requires RDP, but CSP was compiled without RDP support");
 8002efa:	4b39      	ldr	r3, [pc, #228]	@ (8002fe0 <csp_socket+0xf8>)
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <csp_socket+0x22>
 8002f02:	4938      	ldr	r1, [pc, #224]	@ (8002fe4 <csp_socket+0xfc>)
 8002f04:	2000      	movs	r0, #0
 8002f06:	f7ff fea9 	bl	8002c5c <do_csp_debug>
		return NULL;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	e064      	b.n	8002fd8 <csp_socket+0xf0>
	}
#endif

#if (CSP_USE_XTEA == 0)
	if (opts & CSP_SO_XTEAREQ) {
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f003 0310 	and.w	r3, r3, #16
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d009      	beq.n	8002f2c <csp_socket+0x44>
		csp_log_error("Attempt to create socket that requires XTEA, but CSP was compiled without XTEA support");
 8002f18:	4b31      	ldr	r3, [pc, #196]	@ (8002fe0 <csp_socket+0xf8>)
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d003      	beq.n	8002f28 <csp_socket+0x40>
 8002f20:	4931      	ldr	r1, [pc, #196]	@ (8002fe8 <csp_socket+0x100>)
 8002f22:	2000      	movs	r0, #0
 8002f24:	f7ff fe9a 	bl	8002c5c <do_csp_debug>
		return NULL;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	e055      	b.n	8002fd8 <csp_socket+0xf0>
	}
#endif

#if (CSP_USE_HMAC == 0)
	if (opts & CSP_SO_HMACREQ) {
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f003 0304 	and.w	r3, r3, #4
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d009      	beq.n	8002f4a <csp_socket+0x62>
		csp_log_error("Attempt to create socket that requires HMAC, but CSP was compiled without HMAC support");
 8002f36:	4b2a      	ldr	r3, [pc, #168]	@ (8002fe0 <csp_socket+0xf8>)
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d003      	beq.n	8002f46 <csp_socket+0x5e>
 8002f3e:	492b      	ldr	r1, [pc, #172]	@ (8002fec <csp_socket+0x104>)
 8002f40:	2000      	movs	r0, #0
 8002f42:	f7ff fe8b 	bl	8002c5c <do_csp_debug>
		return NULL;
 8002f46:	2300      	movs	r3, #0
 8002f48:	e046      	b.n	8002fd8 <csp_socket+0xf0>
	} 
#endif

#if (CSP_USE_CRC32 == 0)
	if (opts & CSP_SO_CRC32REQ) {
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d009      	beq.n	8002f68 <csp_socket+0x80>
		csp_log_error("Attempt to create socket that requires CRC32, but CSP was compiled without CRC32 support");
 8002f54:	4b22      	ldr	r3, [pc, #136]	@ (8002fe0 <csp_socket+0xf8>)
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d003      	beq.n	8002f64 <csp_socket+0x7c>
 8002f5c:	4924      	ldr	r1, [pc, #144]	@ (8002ff0 <csp_socket+0x108>)
 8002f5e:	2000      	movs	r0, #0
 8002f60:	f7ff fe7c 	bl	8002c5c <do_csp_debug>
		return NULL;
 8002f64:	2300      	movs	r3, #0
 8002f66:	e037      	b.n	8002fd8 <csp_socket+0xf0>
	} 
#endif
	
	/* Drop packet if reserved flags are set */
	if (opts & ~(CSP_SO_RDPREQ | CSP_SO_XTEAREQ | CSP_SO_HMACREQ | CSP_SO_CRC32REQ | CSP_SO_CONN_LESS)) {
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f423 73aa 	bic.w	r3, r3, #340	@ 0x154
 8002f6e:	f023 0301 	bic.w	r3, r3, #1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d009      	beq.n	8002f8a <csp_socket+0xa2>
		csp_log_error("Invalid socket option");
 8002f76:	4b1a      	ldr	r3, [pc, #104]	@ (8002fe0 <csp_socket+0xf8>)
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <csp_socket+0x9e>
 8002f7e:	491d      	ldr	r1, [pc, #116]	@ (8002ff4 <csp_socket+0x10c>)
 8002f80:	2000      	movs	r0, #0
 8002f82:	f7ff fe6b 	bl	8002c5c <do_csp_debug>
		return NULL;
 8002f86:	2300      	movs	r3, #0
 8002f88:	e026      	b.n	8002fd8 <csp_socket+0xf0>
	}

	/* Use CSP buffers instead? */
	csp_socket_t * sock = csp_conn_allocate(CONN_SERVER);
 8002f8a:	2001      	movs	r0, #1
 8002f8c:	f7ff fc94 	bl	80028b8 <csp_conn_allocate>
 8002f90:	60f8      	str	r0, [r7, #12]
	if (sock == NULL)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d101      	bne.n	8002f9c <csp_socket+0xb4>
		return NULL;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	e01d      	b.n	8002fd8 <csp_socket+0xf0>

	/* If connectionless, init the queue to a pre-defined size
	 * if not, the user must init the queue using csp_listen */
	if (opts & CSP_SO_CONN_LESS) {
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d011      	beq.n	8002fca <csp_socket+0xe2>
		sock->socket = csp_queue_create(csp_conf.conn_queue_length, sizeof(csp_packet_t *));
 8002fa6:	4b14      	ldr	r3, [pc, #80]	@ (8002ff8 <csp_socket+0x110>)
 8002fa8:	7c5b      	ldrb	r3, [r3, #17]
 8002faa:	2104      	movs	r1, #4
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7fe ff9b 	bl	8001ee8 <csp_queue_create>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	611a      	str	r2, [r3, #16]
		if (sock->socket == NULL) {
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d107      	bne.n	8002fd0 <csp_socket+0xe8>
			csp_close(sock);
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f7ff fd1e 	bl	8002a02 <csp_close>
			return NULL;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	e006      	b.n	8002fd8 <csp_socket+0xf0>
                }
	} else {
		sock->socket = NULL;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	611a      	str	r2, [r3, #16]
	}
	sock->opts = opts;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	619a      	str	r2, [r3, #24]

	return sock;
 8002fd6:	68fb      	ldr	r3, [r7, #12]

}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3710      	adds	r7, #16
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	20000004 	.word	0x20000004
 8002fe4:	0800f4b4 	.word	0x0800f4b4
 8002fe8:	0800f50c 	.word	0x0800f50c
 8002fec:	0800f564 	.word	0x0800f564
 8002ff0:	0800f5bc 	.word	0x0800f5bc
 8002ff4:	0800f618 	.word	0x0800f618
 8002ff8:	20000388 	.word	0x20000388

08002ffc <csp_accept>:

csp_conn_t * csp_accept(csp_socket_t * sock, uint32_t timeout) {
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]

	if (sock == NULL)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d101      	bne.n	8003010 <csp_accept+0x14>
		return NULL;
 800300c:	2300      	movs	r3, #0
 800300e:	e013      	b.n	8003038 <csp_accept+0x3c>

	if (sock->socket == NULL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d101      	bne.n	800301c <csp_accept+0x20>
		return NULL;
 8003018:	2300      	movs	r3, #0
 800301a:	e00d      	b.n	8003038 <csp_accept+0x3c>

	csp_conn_t * conn;
	if (csp_queue_dequeue(sock->socket, &conn, timeout) == CSP_QUEUE_OK)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	f107 010c 	add.w	r1, r7, #12
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	4618      	mov	r0, r3
 8003028:	f7fe ff9e 	bl	8001f68 <csp_queue_dequeue>
 800302c:	4603      	mov	r3, r0
 800302e:	2b01      	cmp	r3, #1
 8003030:	d101      	bne.n	8003036 <csp_accept+0x3a>
		return conn;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	e000      	b.n	8003038 <csp_accept+0x3c>

	return NULL;
 8003036:	2300      	movs	r3, #0

}
 8003038:	4618      	mov	r0, r3
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <csp_read>:

csp_packet_t * csp_read(csp_conn_t * conn, uint32_t timeout) {
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]

	csp_packet_t * packet = NULL;
 800304a:	2300      	movs	r3, #0
 800304c:	60fb      	str	r3, [r7, #12]

	if ((conn == NULL) || (conn->state != CONN_OPEN)) {
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d003      	beq.n	800305c <csp_read+0x1c>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	785b      	ldrb	r3, [r3, #1]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d001      	beq.n	8003060 <csp_read+0x20>
		return NULL;
 800305c:	2300      	movs	r3, #0
 800305e:	e00d      	b.n	800307c <csp_read+0x3c>
		if (csp_queue_dequeue(conn->rx_queue[prio], &packet, 0) == CSP_QUEUE_OK) {
			break;
		}
	}
#else
	if (csp_queue_dequeue(conn->rx_queue[0], &packet, timeout) != CSP_QUEUE_OK) {
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	f107 010c 	add.w	r1, r7, #12
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f7fe ff7c 	bl	8001f68 <csp_queue_dequeue>
 8003070:	4603      	mov	r3, r0
 8003072:	2b01      	cmp	r3, #1
 8003074:	d001      	beq.n	800307a <csp_read+0x3a>
		return NULL;
 8003076:	2300      	movs	r3, #0
 8003078:	e000      	b.n	800307c <csp_read+0x3c>
	if ((conn->idin.flags & CSP_FRDP) && conn->rdp.delayed_acks) {
		csp_rdp_check_ack(conn);
	}
#endif

	return packet;
 800307a:	68fb      	ldr	r3, [r7, #12]

}
 800307c:	4618      	mov	r0, r3
 800307e:	3710      	adds	r7, #16
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <csp_send_direct>:

int csp_send_direct(csp_id_t idout, csp_packet_t * packet, const csp_route_t * ifroute, uint32_t timeout) {
 8003084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003086:	b08f      	sub	sp, #60	@ 0x3c
 8003088:	af08      	add	r7, sp, #32
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
 8003090:	603b      	str	r3, [r7, #0]

	if (packet == NULL) {
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d109      	bne.n	80030ac <csp_send_direct+0x28>
		csp_log_error("csp_send_direct called with NULL packet");
 8003098:	4b66      	ldr	r3, [pc, #408]	@ (8003234 <csp_send_direct+0x1b0>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 80c0 	beq.w	8003222 <csp_send_direct+0x19e>
 80030a2:	4965      	ldr	r1, [pc, #404]	@ (8003238 <csp_send_direct+0x1b4>)
 80030a4:	2000      	movs	r0, #0
 80030a6:	f7ff fdd9 	bl	8002c5c <do_csp_debug>
		goto err;
 80030aa:	e0ba      	b.n	8003222 <csp_send_direct+0x19e>
	}

	if (ifroute == NULL) {
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10f      	bne.n	80030d2 <csp_send_direct+0x4e>
		csp_log_error("No route to host: %u (0x%08"PRIx32")", idout.dst, idout.ext);
 80030b2:	4b60      	ldr	r3, [pc, #384]	@ (8003234 <csp_send_direct+0x1b0>)
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f000 80b5 	beq.w	8003226 <csp_send_direct+0x1a2>
 80030bc:	89fb      	ldrh	r3, [r7, #14]
 80030be:	f3c3 1304 	ubfx	r3, r3, #4, #5
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	461a      	mov	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	495c      	ldr	r1, [pc, #368]	@ (800323c <csp_send_direct+0x1b8>)
 80030ca:	2000      	movs	r0, #0
 80030cc:	f7ff fdc6 	bl	8002c5c <do_csp_debug>
		goto err;
 80030d0:	e0a9      	b.n	8003226 <csp_send_direct+0x1a2>
	}

	csp_iface_t * ifout = ifroute->iface;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	617b      	str	r3, [r7, #20]

	csp_log_packet("OUT: S %u, D %u, Dp %u, Sp %u, Pr %u, Fl 0x%02X, Sz %u VIA: %s (%u)",
 80030d8:	4b56      	ldr	r3, [pc, #344]	@ (8003234 <csp_send_direct+0x1b0>)
 80030da:	791b      	ldrb	r3, [r3, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d037      	beq.n	8003150 <csp_send_direct+0xcc>
 80030e0:	7bfb      	ldrb	r3, [r7, #15]
 80030e2:	f3c3 0344 	ubfx	r3, r3, #1, #5
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	469c      	mov	ip, r3
 80030ea:	89fb      	ldrh	r3, [r7, #14]
 80030ec:	f3c3 1304 	ubfx	r3, r3, #4, #5
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	469e      	mov	lr, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f3c3 3385 	ubfx	r3, r3, #14, #6
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	4619      	mov	r1, r3
 80030fe:	7b7b      	ldrb	r3, [r7, #13]
 8003100:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8003104:	b2db      	uxtb	r3, r3
 8003106:	4618      	mov	r0, r3
 8003108:	7bfb      	ldrb	r3, [r7, #15]
 800310a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800310e:	b2db      	uxtb	r3, r3
 8003110:	461c      	mov	r4, r3
 8003112:	7b3b      	ldrb	r3, [r7, #12]
 8003114:	461d      	mov	r5, r3
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	895b      	ldrh	r3, [r3, #10]
 800311a:	461e      	mov	r6, r3
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	7912      	ldrb	r2, [r2, #4]
 8003124:	2aff      	cmp	r2, #255	@ 0xff
 8003126:	d002      	beq.n	800312e <csp_send_direct+0xaa>
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	7912      	ldrb	r2, [r2, #4]
 800312c:	e003      	b.n	8003136 <csp_send_direct+0xb2>
 800312e:	89fa      	ldrh	r2, [r7, #14]
 8003130:	f3c2 1204 	ubfx	r2, r2, #4, #5
 8003134:	b2d2      	uxtb	r2, r2
 8003136:	9206      	str	r2, [sp, #24]
 8003138:	9305      	str	r3, [sp, #20]
 800313a:	9604      	str	r6, [sp, #16]
 800313c:	9503      	str	r5, [sp, #12]
 800313e:	9402      	str	r4, [sp, #8]
 8003140:	9001      	str	r0, [sp, #4]
 8003142:	9100      	str	r1, [sp, #0]
 8003144:	4673      	mov	r3, lr
 8003146:	4662      	mov	r2, ip
 8003148:	493d      	ldr	r1, [pc, #244]	@ (8003240 <csp_send_direct+0x1bc>)
 800314a:	2004      	movs	r0, #4
 800314c:	f7ff fd86 	bl	8002c5c <do_csp_debug>
                       idout.src, idout.dst, idout.dport, idout.sport, idout.pri, idout.flags, packet->length, ifout->name, (ifroute->via != CSP_NO_VIA_ADDRESS) ? ifroute->via : idout.dst);

	/* Copy identifier to packet (before crc, xtea and hmac) */
	packet->id.ext = idout.ext;
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	60da      	str	r2, [r3, #12]
		csp_promisc_add(packet);
	}
#endif

	/* Only encrypt packets from the current node */
	if (idout.src == csp_conf.address) {
 8003156:	7bfb      	ldrb	r3, [r7, #15]
 8003158:	f3c3 0344 	ubfx	r3, r3, #1, #5
 800315c:	b2db      	uxtb	r3, r3
 800315e:	461a      	mov	r2, r3
 8003160:	4b38      	ldr	r3, [pc, #224]	@ (8003244 <csp_send_direct+0x1c0>)
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	429a      	cmp	r2, r3
 8003166:	d12d      	bne.n	80031c4 <csp_send_direct+0x140>
		/* Append HMAC */
		if (idout.flags & CSP_FHMAC) {
 8003168:	7b3b      	ldrb	r3, [r7, #12]
 800316a:	f003 0308 	and.w	r3, r3, #8
 800316e:	2b00      	cmp	r3, #0
 8003170:	d008      	beq.n	8003184 <csp_send_direct+0x100>
				/* HMAC append failed */
				csp_log_warn("HMAC append failed!");
				goto tx_err;
			}
#else
			csp_log_warn("Attempt to send packet with HMAC, but CSP was compiled without HMAC support. Discarding packet");
 8003172:	4b30      	ldr	r3, [pc, #192]	@ (8003234 <csp_send_direct+0x1b0>)
 8003174:	785b      	ldrb	r3, [r3, #1]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d046      	beq.n	8003208 <csp_send_direct+0x184>
 800317a:	4933      	ldr	r1, [pc, #204]	@ (8003248 <csp_send_direct+0x1c4>)
 800317c:	2001      	movs	r0, #1
 800317e:	f7ff fd6d 	bl	8002c5c <do_csp_debug>
			goto tx_err;
 8003182:	e041      	b.n	8003208 <csp_send_direct+0x184>
#endif
		}

		/* Append CRC32 */
		if (idout.flags & CSP_FCRC32) {
 8003184:	7b3b      	ldrb	r3, [r7, #12]
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00c      	beq.n	80031a8 <csp_send_direct+0x124>
				/* CRC32 append failed */
				csp_log_warn("CRC32 append failed!");
				goto tx_err;
			}
#else
			csp_log_warn("Attempt to send packet with CRC32, but CSP was compiled without CRC32 support. Sending without CRC32r");
 800318e:	4b29      	ldr	r3, [pc, #164]	@ (8003234 <csp_send_direct+0x1b0>)
 8003190:	785b      	ldrb	r3, [r3, #1]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <csp_send_direct+0x11a>
 8003196:	492d      	ldr	r1, [pc, #180]	@ (800324c <csp_send_direct+0x1c8>)
 8003198:	2001      	movs	r0, #1
 800319a:	f7ff fd5f 	bl	8002c5c <do_csp_debug>
			idout.flags &= ~(CSP_FCRC32);
 800319e:	7b3b      	ldrb	r3, [r7, #12]
 80031a0:	f023 0301 	bic.w	r3, r3, #1
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	733b      	strb	r3, [r7, #12]
#endif
		}

		if (idout.flags & CSP_FXTEA) {
 80031a8:	7b3b      	ldrb	r3, [r7, #12]
 80031aa:	f003 0304 	and.w	r3, r3, #4
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d008      	beq.n	80031c4 <csp_send_direct+0x140>
				/* Encryption failed */
				csp_log_warn("XTEA Encryption failed!");
				goto tx_err;
			}
#else
			csp_log_warn("Attempt to send XTEA encrypted packet, but CSP was compiled without XTEA support. Discarding packet");
 80031b2:	4b20      	ldr	r3, [pc, #128]	@ (8003234 <csp_send_direct+0x1b0>)
 80031b4:	785b      	ldrb	r3, [r3, #1]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d028      	beq.n	800320c <csp_send_direct+0x188>
 80031ba:	4925      	ldr	r1, [pc, #148]	@ (8003250 <csp_send_direct+0x1cc>)
 80031bc:	2001      	movs	r0, #1
 80031be:	f7ff fd4d 	bl	8002c5c <do_csp_debug>
			goto tx_err;
 80031c2:	e023      	b.n	800320c <csp_send_direct+0x188>
#endif
		}
	}

	/* Store length before passing to interface */
	uint16_t bytes = packet->length;
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	895b      	ldrh	r3, [r3, #10]
 80031c8:	827b      	strh	r3, [r7, #18]
	uint16_t mtu = ifout->mtu;
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	8a1b      	ldrh	r3, [r3, #16]
 80031ce:	823b      	strh	r3, [r7, #16]

	if (mtu > 0 && bytes > mtu)
 80031d0:	8a3b      	ldrh	r3, [r7, #16]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d003      	beq.n	80031de <csp_send_direct+0x15a>
 80031d6:	8a7a      	ldrh	r2, [r7, #18]
 80031d8:	8a3b      	ldrh	r3, [r7, #16]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d818      	bhi.n	8003210 <csp_send_direct+0x18c>
		goto tx_err;

	if ((*ifout->nexthop)(ifroute, packet) != CSP_ERR_NONE)
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	68b9      	ldr	r1, [r7, #8]
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	4798      	blx	r3
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d112      	bne.n	8003214 <csp_send_direct+0x190>
		goto tx_err;

	ifout->tx++;
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	1c5a      	adds	r2, r3, #1
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	615a      	str	r2, [r3, #20]
	ifout->txbytes += bytes;
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031fc:	8a7b      	ldrh	r3, [r7, #18]
 80031fe:	441a      	add	r2, r3
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	631a      	str	r2, [r3, #48]	@ 0x30
	return CSP_ERR_NONE;
 8003204:	2300      	movs	r3, #0
 8003206:	e011      	b.n	800322c <csp_send_direct+0x1a8>
			goto tx_err;
 8003208:	bf00      	nop
 800320a:	e004      	b.n	8003216 <csp_send_direct+0x192>
			goto tx_err;
 800320c:	bf00      	nop
 800320e:	e002      	b.n	8003216 <csp_send_direct+0x192>
		goto tx_err;
 8003210:	bf00      	nop
 8003212:	e000      	b.n	8003216 <csp_send_direct+0x192>
		goto tx_err;
 8003214:	bf00      	nop

tx_err:
	ifout->tx_error++;
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	69db      	ldr	r3, [r3, #28]
 800321a:	1c5a      	adds	r2, r3, #1
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	61da      	str	r2, [r3, #28]
 8003220:	e002      	b.n	8003228 <csp_send_direct+0x1a4>
		goto err;
 8003222:	bf00      	nop
 8003224:	e000      	b.n	8003228 <csp_send_direct+0x1a4>
		goto err;
 8003226:	bf00      	nop
err:
	return CSP_ERR_TX;
 8003228:	f06f 0309 	mvn.w	r3, #9

}
 800322c:	4618      	mov	r0, r3
 800322e:	371c      	adds	r7, #28
 8003230:	46bd      	mov	sp, r7
 8003232:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003234:	20000004 	.word	0x20000004
 8003238:	0800f630 	.word	0x0800f630
 800323c:	0800f658 	.word	0x0800f658
 8003240:	0800f678 	.word	0x0800f678
 8003244:	20000388 	.word	0x20000388
 8003248:	0800f6bc 	.word	0x0800f6bc
 800324c:	0800f71c 	.word	0x0800f71c
 8003250:	0800f784 	.word	0x0800f784

08003254 <csp_port_get_socket>:
#include "csp_init.h"

/* Dynamic allocated port array */
static csp_port_t * ports;

csp_socket_t * csp_port_get_socket(unsigned int port) {
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]

	if (port > csp_conf.port_max_bind) {
 800325c:	4b18      	ldr	r3, [pc, #96]	@ (80032c0 <csp_port_get_socket+0x6c>)
 800325e:	7cdb      	ldrb	r3, [r3, #19]
 8003260:	461a      	mov	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4293      	cmp	r3, r2
 8003266:	d901      	bls.n	800326c <csp_port_get_socket+0x18>
		return NULL;
 8003268:	2300      	movs	r3, #0
 800326a:	e022      	b.n	80032b2 <csp_port_get_socket+0x5e>
	}

	/* Match dport to socket or local "catch all" port number */
	if (ports[port].state == PORT_OPEN) {
 800326c:	4b15      	ldr	r3, [pc, #84]	@ (80032c4 <csp_port_get_socket+0x70>)
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	4413      	add	r3, r2
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d106      	bne.n	800328a <csp_port_get_socket+0x36>
		return ports[port].socket;
 800327c:	4b11      	ldr	r3, [pc, #68]	@ (80032c4 <csp_port_get_socket+0x70>)
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	4413      	add	r3, r2
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	e013      	b.n	80032b2 <csp_port_get_socket+0x5e>
	}

	if (ports[csp_conf.port_max_bind + 1].state == PORT_OPEN) {
 800328a:	4b0e      	ldr	r3, [pc, #56]	@ (80032c4 <csp_port_get_socket+0x70>)
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	4b0c      	ldr	r3, [pc, #48]	@ (80032c0 <csp_port_get_socket+0x6c>)
 8003290:	7cdb      	ldrb	r3, [r3, #19]
 8003292:	3301      	adds	r3, #1
 8003294:	00db      	lsls	r3, r3, #3
 8003296:	4413      	add	r3, r2
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d108      	bne.n	80032b0 <csp_port_get_socket+0x5c>
		return ports[csp_conf.port_max_bind + 1].socket;
 800329e:	4b09      	ldr	r3, [pc, #36]	@ (80032c4 <csp_port_get_socket+0x70>)
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	4b07      	ldr	r3, [pc, #28]	@ (80032c0 <csp_port_get_socket+0x6c>)
 80032a4:	7cdb      	ldrb	r3, [r3, #19]
 80032a6:	3301      	adds	r3, #1
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	4413      	add	r3, r2
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	e000      	b.n	80032b2 <csp_port_get_socket+0x5e>
	}

	return NULL;
 80032b0:	2300      	movs	r3, #0

}
 80032b2:	4618      	mov	r0, r3
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	20000388 	.word	0x20000388
 80032c4:	200003a8 	.word	0x200003a8

080032c8 <csp_port_init>:

int csp_port_init(void) {
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0

	ports = csp_calloc(csp_conf.port_max_bind + 2, sizeof(*ports)); // +2 for max port and CSP_ANY
 80032cc:	4b09      	ldr	r3, [pc, #36]	@ (80032f4 <csp_port_init+0x2c>)
 80032ce:	7cdb      	ldrb	r3, [r3, #19]
 80032d0:	3302      	adds	r3, #2
 80032d2:	2108      	movs	r1, #8
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7fe fde1 	bl	8001e9c <csp_calloc>
 80032da:	4603      	mov	r3, r0
 80032dc:	4a06      	ldr	r2, [pc, #24]	@ (80032f8 <csp_port_init+0x30>)
 80032de:	6013      	str	r3, [r2, #0]
	if (ports == NULL) {
 80032e0:	4b05      	ldr	r3, [pc, #20]	@ (80032f8 <csp_port_init+0x30>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d102      	bne.n	80032ee <csp_port_init+0x26>
		return CSP_ERR_NOMEM;
 80032e8:	f04f 33ff 	mov.w	r3, #4294967295
 80032ec:	e000      	b.n	80032f0 <csp_port_init+0x28>
	}

	return CSP_ERR_NONE;
 80032ee:	2300      	movs	r3, #0

}
 80032f0:	4618      	mov	r0, r3
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	20000388 	.word	0x20000388
 80032f8:	200003a8 	.word	0x200003a8

080032fc <csp_listen>:

	csp_free(ports);
	ports = NULL;
}

int csp_listen(csp_socket_t * socket, size_t backlog) {
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
	
	if (socket == NULL)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d102      	bne.n	8003312 <csp_listen+0x16>
		return CSP_ERR_INVAL;
 800330c:	f06f 0301 	mvn.w	r3, #1
 8003310:	e015      	b.n	800333e <csp_listen+0x42>

	socket->socket = csp_queue_create(backlog, sizeof(csp_conn_t *));
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	2104      	movs	r1, #4
 8003316:	4618      	mov	r0, r3
 8003318:	f7fe fde6 	bl	8001ee8 <csp_queue_create>
 800331c:	4602      	mov	r2, r0
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	611a      	str	r2, [r3, #16]
	if (socket->socket == NULL)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d102      	bne.n	8003330 <csp_listen+0x34>
		return CSP_ERR_NOMEM;
 800332a:	f04f 33ff 	mov.w	r3, #4294967295
 800332e:	e006      	b.n	800333e <csp_listen+0x42>

        socket->opts |= CSP_SO_INTERNAL_LISTEN;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	619a      	str	r2, [r3, #24]

	return CSP_ERR_NONE;
 800333c:	2300      	movs	r3, #0

}
 800333e:	4618      	mov	r0, r3
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
	...

08003348 <csp_bind>:

int csp_bind(csp_socket_t * socket, uint8_t port) {
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	460b      	mov	r3, r1
 8003352:	70fb      	strb	r3, [r7, #3]
	
	if (socket == NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d102      	bne.n	8003360 <csp_bind+0x18>
		return CSP_ERR_INVAL;
 800335a:	f06f 0301 	mvn.w	r3, #1
 800335e:	e048      	b.n	80033f2 <csp_bind+0xaa>

	if (port == CSP_ANY) {
 8003360:	78fb      	ldrb	r3, [r7, #3]
 8003362:	2bff      	cmp	r3, #255	@ 0xff
 8003364:	d104      	bne.n	8003370 <csp_bind+0x28>
		port = csp_conf.port_max_bind + 1;
 8003366:	4b25      	ldr	r3, [pc, #148]	@ (80033fc <csp_bind+0xb4>)
 8003368:	7cdb      	ldrb	r3, [r3, #19]
 800336a:	3301      	adds	r3, #1
 800336c:	70fb      	strb	r3, [r7, #3]
 800336e:	e012      	b.n	8003396 <csp_bind+0x4e>
	} else if (port > csp_conf.port_max_bind) {
 8003370:	4b22      	ldr	r3, [pc, #136]	@ (80033fc <csp_bind+0xb4>)
 8003372:	7cdb      	ldrb	r3, [r3, #19]
 8003374:	78fa      	ldrb	r2, [r7, #3]
 8003376:	429a      	cmp	r2, r3
 8003378:	d90d      	bls.n	8003396 <csp_bind+0x4e>
		csp_log_error("csp_bind: invalid port %u, only ports from 0-%u (+ CSP_ANY for default) are available for incoming ports", port, csp_conf.port_max_bind);
 800337a:	4b21      	ldr	r3, [pc, #132]	@ (8003400 <csp_bind+0xb8>)
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d006      	beq.n	8003390 <csp_bind+0x48>
 8003382:	78fa      	ldrb	r2, [r7, #3]
 8003384:	4b1d      	ldr	r3, [pc, #116]	@ (80033fc <csp_bind+0xb4>)
 8003386:	7cdb      	ldrb	r3, [r3, #19]
 8003388:	491e      	ldr	r1, [pc, #120]	@ (8003404 <csp_bind+0xbc>)
 800338a:	2000      	movs	r0, #0
 800338c:	f7ff fc66 	bl	8002c5c <do_csp_debug>
		return CSP_ERR_INVAL;
 8003390:	f06f 0301 	mvn.w	r3, #1
 8003394:	e02d      	b.n	80033f2 <csp_bind+0xaa>
	}

	if (ports[port].state != PORT_CLOSED) {
 8003396:	4b1c      	ldr	r3, [pc, #112]	@ (8003408 <csp_bind+0xc0>)
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	78fb      	ldrb	r3, [r7, #3]
 800339c:	00db      	lsls	r3, r3, #3
 800339e:	4413      	add	r3, r2
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00c      	beq.n	80033c0 <csp_bind+0x78>
		csp_log_error("Port %d is already in use", port);
 80033a6:	4b16      	ldr	r3, [pc, #88]	@ (8003400 <csp_bind+0xb8>)
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d005      	beq.n	80033ba <csp_bind+0x72>
 80033ae:	78fb      	ldrb	r3, [r7, #3]
 80033b0:	461a      	mov	r2, r3
 80033b2:	4916      	ldr	r1, [pc, #88]	@ (800340c <csp_bind+0xc4>)
 80033b4:	2000      	movs	r0, #0
 80033b6:	f7ff fc51 	bl	8002c5c <do_csp_debug>
		return CSP_ERR_USED;
 80033ba:	f06f 0303 	mvn.w	r3, #3
 80033be:	e018      	b.n	80033f2 <csp_bind+0xaa>
	}

	csp_log_info("Binding socket %p to port %u", socket, port);
 80033c0:	4b0f      	ldr	r3, [pc, #60]	@ (8003400 <csp_bind+0xb8>)
 80033c2:	789b      	ldrb	r3, [r3, #2]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d005      	beq.n	80033d4 <csp_bind+0x8c>
 80033c8:	78fb      	ldrb	r3, [r7, #3]
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	4910      	ldr	r1, [pc, #64]	@ (8003410 <csp_bind+0xc8>)
 80033ce:	2002      	movs	r0, #2
 80033d0:	f7ff fc44 	bl	8002c5c <do_csp_debug>

	/* Save listener */
	ports[port].socket = socket;
 80033d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003408 <csp_bind+0xc0>)
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	78fb      	ldrb	r3, [r7, #3]
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	4413      	add	r3, r2
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	605a      	str	r2, [r3, #4]
	ports[port].state = PORT_OPEN;
 80033e2:	4b09      	ldr	r3, [pc, #36]	@ (8003408 <csp_bind+0xc0>)
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	78fb      	ldrb	r3, [r7, #3]
 80033e8:	00db      	lsls	r3, r3, #3
 80033ea:	4413      	add	r3, r2
 80033ec:	2201      	movs	r2, #1
 80033ee:	701a      	strb	r2, [r3, #0]

	return CSP_ERR_NONE;
 80033f0:	2300      	movs	r3, #0

}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	20000388 	.word	0x20000388
 8003400:	20000004 	.word	0x20000004
 8003404:	0800f95c 	.word	0x0800f95c
 8003408:	200003a8 	.word	0x200003a8
 800340c:	0800f9c8 	.word	0x0800f9c8
 8003410:	0800f9e4 	.word	0x0800f9e4

08003414 <csp_qfifo_init>:
static csp_queue_handle_t qfifo[CSP_ROUTE_FIFOS];
#if (CSP_USE_QOS)
static csp_queue_handle_t qfifo_events;
#endif

int csp_qfifo_init(void) {
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0

	/* Create router fifos for each priority */
	for (int prio = 0; prio < CSP_ROUTE_FIFOS; prio++) {
 800341a:	2300      	movs	r3, #0
 800341c:	607b      	str	r3, [r7, #4]
 800341e:	e01c      	b.n	800345a <csp_qfifo_init+0x46>
		if (qfifo[prio] == NULL) {
 8003420:	4a12      	ldr	r2, [pc, #72]	@ (800346c <csp_qfifo_init+0x58>)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d113      	bne.n	8003454 <csp_qfifo_init+0x40>
			qfifo[prio] = csp_queue_create(csp_conf.fifo_length, sizeof(csp_qfifo_t));
 800342c:	4b10      	ldr	r3, [pc, #64]	@ (8003470 <csp_qfifo_init+0x5c>)
 800342e:	7c9b      	ldrb	r3, [r3, #18]
 8003430:	2108      	movs	r1, #8
 8003432:	4618      	mov	r0, r3
 8003434:	f7fe fd58 	bl	8001ee8 <csp_queue_create>
 8003438:	4602      	mov	r2, r0
 800343a:	490c      	ldr	r1, [pc, #48]	@ (800346c <csp_qfifo_init+0x58>)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (!qfifo[prio])
 8003442:	4a0a      	ldr	r2, [pc, #40]	@ (800346c <csp_qfifo_init+0x58>)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d102      	bne.n	8003454 <csp_qfifo_init+0x40>
				return CSP_ERR_NOMEM;
 800344e:	f04f 33ff 	mov.w	r3, #4294967295
 8003452:	e006      	b.n	8003462 <csp_qfifo_init+0x4e>
	for (int prio = 0; prio < CSP_ROUTE_FIFOS; prio++) {
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	3301      	adds	r3, #1
 8003458:	607b      	str	r3, [r7, #4]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	dddf      	ble.n	8003420 <csp_qfifo_init+0xc>
	if (!qfifo_events) {
		return CSP_ERR_NOMEM;
	}
#endif

	return CSP_ERR_NONE;
 8003460:	2300      	movs	r3, #0

}
 8003462:	4618      	mov	r0, r3
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	200003ac 	.word	0x200003ac
 8003470:	20000388 	.word	0x20000388

08003474 <csp_qfifo_read>:
	}
#endif

}

int csp_qfifo_read(csp_qfifo_t * input) {
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
	if (!found) {
		csp_log_warn("Spurious wakeup: No packet found");
		return CSP_ERR_TIMEDOUT;
	}
#else
	if (csp_queue_dequeue(qfifo[0], input, FIFO_TIMEOUT) != CSP_QUEUE_OK)
 800347c:	4b09      	ldr	r3, [pc, #36]	@ (80034a4 <csp_qfifo_read+0x30>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f04f 32ff 	mov.w	r2, #4294967295
 8003484:	6879      	ldr	r1, [r7, #4]
 8003486:	4618      	mov	r0, r3
 8003488:	f7fe fd6e 	bl	8001f68 <csp_queue_dequeue>
 800348c:	4603      	mov	r3, r0
 800348e:	2b01      	cmp	r3, #1
 8003490:	d002      	beq.n	8003498 <csp_qfifo_read+0x24>
		return CSP_ERR_TIMEDOUT;
 8003492:	f06f 0302 	mvn.w	r3, #2
 8003496:	e000      	b.n	800349a <csp_qfifo_read+0x26>
#endif

	return CSP_ERR_NONE;
 8003498:	2300      	movs	r3, #0

}
 800349a:	4618      	mov	r0, r3
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	200003ac 	.word	0x200003ac

080034a8 <csp_qfifo_write>:

void csp_qfifo_write(csp_packet_t * packet, csp_iface_t * iface, CSP_BASE_TYPE * pxTaskWoken) {
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b088      	sub	sp, #32
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]

	int result;

	if (packet == NULL) {
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10b      	bne.n	80034d2 <csp_qfifo_write+0x2a>
		if (pxTaskWoken == NULL) { // Only do logging in non-ISR context
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d15f      	bne.n	8003580 <csp_qfifo_write+0xd8>
			csp_log_warn("csp_new packet called with NULL packet");
 80034c0:	4b31      	ldr	r3, [pc, #196]	@ (8003588 <csp_qfifo_write+0xe0>)
 80034c2:	785b      	ldrb	r3, [r3, #1]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d05b      	beq.n	8003580 <csp_qfifo_write+0xd8>
 80034c8:	4930      	ldr	r1, [pc, #192]	@ (800358c <csp_qfifo_write+0xe4>)
 80034ca:	2001      	movs	r0, #1
 80034cc:	f7ff fbc6 	bl	8002c5c <do_csp_debug>
		}
		return;
 80034d0:	e056      	b.n	8003580 <csp_qfifo_write+0xd8>
	}

	if (iface == NULL) {
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d115      	bne.n	8003504 <csp_qfifo_write+0x5c>
		if (pxTaskWoken == NULL) { // Only do logging in non-ISR context
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d107      	bne.n	80034ee <csp_qfifo_write+0x46>
			csp_log_warn("csp_new packet called with NULL interface");
 80034de:	4b2a      	ldr	r3, [pc, #168]	@ (8003588 <csp_qfifo_write+0xe0>)
 80034e0:	785b      	ldrb	r3, [r3, #1]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <csp_qfifo_write+0x46>
 80034e6:	492a      	ldr	r1, [pc, #168]	@ (8003590 <csp_qfifo_write+0xe8>)
 80034e8:	2001      	movs	r0, #1
 80034ea:	f7ff fbb7 	bl	8002c5c <do_csp_debug>
		}
		if (pxTaskWoken == NULL)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d103      	bne.n	80034fc <csp_qfifo_write+0x54>
			csp_buffer_free(packet);
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f7fe ffe1 	bl	80024bc <csp_buffer_free>
		else
			csp_buffer_free_isr(packet);
		return;
 80034fa:	e042      	b.n	8003582 <csp_qfifo_write+0xda>
			csp_buffer_free_isr(packet);
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f7fe ffa3 	bl	8002448 <csp_buffer_free_isr>
		return;
 8003502:	e03e      	b.n	8003582 <csp_qfifo_write+0xda>
	}

	csp_qfifo_t queue_element;
	queue_element.iface = iface;
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	613b      	str	r3, [r7, #16]
	queue_element.packet = packet;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	617b      	str	r3, [r7, #20]

#if (CSP_USE_QOS)
	int fifo = packet->id.pri;
#else
	int fifo = 0;
 800350c:	2300      	movs	r3, #0
 800350e:	61bb      	str	r3, [r7, #24]
#endif

	if (pxTaskWoken == NULL)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d10b      	bne.n	800352e <csp_qfifo_write+0x86>
		result = csp_queue_enqueue(qfifo[fifo], &queue_element, 0);
 8003516:	4a1f      	ldr	r2, [pc, #124]	@ (8003594 <csp_qfifo_write+0xec>)
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800351e:	f107 0110 	add.w	r1, r7, #16
 8003522:	2200      	movs	r2, #0
 8003524:	4618      	mov	r0, r3
 8003526:	f7fe fcfa 	bl	8001f1e <csp_queue_enqueue>
 800352a:	61f8      	str	r0, [r7, #28]
 800352c:	e00a      	b.n	8003544 <csp_qfifo_write+0x9c>
	else
		result = csp_queue_enqueue_isr(qfifo[fifo], &queue_element, pxTaskWoken);
 800352e:	4a19      	ldr	r2, [pc, #100]	@ (8003594 <csp_qfifo_write+0xec>)
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003536:	f107 0110 	add.w	r1, r7, #16
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	4618      	mov	r0, r3
 800353e:	f7fe fd02 	bl	8001f46 <csp_queue_enqueue_isr>
 8003542:	61f8      	str	r0, [r7, #28]
		else
			csp_queue_enqueue_isr(qfifo_events, &event, pxTaskWoken);
	}
#endif

	if (result != CSP_QUEUE_OK) {
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d01b      	beq.n	8003582 <csp_qfifo_write+0xda>
		if (pxTaskWoken == NULL) { // Only do logging in non-ISR context
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d107      	bne.n	8003560 <csp_qfifo_write+0xb8>
			csp_log_warn("ERROR: Routing input FIFO is FULL. Dropping packet.");
 8003550:	4b0d      	ldr	r3, [pc, #52]	@ (8003588 <csp_qfifo_write+0xe0>)
 8003552:	785b      	ldrb	r3, [r3, #1]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d003      	beq.n	8003560 <csp_qfifo_write+0xb8>
 8003558:	490f      	ldr	r1, [pc, #60]	@ (8003598 <csp_qfifo_write+0xf0>)
 800355a:	2001      	movs	r0, #1
 800355c:	f7ff fb7e 	bl	8002c5c <do_csp_debug>
		}
		iface->drop++;
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003564:	1c5a      	adds	r2, r3, #1
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	625a      	str	r2, [r3, #36]	@ 0x24
		if (pxTaskWoken == NULL)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d103      	bne.n	8003578 <csp_qfifo_write+0xd0>
			csp_buffer_free(packet);
 8003570:	68f8      	ldr	r0, [r7, #12]
 8003572:	f7fe ffa3 	bl	80024bc <csp_buffer_free>
 8003576:	e004      	b.n	8003582 <csp_qfifo_write+0xda>
		else
			csp_buffer_free_isr(packet);
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f7fe ff65 	bl	8002448 <csp_buffer_free_isr>
 800357e:	e000      	b.n	8003582 <csp_qfifo_write+0xda>
		return;
 8003580:	bf00      	nop
	}

}
 8003582:	3720      	adds	r7, #32
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	20000004 	.word	0x20000004
 800358c:	0800fa04 	.word	0x0800fa04
 8003590:	0800fa2c 	.word	0x0800fa2c
 8003594:	200003ac 	.word	0x200003ac
 8003598:	0800fa58 	.word	0x0800fa58

0800359c <csp_route_check_options>:
 * @param iface pointer to incoming interface
 * @param packet pointer to packet
 * @return CSP_ERR_NONE is all options are supported, CSP_ERR_NOTSUP if not
 */
static int csp_route_check_options(csp_iface_t *iface, csp_packet_t *packet)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
#if (CSP_USE_XTEA == 0)
	/* Drop XTEA packets */
	if (packet->id.flags & CSP_FXTEA) {
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	7b1b      	ldrb	r3, [r3, #12]
 80035aa:	f003 0304 	and.w	r3, r3, #4
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00f      	beq.n	80035d2 <csp_route_check_options+0x36>
		csp_log_error("Received XTEA encrypted packet, but CSP was compiled without XTEA support. Discarding packet");
 80035b2:	4b20      	ldr	r3, [pc, #128]	@ (8003634 <csp_route_check_options+0x98>)
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <csp_route_check_options+0x26>
 80035ba:	491f      	ldr	r1, [pc, #124]	@ (8003638 <csp_route_check_options+0x9c>)
 80035bc:	2000      	movs	r0, #0
 80035be:	f7ff fb4d 	bl	8002c5c <do_csp_debug>
		iface->autherr++;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035c6:	1c5a      	adds	r2, r3, #1
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	629a      	str	r2, [r3, #40]	@ 0x28
		return CSP_ERR_NOTSUP;
 80035cc:	f06f 0304 	mvn.w	r3, #4
 80035d0:	e02c      	b.n	800362c <csp_route_check_options+0x90>
	}
#endif

#if (CSP_USE_HMAC == 0)
	/* Drop HMAC packets */
	if (packet->id.flags & CSP_FHMAC) {
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	7b1b      	ldrb	r3, [r3, #12]
 80035d6:	f003 0308 	and.w	r3, r3, #8
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00f      	beq.n	80035fe <csp_route_check_options+0x62>
		csp_log_error("Received packet with HMAC, but CSP was compiled without HMAC support. Discarding packet");
 80035de:	4b15      	ldr	r3, [pc, #84]	@ (8003634 <csp_route_check_options+0x98>)
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d003      	beq.n	80035ee <csp_route_check_options+0x52>
 80035e6:	4915      	ldr	r1, [pc, #84]	@ (800363c <csp_route_check_options+0xa0>)
 80035e8:	2000      	movs	r0, #0
 80035ea:	f7ff fb37 	bl	8002c5c <do_csp_debug>
		iface->autherr++;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035f2:	1c5a      	adds	r2, r3, #1
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	629a      	str	r2, [r3, #40]	@ 0x28
		return CSP_ERR_NOTSUP;
 80035f8:	f06f 0304 	mvn.w	r3, #4
 80035fc:	e016      	b.n	800362c <csp_route_check_options+0x90>
	}
#endif

#if (CSP_USE_RDP == 0)
	/* Drop RDP packets */
	if (packet->id.flags & CSP_FRDP) {
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	7b1b      	ldrb	r3, [r3, #12]
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00f      	beq.n	800362a <csp_route_check_options+0x8e>
		csp_log_error("Received RDP packet, but CSP was compiled without RDP support. Discarding packet");
 800360a:	4b0a      	ldr	r3, [pc, #40]	@ (8003634 <csp_route_check_options+0x98>)
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d003      	beq.n	800361a <csp_route_check_options+0x7e>
 8003612:	490b      	ldr	r1, [pc, #44]	@ (8003640 <csp_route_check_options+0xa4>)
 8003614:	2000      	movs	r0, #0
 8003616:	f7ff fb21 	bl	8002c5c <do_csp_debug>
		iface->rx_error++;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	1c5a      	adds	r2, r3, #1
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	621a      	str	r2, [r3, #32]
		return CSP_ERR_NOTSUP;
 8003624:	f06f 0304 	mvn.w	r3, #4
 8003628:	e000      	b.n	800362c <csp_route_check_options+0x90>
	}
#endif
	return CSP_ERR_NONE;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3708      	adds	r7, #8
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	20000004 	.word	0x20000004
 8003638:	0800fa8c 	.word	0x0800fa8c
 800363c:	0800faec 	.word	0x0800faec
 8003640:	0800fb44 	.word	0x0800fb44

08003644 <csp_route_security_check>:
 * @param security_opts either socket_opts or conn_opts
 * @param iface pointer to incoming interface
 * @param packet pointer to packet
 * @return #CSP_ERR_NONE on success, otherwise an error code.
 */
static int csp_route_security_check(uint32_t security_opts, csp_iface_t * iface, csp_packet_t * packet) {
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
		return CSP_ERR_XTEA;
	}
#endif

	/* CRC32 verified packet */
	if (packet->id.flags & CSP_FCRC32) {
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	7b1b      	ldrb	r3, [r3, #12]
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	2b00      	cmp	r3, #0
 800365a:	d01a      	beq.n	8003692 <csp_route_security_check+0x4e>
			iface->rx_error++;
			return CSP_ERR_CRC32;
		}
#else
		/* No CRC32 validation - but size must be checked and adjusted */
		if (packet->length < sizeof(uint32_t)) {
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	895b      	ldrh	r3, [r3, #10]
 8003660:	2b03      	cmp	r3, #3
 8003662:	d80f      	bhi.n	8003684 <csp_route_security_check+0x40>
			csp_log_error("CRC32 verification error! Discarding packet");
 8003664:	4b14      	ldr	r3, [pc, #80]	@ (80036b8 <csp_route_security_check+0x74>)
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d003      	beq.n	8003674 <csp_route_security_check+0x30>
 800366c:	4913      	ldr	r1, [pc, #76]	@ (80036bc <csp_route_security_check+0x78>)
 800366e:	2000      	movs	r0, #0
 8003670:	f7ff faf4 	bl	8002c5c <do_csp_debug>
			iface->rx_error++;
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	6a1b      	ldr	r3, [r3, #32]
 8003678:	1c5a      	adds	r2, r3, #1
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	621a      	str	r2, [r3, #32]
			return CSP_ERR_CRC32;
 800367e:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8003682:	e014      	b.n	80036ae <csp_route_security_check+0x6a>
		}
		packet->length -= sizeof(uint32_t);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	895b      	ldrh	r3, [r3, #10]
 8003688:	3b04      	subs	r3, #4
 800368a:	b29a      	uxth	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	815a      	strh	r2, [r3, #10]
 8003690:	e00c      	b.n	80036ac <csp_route_security_check+0x68>
#endif
	} else if (security_opts & CSP_SO_CRC32REQ) {
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003698:	2b00      	cmp	r3, #0
 800369a:	d007      	beq.n	80036ac <csp_route_security_check+0x68>
		csp_log_warn("Received packet with CRC32, but CSP was compiled without CRC32 support. Accepting packet");
 800369c:	4b06      	ldr	r3, [pc, #24]	@ (80036b8 <csp_route_security_check+0x74>)
 800369e:	785b      	ldrb	r3, [r3, #1]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d003      	beq.n	80036ac <csp_route_security_check+0x68>
 80036a4:	4906      	ldr	r1, [pc, #24]	@ (80036c0 <csp_route_security_check+0x7c>)
 80036a6:	2001      	movs	r0, #1
 80036a8:	f7ff fad8 	bl	8002c5c <do_csp_debug>
			return CSP_ERR_INVAL;
		}
	}
#endif

	return CSP_ERR_NONE;
 80036ac:	2300      	movs	r3, #0

}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	20000004 	.word	0x20000004
 80036bc:	0800fb98 	.word	0x0800fb98
 80036c0:	0800fbc4 	.word	0x0800fbc4

080036c4 <csp_route_work>:

int csp_route_work(uint32_t timeout) {
 80036c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036c6:	b091      	sub	sp, #68	@ 0x44
 80036c8:	af06      	add	r7, sp, #24
 80036ca:	6078      	str	r0, [r7, #4]
	/* Check connection timeouts (currently only for RDP) */
	csp_conn_check_timeouts();
#endif

	/* Get next packet to route */
	if (csp_qfifo_read(&input) != CSP_ERR_NONE) {
 80036cc:	f107 0314 	add.w	r3, r7, #20
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7ff fecf 	bl	8003474 <csp_qfifo_read>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d002      	beq.n	80036e2 <csp_route_work+0x1e>
		return CSP_ERR_TIMEDOUT;
 80036dc:	f06f 0302 	mvn.w	r3, #2
 80036e0:	e172      	b.n	80039c8 <csp_route_work+0x304>
	}

	packet = input.packet;
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	613b      	str	r3, [r7, #16]
	if (packet == NULL) {
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d102      	bne.n	80036f2 <csp_route_work+0x2e>
		return CSP_ERR_TIMEDOUT;
 80036ec:	f06f 0302 	mvn.w	r3, #2
 80036f0:	e16a      	b.n	80039c8 <csp_route_work+0x304>
	}

	csp_log_packet("INP: S %u, D %u, Dp %u, Sp %u, Pr %u, Fl 0x%02X, Sz %"PRIu16" VIA: %s",
 80036f2:	4ba3      	ldr	r3, [pc, #652]	@ (8003980 <csp_route_work+0x2bc>)
 80036f4:	791b      	ldrb	r3, [r3, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d031      	beq.n	800375e <csp_route_work+0x9a>
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	7bdb      	ldrb	r3, [r3, #15]
 80036fe:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8003702:	b2db      	uxtb	r3, r3
 8003704:	461e      	mov	r6, r3
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	89db      	ldrh	r3, [r3, #14]
 800370a:	f3c3 1304 	ubfx	r3, r3, #4, #5
 800370e:	b2db      	uxtb	r3, r3
 8003710:	469c      	mov	ip, r3
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	f3c3 3385 	ubfx	r3, r3, #14, #6
 800371a:	b2db      	uxtb	r3, r3
 800371c:	461a      	mov	r2, r3
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	7b5b      	ldrb	r3, [r3, #13]
 8003722:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8003726:	b2db      	uxtb	r3, r3
 8003728:	4619      	mov	r1, r3
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	7bdb      	ldrb	r3, [r3, #15]
 800372e:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8003732:	b2db      	uxtb	r3, r3
 8003734:	4618      	mov	r0, r3
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	7b1b      	ldrb	r3, [r3, #12]
 800373a:	461c      	mov	r4, r3
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	895b      	ldrh	r3, [r3, #10]
 8003740:	461d      	mov	r5, r3
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	9305      	str	r3, [sp, #20]
 8003748:	9504      	str	r5, [sp, #16]
 800374a:	9403      	str	r4, [sp, #12]
 800374c:	9002      	str	r0, [sp, #8]
 800374e:	9101      	str	r1, [sp, #4]
 8003750:	9200      	str	r2, [sp, #0]
 8003752:	4663      	mov	r3, ip
 8003754:	4632      	mov	r2, r6
 8003756:	498b      	ldr	r1, [pc, #556]	@ (8003984 <csp_route_work+0x2c0>)
 8003758:	2004      	movs	r0, #4
 800375a:	f7ff fa7f 	bl	8002c5c <do_csp_debug>
		return CSP_ERR_NONE;
	}
#endif

	/* Now we count the message (since its deduplicated) */
	input.iface->rx++;
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	699a      	ldr	r2, [r3, #24]
 8003762:	3201      	adds	r2, #1
 8003764:	619a      	str	r2, [r3, #24]
	input.iface->rxbytes += packet->length;
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	895b      	ldrh	r3, [r3, #10]
 800376e:	4619      	mov	r1, r3
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	440a      	add	r2, r1
 8003774:	635a      	str	r2, [r3, #52]	@ 0x34

	/* If the message is not to me, route the message to the correct interface */
	if ((packet->id.dst != csp_conf.address) && (packet->id.dst != CSP_BROADCAST_ADDR)) {
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	89db      	ldrh	r3, [r3, #14]
 800377a:	f3c3 1304 	ubfx	r3, r3, #4, #5
 800377e:	b2db      	uxtb	r3, r3
 8003780:	461a      	mov	r2, r3
 8003782:	4b81      	ldr	r3, [pc, #516]	@ (8003988 <csp_route_work+0x2c4>)
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	429a      	cmp	r2, r3
 8003788:	d03a      	beq.n	8003800 <csp_route_work+0x13c>
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	89db      	ldrh	r3, [r3, #14]
 800378e:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003792:	b29b      	uxth	r3, r3
 8003794:	f5b3 7ff8 	cmp.w	r3, #496	@ 0x1f0
 8003798:	d032      	beq.n	8003800 <csp_route_work+0x13c>

		/* Find the destination interface */
		const csp_route_t * ifroute = csp_rtable_find_route(packet->id.dst);
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	89db      	ldrh	r3, [r3, #14]
 800379e:	f3c3 1304 	ubfx	r3, r3, #4, #5
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	4618      	mov	r0, r3
 80037a6:	f000 ff15 	bl	80045d4 <csp_rtable_find_route>
 80037aa:	6238      	str	r0, [r7, #32]

		/* If the message resolves to the input interface, don't loop it back out */
		if ((ifroute == NULL) || ((ifroute->iface == input.iface) && (input.iface->split_horizon_off == 0))) {
 80037ac:	6a3b      	ldr	r3, [r7, #32]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d008      	beq.n	80037c4 <csp_route_work+0x100>
 80037b2:	6a3b      	ldr	r3, [r7, #32]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d109      	bne.n	80037d0 <csp_route_work+0x10c>
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	7c9b      	ldrb	r3, [r3, #18]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d105      	bne.n	80037d0 <csp_route_work+0x10c>
			csp_buffer_free(packet);
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7fe fe78 	bl	80024bc <csp_buffer_free>
			return CSP_ERR_NONE;
 80037cc:	2300      	movs	r3, #0
 80037ce:	e0fb      	b.n	80039c8 <csp_route_work+0x304>
		}

		/* Otherwise, actually send the message */
		if (csp_send_direct(packet->id, packet, ifroute, 0) != CSP_ERR_NONE) {
 80037d0:	6938      	ldr	r0, [r7, #16]
 80037d2:	6939      	ldr	r1, [r7, #16]
 80037d4:	2300      	movs	r3, #0
 80037d6:	6a3a      	ldr	r2, [r7, #32]
 80037d8:	68c0      	ldr	r0, [r0, #12]
 80037da:	f7ff fc53 	bl	8003084 <csp_send_direct>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00b      	beq.n	80037fc <csp_route_work+0x138>
			csp_log_warn("Router failed to send");
 80037e4:	4b66      	ldr	r3, [pc, #408]	@ (8003980 <csp_route_work+0x2bc>)
 80037e6:	785b      	ldrb	r3, [r3, #1]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d003      	beq.n	80037f4 <csp_route_work+0x130>
 80037ec:	4967      	ldr	r1, [pc, #412]	@ (800398c <csp_route_work+0x2c8>)
 80037ee:	2001      	movs	r0, #1
 80037f0:	f7ff fa34 	bl	8002c5c <do_csp_debug>
			csp_buffer_free(packet);
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7fe fe60 	bl	80024bc <csp_buffer_free>
		}

		/* Next message, please */
		return CSP_ERR_NONE;
 80037fc:	2300      	movs	r3, #0
 80037fe:	e0e3      	b.n	80039c8 <csp_route_work+0x304>
	}

	/* Discard packets with unsupported options */
	if (csp_route_check_options(input.iface, packet) != CSP_ERR_NONE) {
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	4611      	mov	r1, r2
 8003806:	4618      	mov	r0, r3
 8003808:	f7ff fec8 	bl	800359c <csp_route_check_options>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d005      	beq.n	800381e <csp_route_work+0x15a>
		csp_buffer_free(packet);
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	4618      	mov	r0, r3
 8003816:	f7fe fe51 	bl	80024bc <csp_buffer_free>
		return CSP_ERR_NONE;
 800381a:	2300      	movs	r3, #0
 800381c:	e0d4      	b.n	80039c8 <csp_route_work+0x304>
	}

	/* The message is to me, search for incoming socket */
	socket = csp_port_get_socket(packet->id.dport);
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	f3c3 3385 	ubfx	r3, r3, #14, #6
 8003826:	b2db      	uxtb	r3, r3
 8003828:	4618      	mov	r0, r3
 800382a:	f7ff fd13 	bl	8003254 <csp_port_get_socket>
 800382e:	61f8      	str	r0, [r7, #28]

	/* If the socket is connection-less, deliver now */
	if (socket && (socket->opts & CSP_SO_CONN_LESS)) {
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d030      	beq.n	8003898 <csp_route_work+0x1d4>
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800383e:	2b00      	cmp	r3, #0
 8003840:	d02a      	beq.n	8003898 <csp_route_work+0x1d4>
		if (csp_route_security_check(socket->opts, input.iface, packet) < 0) {
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	6979      	ldr	r1, [r7, #20]
 8003848:	693a      	ldr	r2, [r7, #16]
 800384a:	4618      	mov	r0, r3
 800384c:	f7ff fefa 	bl	8003644 <csp_route_security_check>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	da05      	bge.n	8003862 <csp_route_work+0x19e>
			csp_buffer_free(packet);
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	4618      	mov	r0, r3
 800385a:	f7fe fe2f 	bl	80024bc <csp_buffer_free>
			return CSP_ERR_NONE;
 800385e:	2300      	movs	r3, #0
 8003860:	e0b2      	b.n	80039c8 <csp_route_work+0x304>
		}
		if (csp_queue_enqueue(socket->socket, &packet, 0) != CSP_QUEUE_OK) {
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	f107 0110 	add.w	r1, r7, #16
 800386a:	2200      	movs	r2, #0
 800386c:	4618      	mov	r0, r3
 800386e:	f7fe fb56 	bl	8001f1e <csp_queue_enqueue>
 8003872:	4603      	mov	r3, r0
 8003874:	2b01      	cmp	r3, #1
 8003876:	d00d      	beq.n	8003894 <csp_route_work+0x1d0>
			csp_log_error("Conn-less socket queue full");
 8003878:	4b41      	ldr	r3, [pc, #260]	@ (8003980 <csp_route_work+0x2bc>)
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d003      	beq.n	8003888 <csp_route_work+0x1c4>
 8003880:	4943      	ldr	r1, [pc, #268]	@ (8003990 <csp_route_work+0x2cc>)
 8003882:	2000      	movs	r0, #0
 8003884:	f7ff f9ea 	bl	8002c5c <do_csp_debug>
			csp_buffer_free(packet);
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	4618      	mov	r0, r3
 800388c:	f7fe fe16 	bl	80024bc <csp_buffer_free>
			return CSP_ERR_NONE;
 8003890:	2300      	movs	r3, #0
 8003892:	e099      	b.n	80039c8 <csp_route_work+0x304>
		}
		return CSP_ERR_NONE;
 8003894:	2300      	movs	r3, #0
 8003896:	e097      	b.n	80039c8 <csp_route_work+0x304>
	}

	/* Search for an existing connection */
	conn = csp_conn_find(packet->id.ext, CSP_ID_CONN_MASK);
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	493d      	ldr	r1, [pc, #244]	@ (8003994 <csp_route_work+0x2d0>)
 800389e:	4618      	mov	r0, r3
 80038a0:	f7fe ffa8 	bl	80027f4 <csp_conn_find>
 80038a4:	6278      	str	r0, [r7, #36]	@ 0x24

	/* If this is an incoming packet on a new connection */
	if (conn == NULL) {
 80038a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d177      	bne.n	800399c <csp_route_work+0x2d8>

		/* Reject packet if no matching socket is found */
		if (!socket) {
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d105      	bne.n	80038be <csp_route_work+0x1fa>
			csp_buffer_free(packet);
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7fe fe01 	bl	80024bc <csp_buffer_free>
			return CSP_ERR_NONE;
 80038ba:	2300      	movs	r3, #0
 80038bc:	e084      	b.n	80039c8 <csp_route_work+0x304>
		}

		/* Run security check on incoming packet */
		if (csp_route_security_check(socket->opts, input.iface, packet) < 0) {
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	6979      	ldr	r1, [r7, #20]
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7ff febc 	bl	8003644 <csp_route_security_check>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	da05      	bge.n	80038de <csp_route_work+0x21a>
			csp_buffer_free(packet);
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7fe fdf1 	bl	80024bc <csp_buffer_free>
			return CSP_ERR_NONE;
 80038da:	2300      	movs	r3, #0
 80038dc:	e074      	b.n	80039c8 <csp_route_work+0x304>
		}

		/* New incoming connection accepted */
		csp_id_t idout;
		idout.pri   = packet->id.pri;
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	7bdb      	ldrb	r3, [r3, #15]
 80038e2:	f3c3 1381 	ubfx	r3, r3, #6, #2
 80038e6:	b2da      	uxtb	r2, r3
 80038e8:	7bfb      	ldrb	r3, [r7, #15]
 80038ea:	f362 1387 	bfi	r3, r2, #6, #2
 80038ee:	73fb      	strb	r3, [r7, #15]
		idout.src   = csp_conf.address;
 80038f0:	4b25      	ldr	r3, [pc, #148]	@ (8003988 <csp_route_work+0x2c4>)
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	f003 031f 	and.w	r3, r3, #31
 80038f8:	b2da      	uxtb	r2, r3
 80038fa:	7bfb      	ldrb	r3, [r7, #15]
 80038fc:	f362 0345 	bfi	r3, r2, #1, #5
 8003900:	73fb      	strb	r3, [r7, #15]

		idout.dst   = packet->id.src;
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	7bdb      	ldrb	r3, [r3, #15]
 8003906:	f3c3 0344 	ubfx	r3, r3, #1, #5
 800390a:	b2da      	uxtb	r2, r3
 800390c:	89fb      	ldrh	r3, [r7, #14]
 800390e:	f362 1308 	bfi	r3, r2, #4, #5
 8003912:	81fb      	strh	r3, [r7, #14]
		idout.dport = packet->id.sport;
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	7b5b      	ldrb	r3, [r3, #13]
 8003918:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800391c:	b2da      	uxtb	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f362 3393 	bfi	r3, r2, #14, #6
 8003924:	60fb      	str	r3, [r7, #12]
		idout.sport = packet->id.dport;
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	f3c3 3385 	ubfx	r3, r3, #14, #6
 800392e:	b2da      	uxtb	r2, r3
 8003930:	7b7b      	ldrb	r3, [r7, #13]
 8003932:	f362 0305 	bfi	r3, r2, #0, #6
 8003936:	737b      	strb	r3, [r7, #13]
		idout.flags = packet->id.flags;
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	7b1b      	ldrb	r3, [r3, #12]
 800393c:	733b      	strb	r3, [r7, #12]

		/* Create connection */
		conn = csp_conn_new(packet->id, idout);
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	68f9      	ldr	r1, [r7, #12]
 8003942:	68d8      	ldr	r0, [r3, #12]
 8003944:	f7ff f83e 	bl	80029c4 <csp_conn_new>
 8003948:	6278      	str	r0, [r7, #36]	@ 0x24

		if (!conn) {
 800394a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10d      	bne.n	800396c <csp_route_work+0x2a8>
			csp_log_error("No more connections available");
 8003950:	4b0b      	ldr	r3, [pc, #44]	@ (8003980 <csp_route_work+0x2bc>)
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d003      	beq.n	8003960 <csp_route_work+0x29c>
 8003958:	490f      	ldr	r1, [pc, #60]	@ (8003998 <csp_route_work+0x2d4>)
 800395a:	2000      	movs	r0, #0
 800395c:	f7ff f97e 	bl	8002c5c <do_csp_debug>
			csp_buffer_free(packet);
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	4618      	mov	r0, r3
 8003964:	f7fe fdaa 	bl	80024bc <csp_buffer_free>
			return CSP_ERR_NONE;
 8003968:	2300      	movs	r3, #0
 800396a:	e02d      	b.n	80039c8 <csp_route_work+0x304>
		}

		/* Store the socket queue and options */
		conn->socket = socket->socket;
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	691a      	ldr	r2, [r3, #16]
 8003970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003972:	611a      	str	r2, [r3, #16]
		conn->opts = socket->opts;
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	699a      	ldr	r2, [r3, #24]
 8003978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800397a:	619a      	str	r2, [r3, #24]
 800397c:	e01e      	b.n	80039bc <csp_route_work+0x2f8>
 800397e:	bf00      	nop
 8003980:	20000004 	.word	0x20000004
 8003984:	0800fc20 	.word	0x0800fc20
 8003988:	20000388 	.word	0x20000388
 800398c:	0800fc60 	.word	0x0800fc60
 8003990:	0800fc78 	.word	0x0800fc78
 8003994:	3fffff00 	.word	0x3fffff00
 8003998:	0800fc94 	.word	0x0800fc94

	/* Packet to existing connection */
	} else {

		/* Run security check on incoming packet */
		if (csp_route_security_check(conn->opts, input.iface, packet) < 0) {
 800399c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	6979      	ldr	r1, [r7, #20]
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7ff fe4d 	bl	8003644 <csp_route_security_check>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	da05      	bge.n	80039bc <csp_route_work+0x2f8>
			csp_buffer_free(packet);
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7fe fd82 	bl	80024bc <csp_buffer_free>
			return CSP_ERR_NONE;
 80039b8:	2300      	movs	r3, #0
 80039ba:	e005      	b.n	80039c8 <csp_route_work+0x304>
		return CSP_ERR_NONE;
	}
#endif

	/* Pass packet to UDP module */
	csp_udp_new_packet(conn, packet);
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	4619      	mov	r1, r3
 80039c0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80039c2:	f000 fe69 	bl	8004698 <csp_udp_new_packet>
	return CSP_ERR_NONE;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	372c      	adds	r7, #44	@ 0x2c
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080039d0 <csp_task_router>:

static CSP_DEFINE_TASK(csp_task_router) {
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]

	/* Here there be routing */
	while (1) {
		csp_route_work(FIFO_TIMEOUT);
 80039d8:	f04f 30ff 	mov.w	r0, #4294967295
 80039dc:	f7ff fe72 	bl	80036c4 <csp_route_work>
 80039e0:	e7fa      	b.n	80039d8 <csp_task_router+0x8>
	...

080039e4 <csp_route_start_task>:

	return CSP_TASK_RETURN;

}

int csp_route_start_task(unsigned int task_stack_size, unsigned int task_priority) {
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af02      	add	r7, sp, #8
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]

	int ret = csp_thread_create(csp_task_router, "RTE", task_stack_size, NULL, task_priority, NULL);
 80039ee:	2300      	movs	r3, #0
 80039f0:	9301      	str	r3, [sp, #4]
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	9300      	str	r3, [sp, #0]
 80039f6:	2300      	movs	r3, #0
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	490c      	ldr	r1, [pc, #48]	@ (8003a2c <csp_route_start_task+0x48>)
 80039fc:	480c      	ldr	r0, [pc, #48]	@ (8003a30 <csp_route_start_task+0x4c>)
 80039fe:	f7fe fbd9 	bl	80021b4 <csp_thread_create>
 8003a02:	60f8      	str	r0, [r7, #12]
	if (ret != 0) {
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00a      	beq.n	8003a20 <csp_route_start_task+0x3c>
		csp_log_error("Failed to start router task, error: %d", ret);
 8003a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8003a34 <csp_route_start_task+0x50>)
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d004      	beq.n	8003a1c <csp_route_start_task+0x38>
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	4908      	ldr	r1, [pc, #32]	@ (8003a38 <csp_route_start_task+0x54>)
 8003a16:	2000      	movs	r0, #0
 8003a18:	f7ff f920 	bl	8002c5c <do_csp_debug>
		return ret;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	e000      	b.n	8003a22 <csp_route_start_task+0x3e>
	}

	return CSP_ERR_NONE;
 8003a20:	2300      	movs	r3, #0

}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	0800fcb4 	.word	0x0800fcb4
 8003a30:	080039d1 	.word	0x080039d1
 8003a34:	20000004 	.word	0x20000004
 8003a38:	0800fcb8 	.word	0x0800fcb8

08003a3c <csp_can_rx>:
	/* Remaining CFP fragment(s) of a CSP packet */
	CFP_MORE = 1
};

int csp_can_rx(csp_iface_t *iface, uint32_t id, const uint8_t *data, uint8_t dlc, CSP_BASE_TYPE *task_woken)
{
 8003a3c:	b590      	push	{r4, r7, lr}
 8003a3e:	b087      	sub	sp, #28
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
 8003a48:	70fb      	strb	r3, [r7, #3]
			return CSP_ERR_DRIVER;
		}
	}

	/* Bind incoming frame to a packet buffer */
	csp_can_pbuf_element_t * buf = csp_can_pbuf_find(id, CFP_ID_CONN_MASK, task_woken);
 8003a4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a4c:	4989      	ldr	r1, [pc, #548]	@ (8003c74 <csp_can_rx+0x238>)
 8003a4e:	68b8      	ldr	r0, [r7, #8]
 8003a50:	f000 fad8 	bl	8004004 <csp_can_pbuf_find>
 8003a54:	6178      	str	r0, [r7, #20]
	if (buf == NULL) {
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d11d      	bne.n	8003a98 <csp_can_rx+0x5c>
		if (CFP_TYPE(id) == CFP_BEGIN) {
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	0c9b      	lsrs	r3, r3, #18
 8003a60:	f003 0301 	and.w	r3, r3, #1
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d10f      	bne.n	8003a88 <csp_can_rx+0x4c>
			buf = csp_can_pbuf_new(id, task_woken);
 8003a68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a6a:	68b8      	ldr	r0, [r7, #8]
 8003a6c:	f000 fa4a 	bl	8003f04 <csp_can_pbuf_new>
 8003a70:	6178      	str	r0, [r7, #20]
			if (buf == NULL) {
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d10f      	bne.n	8003a98 <csp_can_rx+0x5c>
				//csp_log_warn("No available packet buffer for CAN");
				iface->rx_error++;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6a1b      	ldr	r3, [r3, #32]
 8003a7c:	1c5a      	adds	r2, r3, #1
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	621a      	str	r2, [r3, #32]
				return CSP_ERR_NOMEM;
 8003a82:	f04f 33ff 	mov.w	r3, #4294967295
 8003a86:	e0f1      	b.n	8003c6c <csp_can_rx+0x230>
			}
		} else {
			//csp_log_warn("Out of order id 0x%X remain %u", CFP_ID(id), CFP_REMAIN(id));
			iface->frame++;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a8c:	1c5a      	adds	r2, r3, #1
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	62da      	str	r2, [r3, #44]	@ 0x2c
			return CSP_ERR_INVAL;
 8003a92:	f06f 0301 	mvn.w	r3, #1
 8003a96:	e0e9      	b.n	8003c6c <csp_can_rx+0x230>
		}
	}

	/* Reset frame data offset */
	uint8_t offset = 0;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	74fb      	strb	r3, [r7, #19]

	switch (CFP_TYPE(id)) {
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	0c9b      	lsrs	r3, r3, #18
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d002      	beq.n	8003aae <csp_can_rx+0x72>
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d07a      	beq.n	8003ba2 <csp_can_rx+0x166>
 8003aac:	e0d7      	b.n	8003c5e <csp_can_rx+0x222>

	case CFP_BEGIN:

		/* Discard packet if DLC is less than CSP id + CSP length fields */
		if (dlc < (sizeof(csp_id_t) + sizeof(uint16_t))) {
 8003aae:	78fb      	ldrb	r3, [r7, #3]
 8003ab0:	2b05      	cmp	r3, #5
 8003ab2:	d809      	bhi.n	8003ac8 <csp_can_rx+0x8c>
			//csp_log_warn("Short BEGIN frame received");
			iface->frame++;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab8:	1c5a      	adds	r2, r3, #1
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	62da      	str	r2, [r3, #44]	@ 0x2c
			csp_can_pbuf_free(buf, task_woken);
 8003abe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ac0:	6978      	ldr	r0, [r7, #20]
 8003ac2:	f000 f9f1 	bl	8003ea8 <csp_can_pbuf_free>
			break;
 8003ac6:	e0d0      	b.n	8003c6a <csp_can_rx+0x22e>
		}

		/* Check for incomplete frame */
		if (buf->packet != NULL) {
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d005      	beq.n	8003adc <csp_can_rx+0xa0>
			/* Reuse the buffer */
			//csp_log_warn("Incomplete frame");
			iface->frame++;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ad4:	1c5a      	adds	r2, r3, #1
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003ada:	e01b      	b.n	8003b14 <csp_can_rx+0xd8>
		} else {
			/* Get free buffer for frame */
			buf->packet = task_woken ? csp_buffer_get_isr(0) : csp_buffer_get(0); // CSP only supports one size
 8003adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d004      	beq.n	8003aec <csp_can_rx+0xb0>
 8003ae2:	2000      	movs	r0, #0
 8003ae4:	f7fe fc1c 	bl	8002320 <csp_buffer_get_isr>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	e003      	b.n	8003af4 <csp_can_rx+0xb8>
 8003aec:	2000      	movs	r0, #0
 8003aee:	f7fe fc49 	bl	8002384 <csp_buffer_get>
 8003af2:	4603      	mov	r3, r0
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	60d3      	str	r3, [r2, #12]
			if (buf->packet == NULL) {
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d109      	bne.n	8003b14 <csp_can_rx+0xd8>
				//csp_log_error("Failed to get buffer for CSP_BEGIN packet");
				iface->frame++;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b04:	1c5a      	adds	r2, r3, #1
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	62da      	str	r2, [r3, #44]	@ 0x2c
				csp_can_pbuf_free(buf, task_woken);
 8003b0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b0c:	6978      	ldr	r0, [r7, #20]
 8003b0e:	f000 f9cb 	bl	8003ea8 <csp_can_pbuf_free>
				break;
 8003b12:	e0aa      	b.n	8003c6a <csp_can_rx+0x22e>
			}
		}

		/* Copy CSP identifier (header) */
		memcpy(&(buf->packet->id), data, sizeof(buf->packet->id));
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	330c      	adds	r3, #12
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	6812      	ldr	r2, [r2, #0]
 8003b1e:	601a      	str	r2, [r3, #0]
		buf->packet->id.ext = csp_ntoh32(buf->packet->id.ext);
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	68da      	ldr	r2, [r3, #12]
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	68dc      	ldr	r4, [r3, #12]
 8003b2a:	4610      	mov	r0, r2
 8003b2c:	f7ff f93d 	bl	8002daa <csp_ntoh32>
 8003b30:	4603      	mov	r3, r0
 8003b32:	60e3      	str	r3, [r4, #12]

		/* Copy CSP length (of data) */
		memcpy(&(buf->packet->length), data + sizeof(csp_id_t), sizeof(buf->packet->length));
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	330a      	adds	r3, #10
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	3204      	adds	r2, #4
 8003b3e:	8812      	ldrh	r2, [r2, #0]
 8003b40:	b292      	uxth	r2, r2
 8003b42:	801a      	strh	r2, [r3, #0]
		buf->packet->length = csp_ntoh16(buf->packet->length);
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	895a      	ldrh	r2, [r3, #10]
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	68dc      	ldr	r4, [r3, #12]
 8003b4e:	4610      	mov	r0, r2
 8003b50:	f7ff f904 	bl	8002d5c <csp_ntoh16>
 8003b54:	4603      	mov	r3, r0
 8003b56:	8163      	strh	r3, [r4, #10]

		/* Check length against max */
		if ((buf->packet->length > MAX_CAN_DATA_SIZE) || (buf->packet->length > csp_buffer_data_size())) {
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	895b      	ldrh	r3, [r3, #10]
 8003b5e:	f240 72fa 	movw	r2, #2042	@ 0x7fa
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d808      	bhi.n	8003b78 <csp_can_rx+0x13c>
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	895b      	ldrh	r3, [r3, #10]
 8003b6c:	461c      	mov	r4, r3
 8003b6e:	f7fe fd29 	bl	80025c4 <csp_buffer_data_size>
 8003b72:	4603      	mov	r3, r0
 8003b74:	429c      	cmp	r4, r3
 8003b76:	d909      	bls.n	8003b8c <csp_can_rx+0x150>
			iface->rx_error++;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	1c5a      	adds	r2, r3, #1
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	621a      	str	r2, [r3, #32]
			csp_can_pbuf_free(buf, task_woken);
 8003b82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b84:	6978      	ldr	r0, [r7, #20]
 8003b86:	f000 f98f 	bl	8003ea8 <csp_can_pbuf_free>
			break;
 8003b8a:	e06e      	b.n	8003c6a <csp_can_rx+0x22e>
		}

		/* Reset RX count */
		buf->rx_count = 0;
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	801a      	strh	r2, [r3, #0]

		/* Set offset to prevent CSP header from being copied to CSP data */
		offset = sizeof(csp_id_t) + sizeof(uint16_t);
 8003b92:	2306      	movs	r3, #6
 8003b94:	74fb      	strb	r3, [r7, #19]

		/* Set remain field - increment to include begin packet */
		buf->remain = CFP_REMAIN(id) + 1;
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	0a9b      	lsrs	r3, r3, #10
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	1c5a      	adds	r2, r3, #1
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	605a      	str	r2, [r3, #4]
		/* FALLTHROUGH */

	case CFP_MORE:

		/* Check 'remain' field match */
		if (CFP_REMAIN(id) != buf->remain - 1) {
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	0a9b      	lsrs	r3, r3, #10
 8003ba6:	b2da      	uxtb	r2, r3
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	3b01      	subs	r3, #1
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d009      	beq.n	8003bc6 <csp_can_rx+0x18a>
			//csp_log_error("CAN frame lost in CSP packet");
			csp_can_pbuf_free(buf, task_woken);
 8003bb2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bb4:	6978      	ldr	r0, [r7, #20]
 8003bb6:	f000 f977 	bl	8003ea8 <csp_can_pbuf_free>
			iface->frame++;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bbe:	1c5a      	adds	r2, r3, #1
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	62da      	str	r2, [r3, #44]	@ 0x2c
			break;
 8003bc4:	e051      	b.n	8003c6a <csp_can_rx+0x22e>
		}

		/* Decrement remaining frames */
		buf->remain--;
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	1e5a      	subs	r2, r3, #1
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	605a      	str	r2, [r3, #4]

		/* Check for overflow */
		if ((buf->rx_count + dlc - offset) > buf->packet->length) {
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	881b      	ldrh	r3, [r3, #0]
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	78fb      	ldrb	r3, [r7, #3]
 8003bd8:	441a      	add	r2, r3
 8003bda:	7cfb      	ldrb	r3, [r7, #19]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	68d2      	ldr	r2, [r2, #12]
 8003be2:	8952      	ldrh	r2, [r2, #10]
 8003be4:	4293      	cmp	r3, r2
 8003be6:	dd09      	ble.n	8003bfc <csp_can_rx+0x1c0>
			//csp_log_error("RX buffer overflow");
			iface->frame++;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bec:	1c5a      	adds	r2, r3, #1
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	62da      	str	r2, [r3, #44]	@ 0x2c
			csp_can_pbuf_free(buf, task_woken);
 8003bf2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bf4:	6978      	ldr	r0, [r7, #20]
 8003bf6:	f000 f957 	bl	8003ea8 <csp_can_pbuf_free>
			break;
 8003bfa:	e036      	b.n	8003c6a <csp_can_rx+0x22e>
		}

		/* Copy dlc bytes into buffer */
		memcpy(&buf->packet->data[buf->rx_count], data + offset, dlc - offset);
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	68da      	ldr	r2, [r3, #12]
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	881b      	ldrh	r3, [r3, #0]
 8003c04:	3310      	adds	r3, #16
 8003c06:	18d0      	adds	r0, r2, r3
 8003c08:	7cfb      	ldrb	r3, [r7, #19]
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	18d1      	adds	r1, r2, r3
 8003c0e:	78fa      	ldrb	r2, [r7, #3]
 8003c10:	7cfb      	ldrb	r3, [r7, #19]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	461a      	mov	r2, r3
 8003c16:	f007 ff32 	bl	800ba7e <memcpy>
		buf->rx_count += dlc - offset;
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	881a      	ldrh	r2, [r3, #0]
 8003c1e:	78fb      	ldrb	r3, [r7, #3]
 8003c20:	b299      	uxth	r1, r3
 8003c22:	7cfb      	ldrb	r3, [r7, #19]
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	1acb      	subs	r3, r1, r3
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	4413      	add	r3, r2
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	801a      	strh	r2, [r3, #0]

		/* Check if more data is expected */
		if (buf->rx_count != buf->packet->length)
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	881a      	ldrh	r2, [r3, #0]
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	895b      	ldrh	r3, [r3, #10]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d113      	bne.n	8003c68 <csp_can_rx+0x22c>
			break;

		/* Data is available */
		csp_qfifo_write(buf->packet, iface, task_woken);
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c46:	68f9      	ldr	r1, [r7, #12]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7ff fc2d 	bl	80034a8 <csp_qfifo_write>

		/* Drop packet buffer reference */
		buf->packet = NULL;
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	2200      	movs	r2, #0
 8003c52:	60da      	str	r2, [r3, #12]

		/* Free packet buffer */
		csp_can_pbuf_free(buf, task_woken);
 8003c54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c56:	6978      	ldr	r0, [r7, #20]
 8003c58:	f000 f926 	bl	8003ea8 <csp_can_pbuf_free>

		break;
 8003c5c:	e005      	b.n	8003c6a <csp_can_rx+0x22e>

	default:
		//csp_log_warn("Received unknown CFP message type");
		csp_can_pbuf_free(buf, task_woken);
 8003c5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c60:	6978      	ldr	r0, [r7, #20]
 8003c62:	f000 f921 	bl	8003ea8 <csp_can_pbuf_free>
		break;
 8003c66:	e000      	b.n	8003c6a <csp_can_rx+0x22e>
			break;
 8003c68:	bf00      	nop
	}

	return CSP_ERR_NONE;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	371c      	adds	r7, #28
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd90      	pop	{r4, r7, pc}
 8003c74:	1ff803ff 	.word	0x1ff803ff

08003c78 <csp_can_tx>:

int csp_can_tx(const csp_route_t * ifroute, csp_packet_t *packet)
{
 8003c78:	b590      	push	{r4, r7, lr}
 8003c7a:	b08f      	sub	sp, #60	@ 0x3c
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
        csp_iface_t * iface = ifroute->iface;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	633b      	str	r3, [r7, #48]	@ 0x30
        csp_can_interface_data_t * ifdata = iface->interface_data;
 8003c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Get an unique CFP id - this should be locked to prevent access from multiple tasks */
	const uint32_t ident = ifdata->cfp_frame_id++;
 8003c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	1c59      	adds	r1, r3, #1
 8003c94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c96:	6011      	str	r1, [r2, #0]
 8003c98:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check protocol's max length - limit is 1 (first) frame + as many frames that can be specified in 'remain' */
        if (packet->length > MAX_CAN_DATA_SIZE) {
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	895b      	ldrh	r3, [r3, #10]
 8003c9e:	f240 72fa 	movw	r2, #2042	@ 0x7fa
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d902      	bls.n	8003cac <csp_can_tx+0x34>
		return CSP_ERR_TX;
 8003ca6:	f06f 0309 	mvn.w	r3, #9
 8003caa:	e0bf      	b.n	8003e2c <csp_can_tx+0x1b4>
        }

	/* Insert destination node/via address into the CFP destination field */
	const uint8_t dest = (ifroute->via != CSP_NO_VIA_ADDRESS) ? ifroute->via : packet->id.dst;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	791b      	ldrb	r3, [r3, #4]
 8003cb0:	2bff      	cmp	r3, #255	@ 0xff
 8003cb2:	d002      	beq.n	8003cba <csp_can_tx+0x42>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	791b      	ldrb	r3, [r3, #4]
 8003cb8:	e004      	b.n	8003cc4 <csp_can_tx+0x4c>
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	89db      	ldrh	r3, [r3, #14]
 8003cbe:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	/* Create CAN identifier */
	uint32_t id = (CFP_MAKE_SRC(packet->id.src) |
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	7bdb      	ldrb	r3, [r3, #15]
 8003ccc:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	061a      	lsls	r2, r3, #24
                       CFP_MAKE_DST(dest) |
 8003cd4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003cd8:	04db      	lsls	r3, r3, #19
 8003cda:	f403 0378 	and.w	r3, r3, #16252928	@ 0xf80000
	uint32_t id = (CFP_MAKE_SRC(packet->id.src) |
 8003cde:	431a      	orrs	r2, r3
                       CFP_MAKE_ID(ident) |
 8003ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ce2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ce6:	431a      	orrs	r2, r3
                       CFP_MAKE_TYPE(CFP_BEGIN) |
                       CFP_MAKE_REMAIN((packet->length + CFP_OVERHEAD - 1) / MAX_BYTES_IN_CAN_FRAME));
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	895b      	ldrh	r3, [r3, #10]
 8003cec:	3305      	adds	r3, #5
 8003cee:	08db      	lsrs	r3, r3, #3
 8003cf0:	029b      	lsls	r3, r3, #10
 8003cf2:	f403 337f 	and.w	r3, r3, #261120	@ 0x3fc00
	uint32_t id = (CFP_MAKE_SRC(packet->id.src) |
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	623b      	str	r3, [r7, #32]

	/* Calculate first frame data bytes */
	const uint8_t avail = MAX_BYTES_IN_CAN_FRAME - CFP_OVERHEAD;
 8003cfa:	2302      	movs	r3, #2
 8003cfc:	77fb      	strb	r3, [r7, #31]
	uint8_t bytes = (packet->length <= avail) ? packet->length : avail;
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	895a      	ldrh	r2, [r3, #10]
 8003d02:	7ffb      	ldrb	r3, [r7, #31]
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d803      	bhi.n	8003d12 <csp_can_tx+0x9a>
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	895b      	ldrh	r3, [r3, #10]
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	e000      	b.n	8003d14 <csp_can_tx+0x9c>
 8003d12:	7ffb      	ldrb	r3, [r7, #31]
 8003d14:	77bb      	strb	r3, [r7, #30]

	/* Copy CSP headers and data */
	const uint32_t csp_id_be = csp_hton32(packet->id.ext);
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7ff f82c 	bl	8002d78 <csp_hton32>
 8003d20:	4603      	mov	r3, r0
 8003d22:	617b      	str	r3, [r7, #20]
	const uint16_t csp_length_be = csp_hton16(packet->length);
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	895b      	ldrh	r3, [r3, #10]
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7ff f801 	bl	8002d30 <csp_hton16>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	827b      	strh	r3, [r7, #18]

	uint8_t frame_buf[MAX_BYTES_IN_CAN_FRAME];
	memcpy(frame_buf, &csp_id_be, sizeof(csp_id_be));
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	60bb      	str	r3, [r7, #8]
	memcpy(frame_buf + sizeof(csp_id_be), &csp_length_be, sizeof(csp_length_be));
 8003d36:	f107 0308 	add.w	r3, r7, #8
 8003d3a:	3304      	adds	r3, #4
 8003d3c:	8a7a      	ldrh	r2, [r7, #18]
 8003d3e:	801a      	strh	r2, [r3, #0]
	memcpy(frame_buf + CFP_OVERHEAD, packet->data, bytes);
 8003d40:	f107 0308 	add.w	r3, r7, #8
 8003d44:	3306      	adds	r3, #6
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	f102 0110 	add.w	r1, r2, #16
 8003d4c:	7fba      	ldrb	r2, [r7, #30]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f007 fe95 	bl	800ba7e <memcpy>

	/* Increment tx counter */
	uint16_t tx_count = bytes;
 8003d54:	7fbb      	ldrb	r3, [r7, #30]
 8003d56:	86fb      	strh	r3, [r7, #54]	@ 0x36

        const csp_can_driver_tx_t tx_func = ifdata->tx_func;
 8003d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	61bb      	str	r3, [r7, #24]

	/* Send first frame */
	if ((tx_func)(iface->driver_data, id, frame_buf, CFP_OVERHEAD + bytes) != CSP_ERR_NONE) {
 8003d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d60:	6898      	ldr	r0, [r3, #8]
 8003d62:	7fbb      	ldrb	r3, [r7, #30]
 8003d64:	3306      	adds	r3, #6
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	f107 0208 	add.w	r2, r7, #8
 8003d6c:	69bc      	ldr	r4, [r7, #24]
 8003d6e:	6a39      	ldr	r1, [r7, #32]
 8003d70:	47a0      	blx	r4
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d050      	beq.n	8003e1a <csp_can_tx+0x1a2>
		//csp_log_warn("Failed to send CAN frame in csp_tx_can");
		iface->tx_error++;
 8003d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d7a:	69db      	ldr	r3, [r3, #28]
 8003d7c:	1c5a      	adds	r2, r3, #1
 8003d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d80:	61da      	str	r2, [r3, #28]
		return CSP_ERR_DRIVER;
 8003d82:	f06f 030a 	mvn.w	r3, #10
 8003d86:	e051      	b.n	8003e2c <csp_can_tx+0x1b4>
	}

	/* Send next frames if not complete */
	while (tx_count < packet->length) {
		/* Calculate frame data bytes */
		bytes = (packet->length - tx_count >= MAX_BYTES_IN_CAN_FRAME) ? MAX_BYTES_IN_CAN_FRAME : packet->length - tx_count;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	895b      	ldrh	r3, [r3, #10]
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b08      	cmp	r3, #8
 8003d94:	bfa8      	it	ge
 8003d96:	2308      	movge	r3, #8
 8003d98:	77bb      	strb	r3, [r7, #30]

		/* Prepare identifier */
		id = (CFP_MAKE_SRC(packet->id.src) |
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	7bdb      	ldrb	r3, [r3, #15]
 8003d9e:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	061a      	lsls	r2, r3, #24
                      CFP_MAKE_DST(dest) |
 8003da6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003daa:	04db      	lsls	r3, r3, #19
 8003dac:	f403 0378 	and.w	r3, r3, #16252928	@ 0xf80000
		id = (CFP_MAKE_SRC(packet->id.src) |
 8003db0:	431a      	orrs	r2, r3
                      CFP_MAKE_ID(ident) |
 8003db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003db4:	f3c3 0309 	ubfx	r3, r3, #0, #10
                      CFP_MAKE_DST(dest) |
 8003db8:	431a      	orrs	r2, r3
                      CFP_MAKE_TYPE(CFP_MORE) |
                      CFP_MAKE_REMAIN((packet->length - tx_count - bytes + MAX_BYTES_IN_CAN_FRAME - 1) / MAX_BYTES_IN_CAN_FRAME));
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	895b      	ldrh	r3, [r3, #10]
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003dc2:	1ac9      	subs	r1, r1, r3
 8003dc4:	7fbb      	ldrb	r3, [r7, #30]
 8003dc6:	1acb      	subs	r3, r1, r3
 8003dc8:	3307      	adds	r3, #7
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	da00      	bge.n	8003dd0 <csp_can_tx+0x158>
 8003dce:	3307      	adds	r3, #7
 8003dd0:	10db      	asrs	r3, r3, #3
 8003dd2:	029b      	lsls	r3, r3, #10
 8003dd4:	f403 337f 	and.w	r3, r3, #261120	@ 0x3fc00
                      CFP_MAKE_TYPE(CFP_MORE) |
 8003dd8:	4313      	orrs	r3, r2
		id = (CFP_MAKE_SRC(packet->id.src) |
 8003dda:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003dde:	623b      	str	r3, [r7, #32]

		/* Increment tx counter */
		tx_count += bytes;
 8003de0:	7fbb      	ldrb	r3, [r7, #30]
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003de6:	4413      	add	r3, r2
 8003de8:	86fb      	strh	r3, [r7, #54]	@ 0x36

		/* Send frame */
		if ((tx_func)(iface->driver_data, id, packet->data + tx_count - bytes, bytes) != CSP_ERR_NONE) {
 8003dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dec:	6898      	ldr	r0, [r3, #8]
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	f103 0210 	add.w	r2, r3, #16
 8003df4:	8ef9      	ldrh	r1, [r7, #54]	@ 0x36
 8003df6:	7fbb      	ldrb	r3, [r7, #30]
 8003df8:	1acb      	subs	r3, r1, r3
 8003dfa:	441a      	add	r2, r3
 8003dfc:	7fbb      	ldrb	r3, [r7, #30]
 8003dfe:	69bc      	ldr	r4, [r7, #24]
 8003e00:	6a39      	ldr	r1, [r7, #32]
 8003e02:	47a0      	blx	r4
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d007      	beq.n	8003e1a <csp_can_tx+0x1a2>
			//csp_log_warn("Failed to send CAN frame in Tx callback");
			iface->tx_error++;
 8003e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	1c5a      	adds	r2, r3, #1
 8003e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e12:	61da      	str	r2, [r3, #28]
			return CSP_ERR_DRIVER;
 8003e14:	f06f 030a 	mvn.w	r3, #10
 8003e18:	e008      	b.n	8003e2c <csp_can_tx+0x1b4>
	while (tx_count < packet->length) {
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	895b      	ldrh	r3, [r3, #10]
 8003e1e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d3b1      	bcc.n	8003d88 <csp_can_tx+0x110>
		}
	}

	csp_buffer_free(packet);
 8003e24:	6838      	ldr	r0, [r7, #0]
 8003e26:	f7fe fb49 	bl	80024bc <csp_buffer_free>

	return CSP_ERR_NONE;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	373c      	adds	r7, #60	@ 0x3c
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd90      	pop	{r4, r7, pc}

08003e34 <csp_can_add_interface>:

int csp_can_add_interface(csp_iface_t * iface) {
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]

	if ((iface == NULL) || (iface->name == NULL) || (iface->interface_data == NULL)) {
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d007      	beq.n	8003e52 <csp_can_add_interface+0x1e>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d003      	beq.n	8003e52 <csp_can_add_interface+0x1e>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d102      	bne.n	8003e58 <csp_can_add_interface+0x24>
		return CSP_ERR_INVAL;
 8003e52:	f06f 0301 	mvn.w	r3, #1
 8003e56:	e021      	b.n	8003e9c <csp_can_add_interface+0x68>
	}

        csp_can_interface_data_t * ifdata = iface->interface_data;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	60fb      	str	r3, [r7, #12]
	if (ifdata->tx_func == NULL) {
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d102      	bne.n	8003e6c <csp_can_add_interface+0x38>
		return CSP_ERR_INVAL;
 8003e66:	f06f 0301 	mvn.w	r3, #1
 8003e6a:	e017      	b.n	8003e9c <csp_can_add_interface+0x68>
	}

        if ((iface->mtu == 0) || (iface->mtu > MAX_CAN_DATA_SIZE)) {
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	8a1b      	ldrh	r3, [r3, #16]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d005      	beq.n	8003e80 <csp_can_add_interface+0x4c>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	8a1b      	ldrh	r3, [r3, #16]
 8003e78:	f240 72fa 	movw	r2, #2042	@ 0x7fa
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d903      	bls.n	8003e88 <csp_can_add_interface+0x54>
            iface->mtu = MAX_CAN_DATA_SIZE;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f240 72fa 	movw	r2, #2042	@ 0x7fa
 8003e86:	821a      	strh	r2, [r3, #16]
        }

        ifdata->cfp_frame_id = 0;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	601a      	str	r2, [r3, #0]

	iface->nexthop = csp_can_tx;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a04      	ldr	r2, [pc, #16]	@ (8003ea4 <csp_can_add_interface+0x70>)
 8003e92:	60da      	str	r2, [r3, #12]

	return csp_iflist_add(iface);
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f7fe ff95 	bl	8002dc4 <csp_iflist_add>
 8003e9a:	4603      	mov	r3, r0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3710      	adds	r7, #16
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	08003c79 	.word	0x08003c79

08003ea8 <csp_can_pbuf_free>:
#define PBUF_TIMEOUT_MS		1000

static csp_can_pbuf_element_t csp_can_pbuf[PBUF_ELEMENTS] = {};

int csp_can_pbuf_free(csp_can_pbuf_element_t *buf, CSP_BASE_TYPE *task_woken)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
	/* Free CSP packet */
	if (buf->packet != NULL) {
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00d      	beq.n	8003ed6 <csp_can_pbuf_free+0x2e>
		if (task_woken == NULL) {
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d105      	bne.n	8003ecc <csp_can_pbuf_free+0x24>
			csp_buffer_free(buf->packet);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7fe faf9 	bl	80024bc <csp_buffer_free>
 8003eca:	e004      	b.n	8003ed6 <csp_can_pbuf_free+0x2e>
		} else {
			csp_buffer_free_isr(buf->packet);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7fe fab9 	bl	8002448 <csp_buffer_free_isr>
		}
	}

	/* Mark buffer element free */
	buf->packet = NULL;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	60da      	str	r2, [r3, #12]
	buf->rx_count = 0;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	801a      	strh	r2, [r3, #0]
	buf->cfpid = 0;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	609a      	str	r2, [r3, #8]
	buf->last_used = 0;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	615a      	str	r2, [r3, #20]
	buf->remain = 0;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	605a      	str	r2, [r3, #4]
	buf->state = BUF_FREE;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	741a      	strb	r2, [r3, #16]

	return CSP_ERR_NONE;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3708      	adds	r7, #8
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <csp_can_pbuf_new>:

csp_can_pbuf_element_t *csp_can_pbuf_new(uint32_t id, CSP_BASE_TYPE *task_woken)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
	uint32_t now = (task_woken) ? csp_get_ms_isr() : csp_get_ms();
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d003      	beq.n	8003f1c <csp_can_pbuf_new+0x18>
 8003f14:	f7fe f97a 	bl	800220c <csp_get_ms_isr>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	e002      	b.n	8003f22 <csp_can_pbuf_new+0x1e>
 8003f1c:	f7fe f96f 	bl	80021fe <csp_get_ms>
 8003f20:	4603      	mov	r3, r0
 8003f22:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < PBUF_ELEMENTS; i++) {
 8003f24:	2300      	movs	r3, #0
 8003f26:	60fb      	str	r3, [r7, #12]
 8003f28:	e061      	b.n	8003fee <csp_can_pbuf_new+0xea>

		/* Perform cleanup in used pbufs */
		if (csp_can_pbuf[i].state == BUF_USED) {
 8003f2a:	4935      	ldr	r1, [pc, #212]	@ (8004000 <csp_can_pbuf_new+0xfc>)
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	005b      	lsls	r3, r3, #1
 8003f32:	4413      	add	r3, r2
 8003f34:	00db      	lsls	r3, r3, #3
 8003f36:	440b      	add	r3, r1
 8003f38:	3310      	adds	r3, #16
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d118      	bne.n	8003f72 <csp_can_pbuf_new+0x6e>
			if (now - csp_can_pbuf[i].last_used > PBUF_TIMEOUT_MS)
 8003f40:	492f      	ldr	r1, [pc, #188]	@ (8004000 <csp_can_pbuf_new+0xfc>)
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	4613      	mov	r3, r2
 8003f46:	005b      	lsls	r3, r3, #1
 8003f48:	4413      	add	r3, r2
 8003f4a:	00db      	lsls	r3, r3, #3
 8003f4c:	440b      	add	r3, r1
 8003f4e:	3314      	adds	r3, #20
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68ba      	ldr	r2, [r7, #8]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003f5a:	d90a      	bls.n	8003f72 <csp_can_pbuf_new+0x6e>
				csp_can_pbuf_free(&csp_can_pbuf[i], task_woken);
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	4413      	add	r3, r2
 8003f64:	00db      	lsls	r3, r3, #3
 8003f66:	4a26      	ldr	r2, [pc, #152]	@ (8004000 <csp_can_pbuf_new+0xfc>)
 8003f68:	4413      	add	r3, r2
 8003f6a:	6839      	ldr	r1, [r7, #0]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7ff ff9b 	bl	8003ea8 <csp_can_pbuf_free>
		}

		if (csp_can_pbuf[i].state == BUF_FREE) {
 8003f72:	4923      	ldr	r1, [pc, #140]	@ (8004000 <csp_can_pbuf_new+0xfc>)
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	4613      	mov	r3, r2
 8003f78:	005b      	lsls	r3, r3, #1
 8003f7a:	4413      	add	r3, r2
 8003f7c:	00db      	lsls	r3, r3, #3
 8003f7e:	440b      	add	r3, r1
 8003f80:	3310      	adds	r3, #16
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d12f      	bne.n	8003fe8 <csp_can_pbuf_new+0xe4>
			csp_can_pbuf[i].state = BUF_USED;
 8003f88:	491d      	ldr	r1, [pc, #116]	@ (8004000 <csp_can_pbuf_new+0xfc>)
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	005b      	lsls	r3, r3, #1
 8003f90:	4413      	add	r3, r2
 8003f92:	00db      	lsls	r3, r3, #3
 8003f94:	440b      	add	r3, r1
 8003f96:	3310      	adds	r3, #16
 8003f98:	2201      	movs	r2, #1
 8003f9a:	701a      	strb	r2, [r3, #0]
			csp_can_pbuf[i].cfpid = id;
 8003f9c:	4918      	ldr	r1, [pc, #96]	@ (8004000 <csp_can_pbuf_new+0xfc>)
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	005b      	lsls	r3, r3, #1
 8003fa4:	4413      	add	r3, r2
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	440b      	add	r3, r1
 8003faa:	3308      	adds	r3, #8
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	601a      	str	r2, [r3, #0]
			csp_can_pbuf[i].remain = 0;
 8003fb0:	4913      	ldr	r1, [pc, #76]	@ (8004000 <csp_can_pbuf_new+0xfc>)
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	005b      	lsls	r3, r3, #1
 8003fb8:	4413      	add	r3, r2
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	440b      	add	r3, r1
 8003fbe:	3304      	adds	r3, #4
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	601a      	str	r2, [r3, #0]
			csp_can_pbuf[i].last_used = now;
 8003fc4:	490e      	ldr	r1, [pc, #56]	@ (8004000 <csp_can_pbuf_new+0xfc>)
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	005b      	lsls	r3, r3, #1
 8003fcc:	4413      	add	r3, r2
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	440b      	add	r3, r1
 8003fd2:	3314      	adds	r3, #20
 8003fd4:	68ba      	ldr	r2, [r7, #8]
 8003fd6:	601a      	str	r2, [r3, #0]
			return &csp_can_pbuf[i];
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	4613      	mov	r3, r2
 8003fdc:	005b      	lsls	r3, r3, #1
 8003fde:	4413      	add	r3, r2
 8003fe0:	00db      	lsls	r3, r3, #3
 8003fe2:	4a07      	ldr	r2, [pc, #28]	@ (8004000 <csp_can_pbuf_new+0xfc>)
 8003fe4:	4413      	add	r3, r2
 8003fe6:	e006      	b.n	8003ff6 <csp_can_pbuf_new+0xf2>
	for (int i = 0; i < PBUF_ELEMENTS; i++) {
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	3301      	adds	r3, #1
 8003fec:	60fb      	str	r3, [r7, #12]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2b04      	cmp	r3, #4
 8003ff2:	dd9a      	ble.n	8003f2a <csp_can_pbuf_new+0x26>
		}

	}

	return NULL;
 8003ff4:	2300      	movs	r3, #0

}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3710      	adds	r7, #16
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	200003b0 	.word	0x200003b0

08004004 <csp_can_pbuf_find>:

csp_can_pbuf_element_t *csp_can_pbuf_find(uint32_t id, uint32_t mask, CSP_BASE_TYPE *task_woken)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b086      	sub	sp, #24
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < PBUF_ELEMENTS; i++) {
 8004010:	2300      	movs	r3, #0
 8004012:	617b      	str	r3, [r7, #20]
 8004014:	e037      	b.n	8004086 <csp_can_pbuf_find+0x82>
		if ((csp_can_pbuf[i].state == BUF_USED) && ((csp_can_pbuf[i].cfpid & mask) == (id & mask))) {
 8004016:	4920      	ldr	r1, [pc, #128]	@ (8004098 <csp_can_pbuf_find+0x94>)
 8004018:	697a      	ldr	r2, [r7, #20]
 800401a:	4613      	mov	r3, r2
 800401c:	005b      	lsls	r3, r3, #1
 800401e:	4413      	add	r3, r2
 8004020:	00db      	lsls	r3, r3, #3
 8004022:	440b      	add	r3, r1
 8004024:	3310      	adds	r3, #16
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d129      	bne.n	8004080 <csp_can_pbuf_find+0x7c>
 800402c:	491a      	ldr	r1, [pc, #104]	@ (8004098 <csp_can_pbuf_find+0x94>)
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	4613      	mov	r3, r2
 8004032:	005b      	lsls	r3, r3, #1
 8004034:	4413      	add	r3, r2
 8004036:	00db      	lsls	r3, r3, #3
 8004038:	440b      	add	r3, r1
 800403a:	3308      	adds	r3, #8
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	405a      	eors	r2, r3
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	4013      	ands	r3, r2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d11a      	bne.n	8004080 <csp_can_pbuf_find+0x7c>
			csp_can_pbuf[i].last_used = (task_woken) ? csp_get_ms_isr() : csp_get_ms();
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d003      	beq.n	8004058 <csp_can_pbuf_find+0x54>
 8004050:	f7fe f8dc 	bl	800220c <csp_get_ms_isr>
 8004054:	4602      	mov	r2, r0
 8004056:	e002      	b.n	800405e <csp_can_pbuf_find+0x5a>
 8004058:	f7fe f8d1 	bl	80021fe <csp_get_ms>
 800405c:	4602      	mov	r2, r0
 800405e:	480e      	ldr	r0, [pc, #56]	@ (8004098 <csp_can_pbuf_find+0x94>)
 8004060:	6979      	ldr	r1, [r7, #20]
 8004062:	460b      	mov	r3, r1
 8004064:	005b      	lsls	r3, r3, #1
 8004066:	440b      	add	r3, r1
 8004068:	00db      	lsls	r3, r3, #3
 800406a:	4403      	add	r3, r0
 800406c:	3314      	adds	r3, #20
 800406e:	601a      	str	r2, [r3, #0]
			return &csp_can_pbuf[i];
 8004070:	697a      	ldr	r2, [r7, #20]
 8004072:	4613      	mov	r3, r2
 8004074:	005b      	lsls	r3, r3, #1
 8004076:	4413      	add	r3, r2
 8004078:	00db      	lsls	r3, r3, #3
 800407a:	4a07      	ldr	r2, [pc, #28]	@ (8004098 <csp_can_pbuf_find+0x94>)
 800407c:	4413      	add	r3, r2
 800407e:	e006      	b.n	800408e <csp_can_pbuf_find+0x8a>
	for (int i = 0; i < PBUF_ELEMENTS; i++) {
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	3301      	adds	r3, #1
 8004084:	617b      	str	r3, [r7, #20]
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	2b04      	cmp	r3, #4
 800408a:	ddc4      	ble.n	8004016 <csp_can_pbuf_find+0x12>
		}
	}
	return NULL;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3718      	adds	r7, #24
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	200003b0 	.word	0x200003b0

0800409c <csp_kiss_tx>:
#define FESC  		0xDB
#define TFEND 		0xDC
#define TFESC 		0xDD
#define TNC_DATA	0x00

int csp_kiss_tx(const csp_route_t * ifroute, csp_packet_t * packet) {
 800409c:	b580      	push	{r7, lr}
 800409e:	b08a      	sub	sp, #40	@ 0x28
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]

	csp_kiss_interface_data_t * ifdata = ifroute->iface->interface_data;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	61fb      	str	r3, [r7, #28]
	void * driver = ifroute->iface->driver_data;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	61bb      	str	r3, [r7, #24]

	/* Add CRC32 checksum - the MTU setting ensures there are space */
	csp_crc32_append(packet, false);
 80040b6:	2100      	movs	r1, #0
 80040b8:	6838      	ldr	r0, [r7, #0]
 80040ba:	f7fe fd3f 	bl	8002b3c <csp_crc32_append>

	/* Lock */
	if (csp_mutex_lock(&ifdata->lock, 1000) != CSP_MUTEX_OK) {
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	3308      	adds	r3, #8
 80040c2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7fd ff92 	bl	8001ff0 <csp_mutex_lock>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d002      	beq.n	80040d8 <csp_kiss_tx+0x3c>
            return CSP_ERR_TIMEDOUT;
 80040d2:	f06f 0302 	mvn.w	r3, #2
 80040d6:	e05e      	b.n	8004196 <csp_kiss_tx+0xfa>
        }

	/* Save the outgoing id in the buffer */
	packet->id.ext = csp_hton32(packet->id.ext);
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	4618      	mov	r0, r3
 80040de:	f7fe fe4b 	bl	8002d78 <csp_hton32>
 80040e2:	4602      	mov	r2, r0
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	60da      	str	r2, [r3, #12]
	packet->length += sizeof(packet->id.ext);
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	895b      	ldrh	r3, [r3, #10]
 80040ec:	3304      	adds	r3, #4
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	815a      	strh	r2, [r3, #10]

	/* Transmit data */
        const unsigned char start[] = {FEND, TNC_DATA};
 80040f4:	23c0      	movs	r3, #192	@ 0xc0
 80040f6:	82bb      	strh	r3, [r7, #20]
        const unsigned char esc_end[] = {FESC, TFEND};
 80040f8:	f64d 43db 	movw	r3, #56539	@ 0xdcdb
 80040fc:	823b      	strh	r3, [r7, #16]
        const unsigned char esc_esc[] = {FESC, TFESC};
 80040fe:	f64d 53db 	movw	r3, #56795	@ 0xdddb
 8004102:	81bb      	strh	r3, [r7, #12]
        const unsigned char * data = (unsigned char *) &packet->id.ext;
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	330c      	adds	r3, #12
 8004108:	627b      	str	r3, [r7, #36]	@ 0x24
        ifdata->tx_func(driver, start, sizeof(start));
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f107 0114 	add.w	r1, r7, #20
 8004112:	2202      	movs	r2, #2
 8004114:	69b8      	ldr	r0, [r7, #24]
 8004116:	4798      	blx	r3
	for (unsigned int i = 0; i < packet->length; i++, ++data) {
 8004118:	2300      	movs	r3, #0
 800411a:	623b      	str	r3, [r7, #32]
 800411c:	e023      	b.n	8004166 <csp_kiss_tx+0xca>
		if (*data == FEND) {
 800411e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	2bc0      	cmp	r3, #192	@ 0xc0
 8004124:	d107      	bne.n	8004136 <csp_kiss_tx+0x9a>
                    ifdata->tx_func(driver, esc_end, sizeof(esc_end));
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f107 0110 	add.w	r1, r7, #16
 800412e:	2202      	movs	r2, #2
 8004130:	69b8      	ldr	r0, [r7, #24]
 8004132:	4798      	blx	r3
                    continue;
 8004134:	e011      	b.n	800415a <csp_kiss_tx+0xbe>
		}
                if (*data == FESC) {
 8004136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	2bdb      	cmp	r3, #219	@ 0xdb
 800413c:	d107      	bne.n	800414e <csp_kiss_tx+0xb2>
                    ifdata->tx_func(driver, esc_esc, sizeof(esc_esc));
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f107 010c 	add.w	r1, r7, #12
 8004146:	2202      	movs	r2, #2
 8004148:	69b8      	ldr	r0, [r7, #24]
 800414a:	4798      	blx	r3
                    continue;
 800414c:	e005      	b.n	800415a <csp_kiss_tx+0xbe>
		}
		ifdata->tx_func(driver, data, 1);
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004156:	69b8      	ldr	r0, [r7, #24]
 8004158:	4798      	blx	r3
	for (unsigned int i = 0; i < packet->length; i++, ++data) {
 800415a:	6a3b      	ldr	r3, [r7, #32]
 800415c:	3301      	adds	r3, #1
 800415e:	623b      	str	r3, [r7, #32]
 8004160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004162:	3301      	adds	r3, #1
 8004164:	627b      	str	r3, [r7, #36]	@ 0x24
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	895b      	ldrh	r3, [r3, #10]
 800416a:	461a      	mov	r2, r3
 800416c:	6a3b      	ldr	r3, [r7, #32]
 800416e:	4293      	cmp	r3, r2
 8004170:	d3d5      	bcc.n	800411e <csp_kiss_tx+0x82>
	}
        const unsigned char stop[] = {FEND};
 8004172:	23c0      	movs	r3, #192	@ 0xc0
 8004174:	723b      	strb	r3, [r7, #8]
        ifdata->tx_func(driver, stop, sizeof(stop));
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f107 0108 	add.w	r1, r7, #8
 800417e:	2201      	movs	r2, #1
 8004180:	69b8      	ldr	r0, [r7, #24]
 8004182:	4798      	blx	r3

	/* Free data */
	csp_buffer_free(packet);
 8004184:	6838      	ldr	r0, [r7, #0]
 8004186:	f7fe f999 	bl	80024bc <csp_buffer_free>

	/* Unlock */
	csp_mutex_unlock(&ifdata->lock);
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	3308      	adds	r3, #8
 800418e:	4618      	mov	r0, r3
 8004190:	f7fd ff3c 	bl	800200c <csp_mutex_unlock>

	return CSP_ERR_NONE;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3728      	adds	r7, #40	@ 0x28
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
	...

080041a0 <csp_kiss_rx>:

/**
 * Decode received data and eventually route the packet.
 */
void csp_kiss_rx(csp_iface_t * iface, const uint8_t * buf, size_t len, void * pxTaskWoken) {
 80041a0:	b590      	push	{r4, r7, lr}
 80041a2:	b087      	sub	sp, #28
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	607a      	str	r2, [r7, #4]
 80041ac:	603b      	str	r3, [r7, #0]

	csp_kiss_interface_data_t * ifdata = iface->interface_data;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	617b      	str	r3, [r7, #20]

	while (len--) {
 80041b4:	e0e4      	b.n	8004380 <csp_kiss_rx+0x1e0>

		/* Input */
		uint8_t inputbyte = *buf++;
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	1c5a      	adds	r2, r3, #1
 80041ba:	60ba      	str	r2, [r7, #8]
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	74fb      	strb	r3, [r7, #19]

		/* If packet was too long */
		if (ifdata->rx_length > ifdata->max_rx_length) {
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	691a      	ldr	r2, [r3, #16]
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d90a      	bls.n	80041e2 <csp_kiss_rx+0x42>
			//csp_log_warn("KISS RX overflow");
			iface->rx_error++;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6a1b      	ldr	r3, [r3, #32]
 80041d0:	1c5a      	adds	r2, r3, #1
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	621a      	str	r2, [r3, #32]
			ifdata->rx_mode = KISS_MODE_NOT_STARTED;
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	2200      	movs	r2, #0
 80041da:	731a      	strb	r2, [r3, #12]
			ifdata->rx_length = 0;
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	2200      	movs	r2, #0
 80041e0:	611a      	str	r2, [r3, #16]
		}

		switch (ifdata->rx_mode) {
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	7b1b      	ldrb	r3, [r3, #12]
 80041e6:	2b03      	cmp	r3, #3
 80041e8:	f200 80ca 	bhi.w	8004380 <csp_kiss_rx+0x1e0>
 80041ec:	a201      	add	r2, pc, #4	@ (adr r2, 80041f4 <csp_kiss_rx+0x54>)
 80041ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f2:	bf00      	nop
 80041f4:	08004205 	.word	0x08004205
 80041f8:	08004255 	.word	0x08004255
 80041fc:	08004325 	.word	0x08004325
 8004200:	08004369 	.word	0x08004369

		case KISS_MODE_NOT_STARTED:

			/* Skip any characters until End char detected */
			if (inputbyte != FEND) {
 8004204:	7cfb      	ldrb	r3, [r7, #19]
 8004206:	2bc0      	cmp	r3, #192	@ 0xc0
 8004208:	f040 80b5 	bne.w	8004376 <csp_kiss_rx+0x1d6>
				break;
			}

			/* Try to allocate new buffer */
			if (ifdata->rx_packet == NULL) {
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d10d      	bne.n	8004230 <csp_kiss_rx+0x90>
				ifdata->rx_packet = pxTaskWoken ? csp_buffer_get_isr(0) : csp_buffer_get(0); // CSP only supports one size
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d004      	beq.n	8004224 <csp_kiss_rx+0x84>
 800421a:	2000      	movs	r0, #0
 800421c:	f7fe f880 	bl	8002320 <csp_buffer_get_isr>
 8004220:	4603      	mov	r3, r0
 8004222:	e003      	b.n	800422c <csp_kiss_rx+0x8c>
 8004224:	2000      	movs	r0, #0
 8004226:	f7fe f8ad 	bl	8002384 <csp_buffer_get>
 800422a:	4603      	mov	r3, r0
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	6193      	str	r3, [r2, #24]
			}

			/* If no more memory, skip frame */
			if (ifdata->rx_packet == NULL) {
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d103      	bne.n	8004240 <csp_kiss_rx+0xa0>
				ifdata->rx_mode = KISS_MODE_SKIP_FRAME;
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	2203      	movs	r2, #3
 800423c:	731a      	strb	r2, [r3, #12]
				break;
 800423e:	e09f      	b.n	8004380 <csp_kiss_rx+0x1e0>
			}

			/* Start transfer */
			ifdata->rx_length = 0;
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	2200      	movs	r2, #0
 8004244:	611a      	str	r2, [r3, #16]
			ifdata->rx_mode = KISS_MODE_STARTED;
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	2201      	movs	r2, #1
 800424a:	731a      	strb	r2, [r3, #12]
			ifdata->rx_first = true;
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	2201      	movs	r2, #1
 8004250:	751a      	strb	r2, [r3, #20]
			break;
 8004252:	e095      	b.n	8004380 <csp_kiss_rx+0x1e0>

		case KISS_MODE_STARTED:

			/* Escape char */
			if (inputbyte == FESC) {
 8004254:	7cfb      	ldrb	r3, [r7, #19]
 8004256:	2bdb      	cmp	r3, #219	@ 0xdb
 8004258:	d103      	bne.n	8004262 <csp_kiss_rx+0xc2>
				ifdata->rx_mode = KISS_MODE_ESCAPED;
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	2202      	movs	r2, #2
 800425e:	731a      	strb	r2, [r3, #12]
				break;
 8004260:	e08e      	b.n	8004380 <csp_kiss_rx+0x1e0>
			}

			/* End Char */
			if (inputbyte == FEND) {
 8004262:	7cfb      	ldrb	r3, [r7, #19]
 8004264:	2bc0      	cmp	r3, #192	@ 0xc0
 8004266:	d148      	bne.n	80042fa <csp_kiss_rx+0x15a>

				/* Accept message */
				if (ifdata->rx_length > 0) {
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	2b00      	cmp	r3, #0
 800426e:	f000 8084 	beq.w	800437a <csp_kiss_rx+0x1da>

					/* Check for valid length */
					if (ifdata->rx_length < CSP_HEADER_LENGTH + sizeof(uint32_t)) {
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	2b07      	cmp	r3, #7
 8004278:	d808      	bhi.n	800428c <csp_kiss_rx+0xec>
						//csp_log_warn("KISS short frame skipped, len: %u", ifdata->rx_length);
						iface->rx_error++;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	1c5a      	adds	r2, r3, #1
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	621a      	str	r2, [r3, #32]
						ifdata->rx_mode = KISS_MODE_NOT_STARTED;
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	2200      	movs	r2, #0
 8004288:	731a      	strb	r2, [r3, #12]
						break;
 800428a:	e079      	b.n	8004380 <csp_kiss_rx+0x1e0>
					}

					/* Count received frame */
					iface->frame++;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004290:	1c5a      	adds	r2, r3, #1
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* The CSP packet length is without the header */
					ifdata->rx_packet->length = ifdata->rx_length - CSP_HEADER_LENGTH;
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	b29a      	uxth	r2, r3
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	3a04      	subs	r2, #4
 80042a2:	b292      	uxth	r2, r2
 80042a4:	815a      	strh	r2, [r3, #10]

					/* Convert the packet from network to host order */
					ifdata->rx_packet->id.ext = csp_ntoh32(ifdata->rx_packet->id.ext);
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	68da      	ldr	r2, [r3, #12]
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	699c      	ldr	r4, [r3, #24]
 80042b0:	4610      	mov	r0, r2
 80042b2:	f7fe fd7a 	bl	8002daa <csp_ntoh32>
 80042b6:	4603      	mov	r3, r0
 80042b8:	60e3      	str	r3, [r4, #12]

					/* Validate CRC */
					if (csp_crc32_verify(ifdata->rx_packet, false) != CSP_ERR_NONE) {
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	2100      	movs	r1, #0
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7fe fc7f 	bl	8002bc4 <csp_crc32_verify>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d008      	beq.n	80042de <csp_kiss_rx+0x13e>
						//csp_log_warn("KISS invalid crc frame skipped, len: %u", ifdata->rx_packet->length);
						iface->rx_error++;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6a1b      	ldr	r3, [r3, #32]
 80042d0:	1c5a      	adds	r2, r3, #1
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	621a      	str	r2, [r3, #32]
						ifdata->rx_mode = KISS_MODE_NOT_STARTED;
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	2200      	movs	r2, #0
 80042da:	731a      	strb	r2, [r3, #12]
						break;
 80042dc:	e050      	b.n	8004380 <csp_kiss_rx+0x1e0>
					}

					/* Send back into CSP, notice calling from task so last argument must be NULL! */
					csp_qfifo_write(ifdata->rx_packet, iface, pxTaskWoken);
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	683a      	ldr	r2, [r7, #0]
 80042e4:	68f9      	ldr	r1, [r7, #12]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f7ff f8de 	bl	80034a8 <csp_qfifo_write>
					ifdata->rx_packet = NULL;
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	2200      	movs	r2, #0
 80042f0:	619a      	str	r2, [r3, #24]
					ifdata->rx_mode = KISS_MODE_NOT_STARTED;
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	2200      	movs	r2, #0
 80042f6:	731a      	strb	r2, [r3, #12]
					break;
 80042f8:	e042      	b.n	8004380 <csp_kiss_rx+0x1e0>
				/* Break after the end char */
				break;
			}

			/* Skip the first char after FEND which is TNC_DATA (0x00) */
			if (ifdata->rx_first) {
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	7d1b      	ldrb	r3, [r3, #20]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d003      	beq.n	800430a <csp_kiss_rx+0x16a>
				ifdata->rx_first = false;
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	2200      	movs	r2, #0
 8004306:	751a      	strb	r2, [r3, #20]
				break;
 8004308:	e03a      	b.n	8004380 <csp_kiss_rx+0x1e0>
			}

			/* Valid data char */
			((char *) &ifdata->rx_packet->id.ext)[ifdata->rx_length++] = inputbyte;
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	f103 020c 	add.w	r2, r3, #12
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	1c58      	adds	r0, r3, #1
 8004318:	6979      	ldr	r1, [r7, #20]
 800431a:	6108      	str	r0, [r1, #16]
 800431c:	4413      	add	r3, r2
 800431e:	7cfa      	ldrb	r2, [r7, #19]
 8004320:	701a      	strb	r2, [r3, #0]

			break;
 8004322:	e02d      	b.n	8004380 <csp_kiss_rx+0x1e0>

		case KISS_MODE_ESCAPED:

			/* Escaped escape char */
			if (inputbyte == TFESC)
 8004324:	7cfb      	ldrb	r3, [r7, #19]
 8004326:	2bdd      	cmp	r3, #221	@ 0xdd
 8004328:	d10b      	bne.n	8004342 <csp_kiss_rx+0x1a2>
				((char *) &ifdata->rx_packet->id.ext)[ifdata->rx_length++] = FESC;
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	f103 020c 	add.w	r2, r3, #12
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	1c58      	adds	r0, r3, #1
 8004338:	6979      	ldr	r1, [r7, #20]
 800433a:	6108      	str	r0, [r1, #16]
 800433c:	4413      	add	r3, r2
 800433e:	22db      	movs	r2, #219	@ 0xdb
 8004340:	701a      	strb	r2, [r3, #0]

			/* Escaped fend char */
			if (inputbyte == TFEND)
 8004342:	7cfb      	ldrb	r3, [r7, #19]
 8004344:	2bdc      	cmp	r3, #220	@ 0xdc
 8004346:	d10b      	bne.n	8004360 <csp_kiss_rx+0x1c0>
				((char *) &ifdata->rx_packet->id.ext)[ifdata->rx_length++] = FEND;
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	f103 020c 	add.w	r2, r3, #12
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	1c58      	adds	r0, r3, #1
 8004356:	6979      	ldr	r1, [r7, #20]
 8004358:	6108      	str	r0, [r1, #16]
 800435a:	4413      	add	r3, r2
 800435c:	22c0      	movs	r2, #192	@ 0xc0
 800435e:	701a      	strb	r2, [r3, #0]

			/* Go back to started mode */
			ifdata->rx_mode = KISS_MODE_STARTED;
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	2201      	movs	r2, #1
 8004364:	731a      	strb	r2, [r3, #12]
			break;
 8004366:	e00b      	b.n	8004380 <csp_kiss_rx+0x1e0>

		case KISS_MODE_SKIP_FRAME:

			/* Just wait for end char */
			if (inputbyte == FEND)
 8004368:	7cfb      	ldrb	r3, [r7, #19]
 800436a:	2bc0      	cmp	r3, #192	@ 0xc0
 800436c:	d107      	bne.n	800437e <csp_kiss_rx+0x1de>
				ifdata->rx_mode = KISS_MODE_NOT_STARTED;
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	2200      	movs	r2, #0
 8004372:	731a      	strb	r2, [r3, #12]

			break;
 8004374:	e003      	b.n	800437e <csp_kiss_rx+0x1de>
				break;
 8004376:	bf00      	nop
 8004378:	e002      	b.n	8004380 <csp_kiss_rx+0x1e0>
				break;
 800437a:	bf00      	nop
 800437c:	e000      	b.n	8004380 <csp_kiss_rx+0x1e0>
			break;
 800437e:	bf00      	nop
	while (len--) {
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	1e5a      	subs	r2, r3, #1
 8004384:	607a      	str	r2, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	f47f af15 	bne.w	80041b6 <csp_kiss_rx+0x16>

		}

	}

}
 800438c:	bf00      	nop
 800438e:	bf00      	nop
 8004390:	371c      	adds	r7, #28
 8004392:	46bd      	mov	sp, r7
 8004394:	bd90      	pop	{r4, r7, pc}
 8004396:	bf00      	nop

08004398 <csp_kiss_add_interface>:

int csp_kiss_add_interface(csp_iface_t * iface) {
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]

	if ((iface == NULL) || (iface->name == NULL) || (iface->interface_data == NULL)) {
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d007      	beq.n	80043b6 <csp_kiss_add_interface+0x1e>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d003      	beq.n	80043b6 <csp_kiss_add_interface+0x1e>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d102      	bne.n	80043bc <csp_kiss_add_interface+0x24>
		return CSP_ERR_INVAL;
 80043b6:	f06f 0301 	mvn.w	r3, #1
 80043ba:	e040      	b.n	800443e <csp_kiss_add_interface+0xa6>
	}

        csp_kiss_interface_data_t * ifdata = iface->interface_data;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	60fb      	str	r3, [r7, #12]
	if (ifdata->tx_func == NULL) {
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d102      	bne.n	80043d0 <csp_kiss_add_interface+0x38>
		return CSP_ERR_INVAL;
 80043ca:	f06f 0301 	mvn.w	r3, #1
 80043ce:	e036      	b.n	800443e <csp_kiss_add_interface+0xa6>
	}

	if (csp_mutex_create(&ifdata->lock) != CSP_MUTEX_OK) {
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	3308      	adds	r3, #8
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7fd fdf6 	bl	8001fc6 <csp_mutex_create>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d002      	beq.n	80043e6 <csp_kiss_add_interface+0x4e>
		return CSP_ERR_NOMEM;
 80043e0:	f04f 33ff 	mov.w	r3, #4294967295
 80043e4:	e02b      	b.n	800443e <csp_kiss_add_interface+0xa6>
        }

	ifdata->max_rx_length = CSP_HEADER_LENGTH + csp_buffer_data_size(); // CSP header + CSP data
 80043e6:	f7fe f8ed 	bl	80025c4 <csp_buffer_data_size>
 80043ea:	4603      	mov	r3, r0
 80043ec:	1d1a      	adds	r2, r3, #4
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	601a      	str	r2, [r3, #0]
	ifdata->rx_length = 0;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	611a      	str	r2, [r3, #16]
	ifdata->rx_mode = KISS_MODE_NOT_STARTED;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	731a      	strb	r2, [r3, #12]
	ifdata->rx_first = false;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	751a      	strb	r2, [r3, #20]
	ifdata->rx_packet = NULL;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	619a      	str	r2, [r3, #24]

        const unsigned int max_data_size = csp_buffer_data_size() - sizeof(uint32_t); // compensate for the added CRC32
 800440a:	f7fe f8db 	bl	80025c4 <csp_buffer_data_size>
 800440e:	4603      	mov	r3, r0
 8004410:	3b04      	subs	r3, #4
 8004412:	60bb      	str	r3, [r7, #8]
        if ((iface->mtu == 0) || (iface->mtu > max_data_size)) {
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	8a1b      	ldrh	r3, [r3, #16]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d005      	beq.n	8004428 <csp_kiss_add_interface+0x90>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	8a1b      	ldrh	r3, [r3, #16]
 8004420:	461a      	mov	r2, r3
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	4293      	cmp	r3, r2
 8004426:	d203      	bcs.n	8004430 <csp_kiss_add_interface+0x98>
            iface->mtu = max_data_size;
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	b29a      	uxth	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	821a      	strh	r2, [r3, #16]
        }

	iface->nexthop = csp_kiss_tx;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a05      	ldr	r2, [pc, #20]	@ (8004448 <csp_kiss_add_interface+0xb0>)
 8004434:	60da      	str	r2, [r3, #12]

	return csp_iflist_add(iface);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f7fe fcc4 	bl	8002dc4 <csp_iflist_add>
 800443c:	4603      	mov	r3, r0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	0800409d 	.word	0x0800409d

0800444c <csp_lo_tx>:
/**
 * Loopback interface transmit function
 * @param packet Packet to transmit
 * @return 1 if packet was successfully transmitted, 0 on error
 */
static int csp_lo_tx(const csp_route_t * ifroute, csp_packet_t * packet) {
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]

	/* Drop packet silently if not destined for us. This allows
	 * blackhole routing addresses by setting their nexthop to
	 * the loopback interface.
	 */
	if (packet->id.dst != csp_conf.address) {
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	89db      	ldrh	r3, [r3, #14]
 800445a:	f3c3 1304 	ubfx	r3, r3, #4, #5
 800445e:	b2db      	uxtb	r3, r3
 8004460:	461a      	mov	r2, r3
 8004462:	4b09      	ldr	r3, [pc, #36]	@ (8004488 <csp_lo_tx+0x3c>)
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	429a      	cmp	r2, r3
 8004468:	d004      	beq.n	8004474 <csp_lo_tx+0x28>
		/* Consume and drop packet */
		csp_buffer_free(packet);
 800446a:	6838      	ldr	r0, [r7, #0]
 800446c:	f7fe f826 	bl	80024bc <csp_buffer_free>
		return CSP_ERR_NONE;
 8004470:	2300      	movs	r3, #0
 8004472:	e005      	b.n	8004480 <csp_lo_tx+0x34>
	}

	/* Send back into CSP, notice calling from task so last argument must be NULL! */
	csp_qfifo_write(packet, &csp_if_lo, NULL);
 8004474:	2200      	movs	r2, #0
 8004476:	4905      	ldr	r1, [pc, #20]	@ (800448c <csp_lo_tx+0x40>)
 8004478:	6838      	ldr	r0, [r7, #0]
 800447a:	f7ff f815 	bl	80034a8 <csp_qfifo_write>

	return CSP_ERR_NONE;
 800447e:	2300      	movs	r3, #0

}
 8004480:	4618      	mov	r0, r3
 8004482:	3708      	adds	r7, #8
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	20000388 	.word	0x20000388
 800448c:	2000000c 	.word	0x2000000c

08004490 <csp_rtable_set>:

int csp_rtable_check(const char * rtable) {
	return csp_rtable_parse(rtable, 1);
}

int csp_rtable_set(uint8_t address, uint8_t netmask, csp_iface_t *ifc, uint8_t via) {
 8004490:	b580      	push	{r7, lr}
 8004492:	b086      	sub	sp, #24
 8004494:	af04      	add	r7, sp, #16
 8004496:	603a      	str	r2, [r7, #0]
 8004498:	461a      	mov	r2, r3
 800449a:	4603      	mov	r3, r0
 800449c:	71fb      	strb	r3, [r7, #7]
 800449e:	460b      	mov	r3, r1
 80044a0:	71bb      	strb	r3, [r7, #6]
 80044a2:	4613      	mov	r3, r2
 80044a4:	717b      	strb	r3, [r7, #5]

	/* Legacy reference to default route (the old way) */
	if (address == CSP_DEFAULT_ROUTE) {
 80044a6:	79fb      	ldrb	r3, [r7, #7]
 80044a8:	2b20      	cmp	r3, #32
 80044aa:	d103      	bne.n	80044b4 <csp_rtable_set+0x24>
		netmask = 0;
 80044ac:	2300      	movs	r3, #0
 80044ae:	71bb      	strb	r3, [r7, #6]
		address = 0;
 80044b0:	2300      	movs	r3, #0
 80044b2:	71fb      	strb	r3, [r7, #7]
	}

	/* Validates options */
	if (((address > CSP_ID_HOST_MAX) && (address != 255)) || (ifc == NULL) || (netmask > CSP_ID_HOST_SIZE)) {
 80044b4:	79fb      	ldrb	r3, [r7, #7]
 80044b6:	2b1f      	cmp	r3, #31
 80044b8:	d902      	bls.n	80044c0 <csp_rtable_set+0x30>
 80044ba:	79fb      	ldrb	r3, [r7, #7]
 80044bc:	2bff      	cmp	r3, #255	@ 0xff
 80044be:	d105      	bne.n	80044cc <csp_rtable_set+0x3c>
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d002      	beq.n	80044cc <csp_rtable_set+0x3c>
 80044c6:	79bb      	ldrb	r3, [r7, #6]
 80044c8:	2b05      	cmp	r3, #5
 80044ca:	d91b      	bls.n	8004504 <csp_rtable_set+0x74>
		csp_log_error("%s: invalid route: address %u, netmask %u, interface %p (%s), via %u",
 80044cc:	4b13      	ldr	r3, [pc, #76]	@ (800451c <csp_rtable_set+0x8c>)
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d014      	beq.n	80044fe <csp_rtable_set+0x6e>
 80044d4:	79f8      	ldrb	r0, [r7, #7]
 80044d6:	79ba      	ldrb	r2, [r7, #6]
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d002      	beq.n	80044e4 <csp_rtable_set+0x54>
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	e000      	b.n	80044e6 <csp_rtable_set+0x56>
 80044e4:	4b0e      	ldr	r3, [pc, #56]	@ (8004520 <csp_rtable_set+0x90>)
 80044e6:	7979      	ldrb	r1, [r7, #5]
 80044e8:	9103      	str	r1, [sp, #12]
 80044ea:	9302      	str	r3, [sp, #8]
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	9301      	str	r3, [sp, #4]
 80044f0:	9200      	str	r2, [sp, #0]
 80044f2:	4603      	mov	r3, r0
 80044f4:	4a0b      	ldr	r2, [pc, #44]	@ (8004524 <csp_rtable_set+0x94>)
 80044f6:	490c      	ldr	r1, [pc, #48]	@ (8004528 <csp_rtable_set+0x98>)
 80044f8:	2000      	movs	r0, #0
 80044fa:	f7fe fbaf 	bl	8002c5c <do_csp_debug>
                              __FUNCTION__, address, netmask, ifc, (ifc != NULL) ? ifc->name : "", via);
		return CSP_ERR_INVAL;
 80044fe:	f06f 0301 	mvn.w	r3, #1
 8004502:	e006      	b.n	8004512 <csp_rtable_set+0x82>
	}

        return csp_rtable_set_internal(address, netmask, ifc, via);
 8004504:	797b      	ldrb	r3, [r7, #5]
 8004506:	79b9      	ldrb	r1, [r7, #6]
 8004508:	79f8      	ldrb	r0, [r7, #7]
 800450a:	683a      	ldr	r2, [r7, #0]
 800450c:	f000 f878 	bl	8004600 <csp_rtable_set_internal>
 8004510:	4603      	mov	r3, r0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3708      	adds	r7, #8
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	20000004 	.word	0x20000004
 8004520:	0800fd58 	.word	0x0800fd58
 8004524:	0801029c 	.word	0x0801029c
 8004528:	0800fd5c 	.word	0x0800fd5c

0800452c <csp_rtable_find>:
} csp_rtable_t;

/* Routing table (linked list) */
static csp_rtable_t * rtable = NULL;

static csp_rtable_t * csp_rtable_find(uint8_t addr, uint8_t netmask, uint8_t exact) {
 800452c:	b480      	push	{r7}
 800452e:	b087      	sub	sp, #28
 8004530:	af00      	add	r7, sp, #0
 8004532:	4603      	mov	r3, r0
 8004534:	71fb      	strb	r3, [r7, #7]
 8004536:	460b      	mov	r3, r1
 8004538:	71bb      	strb	r3, [r7, #6]
 800453a:	4613      	mov	r3, r2
 800453c:	717b      	strb	r3, [r7, #5]

	/* Remember best result */
	csp_rtable_t * best_result = NULL;
 800453e:	2300      	movs	r3, #0
 8004540:	617b      	str	r3, [r7, #20]
	uint8_t best_result_mask = 0;
 8004542:	2300      	movs	r3, #0
 8004544:	74fb      	strb	r3, [r7, #19]

	/* Start search */
	csp_rtable_t * i = rtable;
 8004546:	4b22      	ldr	r3, [pc, #136]	@ (80045d0 <csp_rtable_find+0xa4>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	60fb      	str	r3, [r7, #12]
	while(i) {
 800454c:	e036      	b.n	80045bc <csp_rtable_find+0x90>

		/* Look for exact match */
		if (i->address == addr && i->netmask == netmask) {
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	7a1b      	ldrb	r3, [r3, #8]
 8004552:	79fa      	ldrb	r2, [r7, #7]
 8004554:	429a      	cmp	r2, r3
 8004556:	d107      	bne.n	8004568 <csp_rtable_find+0x3c>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	7a5b      	ldrb	r3, [r3, #9]
 800455c:	79ba      	ldrb	r2, [r7, #6]
 800455e:	429a      	cmp	r2, r3
 8004560:	d102      	bne.n	8004568 <csp_rtable_find+0x3c>
			best_result = i;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	617b      	str	r3, [r7, #20]
			break;
 8004566:	e02c      	b.n	80045c2 <csp_rtable_find+0x96>
		}

		/* Try a CIDR netmask match */
		if (!exact) {
 8004568:	797b      	ldrb	r3, [r7, #5]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d123      	bne.n	80045b6 <csp_rtable_find+0x8a>
			uint8_t hostbits = (1 << (CSP_ID_HOST_SIZE - i->netmask)) - 1;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	7a5b      	ldrb	r3, [r3, #9]
 8004572:	f1c3 0305 	rsb	r3, r3, #5
 8004576:	2201      	movs	r2, #1
 8004578:	fa02 f303 	lsl.w	r3, r2, r3
 800457c:	b2db      	uxtb	r3, r3
 800457e:	3b01      	subs	r3, #1
 8004580:	72fb      	strb	r3, [r7, #11]
			uint8_t netbits = ~hostbits;
 8004582:	7afb      	ldrb	r3, [r7, #11]
 8004584:	43db      	mvns	r3, r3
 8004586:	72bb      	strb	r3, [r7, #10]
			//printf("Netbits %x Hostbits %x\r\n", netbits, hostbits);

			/* Match network addresses */
			uint8_t net_a = i->address & netbits;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	7a1a      	ldrb	r2, [r3, #8]
 800458c:	7abb      	ldrb	r3, [r7, #10]
 800458e:	4013      	ands	r3, r2
 8004590:	727b      	strb	r3, [r7, #9]
			uint8_t net_b = addr & netbits;
 8004592:	79fa      	ldrb	r2, [r7, #7]
 8004594:	7abb      	ldrb	r3, [r7, #10]
 8004596:	4013      	ands	r3, r2
 8004598:	723b      	strb	r3, [r7, #8]
			//printf("A: %hhx, B: %hhx\r\n", net_a, net_b);

			/* We have a match */
			if (net_a == net_b) {
 800459a:	7a7a      	ldrb	r2, [r7, #9]
 800459c:	7a3b      	ldrb	r3, [r7, #8]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d109      	bne.n	80045b6 <csp_rtable_find+0x8a>
				if (i->netmask >= best_result_mask) {
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	7a5b      	ldrb	r3, [r3, #9]
 80045a6:	7cfa      	ldrb	r2, [r7, #19]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d804      	bhi.n	80045b6 <csp_rtable_find+0x8a>
					//printf("Match best result %u %u\r\n", best_result_mask, i->netmask);
					best_result = i;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	617b      	str	r3, [r7, #20]
					best_result_mask = i->netmask;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	7a5b      	ldrb	r3, [r3, #9]
 80045b4:	74fb      	strb	r3, [r7, #19]
				}
			}

		}

		i = i->next;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	60fb      	str	r3, [r7, #12]
	while(i) {
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1c5      	bne.n	800454e <csp_rtable_find+0x22>
	if (0 && best_result) {
		csp_log_packet("Using routing entry: %u/%u if %s mtu %u",
				best_result->address, best_result->netmask, best_result->route.iface->name, best_result->route.via);
        }

	return best_result;
 80045c2:	697b      	ldr	r3, [r7, #20]

}
 80045c4:	4618      	mov	r0, r3
 80045c6:	371c      	adds	r7, #28
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr
 80045d0:	20000428 	.word	0x20000428

080045d4 <csp_rtable_find_route>:

const csp_route_t * csp_rtable_find_route(uint8_t dest_address)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	4603      	mov	r3, r0
 80045dc:	71fb      	strb	r3, [r7, #7]
    csp_rtable_t * entry = csp_rtable_find(dest_address, CSP_ID_HOST_SIZE, 0);
 80045de:	79fb      	ldrb	r3, [r7, #7]
 80045e0:	2200      	movs	r2, #0
 80045e2:	2105      	movs	r1, #5
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7ff ffa1 	bl	800452c <csp_rtable_find>
 80045ea:	60f8      	str	r0, [r7, #12]
    if (entry) {
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d001      	beq.n	80045f6 <csp_rtable_find_route+0x22>
	return &entry->route;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	e000      	b.n	80045f8 <csp_rtable_find_route+0x24>
    }
    return NULL;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3710      	adds	r7, #16
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <csp_rtable_set_internal>:

int csp_rtable_set_internal(uint8_t address, uint8_t netmask, csp_iface_t *ifc, uint8_t via) {
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	603a      	str	r2, [r7, #0]
 8004608:	461a      	mov	r2, r3
 800460a:	4603      	mov	r3, r0
 800460c:	71fb      	strb	r3, [r7, #7]
 800460e:	460b      	mov	r3, r1
 8004610:	71bb      	strb	r3, [r7, #6]
 8004612:	4613      	mov	r3, r2
 8004614:	717b      	strb	r3, [r7, #5]

	/* First see if the entry exists */
	csp_rtable_t * entry = csp_rtable_find(address, netmask, 1);
 8004616:	79b9      	ldrb	r1, [r7, #6]
 8004618:	79fb      	ldrb	r3, [r7, #7]
 800461a:	2201      	movs	r2, #1
 800461c:	4618      	mov	r0, r3
 800461e:	f7ff ff85 	bl	800452c <csp_rtable_find>
 8004622:	60f8      	str	r0, [r7, #12]

	/* If not, create a new one */
	if (!entry) {
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d122      	bne.n	8004670 <csp_rtable_set_internal+0x70>
		entry = csp_malloc(sizeof(*entry));
 800462a:	2010      	movs	r0, #16
 800462c:	f7fd fc2a 	bl	8001e84 <csp_malloc>
 8004630:	60f8      	str	r0, [r7, #12]
		if (entry == NULL) {
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d102      	bne.n	800463e <csp_rtable_set_internal+0x3e>
			return CSP_ERR_NOMEM;
 8004638:	f04f 33ff 	mov.w	r3, #4294967295
 800463c:	e025      	b.n	800468a <csp_rtable_set_internal+0x8a>
		}

		entry->next = NULL;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	60da      	str	r2, [r3, #12]
		/* Add entry to linked-list */
		if (rtable == NULL) {
 8004644:	4b13      	ldr	r3, [pc, #76]	@ (8004694 <csp_rtable_set_internal+0x94>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d103      	bne.n	8004654 <csp_rtable_set_internal+0x54>
			/* This is the first interface to be added */
			rtable = entry;
 800464c:	4a11      	ldr	r2, [pc, #68]	@ (8004694 <csp_rtable_set_internal+0x94>)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6013      	str	r3, [r2, #0]
 8004652:	e00d      	b.n	8004670 <csp_rtable_set_internal+0x70>
		} else {
			/* One or more interfaces were already added */
			csp_rtable_t * i = rtable;
 8004654:	4b0f      	ldr	r3, [pc, #60]	@ (8004694 <csp_rtable_set_internal+0x94>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	60bb      	str	r3, [r7, #8]
			while (i->next) {
 800465a:	e002      	b.n	8004662 <csp_rtable_set_internal+0x62>
				i = i->next;
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	60bb      	str	r3, [r7, #8]
			while (i->next) {
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1f8      	bne.n	800465c <csp_rtable_set_internal+0x5c>
			}
			i->next = entry;
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	60da      	str	r2, [r3, #12]
		}
	}

	/* Fill in the data */
	entry->address = address;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	79fa      	ldrb	r2, [r7, #7]
 8004674:	721a      	strb	r2, [r3, #8]
	entry->netmask = netmask;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	79ba      	ldrb	r2, [r7, #6]
 800467a:	725a      	strb	r2, [r3, #9]
	entry->route.iface = ifc;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	683a      	ldr	r2, [r7, #0]
 8004680:	601a      	str	r2, [r3, #0]
	entry->route.via = via;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	797a      	ldrb	r2, [r7, #5]
 8004686:	711a      	strb	r2, [r3, #4]

	return CSP_ERR_NONE;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	20000428 	.word	0x20000428

08004698 <csp_udp_new_packet>:
#include <csp/csp.h>
#include <csp/arch/csp_queue.h>

#include "../csp_conn.h"

void csp_udp_new_packet(csp_conn_t * conn, csp_packet_t * packet) {
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]

	/* Enqueue */
	if (csp_conn_enqueue_packet(conn, packet) < 0) {
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6839      	ldr	r1, [r7, #0]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7fd ffa4 	bl	80025f4 <csp_conn_enqueue_packet>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	da0b      	bge.n	80046ca <csp_udp_new_packet+0x32>
		csp_log_error("Connection buffer queue full!");
 80046b2:	4b16      	ldr	r3, [pc, #88]	@ (800470c <csp_udp_new_packet+0x74>)
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d003      	beq.n	80046c2 <csp_udp_new_packet+0x2a>
 80046ba:	4915      	ldr	r1, [pc, #84]	@ (8004710 <csp_udp_new_packet+0x78>)
 80046bc:	2000      	movs	r0, #0
 80046be:	f7fe facd 	bl	8002c5c <do_csp_debug>
		csp_buffer_free(packet);
 80046c2:	6838      	ldr	r0, [r7, #0]
 80046c4:	f7fd fefa 	bl	80024bc <csp_buffer_free>
		return;
 80046c8:	e01d      	b.n	8004706 <csp_udp_new_packet+0x6e>
	}

	/* Try to queue up the new connection pointer */
	if (conn->socket != NULL) {
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d019      	beq.n	8004706 <csp_udp_new_packet+0x6e>
		if (csp_queue_enqueue(conn->socket, &conn, 0) != CSP_QUEUE_OK) {
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	1d39      	adds	r1, r7, #4
 80046d8:	2200      	movs	r2, #0
 80046da:	4618      	mov	r0, r3
 80046dc:	f7fd fc1f 	bl	8001f1e <csp_queue_enqueue>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d00c      	beq.n	8004700 <csp_udp_new_packet+0x68>
			csp_log_warn("Warning socket connection queue full");
 80046e6:	4b09      	ldr	r3, [pc, #36]	@ (800470c <csp_udp_new_packet+0x74>)
 80046e8:	785b      	ldrb	r3, [r3, #1]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d003      	beq.n	80046f6 <csp_udp_new_packet+0x5e>
 80046ee:	4909      	ldr	r1, [pc, #36]	@ (8004714 <csp_udp_new_packet+0x7c>)
 80046f0:	2001      	movs	r0, #1
 80046f2:	f7fe fab3 	bl	8002c5c <do_csp_debug>
			csp_close(conn);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7fe f982 	bl	8002a02 <csp_close>
			return;
 80046fe:	e002      	b.n	8004706 <csp_udp_new_packet+0x6e>
		}

		/* Ensure that this connection will not be posted to this socket again */
		conn->socket = NULL;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	611a      	str	r2, [r3, #16]
	}

}
 8004706:	3708      	adds	r7, #8
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	20000004 	.word	0x20000004
 8004710:	0800fddc 	.word	0x0800fddc
 8004714:	0800fdfc 	.word	0x0800fdfc

08004718 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800471c:	4b0e      	ldr	r3, [pc, #56]	@ (8004758 <HAL_Init+0x40>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a0d      	ldr	r2, [pc, #52]	@ (8004758 <HAL_Init+0x40>)
 8004722:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004726:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004728:	4b0b      	ldr	r3, [pc, #44]	@ (8004758 <HAL_Init+0x40>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a0a      	ldr	r2, [pc, #40]	@ (8004758 <HAL_Init+0x40>)
 800472e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004732:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004734:	4b08      	ldr	r3, [pc, #32]	@ (8004758 <HAL_Init+0x40>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a07      	ldr	r2, [pc, #28]	@ (8004758 <HAL_Init+0x40>)
 800473a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800473e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004740:	2003      	movs	r0, #3
 8004742:	f000 ff3a 	bl	80055ba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004746:	200f      	movs	r0, #15
 8004748:	f7fd f9da 	bl	8001b00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800474c:	f7fd f95c 	bl	8001a08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	40023c00 	.word	0x40023c00

0800475c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800475c:	b480      	push	{r7}
 800475e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004760:	4b06      	ldr	r3, [pc, #24]	@ (800477c <HAL_IncTick+0x20>)
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	461a      	mov	r2, r3
 8004766:	4b06      	ldr	r3, [pc, #24]	@ (8004780 <HAL_IncTick+0x24>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4413      	add	r3, r2
 800476c:	4a04      	ldr	r2, [pc, #16]	@ (8004780 <HAL_IncTick+0x24>)
 800476e:	6013      	str	r3, [r2, #0]
}
 8004770:	bf00      	nop
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	20000050 	.word	0x20000050
 8004780:	2000042c 	.word	0x2000042c

08004784 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004784:	b480      	push	{r7}
 8004786:	af00      	add	r7, sp, #0
  return uwTick;
 8004788:	4b03      	ldr	r3, [pc, #12]	@ (8004798 <HAL_GetTick+0x14>)
 800478a:	681b      	ldr	r3, [r3, #0]
}
 800478c:	4618      	mov	r0, r3
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	2000042c 	.word	0x2000042c

0800479c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e0ed      	b.n	800498a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d102      	bne.n	80047c0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f7fd f950 	bl	8001a60 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f042 0201 	orr.w	r2, r2, #1
 80047ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80047d0:	f7ff ffd8 	bl	8004784 <HAL_GetTick>
 80047d4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80047d6:	e012      	b.n	80047fe <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80047d8:	f7ff ffd4 	bl	8004784 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	2b0a      	cmp	r3, #10
 80047e4:	d90b      	bls.n	80047fe <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ea:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2205      	movs	r2, #5
 80047f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e0c5      	b.n	800498a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f003 0301 	and.w	r3, r3, #1
 8004808:	2b00      	cmp	r3, #0
 800480a:	d0e5      	beq.n	80047d8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f022 0202 	bic.w	r2, r2, #2
 800481a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800481c:	f7ff ffb2 	bl	8004784 <HAL_GetTick>
 8004820:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004822:	e012      	b.n	800484a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004824:	f7ff ffae 	bl	8004784 <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	2b0a      	cmp	r3, #10
 8004830:	d90b      	bls.n	800484a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004836:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2205      	movs	r2, #5
 8004842:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e09f      	b.n	800498a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f003 0302 	and.w	r3, r3, #2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1e5      	bne.n	8004824 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	7e1b      	ldrb	r3, [r3, #24]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d108      	bne.n	8004872 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800486e:	601a      	str	r2, [r3, #0]
 8004870:	e007      	b.n	8004882 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004880:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	7e5b      	ldrb	r3, [r3, #25]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d108      	bne.n	800489c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004898:	601a      	str	r2, [r3, #0]
 800489a:	e007      	b.n	80048ac <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	7e9b      	ldrb	r3, [r3, #26]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d108      	bne.n	80048c6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f042 0220 	orr.w	r2, r2, #32
 80048c2:	601a      	str	r2, [r3, #0]
 80048c4:	e007      	b.n	80048d6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f022 0220 	bic.w	r2, r2, #32
 80048d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	7edb      	ldrb	r3, [r3, #27]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d108      	bne.n	80048f0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f022 0210 	bic.w	r2, r2, #16
 80048ec:	601a      	str	r2, [r3, #0]
 80048ee:	e007      	b.n	8004900 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f042 0210 	orr.w	r2, r2, #16
 80048fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	7f1b      	ldrb	r3, [r3, #28]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d108      	bne.n	800491a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f042 0208 	orr.w	r2, r2, #8
 8004916:	601a      	str	r2, [r3, #0]
 8004918:	e007      	b.n	800492a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f022 0208 	bic.w	r2, r2, #8
 8004928:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	7f5b      	ldrb	r3, [r3, #29]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d108      	bne.n	8004944 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f042 0204 	orr.w	r2, r2, #4
 8004940:	601a      	str	r2, [r3, #0]
 8004942:	e007      	b.n	8004954 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f022 0204 	bic.w	r2, r2, #4
 8004952:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689a      	ldr	r2, [r3, #8]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	431a      	orrs	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	431a      	orrs	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	695b      	ldr	r3, [r3, #20]
 8004968:	ea42 0103 	orr.w	r1, r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	1e5a      	subs	r2, r3, #1
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	430a      	orrs	r2, r1
 8004978:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3710      	adds	r7, #16
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
	...

08004994 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004994:	b480      	push	{r7}
 8004996:	b087      	sub	sp, #28
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049aa:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80049ac:	7cfb      	ldrb	r3, [r7, #19]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d003      	beq.n	80049ba <HAL_CAN_ConfigFilter+0x26>
 80049b2:	7cfb      	ldrb	r3, [r7, #19]
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	f040 80be 	bne.w	8004b36 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80049ba:	4b65      	ldr	r3, [pc, #404]	@ (8004b50 <HAL_CAN_ConfigFilter+0x1bc>)
 80049bc:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80049c4:	f043 0201 	orr.w	r2, r3, #1
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80049d4:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e8:	021b      	lsls	r3, r3, #8
 80049ea:	431a      	orrs	r2, r3
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	f003 031f 	and.w	r3, r3, #31
 80049fa:	2201      	movs	r2, #1
 80049fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004a00:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	43db      	mvns	r3, r3
 8004a0c:	401a      	ands	r2, r3
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	69db      	ldr	r3, [r3, #28]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d123      	bne.n	8004a64 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	43db      	mvns	r3, r3
 8004a26:	401a      	ands	r2, r3
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004a3a:	683a      	ldr	r2, [r7, #0]
 8004a3c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004a3e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	3248      	adds	r2, #72	@ 0x48
 8004a44:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004a58:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004a5a:	6979      	ldr	r1, [r7, #20]
 8004a5c:	3348      	adds	r3, #72	@ 0x48
 8004a5e:	00db      	lsls	r3, r3, #3
 8004a60:	440b      	add	r3, r1
 8004a62:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	69db      	ldr	r3, [r3, #28]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d122      	bne.n	8004ab2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	431a      	orrs	r2, r3
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004a88:	683a      	ldr	r2, [r7, #0]
 8004a8a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004a8c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	3248      	adds	r2, #72	@ 0x48
 8004a92:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004aa6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004aa8:	6979      	ldr	r1, [r7, #20]
 8004aaa:	3348      	adds	r3, #72	@ 0x48
 8004aac:	00db      	lsls	r3, r3, #3
 8004aae:	440b      	add	r3, r1
 8004ab0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d109      	bne.n	8004ace <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	43db      	mvns	r3, r3
 8004ac4:	401a      	ands	r2, r3
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8004acc:	e007      	b.n	8004ade <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	431a      	orrs	r2, r3
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d109      	bne.n	8004afa <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	43db      	mvns	r3, r3
 8004af0:	401a      	ands	r2, r3
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8004af8:	e007      	b.n	8004b0a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	431a      	orrs	r2, r3
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d107      	bne.n	8004b22 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	431a      	orrs	r2, r3
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004b28:	f023 0201 	bic.w	r2, r3, #1
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8004b32:	2300      	movs	r3, #0
 8004b34:	e006      	b.n	8004b44 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b3a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
  }
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	371c      	adds	r7, #28
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr
 8004b50:	40006400 	.word	0x40006400

08004b54 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d12e      	bne.n	8004bc6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f022 0201 	bic.w	r2, r2, #1
 8004b7e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b80:	f7ff fe00 	bl	8004784 <HAL_GetTick>
 8004b84:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004b86:	e012      	b.n	8004bae <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004b88:	f7ff fdfc 	bl	8004784 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b0a      	cmp	r3, #10
 8004b94:	d90b      	bls.n	8004bae <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b9a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2205      	movs	r2, #5
 8004ba6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e012      	b.n	8004bd4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f003 0301 	and.w	r3, r3, #1
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d1e5      	bne.n	8004b88 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	e006      	b.n	8004bd4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bca:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
  }
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3710      	adds	r7, #16
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b089      	sub	sp, #36	@ 0x24
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	607a      	str	r2, [r7, #4]
 8004be8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bf0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004bfa:	7ffb      	ldrb	r3, [r7, #31]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d003      	beq.n	8004c08 <HAL_CAN_AddTxMessage+0x2c>
 8004c00:	7ffb      	ldrb	r3, [r7, #31]
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	f040 80b8 	bne.w	8004d78 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d10a      	bne.n	8004c28 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d105      	bne.n	8004c28 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	f000 80a0 	beq.w	8004d68 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	0e1b      	lsrs	r3, r3, #24
 8004c2c:	f003 0303 	and.w	r3, r3, #3
 8004c30:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d907      	bls.n	8004c48 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c3c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e09e      	b.n	8004d86 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004c48:	2201      	movs	r2, #1
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	409a      	lsls	r2, r3
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d10d      	bne.n	8004c76 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004c64:	68f9      	ldr	r1, [r7, #12]
 8004c66:	6809      	ldr	r1, [r1, #0]
 8004c68:	431a      	orrs	r2, r3
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	3318      	adds	r3, #24
 8004c6e:	011b      	lsls	r3, r3, #4
 8004c70:	440b      	add	r3, r1
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	e00f      	b.n	8004c96 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004c80:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004c86:	68f9      	ldr	r1, [r7, #12]
 8004c88:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004c8a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	3318      	adds	r3, #24
 8004c90:	011b      	lsls	r3, r3, #4
 8004c92:	440b      	add	r3, r1
 8004c94:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6819      	ldr	r1, [r3, #0]
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	691a      	ldr	r2, [r3, #16]
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	3318      	adds	r3, #24
 8004ca2:	011b      	lsls	r3, r3, #4
 8004ca4:	440b      	add	r3, r1
 8004ca6:	3304      	adds	r3, #4
 8004ca8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	7d1b      	ldrb	r3, [r3, #20]
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d111      	bne.n	8004cd6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	3318      	adds	r3, #24
 8004cba:	011b      	lsls	r3, r3, #4
 8004cbc:	4413      	add	r3, r2
 8004cbe:	3304      	adds	r3, #4
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	6811      	ldr	r1, [r2, #0]
 8004cc6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	3318      	adds	r3, #24
 8004cce:	011b      	lsls	r3, r3, #4
 8004cd0:	440b      	add	r3, r1
 8004cd2:	3304      	adds	r3, #4
 8004cd4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	3307      	adds	r3, #7
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	061a      	lsls	r2, r3, #24
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	3306      	adds	r3, #6
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	041b      	lsls	r3, r3, #16
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	3305      	adds	r3, #5
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	021b      	lsls	r3, r3, #8
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	3204      	adds	r2, #4
 8004cf6:	7812      	ldrb	r2, [r2, #0]
 8004cf8:	4610      	mov	r0, r2
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	6811      	ldr	r1, [r2, #0]
 8004cfe:	ea43 0200 	orr.w	r2, r3, r0
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	011b      	lsls	r3, r3, #4
 8004d06:	440b      	add	r3, r1
 8004d08:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8004d0c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	3303      	adds	r3, #3
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	061a      	lsls	r2, r3, #24
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	3302      	adds	r3, #2
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	041b      	lsls	r3, r3, #16
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	3301      	adds	r3, #1
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	021b      	lsls	r3, r3, #8
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	7812      	ldrb	r2, [r2, #0]
 8004d2e:	4610      	mov	r0, r2
 8004d30:	68fa      	ldr	r2, [r7, #12]
 8004d32:	6811      	ldr	r1, [r2, #0]
 8004d34:	ea43 0200 	orr.w	r2, r3, r0
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	011b      	lsls	r3, r3, #4
 8004d3c:	440b      	add	r3, r1
 8004d3e:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8004d42:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	3318      	adds	r3, #24
 8004d4c:	011b      	lsls	r3, r3, #4
 8004d4e:	4413      	add	r3, r2
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68fa      	ldr	r2, [r7, #12]
 8004d54:	6811      	ldr	r1, [r2, #0]
 8004d56:	f043 0201 	orr.w	r2, r3, #1
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	3318      	adds	r3, #24
 8004d5e:	011b      	lsls	r3, r3, #4
 8004d60:	440b      	add	r3, r1
 8004d62:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004d64:	2300      	movs	r3, #0
 8004d66:	e00e      	b.n	8004d86 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d6c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e006      	b.n	8004d86 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d7c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
  }
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3724      	adds	r7, #36	@ 0x24
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr

08004d92 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004d92:	b480      	push	{r7}
 8004d94:	b087      	sub	sp, #28
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	60f8      	str	r0, [r7, #12]
 8004d9a:	60b9      	str	r1, [r7, #8]
 8004d9c:	607a      	str	r2, [r7, #4]
 8004d9e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004da6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004da8:	7dfb      	ldrb	r3, [r7, #23]
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d003      	beq.n	8004db6 <HAL_CAN_GetRxMessage+0x24>
 8004dae:	7dfb      	ldrb	r3, [r7, #23]
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	f040 80f3 	bne.w	8004f9c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d10e      	bne.n	8004dda <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	f003 0303 	and.w	r3, r3, #3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d116      	bne.n	8004df8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dce:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e0e7      	b.n	8004faa <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	f003 0303 	and.w	r3, r3, #3
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d107      	bne.n	8004df8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dec:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e0d8      	b.n	8004faa <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	331b      	adds	r3, #27
 8004e00:	011b      	lsls	r3, r3, #4
 8004e02:	4413      	add	r3, r2
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0204 	and.w	r2, r3, #4
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10c      	bne.n	8004e30 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	331b      	adds	r3, #27
 8004e1e:	011b      	lsls	r3, r3, #4
 8004e20:	4413      	add	r3, r2
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	0d5b      	lsrs	r3, r3, #21
 8004e26:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	601a      	str	r2, [r3, #0]
 8004e2e:	e00b      	b.n	8004e48 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	331b      	adds	r3, #27
 8004e38:	011b      	lsls	r3, r3, #4
 8004e3a:	4413      	add	r3, r2
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	08db      	lsrs	r3, r3, #3
 8004e40:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	331b      	adds	r3, #27
 8004e50:	011b      	lsls	r3, r3, #4
 8004e52:	4413      	add	r3, r2
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0202 	and.w	r2, r3, #2
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	331b      	adds	r3, #27
 8004e66:	011b      	lsls	r3, r3, #4
 8004e68:	4413      	add	r3, r2
 8004e6a:	3304      	adds	r3, #4
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 020f 	and.w	r2, r3, #15
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	331b      	adds	r3, #27
 8004e7e:	011b      	lsls	r3, r3, #4
 8004e80:	4413      	add	r3, r2
 8004e82:	3304      	adds	r3, #4
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	0a1b      	lsrs	r3, r3, #8
 8004e88:	b2da      	uxtb	r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	331b      	adds	r3, #27
 8004e96:	011b      	lsls	r3, r3, #4
 8004e98:	4413      	add	r3, r2
 8004e9a:	3304      	adds	r3, #4
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	0c1b      	lsrs	r3, r3, #16
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	011b      	lsls	r3, r3, #4
 8004eae:	4413      	add	r3, r2
 8004eb0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	b2da      	uxtb	r2, r3
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	011b      	lsls	r3, r3, #4
 8004ec4:	4413      	add	r3, r2
 8004ec6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	0a1a      	lsrs	r2, r3, #8
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	b2d2      	uxtb	r2, r2
 8004ed4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	011b      	lsls	r3, r3, #4
 8004ede:	4413      	add	r3, r2
 8004ee0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	0c1a      	lsrs	r2, r3, #16
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	3302      	adds	r3, #2
 8004eec:	b2d2      	uxtb	r2, r2
 8004eee:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	011b      	lsls	r3, r3, #4
 8004ef8:	4413      	add	r3, r2
 8004efa:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	0e1a      	lsrs	r2, r3, #24
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	3303      	adds	r3, #3
 8004f06:	b2d2      	uxtb	r2, r2
 8004f08:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	011b      	lsls	r3, r3, #4
 8004f12:	4413      	add	r3, r2
 8004f14:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	3304      	adds	r3, #4
 8004f1e:	b2d2      	uxtb	r2, r2
 8004f20:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	011b      	lsls	r3, r3, #4
 8004f2a:	4413      	add	r3, r2
 8004f2c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	0a1a      	lsrs	r2, r3, #8
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	3305      	adds	r3, #5
 8004f38:	b2d2      	uxtb	r2, r2
 8004f3a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	011b      	lsls	r3, r3, #4
 8004f44:	4413      	add	r3, r2
 8004f46:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	0c1a      	lsrs	r2, r3, #16
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	3306      	adds	r3, #6
 8004f52:	b2d2      	uxtb	r2, r2
 8004f54:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	011b      	lsls	r3, r3, #4
 8004f5e:	4413      	add	r3, r2
 8004f60:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	0e1a      	lsrs	r2, r3, #24
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	3307      	adds	r3, #7
 8004f6c:	b2d2      	uxtb	r2, r2
 8004f6e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d108      	bne.n	8004f88 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68da      	ldr	r2, [r3, #12]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f042 0220 	orr.w	r2, r2, #32
 8004f84:	60da      	str	r2, [r3, #12]
 8004f86:	e007      	b.n	8004f98 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	691a      	ldr	r2, [r3, #16]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f042 0220 	orr.w	r2, r2, #32
 8004f96:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	e006      	b.n	8004faa <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
  }
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	371c      	adds	r7, #28
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b085      	sub	sp, #20
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
 8004fbe:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004fc6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004fc8:	7bfb      	ldrb	r3, [r7, #15]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d002      	beq.n	8004fd4 <HAL_CAN_ActivateNotification+0x1e>
 8004fce:	7bfb      	ldrb	r3, [r7, #15]
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d109      	bne.n	8004fe8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	6959      	ldr	r1, [r3, #20]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	683a      	ldr	r2, [r7, #0]
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	e006      	b.n	8004ff6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fec:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
  }
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3714      	adds	r7, #20
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005002:	b580      	push	{r7, lr}
 8005004:	b08a      	sub	sp, #40	@ 0x28
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800500a:	2300      	movs	r3, #0
 800500c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	695b      	ldr	r3, [r3, #20]
 8005014:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800503e:	6a3b      	ldr	r3, [r7, #32]
 8005040:	f003 0301 	and.w	r3, r3, #1
 8005044:	2b00      	cmp	r3, #0
 8005046:	d07c      	beq.n	8005142 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	2b00      	cmp	r3, #0
 8005050:	d023      	beq.n	800509a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2201      	movs	r2, #1
 8005058:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	f003 0302 	and.w	r3, r3, #2
 8005060:	2b00      	cmp	r3, #0
 8005062:	d003      	beq.n	800506c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 f983 	bl	8005370 <HAL_CAN_TxMailbox0CompleteCallback>
 800506a:	e016      	b.n	800509a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	f003 0304 	and.w	r3, r3, #4
 8005072:	2b00      	cmp	r3, #0
 8005074:	d004      	beq.n	8005080 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005078:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800507c:	627b      	str	r3, [r7, #36]	@ 0x24
 800507e:	e00c      	b.n	800509a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	f003 0308 	and.w	r3, r3, #8
 8005086:	2b00      	cmp	r3, #0
 8005088:	d004      	beq.n	8005094 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800508a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800508c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005090:	627b      	str	r3, [r7, #36]	@ 0x24
 8005092:	e002      	b.n	800509a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 f989 	bl	80053ac <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d024      	beq.n	80050ee <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80050ac:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d003      	beq.n	80050c0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f000 f963 	bl	8005384 <HAL_CAN_TxMailbox1CompleteCallback>
 80050be:	e016      	b.n	80050ee <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d004      	beq.n	80050d4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80050ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050cc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80050d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80050d2:	e00c      	b.n	80050ee <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d004      	beq.n	80050e8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80050de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80050e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80050e6:	e002      	b.n	80050ee <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 f969 	bl	80053c0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d024      	beq.n	8005142 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005100:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d003      	beq.n	8005114 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 f943 	bl	8005398 <HAL_CAN_TxMailbox2CompleteCallback>
 8005112:	e016      	b.n	8005142 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d004      	beq.n	8005128 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800511e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005120:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005124:	627b      	str	r3, [r7, #36]	@ 0x24
 8005126:	e00c      	b.n	8005142 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d004      	beq.n	800513c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005134:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005138:	627b      	str	r3, [r7, #36]	@ 0x24
 800513a:	e002      	b.n	8005142 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 f949 	bl	80053d4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005142:	6a3b      	ldr	r3, [r7, #32]
 8005144:	f003 0308 	and.w	r3, r3, #8
 8005148:	2b00      	cmp	r3, #0
 800514a:	d00c      	beq.n	8005166 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	f003 0310 	and.w	r3, r3, #16
 8005152:	2b00      	cmp	r3, #0
 8005154:	d007      	beq.n	8005166 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005158:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800515c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2210      	movs	r2, #16
 8005164:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005166:	6a3b      	ldr	r3, [r7, #32]
 8005168:	f003 0304 	and.w	r3, r3, #4
 800516c:	2b00      	cmp	r3, #0
 800516e:	d00b      	beq.n	8005188 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	f003 0308 	and.w	r3, r3, #8
 8005176:	2b00      	cmp	r3, #0
 8005178:	d006      	beq.n	8005188 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2208      	movs	r2, #8
 8005180:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 f930 	bl	80053e8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005188:	6a3b      	ldr	r3, [r7, #32]
 800518a:	f003 0302 	and.w	r3, r3, #2
 800518e:	2b00      	cmp	r3, #0
 8005190:	d009      	beq.n	80051a6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	f003 0303 	and.w	r3, r3, #3
 800519c:	2b00      	cmp	r3, #0
 800519e:	d002      	beq.n	80051a6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f7fc f927 	bl	80013f4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80051a6:	6a3b      	ldr	r3, [r7, #32]
 80051a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00c      	beq.n	80051ca <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	f003 0310 	and.w	r3, r3, #16
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d007      	beq.n	80051ca <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80051ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051bc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80051c0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2210      	movs	r2, #16
 80051c8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80051ca:	6a3b      	ldr	r3, [r7, #32]
 80051cc:	f003 0320 	and.w	r3, r3, #32
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00b      	beq.n	80051ec <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	f003 0308 	and.w	r3, r3, #8
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d006      	beq.n	80051ec <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2208      	movs	r2, #8
 80051e4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 f912 	bl	8005410 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80051ec:	6a3b      	ldr	r3, [r7, #32]
 80051ee:	f003 0310 	and.w	r3, r3, #16
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d009      	beq.n	800520a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	f003 0303 	and.w	r3, r3, #3
 8005200:	2b00      	cmp	r3, #0
 8005202:	d002      	beq.n	800520a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 f8f9 	bl	80053fc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800520a:	6a3b      	ldr	r3, [r7, #32]
 800520c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00b      	beq.n	800522c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	f003 0310 	and.w	r3, r3, #16
 800521a:	2b00      	cmp	r3, #0
 800521c:	d006      	beq.n	800522c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2210      	movs	r2, #16
 8005224:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 f8fc 	bl	8005424 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800522c:	6a3b      	ldr	r3, [r7, #32]
 800522e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00b      	beq.n	800524e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	f003 0308 	and.w	r3, r3, #8
 800523c:	2b00      	cmp	r3, #0
 800523e:	d006      	beq.n	800524e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2208      	movs	r2, #8
 8005246:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f000 f8f5 	bl	8005438 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800524e:	6a3b      	ldr	r3, [r7, #32]
 8005250:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d07b      	beq.n	8005350 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	f003 0304 	and.w	r3, r3, #4
 800525e:	2b00      	cmp	r3, #0
 8005260:	d072      	beq.n	8005348 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005262:	6a3b      	ldr	r3, [r7, #32]
 8005264:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005268:	2b00      	cmp	r3, #0
 800526a:	d008      	beq.n	800527e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005272:	2b00      	cmp	r3, #0
 8005274:	d003      	beq.n	800527e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005278:	f043 0301 	orr.w	r3, r3, #1
 800527c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800527e:	6a3b      	ldr	r3, [r7, #32]
 8005280:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005284:	2b00      	cmp	r3, #0
 8005286:	d008      	beq.n	800529a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800528e:	2b00      	cmp	r3, #0
 8005290:	d003      	beq.n	800529a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005294:	f043 0302 	orr.w	r3, r3, #2
 8005298:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800529a:	6a3b      	ldr	r3, [r7, #32]
 800529c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d008      	beq.n	80052b6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d003      	beq.n	80052b6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80052ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b0:	f043 0304 	orr.w	r3, r3, #4
 80052b4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80052b6:	6a3b      	ldr	r3, [r7, #32]
 80052b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d043      	beq.n	8005348 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d03e      	beq.n	8005348 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80052d0:	2b60      	cmp	r3, #96	@ 0x60
 80052d2:	d02b      	beq.n	800532c <HAL_CAN_IRQHandler+0x32a>
 80052d4:	2b60      	cmp	r3, #96	@ 0x60
 80052d6:	d82e      	bhi.n	8005336 <HAL_CAN_IRQHandler+0x334>
 80052d8:	2b50      	cmp	r3, #80	@ 0x50
 80052da:	d022      	beq.n	8005322 <HAL_CAN_IRQHandler+0x320>
 80052dc:	2b50      	cmp	r3, #80	@ 0x50
 80052de:	d82a      	bhi.n	8005336 <HAL_CAN_IRQHandler+0x334>
 80052e0:	2b40      	cmp	r3, #64	@ 0x40
 80052e2:	d019      	beq.n	8005318 <HAL_CAN_IRQHandler+0x316>
 80052e4:	2b40      	cmp	r3, #64	@ 0x40
 80052e6:	d826      	bhi.n	8005336 <HAL_CAN_IRQHandler+0x334>
 80052e8:	2b30      	cmp	r3, #48	@ 0x30
 80052ea:	d010      	beq.n	800530e <HAL_CAN_IRQHandler+0x30c>
 80052ec:	2b30      	cmp	r3, #48	@ 0x30
 80052ee:	d822      	bhi.n	8005336 <HAL_CAN_IRQHandler+0x334>
 80052f0:	2b10      	cmp	r3, #16
 80052f2:	d002      	beq.n	80052fa <HAL_CAN_IRQHandler+0x2f8>
 80052f4:	2b20      	cmp	r3, #32
 80052f6:	d005      	beq.n	8005304 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80052f8:	e01d      	b.n	8005336 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80052fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052fc:	f043 0308 	orr.w	r3, r3, #8
 8005300:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005302:	e019      	b.n	8005338 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005306:	f043 0310 	orr.w	r3, r3, #16
 800530a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800530c:	e014      	b.n	8005338 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800530e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005310:	f043 0320 	orr.w	r3, r3, #32
 8005314:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005316:	e00f      	b.n	8005338 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800531a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800531e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005320:	e00a      	b.n	8005338 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005324:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005328:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800532a:	e005      	b.n	8005338 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800532c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800532e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005332:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005334:	e000      	b.n	8005338 <HAL_CAN_IRQHandler+0x336>
            break;
 8005336:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	699a      	ldr	r2, [r3, #24]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005346:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2204      	movs	r2, #4
 800534e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005352:	2b00      	cmp	r3, #0
 8005354:	d008      	beq.n	8005368 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800535a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800535c:	431a      	orrs	r2, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 f872 	bl	800544c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005368:	bf00      	nop
 800536a:	3728      	adds	r7, #40	@ 0x28
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005378:	bf00      	nop
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800538c:	bf00      	nop
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80053b4:	bf00      	nop
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80053c8:	bf00      	nop
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005404:	bf00      	nop
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005418:	bf00      	nop
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800542c:	bf00      	nop
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005440:	bf00      	nop
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005454:	bf00      	nop
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <__NVIC_SetPriorityGrouping>:
{
 8005460:	b480      	push	{r7}
 8005462:	b085      	sub	sp, #20
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f003 0307 	and.w	r3, r3, #7
 800546e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005470:	4b0c      	ldr	r3, [pc, #48]	@ (80054a4 <__NVIC_SetPriorityGrouping+0x44>)
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005476:	68ba      	ldr	r2, [r7, #8]
 8005478:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800547c:	4013      	ands	r3, r2
 800547e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005488:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800548c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005490:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005492:	4a04      	ldr	r2, [pc, #16]	@ (80054a4 <__NVIC_SetPriorityGrouping+0x44>)
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	60d3      	str	r3, [r2, #12]
}
 8005498:	bf00      	nop
 800549a:	3714      	adds	r7, #20
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr
 80054a4:	e000ed00 	.word	0xe000ed00

080054a8 <__NVIC_GetPriorityGrouping>:
{
 80054a8:	b480      	push	{r7}
 80054aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80054ac:	4b04      	ldr	r3, [pc, #16]	@ (80054c0 <__NVIC_GetPriorityGrouping+0x18>)
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	0a1b      	lsrs	r3, r3, #8
 80054b2:	f003 0307 	and.w	r3, r3, #7
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr
 80054c0:	e000ed00 	.word	0xe000ed00

080054c4 <__NVIC_EnableIRQ>:
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	4603      	mov	r3, r0
 80054cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	db0b      	blt.n	80054ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80054d6:	79fb      	ldrb	r3, [r7, #7]
 80054d8:	f003 021f 	and.w	r2, r3, #31
 80054dc:	4907      	ldr	r1, [pc, #28]	@ (80054fc <__NVIC_EnableIRQ+0x38>)
 80054de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054e2:	095b      	lsrs	r3, r3, #5
 80054e4:	2001      	movs	r0, #1
 80054e6:	fa00 f202 	lsl.w	r2, r0, r2
 80054ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80054ee:	bf00      	nop
 80054f0:	370c      	adds	r7, #12
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr
 80054fa:	bf00      	nop
 80054fc:	e000e100 	.word	0xe000e100

08005500 <__NVIC_SetPriority>:
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	4603      	mov	r3, r0
 8005508:	6039      	str	r1, [r7, #0]
 800550a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800550c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005510:	2b00      	cmp	r3, #0
 8005512:	db0a      	blt.n	800552a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	b2da      	uxtb	r2, r3
 8005518:	490c      	ldr	r1, [pc, #48]	@ (800554c <__NVIC_SetPriority+0x4c>)
 800551a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800551e:	0112      	lsls	r2, r2, #4
 8005520:	b2d2      	uxtb	r2, r2
 8005522:	440b      	add	r3, r1
 8005524:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005528:	e00a      	b.n	8005540 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	b2da      	uxtb	r2, r3
 800552e:	4908      	ldr	r1, [pc, #32]	@ (8005550 <__NVIC_SetPriority+0x50>)
 8005530:	79fb      	ldrb	r3, [r7, #7]
 8005532:	f003 030f 	and.w	r3, r3, #15
 8005536:	3b04      	subs	r3, #4
 8005538:	0112      	lsls	r2, r2, #4
 800553a:	b2d2      	uxtb	r2, r2
 800553c:	440b      	add	r3, r1
 800553e:	761a      	strb	r2, [r3, #24]
}
 8005540:	bf00      	nop
 8005542:	370c      	adds	r7, #12
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr
 800554c:	e000e100 	.word	0xe000e100
 8005550:	e000ed00 	.word	0xe000ed00

08005554 <NVIC_EncodePriority>:
{
 8005554:	b480      	push	{r7}
 8005556:	b089      	sub	sp, #36	@ 0x24
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f003 0307 	and.w	r3, r3, #7
 8005566:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	f1c3 0307 	rsb	r3, r3, #7
 800556e:	2b04      	cmp	r3, #4
 8005570:	bf28      	it	cs
 8005572:	2304      	movcs	r3, #4
 8005574:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	3304      	adds	r3, #4
 800557a:	2b06      	cmp	r3, #6
 800557c:	d902      	bls.n	8005584 <NVIC_EncodePriority+0x30>
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	3b03      	subs	r3, #3
 8005582:	e000      	b.n	8005586 <NVIC_EncodePriority+0x32>
 8005584:	2300      	movs	r3, #0
 8005586:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005588:	f04f 32ff 	mov.w	r2, #4294967295
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	fa02 f303 	lsl.w	r3, r2, r3
 8005592:	43da      	mvns	r2, r3
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	401a      	ands	r2, r3
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800559c:	f04f 31ff 	mov.w	r1, #4294967295
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	fa01 f303 	lsl.w	r3, r1, r3
 80055a6:	43d9      	mvns	r1, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055ac:	4313      	orrs	r3, r2
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3724      	adds	r7, #36	@ 0x24
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr

080055ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b082      	sub	sp, #8
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f7ff ff4c 	bl	8005460 <__NVIC_SetPriorityGrouping>
}
 80055c8:	bf00      	nop
 80055ca:	3708      	adds	r7, #8
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b086      	sub	sp, #24
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	4603      	mov	r3, r0
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
 80055dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80055de:	2300      	movs	r3, #0
 80055e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80055e2:	f7ff ff61 	bl	80054a8 <__NVIC_GetPriorityGrouping>
 80055e6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	68b9      	ldr	r1, [r7, #8]
 80055ec:	6978      	ldr	r0, [r7, #20]
 80055ee:	f7ff ffb1 	bl	8005554 <NVIC_EncodePriority>
 80055f2:	4602      	mov	r2, r0
 80055f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055f8:	4611      	mov	r1, r2
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7ff ff80 	bl	8005500 <__NVIC_SetPriority>
}
 8005600:	bf00      	nop
 8005602:	3718      	adds	r7, #24
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	4603      	mov	r3, r0
 8005610:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005616:	4618      	mov	r0, r3
 8005618:	f7ff ff54 	bl	80054c4 <__NVIC_EnableIRQ>
}
 800561c:	bf00      	nop
 800561e:	3708      	adds	r7, #8
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005624:	b480      	push	{r7}
 8005626:	b089      	sub	sp, #36	@ 0x24
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800562e:	2300      	movs	r3, #0
 8005630:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005632:	2300      	movs	r3, #0
 8005634:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005636:	2300      	movs	r3, #0
 8005638:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800563a:	2300      	movs	r3, #0
 800563c:	61fb      	str	r3, [r7, #28]
 800563e:	e16b      	b.n	8005918 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005640:	2201      	movs	r2, #1
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	fa02 f303 	lsl.w	r3, r2, r3
 8005648:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	4013      	ands	r3, r2
 8005652:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	429a      	cmp	r2, r3
 800565a:	f040 815a 	bne.w	8005912 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	f003 0303 	and.w	r3, r3, #3
 8005666:	2b01      	cmp	r3, #1
 8005668:	d005      	beq.n	8005676 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005672:	2b02      	cmp	r3, #2
 8005674:	d130      	bne.n	80056d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	005b      	lsls	r3, r3, #1
 8005680:	2203      	movs	r2, #3
 8005682:	fa02 f303 	lsl.w	r3, r2, r3
 8005686:	43db      	mvns	r3, r3
 8005688:	69ba      	ldr	r2, [r7, #24]
 800568a:	4013      	ands	r3, r2
 800568c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	68da      	ldr	r2, [r3, #12]
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	005b      	lsls	r3, r3, #1
 8005696:	fa02 f303 	lsl.w	r3, r2, r3
 800569a:	69ba      	ldr	r2, [r7, #24]
 800569c:	4313      	orrs	r3, r2
 800569e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	69ba      	ldr	r2, [r7, #24]
 80056a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80056ac:	2201      	movs	r2, #1
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	fa02 f303 	lsl.w	r3, r2, r3
 80056b4:	43db      	mvns	r3, r3
 80056b6:	69ba      	ldr	r2, [r7, #24]
 80056b8:	4013      	ands	r3, r2
 80056ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	091b      	lsrs	r3, r3, #4
 80056c2:	f003 0201 	and.w	r2, r3, #1
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	fa02 f303 	lsl.w	r3, r2, r3
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	69ba      	ldr	r2, [r7, #24]
 80056d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	f003 0303 	and.w	r3, r3, #3
 80056e0:	2b03      	cmp	r3, #3
 80056e2:	d017      	beq.n	8005714 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	005b      	lsls	r3, r3, #1
 80056ee:	2203      	movs	r2, #3
 80056f0:	fa02 f303 	lsl.w	r3, r2, r3
 80056f4:	43db      	mvns	r3, r3
 80056f6:	69ba      	ldr	r2, [r7, #24]
 80056f8:	4013      	ands	r3, r2
 80056fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	689a      	ldr	r2, [r3, #8]
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	005b      	lsls	r3, r3, #1
 8005704:	fa02 f303 	lsl.w	r3, r2, r3
 8005708:	69ba      	ldr	r2, [r7, #24]
 800570a:	4313      	orrs	r3, r2
 800570c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	69ba      	ldr	r2, [r7, #24]
 8005712:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	f003 0303 	and.w	r3, r3, #3
 800571c:	2b02      	cmp	r3, #2
 800571e:	d123      	bne.n	8005768 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	08da      	lsrs	r2, r3, #3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	3208      	adds	r2, #8
 8005728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800572c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	f003 0307 	and.w	r3, r3, #7
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	220f      	movs	r2, #15
 8005738:	fa02 f303 	lsl.w	r3, r2, r3
 800573c:	43db      	mvns	r3, r3
 800573e:	69ba      	ldr	r2, [r7, #24]
 8005740:	4013      	ands	r3, r2
 8005742:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	691a      	ldr	r2, [r3, #16]
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	f003 0307 	and.w	r3, r3, #7
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	fa02 f303 	lsl.w	r3, r2, r3
 8005754:	69ba      	ldr	r2, [r7, #24]
 8005756:	4313      	orrs	r3, r2
 8005758:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	08da      	lsrs	r2, r3, #3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	3208      	adds	r2, #8
 8005762:	69b9      	ldr	r1, [r7, #24]
 8005764:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	005b      	lsls	r3, r3, #1
 8005772:	2203      	movs	r2, #3
 8005774:	fa02 f303 	lsl.w	r3, r2, r3
 8005778:	43db      	mvns	r3, r3
 800577a:	69ba      	ldr	r2, [r7, #24]
 800577c:	4013      	ands	r3, r2
 800577e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f003 0203 	and.w	r2, r3, #3
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	005b      	lsls	r3, r3, #1
 800578c:	fa02 f303 	lsl.w	r3, r2, r3
 8005790:	69ba      	ldr	r2, [r7, #24]
 8005792:	4313      	orrs	r3, r2
 8005794:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	69ba      	ldr	r2, [r7, #24]
 800579a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f000 80b4 	beq.w	8005912 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057aa:	2300      	movs	r3, #0
 80057ac:	60fb      	str	r3, [r7, #12]
 80057ae:	4b60      	ldr	r3, [pc, #384]	@ (8005930 <HAL_GPIO_Init+0x30c>)
 80057b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057b2:	4a5f      	ldr	r2, [pc, #380]	@ (8005930 <HAL_GPIO_Init+0x30c>)
 80057b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80057b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80057ba:	4b5d      	ldr	r3, [pc, #372]	@ (8005930 <HAL_GPIO_Init+0x30c>)
 80057bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057c2:	60fb      	str	r3, [r7, #12]
 80057c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80057c6:	4a5b      	ldr	r2, [pc, #364]	@ (8005934 <HAL_GPIO_Init+0x310>)
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	089b      	lsrs	r3, r3, #2
 80057cc:	3302      	adds	r3, #2
 80057ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	f003 0303 	and.w	r3, r3, #3
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	220f      	movs	r2, #15
 80057de:	fa02 f303 	lsl.w	r3, r2, r3
 80057e2:	43db      	mvns	r3, r3
 80057e4:	69ba      	ldr	r2, [r7, #24]
 80057e6:	4013      	ands	r3, r2
 80057e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a52      	ldr	r2, [pc, #328]	@ (8005938 <HAL_GPIO_Init+0x314>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d02b      	beq.n	800584a <HAL_GPIO_Init+0x226>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a51      	ldr	r2, [pc, #324]	@ (800593c <HAL_GPIO_Init+0x318>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d025      	beq.n	8005846 <HAL_GPIO_Init+0x222>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a50      	ldr	r2, [pc, #320]	@ (8005940 <HAL_GPIO_Init+0x31c>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d01f      	beq.n	8005842 <HAL_GPIO_Init+0x21e>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a4f      	ldr	r2, [pc, #316]	@ (8005944 <HAL_GPIO_Init+0x320>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d019      	beq.n	800583e <HAL_GPIO_Init+0x21a>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a4e      	ldr	r2, [pc, #312]	@ (8005948 <HAL_GPIO_Init+0x324>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d013      	beq.n	800583a <HAL_GPIO_Init+0x216>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a4d      	ldr	r2, [pc, #308]	@ (800594c <HAL_GPIO_Init+0x328>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d00d      	beq.n	8005836 <HAL_GPIO_Init+0x212>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a4c      	ldr	r2, [pc, #304]	@ (8005950 <HAL_GPIO_Init+0x32c>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d007      	beq.n	8005832 <HAL_GPIO_Init+0x20e>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a4b      	ldr	r2, [pc, #300]	@ (8005954 <HAL_GPIO_Init+0x330>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d101      	bne.n	800582e <HAL_GPIO_Init+0x20a>
 800582a:	2307      	movs	r3, #7
 800582c:	e00e      	b.n	800584c <HAL_GPIO_Init+0x228>
 800582e:	2308      	movs	r3, #8
 8005830:	e00c      	b.n	800584c <HAL_GPIO_Init+0x228>
 8005832:	2306      	movs	r3, #6
 8005834:	e00a      	b.n	800584c <HAL_GPIO_Init+0x228>
 8005836:	2305      	movs	r3, #5
 8005838:	e008      	b.n	800584c <HAL_GPIO_Init+0x228>
 800583a:	2304      	movs	r3, #4
 800583c:	e006      	b.n	800584c <HAL_GPIO_Init+0x228>
 800583e:	2303      	movs	r3, #3
 8005840:	e004      	b.n	800584c <HAL_GPIO_Init+0x228>
 8005842:	2302      	movs	r3, #2
 8005844:	e002      	b.n	800584c <HAL_GPIO_Init+0x228>
 8005846:	2301      	movs	r3, #1
 8005848:	e000      	b.n	800584c <HAL_GPIO_Init+0x228>
 800584a:	2300      	movs	r3, #0
 800584c:	69fa      	ldr	r2, [r7, #28]
 800584e:	f002 0203 	and.w	r2, r2, #3
 8005852:	0092      	lsls	r2, r2, #2
 8005854:	4093      	lsls	r3, r2
 8005856:	69ba      	ldr	r2, [r7, #24]
 8005858:	4313      	orrs	r3, r2
 800585a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800585c:	4935      	ldr	r1, [pc, #212]	@ (8005934 <HAL_GPIO_Init+0x310>)
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	089b      	lsrs	r3, r3, #2
 8005862:	3302      	adds	r3, #2
 8005864:	69ba      	ldr	r2, [r7, #24]
 8005866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800586a:	4b3b      	ldr	r3, [pc, #236]	@ (8005958 <HAL_GPIO_Init+0x334>)
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	43db      	mvns	r3, r3
 8005874:	69ba      	ldr	r2, [r7, #24]
 8005876:	4013      	ands	r3, r2
 8005878:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d003      	beq.n	800588e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005886:	69ba      	ldr	r2, [r7, #24]
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	4313      	orrs	r3, r2
 800588c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800588e:	4a32      	ldr	r2, [pc, #200]	@ (8005958 <HAL_GPIO_Init+0x334>)
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005894:	4b30      	ldr	r3, [pc, #192]	@ (8005958 <HAL_GPIO_Init+0x334>)
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	43db      	mvns	r3, r3
 800589e:	69ba      	ldr	r2, [r7, #24]
 80058a0:	4013      	ands	r3, r2
 80058a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d003      	beq.n	80058b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80058b0:	69ba      	ldr	r2, [r7, #24]
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80058b8:	4a27      	ldr	r2, [pc, #156]	@ (8005958 <HAL_GPIO_Init+0x334>)
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80058be:	4b26      	ldr	r3, [pc, #152]	@ (8005958 <HAL_GPIO_Init+0x334>)
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	43db      	mvns	r3, r3
 80058c8:	69ba      	ldr	r2, [r7, #24]
 80058ca:	4013      	ands	r3, r2
 80058cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d003      	beq.n	80058e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80058da:	69ba      	ldr	r2, [r7, #24]
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	4313      	orrs	r3, r2
 80058e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80058e2:	4a1d      	ldr	r2, [pc, #116]	@ (8005958 <HAL_GPIO_Init+0x334>)
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80058e8:	4b1b      	ldr	r3, [pc, #108]	@ (8005958 <HAL_GPIO_Init+0x334>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	43db      	mvns	r3, r3
 80058f2:	69ba      	ldr	r2, [r7, #24]
 80058f4:	4013      	ands	r3, r2
 80058f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005900:	2b00      	cmp	r3, #0
 8005902:	d003      	beq.n	800590c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005904:	69ba      	ldr	r2, [r7, #24]
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	4313      	orrs	r3, r2
 800590a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800590c:	4a12      	ldr	r2, [pc, #72]	@ (8005958 <HAL_GPIO_Init+0x334>)
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	3301      	adds	r3, #1
 8005916:	61fb      	str	r3, [r7, #28]
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	2b0f      	cmp	r3, #15
 800591c:	f67f ae90 	bls.w	8005640 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005920:	bf00      	nop
 8005922:	bf00      	nop
 8005924:	3724      	adds	r7, #36	@ 0x24
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop
 8005930:	40023800 	.word	0x40023800
 8005934:	40013800 	.word	0x40013800
 8005938:	40020000 	.word	0x40020000
 800593c:	40020400 	.word	0x40020400
 8005940:	40020800 	.word	0x40020800
 8005944:	40020c00 	.word	0x40020c00
 8005948:	40021000 	.word	0x40021000
 800594c:	40021400 	.word	0x40021400
 8005950:	40021800 	.word	0x40021800
 8005954:	40021c00 	.word	0x40021c00
 8005958:	40013c00 	.word	0x40013c00

0800595c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	460b      	mov	r3, r1
 8005966:	807b      	strh	r3, [r7, #2]
 8005968:	4613      	mov	r3, r2
 800596a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800596c:	787b      	ldrb	r3, [r7, #1]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d003      	beq.n	800597a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005972:	887a      	ldrh	r2, [r7, #2]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005978:	e003      	b.n	8005982 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800597a:	887b      	ldrh	r3, [r7, #2]
 800597c:	041a      	lsls	r2, r3, #16
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	619a      	str	r2, [r3, #24]
}
 8005982:	bf00      	nop
 8005984:	370c      	adds	r7, #12
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr

0800598e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800598e:	b480      	push	{r7}
 8005990:	b085      	sub	sp, #20
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
 8005996:	460b      	mov	r3, r1
 8005998:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	695b      	ldr	r3, [r3, #20]
 800599e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80059a0:	887a      	ldrh	r2, [r7, #2]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	4013      	ands	r3, r2
 80059a6:	041a      	lsls	r2, r3, #16
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	43d9      	mvns	r1, r3
 80059ac:	887b      	ldrh	r3, [r7, #2]
 80059ae:	400b      	ands	r3, r1
 80059b0:	431a      	orrs	r2, r3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	619a      	str	r2, [r3, #24]
}
 80059b6:	bf00      	nop
 80059b8:	3714      	adds	r7, #20
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr
	...

080059c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b086      	sub	sp, #24
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d101      	bne.n	80059d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e267      	b.n	8005ea6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 0301 	and.w	r3, r3, #1
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d075      	beq.n	8005ace <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80059e2:	4b88      	ldr	r3, [pc, #544]	@ (8005c04 <HAL_RCC_OscConfig+0x240>)
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	f003 030c 	and.w	r3, r3, #12
 80059ea:	2b04      	cmp	r3, #4
 80059ec:	d00c      	beq.n	8005a08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059ee:	4b85      	ldr	r3, [pc, #532]	@ (8005c04 <HAL_RCC_OscConfig+0x240>)
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80059f6:	2b08      	cmp	r3, #8
 80059f8:	d112      	bne.n	8005a20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80059fa:	4b82      	ldr	r3, [pc, #520]	@ (8005c04 <HAL_RCC_OscConfig+0x240>)
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a06:	d10b      	bne.n	8005a20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a08:	4b7e      	ldr	r3, [pc, #504]	@ (8005c04 <HAL_RCC_OscConfig+0x240>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d05b      	beq.n	8005acc <HAL_RCC_OscConfig+0x108>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d157      	bne.n	8005acc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e242      	b.n	8005ea6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a28:	d106      	bne.n	8005a38 <HAL_RCC_OscConfig+0x74>
 8005a2a:	4b76      	ldr	r3, [pc, #472]	@ (8005c04 <HAL_RCC_OscConfig+0x240>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a75      	ldr	r2, [pc, #468]	@ (8005c04 <HAL_RCC_OscConfig+0x240>)
 8005a30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a34:	6013      	str	r3, [r2, #0]
 8005a36:	e01d      	b.n	8005a74 <HAL_RCC_OscConfig+0xb0>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a40:	d10c      	bne.n	8005a5c <HAL_RCC_OscConfig+0x98>
 8005a42:	4b70      	ldr	r3, [pc, #448]	@ (8005c04 <HAL_RCC_OscConfig+0x240>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a6f      	ldr	r2, [pc, #444]	@ (8005c04 <HAL_RCC_OscConfig+0x240>)
 8005a48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a4c:	6013      	str	r3, [r2, #0]
 8005a4e:	4b6d      	ldr	r3, [pc, #436]	@ (8005c04 <HAL_RCC_OscConfig+0x240>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a6c      	ldr	r2, [pc, #432]	@ (8005c04 <HAL_RCC_OscConfig+0x240>)
 8005a54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a58:	6013      	str	r3, [r2, #0]
 8005a5a:	e00b      	b.n	8005a74 <HAL_RCC_OscConfig+0xb0>
 8005a5c:	4b69      	ldr	r3, [pc, #420]	@ (8005c04 <HAL_RCC_OscConfig+0x240>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a68      	ldr	r2, [pc, #416]	@ (8005c04 <HAL_RCC_OscConfig+0x240>)
 8005a62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a66:	6013      	str	r3, [r2, #0]
 8005a68:	4b66      	ldr	r3, [pc, #408]	@ (8005c04 <HAL_RCC_OscConfig+0x240>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a65      	ldr	r2, [pc, #404]	@ (8005c04 <HAL_RCC_OscConfig+0x240>)
 8005a6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d013      	beq.n	8005aa4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a7c:	f7fe fe82 	bl	8004784 <HAL_GetTick>
 8005a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a82:	e008      	b.n	8005a96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a84:	f7fe fe7e 	bl	8004784 <HAL_GetTick>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	2b64      	cmp	r3, #100	@ 0x64
 8005a90:	d901      	bls.n	8005a96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a92:	2303      	movs	r3, #3
 8005a94:	e207      	b.n	8005ea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a96:	4b5b      	ldr	r3, [pc, #364]	@ (8005c04 <HAL_RCC_OscConfig+0x240>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d0f0      	beq.n	8005a84 <HAL_RCC_OscConfig+0xc0>
 8005aa2:	e014      	b.n	8005ace <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005aa4:	f7fe fe6e 	bl	8004784 <HAL_GetTick>
 8005aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005aaa:	e008      	b.n	8005abe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005aac:	f7fe fe6a 	bl	8004784 <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	2b64      	cmp	r3, #100	@ 0x64
 8005ab8:	d901      	bls.n	8005abe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e1f3      	b.n	8005ea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005abe:	4b51      	ldr	r3, [pc, #324]	@ (8005c04 <HAL_RCC_OscConfig+0x240>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d1f0      	bne.n	8005aac <HAL_RCC_OscConfig+0xe8>
 8005aca:	e000      	b.n	8005ace <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005acc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 0302 	and.w	r3, r3, #2
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d063      	beq.n	8005ba2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005ada:	4b4a      	ldr	r3, [pc, #296]	@ (8005c04 <HAL_RCC_OscConfig+0x240>)
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	f003 030c 	and.w	r3, r3, #12
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00b      	beq.n	8005afe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ae6:	4b47      	ldr	r3, [pc, #284]	@ (8005c04 <HAL_RCC_OscConfig+0x240>)
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005aee:	2b08      	cmp	r3, #8
 8005af0:	d11c      	bne.n	8005b2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005af2:	4b44      	ldr	r3, [pc, #272]	@ (8005c04 <HAL_RCC_OscConfig+0x240>)
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d116      	bne.n	8005b2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005afe:	4b41      	ldr	r3, [pc, #260]	@ (8005c04 <HAL_RCC_OscConfig+0x240>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 0302 	and.w	r3, r3, #2
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d005      	beq.n	8005b16 <HAL_RCC_OscConfig+0x152>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d001      	beq.n	8005b16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e1c7      	b.n	8005ea6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b16:	4b3b      	ldr	r3, [pc, #236]	@ (8005c04 <HAL_RCC_OscConfig+0x240>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	00db      	lsls	r3, r3, #3
 8005b24:	4937      	ldr	r1, [pc, #220]	@ (8005c04 <HAL_RCC_OscConfig+0x240>)
 8005b26:	4313      	orrs	r3, r2
 8005b28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b2a:	e03a      	b.n	8005ba2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d020      	beq.n	8005b76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b34:	4b34      	ldr	r3, [pc, #208]	@ (8005c08 <HAL_RCC_OscConfig+0x244>)
 8005b36:	2201      	movs	r2, #1
 8005b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b3a:	f7fe fe23 	bl	8004784 <HAL_GetTick>
 8005b3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b40:	e008      	b.n	8005b54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b42:	f7fe fe1f 	bl	8004784 <HAL_GetTick>
 8005b46:	4602      	mov	r2, r0
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d901      	bls.n	8005b54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005b50:	2303      	movs	r3, #3
 8005b52:	e1a8      	b.n	8005ea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b54:	4b2b      	ldr	r3, [pc, #172]	@ (8005c04 <HAL_RCC_OscConfig+0x240>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 0302 	and.w	r3, r3, #2
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d0f0      	beq.n	8005b42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b60:	4b28      	ldr	r3, [pc, #160]	@ (8005c04 <HAL_RCC_OscConfig+0x240>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	00db      	lsls	r3, r3, #3
 8005b6e:	4925      	ldr	r1, [pc, #148]	@ (8005c04 <HAL_RCC_OscConfig+0x240>)
 8005b70:	4313      	orrs	r3, r2
 8005b72:	600b      	str	r3, [r1, #0]
 8005b74:	e015      	b.n	8005ba2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b76:	4b24      	ldr	r3, [pc, #144]	@ (8005c08 <HAL_RCC_OscConfig+0x244>)
 8005b78:	2200      	movs	r2, #0
 8005b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b7c:	f7fe fe02 	bl	8004784 <HAL_GetTick>
 8005b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b82:	e008      	b.n	8005b96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b84:	f7fe fdfe 	bl	8004784 <HAL_GetTick>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d901      	bls.n	8005b96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e187      	b.n	8005ea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b96:	4b1b      	ldr	r3, [pc, #108]	@ (8005c04 <HAL_RCC_OscConfig+0x240>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 0302 	and.w	r3, r3, #2
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d1f0      	bne.n	8005b84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 0308 	and.w	r3, r3, #8
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d036      	beq.n	8005c1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	695b      	ldr	r3, [r3, #20]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d016      	beq.n	8005be4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bb6:	4b15      	ldr	r3, [pc, #84]	@ (8005c0c <HAL_RCC_OscConfig+0x248>)
 8005bb8:	2201      	movs	r2, #1
 8005bba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bbc:	f7fe fde2 	bl	8004784 <HAL_GetTick>
 8005bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bc2:	e008      	b.n	8005bd6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bc4:	f7fe fdde 	bl	8004784 <HAL_GetTick>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	2b02      	cmp	r3, #2
 8005bd0:	d901      	bls.n	8005bd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	e167      	b.n	8005ea6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8005c04 <HAL_RCC_OscConfig+0x240>)
 8005bd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bda:	f003 0302 	and.w	r3, r3, #2
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d0f0      	beq.n	8005bc4 <HAL_RCC_OscConfig+0x200>
 8005be2:	e01b      	b.n	8005c1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005be4:	4b09      	ldr	r3, [pc, #36]	@ (8005c0c <HAL_RCC_OscConfig+0x248>)
 8005be6:	2200      	movs	r2, #0
 8005be8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bea:	f7fe fdcb 	bl	8004784 <HAL_GetTick>
 8005bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005bf0:	e00e      	b.n	8005c10 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bf2:	f7fe fdc7 	bl	8004784 <HAL_GetTick>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	1ad3      	subs	r3, r2, r3
 8005bfc:	2b02      	cmp	r3, #2
 8005bfe:	d907      	bls.n	8005c10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005c00:	2303      	movs	r3, #3
 8005c02:	e150      	b.n	8005ea6 <HAL_RCC_OscConfig+0x4e2>
 8005c04:	40023800 	.word	0x40023800
 8005c08:	42470000 	.word	0x42470000
 8005c0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c10:	4b88      	ldr	r3, [pc, #544]	@ (8005e34 <HAL_RCC_OscConfig+0x470>)
 8005c12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c14:	f003 0302 	and.w	r3, r3, #2
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d1ea      	bne.n	8005bf2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 0304 	and.w	r3, r3, #4
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	f000 8097 	beq.w	8005d58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c2e:	4b81      	ldr	r3, [pc, #516]	@ (8005e34 <HAL_RCC_OscConfig+0x470>)
 8005c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d10f      	bne.n	8005c5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	60bb      	str	r3, [r7, #8]
 8005c3e:	4b7d      	ldr	r3, [pc, #500]	@ (8005e34 <HAL_RCC_OscConfig+0x470>)
 8005c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c42:	4a7c      	ldr	r2, [pc, #496]	@ (8005e34 <HAL_RCC_OscConfig+0x470>)
 8005c44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c48:	6413      	str	r3, [r2, #64]	@ 0x40
 8005c4a:	4b7a      	ldr	r3, [pc, #488]	@ (8005e34 <HAL_RCC_OscConfig+0x470>)
 8005c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c52:	60bb      	str	r3, [r7, #8]
 8005c54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c56:	2301      	movs	r3, #1
 8005c58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c5a:	4b77      	ldr	r3, [pc, #476]	@ (8005e38 <HAL_RCC_OscConfig+0x474>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d118      	bne.n	8005c98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c66:	4b74      	ldr	r3, [pc, #464]	@ (8005e38 <HAL_RCC_OscConfig+0x474>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a73      	ldr	r2, [pc, #460]	@ (8005e38 <HAL_RCC_OscConfig+0x474>)
 8005c6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c72:	f7fe fd87 	bl	8004784 <HAL_GetTick>
 8005c76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c78:	e008      	b.n	8005c8c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c7a:	f7fe fd83 	bl	8004784 <HAL_GetTick>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	d901      	bls.n	8005c8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	e10c      	b.n	8005ea6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c8c:	4b6a      	ldr	r3, [pc, #424]	@ (8005e38 <HAL_RCC_OscConfig+0x474>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d0f0      	beq.n	8005c7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d106      	bne.n	8005cae <HAL_RCC_OscConfig+0x2ea>
 8005ca0:	4b64      	ldr	r3, [pc, #400]	@ (8005e34 <HAL_RCC_OscConfig+0x470>)
 8005ca2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ca4:	4a63      	ldr	r2, [pc, #396]	@ (8005e34 <HAL_RCC_OscConfig+0x470>)
 8005ca6:	f043 0301 	orr.w	r3, r3, #1
 8005caa:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cac:	e01c      	b.n	8005ce8 <HAL_RCC_OscConfig+0x324>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	2b05      	cmp	r3, #5
 8005cb4:	d10c      	bne.n	8005cd0 <HAL_RCC_OscConfig+0x30c>
 8005cb6:	4b5f      	ldr	r3, [pc, #380]	@ (8005e34 <HAL_RCC_OscConfig+0x470>)
 8005cb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cba:	4a5e      	ldr	r2, [pc, #376]	@ (8005e34 <HAL_RCC_OscConfig+0x470>)
 8005cbc:	f043 0304 	orr.w	r3, r3, #4
 8005cc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cc2:	4b5c      	ldr	r3, [pc, #368]	@ (8005e34 <HAL_RCC_OscConfig+0x470>)
 8005cc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cc6:	4a5b      	ldr	r2, [pc, #364]	@ (8005e34 <HAL_RCC_OscConfig+0x470>)
 8005cc8:	f043 0301 	orr.w	r3, r3, #1
 8005ccc:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cce:	e00b      	b.n	8005ce8 <HAL_RCC_OscConfig+0x324>
 8005cd0:	4b58      	ldr	r3, [pc, #352]	@ (8005e34 <HAL_RCC_OscConfig+0x470>)
 8005cd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cd4:	4a57      	ldr	r2, [pc, #348]	@ (8005e34 <HAL_RCC_OscConfig+0x470>)
 8005cd6:	f023 0301 	bic.w	r3, r3, #1
 8005cda:	6713      	str	r3, [r2, #112]	@ 0x70
 8005cdc:	4b55      	ldr	r3, [pc, #340]	@ (8005e34 <HAL_RCC_OscConfig+0x470>)
 8005cde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ce0:	4a54      	ldr	r2, [pc, #336]	@ (8005e34 <HAL_RCC_OscConfig+0x470>)
 8005ce2:	f023 0304 	bic.w	r3, r3, #4
 8005ce6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d015      	beq.n	8005d1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cf0:	f7fe fd48 	bl	8004784 <HAL_GetTick>
 8005cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cf6:	e00a      	b.n	8005d0e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cf8:	f7fe fd44 	bl	8004784 <HAL_GetTick>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d901      	bls.n	8005d0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	e0cb      	b.n	8005ea6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d0e:	4b49      	ldr	r3, [pc, #292]	@ (8005e34 <HAL_RCC_OscConfig+0x470>)
 8005d10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d12:	f003 0302 	and.w	r3, r3, #2
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d0ee      	beq.n	8005cf8 <HAL_RCC_OscConfig+0x334>
 8005d1a:	e014      	b.n	8005d46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d1c:	f7fe fd32 	bl	8004784 <HAL_GetTick>
 8005d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d22:	e00a      	b.n	8005d3a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d24:	f7fe fd2e 	bl	8004784 <HAL_GetTick>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d901      	bls.n	8005d3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	e0b5      	b.n	8005ea6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d3a:	4b3e      	ldr	r3, [pc, #248]	@ (8005e34 <HAL_RCC_OscConfig+0x470>)
 8005d3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d3e:	f003 0302 	and.w	r3, r3, #2
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d1ee      	bne.n	8005d24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d46:	7dfb      	ldrb	r3, [r7, #23]
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d105      	bne.n	8005d58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d4c:	4b39      	ldr	r3, [pc, #228]	@ (8005e34 <HAL_RCC_OscConfig+0x470>)
 8005d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d50:	4a38      	ldr	r2, [pc, #224]	@ (8005e34 <HAL_RCC_OscConfig+0x470>)
 8005d52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d56:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	699b      	ldr	r3, [r3, #24]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	f000 80a1 	beq.w	8005ea4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005d62:	4b34      	ldr	r3, [pc, #208]	@ (8005e34 <HAL_RCC_OscConfig+0x470>)
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	f003 030c 	and.w	r3, r3, #12
 8005d6a:	2b08      	cmp	r3, #8
 8005d6c:	d05c      	beq.n	8005e28 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	2b02      	cmp	r3, #2
 8005d74:	d141      	bne.n	8005dfa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d76:	4b31      	ldr	r3, [pc, #196]	@ (8005e3c <HAL_RCC_OscConfig+0x478>)
 8005d78:	2200      	movs	r2, #0
 8005d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d7c:	f7fe fd02 	bl	8004784 <HAL_GetTick>
 8005d80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d82:	e008      	b.n	8005d96 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d84:	f7fe fcfe 	bl	8004784 <HAL_GetTick>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d901      	bls.n	8005d96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005d92:	2303      	movs	r3, #3
 8005d94:	e087      	b.n	8005ea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d96:	4b27      	ldr	r3, [pc, #156]	@ (8005e34 <HAL_RCC_OscConfig+0x470>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d1f0      	bne.n	8005d84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	69da      	ldr	r2, [r3, #28]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a1b      	ldr	r3, [r3, #32]
 8005daa:	431a      	orrs	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db0:	019b      	lsls	r3, r3, #6
 8005db2:	431a      	orrs	r2, r3
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005db8:	085b      	lsrs	r3, r3, #1
 8005dba:	3b01      	subs	r3, #1
 8005dbc:	041b      	lsls	r3, r3, #16
 8005dbe:	431a      	orrs	r2, r3
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dc4:	061b      	lsls	r3, r3, #24
 8005dc6:	491b      	ldr	r1, [pc, #108]	@ (8005e34 <HAL_RCC_OscConfig+0x470>)
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005dcc:	4b1b      	ldr	r3, [pc, #108]	@ (8005e3c <HAL_RCC_OscConfig+0x478>)
 8005dce:	2201      	movs	r2, #1
 8005dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dd2:	f7fe fcd7 	bl	8004784 <HAL_GetTick>
 8005dd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dd8:	e008      	b.n	8005dec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dda:	f7fe fcd3 	bl	8004784 <HAL_GetTick>
 8005dde:	4602      	mov	r2, r0
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	d901      	bls.n	8005dec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005de8:	2303      	movs	r3, #3
 8005dea:	e05c      	b.n	8005ea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dec:	4b11      	ldr	r3, [pc, #68]	@ (8005e34 <HAL_RCC_OscConfig+0x470>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d0f0      	beq.n	8005dda <HAL_RCC_OscConfig+0x416>
 8005df8:	e054      	b.n	8005ea4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dfa:	4b10      	ldr	r3, [pc, #64]	@ (8005e3c <HAL_RCC_OscConfig+0x478>)
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e00:	f7fe fcc0 	bl	8004784 <HAL_GetTick>
 8005e04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e06:	e008      	b.n	8005e1a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e08:	f7fe fcbc 	bl	8004784 <HAL_GetTick>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d901      	bls.n	8005e1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	e045      	b.n	8005ea6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e1a:	4b06      	ldr	r3, [pc, #24]	@ (8005e34 <HAL_RCC_OscConfig+0x470>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1f0      	bne.n	8005e08 <HAL_RCC_OscConfig+0x444>
 8005e26:	e03d      	b.n	8005ea4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	699b      	ldr	r3, [r3, #24]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d107      	bne.n	8005e40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e038      	b.n	8005ea6 <HAL_RCC_OscConfig+0x4e2>
 8005e34:	40023800 	.word	0x40023800
 8005e38:	40007000 	.word	0x40007000
 8005e3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e40:	4b1b      	ldr	r3, [pc, #108]	@ (8005eb0 <HAL_RCC_OscConfig+0x4ec>)
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	699b      	ldr	r3, [r3, #24]
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d028      	beq.n	8005ea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d121      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d11a      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e6a:	68fa      	ldr	r2, [r7, #12]
 8005e6c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005e70:	4013      	ands	r3, r2
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005e76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d111      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e86:	085b      	lsrs	r3, r3, #1
 8005e88:	3b01      	subs	r3, #1
 8005e8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d107      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d001      	beq.n	8005ea4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e000      	b.n	8005ea6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3718      	adds	r7, #24
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	40023800 	.word	0x40023800

08005eb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d101      	bne.n	8005ec8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e0cc      	b.n	8006062 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ec8:	4b68      	ldr	r3, [pc, #416]	@ (800606c <HAL_RCC_ClockConfig+0x1b8>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 0307 	and.w	r3, r3, #7
 8005ed0:	683a      	ldr	r2, [r7, #0]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d90c      	bls.n	8005ef0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ed6:	4b65      	ldr	r3, [pc, #404]	@ (800606c <HAL_RCC_ClockConfig+0x1b8>)
 8005ed8:	683a      	ldr	r2, [r7, #0]
 8005eda:	b2d2      	uxtb	r2, r2
 8005edc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ede:	4b63      	ldr	r3, [pc, #396]	@ (800606c <HAL_RCC_ClockConfig+0x1b8>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 0307 	and.w	r3, r3, #7
 8005ee6:	683a      	ldr	r2, [r7, #0]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d001      	beq.n	8005ef0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e0b8      	b.n	8006062 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 0302 	and.w	r3, r3, #2
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d020      	beq.n	8005f3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 0304 	and.w	r3, r3, #4
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d005      	beq.n	8005f14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f08:	4b59      	ldr	r3, [pc, #356]	@ (8006070 <HAL_RCC_ClockConfig+0x1bc>)
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	4a58      	ldr	r2, [pc, #352]	@ (8006070 <HAL_RCC_ClockConfig+0x1bc>)
 8005f0e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005f12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 0308 	and.w	r3, r3, #8
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d005      	beq.n	8005f2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f20:	4b53      	ldr	r3, [pc, #332]	@ (8006070 <HAL_RCC_ClockConfig+0x1bc>)
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	4a52      	ldr	r2, [pc, #328]	@ (8006070 <HAL_RCC_ClockConfig+0x1bc>)
 8005f26:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005f2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f2c:	4b50      	ldr	r3, [pc, #320]	@ (8006070 <HAL_RCC_ClockConfig+0x1bc>)
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	494d      	ldr	r1, [pc, #308]	@ (8006070 <HAL_RCC_ClockConfig+0x1bc>)
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 0301 	and.w	r3, r3, #1
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d044      	beq.n	8005fd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d107      	bne.n	8005f62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f52:	4b47      	ldr	r3, [pc, #284]	@ (8006070 <HAL_RCC_ClockConfig+0x1bc>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d119      	bne.n	8005f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e07f      	b.n	8006062 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	d003      	beq.n	8005f72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f6e:	2b03      	cmp	r3, #3
 8005f70:	d107      	bne.n	8005f82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f72:	4b3f      	ldr	r3, [pc, #252]	@ (8006070 <HAL_RCC_ClockConfig+0x1bc>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d109      	bne.n	8005f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e06f      	b.n	8006062 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f82:	4b3b      	ldr	r3, [pc, #236]	@ (8006070 <HAL_RCC_ClockConfig+0x1bc>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 0302 	and.w	r3, r3, #2
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d101      	bne.n	8005f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e067      	b.n	8006062 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f92:	4b37      	ldr	r3, [pc, #220]	@ (8006070 <HAL_RCC_ClockConfig+0x1bc>)
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	f023 0203 	bic.w	r2, r3, #3
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	4934      	ldr	r1, [pc, #208]	@ (8006070 <HAL_RCC_ClockConfig+0x1bc>)
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005fa4:	f7fe fbee 	bl	8004784 <HAL_GetTick>
 8005fa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005faa:	e00a      	b.n	8005fc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fac:	f7fe fbea 	bl	8004784 <HAL_GetTick>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d901      	bls.n	8005fc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e04f      	b.n	8006062 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fc2:	4b2b      	ldr	r3, [pc, #172]	@ (8006070 <HAL_RCC_ClockConfig+0x1bc>)
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	f003 020c 	and.w	r2, r3, #12
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d1eb      	bne.n	8005fac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005fd4:	4b25      	ldr	r3, [pc, #148]	@ (800606c <HAL_RCC_ClockConfig+0x1b8>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 0307 	and.w	r3, r3, #7
 8005fdc:	683a      	ldr	r2, [r7, #0]
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d20c      	bcs.n	8005ffc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fe2:	4b22      	ldr	r3, [pc, #136]	@ (800606c <HAL_RCC_ClockConfig+0x1b8>)
 8005fe4:	683a      	ldr	r2, [r7, #0]
 8005fe6:	b2d2      	uxtb	r2, r2
 8005fe8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fea:	4b20      	ldr	r3, [pc, #128]	@ (800606c <HAL_RCC_ClockConfig+0x1b8>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0307 	and.w	r3, r3, #7
 8005ff2:	683a      	ldr	r2, [r7, #0]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d001      	beq.n	8005ffc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e032      	b.n	8006062 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 0304 	and.w	r3, r3, #4
 8006004:	2b00      	cmp	r3, #0
 8006006:	d008      	beq.n	800601a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006008:	4b19      	ldr	r3, [pc, #100]	@ (8006070 <HAL_RCC_ClockConfig+0x1bc>)
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	4916      	ldr	r1, [pc, #88]	@ (8006070 <HAL_RCC_ClockConfig+0x1bc>)
 8006016:	4313      	orrs	r3, r2
 8006018:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 0308 	and.w	r3, r3, #8
 8006022:	2b00      	cmp	r3, #0
 8006024:	d009      	beq.n	800603a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006026:	4b12      	ldr	r3, [pc, #72]	@ (8006070 <HAL_RCC_ClockConfig+0x1bc>)
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	00db      	lsls	r3, r3, #3
 8006034:	490e      	ldr	r1, [pc, #56]	@ (8006070 <HAL_RCC_ClockConfig+0x1bc>)
 8006036:	4313      	orrs	r3, r2
 8006038:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800603a:	f000 f821 	bl	8006080 <HAL_RCC_GetSysClockFreq>
 800603e:	4602      	mov	r2, r0
 8006040:	4b0b      	ldr	r3, [pc, #44]	@ (8006070 <HAL_RCC_ClockConfig+0x1bc>)
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	091b      	lsrs	r3, r3, #4
 8006046:	f003 030f 	and.w	r3, r3, #15
 800604a:	490a      	ldr	r1, [pc, #40]	@ (8006074 <HAL_RCC_ClockConfig+0x1c0>)
 800604c:	5ccb      	ldrb	r3, [r1, r3]
 800604e:	fa22 f303 	lsr.w	r3, r2, r3
 8006052:	4a09      	ldr	r2, [pc, #36]	@ (8006078 <HAL_RCC_ClockConfig+0x1c4>)
 8006054:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006056:	4b09      	ldr	r3, [pc, #36]	@ (800607c <HAL_RCC_ClockConfig+0x1c8>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4618      	mov	r0, r3
 800605c:	f7fb fd50 	bl	8001b00 <HAL_InitTick>

  return HAL_OK;
 8006060:	2300      	movs	r3, #0
}
 8006062:	4618      	mov	r0, r3
 8006064:	3710      	adds	r7, #16
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
 800606a:	bf00      	nop
 800606c:	40023c00 	.word	0x40023c00
 8006070:	40023800 	.word	0x40023800
 8006074:	0800fe84 	.word	0x0800fe84
 8006078:	20000000 	.word	0x20000000
 800607c:	2000004c 	.word	0x2000004c

08006080 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006080:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006084:	b090      	sub	sp, #64	@ 0x40
 8006086:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006088:	2300      	movs	r3, #0
 800608a:	637b      	str	r3, [r7, #52]	@ 0x34
 800608c:	2300      	movs	r3, #0
 800608e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006090:	2300      	movs	r3, #0
 8006092:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006094:	2300      	movs	r3, #0
 8006096:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006098:	4b59      	ldr	r3, [pc, #356]	@ (8006200 <HAL_RCC_GetSysClockFreq+0x180>)
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	f003 030c 	and.w	r3, r3, #12
 80060a0:	2b08      	cmp	r3, #8
 80060a2:	d00d      	beq.n	80060c0 <HAL_RCC_GetSysClockFreq+0x40>
 80060a4:	2b08      	cmp	r3, #8
 80060a6:	f200 80a1 	bhi.w	80061ec <HAL_RCC_GetSysClockFreq+0x16c>
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d002      	beq.n	80060b4 <HAL_RCC_GetSysClockFreq+0x34>
 80060ae:	2b04      	cmp	r3, #4
 80060b0:	d003      	beq.n	80060ba <HAL_RCC_GetSysClockFreq+0x3a>
 80060b2:	e09b      	b.n	80061ec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80060b4:	4b53      	ldr	r3, [pc, #332]	@ (8006204 <HAL_RCC_GetSysClockFreq+0x184>)
 80060b6:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80060b8:	e09b      	b.n	80061f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80060ba:	4b53      	ldr	r3, [pc, #332]	@ (8006208 <HAL_RCC_GetSysClockFreq+0x188>)
 80060bc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80060be:	e098      	b.n	80061f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80060c0:	4b4f      	ldr	r3, [pc, #316]	@ (8006200 <HAL_RCC_GetSysClockFreq+0x180>)
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80060c8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80060ca:	4b4d      	ldr	r3, [pc, #308]	@ (8006200 <HAL_RCC_GetSysClockFreq+0x180>)
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d028      	beq.n	8006128 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060d6:	4b4a      	ldr	r3, [pc, #296]	@ (8006200 <HAL_RCC_GetSysClockFreq+0x180>)
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	099b      	lsrs	r3, r3, #6
 80060dc:	2200      	movs	r2, #0
 80060de:	623b      	str	r3, [r7, #32]
 80060e0:	627a      	str	r2, [r7, #36]	@ 0x24
 80060e2:	6a3b      	ldr	r3, [r7, #32]
 80060e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80060e8:	2100      	movs	r1, #0
 80060ea:	4b47      	ldr	r3, [pc, #284]	@ (8006208 <HAL_RCC_GetSysClockFreq+0x188>)
 80060ec:	fb03 f201 	mul.w	r2, r3, r1
 80060f0:	2300      	movs	r3, #0
 80060f2:	fb00 f303 	mul.w	r3, r0, r3
 80060f6:	4413      	add	r3, r2
 80060f8:	4a43      	ldr	r2, [pc, #268]	@ (8006208 <HAL_RCC_GetSysClockFreq+0x188>)
 80060fa:	fba0 1202 	umull	r1, r2, r0, r2
 80060fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006100:	460a      	mov	r2, r1
 8006102:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006104:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006106:	4413      	add	r3, r2
 8006108:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800610a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800610c:	2200      	movs	r2, #0
 800610e:	61bb      	str	r3, [r7, #24]
 8006110:	61fa      	str	r2, [r7, #28]
 8006112:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006116:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800611a:	f7fa fdb5 	bl	8000c88 <__aeabi_uldivmod>
 800611e:	4602      	mov	r2, r0
 8006120:	460b      	mov	r3, r1
 8006122:	4613      	mov	r3, r2
 8006124:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006126:	e053      	b.n	80061d0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006128:	4b35      	ldr	r3, [pc, #212]	@ (8006200 <HAL_RCC_GetSysClockFreq+0x180>)
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	099b      	lsrs	r3, r3, #6
 800612e:	2200      	movs	r2, #0
 8006130:	613b      	str	r3, [r7, #16]
 8006132:	617a      	str	r2, [r7, #20]
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800613a:	f04f 0b00 	mov.w	fp, #0
 800613e:	4652      	mov	r2, sl
 8006140:	465b      	mov	r3, fp
 8006142:	f04f 0000 	mov.w	r0, #0
 8006146:	f04f 0100 	mov.w	r1, #0
 800614a:	0159      	lsls	r1, r3, #5
 800614c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006150:	0150      	lsls	r0, r2, #5
 8006152:	4602      	mov	r2, r0
 8006154:	460b      	mov	r3, r1
 8006156:	ebb2 080a 	subs.w	r8, r2, sl
 800615a:	eb63 090b 	sbc.w	r9, r3, fp
 800615e:	f04f 0200 	mov.w	r2, #0
 8006162:	f04f 0300 	mov.w	r3, #0
 8006166:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800616a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800616e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006172:	ebb2 0408 	subs.w	r4, r2, r8
 8006176:	eb63 0509 	sbc.w	r5, r3, r9
 800617a:	f04f 0200 	mov.w	r2, #0
 800617e:	f04f 0300 	mov.w	r3, #0
 8006182:	00eb      	lsls	r3, r5, #3
 8006184:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006188:	00e2      	lsls	r2, r4, #3
 800618a:	4614      	mov	r4, r2
 800618c:	461d      	mov	r5, r3
 800618e:	eb14 030a 	adds.w	r3, r4, sl
 8006192:	603b      	str	r3, [r7, #0]
 8006194:	eb45 030b 	adc.w	r3, r5, fp
 8006198:	607b      	str	r3, [r7, #4]
 800619a:	f04f 0200 	mov.w	r2, #0
 800619e:	f04f 0300 	mov.w	r3, #0
 80061a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80061a6:	4629      	mov	r1, r5
 80061a8:	028b      	lsls	r3, r1, #10
 80061aa:	4621      	mov	r1, r4
 80061ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80061b0:	4621      	mov	r1, r4
 80061b2:	028a      	lsls	r2, r1, #10
 80061b4:	4610      	mov	r0, r2
 80061b6:	4619      	mov	r1, r3
 80061b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061ba:	2200      	movs	r2, #0
 80061bc:	60bb      	str	r3, [r7, #8]
 80061be:	60fa      	str	r2, [r7, #12]
 80061c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80061c4:	f7fa fd60 	bl	8000c88 <__aeabi_uldivmod>
 80061c8:	4602      	mov	r2, r0
 80061ca:	460b      	mov	r3, r1
 80061cc:	4613      	mov	r3, r2
 80061ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80061d0:	4b0b      	ldr	r3, [pc, #44]	@ (8006200 <HAL_RCC_GetSysClockFreq+0x180>)
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	0c1b      	lsrs	r3, r3, #16
 80061d6:	f003 0303 	and.w	r3, r3, #3
 80061da:	3301      	adds	r3, #1
 80061dc:	005b      	lsls	r3, r3, #1
 80061de:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80061e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80061e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80061e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80061ea:	e002      	b.n	80061f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80061ec:	4b05      	ldr	r3, [pc, #20]	@ (8006204 <HAL_RCC_GetSysClockFreq+0x184>)
 80061ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80061f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80061f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3740      	adds	r7, #64	@ 0x40
 80061f8:	46bd      	mov	sp, r7
 80061fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061fe:	bf00      	nop
 8006200:	40023800 	.word	0x40023800
 8006204:	00f42400 	.word	0x00f42400
 8006208:	017d7840 	.word	0x017d7840

0800620c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800620c:	b480      	push	{r7}
 800620e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006210:	4b03      	ldr	r3, [pc, #12]	@ (8006220 <HAL_RCC_GetHCLKFreq+0x14>)
 8006212:	681b      	ldr	r3, [r3, #0]
}
 8006214:	4618      	mov	r0, r3
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop
 8006220:	20000000 	.word	0x20000000

08006224 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006228:	f7ff fff0 	bl	800620c <HAL_RCC_GetHCLKFreq>
 800622c:	4602      	mov	r2, r0
 800622e:	4b05      	ldr	r3, [pc, #20]	@ (8006244 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	0b5b      	lsrs	r3, r3, #13
 8006234:	f003 0307 	and.w	r3, r3, #7
 8006238:	4903      	ldr	r1, [pc, #12]	@ (8006248 <HAL_RCC_GetPCLK2Freq+0x24>)
 800623a:	5ccb      	ldrb	r3, [r1, r3]
 800623c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006240:	4618      	mov	r0, r3
 8006242:	bd80      	pop	{r7, pc}
 8006244:	40023800 	.word	0x40023800
 8006248:	0800fe94 	.word	0x0800fe94

0800624c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	220f      	movs	r2, #15
 800625a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800625c:	4b12      	ldr	r3, [pc, #72]	@ (80062a8 <HAL_RCC_GetClockConfig+0x5c>)
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	f003 0203 	and.w	r2, r3, #3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006268:	4b0f      	ldr	r3, [pc, #60]	@ (80062a8 <HAL_RCC_GetClockConfig+0x5c>)
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006274:	4b0c      	ldr	r3, [pc, #48]	@ (80062a8 <HAL_RCC_GetClockConfig+0x5c>)
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006280:	4b09      	ldr	r3, [pc, #36]	@ (80062a8 <HAL_RCC_GetClockConfig+0x5c>)
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	08db      	lsrs	r3, r3, #3
 8006286:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800628e:	4b07      	ldr	r3, [pc, #28]	@ (80062ac <HAL_RCC_GetClockConfig+0x60>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f003 0207 	and.w	r2, r3, #7
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	601a      	str	r2, [r3, #0]
}
 800629a:	bf00      	nop
 800629c:	370c      	adds	r7, #12
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr
 80062a6:	bf00      	nop
 80062a8:	40023800 	.word	0x40023800
 80062ac:	40023c00 	.word	0x40023c00

080062b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d101      	bne.n	80062c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e041      	b.n	8006346 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d106      	bne.n	80062dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 f839 	bl	800634e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2202      	movs	r2, #2
 80062e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	3304      	adds	r3, #4
 80062ec:	4619      	mov	r1, r3
 80062ee:	4610      	mov	r0, r2
 80062f0:	f000 f9d8 	bl	80066a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3708      	adds	r7, #8
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800634e:	b480      	push	{r7}
 8006350:	b083      	sub	sp, #12
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006356:	bf00      	nop
 8006358:	370c      	adds	r7, #12
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
	...

08006364 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006372:	b2db      	uxtb	r3, r3
 8006374:	2b01      	cmp	r3, #1
 8006376:	d001      	beq.n	800637c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	e04e      	b.n	800641a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2202      	movs	r2, #2
 8006380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	68da      	ldr	r2, [r3, #12]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f042 0201 	orr.w	r2, r2, #1
 8006392:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a23      	ldr	r2, [pc, #140]	@ (8006428 <HAL_TIM_Base_Start_IT+0xc4>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d022      	beq.n	80063e4 <HAL_TIM_Base_Start_IT+0x80>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063a6:	d01d      	beq.n	80063e4 <HAL_TIM_Base_Start_IT+0x80>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a1f      	ldr	r2, [pc, #124]	@ (800642c <HAL_TIM_Base_Start_IT+0xc8>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d018      	beq.n	80063e4 <HAL_TIM_Base_Start_IT+0x80>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a1e      	ldr	r2, [pc, #120]	@ (8006430 <HAL_TIM_Base_Start_IT+0xcc>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d013      	beq.n	80063e4 <HAL_TIM_Base_Start_IT+0x80>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a1c      	ldr	r2, [pc, #112]	@ (8006434 <HAL_TIM_Base_Start_IT+0xd0>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d00e      	beq.n	80063e4 <HAL_TIM_Base_Start_IT+0x80>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a1b      	ldr	r2, [pc, #108]	@ (8006438 <HAL_TIM_Base_Start_IT+0xd4>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d009      	beq.n	80063e4 <HAL_TIM_Base_Start_IT+0x80>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a19      	ldr	r2, [pc, #100]	@ (800643c <HAL_TIM_Base_Start_IT+0xd8>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d004      	beq.n	80063e4 <HAL_TIM_Base_Start_IT+0x80>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a18      	ldr	r2, [pc, #96]	@ (8006440 <HAL_TIM_Base_Start_IT+0xdc>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d111      	bne.n	8006408 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f003 0307 	and.w	r3, r3, #7
 80063ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2b06      	cmp	r3, #6
 80063f4:	d010      	beq.n	8006418 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f042 0201 	orr.w	r2, r2, #1
 8006404:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006406:	e007      	b.n	8006418 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f042 0201 	orr.w	r2, r2, #1
 8006416:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	3714      	adds	r7, #20
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop
 8006428:	40010000 	.word	0x40010000
 800642c:	40000400 	.word	0x40000400
 8006430:	40000800 	.word	0x40000800
 8006434:	40000c00 	.word	0x40000c00
 8006438:	40010400 	.word	0x40010400
 800643c:	40014000 	.word	0x40014000
 8006440:	40001800 	.word	0x40001800

08006444 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b082      	sub	sp, #8
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	f003 0302 	and.w	r3, r3, #2
 8006456:	2b02      	cmp	r3, #2
 8006458:	d122      	bne.n	80064a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	f003 0302 	and.w	r3, r3, #2
 8006464:	2b02      	cmp	r3, #2
 8006466:	d11b      	bne.n	80064a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f06f 0202 	mvn.w	r2, #2
 8006470:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2201      	movs	r2, #1
 8006476:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	699b      	ldr	r3, [r3, #24]
 800647e:	f003 0303 	and.w	r3, r3, #3
 8006482:	2b00      	cmp	r3, #0
 8006484:	d003      	beq.n	800648e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 f8ee 	bl	8006668 <HAL_TIM_IC_CaptureCallback>
 800648c:	e005      	b.n	800649a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 f8e0 	bl	8006654 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f000 f8f1 	bl	800667c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2200      	movs	r2, #0
 800649e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	f003 0304 	and.w	r3, r3, #4
 80064aa:	2b04      	cmp	r3, #4
 80064ac:	d122      	bne.n	80064f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	f003 0304 	and.w	r3, r3, #4
 80064b8:	2b04      	cmp	r3, #4
 80064ba:	d11b      	bne.n	80064f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f06f 0204 	mvn.w	r2, #4
 80064c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2202      	movs	r2, #2
 80064ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	699b      	ldr	r3, [r3, #24]
 80064d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d003      	beq.n	80064e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 f8c4 	bl	8006668 <HAL_TIM_IC_CaptureCallback>
 80064e0:	e005      	b.n	80064ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 f8b6 	bl	8006654 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 f8c7 	bl	800667c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	f003 0308 	and.w	r3, r3, #8
 80064fe:	2b08      	cmp	r3, #8
 8006500:	d122      	bne.n	8006548 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	f003 0308 	and.w	r3, r3, #8
 800650c:	2b08      	cmp	r3, #8
 800650e:	d11b      	bne.n	8006548 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f06f 0208 	mvn.w	r2, #8
 8006518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2204      	movs	r2, #4
 800651e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	69db      	ldr	r3, [r3, #28]
 8006526:	f003 0303 	and.w	r3, r3, #3
 800652a:	2b00      	cmp	r3, #0
 800652c:	d003      	beq.n	8006536 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 f89a 	bl	8006668 <HAL_TIM_IC_CaptureCallback>
 8006534:	e005      	b.n	8006542 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 f88c 	bl	8006654 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 f89d 	bl	800667c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	f003 0310 	and.w	r3, r3, #16
 8006552:	2b10      	cmp	r3, #16
 8006554:	d122      	bne.n	800659c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68db      	ldr	r3, [r3, #12]
 800655c:	f003 0310 	and.w	r3, r3, #16
 8006560:	2b10      	cmp	r3, #16
 8006562:	d11b      	bne.n	800659c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f06f 0210 	mvn.w	r2, #16
 800656c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2208      	movs	r2, #8
 8006572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	69db      	ldr	r3, [r3, #28]
 800657a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800657e:	2b00      	cmp	r3, #0
 8006580:	d003      	beq.n	800658a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 f870 	bl	8006668 <HAL_TIM_IC_CaptureCallback>
 8006588:	e005      	b.n	8006596 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 f862 	bl	8006654 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 f873 	bl	800667c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	f003 0301 	and.w	r3, r3, #1
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d10e      	bne.n	80065c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	f003 0301 	and.w	r3, r3, #1
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d107      	bne.n	80065c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f06f 0201 	mvn.w	r2, #1
 80065c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f7fb fa08 	bl	80019d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065d2:	2b80      	cmp	r3, #128	@ 0x80
 80065d4:	d10e      	bne.n	80065f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065e0:	2b80      	cmp	r3, #128	@ 0x80
 80065e2:	d107      	bne.n	80065f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80065ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 f902 	bl	80067f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065fe:	2b40      	cmp	r3, #64	@ 0x40
 8006600:	d10e      	bne.n	8006620 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800660c:	2b40      	cmp	r3, #64	@ 0x40
 800660e:	d107      	bne.n	8006620 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 f838 	bl	8006690 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	f003 0320 	and.w	r3, r3, #32
 800662a:	2b20      	cmp	r3, #32
 800662c:	d10e      	bne.n	800664c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	f003 0320 	and.w	r3, r3, #32
 8006638:	2b20      	cmp	r3, #32
 800663a:	d107      	bne.n	800664c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f06f 0220 	mvn.w	r2, #32
 8006644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 f8cc 	bl	80067e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800664c:	bf00      	nop
 800664e:	3708      	adds	r7, #8
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800665c:	bf00      	nop
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006670:	bf00      	nop
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006684:	bf00      	nop
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006698:	bf00      	nop
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b085      	sub	sp, #20
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4a40      	ldr	r2, [pc, #256]	@ (80067b8 <TIM_Base_SetConfig+0x114>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d013      	beq.n	80066e4 <TIM_Base_SetConfig+0x40>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066c2:	d00f      	beq.n	80066e4 <TIM_Base_SetConfig+0x40>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4a3d      	ldr	r2, [pc, #244]	@ (80067bc <TIM_Base_SetConfig+0x118>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d00b      	beq.n	80066e4 <TIM_Base_SetConfig+0x40>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a3c      	ldr	r2, [pc, #240]	@ (80067c0 <TIM_Base_SetConfig+0x11c>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d007      	beq.n	80066e4 <TIM_Base_SetConfig+0x40>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a3b      	ldr	r2, [pc, #236]	@ (80067c4 <TIM_Base_SetConfig+0x120>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d003      	beq.n	80066e4 <TIM_Base_SetConfig+0x40>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a3a      	ldr	r2, [pc, #232]	@ (80067c8 <TIM_Base_SetConfig+0x124>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d108      	bne.n	80066f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a2f      	ldr	r2, [pc, #188]	@ (80067b8 <TIM_Base_SetConfig+0x114>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d02b      	beq.n	8006756 <TIM_Base_SetConfig+0xb2>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006704:	d027      	beq.n	8006756 <TIM_Base_SetConfig+0xb2>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a2c      	ldr	r2, [pc, #176]	@ (80067bc <TIM_Base_SetConfig+0x118>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d023      	beq.n	8006756 <TIM_Base_SetConfig+0xb2>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a2b      	ldr	r2, [pc, #172]	@ (80067c0 <TIM_Base_SetConfig+0x11c>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d01f      	beq.n	8006756 <TIM_Base_SetConfig+0xb2>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a2a      	ldr	r2, [pc, #168]	@ (80067c4 <TIM_Base_SetConfig+0x120>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d01b      	beq.n	8006756 <TIM_Base_SetConfig+0xb2>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a29      	ldr	r2, [pc, #164]	@ (80067c8 <TIM_Base_SetConfig+0x124>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d017      	beq.n	8006756 <TIM_Base_SetConfig+0xb2>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a28      	ldr	r2, [pc, #160]	@ (80067cc <TIM_Base_SetConfig+0x128>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d013      	beq.n	8006756 <TIM_Base_SetConfig+0xb2>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4a27      	ldr	r2, [pc, #156]	@ (80067d0 <TIM_Base_SetConfig+0x12c>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d00f      	beq.n	8006756 <TIM_Base_SetConfig+0xb2>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4a26      	ldr	r2, [pc, #152]	@ (80067d4 <TIM_Base_SetConfig+0x130>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d00b      	beq.n	8006756 <TIM_Base_SetConfig+0xb2>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4a25      	ldr	r2, [pc, #148]	@ (80067d8 <TIM_Base_SetConfig+0x134>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d007      	beq.n	8006756 <TIM_Base_SetConfig+0xb2>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4a24      	ldr	r2, [pc, #144]	@ (80067dc <TIM_Base_SetConfig+0x138>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d003      	beq.n	8006756 <TIM_Base_SetConfig+0xb2>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4a23      	ldr	r2, [pc, #140]	@ (80067e0 <TIM_Base_SetConfig+0x13c>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d108      	bne.n	8006768 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800675c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	68db      	ldr	r3, [r3, #12]
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	4313      	orrs	r3, r2
 8006766:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	695b      	ldr	r3, [r3, #20]
 8006772:	4313      	orrs	r3, r2
 8006774:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	689a      	ldr	r2, [r3, #8]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	4a0a      	ldr	r2, [pc, #40]	@ (80067b8 <TIM_Base_SetConfig+0x114>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d003      	beq.n	800679c <TIM_Base_SetConfig+0xf8>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4a0c      	ldr	r2, [pc, #48]	@ (80067c8 <TIM_Base_SetConfig+0x124>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d103      	bne.n	80067a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	691a      	ldr	r2, [r3, #16]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	615a      	str	r2, [r3, #20]
}
 80067aa:	bf00      	nop
 80067ac:	3714      	adds	r7, #20
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop
 80067b8:	40010000 	.word	0x40010000
 80067bc:	40000400 	.word	0x40000400
 80067c0:	40000800 	.word	0x40000800
 80067c4:	40000c00 	.word	0x40000c00
 80067c8:	40010400 	.word	0x40010400
 80067cc:	40014000 	.word	0x40014000
 80067d0:	40014400 	.word	0x40014400
 80067d4:	40014800 	.word	0x40014800
 80067d8:	40001800 	.word	0x40001800
 80067dc:	40001c00 	.word	0x40001c00
 80067e0:	40002000 	.word	0x40002000

080067e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80067ec:	bf00      	nop
 80067ee:	370c      	adds	r7, #12
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006800:	bf00      	nop
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800680c:	b480      	push	{r7}
 800680e:	b089      	sub	sp, #36	@ 0x24
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	fa93 f3a3 	rbit	r3, r3
 8006826:	613b      	str	r3, [r7, #16]
  return result;
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	fab3 f383 	clz	r3, r3
 800682e:	b2db      	uxtb	r3, r3
 8006830:	005b      	lsls	r3, r3, #1
 8006832:	2103      	movs	r1, #3
 8006834:	fa01 f303 	lsl.w	r3, r1, r3
 8006838:	43db      	mvns	r3, r3
 800683a:	401a      	ands	r2, r3
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	fa93 f3a3 	rbit	r3, r3
 8006846:	61bb      	str	r3, [r7, #24]
  return result;
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	fab3 f383 	clz	r3, r3
 800684e:	b2db      	uxtb	r3, r3
 8006850:	005b      	lsls	r3, r3, #1
 8006852:	6879      	ldr	r1, [r7, #4]
 8006854:	fa01 f303 	lsl.w	r3, r1, r3
 8006858:	431a      	orrs	r2, r3
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	601a      	str	r2, [r3, #0]
}
 800685e:	bf00      	nop
 8006860:	3724      	adds	r7, #36	@ 0x24
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr

0800686a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800686a:	b480      	push	{r7}
 800686c:	b085      	sub	sp, #20
 800686e:	af00      	add	r7, sp, #0
 8006870:	60f8      	str	r0, [r7, #12]
 8006872:	60b9      	str	r1, [r7, #8]
 8006874:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	685a      	ldr	r2, [r3, #4]
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	43db      	mvns	r3, r3
 800687e:	401a      	ands	r2, r3
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	6879      	ldr	r1, [r7, #4]
 8006884:	fb01 f303 	mul.w	r3, r1, r3
 8006888:	431a      	orrs	r2, r3
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	605a      	str	r2, [r3, #4]
}
 800688e:	bf00      	nop
 8006890:	3714      	adds	r7, #20
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr

0800689a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800689a:	b480      	push	{r7}
 800689c:	b089      	sub	sp, #36	@ 0x24
 800689e:	af00      	add	r7, sp, #0
 80068a0:	60f8      	str	r0, [r7, #12]
 80068a2:	60b9      	str	r1, [r7, #8]
 80068a4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	689a      	ldr	r2, [r3, #8]
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	fa93 f3a3 	rbit	r3, r3
 80068b4:	613b      	str	r3, [r7, #16]
  return result;
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	fab3 f383 	clz	r3, r3
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	005b      	lsls	r3, r3, #1
 80068c0:	2103      	movs	r1, #3
 80068c2:	fa01 f303 	lsl.w	r3, r1, r3
 80068c6:	43db      	mvns	r3, r3
 80068c8:	401a      	ands	r2, r3
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068ce:	69fb      	ldr	r3, [r7, #28]
 80068d0:	fa93 f3a3 	rbit	r3, r3
 80068d4:	61bb      	str	r3, [r7, #24]
  return result;
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	fab3 f383 	clz	r3, r3
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	005b      	lsls	r3, r3, #1
 80068e0:	6879      	ldr	r1, [r7, #4]
 80068e2:	fa01 f303 	lsl.w	r3, r1, r3
 80068e6:	431a      	orrs	r2, r3
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80068ec:	bf00      	nop
 80068ee:	3724      	adds	r7, #36	@ 0x24
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b089      	sub	sp, #36	@ 0x24
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	68da      	ldr	r2, [r3, #12]
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	fa93 f3a3 	rbit	r3, r3
 8006912:	613b      	str	r3, [r7, #16]
  return result;
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	fab3 f383 	clz	r3, r3
 800691a:	b2db      	uxtb	r3, r3
 800691c:	005b      	lsls	r3, r3, #1
 800691e:	2103      	movs	r1, #3
 8006920:	fa01 f303 	lsl.w	r3, r1, r3
 8006924:	43db      	mvns	r3, r3
 8006926:	401a      	ands	r2, r3
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800692c:	69fb      	ldr	r3, [r7, #28]
 800692e:	fa93 f3a3 	rbit	r3, r3
 8006932:	61bb      	str	r3, [r7, #24]
  return result;
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	fab3 f383 	clz	r3, r3
 800693a:	b2db      	uxtb	r3, r3
 800693c:	005b      	lsls	r3, r3, #1
 800693e:	6879      	ldr	r1, [r7, #4]
 8006940:	fa01 f303 	lsl.w	r3, r1, r3
 8006944:	431a      	orrs	r2, r3
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	60da      	str	r2, [r3, #12]
}
 800694a:	bf00      	nop
 800694c:	3724      	adds	r7, #36	@ 0x24
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr

08006956 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8006956:	b480      	push	{r7}
 8006958:	b089      	sub	sp, #36	@ 0x24
 800695a:	af00      	add	r7, sp, #0
 800695c:	60f8      	str	r0, [r7, #12]
 800695e:	60b9      	str	r1, [r7, #8]
 8006960:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6a1a      	ldr	r2, [r3, #32]
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	fa93 f3a3 	rbit	r3, r3
 8006970:	613b      	str	r3, [r7, #16]
  return result;
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	fab3 f383 	clz	r3, r3
 8006978:	b2db      	uxtb	r3, r3
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	210f      	movs	r1, #15
 800697e:	fa01 f303 	lsl.w	r3, r1, r3
 8006982:	43db      	mvns	r3, r3
 8006984:	401a      	ands	r2, r3
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	fa93 f3a3 	rbit	r3, r3
 8006990:	61bb      	str	r3, [r7, #24]
  return result;
 8006992:	69bb      	ldr	r3, [r7, #24]
 8006994:	fab3 f383 	clz	r3, r3
 8006998:	b2db      	uxtb	r3, r3
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	6879      	ldr	r1, [r7, #4]
 800699e:	fa01 f303 	lsl.w	r3, r1, r3
 80069a2:	431a      	orrs	r2, r3
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80069a8:	bf00      	nop
 80069aa:	3724      	adds	r7, #36	@ 0x24
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr

080069b4 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b089      	sub	sp, #36	@ 0x24
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	60b9      	str	r1, [r7, #8]
 80069be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	0a1b      	lsrs	r3, r3, #8
 80069c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	fa93 f3a3 	rbit	r3, r3
 80069d0:	613b      	str	r3, [r7, #16]
  return result;
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	fab3 f383 	clz	r3, r3
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	210f      	movs	r1, #15
 80069de:	fa01 f303 	lsl.w	r3, r1, r3
 80069e2:	43db      	mvns	r3, r3
 80069e4:	401a      	ands	r2, r3
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	0a1b      	lsrs	r3, r3, #8
 80069ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	fa93 f3a3 	rbit	r3, r3
 80069f2:	61bb      	str	r3, [r7, #24]
  return result;
 80069f4:	69bb      	ldr	r3, [r7, #24]
 80069f6:	fab3 f383 	clz	r3, r3
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	6879      	ldr	r1, [r7, #4]
 8006a00:	fa01 f303 	lsl.w	r3, r1, r3
 8006a04:	431a      	orrs	r2, r3
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8006a0a:	bf00      	nop
 8006a0c:	3724      	adds	r7, #36	@ 0x24
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr

08006a16 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b088      	sub	sp, #32
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
 8006a1e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8006a20:	2300      	movs	r3, #0
 8006a22:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8006a24:	2300      	movs	r3, #0
 8006a26:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	fa93 f3a3 	rbit	r3, r3
 8006a34:	613b      	str	r3, [r7, #16]
  return result;
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	fab3 f383 	clz	r3, r3
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8006a40:	e050      	b.n	8006ae4 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	2101      	movs	r1, #1
 8006a48:	69fb      	ldr	r3, [r7, #28]
 8006a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a4e:	4013      	ands	r3, r2
 8006a50:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8006a52:	69bb      	ldr	r3, [r7, #24]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d042      	beq.n	8006ade <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d003      	beq.n	8006a68 <LL_GPIO_Init+0x52>
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	2b02      	cmp	r3, #2
 8006a66:	d10d      	bne.n	8006a84 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	69b9      	ldr	r1, [r7, #24]
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f7ff ff12 	bl	800689a <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	69b9      	ldr	r1, [r7, #24]
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f7ff fef3 	bl	800686a <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	691b      	ldr	r3, [r3, #16]
 8006a88:	461a      	mov	r2, r3
 8006a8a:	69b9      	ldr	r1, [r7, #24]
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f7ff ff33 	bl	80068f8 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d11a      	bne.n	8006ad0 <LL_GPIO_Init+0xba>
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	fa93 f3a3 	rbit	r3, r3
 8006aa4:	60bb      	str	r3, [r7, #8]
  return result;
 8006aa6:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8006aa8:	fab3 f383 	clz	r3, r3
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	2b07      	cmp	r3, #7
 8006ab0:	d807      	bhi.n	8006ac2 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	695b      	ldr	r3, [r3, #20]
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	69b9      	ldr	r1, [r7, #24]
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f7ff ff4b 	bl	8006956 <LL_GPIO_SetAFPin_0_7>
 8006ac0:	e006      	b.n	8006ad0 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	695b      	ldr	r3, [r3, #20]
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	69b9      	ldr	r1, [r7, #24]
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f7ff ff72 	bl	80069b4 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	69b9      	ldr	r1, [r7, #24]
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f7ff fe97 	bl	800680c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	3301      	adds	r3, #1
 8006ae2:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	fa22 f303 	lsr.w	r3, r2, r3
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d1a7      	bne.n	8006a42 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3720      	adds	r7, #32
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8006afc:	b480      	push	{r7}
 8006afe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006b00:	4b04      	ldr	r3, [pc, #16]	@ (8006b14 <LL_RCC_GetSysClkSource+0x18>)
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	f003 030c 	and.w	r3, r3, #12
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr
 8006b12:	bf00      	nop
 8006b14:	40023800 	.word	0x40023800

08006b18 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006b1c:	4b04      	ldr	r3, [pc, #16]	@ (8006b30 <LL_RCC_GetAHBPrescaler+0x18>)
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr
 8006b2e:	bf00      	nop
 8006b30:	40023800 	.word	0x40023800

08006b34 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8006b34:	b480      	push	{r7}
 8006b36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006b38:	4b04      	ldr	r3, [pc, #16]	@ (8006b4c <LL_RCC_GetAPB1Prescaler+0x18>)
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr
 8006b4a:	bf00      	nop
 8006b4c:	40023800 	.word	0x40023800

08006b50 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8006b50:	b480      	push	{r7}
 8006b52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006b54:	4b04      	ldr	r3, [pc, #16]	@ (8006b68 <LL_RCC_GetAPB2Prescaler+0x18>)
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	40023800 	.word	0x40023800

08006b6c <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006b70:	4b04      	ldr	r3, [pc, #16]	@ (8006b84 <LL_RCC_PLL_GetMainSource+0x18>)
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	40023800 	.word	0x40023800

08006b88 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006b8c:	4b04      	ldr	r3, [pc, #16]	@ (8006ba0 <LL_RCC_PLL_GetN+0x18>)
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	099b      	lsrs	r3, r3, #6
 8006b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr
 8006ba0:	40023800 	.word	0x40023800

08006ba4 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8006ba8:	4b04      	ldr	r3, [pc, #16]	@ (8006bbc <LL_RCC_PLL_GetP+0x18>)
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr
 8006bba:	bf00      	nop
 8006bbc:	40023800 	.word	0x40023800

08006bc0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006bc4:	4b04      	ldr	r3, [pc, #16]	@ (8006bd8 <LL_RCC_PLL_GetDivider+0x18>)
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr
 8006bd6:	bf00      	nop
 8006bd8:	40023800 	.word	0x40023800

08006bdc <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8006be4:	f000 f820 	bl	8006c28 <RCC_GetSystemClockFreq>
 8006be8:	4602      	mov	r2, r0
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f000 f840 	bl	8006c78 <RCC_GetHCLKClockFreq>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	4618      	mov	r0, r3
 8006c04:	f000 f84e 	bl	8006ca4 <RCC_GetPCLK1ClockFreq>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	4618      	mov	r0, r3
 8006c14:	f000 f85a 	bl	8006ccc <RCC_GetPCLK2ClockFreq>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	60da      	str	r2, [r3, #12]
}
 8006c1e:	bf00      	nop
 8006c20:	3708      	adds	r7, #8
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
	...

08006c28 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8006c32:	f7ff ff63 	bl	8006afc <LL_RCC_GetSysClkSource>
 8006c36:	4603      	mov	r3, r0
 8006c38:	2b08      	cmp	r3, #8
 8006c3a:	d00c      	beq.n	8006c56 <RCC_GetSystemClockFreq+0x2e>
 8006c3c:	2b08      	cmp	r3, #8
 8006c3e:	d80f      	bhi.n	8006c60 <RCC_GetSystemClockFreq+0x38>
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d002      	beq.n	8006c4a <RCC_GetSystemClockFreq+0x22>
 8006c44:	2b04      	cmp	r3, #4
 8006c46:	d003      	beq.n	8006c50 <RCC_GetSystemClockFreq+0x28>
 8006c48:	e00a      	b.n	8006c60 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8006c4a:	4b09      	ldr	r3, [pc, #36]	@ (8006c70 <RCC_GetSystemClockFreq+0x48>)
 8006c4c:	607b      	str	r3, [r7, #4]
      break;
 8006c4e:	e00a      	b.n	8006c66 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8006c50:	4b08      	ldr	r3, [pc, #32]	@ (8006c74 <RCC_GetSystemClockFreq+0x4c>)
 8006c52:	607b      	str	r3, [r7, #4]
      break;
 8006c54:	e007      	b.n	8006c66 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8006c56:	2008      	movs	r0, #8
 8006c58:	f000 f84c 	bl	8006cf4 <RCC_PLL_GetFreqDomain_SYS>
 8006c5c:	6078      	str	r0, [r7, #4]
      break;
 8006c5e:	e002      	b.n	8006c66 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8006c60:	4b03      	ldr	r3, [pc, #12]	@ (8006c70 <RCC_GetSystemClockFreq+0x48>)
 8006c62:	607b      	str	r3, [r7, #4]
      break;
 8006c64:	bf00      	nop
  }

  return frequency;
 8006c66:	687b      	ldr	r3, [r7, #4]
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3708      	adds	r7, #8
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}
 8006c70:	00f42400 	.word	0x00f42400
 8006c74:	017d7840 	.word	0x017d7840

08006c78 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8006c80:	f7ff ff4a 	bl	8006b18 <LL_RCC_GetAHBPrescaler>
 8006c84:	4603      	mov	r3, r0
 8006c86:	091b      	lsrs	r3, r3, #4
 8006c88:	f003 030f 	and.w	r3, r3, #15
 8006c8c:	4a04      	ldr	r2, [pc, #16]	@ (8006ca0 <RCC_GetHCLKClockFreq+0x28>)
 8006c8e:	5cd3      	ldrb	r3, [r2, r3]
 8006c90:	461a      	mov	r2, r3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	40d3      	lsrs	r3, r2
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3708      	adds	r7, #8
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	0800fe84 	.word	0x0800fe84

08006ca4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8006cac:	f7ff ff42 	bl	8006b34 <LL_RCC_GetAPB1Prescaler>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	0a9b      	lsrs	r3, r3, #10
 8006cb4:	4a04      	ldr	r2, [pc, #16]	@ (8006cc8 <RCC_GetPCLK1ClockFreq+0x24>)
 8006cb6:	5cd3      	ldrb	r3, [r2, r3]
 8006cb8:	461a      	mov	r2, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	40d3      	lsrs	r3, r2
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3708      	adds	r7, #8
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	0800fe94 	.word	0x0800fe94

08006ccc <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8006cd4:	f7ff ff3c 	bl	8006b50 <LL_RCC_GetAPB2Prescaler>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	0b5b      	lsrs	r3, r3, #13
 8006cdc:	4a04      	ldr	r2, [pc, #16]	@ (8006cf0 <RCC_GetPCLK2ClockFreq+0x24>)
 8006cde:	5cd3      	ldrb	r3, [r2, r3]
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	40d3      	lsrs	r3, r2
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3708      	adds	r7, #8
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	0800fe94 	.word	0x0800fe94

08006cf4 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8006cf4:	b590      	push	{r4, r7, lr}
 8006cf6:	b087      	sub	sp, #28
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	617b      	str	r3, [r7, #20]
 8006d00:	2300      	movs	r3, #0
 8006d02:	60fb      	str	r3, [r7, #12]
 8006d04:	2300      	movs	r3, #0
 8006d06:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8006d08:	f7ff ff30 	bl	8006b6c <LL_RCC_PLL_GetMainSource>
 8006d0c:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d004      	beq.n	8006d1e <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006d1a:	d003      	beq.n	8006d24 <RCC_PLL_GetFreqDomain_SYS+0x30>
 8006d1c:	e005      	b.n	8006d2a <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8006d1e:	4b12      	ldr	r3, [pc, #72]	@ (8006d68 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8006d20:	617b      	str	r3, [r7, #20]
      break;
 8006d22:	e005      	b.n	8006d30 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8006d24:	4b11      	ldr	r3, [pc, #68]	@ (8006d6c <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8006d26:	617b      	str	r3, [r7, #20]
      break;
 8006d28:	e002      	b.n	8006d30 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8006d2a:	4b0f      	ldr	r3, [pc, #60]	@ (8006d68 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8006d2c:	617b      	str	r3, [r7, #20]
      break;
 8006d2e:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2b08      	cmp	r3, #8
 8006d34:	d113      	bne.n	8006d5e <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8006d36:	f7ff ff43 	bl	8006bc0 <LL_RCC_PLL_GetDivider>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	fbb3 f4f2 	udiv	r4, r3, r2
 8006d42:	f7ff ff21 	bl	8006b88 <LL_RCC_PLL_GetN>
 8006d46:	4603      	mov	r3, r0
 8006d48:	fb03 f404 	mul.w	r4, r3, r4
 8006d4c:	f7ff ff2a 	bl	8006ba4 <LL_RCC_PLL_GetP>
 8006d50:	4603      	mov	r3, r0
 8006d52:	0c1b      	lsrs	r3, r3, #16
 8006d54:	3301      	adds	r3, #1
 8006d56:	005b      	lsls	r3, r3, #1
 8006d58:	fbb4 f3f3 	udiv	r3, r4, r3
 8006d5c:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8006d5e:	693b      	ldr	r3, [r7, #16]
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	371c      	adds	r7, #28
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd90      	pop	{r4, r7, pc}
 8006d68:	00f42400 	.word	0x00f42400
 8006d6c:	017d7840 	.word	0x017d7840

08006d70 <LL_USART_IsEnabled>:
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d84:	bf0c      	ite	eq
 8006d86:	2301      	moveq	r3, #1
 8006d88:	2300      	movne	r3, #0
 8006d8a:	b2db      	uxtb	r3, r3
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	370c      	adds	r7, #12
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <LL_USART_SetStopBitsLength>:
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	431a      	orrs	r2, r3
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	611a      	str	r2, [r3, #16]
}
 8006db2:	bf00      	nop
 8006db4:	370c      	adds	r7, #12
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr

08006dbe <LL_USART_SetHWFlowCtrl>:
{
 8006dbe:	b480      	push	{r7}
 8006dc0:	b083      	sub	sp, #12
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
 8006dc6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	695b      	ldr	r3, [r3, #20]
 8006dcc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	431a      	orrs	r2, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	615a      	str	r2, [r3, #20]
}
 8006dd8:	bf00      	nop
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <LL_USART_SetBaudRate>:
{
 8006de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006de8:	b0c0      	sub	sp, #256	@ 0x100
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006df0:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8006df4:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8006df8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8006dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e04:	f040 810c 	bne.w	8007020 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8006e08:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006e12:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006e16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006e1a:	4622      	mov	r2, r4
 8006e1c:	462b      	mov	r3, r5
 8006e1e:	1891      	adds	r1, r2, r2
 8006e20:	6639      	str	r1, [r7, #96]	@ 0x60
 8006e22:	415b      	adcs	r3, r3
 8006e24:	667b      	str	r3, [r7, #100]	@ 0x64
 8006e26:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8006e2a:	4621      	mov	r1, r4
 8006e2c:	eb12 0801 	adds.w	r8, r2, r1
 8006e30:	4629      	mov	r1, r5
 8006e32:	eb43 0901 	adc.w	r9, r3, r1
 8006e36:	f04f 0200 	mov.w	r2, #0
 8006e3a:	f04f 0300 	mov.w	r3, #0
 8006e3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e4a:	4690      	mov	r8, r2
 8006e4c:	4699      	mov	r9, r3
 8006e4e:	4623      	mov	r3, r4
 8006e50:	eb18 0303 	adds.w	r3, r8, r3
 8006e54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006e58:	462b      	mov	r3, r5
 8006e5a:	eb49 0303 	adc.w	r3, r9, r3
 8006e5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006e62:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006e66:	2200      	movs	r2, #0
 8006e68:	469a      	mov	sl, r3
 8006e6a:	4693      	mov	fp, r2
 8006e6c:	eb1a 030a 	adds.w	r3, sl, sl
 8006e70:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006e72:	eb4b 030b 	adc.w	r3, fp, fp
 8006e76:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e78:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006e7c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006e80:	f7f9 ff02 	bl	8000c88 <__aeabi_uldivmod>
 8006e84:	4602      	mov	r2, r0
 8006e86:	460b      	mov	r3, r1
 8006e88:	4b64      	ldr	r3, [pc, #400]	@ (800701c <LL_USART_SetBaudRate+0x238>)
 8006e8a:	fba3 2302 	umull	r2, r3, r3, r2
 8006e8e:	095b      	lsrs	r3, r3, #5
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	011b      	lsls	r3, r3, #4
 8006e94:	b29c      	uxth	r4, r3
 8006e96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006ea0:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006ea4:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8006ea8:	4642      	mov	r2, r8
 8006eaa:	464b      	mov	r3, r9
 8006eac:	1891      	adds	r1, r2, r2
 8006eae:	6539      	str	r1, [r7, #80]	@ 0x50
 8006eb0:	415b      	adcs	r3, r3
 8006eb2:	657b      	str	r3, [r7, #84]	@ 0x54
 8006eb4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006eb8:	4641      	mov	r1, r8
 8006eba:	1851      	adds	r1, r2, r1
 8006ebc:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006ebe:	4649      	mov	r1, r9
 8006ec0:	414b      	adcs	r3, r1
 8006ec2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ec4:	f04f 0200 	mov.w	r2, #0
 8006ec8:	f04f 0300 	mov.w	r3, #0
 8006ecc:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8006ed0:	4659      	mov	r1, fp
 8006ed2:	00cb      	lsls	r3, r1, #3
 8006ed4:	4651      	mov	r1, sl
 8006ed6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006eda:	4651      	mov	r1, sl
 8006edc:	00ca      	lsls	r2, r1, #3
 8006ede:	4610      	mov	r0, r2
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	4642      	mov	r2, r8
 8006ee6:	189b      	adds	r3, r3, r2
 8006ee8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006eec:	464b      	mov	r3, r9
 8006eee:	460a      	mov	r2, r1
 8006ef0:	eb42 0303 	adc.w	r3, r2, r3
 8006ef4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006ef8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006efc:	2200      	movs	r2, #0
 8006efe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006f02:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8006f06:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	18db      	adds	r3, r3, r3
 8006f0e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f10:	4613      	mov	r3, r2
 8006f12:	eb42 0303 	adc.w	r3, r2, r3
 8006f16:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f18:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006f1c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8006f20:	f7f9 feb2 	bl	8000c88 <__aeabi_uldivmod>
 8006f24:	4602      	mov	r2, r0
 8006f26:	460b      	mov	r3, r1
 8006f28:	4611      	mov	r1, r2
 8006f2a:	4b3c      	ldr	r3, [pc, #240]	@ (800701c <LL_USART_SetBaudRate+0x238>)
 8006f2c:	fba3 2301 	umull	r2, r3, r3, r1
 8006f30:	095b      	lsrs	r3, r3, #5
 8006f32:	2264      	movs	r2, #100	@ 0x64
 8006f34:	fb02 f303 	mul.w	r3, r2, r3
 8006f38:	1acb      	subs	r3, r1, r3
 8006f3a:	00db      	lsls	r3, r3, #3
 8006f3c:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006f40:	4b36      	ldr	r3, [pc, #216]	@ (800701c <LL_USART_SetBaudRate+0x238>)
 8006f42:	fba3 2302 	umull	r2, r3, r3, r2
 8006f46:	095b      	lsrs	r3, r3, #5
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	005b      	lsls	r3, r3, #1
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	4423      	add	r3, r4
 8006f56:	b29c      	uxth	r4, r3
 8006f58:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006f62:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006f66:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 8006f6a:	4642      	mov	r2, r8
 8006f6c:	464b      	mov	r3, r9
 8006f6e:	1891      	adds	r1, r2, r2
 8006f70:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006f72:	415b      	adcs	r3, r3
 8006f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f76:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006f7a:	4641      	mov	r1, r8
 8006f7c:	1851      	adds	r1, r2, r1
 8006f7e:	6339      	str	r1, [r7, #48]	@ 0x30
 8006f80:	4649      	mov	r1, r9
 8006f82:	414b      	adcs	r3, r1
 8006f84:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f86:	f04f 0200 	mov.w	r2, #0
 8006f8a:	f04f 0300 	mov.w	r3, #0
 8006f8e:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006f92:	4659      	mov	r1, fp
 8006f94:	00cb      	lsls	r3, r1, #3
 8006f96:	4651      	mov	r1, sl
 8006f98:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f9c:	4651      	mov	r1, sl
 8006f9e:	00ca      	lsls	r2, r1, #3
 8006fa0:	4610      	mov	r0, r2
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	4642      	mov	r2, r8
 8006fa8:	189b      	adds	r3, r3, r2
 8006faa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006fae:	464b      	mov	r3, r9
 8006fb0:	460a      	mov	r2, r1
 8006fb2:	eb42 0303 	adc.w	r3, r2, r3
 8006fb6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006fba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006fc4:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8006fc8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006fcc:	460b      	mov	r3, r1
 8006fce:	18db      	adds	r3, r3, r3
 8006fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006fd2:	4613      	mov	r3, r2
 8006fd4:	eb42 0303 	adc.w	r3, r2, r3
 8006fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006fda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006fde:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8006fe2:	f7f9 fe51 	bl	8000c88 <__aeabi_uldivmod>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	460b      	mov	r3, r1
 8006fea:	4b0c      	ldr	r3, [pc, #48]	@ (800701c <LL_USART_SetBaudRate+0x238>)
 8006fec:	fba3 1302 	umull	r1, r3, r3, r2
 8006ff0:	095b      	lsrs	r3, r3, #5
 8006ff2:	2164      	movs	r1, #100	@ 0x64
 8006ff4:	fb01 f303 	mul.w	r3, r1, r3
 8006ff8:	1ad3      	subs	r3, r2, r3
 8006ffa:	00db      	lsls	r3, r3, #3
 8006ffc:	3332      	adds	r3, #50	@ 0x32
 8006ffe:	4a07      	ldr	r2, [pc, #28]	@ (800701c <LL_USART_SetBaudRate+0x238>)
 8007000:	fba2 2303 	umull	r2, r3, r2, r3
 8007004:	095b      	lsrs	r3, r3, #5
 8007006:	b29b      	uxth	r3, r3
 8007008:	f003 0307 	and.w	r3, r3, #7
 800700c:	b29b      	uxth	r3, r3
 800700e:	4423      	add	r3, r4
 8007010:	b29b      	uxth	r3, r3
 8007012:	461a      	mov	r2, r3
 8007014:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007018:	609a      	str	r2, [r3, #8]
}
 800701a:	e108      	b.n	800722e <LL_USART_SetBaudRate+0x44a>
 800701c:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8007020:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007024:	2200      	movs	r2, #0
 8007026:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800702a:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800702e:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8007032:	4642      	mov	r2, r8
 8007034:	464b      	mov	r3, r9
 8007036:	1891      	adds	r1, r2, r2
 8007038:	6239      	str	r1, [r7, #32]
 800703a:	415b      	adcs	r3, r3
 800703c:	627b      	str	r3, [r7, #36]	@ 0x24
 800703e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007042:	4641      	mov	r1, r8
 8007044:	1854      	adds	r4, r2, r1
 8007046:	4649      	mov	r1, r9
 8007048:	eb43 0501 	adc.w	r5, r3, r1
 800704c:	f04f 0200 	mov.w	r2, #0
 8007050:	f04f 0300 	mov.w	r3, #0
 8007054:	00eb      	lsls	r3, r5, #3
 8007056:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800705a:	00e2      	lsls	r2, r4, #3
 800705c:	4614      	mov	r4, r2
 800705e:	461d      	mov	r5, r3
 8007060:	4643      	mov	r3, r8
 8007062:	18e3      	adds	r3, r4, r3
 8007064:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007068:	464b      	mov	r3, r9
 800706a:	eb45 0303 	adc.w	r3, r5, r3
 800706e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007072:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007076:	2200      	movs	r2, #0
 8007078:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800707c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8007080:	f04f 0200 	mov.w	r2, #0
 8007084:	f04f 0300 	mov.w	r3, #0
 8007088:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 800708c:	4629      	mov	r1, r5
 800708e:	008b      	lsls	r3, r1, #2
 8007090:	4621      	mov	r1, r4
 8007092:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007096:	4621      	mov	r1, r4
 8007098:	008a      	lsls	r2, r1, #2
 800709a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800709e:	f7f9 fdf3 	bl	8000c88 <__aeabi_uldivmod>
 80070a2:	4602      	mov	r2, r0
 80070a4:	460b      	mov	r3, r1
 80070a6:	4b65      	ldr	r3, [pc, #404]	@ (800723c <LL_USART_SetBaudRate+0x458>)
 80070a8:	fba3 2302 	umull	r2, r3, r3, r2
 80070ac:	095b      	lsrs	r3, r3, #5
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	011b      	lsls	r3, r3, #4
 80070b2:	b29c      	uxth	r4, r3
 80070b4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80070b8:	2200      	movs	r2, #0
 80070ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80070be:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80070c2:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 80070c6:	4642      	mov	r2, r8
 80070c8:	464b      	mov	r3, r9
 80070ca:	1891      	adds	r1, r2, r2
 80070cc:	61b9      	str	r1, [r7, #24]
 80070ce:	415b      	adcs	r3, r3
 80070d0:	61fb      	str	r3, [r7, #28]
 80070d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80070d6:	4641      	mov	r1, r8
 80070d8:	1851      	adds	r1, r2, r1
 80070da:	6139      	str	r1, [r7, #16]
 80070dc:	4649      	mov	r1, r9
 80070de:	414b      	adcs	r3, r1
 80070e0:	617b      	str	r3, [r7, #20]
 80070e2:	f04f 0200 	mov.w	r2, #0
 80070e6:	f04f 0300 	mov.w	r3, #0
 80070ea:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80070ee:	4659      	mov	r1, fp
 80070f0:	00cb      	lsls	r3, r1, #3
 80070f2:	4651      	mov	r1, sl
 80070f4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070f8:	4651      	mov	r1, sl
 80070fa:	00ca      	lsls	r2, r1, #3
 80070fc:	4610      	mov	r0, r2
 80070fe:	4619      	mov	r1, r3
 8007100:	4603      	mov	r3, r0
 8007102:	4642      	mov	r2, r8
 8007104:	189b      	adds	r3, r3, r2
 8007106:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800710a:	464b      	mov	r3, r9
 800710c:	460a      	mov	r2, r1
 800710e:	eb42 0303 	adc.w	r3, r2, r3
 8007112:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007116:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800711a:	2200      	movs	r2, #0
 800711c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007120:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8007124:	f04f 0200 	mov.w	r2, #0
 8007128:	f04f 0300 	mov.w	r3, #0
 800712c:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8007130:	4649      	mov	r1, r9
 8007132:	008b      	lsls	r3, r1, #2
 8007134:	4641      	mov	r1, r8
 8007136:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800713a:	4641      	mov	r1, r8
 800713c:	008a      	lsls	r2, r1, #2
 800713e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8007142:	f7f9 fda1 	bl	8000c88 <__aeabi_uldivmod>
 8007146:	4602      	mov	r2, r0
 8007148:	460b      	mov	r3, r1
 800714a:	4611      	mov	r1, r2
 800714c:	4b3b      	ldr	r3, [pc, #236]	@ (800723c <LL_USART_SetBaudRate+0x458>)
 800714e:	fba3 2301 	umull	r2, r3, r3, r1
 8007152:	095b      	lsrs	r3, r3, #5
 8007154:	2264      	movs	r2, #100	@ 0x64
 8007156:	fb02 f303 	mul.w	r3, r2, r3
 800715a:	1acb      	subs	r3, r1, r3
 800715c:	011b      	lsls	r3, r3, #4
 800715e:	3332      	adds	r3, #50	@ 0x32
 8007160:	4a36      	ldr	r2, [pc, #216]	@ (800723c <LL_USART_SetBaudRate+0x458>)
 8007162:	fba2 2303 	umull	r2, r3, r2, r3
 8007166:	095b      	lsrs	r3, r3, #5
 8007168:	b29b      	uxth	r3, r3
 800716a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800716e:	b29b      	uxth	r3, r3
 8007170:	4423      	add	r3, r4
 8007172:	b29c      	uxth	r4, r3
 8007174:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007178:	2200      	movs	r2, #0
 800717a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800717c:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800717e:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007182:	4642      	mov	r2, r8
 8007184:	464b      	mov	r3, r9
 8007186:	1891      	adds	r1, r2, r2
 8007188:	60b9      	str	r1, [r7, #8]
 800718a:	415b      	adcs	r3, r3
 800718c:	60fb      	str	r3, [r7, #12]
 800718e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007192:	4641      	mov	r1, r8
 8007194:	1851      	adds	r1, r2, r1
 8007196:	6039      	str	r1, [r7, #0]
 8007198:	4649      	mov	r1, r9
 800719a:	414b      	adcs	r3, r1
 800719c:	607b      	str	r3, [r7, #4]
 800719e:	f04f 0200 	mov.w	r2, #0
 80071a2:	f04f 0300 	mov.w	r3, #0
 80071a6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80071aa:	4659      	mov	r1, fp
 80071ac:	00cb      	lsls	r3, r1, #3
 80071ae:	4651      	mov	r1, sl
 80071b0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071b4:	4651      	mov	r1, sl
 80071b6:	00ca      	lsls	r2, r1, #3
 80071b8:	4610      	mov	r0, r2
 80071ba:	4619      	mov	r1, r3
 80071bc:	4603      	mov	r3, r0
 80071be:	4642      	mov	r2, r8
 80071c0:	189b      	adds	r3, r3, r2
 80071c2:	673b      	str	r3, [r7, #112]	@ 0x70
 80071c4:	464b      	mov	r3, r9
 80071c6:	460a      	mov	r2, r1
 80071c8:	eb42 0303 	adc.w	r3, r2, r3
 80071cc:	677b      	str	r3, [r7, #116]	@ 0x74
 80071ce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80071d2:	2200      	movs	r2, #0
 80071d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80071d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80071d8:	f04f 0200 	mov.w	r2, #0
 80071dc:	f04f 0300 	mov.w	r3, #0
 80071e0:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 80071e4:	4649      	mov	r1, r9
 80071e6:	008b      	lsls	r3, r1, #2
 80071e8:	4641      	mov	r1, r8
 80071ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071ee:	4641      	mov	r1, r8
 80071f0:	008a      	lsls	r2, r1, #2
 80071f2:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80071f6:	f7f9 fd47 	bl	8000c88 <__aeabi_uldivmod>
 80071fa:	4602      	mov	r2, r0
 80071fc:	460b      	mov	r3, r1
 80071fe:	4b0f      	ldr	r3, [pc, #60]	@ (800723c <LL_USART_SetBaudRate+0x458>)
 8007200:	fba3 1302 	umull	r1, r3, r3, r2
 8007204:	095b      	lsrs	r3, r3, #5
 8007206:	2164      	movs	r1, #100	@ 0x64
 8007208:	fb01 f303 	mul.w	r3, r1, r3
 800720c:	1ad3      	subs	r3, r2, r3
 800720e:	011b      	lsls	r3, r3, #4
 8007210:	3332      	adds	r3, #50	@ 0x32
 8007212:	4a0a      	ldr	r2, [pc, #40]	@ (800723c <LL_USART_SetBaudRate+0x458>)
 8007214:	fba2 2303 	umull	r2, r3, r2, r3
 8007218:	095b      	lsrs	r3, r3, #5
 800721a:	b29b      	uxth	r3, r3
 800721c:	f003 030f 	and.w	r3, r3, #15
 8007220:	b29b      	uxth	r3, r3
 8007222:	4423      	add	r3, r4
 8007224:	b29b      	uxth	r3, r3
 8007226:	461a      	mov	r2, r3
 8007228:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800722c:	609a      	str	r2, [r3, #8]
}
 800722e:	bf00      	nop
 8007230:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007234:	46bd      	mov	sp, r7
 8007236:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800723a:	bf00      	nop
 800723c:	51eb851f 	.word	0x51eb851f

08007240 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b088      	sub	sp, #32
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800724e:	2300      	movs	r3, #0
 8007250:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f7ff fd8c 	bl	8006d70 <LL_USART_IsEnabled>
 8007258:	4603      	mov	r3, r0
 800725a:	2b00      	cmp	r3, #0
 800725c:	d15e      	bne.n	800731c <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8007266:	f023 030c 	bic.w	r3, r3, #12
 800726a:	683a      	ldr	r2, [r7, #0]
 800726c:	6851      	ldr	r1, [r2, #4]
 800726e:	683a      	ldr	r2, [r7, #0]
 8007270:	68d2      	ldr	r2, [r2, #12]
 8007272:	4311      	orrs	r1, r2
 8007274:	683a      	ldr	r2, [r7, #0]
 8007276:	6912      	ldr	r2, [r2, #16]
 8007278:	4311      	orrs	r1, r2
 800727a:	683a      	ldr	r2, [r7, #0]
 800727c:	6992      	ldr	r2, [r2, #24]
 800727e:	430a      	orrs	r2, r1
 8007280:	431a      	orrs	r2, r3
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	4619      	mov	r1, r3
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f7ff fd83 	bl	8006d98 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	695b      	ldr	r3, [r3, #20]
 8007296:	4619      	mov	r1, r3
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f7ff fd90 	bl	8006dbe <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800729e:	f107 0308 	add.w	r3, r7, #8
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7ff fc9a 	bl	8006bdc <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4a1f      	ldr	r2, [pc, #124]	@ (8007328 <LL_USART_Init+0xe8>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d102      	bne.n	80072b6 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	61bb      	str	r3, [r7, #24]
 80072b4:	e021      	b.n	80072fa <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	4a1c      	ldr	r2, [pc, #112]	@ (800732c <LL_USART_Init+0xec>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d102      	bne.n	80072c4 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80072be:	693b      	ldr	r3, [r7, #16]
 80072c0:	61bb      	str	r3, [r7, #24]
 80072c2:	e01a      	b.n	80072fa <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	4a1a      	ldr	r2, [pc, #104]	@ (8007330 <LL_USART_Init+0xf0>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d102      	bne.n	80072d2 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	61bb      	str	r3, [r7, #24]
 80072d0:	e013      	b.n	80072fa <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4a17      	ldr	r2, [pc, #92]	@ (8007334 <LL_USART_Init+0xf4>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d102      	bne.n	80072e0 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	61bb      	str	r3, [r7, #24]
 80072de:	e00c      	b.n	80072fa <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	4a15      	ldr	r2, [pc, #84]	@ (8007338 <LL_USART_Init+0xf8>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d102      	bne.n	80072ee <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	61bb      	str	r3, [r7, #24]
 80072ec:	e005      	b.n	80072fa <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	4a12      	ldr	r2, [pc, #72]	@ (800733c <LL_USART_Init+0xfc>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d101      	bne.n	80072fa <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d00d      	beq.n	800731c <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d009      	beq.n	800731c <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8007308:	2300      	movs	r3, #0
 800730a:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	699a      	ldr	r2, [r3, #24]
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	69b9      	ldr	r1, [r7, #24]
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f7ff fd64 	bl	8006de4 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800731c:	7ffb      	ldrb	r3, [r7, #31]
}
 800731e:	4618      	mov	r0, r3
 8007320:	3720      	adds	r7, #32
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	40011000 	.word	0x40011000
 800732c:	40004400 	.word	0x40004400
 8007330:	40004800 	.word	0x40004800
 8007334:	40011400 	.word	0x40011400
 8007338:	40004c00 	.word	0x40004c00
 800733c:	40005000 	.word	0x40005000

08007340 <__NVIC_SetPriority>:
{
 8007340:	b480      	push	{r7}
 8007342:	b083      	sub	sp, #12
 8007344:	af00      	add	r7, sp, #0
 8007346:	4603      	mov	r3, r0
 8007348:	6039      	str	r1, [r7, #0]
 800734a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800734c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007350:	2b00      	cmp	r3, #0
 8007352:	db0a      	blt.n	800736a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	b2da      	uxtb	r2, r3
 8007358:	490c      	ldr	r1, [pc, #48]	@ (800738c <__NVIC_SetPriority+0x4c>)
 800735a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800735e:	0112      	lsls	r2, r2, #4
 8007360:	b2d2      	uxtb	r2, r2
 8007362:	440b      	add	r3, r1
 8007364:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007368:	e00a      	b.n	8007380 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	b2da      	uxtb	r2, r3
 800736e:	4908      	ldr	r1, [pc, #32]	@ (8007390 <__NVIC_SetPriority+0x50>)
 8007370:	79fb      	ldrb	r3, [r7, #7]
 8007372:	f003 030f 	and.w	r3, r3, #15
 8007376:	3b04      	subs	r3, #4
 8007378:	0112      	lsls	r2, r2, #4
 800737a:	b2d2      	uxtb	r2, r2
 800737c:	440b      	add	r3, r1
 800737e:	761a      	strb	r2, [r3, #24]
}
 8007380:	bf00      	nop
 8007382:	370c      	adds	r7, #12
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr
 800738c:	e000e100 	.word	0xe000e100
 8007390:	e000ed00 	.word	0xe000ed00

08007394 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007394:	b580      	push	{r7, lr}
 8007396:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007398:	4b05      	ldr	r3, [pc, #20]	@ (80073b0 <SysTick_Handler+0x1c>)
 800739a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800739c:	f001 ffde 	bl	800935c <xTaskGetSchedulerState>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d001      	beq.n	80073aa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80073a6:	f002 fed7 	bl	800a158 <xPortSysTickHandler>
  }
}
 80073aa:	bf00      	nop
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop
 80073b0:	e000e010 	.word	0xe000e010

080073b4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80073b4:	b580      	push	{r7, lr}
 80073b6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80073b8:	2100      	movs	r1, #0
 80073ba:	f06f 0004 	mvn.w	r0, #4
 80073be:	f7ff ffbf 	bl	8007340 <__NVIC_SetPriority>
#endif
}
 80073c2:	bf00      	nop
 80073c4:	bd80      	pop	{r7, pc}
	...

080073c8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80073c8:	b480      	push	{r7}
 80073ca:	b083      	sub	sp, #12
 80073cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073ce:	f3ef 8305 	mrs	r3, IPSR
 80073d2:	603b      	str	r3, [r7, #0]
  return(result);
 80073d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d003      	beq.n	80073e2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80073da:	f06f 0305 	mvn.w	r3, #5
 80073de:	607b      	str	r3, [r7, #4]
 80073e0:	e00c      	b.n	80073fc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80073e2:	4b0a      	ldr	r3, [pc, #40]	@ (800740c <osKernelInitialize+0x44>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d105      	bne.n	80073f6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80073ea:	4b08      	ldr	r3, [pc, #32]	@ (800740c <osKernelInitialize+0x44>)
 80073ec:	2201      	movs	r2, #1
 80073ee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80073f0:	2300      	movs	r3, #0
 80073f2:	607b      	str	r3, [r7, #4]
 80073f4:	e002      	b.n	80073fc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80073f6:	f04f 33ff 	mov.w	r3, #4294967295
 80073fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80073fc:	687b      	ldr	r3, [r7, #4]
}
 80073fe:	4618      	mov	r0, r3
 8007400:	370c      	adds	r7, #12
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr
 800740a:	bf00      	nop
 800740c:	20000430 	.word	0x20000430

08007410 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007410:	b580      	push	{r7, lr}
 8007412:	b082      	sub	sp, #8
 8007414:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007416:	f3ef 8305 	mrs	r3, IPSR
 800741a:	603b      	str	r3, [r7, #0]
  return(result);
 800741c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800741e:	2b00      	cmp	r3, #0
 8007420:	d003      	beq.n	800742a <osKernelStart+0x1a>
    stat = osErrorISR;
 8007422:	f06f 0305 	mvn.w	r3, #5
 8007426:	607b      	str	r3, [r7, #4]
 8007428:	e010      	b.n	800744c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800742a:	4b0b      	ldr	r3, [pc, #44]	@ (8007458 <osKernelStart+0x48>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	2b01      	cmp	r3, #1
 8007430:	d109      	bne.n	8007446 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007432:	f7ff ffbf 	bl	80073b4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007436:	4b08      	ldr	r3, [pc, #32]	@ (8007458 <osKernelStart+0x48>)
 8007438:	2202      	movs	r2, #2
 800743a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800743c:	f001 fb18 	bl	8008a70 <vTaskStartScheduler>
      stat = osOK;
 8007440:	2300      	movs	r3, #0
 8007442:	607b      	str	r3, [r7, #4]
 8007444:	e002      	b.n	800744c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007446:	f04f 33ff 	mov.w	r3, #4294967295
 800744a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800744c:	687b      	ldr	r3, [r7, #4]
}
 800744e:	4618      	mov	r0, r3
 8007450:	3708      	adds	r7, #8
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	20000430 	.word	0x20000430

0800745c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800745c:	b580      	push	{r7, lr}
 800745e:	b08e      	sub	sp, #56	@ 0x38
 8007460:	af04      	add	r7, sp, #16
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007468:	2300      	movs	r3, #0
 800746a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800746c:	f3ef 8305 	mrs	r3, IPSR
 8007470:	617b      	str	r3, [r7, #20]
  return(result);
 8007472:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007474:	2b00      	cmp	r3, #0
 8007476:	d17e      	bne.n	8007576 <osThreadNew+0x11a>
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d07b      	beq.n	8007576 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800747e:	2380      	movs	r3, #128	@ 0x80
 8007480:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007482:	2318      	movs	r3, #24
 8007484:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007486:	2300      	movs	r3, #0
 8007488:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800748a:	f04f 33ff 	mov.w	r3, #4294967295
 800748e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d045      	beq.n	8007522 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d002      	beq.n	80074a4 <osThreadNew+0x48>
        name = attr->name;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	699b      	ldr	r3, [r3, #24]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d002      	beq.n	80074b2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	699b      	ldr	r3, [r3, #24]
 80074b0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d008      	beq.n	80074ca <osThreadNew+0x6e>
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	2b38      	cmp	r3, #56	@ 0x38
 80074bc:	d805      	bhi.n	80074ca <osThreadNew+0x6e>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	f003 0301 	and.w	r3, r3, #1
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d001      	beq.n	80074ce <osThreadNew+0x72>
        return (NULL);
 80074ca:	2300      	movs	r3, #0
 80074cc:	e054      	b.n	8007578 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	695b      	ldr	r3, [r3, #20]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d003      	beq.n	80074de <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	695b      	ldr	r3, [r3, #20]
 80074da:	089b      	lsrs	r3, r3, #2
 80074dc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d00e      	beq.n	8007504 <osThreadNew+0xa8>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	2ba7      	cmp	r3, #167	@ 0xa7
 80074ec:	d90a      	bls.n	8007504 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d006      	beq.n	8007504 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	695b      	ldr	r3, [r3, #20]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d002      	beq.n	8007504 <osThreadNew+0xa8>
        mem = 1;
 80074fe:	2301      	movs	r3, #1
 8007500:	61bb      	str	r3, [r7, #24]
 8007502:	e010      	b.n	8007526 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d10c      	bne.n	8007526 <osThreadNew+0xca>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d108      	bne.n	8007526 <osThreadNew+0xca>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	691b      	ldr	r3, [r3, #16]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d104      	bne.n	8007526 <osThreadNew+0xca>
          mem = 0;
 800751c:	2300      	movs	r3, #0
 800751e:	61bb      	str	r3, [r7, #24]
 8007520:	e001      	b.n	8007526 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007522:	2300      	movs	r3, #0
 8007524:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	2b01      	cmp	r3, #1
 800752a:	d110      	bne.n	800754e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007534:	9202      	str	r2, [sp, #8]
 8007536:	9301      	str	r3, [sp, #4]
 8007538:	69fb      	ldr	r3, [r7, #28]
 800753a:	9300      	str	r3, [sp, #0]
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	6a3a      	ldr	r2, [r7, #32]
 8007540:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007542:	68f8      	ldr	r0, [r7, #12]
 8007544:	f001 f8a0 	bl	8008688 <xTaskCreateStatic>
 8007548:	4603      	mov	r3, r0
 800754a:	613b      	str	r3, [r7, #16]
 800754c:	e013      	b.n	8007576 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800754e:	69bb      	ldr	r3, [r7, #24]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d110      	bne.n	8007576 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007554:	6a3b      	ldr	r3, [r7, #32]
 8007556:	b29a      	uxth	r2, r3
 8007558:	f107 0310 	add.w	r3, r7, #16
 800755c:	9301      	str	r3, [sp, #4]
 800755e:	69fb      	ldr	r3, [r7, #28]
 8007560:	9300      	str	r3, [sp, #0]
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007566:	68f8      	ldr	r0, [r7, #12]
 8007568:	f001 f8ee 	bl	8008748 <xTaskCreate>
 800756c:	4603      	mov	r3, r0
 800756e:	2b01      	cmp	r3, #1
 8007570:	d001      	beq.n	8007576 <osThreadNew+0x11a>
            hTask = NULL;
 8007572:	2300      	movs	r3, #0
 8007574:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007576:	693b      	ldr	r3, [r7, #16]
}
 8007578:	4618      	mov	r0, r3
 800757a:	3728      	adds	r7, #40	@ 0x28
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007580:	b580      	push	{r7, lr}
 8007582:	b084      	sub	sp, #16
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007588:	f3ef 8305 	mrs	r3, IPSR
 800758c:	60bb      	str	r3, [r7, #8]
  return(result);
 800758e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007590:	2b00      	cmp	r3, #0
 8007592:	d003      	beq.n	800759c <osDelay+0x1c>
    stat = osErrorISR;
 8007594:	f06f 0305 	mvn.w	r3, #5
 8007598:	60fb      	str	r3, [r7, #12]
 800759a:	e007      	b.n	80075ac <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800759c:	2300      	movs	r3, #0
 800759e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d002      	beq.n	80075ac <osDelay+0x2c>
      vTaskDelay(ticks);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f001 fa2c 	bl	8008a04 <vTaskDelay>
    }
  }

  return (stat);
 80075ac:	68fb      	ldr	r3, [r7, #12]
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3710      	adds	r7, #16
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
	...

080075b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80075b8:	b480      	push	{r7}
 80075ba:	b085      	sub	sp, #20
 80075bc:	af00      	add	r7, sp, #0
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	4a07      	ldr	r2, [pc, #28]	@ (80075e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80075c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	4a06      	ldr	r2, [pc, #24]	@ (80075e8 <vApplicationGetIdleTaskMemory+0x30>)
 80075ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2280      	movs	r2, #128	@ 0x80
 80075d4:	601a      	str	r2, [r3, #0]
}
 80075d6:	bf00      	nop
 80075d8:	3714      	adds	r7, #20
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop
 80075e4:	20000434 	.word	0x20000434
 80075e8:	200004dc 	.word	0x200004dc

080075ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80075ec:	b480      	push	{r7}
 80075ee:	b085      	sub	sp, #20
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	60f8      	str	r0, [r7, #12]
 80075f4:	60b9      	str	r1, [r7, #8]
 80075f6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	4a07      	ldr	r2, [pc, #28]	@ (8007618 <vApplicationGetTimerTaskMemory+0x2c>)
 80075fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	4a06      	ldr	r2, [pc, #24]	@ (800761c <vApplicationGetTimerTaskMemory+0x30>)
 8007602:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800760a:	601a      	str	r2, [r3, #0]
}
 800760c:	bf00      	nop
 800760e:	3714      	adds	r7, #20
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr
 8007618:	200006dc 	.word	0x200006dc
 800761c:	20000784 	.word	0x20000784

08007620 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007620:	b480      	push	{r7}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f103 0208 	add.w	r2, r3, #8
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f04f 32ff 	mov.w	r2, #4294967295
 8007638:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f103 0208 	add.w	r2, r3, #8
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f103 0208 	add.w	r2, r3, #8
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2200      	movs	r2, #0
 8007652:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007654:	bf00      	nop
 8007656:	370c      	adds	r7, #12
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007660:	b480      	push	{r7}
 8007662:	b083      	sub	sp, #12
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800766e:	bf00      	nop
 8007670:	370c      	adds	r7, #12
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr

0800767a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800767a:	b480      	push	{r7}
 800767c:	b085      	sub	sp, #20
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
 8007682:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	68fa      	ldr	r2, [r7, #12]
 800768e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	689a      	ldr	r2, [r3, #8]
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	683a      	ldr	r2, [r7, #0]
 800769e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	683a      	ldr	r2, [r7, #0]
 80076a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	1c5a      	adds	r2, r3, #1
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	601a      	str	r2, [r3, #0]
}
 80076b6:	bf00      	nop
 80076b8:	3714      	adds	r7, #20
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr

080076c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80076c2:	b480      	push	{r7}
 80076c4:	b085      	sub	sp, #20
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
 80076ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076d8:	d103      	bne.n	80076e2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	691b      	ldr	r3, [r3, #16]
 80076de:	60fb      	str	r3, [r7, #12]
 80076e0:	e00c      	b.n	80076fc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	3308      	adds	r3, #8
 80076e6:	60fb      	str	r3, [r7, #12]
 80076e8:	e002      	b.n	80076f0 <vListInsert+0x2e>
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	60fb      	str	r3, [r7, #12]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	68ba      	ldr	r2, [r7, #8]
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d2f6      	bcs.n	80076ea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	685a      	ldr	r2, [r3, #4]
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	683a      	ldr	r2, [r7, #0]
 800770a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	68fa      	ldr	r2, [r7, #12]
 8007710:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	683a      	ldr	r2, [r7, #0]
 8007716:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	1c5a      	adds	r2, r3, #1
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	601a      	str	r2, [r3, #0]
}
 8007728:	bf00      	nop
 800772a:	3714      	adds	r7, #20
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007734:	b480      	push	{r7}
 8007736:	b085      	sub	sp, #20
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	691b      	ldr	r3, [r3, #16]
 8007740:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	6892      	ldr	r2, [r2, #8]
 800774a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	6852      	ldr	r2, [r2, #4]
 8007754:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	429a      	cmp	r2, r3
 800775e:	d103      	bne.n	8007768 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	689a      	ldr	r2, [r3, #8]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	1e5a      	subs	r2, r3, #1
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
}
 800777c:	4618      	mov	r0, r3
 800777e:	3714      	adds	r7, #20
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d10b      	bne.n	80077b4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800779c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077a0:	f383 8811 	msr	BASEPRI, r3
 80077a4:	f3bf 8f6f 	isb	sy
 80077a8:	f3bf 8f4f 	dsb	sy
 80077ac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80077ae:	bf00      	nop
 80077b0:	bf00      	nop
 80077b2:	e7fd      	b.n	80077b0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80077b4:	f002 fc40 	bl	800a038 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077c0:	68f9      	ldr	r1, [r7, #12]
 80077c2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80077c4:	fb01 f303 	mul.w	r3, r1, r3
 80077c8:	441a      	add	r2, r3
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2200      	movs	r2, #0
 80077d2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077e4:	3b01      	subs	r3, #1
 80077e6:	68f9      	ldr	r1, [r7, #12]
 80077e8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80077ea:	fb01 f303 	mul.w	r3, r1, r3
 80077ee:	441a      	add	r2, r3
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	22ff      	movs	r2, #255	@ 0xff
 80077f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	22ff      	movs	r2, #255	@ 0xff
 8007800:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d114      	bne.n	8007834 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	691b      	ldr	r3, [r3, #16]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d01a      	beq.n	8007848 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	3310      	adds	r3, #16
 8007816:	4618      	mov	r0, r3
 8007818:	f001 fbda 	bl	8008fd0 <xTaskRemoveFromEventList>
 800781c:	4603      	mov	r3, r0
 800781e:	2b00      	cmp	r3, #0
 8007820:	d012      	beq.n	8007848 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007822:	4b0d      	ldr	r3, [pc, #52]	@ (8007858 <xQueueGenericReset+0xd0>)
 8007824:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007828:	601a      	str	r2, [r3, #0]
 800782a:	f3bf 8f4f 	dsb	sy
 800782e:	f3bf 8f6f 	isb	sy
 8007832:	e009      	b.n	8007848 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	3310      	adds	r3, #16
 8007838:	4618      	mov	r0, r3
 800783a:	f7ff fef1 	bl	8007620 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	3324      	adds	r3, #36	@ 0x24
 8007842:	4618      	mov	r0, r3
 8007844:	f7ff feec 	bl	8007620 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007848:	f002 fc28 	bl	800a09c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800784c:	2301      	movs	r3, #1
}
 800784e:	4618      	mov	r0, r3
 8007850:	3710      	adds	r7, #16
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	e000ed04 	.word	0xe000ed04

0800785c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800785c:	b580      	push	{r7, lr}
 800785e:	b08e      	sub	sp, #56	@ 0x38
 8007860:	af02      	add	r7, sp, #8
 8007862:	60f8      	str	r0, [r7, #12]
 8007864:	60b9      	str	r1, [r7, #8]
 8007866:	607a      	str	r2, [r7, #4]
 8007868:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d10b      	bne.n	8007888 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007874:	f383 8811 	msr	BASEPRI, r3
 8007878:	f3bf 8f6f 	isb	sy
 800787c:	f3bf 8f4f 	dsb	sy
 8007880:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007882:	bf00      	nop
 8007884:	bf00      	nop
 8007886:	e7fd      	b.n	8007884 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d10b      	bne.n	80078a6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800788e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007892:	f383 8811 	msr	BASEPRI, r3
 8007896:	f3bf 8f6f 	isb	sy
 800789a:	f3bf 8f4f 	dsb	sy
 800789e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80078a0:	bf00      	nop
 80078a2:	bf00      	nop
 80078a4:	e7fd      	b.n	80078a2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d002      	beq.n	80078b2 <xQueueGenericCreateStatic+0x56>
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d001      	beq.n	80078b6 <xQueueGenericCreateStatic+0x5a>
 80078b2:	2301      	movs	r3, #1
 80078b4:	e000      	b.n	80078b8 <xQueueGenericCreateStatic+0x5c>
 80078b6:	2300      	movs	r3, #0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d10b      	bne.n	80078d4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80078bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078c0:	f383 8811 	msr	BASEPRI, r3
 80078c4:	f3bf 8f6f 	isb	sy
 80078c8:	f3bf 8f4f 	dsb	sy
 80078cc:	623b      	str	r3, [r7, #32]
}
 80078ce:	bf00      	nop
 80078d0:	bf00      	nop
 80078d2:	e7fd      	b.n	80078d0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d102      	bne.n	80078e0 <xQueueGenericCreateStatic+0x84>
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d101      	bne.n	80078e4 <xQueueGenericCreateStatic+0x88>
 80078e0:	2301      	movs	r3, #1
 80078e2:	e000      	b.n	80078e6 <xQueueGenericCreateStatic+0x8a>
 80078e4:	2300      	movs	r3, #0
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d10b      	bne.n	8007902 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80078ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078ee:	f383 8811 	msr	BASEPRI, r3
 80078f2:	f3bf 8f6f 	isb	sy
 80078f6:	f3bf 8f4f 	dsb	sy
 80078fa:	61fb      	str	r3, [r7, #28]
}
 80078fc:	bf00      	nop
 80078fe:	bf00      	nop
 8007900:	e7fd      	b.n	80078fe <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007902:	2350      	movs	r3, #80	@ 0x50
 8007904:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	2b50      	cmp	r3, #80	@ 0x50
 800790a:	d00b      	beq.n	8007924 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800790c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007910:	f383 8811 	msr	BASEPRI, r3
 8007914:	f3bf 8f6f 	isb	sy
 8007918:	f3bf 8f4f 	dsb	sy
 800791c:	61bb      	str	r3, [r7, #24]
}
 800791e:	bf00      	nop
 8007920:	bf00      	nop
 8007922:	e7fd      	b.n	8007920 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007924:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800792a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800792c:	2b00      	cmp	r3, #0
 800792e:	d00d      	beq.n	800794c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007932:	2201      	movs	r2, #1
 8007934:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007938:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800793c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800793e:	9300      	str	r3, [sp, #0]
 8007940:	4613      	mov	r3, r2
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	68b9      	ldr	r1, [r7, #8]
 8007946:	68f8      	ldr	r0, [r7, #12]
 8007948:	f000 f840 	bl	80079cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800794c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800794e:	4618      	mov	r0, r3
 8007950:	3730      	adds	r7, #48	@ 0x30
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007956:	b580      	push	{r7, lr}
 8007958:	b08a      	sub	sp, #40	@ 0x28
 800795a:	af02      	add	r7, sp, #8
 800795c:	60f8      	str	r0, [r7, #12]
 800795e:	60b9      	str	r1, [r7, #8]
 8007960:	4613      	mov	r3, r2
 8007962:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d10b      	bne.n	8007982 <xQueueGenericCreate+0x2c>
	__asm volatile
 800796a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800796e:	f383 8811 	msr	BASEPRI, r3
 8007972:	f3bf 8f6f 	isb	sy
 8007976:	f3bf 8f4f 	dsb	sy
 800797a:	613b      	str	r3, [r7, #16]
}
 800797c:	bf00      	nop
 800797e:	bf00      	nop
 8007980:	e7fd      	b.n	800797e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	68ba      	ldr	r2, [r7, #8]
 8007986:	fb02 f303 	mul.w	r3, r2, r3
 800798a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800798c:	69fb      	ldr	r3, [r7, #28]
 800798e:	3350      	adds	r3, #80	@ 0x50
 8007990:	4618      	mov	r0, r3
 8007992:	f002 fc73 	bl	800a27c <pvPortMalloc>
 8007996:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d011      	beq.n	80079c2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800799e:	69bb      	ldr	r3, [r7, #24]
 80079a0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	3350      	adds	r3, #80	@ 0x50
 80079a6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80079a8:	69bb      	ldr	r3, [r7, #24]
 80079aa:	2200      	movs	r2, #0
 80079ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80079b0:	79fa      	ldrb	r2, [r7, #7]
 80079b2:	69bb      	ldr	r3, [r7, #24]
 80079b4:	9300      	str	r3, [sp, #0]
 80079b6:	4613      	mov	r3, r2
 80079b8:	697a      	ldr	r2, [r7, #20]
 80079ba:	68b9      	ldr	r1, [r7, #8]
 80079bc:	68f8      	ldr	r0, [r7, #12]
 80079be:	f000 f805 	bl	80079cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80079c2:	69bb      	ldr	r3, [r7, #24]
	}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3720      	adds	r7, #32
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	607a      	str	r2, [r7, #4]
 80079d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d103      	bne.n	80079e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80079e0:	69bb      	ldr	r3, [r7, #24]
 80079e2:	69ba      	ldr	r2, [r7, #24]
 80079e4:	601a      	str	r2, [r3, #0]
 80079e6:	e002      	b.n	80079ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80079e8:	69bb      	ldr	r3, [r7, #24]
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80079ee:	69bb      	ldr	r3, [r7, #24]
 80079f0:	68fa      	ldr	r2, [r7, #12]
 80079f2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80079f4:	69bb      	ldr	r3, [r7, #24]
 80079f6:	68ba      	ldr	r2, [r7, #8]
 80079f8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80079fa:	2101      	movs	r1, #1
 80079fc:	69b8      	ldr	r0, [r7, #24]
 80079fe:	f7ff fec3 	bl	8007788 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007a02:	69bb      	ldr	r3, [r7, #24]
 8007a04:	78fa      	ldrb	r2, [r7, #3]
 8007a06:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007a0a:	bf00      	nop
 8007a0c:	3710      	adds	r7, #16
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b082      	sub	sp, #8
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d00e      	beq.n	8007a3e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2200      	movs	r2, #0
 8007a24:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007a32:	2300      	movs	r3, #0
 8007a34:	2200      	movs	r2, #0
 8007a36:	2100      	movs	r1, #0
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 f81d 	bl	8007a78 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007a3e:	bf00      	nop
 8007a40:	3708      	adds	r7, #8
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}

08007a46 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007a46:	b580      	push	{r7, lr}
 8007a48:	b086      	sub	sp, #24
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007a50:	2301      	movs	r3, #1
 8007a52:	617b      	str	r3, [r7, #20]
 8007a54:	2300      	movs	r3, #0
 8007a56:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007a58:	79fb      	ldrb	r3, [r7, #7]
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	6939      	ldr	r1, [r7, #16]
 8007a5e:	6978      	ldr	r0, [r7, #20]
 8007a60:	f7ff ff79 	bl	8007956 <xQueueGenericCreate>
 8007a64:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007a66:	68f8      	ldr	r0, [r7, #12]
 8007a68:	f7ff ffd3 	bl	8007a12 <prvInitialiseMutex>

		return xNewQueue;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
	}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3718      	adds	r7, #24
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
	...

08007a78 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b08e      	sub	sp, #56	@ 0x38
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	60b9      	str	r1, [r7, #8]
 8007a82:	607a      	str	r2, [r7, #4]
 8007a84:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007a86:	2300      	movs	r3, #0
 8007a88:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d10b      	bne.n	8007aac <xQueueGenericSend+0x34>
	__asm volatile
 8007a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a98:	f383 8811 	msr	BASEPRI, r3
 8007a9c:	f3bf 8f6f 	isb	sy
 8007aa0:	f3bf 8f4f 	dsb	sy
 8007aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007aa6:	bf00      	nop
 8007aa8:	bf00      	nop
 8007aaa:	e7fd      	b.n	8007aa8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d103      	bne.n	8007aba <xQueueGenericSend+0x42>
 8007ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d101      	bne.n	8007abe <xQueueGenericSend+0x46>
 8007aba:	2301      	movs	r3, #1
 8007abc:	e000      	b.n	8007ac0 <xQueueGenericSend+0x48>
 8007abe:	2300      	movs	r3, #0
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d10b      	bne.n	8007adc <xQueueGenericSend+0x64>
	__asm volatile
 8007ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ac8:	f383 8811 	msr	BASEPRI, r3
 8007acc:	f3bf 8f6f 	isb	sy
 8007ad0:	f3bf 8f4f 	dsb	sy
 8007ad4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007ad6:	bf00      	nop
 8007ad8:	bf00      	nop
 8007ada:	e7fd      	b.n	8007ad8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	2b02      	cmp	r3, #2
 8007ae0:	d103      	bne.n	8007aea <xQueueGenericSend+0x72>
 8007ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d101      	bne.n	8007aee <xQueueGenericSend+0x76>
 8007aea:	2301      	movs	r3, #1
 8007aec:	e000      	b.n	8007af0 <xQueueGenericSend+0x78>
 8007aee:	2300      	movs	r3, #0
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d10b      	bne.n	8007b0c <xQueueGenericSend+0x94>
	__asm volatile
 8007af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007af8:	f383 8811 	msr	BASEPRI, r3
 8007afc:	f3bf 8f6f 	isb	sy
 8007b00:	f3bf 8f4f 	dsb	sy
 8007b04:	623b      	str	r3, [r7, #32]
}
 8007b06:	bf00      	nop
 8007b08:	bf00      	nop
 8007b0a:	e7fd      	b.n	8007b08 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b0c:	f001 fc26 	bl	800935c <xTaskGetSchedulerState>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d102      	bne.n	8007b1c <xQueueGenericSend+0xa4>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d101      	bne.n	8007b20 <xQueueGenericSend+0xa8>
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	e000      	b.n	8007b22 <xQueueGenericSend+0xaa>
 8007b20:	2300      	movs	r3, #0
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d10b      	bne.n	8007b3e <xQueueGenericSend+0xc6>
	__asm volatile
 8007b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b2a:	f383 8811 	msr	BASEPRI, r3
 8007b2e:	f3bf 8f6f 	isb	sy
 8007b32:	f3bf 8f4f 	dsb	sy
 8007b36:	61fb      	str	r3, [r7, #28]
}
 8007b38:	bf00      	nop
 8007b3a:	bf00      	nop
 8007b3c:	e7fd      	b.n	8007b3a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007b3e:	f002 fa7b 	bl	800a038 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d302      	bcc.n	8007b54 <xQueueGenericSend+0xdc>
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	2b02      	cmp	r3, #2
 8007b52:	d129      	bne.n	8007ba8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007b54:	683a      	ldr	r2, [r7, #0]
 8007b56:	68b9      	ldr	r1, [r7, #8]
 8007b58:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007b5a:	f000 fbfc 	bl	8008356 <prvCopyDataToQueue>
 8007b5e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d010      	beq.n	8007b8a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b6a:	3324      	adds	r3, #36	@ 0x24
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f001 fa2f 	bl	8008fd0 <xTaskRemoveFromEventList>
 8007b72:	4603      	mov	r3, r0
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d013      	beq.n	8007ba0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007b78:	4b3f      	ldr	r3, [pc, #252]	@ (8007c78 <xQueueGenericSend+0x200>)
 8007b7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b7e:	601a      	str	r2, [r3, #0]
 8007b80:	f3bf 8f4f 	dsb	sy
 8007b84:	f3bf 8f6f 	isb	sy
 8007b88:	e00a      	b.n	8007ba0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007b8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d007      	beq.n	8007ba0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007b90:	4b39      	ldr	r3, [pc, #228]	@ (8007c78 <xQueueGenericSend+0x200>)
 8007b92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b96:	601a      	str	r2, [r3, #0]
 8007b98:	f3bf 8f4f 	dsb	sy
 8007b9c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007ba0:	f002 fa7c 	bl	800a09c <vPortExitCritical>
				return pdPASS;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	e063      	b.n	8007c70 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d103      	bne.n	8007bb6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007bae:	f002 fa75 	bl	800a09c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	e05c      	b.n	8007c70 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007bb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d106      	bne.n	8007bca <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007bbc:	f107 0314 	add.w	r3, r7, #20
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f001 fa69 	bl	8009098 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007bca:	f002 fa67 	bl	800a09c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007bce:	f000 ffbf 	bl	8008b50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007bd2:	f002 fa31 	bl	800a038 <vPortEnterCritical>
 8007bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bd8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007bdc:	b25b      	sxtb	r3, r3
 8007bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007be2:	d103      	bne.n	8007bec <xQueueGenericSend+0x174>
 8007be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007be6:	2200      	movs	r2, #0
 8007be8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007bf2:	b25b      	sxtb	r3, r3
 8007bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bf8:	d103      	bne.n	8007c02 <xQueueGenericSend+0x18a>
 8007bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007c02:	f002 fa4b 	bl	800a09c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c06:	1d3a      	adds	r2, r7, #4
 8007c08:	f107 0314 	add.w	r3, r7, #20
 8007c0c:	4611      	mov	r1, r2
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f001 fa58 	bl	80090c4 <xTaskCheckForTimeOut>
 8007c14:	4603      	mov	r3, r0
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d124      	bne.n	8007c64 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007c1a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007c1c:	f000 fc93 	bl	8008546 <prvIsQueueFull>
 8007c20:	4603      	mov	r3, r0
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d018      	beq.n	8007c58 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c28:	3310      	adds	r3, #16
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	4611      	mov	r1, r2
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f001 f97c 	bl	8008f2c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007c34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007c36:	f000 fc1e 	bl	8008476 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007c3a:	f000 ff97 	bl	8008b6c <xTaskResumeAll>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	f47f af7c 	bne.w	8007b3e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007c46:	4b0c      	ldr	r3, [pc, #48]	@ (8007c78 <xQueueGenericSend+0x200>)
 8007c48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c4c:	601a      	str	r2, [r3, #0]
 8007c4e:	f3bf 8f4f 	dsb	sy
 8007c52:	f3bf 8f6f 	isb	sy
 8007c56:	e772      	b.n	8007b3e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007c58:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007c5a:	f000 fc0c 	bl	8008476 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c5e:	f000 ff85 	bl	8008b6c <xTaskResumeAll>
 8007c62:	e76c      	b.n	8007b3e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007c64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007c66:	f000 fc06 	bl	8008476 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c6a:	f000 ff7f 	bl	8008b6c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007c6e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3738      	adds	r7, #56	@ 0x38
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}
 8007c78:	e000ed04 	.word	0xe000ed04

08007c7c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b090      	sub	sp, #64	@ 0x40
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	60b9      	str	r1, [r7, #8]
 8007c86:	607a      	str	r2, [r7, #4]
 8007c88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d10b      	bne.n	8007cac <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c98:	f383 8811 	msr	BASEPRI, r3
 8007c9c:	f3bf 8f6f 	isb	sy
 8007ca0:	f3bf 8f4f 	dsb	sy
 8007ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007ca6:	bf00      	nop
 8007ca8:	bf00      	nop
 8007caa:	e7fd      	b.n	8007ca8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d103      	bne.n	8007cba <xQueueGenericSendFromISR+0x3e>
 8007cb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d101      	bne.n	8007cbe <xQueueGenericSendFromISR+0x42>
 8007cba:	2301      	movs	r3, #1
 8007cbc:	e000      	b.n	8007cc0 <xQueueGenericSendFromISR+0x44>
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d10b      	bne.n	8007cdc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cc8:	f383 8811 	msr	BASEPRI, r3
 8007ccc:	f3bf 8f6f 	isb	sy
 8007cd0:	f3bf 8f4f 	dsb	sy
 8007cd4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007cd6:	bf00      	nop
 8007cd8:	bf00      	nop
 8007cda:	e7fd      	b.n	8007cd8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	2b02      	cmp	r3, #2
 8007ce0:	d103      	bne.n	8007cea <xQueueGenericSendFromISR+0x6e>
 8007ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ce4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d101      	bne.n	8007cee <xQueueGenericSendFromISR+0x72>
 8007cea:	2301      	movs	r3, #1
 8007cec:	e000      	b.n	8007cf0 <xQueueGenericSendFromISR+0x74>
 8007cee:	2300      	movs	r3, #0
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d10b      	bne.n	8007d0c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cf8:	f383 8811 	msr	BASEPRI, r3
 8007cfc:	f3bf 8f6f 	isb	sy
 8007d00:	f3bf 8f4f 	dsb	sy
 8007d04:	623b      	str	r3, [r7, #32]
}
 8007d06:	bf00      	nop
 8007d08:	bf00      	nop
 8007d0a:	e7fd      	b.n	8007d08 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007d0c:	f002 fa74 	bl	800a1f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007d10:	f3ef 8211 	mrs	r2, BASEPRI
 8007d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d18:	f383 8811 	msr	BASEPRI, r3
 8007d1c:	f3bf 8f6f 	isb	sy
 8007d20:	f3bf 8f4f 	dsb	sy
 8007d24:	61fa      	str	r2, [r7, #28]
 8007d26:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007d28:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007d2a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d302      	bcc.n	8007d3e <xQueueGenericSendFromISR+0xc2>
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	2b02      	cmp	r3, #2
 8007d3c:	d12f      	bne.n	8007d9e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d40:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007d44:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d4e:	683a      	ldr	r2, [r7, #0]
 8007d50:	68b9      	ldr	r1, [r7, #8]
 8007d52:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007d54:	f000 faff 	bl	8008356 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007d58:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d60:	d112      	bne.n	8007d88 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d016      	beq.n	8007d98 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d6c:	3324      	adds	r3, #36	@ 0x24
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f001 f92e 	bl	8008fd0 <xTaskRemoveFromEventList>
 8007d74:	4603      	mov	r3, r0
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d00e      	beq.n	8007d98 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d00b      	beq.n	8007d98 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2201      	movs	r2, #1
 8007d84:	601a      	str	r2, [r3, #0]
 8007d86:	e007      	b.n	8007d98 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007d88:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	b25a      	sxtb	r2, r3
 8007d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007d9c:	e001      	b.n	8007da2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007da2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007da4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007dac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007dae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3740      	adds	r7, #64	@ 0x40
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b08c      	sub	sp, #48	@ 0x30
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	60f8      	str	r0, [r7, #12]
 8007dc0:	60b9      	str	r1, [r7, #8]
 8007dc2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d10b      	bne.n	8007dea <xQueueReceive+0x32>
	__asm volatile
 8007dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dd6:	f383 8811 	msr	BASEPRI, r3
 8007dda:	f3bf 8f6f 	isb	sy
 8007dde:	f3bf 8f4f 	dsb	sy
 8007de2:	623b      	str	r3, [r7, #32]
}
 8007de4:	bf00      	nop
 8007de6:	bf00      	nop
 8007de8:	e7fd      	b.n	8007de6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d103      	bne.n	8007df8 <xQueueReceive+0x40>
 8007df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d101      	bne.n	8007dfc <xQueueReceive+0x44>
 8007df8:	2301      	movs	r3, #1
 8007dfa:	e000      	b.n	8007dfe <xQueueReceive+0x46>
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d10b      	bne.n	8007e1a <xQueueReceive+0x62>
	__asm volatile
 8007e02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e06:	f383 8811 	msr	BASEPRI, r3
 8007e0a:	f3bf 8f6f 	isb	sy
 8007e0e:	f3bf 8f4f 	dsb	sy
 8007e12:	61fb      	str	r3, [r7, #28]
}
 8007e14:	bf00      	nop
 8007e16:	bf00      	nop
 8007e18:	e7fd      	b.n	8007e16 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e1a:	f001 fa9f 	bl	800935c <xTaskGetSchedulerState>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d102      	bne.n	8007e2a <xQueueReceive+0x72>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d101      	bne.n	8007e2e <xQueueReceive+0x76>
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e000      	b.n	8007e30 <xQueueReceive+0x78>
 8007e2e:	2300      	movs	r3, #0
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d10b      	bne.n	8007e4c <xQueueReceive+0x94>
	__asm volatile
 8007e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e38:	f383 8811 	msr	BASEPRI, r3
 8007e3c:	f3bf 8f6f 	isb	sy
 8007e40:	f3bf 8f4f 	dsb	sy
 8007e44:	61bb      	str	r3, [r7, #24]
}
 8007e46:	bf00      	nop
 8007e48:	bf00      	nop
 8007e4a:	e7fd      	b.n	8007e48 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e4c:	f002 f8f4 	bl	800a038 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e54:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d01f      	beq.n	8007e9c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007e5c:	68b9      	ldr	r1, [r7, #8]
 8007e5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e60:	f000 fae3 	bl	800842a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e66:	1e5a      	subs	r2, r3, #1
 8007e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e6a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e6e:	691b      	ldr	r3, [r3, #16]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d00f      	beq.n	8007e94 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e76:	3310      	adds	r3, #16
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f001 f8a9 	bl	8008fd0 <xTaskRemoveFromEventList>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d007      	beq.n	8007e94 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007e84:	4b3c      	ldr	r3, [pc, #240]	@ (8007f78 <xQueueReceive+0x1c0>)
 8007e86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e8a:	601a      	str	r2, [r3, #0]
 8007e8c:	f3bf 8f4f 	dsb	sy
 8007e90:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007e94:	f002 f902 	bl	800a09c <vPortExitCritical>
				return pdPASS;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	e069      	b.n	8007f70 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d103      	bne.n	8007eaa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007ea2:	f002 f8fb 	bl	800a09c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	e062      	b.n	8007f70 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d106      	bne.n	8007ebe <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007eb0:	f107 0310 	add.w	r3, r7, #16
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f001 f8ef 	bl	8009098 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007ebe:	f002 f8ed 	bl	800a09c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007ec2:	f000 fe45 	bl	8008b50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ec6:	f002 f8b7 	bl	800a038 <vPortEnterCritical>
 8007eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ecc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ed0:	b25b      	sxtb	r3, r3
 8007ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ed6:	d103      	bne.n	8007ee0 <xQueueReceive+0x128>
 8007ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eda:	2200      	movs	r2, #0
 8007edc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ee2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ee6:	b25b      	sxtb	r3, r3
 8007ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eec:	d103      	bne.n	8007ef6 <xQueueReceive+0x13e>
 8007eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ef6:	f002 f8d1 	bl	800a09c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007efa:	1d3a      	adds	r2, r7, #4
 8007efc:	f107 0310 	add.w	r3, r7, #16
 8007f00:	4611      	mov	r1, r2
 8007f02:	4618      	mov	r0, r3
 8007f04:	f001 f8de 	bl	80090c4 <xTaskCheckForTimeOut>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d123      	bne.n	8007f56 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f10:	f000 fb03 	bl	800851a <prvIsQueueEmpty>
 8007f14:	4603      	mov	r3, r0
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d017      	beq.n	8007f4a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f1c:	3324      	adds	r3, #36	@ 0x24
 8007f1e:	687a      	ldr	r2, [r7, #4]
 8007f20:	4611      	mov	r1, r2
 8007f22:	4618      	mov	r0, r3
 8007f24:	f001 f802 	bl	8008f2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007f28:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f2a:	f000 faa4 	bl	8008476 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007f2e:	f000 fe1d 	bl	8008b6c <xTaskResumeAll>
 8007f32:	4603      	mov	r3, r0
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d189      	bne.n	8007e4c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007f38:	4b0f      	ldr	r3, [pc, #60]	@ (8007f78 <xQueueReceive+0x1c0>)
 8007f3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f3e:	601a      	str	r2, [r3, #0]
 8007f40:	f3bf 8f4f 	dsb	sy
 8007f44:	f3bf 8f6f 	isb	sy
 8007f48:	e780      	b.n	8007e4c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007f4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f4c:	f000 fa93 	bl	8008476 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f50:	f000 fe0c 	bl	8008b6c <xTaskResumeAll>
 8007f54:	e77a      	b.n	8007e4c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007f56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f58:	f000 fa8d 	bl	8008476 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f5c:	f000 fe06 	bl	8008b6c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f62:	f000 fada 	bl	800851a <prvIsQueueEmpty>
 8007f66:	4603      	mov	r3, r0
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	f43f af6f 	beq.w	8007e4c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007f6e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3730      	adds	r7, #48	@ 0x30
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}
 8007f78:	e000ed04 	.word	0xe000ed04

08007f7c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b08e      	sub	sp, #56	@ 0x38
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007f86:	2300      	movs	r3, #0
 8007f88:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d10b      	bne.n	8007fb0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8007f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f9c:	f383 8811 	msr	BASEPRI, r3
 8007fa0:	f3bf 8f6f 	isb	sy
 8007fa4:	f3bf 8f4f 	dsb	sy
 8007fa8:	623b      	str	r3, [r7, #32]
}
 8007faa:	bf00      	nop
 8007fac:	bf00      	nop
 8007fae:	e7fd      	b.n	8007fac <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d00b      	beq.n	8007fd0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8007fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fbc:	f383 8811 	msr	BASEPRI, r3
 8007fc0:	f3bf 8f6f 	isb	sy
 8007fc4:	f3bf 8f4f 	dsb	sy
 8007fc8:	61fb      	str	r3, [r7, #28]
}
 8007fca:	bf00      	nop
 8007fcc:	bf00      	nop
 8007fce:	e7fd      	b.n	8007fcc <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007fd0:	f001 f9c4 	bl	800935c <xTaskGetSchedulerState>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d102      	bne.n	8007fe0 <xQueueSemaphoreTake+0x64>
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d101      	bne.n	8007fe4 <xQueueSemaphoreTake+0x68>
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	e000      	b.n	8007fe6 <xQueueSemaphoreTake+0x6a>
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d10b      	bne.n	8008002 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8007fea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fee:	f383 8811 	msr	BASEPRI, r3
 8007ff2:	f3bf 8f6f 	isb	sy
 8007ff6:	f3bf 8f4f 	dsb	sy
 8007ffa:	61bb      	str	r3, [r7, #24]
}
 8007ffc:	bf00      	nop
 8007ffe:	bf00      	nop
 8008000:	e7fd      	b.n	8007ffe <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008002:	f002 f819 	bl	800a038 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800800a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800800c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800800e:	2b00      	cmp	r3, #0
 8008010:	d024      	beq.n	800805c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008014:	1e5a      	subs	r2, r3, #1
 8008016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008018:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800801a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d104      	bne.n	800802c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008022:	f001 fb15 	bl	8009650 <pvTaskIncrementMutexHeldCount>
 8008026:	4602      	mov	r2, r0
 8008028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800802a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800802c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800802e:	691b      	ldr	r3, [r3, #16]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d00f      	beq.n	8008054 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008036:	3310      	adds	r3, #16
 8008038:	4618      	mov	r0, r3
 800803a:	f000 ffc9 	bl	8008fd0 <xTaskRemoveFromEventList>
 800803e:	4603      	mov	r3, r0
 8008040:	2b00      	cmp	r3, #0
 8008042:	d007      	beq.n	8008054 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008044:	4b54      	ldr	r3, [pc, #336]	@ (8008198 <xQueueSemaphoreTake+0x21c>)
 8008046:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800804a:	601a      	str	r2, [r3, #0]
 800804c:	f3bf 8f4f 	dsb	sy
 8008050:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008054:	f002 f822 	bl	800a09c <vPortExitCritical>
				return pdPASS;
 8008058:	2301      	movs	r3, #1
 800805a:	e098      	b.n	800818e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d112      	bne.n	8008088 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008064:	2b00      	cmp	r3, #0
 8008066:	d00b      	beq.n	8008080 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8008068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800806c:	f383 8811 	msr	BASEPRI, r3
 8008070:	f3bf 8f6f 	isb	sy
 8008074:	f3bf 8f4f 	dsb	sy
 8008078:	617b      	str	r3, [r7, #20]
}
 800807a:	bf00      	nop
 800807c:	bf00      	nop
 800807e:	e7fd      	b.n	800807c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008080:	f002 f80c 	bl	800a09c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008084:	2300      	movs	r3, #0
 8008086:	e082      	b.n	800818e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800808a:	2b00      	cmp	r3, #0
 800808c:	d106      	bne.n	800809c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800808e:	f107 030c 	add.w	r3, r7, #12
 8008092:	4618      	mov	r0, r3
 8008094:	f001 f800 	bl	8009098 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008098:	2301      	movs	r3, #1
 800809a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800809c:	f001 fffe 	bl	800a09c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80080a0:	f000 fd56 	bl	8008b50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80080a4:	f001 ffc8 	bl	800a038 <vPortEnterCritical>
 80080a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080aa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80080ae:	b25b      	sxtb	r3, r3
 80080b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080b4:	d103      	bne.n	80080be <xQueueSemaphoreTake+0x142>
 80080b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080b8:	2200      	movs	r2, #0
 80080ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80080be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80080c4:	b25b      	sxtb	r3, r3
 80080c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ca:	d103      	bne.n	80080d4 <xQueueSemaphoreTake+0x158>
 80080cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080ce:	2200      	movs	r2, #0
 80080d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80080d4:	f001 ffe2 	bl	800a09c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80080d8:	463a      	mov	r2, r7
 80080da:	f107 030c 	add.w	r3, r7, #12
 80080de:	4611      	mov	r1, r2
 80080e0:	4618      	mov	r0, r3
 80080e2:	f000 ffef 	bl	80090c4 <xTaskCheckForTimeOut>
 80080e6:	4603      	mov	r3, r0
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d132      	bne.n	8008152 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80080ec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80080ee:	f000 fa14 	bl	800851a <prvIsQueueEmpty>
 80080f2:	4603      	mov	r3, r0
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d026      	beq.n	8008146 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80080f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d109      	bne.n	8008114 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8008100:	f001 ff9a 	bl	800a038 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	4618      	mov	r0, r3
 800810a:	f001 f945 	bl	8009398 <xTaskPriorityInherit>
 800810e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8008110:	f001 ffc4 	bl	800a09c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008116:	3324      	adds	r3, #36	@ 0x24
 8008118:	683a      	ldr	r2, [r7, #0]
 800811a:	4611      	mov	r1, r2
 800811c:	4618      	mov	r0, r3
 800811e:	f000 ff05 	bl	8008f2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008122:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008124:	f000 f9a7 	bl	8008476 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008128:	f000 fd20 	bl	8008b6c <xTaskResumeAll>
 800812c:	4603      	mov	r3, r0
 800812e:	2b00      	cmp	r3, #0
 8008130:	f47f af67 	bne.w	8008002 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8008134:	4b18      	ldr	r3, [pc, #96]	@ (8008198 <xQueueSemaphoreTake+0x21c>)
 8008136:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800813a:	601a      	str	r2, [r3, #0]
 800813c:	f3bf 8f4f 	dsb	sy
 8008140:	f3bf 8f6f 	isb	sy
 8008144:	e75d      	b.n	8008002 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008146:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008148:	f000 f995 	bl	8008476 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800814c:	f000 fd0e 	bl	8008b6c <xTaskResumeAll>
 8008150:	e757      	b.n	8008002 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008152:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008154:	f000 f98f 	bl	8008476 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008158:	f000 fd08 	bl	8008b6c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800815c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800815e:	f000 f9dc 	bl	800851a <prvIsQueueEmpty>
 8008162:	4603      	mov	r3, r0
 8008164:	2b00      	cmp	r3, #0
 8008166:	f43f af4c 	beq.w	8008002 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800816a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800816c:	2b00      	cmp	r3, #0
 800816e:	d00d      	beq.n	800818c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8008170:	f001 ff62 	bl	800a038 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008174:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008176:	f000 f8d6 	bl	8008326 <prvGetDisinheritPriorityAfterTimeout>
 800817a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800817c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800817e:	689b      	ldr	r3, [r3, #8]
 8008180:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008182:	4618      	mov	r0, r3
 8008184:	f001 f9e0 	bl	8009548 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008188:	f001 ff88 	bl	800a09c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800818c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800818e:	4618      	mov	r0, r3
 8008190:	3738      	adds	r7, #56	@ 0x38
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop
 8008198:	e000ed04 	.word	0xe000ed04

0800819c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b08e      	sub	sp, #56	@ 0x38
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	60f8      	str	r0, [r7, #12]
 80081a4:	60b9      	str	r1, [r7, #8]
 80081a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80081ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d10b      	bne.n	80081ca <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80081b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081b6:	f383 8811 	msr	BASEPRI, r3
 80081ba:	f3bf 8f6f 	isb	sy
 80081be:	f3bf 8f4f 	dsb	sy
 80081c2:	623b      	str	r3, [r7, #32]
}
 80081c4:	bf00      	nop
 80081c6:	bf00      	nop
 80081c8:	e7fd      	b.n	80081c6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d103      	bne.n	80081d8 <xQueueReceiveFromISR+0x3c>
 80081d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d101      	bne.n	80081dc <xQueueReceiveFromISR+0x40>
 80081d8:	2301      	movs	r3, #1
 80081da:	e000      	b.n	80081de <xQueueReceiveFromISR+0x42>
 80081dc:	2300      	movs	r3, #0
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d10b      	bne.n	80081fa <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80081e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081e6:	f383 8811 	msr	BASEPRI, r3
 80081ea:	f3bf 8f6f 	isb	sy
 80081ee:	f3bf 8f4f 	dsb	sy
 80081f2:	61fb      	str	r3, [r7, #28]
}
 80081f4:	bf00      	nop
 80081f6:	bf00      	nop
 80081f8:	e7fd      	b.n	80081f6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80081fa:	f001 fffd 	bl	800a1f8 <vPortValidateInterruptPriority>
	__asm volatile
 80081fe:	f3ef 8211 	mrs	r2, BASEPRI
 8008202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008206:	f383 8811 	msr	BASEPRI, r3
 800820a:	f3bf 8f6f 	isb	sy
 800820e:	f3bf 8f4f 	dsb	sy
 8008212:	61ba      	str	r2, [r7, #24]
 8008214:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008216:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008218:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800821a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800821c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800821e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008222:	2b00      	cmp	r3, #0
 8008224:	d02f      	beq.n	8008286 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008228:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800822c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008230:	68b9      	ldr	r1, [r7, #8]
 8008232:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008234:	f000 f8f9 	bl	800842a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800823a:	1e5a      	subs	r2, r3, #1
 800823c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800823e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008240:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008248:	d112      	bne.n	8008270 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800824a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800824c:	691b      	ldr	r3, [r3, #16]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d016      	beq.n	8008280 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008254:	3310      	adds	r3, #16
 8008256:	4618      	mov	r0, r3
 8008258:	f000 feba 	bl	8008fd0 <xTaskRemoveFromEventList>
 800825c:	4603      	mov	r3, r0
 800825e:	2b00      	cmp	r3, #0
 8008260:	d00e      	beq.n	8008280 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d00b      	beq.n	8008280 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2201      	movs	r2, #1
 800826c:	601a      	str	r2, [r3, #0]
 800826e:	e007      	b.n	8008280 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008270:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008274:	3301      	adds	r3, #1
 8008276:	b2db      	uxtb	r3, r3
 8008278:	b25a      	sxtb	r2, r3
 800827a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800827c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8008280:	2301      	movs	r3, #1
 8008282:	637b      	str	r3, [r7, #52]	@ 0x34
 8008284:	e001      	b.n	800828a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8008286:	2300      	movs	r3, #0
 8008288:	637b      	str	r3, [r7, #52]	@ 0x34
 800828a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800828c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	f383 8811 	msr	BASEPRI, r3
}
 8008294:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8008298:	4618      	mov	r0, r3
 800829a:	3738      	adds	r7, #56	@ 0x38
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d10b      	bne.n	80082c6 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 80082ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082b2:	f383 8811 	msr	BASEPRI, r3
 80082b6:	f3bf 8f6f 	isb	sy
 80082ba:	f3bf 8f4f 	dsb	sy
 80082be:	60bb      	str	r3, [r7, #8]
}
 80082c0:	bf00      	nop
 80082c2:	bf00      	nop
 80082c4:	e7fd      	b.n	80082c2 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80082c6:	f001 feb7 	bl	800a038 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082ce:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80082d0:	f001 fee4 	bl	800a09c <vPortExitCritical>

	return uxReturn;
 80082d4:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80082d6:	4618      	mov	r0, r3
 80082d8:	3710      	adds	r7, #16
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}

080082de <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80082de:	b580      	push	{r7, lr}
 80082e0:	b084      	sub	sp, #16
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d10b      	bne.n	8008308 <vQueueDelete+0x2a>
	__asm volatile
 80082f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082f4:	f383 8811 	msr	BASEPRI, r3
 80082f8:	f3bf 8f6f 	isb	sy
 80082fc:	f3bf 8f4f 	dsb	sy
 8008300:	60bb      	str	r3, [r7, #8]
}
 8008302:	bf00      	nop
 8008304:	bf00      	nop
 8008306:	e7fd      	b.n	8008304 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008308:	68f8      	ldr	r0, [r7, #12]
 800830a:	f000 f95f 	bl	80085cc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8008314:	2b00      	cmp	r3, #0
 8008316:	d102      	bne.n	800831e <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8008318:	68f8      	ldr	r0, [r7, #12]
 800831a:	f002 f87d 	bl	800a418 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800831e:	bf00      	nop
 8008320:	3710      	adds	r7, #16
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}

08008326 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008326:	b480      	push	{r7}
 8008328:	b085      	sub	sp, #20
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008332:	2b00      	cmp	r3, #0
 8008334:	d006      	beq.n	8008344 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8008340:	60fb      	str	r3, [r7, #12]
 8008342:	e001      	b.n	8008348 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008344:	2300      	movs	r3, #0
 8008346:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008348:	68fb      	ldr	r3, [r7, #12]
	}
 800834a:	4618      	mov	r0, r3
 800834c:	3714      	adds	r7, #20
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr

08008356 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008356:	b580      	push	{r7, lr}
 8008358:	b086      	sub	sp, #24
 800835a:	af00      	add	r7, sp, #0
 800835c:	60f8      	str	r0, [r7, #12]
 800835e:	60b9      	str	r1, [r7, #8]
 8008360:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008362:	2300      	movs	r3, #0
 8008364:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800836a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008370:	2b00      	cmp	r3, #0
 8008372:	d10d      	bne.n	8008390 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d14d      	bne.n	8008418 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	689b      	ldr	r3, [r3, #8]
 8008380:	4618      	mov	r0, r3
 8008382:	f001 f871 	bl	8009468 <xTaskPriorityDisinherit>
 8008386:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2200      	movs	r2, #0
 800838c:	609a      	str	r2, [r3, #8]
 800838e:	e043      	b.n	8008418 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d119      	bne.n	80083ca <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	6858      	ldr	r0, [r3, #4]
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800839e:	461a      	mov	r2, r3
 80083a0:	68b9      	ldr	r1, [r7, #8]
 80083a2:	f003 fb6c 	bl	800ba7e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	685a      	ldr	r2, [r3, #4]
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ae:	441a      	add	r2, r3
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	685a      	ldr	r2, [r3, #4]
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	429a      	cmp	r2, r3
 80083be:	d32b      	bcc.n	8008418 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	605a      	str	r2, [r3, #4]
 80083c8:	e026      	b.n	8008418 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	68d8      	ldr	r0, [r3, #12]
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083d2:	461a      	mov	r2, r3
 80083d4:	68b9      	ldr	r1, [r7, #8]
 80083d6:	f003 fb52 	bl	800ba7e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	68da      	ldr	r2, [r3, #12]
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083e2:	425b      	negs	r3, r3
 80083e4:	441a      	add	r2, r3
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	68da      	ldr	r2, [r3, #12]
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d207      	bcs.n	8008406 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	689a      	ldr	r2, [r3, #8]
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083fe:	425b      	negs	r3, r3
 8008400:	441a      	add	r2, r3
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2b02      	cmp	r3, #2
 800840a:	d105      	bne.n	8008418 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d002      	beq.n	8008418 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	3b01      	subs	r3, #1
 8008416:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	1c5a      	adds	r2, r3, #1
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008420:	697b      	ldr	r3, [r7, #20]
}
 8008422:	4618      	mov	r0, r3
 8008424:	3718      	adds	r7, #24
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}

0800842a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800842a:	b580      	push	{r7, lr}
 800842c:	b082      	sub	sp, #8
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
 8008432:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008438:	2b00      	cmp	r3, #0
 800843a:	d018      	beq.n	800846e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	68da      	ldr	r2, [r3, #12]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008444:	441a      	add	r2, r3
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	68da      	ldr	r2, [r3, #12]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	429a      	cmp	r2, r3
 8008454:	d303      	bcc.n	800845e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	68d9      	ldr	r1, [r3, #12]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008466:	461a      	mov	r2, r3
 8008468:	6838      	ldr	r0, [r7, #0]
 800846a:	f003 fb08 	bl	800ba7e <memcpy>
	}
}
 800846e:	bf00      	nop
 8008470:	3708      	adds	r7, #8
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}

08008476 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008476:	b580      	push	{r7, lr}
 8008478:	b084      	sub	sp, #16
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800847e:	f001 fddb 	bl	800a038 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008488:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800848a:	e011      	b.n	80084b0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008490:	2b00      	cmp	r3, #0
 8008492:	d012      	beq.n	80084ba <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	3324      	adds	r3, #36	@ 0x24
 8008498:	4618      	mov	r0, r3
 800849a:	f000 fd99 	bl	8008fd0 <xTaskRemoveFromEventList>
 800849e:	4603      	mov	r3, r0
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d001      	beq.n	80084a8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80084a4:	f000 fe72 	bl	800918c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80084a8:	7bfb      	ldrb	r3, [r7, #15]
 80084aa:	3b01      	subs	r3, #1
 80084ac:	b2db      	uxtb	r3, r3
 80084ae:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80084b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	dce9      	bgt.n	800848c <prvUnlockQueue+0x16>
 80084b8:	e000      	b.n	80084bc <prvUnlockQueue+0x46>
					break;
 80084ba:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	22ff      	movs	r2, #255	@ 0xff
 80084c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80084c4:	f001 fdea 	bl	800a09c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80084c8:	f001 fdb6 	bl	800a038 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80084d2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80084d4:	e011      	b.n	80084fa <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	691b      	ldr	r3, [r3, #16]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d012      	beq.n	8008504 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	3310      	adds	r3, #16
 80084e2:	4618      	mov	r0, r3
 80084e4:	f000 fd74 	bl	8008fd0 <xTaskRemoveFromEventList>
 80084e8:	4603      	mov	r3, r0
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d001      	beq.n	80084f2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80084ee:	f000 fe4d 	bl	800918c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80084f2:	7bbb      	ldrb	r3, [r7, #14]
 80084f4:	3b01      	subs	r3, #1
 80084f6:	b2db      	uxtb	r3, r3
 80084f8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80084fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	dce9      	bgt.n	80084d6 <prvUnlockQueue+0x60>
 8008502:	e000      	b.n	8008506 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008504:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	22ff      	movs	r2, #255	@ 0xff
 800850a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800850e:	f001 fdc5 	bl	800a09c <vPortExitCritical>
}
 8008512:	bf00      	nop
 8008514:	3710      	adds	r7, #16
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}

0800851a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800851a:	b580      	push	{r7, lr}
 800851c:	b084      	sub	sp, #16
 800851e:	af00      	add	r7, sp, #0
 8008520:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008522:	f001 fd89 	bl	800a038 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800852a:	2b00      	cmp	r3, #0
 800852c:	d102      	bne.n	8008534 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800852e:	2301      	movs	r3, #1
 8008530:	60fb      	str	r3, [r7, #12]
 8008532:	e001      	b.n	8008538 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008534:	2300      	movs	r3, #0
 8008536:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008538:	f001 fdb0 	bl	800a09c <vPortExitCritical>

	return xReturn;
 800853c:	68fb      	ldr	r3, [r7, #12]
}
 800853e:	4618      	mov	r0, r3
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}

08008546 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008546:	b580      	push	{r7, lr}
 8008548:	b084      	sub	sp, #16
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800854e:	f001 fd73 	bl	800a038 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800855a:	429a      	cmp	r2, r3
 800855c:	d102      	bne.n	8008564 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800855e:	2301      	movs	r3, #1
 8008560:	60fb      	str	r3, [r7, #12]
 8008562:	e001      	b.n	8008568 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008564:	2300      	movs	r3, #0
 8008566:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008568:	f001 fd98 	bl	800a09c <vPortExitCritical>

	return xReturn;
 800856c:	68fb      	ldr	r3, [r7, #12]
}
 800856e:	4618      	mov	r0, r3
 8008570:	3710      	adds	r7, #16
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
	...

08008578 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008578:	b480      	push	{r7}
 800857a:	b085      	sub	sp, #20
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008582:	2300      	movs	r3, #0
 8008584:	60fb      	str	r3, [r7, #12]
 8008586:	e014      	b.n	80085b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008588:	4a0f      	ldr	r2, [pc, #60]	@ (80085c8 <vQueueAddToRegistry+0x50>)
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d10b      	bne.n	80085ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008594:	490c      	ldr	r1, [pc, #48]	@ (80085c8 <vQueueAddToRegistry+0x50>)
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	683a      	ldr	r2, [r7, #0]
 800859a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800859e:	4a0a      	ldr	r2, [pc, #40]	@ (80085c8 <vQueueAddToRegistry+0x50>)
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	00db      	lsls	r3, r3, #3
 80085a4:	4413      	add	r3, r2
 80085a6:	687a      	ldr	r2, [r7, #4]
 80085a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80085aa:	e006      	b.n	80085ba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	3301      	adds	r3, #1
 80085b0:	60fb      	str	r3, [r7, #12]
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2b07      	cmp	r3, #7
 80085b6:	d9e7      	bls.n	8008588 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80085b8:	bf00      	nop
 80085ba:	bf00      	nop
 80085bc:	3714      	adds	r7, #20
 80085be:	46bd      	mov	sp, r7
 80085c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c4:	4770      	bx	lr
 80085c6:	bf00      	nop
 80085c8:	20000b84 	.word	0x20000b84

080085cc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80085cc:	b480      	push	{r7}
 80085ce:	b085      	sub	sp, #20
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80085d4:	2300      	movs	r3, #0
 80085d6:	60fb      	str	r3, [r7, #12]
 80085d8:	e016      	b.n	8008608 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80085da:	4a10      	ldr	r2, [pc, #64]	@ (800861c <vQueueUnregisterQueue+0x50>)
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	00db      	lsls	r3, r3, #3
 80085e0:	4413      	add	r3, r2
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	429a      	cmp	r2, r3
 80085e8:	d10b      	bne.n	8008602 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80085ea:	4a0c      	ldr	r2, [pc, #48]	@ (800861c <vQueueUnregisterQueue+0x50>)
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2100      	movs	r1, #0
 80085f0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80085f4:	4a09      	ldr	r2, [pc, #36]	@ (800861c <vQueueUnregisterQueue+0x50>)
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	00db      	lsls	r3, r3, #3
 80085fa:	4413      	add	r3, r2
 80085fc:	2200      	movs	r2, #0
 80085fe:	605a      	str	r2, [r3, #4]
				break;
 8008600:	e006      	b.n	8008610 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	3301      	adds	r3, #1
 8008606:	60fb      	str	r3, [r7, #12]
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	2b07      	cmp	r3, #7
 800860c:	d9e5      	bls.n	80085da <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800860e:	bf00      	nop
 8008610:	bf00      	nop
 8008612:	3714      	adds	r7, #20
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr
 800861c:	20000b84 	.word	0x20000b84

08008620 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008620:	b580      	push	{r7, lr}
 8008622:	b086      	sub	sp, #24
 8008624:	af00      	add	r7, sp, #0
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008630:	f001 fd02 	bl	800a038 <vPortEnterCritical>
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800863a:	b25b      	sxtb	r3, r3
 800863c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008640:	d103      	bne.n	800864a <vQueueWaitForMessageRestricted+0x2a>
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	2200      	movs	r2, #0
 8008646:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008650:	b25b      	sxtb	r3, r3
 8008652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008656:	d103      	bne.n	8008660 <vQueueWaitForMessageRestricted+0x40>
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	2200      	movs	r2, #0
 800865c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008660:	f001 fd1c 	bl	800a09c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008668:	2b00      	cmp	r3, #0
 800866a:	d106      	bne.n	800867a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	3324      	adds	r3, #36	@ 0x24
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	68b9      	ldr	r1, [r7, #8]
 8008674:	4618      	mov	r0, r3
 8008676:	f000 fc7f 	bl	8008f78 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800867a:	6978      	ldr	r0, [r7, #20]
 800867c:	f7ff fefb 	bl	8008476 <prvUnlockQueue>
	}
 8008680:	bf00      	nop
 8008682:	3718      	adds	r7, #24
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008688:	b580      	push	{r7, lr}
 800868a:	b08e      	sub	sp, #56	@ 0x38
 800868c:	af04      	add	r7, sp, #16
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	607a      	str	r2, [r7, #4]
 8008694:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008696:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008698:	2b00      	cmp	r3, #0
 800869a:	d10b      	bne.n	80086b4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800869c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086a0:	f383 8811 	msr	BASEPRI, r3
 80086a4:	f3bf 8f6f 	isb	sy
 80086a8:	f3bf 8f4f 	dsb	sy
 80086ac:	623b      	str	r3, [r7, #32]
}
 80086ae:	bf00      	nop
 80086b0:	bf00      	nop
 80086b2:	e7fd      	b.n	80086b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80086b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d10b      	bne.n	80086d2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80086ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086be:	f383 8811 	msr	BASEPRI, r3
 80086c2:	f3bf 8f6f 	isb	sy
 80086c6:	f3bf 8f4f 	dsb	sy
 80086ca:	61fb      	str	r3, [r7, #28]
}
 80086cc:	bf00      	nop
 80086ce:	bf00      	nop
 80086d0:	e7fd      	b.n	80086ce <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80086d2:	23a8      	movs	r3, #168	@ 0xa8
 80086d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	2ba8      	cmp	r3, #168	@ 0xa8
 80086da:	d00b      	beq.n	80086f4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80086dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086e0:	f383 8811 	msr	BASEPRI, r3
 80086e4:	f3bf 8f6f 	isb	sy
 80086e8:	f3bf 8f4f 	dsb	sy
 80086ec:	61bb      	str	r3, [r7, #24]
}
 80086ee:	bf00      	nop
 80086f0:	bf00      	nop
 80086f2:	e7fd      	b.n	80086f0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80086f4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80086f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d01e      	beq.n	800873a <xTaskCreateStatic+0xb2>
 80086fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d01b      	beq.n	800873a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008704:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008708:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800870a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800870c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800870e:	2202      	movs	r2, #2
 8008710:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008714:	2300      	movs	r3, #0
 8008716:	9303      	str	r3, [sp, #12]
 8008718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800871a:	9302      	str	r3, [sp, #8]
 800871c:	f107 0314 	add.w	r3, r7, #20
 8008720:	9301      	str	r3, [sp, #4]
 8008722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008724:	9300      	str	r3, [sp, #0]
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	68b9      	ldr	r1, [r7, #8]
 800872c:	68f8      	ldr	r0, [r7, #12]
 800872e:	f000 f851 	bl	80087d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008732:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008734:	f000 f8f6 	bl	8008924 <prvAddNewTaskToReadyList>
 8008738:	e001      	b.n	800873e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800873a:	2300      	movs	r3, #0
 800873c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800873e:	697b      	ldr	r3, [r7, #20]
	}
 8008740:	4618      	mov	r0, r3
 8008742:	3728      	adds	r7, #40	@ 0x28
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}

08008748 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008748:	b580      	push	{r7, lr}
 800874a:	b08c      	sub	sp, #48	@ 0x30
 800874c:	af04      	add	r7, sp, #16
 800874e:	60f8      	str	r0, [r7, #12]
 8008750:	60b9      	str	r1, [r7, #8]
 8008752:	603b      	str	r3, [r7, #0]
 8008754:	4613      	mov	r3, r2
 8008756:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008758:	88fb      	ldrh	r3, [r7, #6]
 800875a:	009b      	lsls	r3, r3, #2
 800875c:	4618      	mov	r0, r3
 800875e:	f001 fd8d 	bl	800a27c <pvPortMalloc>
 8008762:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d00e      	beq.n	8008788 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800876a:	20a8      	movs	r0, #168	@ 0xa8
 800876c:	f001 fd86 	bl	800a27c <pvPortMalloc>
 8008770:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008772:	69fb      	ldr	r3, [r7, #28]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d003      	beq.n	8008780 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008778:	69fb      	ldr	r3, [r7, #28]
 800877a:	697a      	ldr	r2, [r7, #20]
 800877c:	631a      	str	r2, [r3, #48]	@ 0x30
 800877e:	e005      	b.n	800878c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008780:	6978      	ldr	r0, [r7, #20]
 8008782:	f001 fe49 	bl	800a418 <vPortFree>
 8008786:	e001      	b.n	800878c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008788:	2300      	movs	r3, #0
 800878a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800878c:	69fb      	ldr	r3, [r7, #28]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d017      	beq.n	80087c2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008792:	69fb      	ldr	r3, [r7, #28]
 8008794:	2200      	movs	r2, #0
 8008796:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800879a:	88fa      	ldrh	r2, [r7, #6]
 800879c:	2300      	movs	r3, #0
 800879e:	9303      	str	r3, [sp, #12]
 80087a0:	69fb      	ldr	r3, [r7, #28]
 80087a2:	9302      	str	r3, [sp, #8]
 80087a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087a6:	9301      	str	r3, [sp, #4]
 80087a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087aa:	9300      	str	r3, [sp, #0]
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	68b9      	ldr	r1, [r7, #8]
 80087b0:	68f8      	ldr	r0, [r7, #12]
 80087b2:	f000 f80f 	bl	80087d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80087b6:	69f8      	ldr	r0, [r7, #28]
 80087b8:	f000 f8b4 	bl	8008924 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80087bc:	2301      	movs	r3, #1
 80087be:	61bb      	str	r3, [r7, #24]
 80087c0:	e002      	b.n	80087c8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80087c2:	f04f 33ff 	mov.w	r3, #4294967295
 80087c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80087c8:	69bb      	ldr	r3, [r7, #24]
	}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3720      	adds	r7, #32
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
	...

080087d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b088      	sub	sp, #32
 80087d8:	af00      	add	r7, sp, #0
 80087da:	60f8      	str	r0, [r7, #12]
 80087dc:	60b9      	str	r1, [r7, #8]
 80087de:	607a      	str	r2, [r7, #4]
 80087e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80087e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087e4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	009b      	lsls	r3, r3, #2
 80087ea:	461a      	mov	r2, r3
 80087ec:	21a5      	movs	r1, #165	@ 0xa5
 80087ee:	f003 f849 	bl	800b884 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80087f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80087fc:	3b01      	subs	r3, #1
 80087fe:	009b      	lsls	r3, r3, #2
 8008800:	4413      	add	r3, r2
 8008802:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008804:	69bb      	ldr	r3, [r7, #24]
 8008806:	f023 0307 	bic.w	r3, r3, #7
 800880a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800880c:	69bb      	ldr	r3, [r7, #24]
 800880e:	f003 0307 	and.w	r3, r3, #7
 8008812:	2b00      	cmp	r3, #0
 8008814:	d00b      	beq.n	800882e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800881a:	f383 8811 	msr	BASEPRI, r3
 800881e:	f3bf 8f6f 	isb	sy
 8008822:	f3bf 8f4f 	dsb	sy
 8008826:	617b      	str	r3, [r7, #20]
}
 8008828:	bf00      	nop
 800882a:	bf00      	nop
 800882c:	e7fd      	b.n	800882a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d01f      	beq.n	8008874 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008834:	2300      	movs	r3, #0
 8008836:	61fb      	str	r3, [r7, #28]
 8008838:	e012      	b.n	8008860 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800883a:	68ba      	ldr	r2, [r7, #8]
 800883c:	69fb      	ldr	r3, [r7, #28]
 800883e:	4413      	add	r3, r2
 8008840:	7819      	ldrb	r1, [r3, #0]
 8008842:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008844:	69fb      	ldr	r3, [r7, #28]
 8008846:	4413      	add	r3, r2
 8008848:	3334      	adds	r3, #52	@ 0x34
 800884a:	460a      	mov	r2, r1
 800884c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800884e:	68ba      	ldr	r2, [r7, #8]
 8008850:	69fb      	ldr	r3, [r7, #28]
 8008852:	4413      	add	r3, r2
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d006      	beq.n	8008868 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800885a:	69fb      	ldr	r3, [r7, #28]
 800885c:	3301      	adds	r3, #1
 800885e:	61fb      	str	r3, [r7, #28]
 8008860:	69fb      	ldr	r3, [r7, #28]
 8008862:	2b0f      	cmp	r3, #15
 8008864:	d9e9      	bls.n	800883a <prvInitialiseNewTask+0x66>
 8008866:	e000      	b.n	800886a <prvInitialiseNewTask+0x96>
			{
				break;
 8008868:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800886a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800886c:	2200      	movs	r2, #0
 800886e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008872:	e003      	b.n	800887c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008876:	2200      	movs	r2, #0
 8008878:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800887c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800887e:	2b37      	cmp	r3, #55	@ 0x37
 8008880:	d901      	bls.n	8008886 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008882:	2337      	movs	r3, #55	@ 0x37
 8008884:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008888:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800888a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800888c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800888e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008890:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008894:	2200      	movs	r2, #0
 8008896:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800889a:	3304      	adds	r3, #4
 800889c:	4618      	mov	r0, r3
 800889e:	f7fe fedf 	bl	8007660 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80088a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a4:	3318      	adds	r3, #24
 80088a6:	4618      	mov	r0, r3
 80088a8:	f7fe feda 	bl	8007660 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80088ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088b0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088b4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80088b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ba:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80088bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088c0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80088c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c4:	2200      	movs	r2, #0
 80088c6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80088ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088cc:	2200      	movs	r2, #0
 80088ce:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80088d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d4:	3354      	adds	r3, #84	@ 0x54
 80088d6:	224c      	movs	r2, #76	@ 0x4c
 80088d8:	2100      	movs	r1, #0
 80088da:	4618      	mov	r0, r3
 80088dc:	f002 ffd2 	bl	800b884 <memset>
 80088e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e2:	4a0d      	ldr	r2, [pc, #52]	@ (8008918 <prvInitialiseNewTask+0x144>)
 80088e4:	659a      	str	r2, [r3, #88]	@ 0x58
 80088e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e8:	4a0c      	ldr	r2, [pc, #48]	@ (800891c <prvInitialiseNewTask+0x148>)
 80088ea:	65da      	str	r2, [r3, #92]	@ 0x5c
 80088ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ee:	4a0c      	ldr	r2, [pc, #48]	@ (8008920 <prvInitialiseNewTask+0x14c>)
 80088f0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80088f2:	683a      	ldr	r2, [r7, #0]
 80088f4:	68f9      	ldr	r1, [r7, #12]
 80088f6:	69b8      	ldr	r0, [r7, #24]
 80088f8:	f001 fa6c 	bl	8009dd4 <pxPortInitialiseStack>
 80088fc:	4602      	mov	r2, r0
 80088fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008900:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008904:	2b00      	cmp	r3, #0
 8008906:	d002      	beq.n	800890e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800890a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800890c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800890e:	bf00      	nop
 8008910:	3720      	adds	r7, #32
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}
 8008916:	bf00      	nop
 8008918:	20004e18 	.word	0x20004e18
 800891c:	20004e80 	.word	0x20004e80
 8008920:	20004ee8 	.word	0x20004ee8

08008924 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b082      	sub	sp, #8
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800892c:	f001 fb84 	bl	800a038 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008930:	4b2d      	ldr	r3, [pc, #180]	@ (80089e8 <prvAddNewTaskToReadyList+0xc4>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	3301      	adds	r3, #1
 8008936:	4a2c      	ldr	r2, [pc, #176]	@ (80089e8 <prvAddNewTaskToReadyList+0xc4>)
 8008938:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800893a:	4b2c      	ldr	r3, [pc, #176]	@ (80089ec <prvAddNewTaskToReadyList+0xc8>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d109      	bne.n	8008956 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008942:	4a2a      	ldr	r2, [pc, #168]	@ (80089ec <prvAddNewTaskToReadyList+0xc8>)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008948:	4b27      	ldr	r3, [pc, #156]	@ (80089e8 <prvAddNewTaskToReadyList+0xc4>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	2b01      	cmp	r3, #1
 800894e:	d110      	bne.n	8008972 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008950:	f000 fc40 	bl	80091d4 <prvInitialiseTaskLists>
 8008954:	e00d      	b.n	8008972 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008956:	4b26      	ldr	r3, [pc, #152]	@ (80089f0 <prvAddNewTaskToReadyList+0xcc>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d109      	bne.n	8008972 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800895e:	4b23      	ldr	r3, [pc, #140]	@ (80089ec <prvAddNewTaskToReadyList+0xc8>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008968:	429a      	cmp	r2, r3
 800896a:	d802      	bhi.n	8008972 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800896c:	4a1f      	ldr	r2, [pc, #124]	@ (80089ec <prvAddNewTaskToReadyList+0xc8>)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008972:	4b20      	ldr	r3, [pc, #128]	@ (80089f4 <prvAddNewTaskToReadyList+0xd0>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	3301      	adds	r3, #1
 8008978:	4a1e      	ldr	r2, [pc, #120]	@ (80089f4 <prvAddNewTaskToReadyList+0xd0>)
 800897a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800897c:	4b1d      	ldr	r3, [pc, #116]	@ (80089f4 <prvAddNewTaskToReadyList+0xd0>)
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008988:	4b1b      	ldr	r3, [pc, #108]	@ (80089f8 <prvAddNewTaskToReadyList+0xd4>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	429a      	cmp	r2, r3
 800898e:	d903      	bls.n	8008998 <prvAddNewTaskToReadyList+0x74>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008994:	4a18      	ldr	r2, [pc, #96]	@ (80089f8 <prvAddNewTaskToReadyList+0xd4>)
 8008996:	6013      	str	r3, [r2, #0]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800899c:	4613      	mov	r3, r2
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	4413      	add	r3, r2
 80089a2:	009b      	lsls	r3, r3, #2
 80089a4:	4a15      	ldr	r2, [pc, #84]	@ (80089fc <prvAddNewTaskToReadyList+0xd8>)
 80089a6:	441a      	add	r2, r3
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	3304      	adds	r3, #4
 80089ac:	4619      	mov	r1, r3
 80089ae:	4610      	mov	r0, r2
 80089b0:	f7fe fe63 	bl	800767a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80089b4:	f001 fb72 	bl	800a09c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80089b8:	4b0d      	ldr	r3, [pc, #52]	@ (80089f0 <prvAddNewTaskToReadyList+0xcc>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d00e      	beq.n	80089de <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80089c0:	4b0a      	ldr	r3, [pc, #40]	@ (80089ec <prvAddNewTaskToReadyList+0xc8>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089ca:	429a      	cmp	r2, r3
 80089cc:	d207      	bcs.n	80089de <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80089ce:	4b0c      	ldr	r3, [pc, #48]	@ (8008a00 <prvAddNewTaskToReadyList+0xdc>)
 80089d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089d4:	601a      	str	r2, [r3, #0]
 80089d6:	f3bf 8f4f 	dsb	sy
 80089da:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80089de:	bf00      	nop
 80089e0:	3708      	adds	r7, #8
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}
 80089e6:	bf00      	nop
 80089e8:	20001098 	.word	0x20001098
 80089ec:	20000bc4 	.word	0x20000bc4
 80089f0:	200010a4 	.word	0x200010a4
 80089f4:	200010b4 	.word	0x200010b4
 80089f8:	200010a0 	.word	0x200010a0
 80089fc:	20000bc8 	.word	0x20000bc8
 8008a00:	e000ed04 	.word	0xe000ed04

08008a04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b084      	sub	sp, #16
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d018      	beq.n	8008a48 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008a16:	4b14      	ldr	r3, [pc, #80]	@ (8008a68 <vTaskDelay+0x64>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d00b      	beq.n	8008a36 <vTaskDelay+0x32>
	__asm volatile
 8008a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a22:	f383 8811 	msr	BASEPRI, r3
 8008a26:	f3bf 8f6f 	isb	sy
 8008a2a:	f3bf 8f4f 	dsb	sy
 8008a2e:	60bb      	str	r3, [r7, #8]
}
 8008a30:	bf00      	nop
 8008a32:	bf00      	nop
 8008a34:	e7fd      	b.n	8008a32 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008a36:	f000 f88b 	bl	8008b50 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008a3a:	2100      	movs	r1, #0
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f000 fe1b 	bl	8009678 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008a42:	f000 f893 	bl	8008b6c <xTaskResumeAll>
 8008a46:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d107      	bne.n	8008a5e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008a4e:	4b07      	ldr	r3, [pc, #28]	@ (8008a6c <vTaskDelay+0x68>)
 8008a50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a54:	601a      	str	r2, [r3, #0]
 8008a56:	f3bf 8f4f 	dsb	sy
 8008a5a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008a5e:	bf00      	nop
 8008a60:	3710      	adds	r7, #16
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	200010c0 	.word	0x200010c0
 8008a6c:	e000ed04 	.word	0xe000ed04

08008a70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b08a      	sub	sp, #40	@ 0x28
 8008a74:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008a76:	2300      	movs	r3, #0
 8008a78:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008a7e:	463a      	mov	r2, r7
 8008a80:	1d39      	adds	r1, r7, #4
 8008a82:	f107 0308 	add.w	r3, r7, #8
 8008a86:	4618      	mov	r0, r3
 8008a88:	f7fe fd96 	bl	80075b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008a8c:	6839      	ldr	r1, [r7, #0]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	68ba      	ldr	r2, [r7, #8]
 8008a92:	9202      	str	r2, [sp, #8]
 8008a94:	9301      	str	r3, [sp, #4]
 8008a96:	2300      	movs	r3, #0
 8008a98:	9300      	str	r3, [sp, #0]
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	460a      	mov	r2, r1
 8008a9e:	4924      	ldr	r1, [pc, #144]	@ (8008b30 <vTaskStartScheduler+0xc0>)
 8008aa0:	4824      	ldr	r0, [pc, #144]	@ (8008b34 <vTaskStartScheduler+0xc4>)
 8008aa2:	f7ff fdf1 	bl	8008688 <xTaskCreateStatic>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	4a23      	ldr	r2, [pc, #140]	@ (8008b38 <vTaskStartScheduler+0xc8>)
 8008aaa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008aac:	4b22      	ldr	r3, [pc, #136]	@ (8008b38 <vTaskStartScheduler+0xc8>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d002      	beq.n	8008aba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	617b      	str	r3, [r7, #20]
 8008ab8:	e001      	b.n	8008abe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008aba:	2300      	movs	r3, #0
 8008abc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	d102      	bne.n	8008aca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008ac4:	f000 fe2c 	bl	8009720 <xTimerCreateTimerTask>
 8008ac8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	2b01      	cmp	r3, #1
 8008ace:	d11b      	bne.n	8008b08 <vTaskStartScheduler+0x98>
	__asm volatile
 8008ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ad4:	f383 8811 	msr	BASEPRI, r3
 8008ad8:	f3bf 8f6f 	isb	sy
 8008adc:	f3bf 8f4f 	dsb	sy
 8008ae0:	613b      	str	r3, [r7, #16]
}
 8008ae2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008ae4:	4b15      	ldr	r3, [pc, #84]	@ (8008b3c <vTaskStartScheduler+0xcc>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	3354      	adds	r3, #84	@ 0x54
 8008aea:	4a15      	ldr	r2, [pc, #84]	@ (8008b40 <vTaskStartScheduler+0xd0>)
 8008aec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008aee:	4b15      	ldr	r3, [pc, #84]	@ (8008b44 <vTaskStartScheduler+0xd4>)
 8008af0:	f04f 32ff 	mov.w	r2, #4294967295
 8008af4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008af6:	4b14      	ldr	r3, [pc, #80]	@ (8008b48 <vTaskStartScheduler+0xd8>)
 8008af8:	2201      	movs	r2, #1
 8008afa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008afc:	4b13      	ldr	r3, [pc, #76]	@ (8008b4c <vTaskStartScheduler+0xdc>)
 8008afe:	2200      	movs	r2, #0
 8008b00:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008b02:	f001 f9f5 	bl	8009ef0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008b06:	e00f      	b.n	8008b28 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b0e:	d10b      	bne.n	8008b28 <vTaskStartScheduler+0xb8>
	__asm volatile
 8008b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b14:	f383 8811 	msr	BASEPRI, r3
 8008b18:	f3bf 8f6f 	isb	sy
 8008b1c:	f3bf 8f4f 	dsb	sy
 8008b20:	60fb      	str	r3, [r7, #12]
}
 8008b22:	bf00      	nop
 8008b24:	bf00      	nop
 8008b26:	e7fd      	b.n	8008b24 <vTaskStartScheduler+0xb4>
}
 8008b28:	bf00      	nop
 8008b2a:	3718      	adds	r7, #24
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}
 8008b30:	0800fe24 	.word	0x0800fe24
 8008b34:	080091a5 	.word	0x080091a5
 8008b38:	200010bc 	.word	0x200010bc
 8008b3c:	20000bc4 	.word	0x20000bc4
 8008b40:	20000064 	.word	0x20000064
 8008b44:	200010b8 	.word	0x200010b8
 8008b48:	200010a4 	.word	0x200010a4
 8008b4c:	2000109c 	.word	0x2000109c

08008b50 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008b50:	b480      	push	{r7}
 8008b52:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008b54:	4b04      	ldr	r3, [pc, #16]	@ (8008b68 <vTaskSuspendAll+0x18>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	3301      	adds	r3, #1
 8008b5a:	4a03      	ldr	r2, [pc, #12]	@ (8008b68 <vTaskSuspendAll+0x18>)
 8008b5c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008b5e:	bf00      	nop
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr
 8008b68:	200010c0 	.word	0x200010c0

08008b6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b084      	sub	sp, #16
 8008b70:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008b72:	2300      	movs	r3, #0
 8008b74:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008b76:	2300      	movs	r3, #0
 8008b78:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008b7a:	4b42      	ldr	r3, [pc, #264]	@ (8008c84 <xTaskResumeAll+0x118>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d10b      	bne.n	8008b9a <xTaskResumeAll+0x2e>
	__asm volatile
 8008b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b86:	f383 8811 	msr	BASEPRI, r3
 8008b8a:	f3bf 8f6f 	isb	sy
 8008b8e:	f3bf 8f4f 	dsb	sy
 8008b92:	603b      	str	r3, [r7, #0]
}
 8008b94:	bf00      	nop
 8008b96:	bf00      	nop
 8008b98:	e7fd      	b.n	8008b96 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008b9a:	f001 fa4d 	bl	800a038 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008b9e:	4b39      	ldr	r3, [pc, #228]	@ (8008c84 <xTaskResumeAll+0x118>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	3b01      	subs	r3, #1
 8008ba4:	4a37      	ldr	r2, [pc, #220]	@ (8008c84 <xTaskResumeAll+0x118>)
 8008ba6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ba8:	4b36      	ldr	r3, [pc, #216]	@ (8008c84 <xTaskResumeAll+0x118>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d162      	bne.n	8008c76 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008bb0:	4b35      	ldr	r3, [pc, #212]	@ (8008c88 <xTaskResumeAll+0x11c>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d05e      	beq.n	8008c76 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008bb8:	e02f      	b.n	8008c1a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bba:	4b34      	ldr	r3, [pc, #208]	@ (8008c8c <xTaskResumeAll+0x120>)
 8008bbc:	68db      	ldr	r3, [r3, #12]
 8008bbe:	68db      	ldr	r3, [r3, #12]
 8008bc0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	3318      	adds	r3, #24
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f7fe fdb4 	bl	8007734 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	3304      	adds	r3, #4
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f7fe fdaf 	bl	8007734 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bda:	4b2d      	ldr	r3, [pc, #180]	@ (8008c90 <xTaskResumeAll+0x124>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d903      	bls.n	8008bea <xTaskResumeAll+0x7e>
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008be6:	4a2a      	ldr	r2, [pc, #168]	@ (8008c90 <xTaskResumeAll+0x124>)
 8008be8:	6013      	str	r3, [r2, #0]
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bee:	4613      	mov	r3, r2
 8008bf0:	009b      	lsls	r3, r3, #2
 8008bf2:	4413      	add	r3, r2
 8008bf4:	009b      	lsls	r3, r3, #2
 8008bf6:	4a27      	ldr	r2, [pc, #156]	@ (8008c94 <xTaskResumeAll+0x128>)
 8008bf8:	441a      	add	r2, r3
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	3304      	adds	r3, #4
 8008bfe:	4619      	mov	r1, r3
 8008c00:	4610      	mov	r0, r2
 8008c02:	f7fe fd3a 	bl	800767a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c0a:	4b23      	ldr	r3, [pc, #140]	@ (8008c98 <xTaskResumeAll+0x12c>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d302      	bcc.n	8008c1a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008c14:	4b21      	ldr	r3, [pc, #132]	@ (8008c9c <xTaskResumeAll+0x130>)
 8008c16:	2201      	movs	r2, #1
 8008c18:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008c1a:	4b1c      	ldr	r3, [pc, #112]	@ (8008c8c <xTaskResumeAll+0x120>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d1cb      	bne.n	8008bba <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d001      	beq.n	8008c2c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008c28:	f000 fb78 	bl	800931c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008c2c:	4b1c      	ldr	r3, [pc, #112]	@ (8008ca0 <xTaskResumeAll+0x134>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d010      	beq.n	8008c5a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008c38:	f000 f858 	bl	8008cec <xTaskIncrementTick>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d002      	beq.n	8008c48 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008c42:	4b16      	ldr	r3, [pc, #88]	@ (8008c9c <xTaskResumeAll+0x130>)
 8008c44:	2201      	movs	r2, #1
 8008c46:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	3b01      	subs	r3, #1
 8008c4c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d1f1      	bne.n	8008c38 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008c54:	4b12      	ldr	r3, [pc, #72]	@ (8008ca0 <xTaskResumeAll+0x134>)
 8008c56:	2200      	movs	r2, #0
 8008c58:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008c5a:	4b10      	ldr	r3, [pc, #64]	@ (8008c9c <xTaskResumeAll+0x130>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d009      	beq.n	8008c76 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008c62:	2301      	movs	r3, #1
 8008c64:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008c66:	4b0f      	ldr	r3, [pc, #60]	@ (8008ca4 <xTaskResumeAll+0x138>)
 8008c68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c6c:	601a      	str	r2, [r3, #0]
 8008c6e:	f3bf 8f4f 	dsb	sy
 8008c72:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008c76:	f001 fa11 	bl	800a09c <vPortExitCritical>

	return xAlreadyYielded;
 8008c7a:	68bb      	ldr	r3, [r7, #8]
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3710      	adds	r7, #16
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}
 8008c84:	200010c0 	.word	0x200010c0
 8008c88:	20001098 	.word	0x20001098
 8008c8c:	20001058 	.word	0x20001058
 8008c90:	200010a0 	.word	0x200010a0
 8008c94:	20000bc8 	.word	0x20000bc8
 8008c98:	20000bc4 	.word	0x20000bc4
 8008c9c:	200010ac 	.word	0x200010ac
 8008ca0:	200010a8 	.word	0x200010a8
 8008ca4:	e000ed04 	.word	0xe000ed04

08008ca8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b083      	sub	sp, #12
 8008cac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008cae:	4b05      	ldr	r3, [pc, #20]	@ (8008cc4 <xTaskGetTickCount+0x1c>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008cb4:	687b      	ldr	r3, [r7, #4]
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	370c      	adds	r7, #12
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr
 8008cc2:	bf00      	nop
 8008cc4:	2000109c 	.word	0x2000109c

08008cc8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008cce:	f001 fa93 	bl	800a1f8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8008cd6:	4b04      	ldr	r3, [pc, #16]	@ (8008ce8 <xTaskGetTickCountFromISR+0x20>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008cdc:	683b      	ldr	r3, [r7, #0]
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3708      	adds	r7, #8
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
 8008ce6:	bf00      	nop
 8008ce8:	2000109c 	.word	0x2000109c

08008cec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b086      	sub	sp, #24
 8008cf0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008cf6:	4b4f      	ldr	r3, [pc, #316]	@ (8008e34 <xTaskIncrementTick+0x148>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	f040 8090 	bne.w	8008e20 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008d00:	4b4d      	ldr	r3, [pc, #308]	@ (8008e38 <xTaskIncrementTick+0x14c>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	3301      	adds	r3, #1
 8008d06:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008d08:	4a4b      	ldr	r2, [pc, #300]	@ (8008e38 <xTaskIncrementTick+0x14c>)
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d121      	bne.n	8008d58 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008d14:	4b49      	ldr	r3, [pc, #292]	@ (8008e3c <xTaskIncrementTick+0x150>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d00b      	beq.n	8008d36 <xTaskIncrementTick+0x4a>
	__asm volatile
 8008d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d22:	f383 8811 	msr	BASEPRI, r3
 8008d26:	f3bf 8f6f 	isb	sy
 8008d2a:	f3bf 8f4f 	dsb	sy
 8008d2e:	603b      	str	r3, [r7, #0]
}
 8008d30:	bf00      	nop
 8008d32:	bf00      	nop
 8008d34:	e7fd      	b.n	8008d32 <xTaskIncrementTick+0x46>
 8008d36:	4b41      	ldr	r3, [pc, #260]	@ (8008e3c <xTaskIncrementTick+0x150>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	60fb      	str	r3, [r7, #12]
 8008d3c:	4b40      	ldr	r3, [pc, #256]	@ (8008e40 <xTaskIncrementTick+0x154>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a3e      	ldr	r2, [pc, #248]	@ (8008e3c <xTaskIncrementTick+0x150>)
 8008d42:	6013      	str	r3, [r2, #0]
 8008d44:	4a3e      	ldr	r2, [pc, #248]	@ (8008e40 <xTaskIncrementTick+0x154>)
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	6013      	str	r3, [r2, #0]
 8008d4a:	4b3e      	ldr	r3, [pc, #248]	@ (8008e44 <xTaskIncrementTick+0x158>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	3301      	adds	r3, #1
 8008d50:	4a3c      	ldr	r2, [pc, #240]	@ (8008e44 <xTaskIncrementTick+0x158>)
 8008d52:	6013      	str	r3, [r2, #0]
 8008d54:	f000 fae2 	bl	800931c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008d58:	4b3b      	ldr	r3, [pc, #236]	@ (8008e48 <xTaskIncrementTick+0x15c>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	693a      	ldr	r2, [r7, #16]
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d349      	bcc.n	8008df6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d62:	4b36      	ldr	r3, [pc, #216]	@ (8008e3c <xTaskIncrementTick+0x150>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d104      	bne.n	8008d76 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d6c:	4b36      	ldr	r3, [pc, #216]	@ (8008e48 <xTaskIncrementTick+0x15c>)
 8008d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8008d72:	601a      	str	r2, [r3, #0]
					break;
 8008d74:	e03f      	b.n	8008df6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d76:	4b31      	ldr	r3, [pc, #196]	@ (8008e3c <xTaskIncrementTick+0x150>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	68db      	ldr	r3, [r3, #12]
 8008d7c:	68db      	ldr	r3, [r3, #12]
 8008d7e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008d86:	693a      	ldr	r2, [r7, #16]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d203      	bcs.n	8008d96 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008d8e:	4a2e      	ldr	r2, [pc, #184]	@ (8008e48 <xTaskIncrementTick+0x15c>)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008d94:	e02f      	b.n	8008df6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	3304      	adds	r3, #4
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f7fe fcca 	bl	8007734 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d004      	beq.n	8008db2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	3318      	adds	r3, #24
 8008dac:	4618      	mov	r0, r3
 8008dae:	f7fe fcc1 	bl	8007734 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008db6:	4b25      	ldr	r3, [pc, #148]	@ (8008e4c <xTaskIncrementTick+0x160>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	d903      	bls.n	8008dc6 <xTaskIncrementTick+0xda>
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dc2:	4a22      	ldr	r2, [pc, #136]	@ (8008e4c <xTaskIncrementTick+0x160>)
 8008dc4:	6013      	str	r3, [r2, #0]
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dca:	4613      	mov	r3, r2
 8008dcc:	009b      	lsls	r3, r3, #2
 8008dce:	4413      	add	r3, r2
 8008dd0:	009b      	lsls	r3, r3, #2
 8008dd2:	4a1f      	ldr	r2, [pc, #124]	@ (8008e50 <xTaskIncrementTick+0x164>)
 8008dd4:	441a      	add	r2, r3
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	3304      	adds	r3, #4
 8008dda:	4619      	mov	r1, r3
 8008ddc:	4610      	mov	r0, r2
 8008dde:	f7fe fc4c 	bl	800767a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008de6:	4b1b      	ldr	r3, [pc, #108]	@ (8008e54 <xTaskIncrementTick+0x168>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d3b8      	bcc.n	8008d62 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008df0:	2301      	movs	r3, #1
 8008df2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008df4:	e7b5      	b.n	8008d62 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008df6:	4b17      	ldr	r3, [pc, #92]	@ (8008e54 <xTaskIncrementTick+0x168>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dfc:	4914      	ldr	r1, [pc, #80]	@ (8008e50 <xTaskIncrementTick+0x164>)
 8008dfe:	4613      	mov	r3, r2
 8008e00:	009b      	lsls	r3, r3, #2
 8008e02:	4413      	add	r3, r2
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	440b      	add	r3, r1
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	d901      	bls.n	8008e12 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008e12:	4b11      	ldr	r3, [pc, #68]	@ (8008e58 <xTaskIncrementTick+0x16c>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d007      	beq.n	8008e2a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	617b      	str	r3, [r7, #20]
 8008e1e:	e004      	b.n	8008e2a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008e20:	4b0e      	ldr	r3, [pc, #56]	@ (8008e5c <xTaskIncrementTick+0x170>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	3301      	adds	r3, #1
 8008e26:	4a0d      	ldr	r2, [pc, #52]	@ (8008e5c <xTaskIncrementTick+0x170>)
 8008e28:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008e2a:	697b      	ldr	r3, [r7, #20]
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3718      	adds	r7, #24
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}
 8008e34:	200010c0 	.word	0x200010c0
 8008e38:	2000109c 	.word	0x2000109c
 8008e3c:	20001050 	.word	0x20001050
 8008e40:	20001054 	.word	0x20001054
 8008e44:	200010b0 	.word	0x200010b0
 8008e48:	200010b8 	.word	0x200010b8
 8008e4c:	200010a0 	.word	0x200010a0
 8008e50:	20000bc8 	.word	0x20000bc8
 8008e54:	20000bc4 	.word	0x20000bc4
 8008e58:	200010ac 	.word	0x200010ac
 8008e5c:	200010a8 	.word	0x200010a8

08008e60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008e60:	b480      	push	{r7}
 8008e62:	b085      	sub	sp, #20
 8008e64:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008e66:	4b2b      	ldr	r3, [pc, #172]	@ (8008f14 <vTaskSwitchContext+0xb4>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d003      	beq.n	8008e76 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008e6e:	4b2a      	ldr	r3, [pc, #168]	@ (8008f18 <vTaskSwitchContext+0xb8>)
 8008e70:	2201      	movs	r2, #1
 8008e72:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008e74:	e047      	b.n	8008f06 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8008e76:	4b28      	ldr	r3, [pc, #160]	@ (8008f18 <vTaskSwitchContext+0xb8>)
 8008e78:	2200      	movs	r2, #0
 8008e7a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e7c:	4b27      	ldr	r3, [pc, #156]	@ (8008f1c <vTaskSwitchContext+0xbc>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	60fb      	str	r3, [r7, #12]
 8008e82:	e011      	b.n	8008ea8 <vTaskSwitchContext+0x48>
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d10b      	bne.n	8008ea2 <vTaskSwitchContext+0x42>
	__asm volatile
 8008e8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e8e:	f383 8811 	msr	BASEPRI, r3
 8008e92:	f3bf 8f6f 	isb	sy
 8008e96:	f3bf 8f4f 	dsb	sy
 8008e9a:	607b      	str	r3, [r7, #4]
}
 8008e9c:	bf00      	nop
 8008e9e:	bf00      	nop
 8008ea0:	e7fd      	b.n	8008e9e <vTaskSwitchContext+0x3e>
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	3b01      	subs	r3, #1
 8008ea6:	60fb      	str	r3, [r7, #12]
 8008ea8:	491d      	ldr	r1, [pc, #116]	@ (8008f20 <vTaskSwitchContext+0xc0>)
 8008eaa:	68fa      	ldr	r2, [r7, #12]
 8008eac:	4613      	mov	r3, r2
 8008eae:	009b      	lsls	r3, r3, #2
 8008eb0:	4413      	add	r3, r2
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	440b      	add	r3, r1
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d0e3      	beq.n	8008e84 <vTaskSwitchContext+0x24>
 8008ebc:	68fa      	ldr	r2, [r7, #12]
 8008ebe:	4613      	mov	r3, r2
 8008ec0:	009b      	lsls	r3, r3, #2
 8008ec2:	4413      	add	r3, r2
 8008ec4:	009b      	lsls	r3, r3, #2
 8008ec6:	4a16      	ldr	r2, [pc, #88]	@ (8008f20 <vTaskSwitchContext+0xc0>)
 8008ec8:	4413      	add	r3, r2
 8008eca:	60bb      	str	r3, [r7, #8]
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	685a      	ldr	r2, [r3, #4]
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	605a      	str	r2, [r3, #4]
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	685a      	ldr	r2, [r3, #4]
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	3308      	adds	r3, #8
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	d104      	bne.n	8008eec <vTaskSwitchContext+0x8c>
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	685a      	ldr	r2, [r3, #4]
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	605a      	str	r2, [r3, #4]
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	68db      	ldr	r3, [r3, #12]
 8008ef2:	4a0c      	ldr	r2, [pc, #48]	@ (8008f24 <vTaskSwitchContext+0xc4>)
 8008ef4:	6013      	str	r3, [r2, #0]
 8008ef6:	4a09      	ldr	r2, [pc, #36]	@ (8008f1c <vTaskSwitchContext+0xbc>)
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008efc:	4b09      	ldr	r3, [pc, #36]	@ (8008f24 <vTaskSwitchContext+0xc4>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	3354      	adds	r3, #84	@ 0x54
 8008f02:	4a09      	ldr	r2, [pc, #36]	@ (8008f28 <vTaskSwitchContext+0xc8>)
 8008f04:	6013      	str	r3, [r2, #0]
}
 8008f06:	bf00      	nop
 8008f08:	3714      	adds	r7, #20
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f10:	4770      	bx	lr
 8008f12:	bf00      	nop
 8008f14:	200010c0 	.word	0x200010c0
 8008f18:	200010ac 	.word	0x200010ac
 8008f1c:	200010a0 	.word	0x200010a0
 8008f20:	20000bc8 	.word	0x20000bc8
 8008f24:	20000bc4 	.word	0x20000bc4
 8008f28:	20000064 	.word	0x20000064

08008f2c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b084      	sub	sp, #16
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d10b      	bne.n	8008f54 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008f3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f40:	f383 8811 	msr	BASEPRI, r3
 8008f44:	f3bf 8f6f 	isb	sy
 8008f48:	f3bf 8f4f 	dsb	sy
 8008f4c:	60fb      	str	r3, [r7, #12]
}
 8008f4e:	bf00      	nop
 8008f50:	bf00      	nop
 8008f52:	e7fd      	b.n	8008f50 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f54:	4b07      	ldr	r3, [pc, #28]	@ (8008f74 <vTaskPlaceOnEventList+0x48>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	3318      	adds	r3, #24
 8008f5a:	4619      	mov	r1, r3
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f7fe fbb0 	bl	80076c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008f62:	2101      	movs	r1, #1
 8008f64:	6838      	ldr	r0, [r7, #0]
 8008f66:	f000 fb87 	bl	8009678 <prvAddCurrentTaskToDelayedList>
}
 8008f6a:	bf00      	nop
 8008f6c:	3710      	adds	r7, #16
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}
 8008f72:	bf00      	nop
 8008f74:	20000bc4 	.word	0x20000bc4

08008f78 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b086      	sub	sp, #24
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	60f8      	str	r0, [r7, #12]
 8008f80:	60b9      	str	r1, [r7, #8]
 8008f82:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d10b      	bne.n	8008fa2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f8e:	f383 8811 	msr	BASEPRI, r3
 8008f92:	f3bf 8f6f 	isb	sy
 8008f96:	f3bf 8f4f 	dsb	sy
 8008f9a:	617b      	str	r3, [r7, #20]
}
 8008f9c:	bf00      	nop
 8008f9e:	bf00      	nop
 8008fa0:	e7fd      	b.n	8008f9e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8008fcc <vTaskPlaceOnEventListRestricted+0x54>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	3318      	adds	r3, #24
 8008fa8:	4619      	mov	r1, r3
 8008faa:	68f8      	ldr	r0, [r7, #12]
 8008fac:	f7fe fb65 	bl	800767a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d002      	beq.n	8008fbc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8008fba:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008fbc:	6879      	ldr	r1, [r7, #4]
 8008fbe:	68b8      	ldr	r0, [r7, #8]
 8008fc0:	f000 fb5a 	bl	8009678 <prvAddCurrentTaskToDelayedList>
	}
 8008fc4:	bf00      	nop
 8008fc6:	3718      	adds	r7, #24
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}
 8008fcc:	20000bc4 	.word	0x20000bc4

08008fd0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b086      	sub	sp, #24
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	68db      	ldr	r3, [r3, #12]
 8008fdc:	68db      	ldr	r3, [r3, #12]
 8008fde:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d10b      	bne.n	8008ffe <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fea:	f383 8811 	msr	BASEPRI, r3
 8008fee:	f3bf 8f6f 	isb	sy
 8008ff2:	f3bf 8f4f 	dsb	sy
 8008ff6:	60fb      	str	r3, [r7, #12]
}
 8008ff8:	bf00      	nop
 8008ffa:	bf00      	nop
 8008ffc:	e7fd      	b.n	8008ffa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	3318      	adds	r3, #24
 8009002:	4618      	mov	r0, r3
 8009004:	f7fe fb96 	bl	8007734 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009008:	4b1d      	ldr	r3, [pc, #116]	@ (8009080 <xTaskRemoveFromEventList+0xb0>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d11d      	bne.n	800904c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	3304      	adds	r3, #4
 8009014:	4618      	mov	r0, r3
 8009016:	f7fe fb8d 	bl	8007734 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800901e:	4b19      	ldr	r3, [pc, #100]	@ (8009084 <xTaskRemoveFromEventList+0xb4>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	429a      	cmp	r2, r3
 8009024:	d903      	bls.n	800902e <xTaskRemoveFromEventList+0x5e>
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800902a:	4a16      	ldr	r2, [pc, #88]	@ (8009084 <xTaskRemoveFromEventList+0xb4>)
 800902c:	6013      	str	r3, [r2, #0]
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009032:	4613      	mov	r3, r2
 8009034:	009b      	lsls	r3, r3, #2
 8009036:	4413      	add	r3, r2
 8009038:	009b      	lsls	r3, r3, #2
 800903a:	4a13      	ldr	r2, [pc, #76]	@ (8009088 <xTaskRemoveFromEventList+0xb8>)
 800903c:	441a      	add	r2, r3
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	3304      	adds	r3, #4
 8009042:	4619      	mov	r1, r3
 8009044:	4610      	mov	r0, r2
 8009046:	f7fe fb18 	bl	800767a <vListInsertEnd>
 800904a:	e005      	b.n	8009058 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	3318      	adds	r3, #24
 8009050:	4619      	mov	r1, r3
 8009052:	480e      	ldr	r0, [pc, #56]	@ (800908c <xTaskRemoveFromEventList+0xbc>)
 8009054:	f7fe fb11 	bl	800767a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800905c:	4b0c      	ldr	r3, [pc, #48]	@ (8009090 <xTaskRemoveFromEventList+0xc0>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009062:	429a      	cmp	r2, r3
 8009064:	d905      	bls.n	8009072 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009066:	2301      	movs	r3, #1
 8009068:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800906a:	4b0a      	ldr	r3, [pc, #40]	@ (8009094 <xTaskRemoveFromEventList+0xc4>)
 800906c:	2201      	movs	r2, #1
 800906e:	601a      	str	r2, [r3, #0]
 8009070:	e001      	b.n	8009076 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009072:	2300      	movs	r3, #0
 8009074:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009076:	697b      	ldr	r3, [r7, #20]
}
 8009078:	4618      	mov	r0, r3
 800907a:	3718      	adds	r7, #24
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}
 8009080:	200010c0 	.word	0x200010c0
 8009084:	200010a0 	.word	0x200010a0
 8009088:	20000bc8 	.word	0x20000bc8
 800908c:	20001058 	.word	0x20001058
 8009090:	20000bc4 	.word	0x20000bc4
 8009094:	200010ac 	.word	0x200010ac

08009098 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009098:	b480      	push	{r7}
 800909a:	b083      	sub	sp, #12
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80090a0:	4b06      	ldr	r3, [pc, #24]	@ (80090bc <vTaskInternalSetTimeOutState+0x24>)
 80090a2:	681a      	ldr	r2, [r3, #0]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80090a8:	4b05      	ldr	r3, [pc, #20]	@ (80090c0 <vTaskInternalSetTimeOutState+0x28>)
 80090aa:	681a      	ldr	r2, [r3, #0]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	605a      	str	r2, [r3, #4]
}
 80090b0:	bf00      	nop
 80090b2:	370c      	adds	r7, #12
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr
 80090bc:	200010b0 	.word	0x200010b0
 80090c0:	2000109c 	.word	0x2000109c

080090c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b088      	sub	sp, #32
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d10b      	bne.n	80090ec <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80090d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090d8:	f383 8811 	msr	BASEPRI, r3
 80090dc:	f3bf 8f6f 	isb	sy
 80090e0:	f3bf 8f4f 	dsb	sy
 80090e4:	613b      	str	r3, [r7, #16]
}
 80090e6:	bf00      	nop
 80090e8:	bf00      	nop
 80090ea:	e7fd      	b.n	80090e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d10b      	bne.n	800910a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80090f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090f6:	f383 8811 	msr	BASEPRI, r3
 80090fa:	f3bf 8f6f 	isb	sy
 80090fe:	f3bf 8f4f 	dsb	sy
 8009102:	60fb      	str	r3, [r7, #12]
}
 8009104:	bf00      	nop
 8009106:	bf00      	nop
 8009108:	e7fd      	b.n	8009106 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800910a:	f000 ff95 	bl	800a038 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800910e:	4b1d      	ldr	r3, [pc, #116]	@ (8009184 <xTaskCheckForTimeOut+0xc0>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	69ba      	ldr	r2, [r7, #24]
 800911a:	1ad3      	subs	r3, r2, r3
 800911c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009126:	d102      	bne.n	800912e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009128:	2300      	movs	r3, #0
 800912a:	61fb      	str	r3, [r7, #28]
 800912c:	e023      	b.n	8009176 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681a      	ldr	r2, [r3, #0]
 8009132:	4b15      	ldr	r3, [pc, #84]	@ (8009188 <xTaskCheckForTimeOut+0xc4>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	429a      	cmp	r2, r3
 8009138:	d007      	beq.n	800914a <xTaskCheckForTimeOut+0x86>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	69ba      	ldr	r2, [r7, #24]
 8009140:	429a      	cmp	r2, r3
 8009142:	d302      	bcc.n	800914a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009144:	2301      	movs	r3, #1
 8009146:	61fb      	str	r3, [r7, #28]
 8009148:	e015      	b.n	8009176 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	697a      	ldr	r2, [r7, #20]
 8009150:	429a      	cmp	r2, r3
 8009152:	d20b      	bcs.n	800916c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	681a      	ldr	r2, [r3, #0]
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	1ad2      	subs	r2, r2, r3
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f7ff ff99 	bl	8009098 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009166:	2300      	movs	r3, #0
 8009168:	61fb      	str	r3, [r7, #28]
 800916a:	e004      	b.n	8009176 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	2200      	movs	r2, #0
 8009170:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009172:	2301      	movs	r3, #1
 8009174:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009176:	f000 ff91 	bl	800a09c <vPortExitCritical>

	return xReturn;
 800917a:	69fb      	ldr	r3, [r7, #28]
}
 800917c:	4618      	mov	r0, r3
 800917e:	3720      	adds	r7, #32
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}
 8009184:	2000109c 	.word	0x2000109c
 8009188:	200010b0 	.word	0x200010b0

0800918c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800918c:	b480      	push	{r7}
 800918e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009190:	4b03      	ldr	r3, [pc, #12]	@ (80091a0 <vTaskMissedYield+0x14>)
 8009192:	2201      	movs	r2, #1
 8009194:	601a      	str	r2, [r3, #0]
}
 8009196:	bf00      	nop
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr
 80091a0:	200010ac 	.word	0x200010ac

080091a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b082      	sub	sp, #8
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80091ac:	f000 f852 	bl	8009254 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80091b0:	4b06      	ldr	r3, [pc, #24]	@ (80091cc <prvIdleTask+0x28>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	2b01      	cmp	r3, #1
 80091b6:	d9f9      	bls.n	80091ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80091b8:	4b05      	ldr	r3, [pc, #20]	@ (80091d0 <prvIdleTask+0x2c>)
 80091ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091be:	601a      	str	r2, [r3, #0]
 80091c0:	f3bf 8f4f 	dsb	sy
 80091c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80091c8:	e7f0      	b.n	80091ac <prvIdleTask+0x8>
 80091ca:	bf00      	nop
 80091cc:	20000bc8 	.word	0x20000bc8
 80091d0:	e000ed04 	.word	0xe000ed04

080091d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b082      	sub	sp, #8
 80091d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80091da:	2300      	movs	r3, #0
 80091dc:	607b      	str	r3, [r7, #4]
 80091de:	e00c      	b.n	80091fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80091e0:	687a      	ldr	r2, [r7, #4]
 80091e2:	4613      	mov	r3, r2
 80091e4:	009b      	lsls	r3, r3, #2
 80091e6:	4413      	add	r3, r2
 80091e8:	009b      	lsls	r3, r3, #2
 80091ea:	4a12      	ldr	r2, [pc, #72]	@ (8009234 <prvInitialiseTaskLists+0x60>)
 80091ec:	4413      	add	r3, r2
 80091ee:	4618      	mov	r0, r3
 80091f0:	f7fe fa16 	bl	8007620 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	3301      	adds	r3, #1
 80091f8:	607b      	str	r3, [r7, #4]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2b37      	cmp	r3, #55	@ 0x37
 80091fe:	d9ef      	bls.n	80091e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009200:	480d      	ldr	r0, [pc, #52]	@ (8009238 <prvInitialiseTaskLists+0x64>)
 8009202:	f7fe fa0d 	bl	8007620 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009206:	480d      	ldr	r0, [pc, #52]	@ (800923c <prvInitialiseTaskLists+0x68>)
 8009208:	f7fe fa0a 	bl	8007620 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800920c:	480c      	ldr	r0, [pc, #48]	@ (8009240 <prvInitialiseTaskLists+0x6c>)
 800920e:	f7fe fa07 	bl	8007620 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009212:	480c      	ldr	r0, [pc, #48]	@ (8009244 <prvInitialiseTaskLists+0x70>)
 8009214:	f7fe fa04 	bl	8007620 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009218:	480b      	ldr	r0, [pc, #44]	@ (8009248 <prvInitialiseTaskLists+0x74>)
 800921a:	f7fe fa01 	bl	8007620 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800921e:	4b0b      	ldr	r3, [pc, #44]	@ (800924c <prvInitialiseTaskLists+0x78>)
 8009220:	4a05      	ldr	r2, [pc, #20]	@ (8009238 <prvInitialiseTaskLists+0x64>)
 8009222:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009224:	4b0a      	ldr	r3, [pc, #40]	@ (8009250 <prvInitialiseTaskLists+0x7c>)
 8009226:	4a05      	ldr	r2, [pc, #20]	@ (800923c <prvInitialiseTaskLists+0x68>)
 8009228:	601a      	str	r2, [r3, #0]
}
 800922a:	bf00      	nop
 800922c:	3708      	adds	r7, #8
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
 8009232:	bf00      	nop
 8009234:	20000bc8 	.word	0x20000bc8
 8009238:	20001028 	.word	0x20001028
 800923c:	2000103c 	.word	0x2000103c
 8009240:	20001058 	.word	0x20001058
 8009244:	2000106c 	.word	0x2000106c
 8009248:	20001084 	.word	0x20001084
 800924c:	20001050 	.word	0x20001050
 8009250:	20001054 	.word	0x20001054

08009254 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b082      	sub	sp, #8
 8009258:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800925a:	e019      	b.n	8009290 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800925c:	f000 feec 	bl	800a038 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009260:	4b10      	ldr	r3, [pc, #64]	@ (80092a4 <prvCheckTasksWaitingTermination+0x50>)
 8009262:	68db      	ldr	r3, [r3, #12]
 8009264:	68db      	ldr	r3, [r3, #12]
 8009266:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	3304      	adds	r3, #4
 800926c:	4618      	mov	r0, r3
 800926e:	f7fe fa61 	bl	8007734 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009272:	4b0d      	ldr	r3, [pc, #52]	@ (80092a8 <prvCheckTasksWaitingTermination+0x54>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	3b01      	subs	r3, #1
 8009278:	4a0b      	ldr	r2, [pc, #44]	@ (80092a8 <prvCheckTasksWaitingTermination+0x54>)
 800927a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800927c:	4b0b      	ldr	r3, [pc, #44]	@ (80092ac <prvCheckTasksWaitingTermination+0x58>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	3b01      	subs	r3, #1
 8009282:	4a0a      	ldr	r2, [pc, #40]	@ (80092ac <prvCheckTasksWaitingTermination+0x58>)
 8009284:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009286:	f000 ff09 	bl	800a09c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f000 f810 	bl	80092b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009290:	4b06      	ldr	r3, [pc, #24]	@ (80092ac <prvCheckTasksWaitingTermination+0x58>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d1e1      	bne.n	800925c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009298:	bf00      	nop
 800929a:	bf00      	nop
 800929c:	3708      	adds	r7, #8
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}
 80092a2:	bf00      	nop
 80092a4:	2000106c 	.word	0x2000106c
 80092a8:	20001098 	.word	0x20001098
 80092ac:	20001080 	.word	0x20001080

080092b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b084      	sub	sp, #16
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	3354      	adds	r3, #84	@ 0x54
 80092bc:	4618      	mov	r0, r3
 80092be:	f002 fb1d 	bl	800b8fc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d108      	bne.n	80092de <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092d0:	4618      	mov	r0, r3
 80092d2:	f001 f8a1 	bl	800a418 <vPortFree>
				vPortFree( pxTCB );
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f001 f89e 	bl	800a418 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80092dc:	e019      	b.n	8009312 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80092e4:	2b01      	cmp	r3, #1
 80092e6:	d103      	bne.n	80092f0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f001 f895 	bl	800a418 <vPortFree>
	}
 80092ee:	e010      	b.n	8009312 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80092f6:	2b02      	cmp	r3, #2
 80092f8:	d00b      	beq.n	8009312 <prvDeleteTCB+0x62>
	__asm volatile
 80092fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092fe:	f383 8811 	msr	BASEPRI, r3
 8009302:	f3bf 8f6f 	isb	sy
 8009306:	f3bf 8f4f 	dsb	sy
 800930a:	60fb      	str	r3, [r7, #12]
}
 800930c:	bf00      	nop
 800930e:	bf00      	nop
 8009310:	e7fd      	b.n	800930e <prvDeleteTCB+0x5e>
	}
 8009312:	bf00      	nop
 8009314:	3710      	adds	r7, #16
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}
	...

0800931c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800931c:	b480      	push	{r7}
 800931e:	b083      	sub	sp, #12
 8009320:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009322:	4b0c      	ldr	r3, [pc, #48]	@ (8009354 <prvResetNextTaskUnblockTime+0x38>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d104      	bne.n	8009336 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800932c:	4b0a      	ldr	r3, [pc, #40]	@ (8009358 <prvResetNextTaskUnblockTime+0x3c>)
 800932e:	f04f 32ff 	mov.w	r2, #4294967295
 8009332:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009334:	e008      	b.n	8009348 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009336:	4b07      	ldr	r3, [pc, #28]	@ (8009354 <prvResetNextTaskUnblockTime+0x38>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	68db      	ldr	r3, [r3, #12]
 800933c:	68db      	ldr	r3, [r3, #12]
 800933e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	685b      	ldr	r3, [r3, #4]
 8009344:	4a04      	ldr	r2, [pc, #16]	@ (8009358 <prvResetNextTaskUnblockTime+0x3c>)
 8009346:	6013      	str	r3, [r2, #0]
}
 8009348:	bf00      	nop
 800934a:	370c      	adds	r7, #12
 800934c:	46bd      	mov	sp, r7
 800934e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009352:	4770      	bx	lr
 8009354:	20001050 	.word	0x20001050
 8009358:	200010b8 	.word	0x200010b8

0800935c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800935c:	b480      	push	{r7}
 800935e:	b083      	sub	sp, #12
 8009360:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009362:	4b0b      	ldr	r3, [pc, #44]	@ (8009390 <xTaskGetSchedulerState+0x34>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d102      	bne.n	8009370 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800936a:	2301      	movs	r3, #1
 800936c:	607b      	str	r3, [r7, #4]
 800936e:	e008      	b.n	8009382 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009370:	4b08      	ldr	r3, [pc, #32]	@ (8009394 <xTaskGetSchedulerState+0x38>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d102      	bne.n	800937e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009378:	2302      	movs	r3, #2
 800937a:	607b      	str	r3, [r7, #4]
 800937c:	e001      	b.n	8009382 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800937e:	2300      	movs	r3, #0
 8009380:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009382:	687b      	ldr	r3, [r7, #4]
	}
 8009384:	4618      	mov	r0, r3
 8009386:	370c      	adds	r7, #12
 8009388:	46bd      	mov	sp, r7
 800938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938e:	4770      	bx	lr
 8009390:	200010a4 	.word	0x200010a4
 8009394:	200010c0 	.word	0x200010c0

08009398 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009398:	b580      	push	{r7, lr}
 800939a:	b084      	sub	sp, #16
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80093a4:	2300      	movs	r3, #0
 80093a6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d051      	beq.n	8009452 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093b2:	4b2a      	ldr	r3, [pc, #168]	@ (800945c <xTaskPriorityInherit+0xc4>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093b8:	429a      	cmp	r2, r3
 80093ba:	d241      	bcs.n	8009440 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	699b      	ldr	r3, [r3, #24]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	db06      	blt.n	80093d2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093c4:	4b25      	ldr	r3, [pc, #148]	@ (800945c <xTaskPriorityInherit+0xc4>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093ca:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	6959      	ldr	r1, [r3, #20]
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093da:	4613      	mov	r3, r2
 80093dc:	009b      	lsls	r3, r3, #2
 80093de:	4413      	add	r3, r2
 80093e0:	009b      	lsls	r3, r3, #2
 80093e2:	4a1f      	ldr	r2, [pc, #124]	@ (8009460 <xTaskPriorityInherit+0xc8>)
 80093e4:	4413      	add	r3, r2
 80093e6:	4299      	cmp	r1, r3
 80093e8:	d122      	bne.n	8009430 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	3304      	adds	r3, #4
 80093ee:	4618      	mov	r0, r3
 80093f0:	f7fe f9a0 	bl	8007734 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80093f4:	4b19      	ldr	r3, [pc, #100]	@ (800945c <xTaskPriorityInherit+0xc4>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009402:	4b18      	ldr	r3, [pc, #96]	@ (8009464 <xTaskPriorityInherit+0xcc>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	429a      	cmp	r2, r3
 8009408:	d903      	bls.n	8009412 <xTaskPriorityInherit+0x7a>
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800940e:	4a15      	ldr	r2, [pc, #84]	@ (8009464 <xTaskPriorityInherit+0xcc>)
 8009410:	6013      	str	r3, [r2, #0]
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009416:	4613      	mov	r3, r2
 8009418:	009b      	lsls	r3, r3, #2
 800941a:	4413      	add	r3, r2
 800941c:	009b      	lsls	r3, r3, #2
 800941e:	4a10      	ldr	r2, [pc, #64]	@ (8009460 <xTaskPriorityInherit+0xc8>)
 8009420:	441a      	add	r2, r3
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	3304      	adds	r3, #4
 8009426:	4619      	mov	r1, r3
 8009428:	4610      	mov	r0, r2
 800942a:	f7fe f926 	bl	800767a <vListInsertEnd>
 800942e:	e004      	b.n	800943a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009430:	4b0a      	ldr	r3, [pc, #40]	@ (800945c <xTaskPriorityInherit+0xc4>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800943a:	2301      	movs	r3, #1
 800943c:	60fb      	str	r3, [r7, #12]
 800943e:	e008      	b.n	8009452 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009444:	4b05      	ldr	r3, [pc, #20]	@ (800945c <xTaskPriorityInherit+0xc4>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800944a:	429a      	cmp	r2, r3
 800944c:	d201      	bcs.n	8009452 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800944e:	2301      	movs	r3, #1
 8009450:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009452:	68fb      	ldr	r3, [r7, #12]
	}
 8009454:	4618      	mov	r0, r3
 8009456:	3710      	adds	r7, #16
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}
 800945c:	20000bc4 	.word	0x20000bc4
 8009460:	20000bc8 	.word	0x20000bc8
 8009464:	200010a0 	.word	0x200010a0

08009468 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009468:	b580      	push	{r7, lr}
 800946a:	b086      	sub	sp, #24
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009474:	2300      	movs	r3, #0
 8009476:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d058      	beq.n	8009530 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800947e:	4b2f      	ldr	r3, [pc, #188]	@ (800953c <xTaskPriorityDisinherit+0xd4>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	693a      	ldr	r2, [r7, #16]
 8009484:	429a      	cmp	r2, r3
 8009486:	d00b      	beq.n	80094a0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800948c:	f383 8811 	msr	BASEPRI, r3
 8009490:	f3bf 8f6f 	isb	sy
 8009494:	f3bf 8f4f 	dsb	sy
 8009498:	60fb      	str	r3, [r7, #12]
}
 800949a:	bf00      	nop
 800949c:	bf00      	nop
 800949e:	e7fd      	b.n	800949c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d10b      	bne.n	80094c0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80094a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094ac:	f383 8811 	msr	BASEPRI, r3
 80094b0:	f3bf 8f6f 	isb	sy
 80094b4:	f3bf 8f4f 	dsb	sy
 80094b8:	60bb      	str	r3, [r7, #8]
}
 80094ba:	bf00      	nop
 80094bc:	bf00      	nop
 80094be:	e7fd      	b.n	80094bc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094c4:	1e5a      	subs	r2, r3, #1
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094d2:	429a      	cmp	r2, r3
 80094d4:	d02c      	beq.n	8009530 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d128      	bne.n	8009530 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	3304      	adds	r3, #4
 80094e2:	4618      	mov	r0, r3
 80094e4:	f7fe f926 	bl	8007734 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094f0:	693b      	ldr	r3, [r7, #16]
 80094f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094f4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009500:	4b0f      	ldr	r3, [pc, #60]	@ (8009540 <xTaskPriorityDisinherit+0xd8>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	429a      	cmp	r2, r3
 8009506:	d903      	bls.n	8009510 <xTaskPriorityDisinherit+0xa8>
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800950c:	4a0c      	ldr	r2, [pc, #48]	@ (8009540 <xTaskPriorityDisinherit+0xd8>)
 800950e:	6013      	str	r3, [r2, #0]
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009514:	4613      	mov	r3, r2
 8009516:	009b      	lsls	r3, r3, #2
 8009518:	4413      	add	r3, r2
 800951a:	009b      	lsls	r3, r3, #2
 800951c:	4a09      	ldr	r2, [pc, #36]	@ (8009544 <xTaskPriorityDisinherit+0xdc>)
 800951e:	441a      	add	r2, r3
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	3304      	adds	r3, #4
 8009524:	4619      	mov	r1, r3
 8009526:	4610      	mov	r0, r2
 8009528:	f7fe f8a7 	bl	800767a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800952c:	2301      	movs	r3, #1
 800952e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009530:	697b      	ldr	r3, [r7, #20]
	}
 8009532:	4618      	mov	r0, r3
 8009534:	3718      	adds	r7, #24
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
 800953a:	bf00      	nop
 800953c:	20000bc4 	.word	0x20000bc4
 8009540:	200010a0 	.word	0x200010a0
 8009544:	20000bc8 	.word	0x20000bc8

08009548 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009548:	b580      	push	{r7, lr}
 800954a:	b088      	sub	sp, #32
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009556:	2301      	movs	r3, #1
 8009558:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d06c      	beq.n	800963a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009560:	69bb      	ldr	r3, [r7, #24]
 8009562:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009564:	2b00      	cmp	r3, #0
 8009566:	d10b      	bne.n	8009580 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8009568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800956c:	f383 8811 	msr	BASEPRI, r3
 8009570:	f3bf 8f6f 	isb	sy
 8009574:	f3bf 8f4f 	dsb	sy
 8009578:	60fb      	str	r3, [r7, #12]
}
 800957a:	bf00      	nop
 800957c:	bf00      	nop
 800957e:	e7fd      	b.n	800957c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009580:	69bb      	ldr	r3, [r7, #24]
 8009582:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009584:	683a      	ldr	r2, [r7, #0]
 8009586:	429a      	cmp	r2, r3
 8009588:	d902      	bls.n	8009590 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	61fb      	str	r3, [r7, #28]
 800958e:	e002      	b.n	8009596 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009590:	69bb      	ldr	r3, [r7, #24]
 8009592:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009594:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009596:	69bb      	ldr	r3, [r7, #24]
 8009598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800959a:	69fa      	ldr	r2, [r7, #28]
 800959c:	429a      	cmp	r2, r3
 800959e:	d04c      	beq.n	800963a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80095a0:	69bb      	ldr	r3, [r7, #24]
 80095a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095a4:	697a      	ldr	r2, [r7, #20]
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d147      	bne.n	800963a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80095aa:	4b26      	ldr	r3, [pc, #152]	@ (8009644 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	69ba      	ldr	r2, [r7, #24]
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d10b      	bne.n	80095cc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80095b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095b8:	f383 8811 	msr	BASEPRI, r3
 80095bc:	f3bf 8f6f 	isb	sy
 80095c0:	f3bf 8f4f 	dsb	sy
 80095c4:	60bb      	str	r3, [r7, #8]
}
 80095c6:	bf00      	nop
 80095c8:	bf00      	nop
 80095ca:	e7fd      	b.n	80095c8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80095cc:	69bb      	ldr	r3, [r7, #24]
 80095ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095d0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80095d2:	69bb      	ldr	r3, [r7, #24]
 80095d4:	69fa      	ldr	r2, [r7, #28]
 80095d6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80095d8:	69bb      	ldr	r3, [r7, #24]
 80095da:	699b      	ldr	r3, [r3, #24]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	db04      	blt.n	80095ea <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095e0:	69fb      	ldr	r3, [r7, #28]
 80095e2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80095e6:	69bb      	ldr	r3, [r7, #24]
 80095e8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80095ea:	69bb      	ldr	r3, [r7, #24]
 80095ec:	6959      	ldr	r1, [r3, #20]
 80095ee:	693a      	ldr	r2, [r7, #16]
 80095f0:	4613      	mov	r3, r2
 80095f2:	009b      	lsls	r3, r3, #2
 80095f4:	4413      	add	r3, r2
 80095f6:	009b      	lsls	r3, r3, #2
 80095f8:	4a13      	ldr	r2, [pc, #76]	@ (8009648 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80095fa:	4413      	add	r3, r2
 80095fc:	4299      	cmp	r1, r3
 80095fe:	d11c      	bne.n	800963a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009600:	69bb      	ldr	r3, [r7, #24]
 8009602:	3304      	adds	r3, #4
 8009604:	4618      	mov	r0, r3
 8009606:	f7fe f895 	bl	8007734 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800960a:	69bb      	ldr	r3, [r7, #24]
 800960c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800960e:	4b0f      	ldr	r3, [pc, #60]	@ (800964c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	429a      	cmp	r2, r3
 8009614:	d903      	bls.n	800961e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8009616:	69bb      	ldr	r3, [r7, #24]
 8009618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800961a:	4a0c      	ldr	r2, [pc, #48]	@ (800964c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800961c:	6013      	str	r3, [r2, #0]
 800961e:	69bb      	ldr	r3, [r7, #24]
 8009620:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009622:	4613      	mov	r3, r2
 8009624:	009b      	lsls	r3, r3, #2
 8009626:	4413      	add	r3, r2
 8009628:	009b      	lsls	r3, r3, #2
 800962a:	4a07      	ldr	r2, [pc, #28]	@ (8009648 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800962c:	441a      	add	r2, r3
 800962e:	69bb      	ldr	r3, [r7, #24]
 8009630:	3304      	adds	r3, #4
 8009632:	4619      	mov	r1, r3
 8009634:	4610      	mov	r0, r2
 8009636:	f7fe f820 	bl	800767a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800963a:	bf00      	nop
 800963c:	3720      	adds	r7, #32
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}
 8009642:	bf00      	nop
 8009644:	20000bc4 	.word	0x20000bc4
 8009648:	20000bc8 	.word	0x20000bc8
 800964c:	200010a0 	.word	0x200010a0

08009650 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009650:	b480      	push	{r7}
 8009652:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009654:	4b07      	ldr	r3, [pc, #28]	@ (8009674 <pvTaskIncrementMutexHeldCount+0x24>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d004      	beq.n	8009666 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800965c:	4b05      	ldr	r3, [pc, #20]	@ (8009674 <pvTaskIncrementMutexHeldCount+0x24>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009662:	3201      	adds	r2, #1
 8009664:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8009666:	4b03      	ldr	r3, [pc, #12]	@ (8009674 <pvTaskIncrementMutexHeldCount+0x24>)
 8009668:	681b      	ldr	r3, [r3, #0]
	}
 800966a:	4618      	mov	r0, r3
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr
 8009674:	20000bc4 	.word	0x20000bc4

08009678 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b084      	sub	sp, #16
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009682:	4b21      	ldr	r3, [pc, #132]	@ (8009708 <prvAddCurrentTaskToDelayedList+0x90>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009688:	4b20      	ldr	r3, [pc, #128]	@ (800970c <prvAddCurrentTaskToDelayedList+0x94>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	3304      	adds	r3, #4
 800968e:	4618      	mov	r0, r3
 8009690:	f7fe f850 	bl	8007734 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800969a:	d10a      	bne.n	80096b2 <prvAddCurrentTaskToDelayedList+0x3a>
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d007      	beq.n	80096b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096a2:	4b1a      	ldr	r3, [pc, #104]	@ (800970c <prvAddCurrentTaskToDelayedList+0x94>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	3304      	adds	r3, #4
 80096a8:	4619      	mov	r1, r3
 80096aa:	4819      	ldr	r0, [pc, #100]	@ (8009710 <prvAddCurrentTaskToDelayedList+0x98>)
 80096ac:	f7fd ffe5 	bl	800767a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80096b0:	e026      	b.n	8009700 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80096b2:	68fa      	ldr	r2, [r7, #12]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	4413      	add	r3, r2
 80096b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80096ba:	4b14      	ldr	r3, [pc, #80]	@ (800970c <prvAddCurrentTaskToDelayedList+0x94>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	68ba      	ldr	r2, [r7, #8]
 80096c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80096c2:	68ba      	ldr	r2, [r7, #8]
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d209      	bcs.n	80096de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096ca:	4b12      	ldr	r3, [pc, #72]	@ (8009714 <prvAddCurrentTaskToDelayedList+0x9c>)
 80096cc:	681a      	ldr	r2, [r3, #0]
 80096ce:	4b0f      	ldr	r3, [pc, #60]	@ (800970c <prvAddCurrentTaskToDelayedList+0x94>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	3304      	adds	r3, #4
 80096d4:	4619      	mov	r1, r3
 80096d6:	4610      	mov	r0, r2
 80096d8:	f7fd fff3 	bl	80076c2 <vListInsert>
}
 80096dc:	e010      	b.n	8009700 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096de:	4b0e      	ldr	r3, [pc, #56]	@ (8009718 <prvAddCurrentTaskToDelayedList+0xa0>)
 80096e0:	681a      	ldr	r2, [r3, #0]
 80096e2:	4b0a      	ldr	r3, [pc, #40]	@ (800970c <prvAddCurrentTaskToDelayedList+0x94>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	3304      	adds	r3, #4
 80096e8:	4619      	mov	r1, r3
 80096ea:	4610      	mov	r0, r2
 80096ec:	f7fd ffe9 	bl	80076c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80096f0:	4b0a      	ldr	r3, [pc, #40]	@ (800971c <prvAddCurrentTaskToDelayedList+0xa4>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	68ba      	ldr	r2, [r7, #8]
 80096f6:	429a      	cmp	r2, r3
 80096f8:	d202      	bcs.n	8009700 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80096fa:	4a08      	ldr	r2, [pc, #32]	@ (800971c <prvAddCurrentTaskToDelayedList+0xa4>)
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	6013      	str	r3, [r2, #0]
}
 8009700:	bf00      	nop
 8009702:	3710      	adds	r7, #16
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}
 8009708:	2000109c 	.word	0x2000109c
 800970c:	20000bc4 	.word	0x20000bc4
 8009710:	20001084 	.word	0x20001084
 8009714:	20001054 	.word	0x20001054
 8009718:	20001050 	.word	0x20001050
 800971c:	200010b8 	.word	0x200010b8

08009720 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b08a      	sub	sp, #40	@ 0x28
 8009724:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009726:	2300      	movs	r3, #0
 8009728:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800972a:	f000 fb13 	bl	8009d54 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800972e:	4b1d      	ldr	r3, [pc, #116]	@ (80097a4 <xTimerCreateTimerTask+0x84>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d021      	beq.n	800977a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009736:	2300      	movs	r3, #0
 8009738:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800973a:	2300      	movs	r3, #0
 800973c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800973e:	1d3a      	adds	r2, r7, #4
 8009740:	f107 0108 	add.w	r1, r7, #8
 8009744:	f107 030c 	add.w	r3, r7, #12
 8009748:	4618      	mov	r0, r3
 800974a:	f7fd ff4f 	bl	80075ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800974e:	6879      	ldr	r1, [r7, #4]
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	68fa      	ldr	r2, [r7, #12]
 8009754:	9202      	str	r2, [sp, #8]
 8009756:	9301      	str	r3, [sp, #4]
 8009758:	2302      	movs	r3, #2
 800975a:	9300      	str	r3, [sp, #0]
 800975c:	2300      	movs	r3, #0
 800975e:	460a      	mov	r2, r1
 8009760:	4911      	ldr	r1, [pc, #68]	@ (80097a8 <xTimerCreateTimerTask+0x88>)
 8009762:	4812      	ldr	r0, [pc, #72]	@ (80097ac <xTimerCreateTimerTask+0x8c>)
 8009764:	f7fe ff90 	bl	8008688 <xTaskCreateStatic>
 8009768:	4603      	mov	r3, r0
 800976a:	4a11      	ldr	r2, [pc, #68]	@ (80097b0 <xTimerCreateTimerTask+0x90>)
 800976c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800976e:	4b10      	ldr	r3, [pc, #64]	@ (80097b0 <xTimerCreateTimerTask+0x90>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d001      	beq.n	800977a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009776:	2301      	movs	r3, #1
 8009778:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d10b      	bne.n	8009798 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009784:	f383 8811 	msr	BASEPRI, r3
 8009788:	f3bf 8f6f 	isb	sy
 800978c:	f3bf 8f4f 	dsb	sy
 8009790:	613b      	str	r3, [r7, #16]
}
 8009792:	bf00      	nop
 8009794:	bf00      	nop
 8009796:	e7fd      	b.n	8009794 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009798:	697b      	ldr	r3, [r7, #20]
}
 800979a:	4618      	mov	r0, r3
 800979c:	3718      	adds	r7, #24
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
 80097a2:	bf00      	nop
 80097a4:	200010f4 	.word	0x200010f4
 80097a8:	0800fe2c 	.word	0x0800fe2c
 80097ac:	080098ed 	.word	0x080098ed
 80097b0:	200010f8 	.word	0x200010f8

080097b4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b08a      	sub	sp, #40	@ 0x28
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	60f8      	str	r0, [r7, #12]
 80097bc:	60b9      	str	r1, [r7, #8]
 80097be:	607a      	str	r2, [r7, #4]
 80097c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80097c2:	2300      	movs	r3, #0
 80097c4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d10b      	bne.n	80097e4 <xTimerGenericCommand+0x30>
	__asm volatile
 80097cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097d0:	f383 8811 	msr	BASEPRI, r3
 80097d4:	f3bf 8f6f 	isb	sy
 80097d8:	f3bf 8f4f 	dsb	sy
 80097dc:	623b      	str	r3, [r7, #32]
}
 80097de:	bf00      	nop
 80097e0:	bf00      	nop
 80097e2:	e7fd      	b.n	80097e0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80097e4:	4b19      	ldr	r3, [pc, #100]	@ (800984c <xTimerGenericCommand+0x98>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d02a      	beq.n	8009842 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	2b05      	cmp	r3, #5
 80097fc:	dc18      	bgt.n	8009830 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80097fe:	f7ff fdad 	bl	800935c <xTaskGetSchedulerState>
 8009802:	4603      	mov	r3, r0
 8009804:	2b02      	cmp	r3, #2
 8009806:	d109      	bne.n	800981c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009808:	4b10      	ldr	r3, [pc, #64]	@ (800984c <xTimerGenericCommand+0x98>)
 800980a:	6818      	ldr	r0, [r3, #0]
 800980c:	f107 0110 	add.w	r1, r7, #16
 8009810:	2300      	movs	r3, #0
 8009812:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009814:	f7fe f930 	bl	8007a78 <xQueueGenericSend>
 8009818:	6278      	str	r0, [r7, #36]	@ 0x24
 800981a:	e012      	b.n	8009842 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800981c:	4b0b      	ldr	r3, [pc, #44]	@ (800984c <xTimerGenericCommand+0x98>)
 800981e:	6818      	ldr	r0, [r3, #0]
 8009820:	f107 0110 	add.w	r1, r7, #16
 8009824:	2300      	movs	r3, #0
 8009826:	2200      	movs	r2, #0
 8009828:	f7fe f926 	bl	8007a78 <xQueueGenericSend>
 800982c:	6278      	str	r0, [r7, #36]	@ 0x24
 800982e:	e008      	b.n	8009842 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009830:	4b06      	ldr	r3, [pc, #24]	@ (800984c <xTimerGenericCommand+0x98>)
 8009832:	6818      	ldr	r0, [r3, #0]
 8009834:	f107 0110 	add.w	r1, r7, #16
 8009838:	2300      	movs	r3, #0
 800983a:	683a      	ldr	r2, [r7, #0]
 800983c:	f7fe fa1e 	bl	8007c7c <xQueueGenericSendFromISR>
 8009840:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009844:	4618      	mov	r0, r3
 8009846:	3728      	adds	r7, #40	@ 0x28
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}
 800984c:	200010f4 	.word	0x200010f4

08009850 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b088      	sub	sp, #32
 8009854:	af02      	add	r7, sp, #8
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800985a:	4b23      	ldr	r3, [pc, #140]	@ (80098e8 <prvProcessExpiredTimer+0x98>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	68db      	ldr	r3, [r3, #12]
 8009860:	68db      	ldr	r3, [r3, #12]
 8009862:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	3304      	adds	r3, #4
 8009868:	4618      	mov	r0, r3
 800986a:	f7fd ff63 	bl	8007734 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009874:	f003 0304 	and.w	r3, r3, #4
 8009878:	2b00      	cmp	r3, #0
 800987a:	d023      	beq.n	80098c4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	699a      	ldr	r2, [r3, #24]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	18d1      	adds	r1, r2, r3
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	683a      	ldr	r2, [r7, #0]
 8009888:	6978      	ldr	r0, [r7, #20]
 800988a:	f000 f8d5 	bl	8009a38 <prvInsertTimerInActiveList>
 800988e:	4603      	mov	r3, r0
 8009890:	2b00      	cmp	r3, #0
 8009892:	d020      	beq.n	80098d6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009894:	2300      	movs	r3, #0
 8009896:	9300      	str	r3, [sp, #0]
 8009898:	2300      	movs	r3, #0
 800989a:	687a      	ldr	r2, [r7, #4]
 800989c:	2100      	movs	r1, #0
 800989e:	6978      	ldr	r0, [r7, #20]
 80098a0:	f7ff ff88 	bl	80097b4 <xTimerGenericCommand>
 80098a4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d114      	bne.n	80098d6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80098ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098b0:	f383 8811 	msr	BASEPRI, r3
 80098b4:	f3bf 8f6f 	isb	sy
 80098b8:	f3bf 8f4f 	dsb	sy
 80098bc:	60fb      	str	r3, [r7, #12]
}
 80098be:	bf00      	nop
 80098c0:	bf00      	nop
 80098c2:	e7fd      	b.n	80098c0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80098ca:	f023 0301 	bic.w	r3, r3, #1
 80098ce:	b2da      	uxtb	r2, r3
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	6a1b      	ldr	r3, [r3, #32]
 80098da:	6978      	ldr	r0, [r7, #20]
 80098dc:	4798      	blx	r3
}
 80098de:	bf00      	nop
 80098e0:	3718      	adds	r7, #24
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}
 80098e6:	bf00      	nop
 80098e8:	200010ec 	.word	0x200010ec

080098ec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b084      	sub	sp, #16
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80098f4:	f107 0308 	add.w	r3, r7, #8
 80098f8:	4618      	mov	r0, r3
 80098fa:	f000 f859 	bl	80099b0 <prvGetNextExpireTime>
 80098fe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	4619      	mov	r1, r3
 8009904:	68f8      	ldr	r0, [r7, #12]
 8009906:	f000 f805 	bl	8009914 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800990a:	f000 f8d7 	bl	8009abc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800990e:	bf00      	nop
 8009910:	e7f0      	b.n	80098f4 <prvTimerTask+0x8>
	...

08009914 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b084      	sub	sp, #16
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800991e:	f7ff f917 	bl	8008b50 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009922:	f107 0308 	add.w	r3, r7, #8
 8009926:	4618      	mov	r0, r3
 8009928:	f000 f866 	bl	80099f8 <prvSampleTimeNow>
 800992c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d130      	bne.n	8009996 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d10a      	bne.n	8009950 <prvProcessTimerOrBlockTask+0x3c>
 800993a:	687a      	ldr	r2, [r7, #4]
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	429a      	cmp	r2, r3
 8009940:	d806      	bhi.n	8009950 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009942:	f7ff f913 	bl	8008b6c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009946:	68f9      	ldr	r1, [r7, #12]
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f7ff ff81 	bl	8009850 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800994e:	e024      	b.n	800999a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d008      	beq.n	8009968 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009956:	4b13      	ldr	r3, [pc, #76]	@ (80099a4 <prvProcessTimerOrBlockTask+0x90>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d101      	bne.n	8009964 <prvProcessTimerOrBlockTask+0x50>
 8009960:	2301      	movs	r3, #1
 8009962:	e000      	b.n	8009966 <prvProcessTimerOrBlockTask+0x52>
 8009964:	2300      	movs	r3, #0
 8009966:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009968:	4b0f      	ldr	r3, [pc, #60]	@ (80099a8 <prvProcessTimerOrBlockTask+0x94>)
 800996a:	6818      	ldr	r0, [r3, #0]
 800996c:	687a      	ldr	r2, [r7, #4]
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	1ad3      	subs	r3, r2, r3
 8009972:	683a      	ldr	r2, [r7, #0]
 8009974:	4619      	mov	r1, r3
 8009976:	f7fe fe53 	bl	8008620 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800997a:	f7ff f8f7 	bl	8008b6c <xTaskResumeAll>
 800997e:	4603      	mov	r3, r0
 8009980:	2b00      	cmp	r3, #0
 8009982:	d10a      	bne.n	800999a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009984:	4b09      	ldr	r3, [pc, #36]	@ (80099ac <prvProcessTimerOrBlockTask+0x98>)
 8009986:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800998a:	601a      	str	r2, [r3, #0]
 800998c:	f3bf 8f4f 	dsb	sy
 8009990:	f3bf 8f6f 	isb	sy
}
 8009994:	e001      	b.n	800999a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009996:	f7ff f8e9 	bl	8008b6c <xTaskResumeAll>
}
 800999a:	bf00      	nop
 800999c:	3710      	adds	r7, #16
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}
 80099a2:	bf00      	nop
 80099a4:	200010f0 	.word	0x200010f0
 80099a8:	200010f4 	.word	0x200010f4
 80099ac:	e000ed04 	.word	0xe000ed04

080099b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80099b0:	b480      	push	{r7}
 80099b2:	b085      	sub	sp, #20
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80099b8:	4b0e      	ldr	r3, [pc, #56]	@ (80099f4 <prvGetNextExpireTime+0x44>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d101      	bne.n	80099c6 <prvGetNextExpireTime+0x16>
 80099c2:	2201      	movs	r2, #1
 80099c4:	e000      	b.n	80099c8 <prvGetNextExpireTime+0x18>
 80099c6:	2200      	movs	r2, #0
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d105      	bne.n	80099e0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80099d4:	4b07      	ldr	r3, [pc, #28]	@ (80099f4 <prvGetNextExpireTime+0x44>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	68db      	ldr	r3, [r3, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	60fb      	str	r3, [r7, #12]
 80099de:	e001      	b.n	80099e4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80099e0:	2300      	movs	r3, #0
 80099e2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80099e4:	68fb      	ldr	r3, [r7, #12]
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3714      	adds	r7, #20
 80099ea:	46bd      	mov	sp, r7
 80099ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f0:	4770      	bx	lr
 80099f2:	bf00      	nop
 80099f4:	200010ec 	.word	0x200010ec

080099f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b084      	sub	sp, #16
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009a00:	f7ff f952 	bl	8008ca8 <xTaskGetTickCount>
 8009a04:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009a06:	4b0b      	ldr	r3, [pc, #44]	@ (8009a34 <prvSampleTimeNow+0x3c>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	68fa      	ldr	r2, [r7, #12]
 8009a0c:	429a      	cmp	r2, r3
 8009a0e:	d205      	bcs.n	8009a1c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009a10:	f000 f93a 	bl	8009c88 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2201      	movs	r2, #1
 8009a18:	601a      	str	r2, [r3, #0]
 8009a1a:	e002      	b.n	8009a22 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009a22:	4a04      	ldr	r2, [pc, #16]	@ (8009a34 <prvSampleTimeNow+0x3c>)
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009a28:	68fb      	ldr	r3, [r7, #12]
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3710      	adds	r7, #16
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}
 8009a32:	bf00      	nop
 8009a34:	200010fc 	.word	0x200010fc

08009a38 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b086      	sub	sp, #24
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	60f8      	str	r0, [r7, #12]
 8009a40:	60b9      	str	r1, [r7, #8]
 8009a42:	607a      	str	r2, [r7, #4]
 8009a44:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009a46:	2300      	movs	r3, #0
 8009a48:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	68ba      	ldr	r2, [r7, #8]
 8009a4e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	68fa      	ldr	r2, [r7, #12]
 8009a54:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009a56:	68ba      	ldr	r2, [r7, #8]
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	d812      	bhi.n	8009a84 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a5e:	687a      	ldr	r2, [r7, #4]
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	1ad2      	subs	r2, r2, r3
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	699b      	ldr	r3, [r3, #24]
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d302      	bcc.n	8009a72 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	617b      	str	r3, [r7, #20]
 8009a70:	e01b      	b.n	8009aaa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009a72:	4b10      	ldr	r3, [pc, #64]	@ (8009ab4 <prvInsertTimerInActiveList+0x7c>)
 8009a74:	681a      	ldr	r2, [r3, #0]
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	3304      	adds	r3, #4
 8009a7a:	4619      	mov	r1, r3
 8009a7c:	4610      	mov	r0, r2
 8009a7e:	f7fd fe20 	bl	80076c2 <vListInsert>
 8009a82:	e012      	b.n	8009aaa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009a84:	687a      	ldr	r2, [r7, #4]
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	d206      	bcs.n	8009a9a <prvInsertTimerInActiveList+0x62>
 8009a8c:	68ba      	ldr	r2, [r7, #8]
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	429a      	cmp	r2, r3
 8009a92:	d302      	bcc.n	8009a9a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009a94:	2301      	movs	r3, #1
 8009a96:	617b      	str	r3, [r7, #20]
 8009a98:	e007      	b.n	8009aaa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009a9a:	4b07      	ldr	r3, [pc, #28]	@ (8009ab8 <prvInsertTimerInActiveList+0x80>)
 8009a9c:	681a      	ldr	r2, [r3, #0]
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	3304      	adds	r3, #4
 8009aa2:	4619      	mov	r1, r3
 8009aa4:	4610      	mov	r0, r2
 8009aa6:	f7fd fe0c 	bl	80076c2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009aaa:	697b      	ldr	r3, [r7, #20]
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3718      	adds	r7, #24
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}
 8009ab4:	200010f0 	.word	0x200010f0
 8009ab8:	200010ec 	.word	0x200010ec

08009abc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b08e      	sub	sp, #56	@ 0x38
 8009ac0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009ac2:	e0ce      	b.n	8009c62 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	da19      	bge.n	8009afe <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009aca:	1d3b      	adds	r3, r7, #4
 8009acc:	3304      	adds	r3, #4
 8009ace:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d10b      	bne.n	8009aee <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ada:	f383 8811 	msr	BASEPRI, r3
 8009ade:	f3bf 8f6f 	isb	sy
 8009ae2:	f3bf 8f4f 	dsb	sy
 8009ae6:	61fb      	str	r3, [r7, #28]
}
 8009ae8:	bf00      	nop
 8009aea:	bf00      	nop
 8009aec:	e7fd      	b.n	8009aea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009af4:	6850      	ldr	r0, [r2, #4]
 8009af6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009af8:	6892      	ldr	r2, [r2, #8]
 8009afa:	4611      	mov	r1, r2
 8009afc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	f2c0 80ae 	blt.w	8009c62 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b0c:	695b      	ldr	r3, [r3, #20]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d004      	beq.n	8009b1c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b14:	3304      	adds	r3, #4
 8009b16:	4618      	mov	r0, r3
 8009b18:	f7fd fe0c 	bl	8007734 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009b1c:	463b      	mov	r3, r7
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f7ff ff6a 	bl	80099f8 <prvSampleTimeNow>
 8009b24:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2b09      	cmp	r3, #9
 8009b2a:	f200 8097 	bhi.w	8009c5c <prvProcessReceivedCommands+0x1a0>
 8009b2e:	a201      	add	r2, pc, #4	@ (adr r2, 8009b34 <prvProcessReceivedCommands+0x78>)
 8009b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b34:	08009b5d 	.word	0x08009b5d
 8009b38:	08009b5d 	.word	0x08009b5d
 8009b3c:	08009b5d 	.word	0x08009b5d
 8009b40:	08009bd3 	.word	0x08009bd3
 8009b44:	08009be7 	.word	0x08009be7
 8009b48:	08009c33 	.word	0x08009c33
 8009b4c:	08009b5d 	.word	0x08009b5d
 8009b50:	08009b5d 	.word	0x08009b5d
 8009b54:	08009bd3 	.word	0x08009bd3
 8009b58:	08009be7 	.word	0x08009be7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b5e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b62:	f043 0301 	orr.w	r3, r3, #1
 8009b66:	b2da      	uxtb	r2, r3
 8009b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b6a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009b6e:	68ba      	ldr	r2, [r7, #8]
 8009b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b72:	699b      	ldr	r3, [r3, #24]
 8009b74:	18d1      	adds	r1, r2, r3
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b7c:	f7ff ff5c 	bl	8009a38 <prvInsertTimerInActiveList>
 8009b80:	4603      	mov	r3, r0
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d06c      	beq.n	8009c60 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b88:	6a1b      	ldr	r3, [r3, #32]
 8009b8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009b8c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b94:	f003 0304 	and.w	r3, r3, #4
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d061      	beq.n	8009c60 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009b9c:	68ba      	ldr	r2, [r7, #8]
 8009b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ba0:	699b      	ldr	r3, [r3, #24]
 8009ba2:	441a      	add	r2, r3
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	9300      	str	r3, [sp, #0]
 8009ba8:	2300      	movs	r3, #0
 8009baa:	2100      	movs	r1, #0
 8009bac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009bae:	f7ff fe01 	bl	80097b4 <xTimerGenericCommand>
 8009bb2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009bb4:	6a3b      	ldr	r3, [r7, #32]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d152      	bne.n	8009c60 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bbe:	f383 8811 	msr	BASEPRI, r3
 8009bc2:	f3bf 8f6f 	isb	sy
 8009bc6:	f3bf 8f4f 	dsb	sy
 8009bca:	61bb      	str	r3, [r7, #24]
}
 8009bcc:	bf00      	nop
 8009bce:	bf00      	nop
 8009bd0:	e7fd      	b.n	8009bce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bd4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009bd8:	f023 0301 	bic.w	r3, r3, #1
 8009bdc:	b2da      	uxtb	r2, r3
 8009bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009be0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009be4:	e03d      	b.n	8009c62 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009be8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009bec:	f043 0301 	orr.w	r3, r3, #1
 8009bf0:	b2da      	uxtb	r2, r3
 8009bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bf4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009bf8:	68ba      	ldr	r2, [r7, #8]
 8009bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bfc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c00:	699b      	ldr	r3, [r3, #24]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d10b      	bne.n	8009c1e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c0a:	f383 8811 	msr	BASEPRI, r3
 8009c0e:	f3bf 8f6f 	isb	sy
 8009c12:	f3bf 8f4f 	dsb	sy
 8009c16:	617b      	str	r3, [r7, #20]
}
 8009c18:	bf00      	nop
 8009c1a:	bf00      	nop
 8009c1c:	e7fd      	b.n	8009c1a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c20:	699a      	ldr	r2, [r3, #24]
 8009c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c24:	18d1      	adds	r1, r2, r3
 8009c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c2c:	f7ff ff04 	bl	8009a38 <prvInsertTimerInActiveList>
					break;
 8009c30:	e017      	b.n	8009c62 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c38:	f003 0302 	and.w	r3, r3, #2
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d103      	bne.n	8009c48 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009c40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c42:	f000 fbe9 	bl	800a418 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009c46:	e00c      	b.n	8009c62 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c4a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c4e:	f023 0301 	bic.w	r3, r3, #1
 8009c52:	b2da      	uxtb	r2, r3
 8009c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c56:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009c5a:	e002      	b.n	8009c62 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009c5c:	bf00      	nop
 8009c5e:	e000      	b.n	8009c62 <prvProcessReceivedCommands+0x1a6>
					break;
 8009c60:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009c62:	4b08      	ldr	r3, [pc, #32]	@ (8009c84 <prvProcessReceivedCommands+0x1c8>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	1d39      	adds	r1, r7, #4
 8009c68:	2200      	movs	r2, #0
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f7fe f8a4 	bl	8007db8 <xQueueReceive>
 8009c70:	4603      	mov	r3, r0
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	f47f af26 	bne.w	8009ac4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009c78:	bf00      	nop
 8009c7a:	bf00      	nop
 8009c7c:	3730      	adds	r7, #48	@ 0x30
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}
 8009c82:	bf00      	nop
 8009c84:	200010f4 	.word	0x200010f4

08009c88 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b088      	sub	sp, #32
 8009c8c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009c8e:	e049      	b.n	8009d24 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009c90:	4b2e      	ldr	r3, [pc, #184]	@ (8009d4c <prvSwitchTimerLists+0xc4>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	68db      	ldr	r3, [r3, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c9a:	4b2c      	ldr	r3, [pc, #176]	@ (8009d4c <prvSwitchTimerLists+0xc4>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	68db      	ldr	r3, [r3, #12]
 8009ca0:	68db      	ldr	r3, [r3, #12]
 8009ca2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	3304      	adds	r3, #4
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f7fd fd43 	bl	8007734 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	6a1b      	ldr	r3, [r3, #32]
 8009cb2:	68f8      	ldr	r0, [r7, #12]
 8009cb4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009cbc:	f003 0304 	and.w	r3, r3, #4
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d02f      	beq.n	8009d24 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	699b      	ldr	r3, [r3, #24]
 8009cc8:	693a      	ldr	r2, [r7, #16]
 8009cca:	4413      	add	r3, r2
 8009ccc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009cce:	68ba      	ldr	r2, [r7, #8]
 8009cd0:	693b      	ldr	r3, [r7, #16]
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	d90e      	bls.n	8009cf4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	68ba      	ldr	r2, [r7, #8]
 8009cda:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	68fa      	ldr	r2, [r7, #12]
 8009ce0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009ce2:	4b1a      	ldr	r3, [pc, #104]	@ (8009d4c <prvSwitchTimerLists+0xc4>)
 8009ce4:	681a      	ldr	r2, [r3, #0]
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	3304      	adds	r3, #4
 8009cea:	4619      	mov	r1, r3
 8009cec:	4610      	mov	r0, r2
 8009cee:	f7fd fce8 	bl	80076c2 <vListInsert>
 8009cf2:	e017      	b.n	8009d24 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	9300      	str	r3, [sp, #0]
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	693a      	ldr	r2, [r7, #16]
 8009cfc:	2100      	movs	r1, #0
 8009cfe:	68f8      	ldr	r0, [r7, #12]
 8009d00:	f7ff fd58 	bl	80097b4 <xTimerGenericCommand>
 8009d04:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d10b      	bne.n	8009d24 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d10:	f383 8811 	msr	BASEPRI, r3
 8009d14:	f3bf 8f6f 	isb	sy
 8009d18:	f3bf 8f4f 	dsb	sy
 8009d1c:	603b      	str	r3, [r7, #0]
}
 8009d1e:	bf00      	nop
 8009d20:	bf00      	nop
 8009d22:	e7fd      	b.n	8009d20 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009d24:	4b09      	ldr	r3, [pc, #36]	@ (8009d4c <prvSwitchTimerLists+0xc4>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d1b0      	bne.n	8009c90 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009d2e:	4b07      	ldr	r3, [pc, #28]	@ (8009d4c <prvSwitchTimerLists+0xc4>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009d34:	4b06      	ldr	r3, [pc, #24]	@ (8009d50 <prvSwitchTimerLists+0xc8>)
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	4a04      	ldr	r2, [pc, #16]	@ (8009d4c <prvSwitchTimerLists+0xc4>)
 8009d3a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009d3c:	4a04      	ldr	r2, [pc, #16]	@ (8009d50 <prvSwitchTimerLists+0xc8>)
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	6013      	str	r3, [r2, #0]
}
 8009d42:	bf00      	nop
 8009d44:	3718      	adds	r7, #24
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}
 8009d4a:	bf00      	nop
 8009d4c:	200010ec 	.word	0x200010ec
 8009d50:	200010f0 	.word	0x200010f0

08009d54 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b082      	sub	sp, #8
 8009d58:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009d5a:	f000 f96d 	bl	800a038 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009d5e:	4b15      	ldr	r3, [pc, #84]	@ (8009db4 <prvCheckForValidListAndQueue+0x60>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d120      	bne.n	8009da8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009d66:	4814      	ldr	r0, [pc, #80]	@ (8009db8 <prvCheckForValidListAndQueue+0x64>)
 8009d68:	f7fd fc5a 	bl	8007620 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009d6c:	4813      	ldr	r0, [pc, #76]	@ (8009dbc <prvCheckForValidListAndQueue+0x68>)
 8009d6e:	f7fd fc57 	bl	8007620 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009d72:	4b13      	ldr	r3, [pc, #76]	@ (8009dc0 <prvCheckForValidListAndQueue+0x6c>)
 8009d74:	4a10      	ldr	r2, [pc, #64]	@ (8009db8 <prvCheckForValidListAndQueue+0x64>)
 8009d76:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009d78:	4b12      	ldr	r3, [pc, #72]	@ (8009dc4 <prvCheckForValidListAndQueue+0x70>)
 8009d7a:	4a10      	ldr	r2, [pc, #64]	@ (8009dbc <prvCheckForValidListAndQueue+0x68>)
 8009d7c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009d7e:	2300      	movs	r3, #0
 8009d80:	9300      	str	r3, [sp, #0]
 8009d82:	4b11      	ldr	r3, [pc, #68]	@ (8009dc8 <prvCheckForValidListAndQueue+0x74>)
 8009d84:	4a11      	ldr	r2, [pc, #68]	@ (8009dcc <prvCheckForValidListAndQueue+0x78>)
 8009d86:	2110      	movs	r1, #16
 8009d88:	200a      	movs	r0, #10
 8009d8a:	f7fd fd67 	bl	800785c <xQueueGenericCreateStatic>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	4a08      	ldr	r2, [pc, #32]	@ (8009db4 <prvCheckForValidListAndQueue+0x60>)
 8009d92:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009d94:	4b07      	ldr	r3, [pc, #28]	@ (8009db4 <prvCheckForValidListAndQueue+0x60>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d005      	beq.n	8009da8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009d9c:	4b05      	ldr	r3, [pc, #20]	@ (8009db4 <prvCheckForValidListAndQueue+0x60>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	490b      	ldr	r1, [pc, #44]	@ (8009dd0 <prvCheckForValidListAndQueue+0x7c>)
 8009da2:	4618      	mov	r0, r3
 8009da4:	f7fe fbe8 	bl	8008578 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009da8:	f000 f978 	bl	800a09c <vPortExitCritical>
}
 8009dac:	bf00      	nop
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}
 8009db2:	bf00      	nop
 8009db4:	200010f4 	.word	0x200010f4
 8009db8:	200010c4 	.word	0x200010c4
 8009dbc:	200010d8 	.word	0x200010d8
 8009dc0:	200010ec 	.word	0x200010ec
 8009dc4:	200010f0 	.word	0x200010f0
 8009dc8:	200011a0 	.word	0x200011a0
 8009dcc:	20001100 	.word	0x20001100
 8009dd0:	0800fe34 	.word	0x0800fe34

08009dd4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b085      	sub	sp, #20
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	60f8      	str	r0, [r7, #12]
 8009ddc:	60b9      	str	r1, [r7, #8]
 8009dde:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	3b04      	subs	r3, #4
 8009de4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009dec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	3b04      	subs	r3, #4
 8009df2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	f023 0201 	bic.w	r2, r3, #1
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	3b04      	subs	r3, #4
 8009e02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009e04:	4a0c      	ldr	r2, [pc, #48]	@ (8009e38 <pxPortInitialiseStack+0x64>)
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	3b14      	subs	r3, #20
 8009e0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009e10:	687a      	ldr	r2, [r7, #4]
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	3b04      	subs	r3, #4
 8009e1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	f06f 0202 	mvn.w	r2, #2
 8009e22:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	3b20      	subs	r3, #32
 8009e28:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3714      	adds	r7, #20
 8009e30:	46bd      	mov	sp, r7
 8009e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e36:	4770      	bx	lr
 8009e38:	08009e3d 	.word	0x08009e3d

08009e3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b085      	sub	sp, #20
 8009e40:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009e42:	2300      	movs	r3, #0
 8009e44:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009e46:	4b13      	ldr	r3, [pc, #76]	@ (8009e94 <prvTaskExitError+0x58>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e4e:	d00b      	beq.n	8009e68 <prvTaskExitError+0x2c>
	__asm volatile
 8009e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e54:	f383 8811 	msr	BASEPRI, r3
 8009e58:	f3bf 8f6f 	isb	sy
 8009e5c:	f3bf 8f4f 	dsb	sy
 8009e60:	60fb      	str	r3, [r7, #12]
}
 8009e62:	bf00      	nop
 8009e64:	bf00      	nop
 8009e66:	e7fd      	b.n	8009e64 <prvTaskExitError+0x28>
	__asm volatile
 8009e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e6c:	f383 8811 	msr	BASEPRI, r3
 8009e70:	f3bf 8f6f 	isb	sy
 8009e74:	f3bf 8f4f 	dsb	sy
 8009e78:	60bb      	str	r3, [r7, #8]
}
 8009e7a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009e7c:	bf00      	nop
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d0fc      	beq.n	8009e7e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009e84:	bf00      	nop
 8009e86:	bf00      	nop
 8009e88:	3714      	adds	r7, #20
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e90:	4770      	bx	lr
 8009e92:	bf00      	nop
 8009e94:	20000054 	.word	0x20000054
	...

08009ea0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009ea0:	4b07      	ldr	r3, [pc, #28]	@ (8009ec0 <pxCurrentTCBConst2>)
 8009ea2:	6819      	ldr	r1, [r3, #0]
 8009ea4:	6808      	ldr	r0, [r1, #0]
 8009ea6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eaa:	f380 8809 	msr	PSP, r0
 8009eae:	f3bf 8f6f 	isb	sy
 8009eb2:	f04f 0000 	mov.w	r0, #0
 8009eb6:	f380 8811 	msr	BASEPRI, r0
 8009eba:	4770      	bx	lr
 8009ebc:	f3af 8000 	nop.w

08009ec0 <pxCurrentTCBConst2>:
 8009ec0:	20000bc4 	.word	0x20000bc4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009ec4:	bf00      	nop
 8009ec6:	bf00      	nop

08009ec8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009ec8:	4808      	ldr	r0, [pc, #32]	@ (8009eec <prvPortStartFirstTask+0x24>)
 8009eca:	6800      	ldr	r0, [r0, #0]
 8009ecc:	6800      	ldr	r0, [r0, #0]
 8009ece:	f380 8808 	msr	MSP, r0
 8009ed2:	f04f 0000 	mov.w	r0, #0
 8009ed6:	f380 8814 	msr	CONTROL, r0
 8009eda:	b662      	cpsie	i
 8009edc:	b661      	cpsie	f
 8009ede:	f3bf 8f4f 	dsb	sy
 8009ee2:	f3bf 8f6f 	isb	sy
 8009ee6:	df00      	svc	0
 8009ee8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009eea:	bf00      	nop
 8009eec:	e000ed08 	.word	0xe000ed08

08009ef0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b086      	sub	sp, #24
 8009ef4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009ef6:	4b47      	ldr	r3, [pc, #284]	@ (800a014 <xPortStartScheduler+0x124>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	4a47      	ldr	r2, [pc, #284]	@ (800a018 <xPortStartScheduler+0x128>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d10b      	bne.n	8009f18 <xPortStartScheduler+0x28>
	__asm volatile
 8009f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f04:	f383 8811 	msr	BASEPRI, r3
 8009f08:	f3bf 8f6f 	isb	sy
 8009f0c:	f3bf 8f4f 	dsb	sy
 8009f10:	60fb      	str	r3, [r7, #12]
}
 8009f12:	bf00      	nop
 8009f14:	bf00      	nop
 8009f16:	e7fd      	b.n	8009f14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009f18:	4b3e      	ldr	r3, [pc, #248]	@ (800a014 <xPortStartScheduler+0x124>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4a3f      	ldr	r2, [pc, #252]	@ (800a01c <xPortStartScheduler+0x12c>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d10b      	bne.n	8009f3a <xPortStartScheduler+0x4a>
	__asm volatile
 8009f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f26:	f383 8811 	msr	BASEPRI, r3
 8009f2a:	f3bf 8f6f 	isb	sy
 8009f2e:	f3bf 8f4f 	dsb	sy
 8009f32:	613b      	str	r3, [r7, #16]
}
 8009f34:	bf00      	nop
 8009f36:	bf00      	nop
 8009f38:	e7fd      	b.n	8009f36 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009f3a:	4b39      	ldr	r3, [pc, #228]	@ (800a020 <xPortStartScheduler+0x130>)
 8009f3c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	781b      	ldrb	r3, [r3, #0]
 8009f42:	b2db      	uxtb	r3, r3
 8009f44:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	22ff      	movs	r2, #255	@ 0xff
 8009f4a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	781b      	ldrb	r3, [r3, #0]
 8009f50:	b2db      	uxtb	r3, r3
 8009f52:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009f54:	78fb      	ldrb	r3, [r7, #3]
 8009f56:	b2db      	uxtb	r3, r3
 8009f58:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009f5c:	b2da      	uxtb	r2, r3
 8009f5e:	4b31      	ldr	r3, [pc, #196]	@ (800a024 <xPortStartScheduler+0x134>)
 8009f60:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009f62:	4b31      	ldr	r3, [pc, #196]	@ (800a028 <xPortStartScheduler+0x138>)
 8009f64:	2207      	movs	r2, #7
 8009f66:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009f68:	e009      	b.n	8009f7e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8009f6a:	4b2f      	ldr	r3, [pc, #188]	@ (800a028 <xPortStartScheduler+0x138>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	3b01      	subs	r3, #1
 8009f70:	4a2d      	ldr	r2, [pc, #180]	@ (800a028 <xPortStartScheduler+0x138>)
 8009f72:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009f74:	78fb      	ldrb	r3, [r7, #3]
 8009f76:	b2db      	uxtb	r3, r3
 8009f78:	005b      	lsls	r3, r3, #1
 8009f7a:	b2db      	uxtb	r3, r3
 8009f7c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009f7e:	78fb      	ldrb	r3, [r7, #3]
 8009f80:	b2db      	uxtb	r3, r3
 8009f82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f86:	2b80      	cmp	r3, #128	@ 0x80
 8009f88:	d0ef      	beq.n	8009f6a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009f8a:	4b27      	ldr	r3, [pc, #156]	@ (800a028 <xPortStartScheduler+0x138>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f1c3 0307 	rsb	r3, r3, #7
 8009f92:	2b04      	cmp	r3, #4
 8009f94:	d00b      	beq.n	8009fae <xPortStartScheduler+0xbe>
	__asm volatile
 8009f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f9a:	f383 8811 	msr	BASEPRI, r3
 8009f9e:	f3bf 8f6f 	isb	sy
 8009fa2:	f3bf 8f4f 	dsb	sy
 8009fa6:	60bb      	str	r3, [r7, #8]
}
 8009fa8:	bf00      	nop
 8009faa:	bf00      	nop
 8009fac:	e7fd      	b.n	8009faa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009fae:	4b1e      	ldr	r3, [pc, #120]	@ (800a028 <xPortStartScheduler+0x138>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	021b      	lsls	r3, r3, #8
 8009fb4:	4a1c      	ldr	r2, [pc, #112]	@ (800a028 <xPortStartScheduler+0x138>)
 8009fb6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009fb8:	4b1b      	ldr	r3, [pc, #108]	@ (800a028 <xPortStartScheduler+0x138>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009fc0:	4a19      	ldr	r2, [pc, #100]	@ (800a028 <xPortStartScheduler+0x138>)
 8009fc2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	b2da      	uxtb	r2, r3
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009fcc:	4b17      	ldr	r3, [pc, #92]	@ (800a02c <xPortStartScheduler+0x13c>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	4a16      	ldr	r2, [pc, #88]	@ (800a02c <xPortStartScheduler+0x13c>)
 8009fd2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009fd6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009fd8:	4b14      	ldr	r3, [pc, #80]	@ (800a02c <xPortStartScheduler+0x13c>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	4a13      	ldr	r2, [pc, #76]	@ (800a02c <xPortStartScheduler+0x13c>)
 8009fde:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009fe2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009fe4:	f000 f8da 	bl	800a19c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009fe8:	4b11      	ldr	r3, [pc, #68]	@ (800a030 <xPortStartScheduler+0x140>)
 8009fea:	2200      	movs	r2, #0
 8009fec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009fee:	f000 f8f9 	bl	800a1e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009ff2:	4b10      	ldr	r3, [pc, #64]	@ (800a034 <xPortStartScheduler+0x144>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	4a0f      	ldr	r2, [pc, #60]	@ (800a034 <xPortStartScheduler+0x144>)
 8009ff8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009ffc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009ffe:	f7ff ff63 	bl	8009ec8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a002:	f7fe ff2d 	bl	8008e60 <vTaskSwitchContext>
	prvTaskExitError();
 800a006:	f7ff ff19 	bl	8009e3c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a00a:	2300      	movs	r3, #0
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3718      	adds	r7, #24
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}
 800a014:	e000ed00 	.word	0xe000ed00
 800a018:	410fc271 	.word	0x410fc271
 800a01c:	410fc270 	.word	0x410fc270
 800a020:	e000e400 	.word	0xe000e400
 800a024:	200011f0 	.word	0x200011f0
 800a028:	200011f4 	.word	0x200011f4
 800a02c:	e000ed20 	.word	0xe000ed20
 800a030:	20000054 	.word	0x20000054
 800a034:	e000ef34 	.word	0xe000ef34

0800a038 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a038:	b480      	push	{r7}
 800a03a:	b083      	sub	sp, #12
 800a03c:	af00      	add	r7, sp, #0
	__asm volatile
 800a03e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a042:	f383 8811 	msr	BASEPRI, r3
 800a046:	f3bf 8f6f 	isb	sy
 800a04a:	f3bf 8f4f 	dsb	sy
 800a04e:	607b      	str	r3, [r7, #4]
}
 800a050:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a052:	4b10      	ldr	r3, [pc, #64]	@ (800a094 <vPortEnterCritical+0x5c>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	3301      	adds	r3, #1
 800a058:	4a0e      	ldr	r2, [pc, #56]	@ (800a094 <vPortEnterCritical+0x5c>)
 800a05a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a05c:	4b0d      	ldr	r3, [pc, #52]	@ (800a094 <vPortEnterCritical+0x5c>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	2b01      	cmp	r3, #1
 800a062:	d110      	bne.n	800a086 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a064:	4b0c      	ldr	r3, [pc, #48]	@ (800a098 <vPortEnterCritical+0x60>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	b2db      	uxtb	r3, r3
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d00b      	beq.n	800a086 <vPortEnterCritical+0x4e>
	__asm volatile
 800a06e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a072:	f383 8811 	msr	BASEPRI, r3
 800a076:	f3bf 8f6f 	isb	sy
 800a07a:	f3bf 8f4f 	dsb	sy
 800a07e:	603b      	str	r3, [r7, #0]
}
 800a080:	bf00      	nop
 800a082:	bf00      	nop
 800a084:	e7fd      	b.n	800a082 <vPortEnterCritical+0x4a>
	}
}
 800a086:	bf00      	nop
 800a088:	370c      	adds	r7, #12
 800a08a:	46bd      	mov	sp, r7
 800a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a090:	4770      	bx	lr
 800a092:	bf00      	nop
 800a094:	20000054 	.word	0x20000054
 800a098:	e000ed04 	.word	0xe000ed04

0800a09c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a09c:	b480      	push	{r7}
 800a09e:	b083      	sub	sp, #12
 800a0a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a0a2:	4b12      	ldr	r3, [pc, #72]	@ (800a0ec <vPortExitCritical+0x50>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d10b      	bne.n	800a0c2 <vPortExitCritical+0x26>
	__asm volatile
 800a0aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0ae:	f383 8811 	msr	BASEPRI, r3
 800a0b2:	f3bf 8f6f 	isb	sy
 800a0b6:	f3bf 8f4f 	dsb	sy
 800a0ba:	607b      	str	r3, [r7, #4]
}
 800a0bc:	bf00      	nop
 800a0be:	bf00      	nop
 800a0c0:	e7fd      	b.n	800a0be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a0c2:	4b0a      	ldr	r3, [pc, #40]	@ (800a0ec <vPortExitCritical+0x50>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	3b01      	subs	r3, #1
 800a0c8:	4a08      	ldr	r2, [pc, #32]	@ (800a0ec <vPortExitCritical+0x50>)
 800a0ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a0cc:	4b07      	ldr	r3, [pc, #28]	@ (800a0ec <vPortExitCritical+0x50>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d105      	bne.n	800a0e0 <vPortExitCritical+0x44>
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	f383 8811 	msr	BASEPRI, r3
}
 800a0de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a0e0:	bf00      	nop
 800a0e2:	370c      	adds	r7, #12
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ea:	4770      	bx	lr
 800a0ec:	20000054 	.word	0x20000054

0800a0f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a0f0:	f3ef 8009 	mrs	r0, PSP
 800a0f4:	f3bf 8f6f 	isb	sy
 800a0f8:	4b15      	ldr	r3, [pc, #84]	@ (800a150 <pxCurrentTCBConst>)
 800a0fa:	681a      	ldr	r2, [r3, #0]
 800a0fc:	f01e 0f10 	tst.w	lr, #16
 800a100:	bf08      	it	eq
 800a102:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a106:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a10a:	6010      	str	r0, [r2, #0]
 800a10c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a110:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a114:	f380 8811 	msr	BASEPRI, r0
 800a118:	f3bf 8f4f 	dsb	sy
 800a11c:	f3bf 8f6f 	isb	sy
 800a120:	f7fe fe9e 	bl	8008e60 <vTaskSwitchContext>
 800a124:	f04f 0000 	mov.w	r0, #0
 800a128:	f380 8811 	msr	BASEPRI, r0
 800a12c:	bc09      	pop	{r0, r3}
 800a12e:	6819      	ldr	r1, [r3, #0]
 800a130:	6808      	ldr	r0, [r1, #0]
 800a132:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a136:	f01e 0f10 	tst.w	lr, #16
 800a13a:	bf08      	it	eq
 800a13c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a140:	f380 8809 	msr	PSP, r0
 800a144:	f3bf 8f6f 	isb	sy
 800a148:	4770      	bx	lr
 800a14a:	bf00      	nop
 800a14c:	f3af 8000 	nop.w

0800a150 <pxCurrentTCBConst>:
 800a150:	20000bc4 	.word	0x20000bc4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a154:	bf00      	nop
 800a156:	bf00      	nop

0800a158 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b082      	sub	sp, #8
 800a15c:	af00      	add	r7, sp, #0
	__asm volatile
 800a15e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a162:	f383 8811 	msr	BASEPRI, r3
 800a166:	f3bf 8f6f 	isb	sy
 800a16a:	f3bf 8f4f 	dsb	sy
 800a16e:	607b      	str	r3, [r7, #4]
}
 800a170:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a172:	f7fe fdbb 	bl	8008cec <xTaskIncrementTick>
 800a176:	4603      	mov	r3, r0
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d003      	beq.n	800a184 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a17c:	4b06      	ldr	r3, [pc, #24]	@ (800a198 <xPortSysTickHandler+0x40>)
 800a17e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a182:	601a      	str	r2, [r3, #0]
 800a184:	2300      	movs	r3, #0
 800a186:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	f383 8811 	msr	BASEPRI, r3
}
 800a18e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a190:	bf00      	nop
 800a192:	3708      	adds	r7, #8
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}
 800a198:	e000ed04 	.word	0xe000ed04

0800a19c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a19c:	b480      	push	{r7}
 800a19e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a1a0:	4b0b      	ldr	r3, [pc, #44]	@ (800a1d0 <vPortSetupTimerInterrupt+0x34>)
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a1a6:	4b0b      	ldr	r3, [pc, #44]	@ (800a1d4 <vPortSetupTimerInterrupt+0x38>)
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a1ac:	4b0a      	ldr	r3, [pc, #40]	@ (800a1d8 <vPortSetupTimerInterrupt+0x3c>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	4a0a      	ldr	r2, [pc, #40]	@ (800a1dc <vPortSetupTimerInterrupt+0x40>)
 800a1b2:	fba2 2303 	umull	r2, r3, r2, r3
 800a1b6:	099b      	lsrs	r3, r3, #6
 800a1b8:	4a09      	ldr	r2, [pc, #36]	@ (800a1e0 <vPortSetupTimerInterrupt+0x44>)
 800a1ba:	3b01      	subs	r3, #1
 800a1bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a1be:	4b04      	ldr	r3, [pc, #16]	@ (800a1d0 <vPortSetupTimerInterrupt+0x34>)
 800a1c0:	2207      	movs	r2, #7
 800a1c2:	601a      	str	r2, [r3, #0]
}
 800a1c4:	bf00      	nop
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1cc:	4770      	bx	lr
 800a1ce:	bf00      	nop
 800a1d0:	e000e010 	.word	0xe000e010
 800a1d4:	e000e018 	.word	0xe000e018
 800a1d8:	20000000 	.word	0x20000000
 800a1dc:	10624dd3 	.word	0x10624dd3
 800a1e0:	e000e014 	.word	0xe000e014

0800a1e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a1e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a1f4 <vPortEnableVFP+0x10>
 800a1e8:	6801      	ldr	r1, [r0, #0]
 800a1ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a1ee:	6001      	str	r1, [r0, #0]
 800a1f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a1f2:	bf00      	nop
 800a1f4:	e000ed88 	.word	0xe000ed88

0800a1f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b085      	sub	sp, #20
 800a1fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a1fe:	f3ef 8305 	mrs	r3, IPSR
 800a202:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2b0f      	cmp	r3, #15
 800a208:	d915      	bls.n	800a236 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a20a:	4a18      	ldr	r2, [pc, #96]	@ (800a26c <vPortValidateInterruptPriority+0x74>)
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	4413      	add	r3, r2
 800a210:	781b      	ldrb	r3, [r3, #0]
 800a212:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a214:	4b16      	ldr	r3, [pc, #88]	@ (800a270 <vPortValidateInterruptPriority+0x78>)
 800a216:	781b      	ldrb	r3, [r3, #0]
 800a218:	7afa      	ldrb	r2, [r7, #11]
 800a21a:	429a      	cmp	r2, r3
 800a21c:	d20b      	bcs.n	800a236 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a21e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a222:	f383 8811 	msr	BASEPRI, r3
 800a226:	f3bf 8f6f 	isb	sy
 800a22a:	f3bf 8f4f 	dsb	sy
 800a22e:	607b      	str	r3, [r7, #4]
}
 800a230:	bf00      	nop
 800a232:	bf00      	nop
 800a234:	e7fd      	b.n	800a232 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a236:	4b0f      	ldr	r3, [pc, #60]	@ (800a274 <vPortValidateInterruptPriority+0x7c>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a23e:	4b0e      	ldr	r3, [pc, #56]	@ (800a278 <vPortValidateInterruptPriority+0x80>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	429a      	cmp	r2, r3
 800a244:	d90b      	bls.n	800a25e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a24a:	f383 8811 	msr	BASEPRI, r3
 800a24e:	f3bf 8f6f 	isb	sy
 800a252:	f3bf 8f4f 	dsb	sy
 800a256:	603b      	str	r3, [r7, #0]
}
 800a258:	bf00      	nop
 800a25a:	bf00      	nop
 800a25c:	e7fd      	b.n	800a25a <vPortValidateInterruptPriority+0x62>
	}
 800a25e:	bf00      	nop
 800a260:	3714      	adds	r7, #20
 800a262:	46bd      	mov	sp, r7
 800a264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a268:	4770      	bx	lr
 800a26a:	bf00      	nop
 800a26c:	e000e3f0 	.word	0xe000e3f0
 800a270:	200011f0 	.word	0x200011f0
 800a274:	e000ed0c 	.word	0xe000ed0c
 800a278:	200011f4 	.word	0x200011f4

0800a27c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b08a      	sub	sp, #40	@ 0x28
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a284:	2300      	movs	r3, #0
 800a286:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a288:	f7fe fc62 	bl	8008b50 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a28c:	4b5c      	ldr	r3, [pc, #368]	@ (800a400 <pvPortMalloc+0x184>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d101      	bne.n	800a298 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a294:	f000 f924 	bl	800a4e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a298:	4b5a      	ldr	r3, [pc, #360]	@ (800a404 <pvPortMalloc+0x188>)
 800a29a:	681a      	ldr	r2, [r3, #0]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	4013      	ands	r3, r2
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	f040 8095 	bne.w	800a3d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d01e      	beq.n	800a2ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a2ac:	2208      	movs	r2, #8
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	4413      	add	r3, r2
 800a2b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f003 0307 	and.w	r3, r3, #7
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d015      	beq.n	800a2ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f023 0307 	bic.w	r3, r3, #7
 800a2c4:	3308      	adds	r3, #8
 800a2c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f003 0307 	and.w	r3, r3, #7
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d00b      	beq.n	800a2ea <pvPortMalloc+0x6e>
	__asm volatile
 800a2d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2d6:	f383 8811 	msr	BASEPRI, r3
 800a2da:	f3bf 8f6f 	isb	sy
 800a2de:	f3bf 8f4f 	dsb	sy
 800a2e2:	617b      	str	r3, [r7, #20]
}
 800a2e4:	bf00      	nop
 800a2e6:	bf00      	nop
 800a2e8:	e7fd      	b.n	800a2e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d06f      	beq.n	800a3d0 <pvPortMalloc+0x154>
 800a2f0:	4b45      	ldr	r3, [pc, #276]	@ (800a408 <pvPortMalloc+0x18c>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	687a      	ldr	r2, [r7, #4]
 800a2f6:	429a      	cmp	r2, r3
 800a2f8:	d86a      	bhi.n	800a3d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a2fa:	4b44      	ldr	r3, [pc, #272]	@ (800a40c <pvPortMalloc+0x190>)
 800a2fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a2fe:	4b43      	ldr	r3, [pc, #268]	@ (800a40c <pvPortMalloc+0x190>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a304:	e004      	b.n	800a310 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a308:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a30a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a312:	685b      	ldr	r3, [r3, #4]
 800a314:	687a      	ldr	r2, [r7, #4]
 800a316:	429a      	cmp	r2, r3
 800a318:	d903      	bls.n	800a322 <pvPortMalloc+0xa6>
 800a31a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d1f1      	bne.n	800a306 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a322:	4b37      	ldr	r3, [pc, #220]	@ (800a400 <pvPortMalloc+0x184>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a328:	429a      	cmp	r2, r3
 800a32a:	d051      	beq.n	800a3d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a32c:	6a3b      	ldr	r3, [r7, #32]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	2208      	movs	r2, #8
 800a332:	4413      	add	r3, r2
 800a334:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a338:	681a      	ldr	r2, [r3, #0]
 800a33a:	6a3b      	ldr	r3, [r7, #32]
 800a33c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a33e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a340:	685a      	ldr	r2, [r3, #4]
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	1ad2      	subs	r2, r2, r3
 800a346:	2308      	movs	r3, #8
 800a348:	005b      	lsls	r3, r3, #1
 800a34a:	429a      	cmp	r2, r3
 800a34c:	d920      	bls.n	800a390 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a34e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	4413      	add	r3, r2
 800a354:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a356:	69bb      	ldr	r3, [r7, #24]
 800a358:	f003 0307 	and.w	r3, r3, #7
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d00b      	beq.n	800a378 <pvPortMalloc+0xfc>
	__asm volatile
 800a360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a364:	f383 8811 	msr	BASEPRI, r3
 800a368:	f3bf 8f6f 	isb	sy
 800a36c:	f3bf 8f4f 	dsb	sy
 800a370:	613b      	str	r3, [r7, #16]
}
 800a372:	bf00      	nop
 800a374:	bf00      	nop
 800a376:	e7fd      	b.n	800a374 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a37a:	685a      	ldr	r2, [r3, #4]
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	1ad2      	subs	r2, r2, r3
 800a380:	69bb      	ldr	r3, [r7, #24]
 800a382:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a386:	687a      	ldr	r2, [r7, #4]
 800a388:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a38a:	69b8      	ldr	r0, [r7, #24]
 800a38c:	f000 f90a 	bl	800a5a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a390:	4b1d      	ldr	r3, [pc, #116]	@ (800a408 <pvPortMalloc+0x18c>)
 800a392:	681a      	ldr	r2, [r3, #0]
 800a394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a396:	685b      	ldr	r3, [r3, #4]
 800a398:	1ad3      	subs	r3, r2, r3
 800a39a:	4a1b      	ldr	r2, [pc, #108]	@ (800a408 <pvPortMalloc+0x18c>)
 800a39c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a39e:	4b1a      	ldr	r3, [pc, #104]	@ (800a408 <pvPortMalloc+0x18c>)
 800a3a0:	681a      	ldr	r2, [r3, #0]
 800a3a2:	4b1b      	ldr	r3, [pc, #108]	@ (800a410 <pvPortMalloc+0x194>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	d203      	bcs.n	800a3b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a3aa:	4b17      	ldr	r3, [pc, #92]	@ (800a408 <pvPortMalloc+0x18c>)
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	4a18      	ldr	r2, [pc, #96]	@ (800a410 <pvPortMalloc+0x194>)
 800a3b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a3b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3b4:	685a      	ldr	r2, [r3, #4]
 800a3b6:	4b13      	ldr	r3, [pc, #76]	@ (800a404 <pvPortMalloc+0x188>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	431a      	orrs	r2, r3
 800a3bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a3c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a3c6:	4b13      	ldr	r3, [pc, #76]	@ (800a414 <pvPortMalloc+0x198>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	3301      	adds	r3, #1
 800a3cc:	4a11      	ldr	r2, [pc, #68]	@ (800a414 <pvPortMalloc+0x198>)
 800a3ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a3d0:	f7fe fbcc 	bl	8008b6c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a3d4:	69fb      	ldr	r3, [r7, #28]
 800a3d6:	f003 0307 	and.w	r3, r3, #7
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d00b      	beq.n	800a3f6 <pvPortMalloc+0x17a>
	__asm volatile
 800a3de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3e2:	f383 8811 	msr	BASEPRI, r3
 800a3e6:	f3bf 8f6f 	isb	sy
 800a3ea:	f3bf 8f4f 	dsb	sy
 800a3ee:	60fb      	str	r3, [r7, #12]
}
 800a3f0:	bf00      	nop
 800a3f2:	bf00      	nop
 800a3f4:	e7fd      	b.n	800a3f2 <pvPortMalloc+0x176>
	return pvReturn;
 800a3f6:	69fb      	ldr	r3, [r7, #28]
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3728      	adds	r7, #40	@ 0x28
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}
 800a400:	20004e00 	.word	0x20004e00
 800a404:	20004e14 	.word	0x20004e14
 800a408:	20004e04 	.word	0x20004e04
 800a40c:	20004df8 	.word	0x20004df8
 800a410:	20004e08 	.word	0x20004e08
 800a414:	20004e0c 	.word	0x20004e0c

0800a418 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b086      	sub	sp, #24
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d04f      	beq.n	800a4ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a42a:	2308      	movs	r3, #8
 800a42c:	425b      	negs	r3, r3
 800a42e:	697a      	ldr	r2, [r7, #20]
 800a430:	4413      	add	r3, r2
 800a432:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a438:	693b      	ldr	r3, [r7, #16]
 800a43a:	685a      	ldr	r2, [r3, #4]
 800a43c:	4b25      	ldr	r3, [pc, #148]	@ (800a4d4 <vPortFree+0xbc>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	4013      	ands	r3, r2
 800a442:	2b00      	cmp	r3, #0
 800a444:	d10b      	bne.n	800a45e <vPortFree+0x46>
	__asm volatile
 800a446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a44a:	f383 8811 	msr	BASEPRI, r3
 800a44e:	f3bf 8f6f 	isb	sy
 800a452:	f3bf 8f4f 	dsb	sy
 800a456:	60fb      	str	r3, [r7, #12]
}
 800a458:	bf00      	nop
 800a45a:	bf00      	nop
 800a45c:	e7fd      	b.n	800a45a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d00b      	beq.n	800a47e <vPortFree+0x66>
	__asm volatile
 800a466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a46a:	f383 8811 	msr	BASEPRI, r3
 800a46e:	f3bf 8f6f 	isb	sy
 800a472:	f3bf 8f4f 	dsb	sy
 800a476:	60bb      	str	r3, [r7, #8]
}
 800a478:	bf00      	nop
 800a47a:	bf00      	nop
 800a47c:	e7fd      	b.n	800a47a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	685a      	ldr	r2, [r3, #4]
 800a482:	4b14      	ldr	r3, [pc, #80]	@ (800a4d4 <vPortFree+0xbc>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	4013      	ands	r3, r2
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d01e      	beq.n	800a4ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d11a      	bne.n	800a4ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	685a      	ldr	r2, [r3, #4]
 800a498:	4b0e      	ldr	r3, [pc, #56]	@ (800a4d4 <vPortFree+0xbc>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	43db      	mvns	r3, r3
 800a49e:	401a      	ands	r2, r3
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a4a4:	f7fe fb54 	bl	8008b50 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a4a8:	693b      	ldr	r3, [r7, #16]
 800a4aa:	685a      	ldr	r2, [r3, #4]
 800a4ac:	4b0a      	ldr	r3, [pc, #40]	@ (800a4d8 <vPortFree+0xc0>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	4413      	add	r3, r2
 800a4b2:	4a09      	ldr	r2, [pc, #36]	@ (800a4d8 <vPortFree+0xc0>)
 800a4b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a4b6:	6938      	ldr	r0, [r7, #16]
 800a4b8:	f000 f874 	bl	800a5a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a4bc:	4b07      	ldr	r3, [pc, #28]	@ (800a4dc <vPortFree+0xc4>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	3301      	adds	r3, #1
 800a4c2:	4a06      	ldr	r2, [pc, #24]	@ (800a4dc <vPortFree+0xc4>)
 800a4c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a4c6:	f7fe fb51 	bl	8008b6c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a4ca:	bf00      	nop
 800a4cc:	3718      	adds	r7, #24
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}
 800a4d2:	bf00      	nop
 800a4d4:	20004e14 	.word	0x20004e14
 800a4d8:	20004e04 	.word	0x20004e04
 800a4dc:	20004e10 	.word	0x20004e10

0800a4e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b085      	sub	sp, #20
 800a4e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a4e6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800a4ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a4ec:	4b27      	ldr	r3, [pc, #156]	@ (800a58c <prvHeapInit+0xac>)
 800a4ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	f003 0307 	and.w	r3, r3, #7
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d00c      	beq.n	800a514 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	3307      	adds	r3, #7
 800a4fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	f023 0307 	bic.w	r3, r3, #7
 800a506:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a508:	68ba      	ldr	r2, [r7, #8]
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	1ad3      	subs	r3, r2, r3
 800a50e:	4a1f      	ldr	r2, [pc, #124]	@ (800a58c <prvHeapInit+0xac>)
 800a510:	4413      	add	r3, r2
 800a512:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a518:	4a1d      	ldr	r2, [pc, #116]	@ (800a590 <prvHeapInit+0xb0>)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a51e:	4b1c      	ldr	r3, [pc, #112]	@ (800a590 <prvHeapInit+0xb0>)
 800a520:	2200      	movs	r2, #0
 800a522:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	68ba      	ldr	r2, [r7, #8]
 800a528:	4413      	add	r3, r2
 800a52a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a52c:	2208      	movs	r2, #8
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	1a9b      	subs	r3, r3, r2
 800a532:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	f023 0307 	bic.w	r3, r3, #7
 800a53a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	4a15      	ldr	r2, [pc, #84]	@ (800a594 <prvHeapInit+0xb4>)
 800a540:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a542:	4b14      	ldr	r3, [pc, #80]	@ (800a594 <prvHeapInit+0xb4>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	2200      	movs	r2, #0
 800a548:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a54a:	4b12      	ldr	r3, [pc, #72]	@ (800a594 <prvHeapInit+0xb4>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	2200      	movs	r2, #0
 800a550:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	68fa      	ldr	r2, [r7, #12]
 800a55a:	1ad2      	subs	r2, r2, r3
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a560:	4b0c      	ldr	r3, [pc, #48]	@ (800a594 <prvHeapInit+0xb4>)
 800a562:	681a      	ldr	r2, [r3, #0]
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	685b      	ldr	r3, [r3, #4]
 800a56c:	4a0a      	ldr	r2, [pc, #40]	@ (800a598 <prvHeapInit+0xb8>)
 800a56e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	4a09      	ldr	r2, [pc, #36]	@ (800a59c <prvHeapInit+0xbc>)
 800a576:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a578:	4b09      	ldr	r3, [pc, #36]	@ (800a5a0 <prvHeapInit+0xc0>)
 800a57a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a57e:	601a      	str	r2, [r3, #0]
}
 800a580:	bf00      	nop
 800a582:	3714      	adds	r7, #20
 800a584:	46bd      	mov	sp, r7
 800a586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58a:	4770      	bx	lr
 800a58c:	200011f8 	.word	0x200011f8
 800a590:	20004df8 	.word	0x20004df8
 800a594:	20004e00 	.word	0x20004e00
 800a598:	20004e08 	.word	0x20004e08
 800a59c:	20004e04 	.word	0x20004e04
 800a5a0:	20004e14 	.word	0x20004e14

0800a5a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b085      	sub	sp, #20
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a5ac:	4b28      	ldr	r3, [pc, #160]	@ (800a650 <prvInsertBlockIntoFreeList+0xac>)
 800a5ae:	60fb      	str	r3, [r7, #12]
 800a5b0:	e002      	b.n	800a5b8 <prvInsertBlockIntoFreeList+0x14>
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	60fb      	str	r3, [r7, #12]
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	687a      	ldr	r2, [r7, #4]
 800a5be:	429a      	cmp	r2, r3
 800a5c0:	d8f7      	bhi.n	800a5b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	685b      	ldr	r3, [r3, #4]
 800a5ca:	68ba      	ldr	r2, [r7, #8]
 800a5cc:	4413      	add	r3, r2
 800a5ce:	687a      	ldr	r2, [r7, #4]
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	d108      	bne.n	800a5e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	685a      	ldr	r2, [r3, #4]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	685b      	ldr	r3, [r3, #4]
 800a5dc:	441a      	add	r2, r3
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	685b      	ldr	r3, [r3, #4]
 800a5ee:	68ba      	ldr	r2, [r7, #8]
 800a5f0:	441a      	add	r2, r3
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	d118      	bne.n	800a62c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	681a      	ldr	r2, [r3, #0]
 800a5fe:	4b15      	ldr	r3, [pc, #84]	@ (800a654 <prvInsertBlockIntoFreeList+0xb0>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	429a      	cmp	r2, r3
 800a604:	d00d      	beq.n	800a622 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	685a      	ldr	r2, [r3, #4]
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	685b      	ldr	r3, [r3, #4]
 800a610:	441a      	add	r2, r3
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	681a      	ldr	r2, [r3, #0]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	601a      	str	r2, [r3, #0]
 800a620:	e008      	b.n	800a634 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a622:	4b0c      	ldr	r3, [pc, #48]	@ (800a654 <prvInsertBlockIntoFreeList+0xb0>)
 800a624:	681a      	ldr	r2, [r3, #0]
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	601a      	str	r2, [r3, #0]
 800a62a:	e003      	b.n	800a634 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681a      	ldr	r2, [r3, #0]
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a634:	68fa      	ldr	r2, [r7, #12]
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	429a      	cmp	r2, r3
 800a63a:	d002      	beq.n	800a642 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	687a      	ldr	r2, [r7, #4]
 800a640:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a642:	bf00      	nop
 800a644:	3714      	adds	r7, #20
 800a646:	46bd      	mov	sp, r7
 800a648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64c:	4770      	bx	lr
 800a64e:	bf00      	nop
 800a650:	20004df8 	.word	0x20004df8
 800a654:	20004e00 	.word	0x20004e00

0800a658 <srand>:
 800a658:	b538      	push	{r3, r4, r5, lr}
 800a65a:	4b10      	ldr	r3, [pc, #64]	@ (800a69c <srand+0x44>)
 800a65c:	681d      	ldr	r5, [r3, #0]
 800a65e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800a660:	4604      	mov	r4, r0
 800a662:	b9b3      	cbnz	r3, 800a692 <srand+0x3a>
 800a664:	2018      	movs	r0, #24
 800a666:	f002 f8e1 	bl	800c82c <malloc>
 800a66a:	4602      	mov	r2, r0
 800a66c:	6328      	str	r0, [r5, #48]	@ 0x30
 800a66e:	b920      	cbnz	r0, 800a67a <srand+0x22>
 800a670:	4b0b      	ldr	r3, [pc, #44]	@ (800a6a0 <srand+0x48>)
 800a672:	480c      	ldr	r0, [pc, #48]	@ (800a6a4 <srand+0x4c>)
 800a674:	2146      	movs	r1, #70	@ 0x46
 800a676:	f001 fa17 	bl	800baa8 <__assert_func>
 800a67a:	490b      	ldr	r1, [pc, #44]	@ (800a6a8 <srand+0x50>)
 800a67c:	4b0b      	ldr	r3, [pc, #44]	@ (800a6ac <srand+0x54>)
 800a67e:	e9c0 1300 	strd	r1, r3, [r0]
 800a682:	4b0b      	ldr	r3, [pc, #44]	@ (800a6b0 <srand+0x58>)
 800a684:	6083      	str	r3, [r0, #8]
 800a686:	230b      	movs	r3, #11
 800a688:	8183      	strh	r3, [r0, #12]
 800a68a:	2100      	movs	r1, #0
 800a68c:	2001      	movs	r0, #1
 800a68e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800a692:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800a694:	2200      	movs	r2, #0
 800a696:	611c      	str	r4, [r3, #16]
 800a698:	615a      	str	r2, [r3, #20]
 800a69a:	bd38      	pop	{r3, r4, r5, pc}
 800a69c:	20000064 	.word	0x20000064
 800a6a0:	080102ab 	.word	0x080102ab
 800a6a4:	080102c2 	.word	0x080102c2
 800a6a8:	abcd330e 	.word	0xabcd330e
 800a6ac:	e66d1234 	.word	0xe66d1234
 800a6b0:	0005deec 	.word	0x0005deec

0800a6b4 <rand>:
 800a6b4:	4b16      	ldr	r3, [pc, #88]	@ (800a710 <rand+0x5c>)
 800a6b6:	b510      	push	{r4, lr}
 800a6b8:	681c      	ldr	r4, [r3, #0]
 800a6ba:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800a6bc:	b9b3      	cbnz	r3, 800a6ec <rand+0x38>
 800a6be:	2018      	movs	r0, #24
 800a6c0:	f002 f8b4 	bl	800c82c <malloc>
 800a6c4:	4602      	mov	r2, r0
 800a6c6:	6320      	str	r0, [r4, #48]	@ 0x30
 800a6c8:	b920      	cbnz	r0, 800a6d4 <rand+0x20>
 800a6ca:	4b12      	ldr	r3, [pc, #72]	@ (800a714 <rand+0x60>)
 800a6cc:	4812      	ldr	r0, [pc, #72]	@ (800a718 <rand+0x64>)
 800a6ce:	2152      	movs	r1, #82	@ 0x52
 800a6d0:	f001 f9ea 	bl	800baa8 <__assert_func>
 800a6d4:	4911      	ldr	r1, [pc, #68]	@ (800a71c <rand+0x68>)
 800a6d6:	4b12      	ldr	r3, [pc, #72]	@ (800a720 <rand+0x6c>)
 800a6d8:	e9c0 1300 	strd	r1, r3, [r0]
 800a6dc:	4b11      	ldr	r3, [pc, #68]	@ (800a724 <rand+0x70>)
 800a6de:	6083      	str	r3, [r0, #8]
 800a6e0:	230b      	movs	r3, #11
 800a6e2:	8183      	strh	r3, [r0, #12]
 800a6e4:	2100      	movs	r1, #0
 800a6e6:	2001      	movs	r0, #1
 800a6e8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800a6ec:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a6ee:	480e      	ldr	r0, [pc, #56]	@ (800a728 <rand+0x74>)
 800a6f0:	690b      	ldr	r3, [r1, #16]
 800a6f2:	694c      	ldr	r4, [r1, #20]
 800a6f4:	4a0d      	ldr	r2, [pc, #52]	@ (800a72c <rand+0x78>)
 800a6f6:	4358      	muls	r0, r3
 800a6f8:	fb02 0004 	mla	r0, r2, r4, r0
 800a6fc:	fba3 3202 	umull	r3, r2, r3, r2
 800a700:	3301      	adds	r3, #1
 800a702:	eb40 0002 	adc.w	r0, r0, r2
 800a706:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800a70a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800a70e:	bd10      	pop	{r4, pc}
 800a710:	20000064 	.word	0x20000064
 800a714:	080102ab 	.word	0x080102ab
 800a718:	080102c2 	.word	0x080102c2
 800a71c:	abcd330e 	.word	0xabcd330e
 800a720:	e66d1234 	.word	0xe66d1234
 800a724:	0005deec 	.word	0x0005deec
 800a728:	5851f42d 	.word	0x5851f42d
 800a72c:	4c957f2d 	.word	0x4c957f2d

0800a730 <__cvt>:
 800a730:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a734:	ec57 6b10 	vmov	r6, r7, d0
 800a738:	2f00      	cmp	r7, #0
 800a73a:	460c      	mov	r4, r1
 800a73c:	4619      	mov	r1, r3
 800a73e:	463b      	mov	r3, r7
 800a740:	bfbb      	ittet	lt
 800a742:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a746:	461f      	movlt	r7, r3
 800a748:	2300      	movge	r3, #0
 800a74a:	232d      	movlt	r3, #45	@ 0x2d
 800a74c:	700b      	strb	r3, [r1, #0]
 800a74e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a750:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a754:	4691      	mov	r9, r2
 800a756:	f023 0820 	bic.w	r8, r3, #32
 800a75a:	bfbc      	itt	lt
 800a75c:	4632      	movlt	r2, r6
 800a75e:	4616      	movlt	r6, r2
 800a760:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a764:	d005      	beq.n	800a772 <__cvt+0x42>
 800a766:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a76a:	d100      	bne.n	800a76e <__cvt+0x3e>
 800a76c:	3401      	adds	r4, #1
 800a76e:	2102      	movs	r1, #2
 800a770:	e000      	b.n	800a774 <__cvt+0x44>
 800a772:	2103      	movs	r1, #3
 800a774:	ab03      	add	r3, sp, #12
 800a776:	9301      	str	r3, [sp, #4]
 800a778:	ab02      	add	r3, sp, #8
 800a77a:	9300      	str	r3, [sp, #0]
 800a77c:	ec47 6b10 	vmov	d0, r6, r7
 800a780:	4653      	mov	r3, sl
 800a782:	4622      	mov	r2, r4
 800a784:	f001 fa38 	bl	800bbf8 <_dtoa_r>
 800a788:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a78c:	4605      	mov	r5, r0
 800a78e:	d119      	bne.n	800a7c4 <__cvt+0x94>
 800a790:	f019 0f01 	tst.w	r9, #1
 800a794:	d00e      	beq.n	800a7b4 <__cvt+0x84>
 800a796:	eb00 0904 	add.w	r9, r0, r4
 800a79a:	2200      	movs	r2, #0
 800a79c:	2300      	movs	r3, #0
 800a79e:	4630      	mov	r0, r6
 800a7a0:	4639      	mov	r1, r7
 800a7a2:	f7f6 f991 	bl	8000ac8 <__aeabi_dcmpeq>
 800a7a6:	b108      	cbz	r0, 800a7ac <__cvt+0x7c>
 800a7a8:	f8cd 900c 	str.w	r9, [sp, #12]
 800a7ac:	2230      	movs	r2, #48	@ 0x30
 800a7ae:	9b03      	ldr	r3, [sp, #12]
 800a7b0:	454b      	cmp	r3, r9
 800a7b2:	d31e      	bcc.n	800a7f2 <__cvt+0xc2>
 800a7b4:	9b03      	ldr	r3, [sp, #12]
 800a7b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a7b8:	1b5b      	subs	r3, r3, r5
 800a7ba:	4628      	mov	r0, r5
 800a7bc:	6013      	str	r3, [r2, #0]
 800a7be:	b004      	add	sp, #16
 800a7c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7c4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a7c8:	eb00 0904 	add.w	r9, r0, r4
 800a7cc:	d1e5      	bne.n	800a79a <__cvt+0x6a>
 800a7ce:	7803      	ldrb	r3, [r0, #0]
 800a7d0:	2b30      	cmp	r3, #48	@ 0x30
 800a7d2:	d10a      	bne.n	800a7ea <__cvt+0xba>
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	4630      	mov	r0, r6
 800a7da:	4639      	mov	r1, r7
 800a7dc:	f7f6 f974 	bl	8000ac8 <__aeabi_dcmpeq>
 800a7e0:	b918      	cbnz	r0, 800a7ea <__cvt+0xba>
 800a7e2:	f1c4 0401 	rsb	r4, r4, #1
 800a7e6:	f8ca 4000 	str.w	r4, [sl]
 800a7ea:	f8da 3000 	ldr.w	r3, [sl]
 800a7ee:	4499      	add	r9, r3
 800a7f0:	e7d3      	b.n	800a79a <__cvt+0x6a>
 800a7f2:	1c59      	adds	r1, r3, #1
 800a7f4:	9103      	str	r1, [sp, #12]
 800a7f6:	701a      	strb	r2, [r3, #0]
 800a7f8:	e7d9      	b.n	800a7ae <__cvt+0x7e>

0800a7fa <__exponent>:
 800a7fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a7fc:	2900      	cmp	r1, #0
 800a7fe:	bfba      	itte	lt
 800a800:	4249      	neglt	r1, r1
 800a802:	232d      	movlt	r3, #45	@ 0x2d
 800a804:	232b      	movge	r3, #43	@ 0x2b
 800a806:	2909      	cmp	r1, #9
 800a808:	7002      	strb	r2, [r0, #0]
 800a80a:	7043      	strb	r3, [r0, #1]
 800a80c:	dd29      	ble.n	800a862 <__exponent+0x68>
 800a80e:	f10d 0307 	add.w	r3, sp, #7
 800a812:	461d      	mov	r5, r3
 800a814:	270a      	movs	r7, #10
 800a816:	461a      	mov	r2, r3
 800a818:	fbb1 f6f7 	udiv	r6, r1, r7
 800a81c:	fb07 1416 	mls	r4, r7, r6, r1
 800a820:	3430      	adds	r4, #48	@ 0x30
 800a822:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a826:	460c      	mov	r4, r1
 800a828:	2c63      	cmp	r4, #99	@ 0x63
 800a82a:	f103 33ff 	add.w	r3, r3, #4294967295
 800a82e:	4631      	mov	r1, r6
 800a830:	dcf1      	bgt.n	800a816 <__exponent+0x1c>
 800a832:	3130      	adds	r1, #48	@ 0x30
 800a834:	1e94      	subs	r4, r2, #2
 800a836:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a83a:	1c41      	adds	r1, r0, #1
 800a83c:	4623      	mov	r3, r4
 800a83e:	42ab      	cmp	r3, r5
 800a840:	d30a      	bcc.n	800a858 <__exponent+0x5e>
 800a842:	f10d 0309 	add.w	r3, sp, #9
 800a846:	1a9b      	subs	r3, r3, r2
 800a848:	42ac      	cmp	r4, r5
 800a84a:	bf88      	it	hi
 800a84c:	2300      	movhi	r3, #0
 800a84e:	3302      	adds	r3, #2
 800a850:	4403      	add	r3, r0
 800a852:	1a18      	subs	r0, r3, r0
 800a854:	b003      	add	sp, #12
 800a856:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a858:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a85c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a860:	e7ed      	b.n	800a83e <__exponent+0x44>
 800a862:	2330      	movs	r3, #48	@ 0x30
 800a864:	3130      	adds	r1, #48	@ 0x30
 800a866:	7083      	strb	r3, [r0, #2]
 800a868:	70c1      	strb	r1, [r0, #3]
 800a86a:	1d03      	adds	r3, r0, #4
 800a86c:	e7f1      	b.n	800a852 <__exponent+0x58>
	...

0800a870 <_printf_float>:
 800a870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a874:	b08d      	sub	sp, #52	@ 0x34
 800a876:	460c      	mov	r4, r1
 800a878:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a87c:	4616      	mov	r6, r2
 800a87e:	461f      	mov	r7, r3
 800a880:	4605      	mov	r5, r0
 800a882:	f001 f827 	bl	800b8d4 <_localeconv_r>
 800a886:	6803      	ldr	r3, [r0, #0]
 800a888:	9304      	str	r3, [sp, #16]
 800a88a:	4618      	mov	r0, r3
 800a88c:	f7f5 fcf0 	bl	8000270 <strlen>
 800a890:	2300      	movs	r3, #0
 800a892:	930a      	str	r3, [sp, #40]	@ 0x28
 800a894:	f8d8 3000 	ldr.w	r3, [r8]
 800a898:	9005      	str	r0, [sp, #20]
 800a89a:	3307      	adds	r3, #7
 800a89c:	f023 0307 	bic.w	r3, r3, #7
 800a8a0:	f103 0208 	add.w	r2, r3, #8
 800a8a4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a8a8:	f8d4 b000 	ldr.w	fp, [r4]
 800a8ac:	f8c8 2000 	str.w	r2, [r8]
 800a8b0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a8b4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a8b8:	9307      	str	r3, [sp, #28]
 800a8ba:	f8cd 8018 	str.w	r8, [sp, #24]
 800a8be:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a8c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a8c6:	4b9c      	ldr	r3, [pc, #624]	@ (800ab38 <_printf_float+0x2c8>)
 800a8c8:	f04f 32ff 	mov.w	r2, #4294967295
 800a8cc:	f7f6 f92e 	bl	8000b2c <__aeabi_dcmpun>
 800a8d0:	bb70      	cbnz	r0, 800a930 <_printf_float+0xc0>
 800a8d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a8d6:	4b98      	ldr	r3, [pc, #608]	@ (800ab38 <_printf_float+0x2c8>)
 800a8d8:	f04f 32ff 	mov.w	r2, #4294967295
 800a8dc:	f7f6 f908 	bl	8000af0 <__aeabi_dcmple>
 800a8e0:	bb30      	cbnz	r0, 800a930 <_printf_float+0xc0>
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	4640      	mov	r0, r8
 800a8e8:	4649      	mov	r1, r9
 800a8ea:	f7f6 f8f7 	bl	8000adc <__aeabi_dcmplt>
 800a8ee:	b110      	cbz	r0, 800a8f6 <_printf_float+0x86>
 800a8f0:	232d      	movs	r3, #45	@ 0x2d
 800a8f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a8f6:	4a91      	ldr	r2, [pc, #580]	@ (800ab3c <_printf_float+0x2cc>)
 800a8f8:	4b91      	ldr	r3, [pc, #580]	@ (800ab40 <_printf_float+0x2d0>)
 800a8fa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a8fe:	bf8c      	ite	hi
 800a900:	4690      	movhi	r8, r2
 800a902:	4698      	movls	r8, r3
 800a904:	2303      	movs	r3, #3
 800a906:	6123      	str	r3, [r4, #16]
 800a908:	f02b 0304 	bic.w	r3, fp, #4
 800a90c:	6023      	str	r3, [r4, #0]
 800a90e:	f04f 0900 	mov.w	r9, #0
 800a912:	9700      	str	r7, [sp, #0]
 800a914:	4633      	mov	r3, r6
 800a916:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a918:	4621      	mov	r1, r4
 800a91a:	4628      	mov	r0, r5
 800a91c:	f000 f9d2 	bl	800acc4 <_printf_common>
 800a920:	3001      	adds	r0, #1
 800a922:	f040 808d 	bne.w	800aa40 <_printf_float+0x1d0>
 800a926:	f04f 30ff 	mov.w	r0, #4294967295
 800a92a:	b00d      	add	sp, #52	@ 0x34
 800a92c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a930:	4642      	mov	r2, r8
 800a932:	464b      	mov	r3, r9
 800a934:	4640      	mov	r0, r8
 800a936:	4649      	mov	r1, r9
 800a938:	f7f6 f8f8 	bl	8000b2c <__aeabi_dcmpun>
 800a93c:	b140      	cbz	r0, 800a950 <_printf_float+0xe0>
 800a93e:	464b      	mov	r3, r9
 800a940:	2b00      	cmp	r3, #0
 800a942:	bfbc      	itt	lt
 800a944:	232d      	movlt	r3, #45	@ 0x2d
 800a946:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a94a:	4a7e      	ldr	r2, [pc, #504]	@ (800ab44 <_printf_float+0x2d4>)
 800a94c:	4b7e      	ldr	r3, [pc, #504]	@ (800ab48 <_printf_float+0x2d8>)
 800a94e:	e7d4      	b.n	800a8fa <_printf_float+0x8a>
 800a950:	6863      	ldr	r3, [r4, #4]
 800a952:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a956:	9206      	str	r2, [sp, #24]
 800a958:	1c5a      	adds	r2, r3, #1
 800a95a:	d13b      	bne.n	800a9d4 <_printf_float+0x164>
 800a95c:	2306      	movs	r3, #6
 800a95e:	6063      	str	r3, [r4, #4]
 800a960:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a964:	2300      	movs	r3, #0
 800a966:	6022      	str	r2, [r4, #0]
 800a968:	9303      	str	r3, [sp, #12]
 800a96a:	ab0a      	add	r3, sp, #40	@ 0x28
 800a96c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a970:	ab09      	add	r3, sp, #36	@ 0x24
 800a972:	9300      	str	r3, [sp, #0]
 800a974:	6861      	ldr	r1, [r4, #4]
 800a976:	ec49 8b10 	vmov	d0, r8, r9
 800a97a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a97e:	4628      	mov	r0, r5
 800a980:	f7ff fed6 	bl	800a730 <__cvt>
 800a984:	9b06      	ldr	r3, [sp, #24]
 800a986:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a988:	2b47      	cmp	r3, #71	@ 0x47
 800a98a:	4680      	mov	r8, r0
 800a98c:	d129      	bne.n	800a9e2 <_printf_float+0x172>
 800a98e:	1cc8      	adds	r0, r1, #3
 800a990:	db02      	blt.n	800a998 <_printf_float+0x128>
 800a992:	6863      	ldr	r3, [r4, #4]
 800a994:	4299      	cmp	r1, r3
 800a996:	dd41      	ble.n	800aa1c <_printf_float+0x1ac>
 800a998:	f1aa 0a02 	sub.w	sl, sl, #2
 800a99c:	fa5f fa8a 	uxtb.w	sl, sl
 800a9a0:	3901      	subs	r1, #1
 800a9a2:	4652      	mov	r2, sl
 800a9a4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a9a8:	9109      	str	r1, [sp, #36]	@ 0x24
 800a9aa:	f7ff ff26 	bl	800a7fa <__exponent>
 800a9ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a9b0:	1813      	adds	r3, r2, r0
 800a9b2:	2a01      	cmp	r2, #1
 800a9b4:	4681      	mov	r9, r0
 800a9b6:	6123      	str	r3, [r4, #16]
 800a9b8:	dc02      	bgt.n	800a9c0 <_printf_float+0x150>
 800a9ba:	6822      	ldr	r2, [r4, #0]
 800a9bc:	07d2      	lsls	r2, r2, #31
 800a9be:	d501      	bpl.n	800a9c4 <_printf_float+0x154>
 800a9c0:	3301      	adds	r3, #1
 800a9c2:	6123      	str	r3, [r4, #16]
 800a9c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d0a2      	beq.n	800a912 <_printf_float+0xa2>
 800a9cc:	232d      	movs	r3, #45	@ 0x2d
 800a9ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a9d2:	e79e      	b.n	800a912 <_printf_float+0xa2>
 800a9d4:	9a06      	ldr	r2, [sp, #24]
 800a9d6:	2a47      	cmp	r2, #71	@ 0x47
 800a9d8:	d1c2      	bne.n	800a960 <_printf_float+0xf0>
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d1c0      	bne.n	800a960 <_printf_float+0xf0>
 800a9de:	2301      	movs	r3, #1
 800a9e0:	e7bd      	b.n	800a95e <_printf_float+0xee>
 800a9e2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a9e6:	d9db      	bls.n	800a9a0 <_printf_float+0x130>
 800a9e8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a9ec:	d118      	bne.n	800aa20 <_printf_float+0x1b0>
 800a9ee:	2900      	cmp	r1, #0
 800a9f0:	6863      	ldr	r3, [r4, #4]
 800a9f2:	dd0b      	ble.n	800aa0c <_printf_float+0x19c>
 800a9f4:	6121      	str	r1, [r4, #16]
 800a9f6:	b913      	cbnz	r3, 800a9fe <_printf_float+0x18e>
 800a9f8:	6822      	ldr	r2, [r4, #0]
 800a9fa:	07d0      	lsls	r0, r2, #31
 800a9fc:	d502      	bpl.n	800aa04 <_printf_float+0x194>
 800a9fe:	3301      	adds	r3, #1
 800aa00:	440b      	add	r3, r1
 800aa02:	6123      	str	r3, [r4, #16]
 800aa04:	65a1      	str	r1, [r4, #88]	@ 0x58
 800aa06:	f04f 0900 	mov.w	r9, #0
 800aa0a:	e7db      	b.n	800a9c4 <_printf_float+0x154>
 800aa0c:	b913      	cbnz	r3, 800aa14 <_printf_float+0x1a4>
 800aa0e:	6822      	ldr	r2, [r4, #0]
 800aa10:	07d2      	lsls	r2, r2, #31
 800aa12:	d501      	bpl.n	800aa18 <_printf_float+0x1a8>
 800aa14:	3302      	adds	r3, #2
 800aa16:	e7f4      	b.n	800aa02 <_printf_float+0x192>
 800aa18:	2301      	movs	r3, #1
 800aa1a:	e7f2      	b.n	800aa02 <_printf_float+0x192>
 800aa1c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800aa20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa22:	4299      	cmp	r1, r3
 800aa24:	db05      	blt.n	800aa32 <_printf_float+0x1c2>
 800aa26:	6823      	ldr	r3, [r4, #0]
 800aa28:	6121      	str	r1, [r4, #16]
 800aa2a:	07d8      	lsls	r0, r3, #31
 800aa2c:	d5ea      	bpl.n	800aa04 <_printf_float+0x194>
 800aa2e:	1c4b      	adds	r3, r1, #1
 800aa30:	e7e7      	b.n	800aa02 <_printf_float+0x192>
 800aa32:	2900      	cmp	r1, #0
 800aa34:	bfd4      	ite	le
 800aa36:	f1c1 0202 	rsble	r2, r1, #2
 800aa3a:	2201      	movgt	r2, #1
 800aa3c:	4413      	add	r3, r2
 800aa3e:	e7e0      	b.n	800aa02 <_printf_float+0x192>
 800aa40:	6823      	ldr	r3, [r4, #0]
 800aa42:	055a      	lsls	r2, r3, #21
 800aa44:	d407      	bmi.n	800aa56 <_printf_float+0x1e6>
 800aa46:	6923      	ldr	r3, [r4, #16]
 800aa48:	4642      	mov	r2, r8
 800aa4a:	4631      	mov	r1, r6
 800aa4c:	4628      	mov	r0, r5
 800aa4e:	47b8      	blx	r7
 800aa50:	3001      	adds	r0, #1
 800aa52:	d12b      	bne.n	800aaac <_printf_float+0x23c>
 800aa54:	e767      	b.n	800a926 <_printf_float+0xb6>
 800aa56:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800aa5a:	f240 80dd 	bls.w	800ac18 <_printf_float+0x3a8>
 800aa5e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800aa62:	2200      	movs	r2, #0
 800aa64:	2300      	movs	r3, #0
 800aa66:	f7f6 f82f 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa6a:	2800      	cmp	r0, #0
 800aa6c:	d033      	beq.n	800aad6 <_printf_float+0x266>
 800aa6e:	4a37      	ldr	r2, [pc, #220]	@ (800ab4c <_printf_float+0x2dc>)
 800aa70:	2301      	movs	r3, #1
 800aa72:	4631      	mov	r1, r6
 800aa74:	4628      	mov	r0, r5
 800aa76:	47b8      	blx	r7
 800aa78:	3001      	adds	r0, #1
 800aa7a:	f43f af54 	beq.w	800a926 <_printf_float+0xb6>
 800aa7e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800aa82:	4543      	cmp	r3, r8
 800aa84:	db02      	blt.n	800aa8c <_printf_float+0x21c>
 800aa86:	6823      	ldr	r3, [r4, #0]
 800aa88:	07d8      	lsls	r0, r3, #31
 800aa8a:	d50f      	bpl.n	800aaac <_printf_float+0x23c>
 800aa8c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa90:	4631      	mov	r1, r6
 800aa92:	4628      	mov	r0, r5
 800aa94:	47b8      	blx	r7
 800aa96:	3001      	adds	r0, #1
 800aa98:	f43f af45 	beq.w	800a926 <_printf_float+0xb6>
 800aa9c:	f04f 0900 	mov.w	r9, #0
 800aaa0:	f108 38ff 	add.w	r8, r8, #4294967295
 800aaa4:	f104 0a1a 	add.w	sl, r4, #26
 800aaa8:	45c8      	cmp	r8, r9
 800aaaa:	dc09      	bgt.n	800aac0 <_printf_float+0x250>
 800aaac:	6823      	ldr	r3, [r4, #0]
 800aaae:	079b      	lsls	r3, r3, #30
 800aab0:	f100 8103 	bmi.w	800acba <_printf_float+0x44a>
 800aab4:	68e0      	ldr	r0, [r4, #12]
 800aab6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aab8:	4298      	cmp	r0, r3
 800aaba:	bfb8      	it	lt
 800aabc:	4618      	movlt	r0, r3
 800aabe:	e734      	b.n	800a92a <_printf_float+0xba>
 800aac0:	2301      	movs	r3, #1
 800aac2:	4652      	mov	r2, sl
 800aac4:	4631      	mov	r1, r6
 800aac6:	4628      	mov	r0, r5
 800aac8:	47b8      	blx	r7
 800aaca:	3001      	adds	r0, #1
 800aacc:	f43f af2b 	beq.w	800a926 <_printf_float+0xb6>
 800aad0:	f109 0901 	add.w	r9, r9, #1
 800aad4:	e7e8      	b.n	800aaa8 <_printf_float+0x238>
 800aad6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aad8:	2b00      	cmp	r3, #0
 800aada:	dc39      	bgt.n	800ab50 <_printf_float+0x2e0>
 800aadc:	4a1b      	ldr	r2, [pc, #108]	@ (800ab4c <_printf_float+0x2dc>)
 800aade:	2301      	movs	r3, #1
 800aae0:	4631      	mov	r1, r6
 800aae2:	4628      	mov	r0, r5
 800aae4:	47b8      	blx	r7
 800aae6:	3001      	adds	r0, #1
 800aae8:	f43f af1d 	beq.w	800a926 <_printf_float+0xb6>
 800aaec:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800aaf0:	ea59 0303 	orrs.w	r3, r9, r3
 800aaf4:	d102      	bne.n	800aafc <_printf_float+0x28c>
 800aaf6:	6823      	ldr	r3, [r4, #0]
 800aaf8:	07d9      	lsls	r1, r3, #31
 800aafa:	d5d7      	bpl.n	800aaac <_printf_float+0x23c>
 800aafc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ab00:	4631      	mov	r1, r6
 800ab02:	4628      	mov	r0, r5
 800ab04:	47b8      	blx	r7
 800ab06:	3001      	adds	r0, #1
 800ab08:	f43f af0d 	beq.w	800a926 <_printf_float+0xb6>
 800ab0c:	f04f 0a00 	mov.w	sl, #0
 800ab10:	f104 0b1a 	add.w	fp, r4, #26
 800ab14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab16:	425b      	negs	r3, r3
 800ab18:	4553      	cmp	r3, sl
 800ab1a:	dc01      	bgt.n	800ab20 <_printf_float+0x2b0>
 800ab1c:	464b      	mov	r3, r9
 800ab1e:	e793      	b.n	800aa48 <_printf_float+0x1d8>
 800ab20:	2301      	movs	r3, #1
 800ab22:	465a      	mov	r2, fp
 800ab24:	4631      	mov	r1, r6
 800ab26:	4628      	mov	r0, r5
 800ab28:	47b8      	blx	r7
 800ab2a:	3001      	adds	r0, #1
 800ab2c:	f43f aefb 	beq.w	800a926 <_printf_float+0xb6>
 800ab30:	f10a 0a01 	add.w	sl, sl, #1
 800ab34:	e7ee      	b.n	800ab14 <_printf_float+0x2a4>
 800ab36:	bf00      	nop
 800ab38:	7fefffff 	.word	0x7fefffff
 800ab3c:	0801031e 	.word	0x0801031e
 800ab40:	0801031a 	.word	0x0801031a
 800ab44:	08010326 	.word	0x08010326
 800ab48:	08010322 	.word	0x08010322
 800ab4c:	0801032a 	.word	0x0801032a
 800ab50:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ab52:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ab56:	4553      	cmp	r3, sl
 800ab58:	bfa8      	it	ge
 800ab5a:	4653      	movge	r3, sl
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	4699      	mov	r9, r3
 800ab60:	dc36      	bgt.n	800abd0 <_printf_float+0x360>
 800ab62:	f04f 0b00 	mov.w	fp, #0
 800ab66:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ab6a:	f104 021a 	add.w	r2, r4, #26
 800ab6e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ab70:	9306      	str	r3, [sp, #24]
 800ab72:	eba3 0309 	sub.w	r3, r3, r9
 800ab76:	455b      	cmp	r3, fp
 800ab78:	dc31      	bgt.n	800abde <_printf_float+0x36e>
 800ab7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab7c:	459a      	cmp	sl, r3
 800ab7e:	dc3a      	bgt.n	800abf6 <_printf_float+0x386>
 800ab80:	6823      	ldr	r3, [r4, #0]
 800ab82:	07da      	lsls	r2, r3, #31
 800ab84:	d437      	bmi.n	800abf6 <_printf_float+0x386>
 800ab86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab88:	ebaa 0903 	sub.w	r9, sl, r3
 800ab8c:	9b06      	ldr	r3, [sp, #24]
 800ab8e:	ebaa 0303 	sub.w	r3, sl, r3
 800ab92:	4599      	cmp	r9, r3
 800ab94:	bfa8      	it	ge
 800ab96:	4699      	movge	r9, r3
 800ab98:	f1b9 0f00 	cmp.w	r9, #0
 800ab9c:	dc33      	bgt.n	800ac06 <_printf_float+0x396>
 800ab9e:	f04f 0800 	mov.w	r8, #0
 800aba2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aba6:	f104 0b1a 	add.w	fp, r4, #26
 800abaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abac:	ebaa 0303 	sub.w	r3, sl, r3
 800abb0:	eba3 0309 	sub.w	r3, r3, r9
 800abb4:	4543      	cmp	r3, r8
 800abb6:	f77f af79 	ble.w	800aaac <_printf_float+0x23c>
 800abba:	2301      	movs	r3, #1
 800abbc:	465a      	mov	r2, fp
 800abbe:	4631      	mov	r1, r6
 800abc0:	4628      	mov	r0, r5
 800abc2:	47b8      	blx	r7
 800abc4:	3001      	adds	r0, #1
 800abc6:	f43f aeae 	beq.w	800a926 <_printf_float+0xb6>
 800abca:	f108 0801 	add.w	r8, r8, #1
 800abce:	e7ec      	b.n	800abaa <_printf_float+0x33a>
 800abd0:	4642      	mov	r2, r8
 800abd2:	4631      	mov	r1, r6
 800abd4:	4628      	mov	r0, r5
 800abd6:	47b8      	blx	r7
 800abd8:	3001      	adds	r0, #1
 800abda:	d1c2      	bne.n	800ab62 <_printf_float+0x2f2>
 800abdc:	e6a3      	b.n	800a926 <_printf_float+0xb6>
 800abde:	2301      	movs	r3, #1
 800abe0:	4631      	mov	r1, r6
 800abe2:	4628      	mov	r0, r5
 800abe4:	9206      	str	r2, [sp, #24]
 800abe6:	47b8      	blx	r7
 800abe8:	3001      	adds	r0, #1
 800abea:	f43f ae9c 	beq.w	800a926 <_printf_float+0xb6>
 800abee:	9a06      	ldr	r2, [sp, #24]
 800abf0:	f10b 0b01 	add.w	fp, fp, #1
 800abf4:	e7bb      	b.n	800ab6e <_printf_float+0x2fe>
 800abf6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800abfa:	4631      	mov	r1, r6
 800abfc:	4628      	mov	r0, r5
 800abfe:	47b8      	blx	r7
 800ac00:	3001      	adds	r0, #1
 800ac02:	d1c0      	bne.n	800ab86 <_printf_float+0x316>
 800ac04:	e68f      	b.n	800a926 <_printf_float+0xb6>
 800ac06:	9a06      	ldr	r2, [sp, #24]
 800ac08:	464b      	mov	r3, r9
 800ac0a:	4442      	add	r2, r8
 800ac0c:	4631      	mov	r1, r6
 800ac0e:	4628      	mov	r0, r5
 800ac10:	47b8      	blx	r7
 800ac12:	3001      	adds	r0, #1
 800ac14:	d1c3      	bne.n	800ab9e <_printf_float+0x32e>
 800ac16:	e686      	b.n	800a926 <_printf_float+0xb6>
 800ac18:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ac1c:	f1ba 0f01 	cmp.w	sl, #1
 800ac20:	dc01      	bgt.n	800ac26 <_printf_float+0x3b6>
 800ac22:	07db      	lsls	r3, r3, #31
 800ac24:	d536      	bpl.n	800ac94 <_printf_float+0x424>
 800ac26:	2301      	movs	r3, #1
 800ac28:	4642      	mov	r2, r8
 800ac2a:	4631      	mov	r1, r6
 800ac2c:	4628      	mov	r0, r5
 800ac2e:	47b8      	blx	r7
 800ac30:	3001      	adds	r0, #1
 800ac32:	f43f ae78 	beq.w	800a926 <_printf_float+0xb6>
 800ac36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac3a:	4631      	mov	r1, r6
 800ac3c:	4628      	mov	r0, r5
 800ac3e:	47b8      	blx	r7
 800ac40:	3001      	adds	r0, #1
 800ac42:	f43f ae70 	beq.w	800a926 <_printf_float+0xb6>
 800ac46:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ac52:	f7f5 ff39 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac56:	b9c0      	cbnz	r0, 800ac8a <_printf_float+0x41a>
 800ac58:	4653      	mov	r3, sl
 800ac5a:	f108 0201 	add.w	r2, r8, #1
 800ac5e:	4631      	mov	r1, r6
 800ac60:	4628      	mov	r0, r5
 800ac62:	47b8      	blx	r7
 800ac64:	3001      	adds	r0, #1
 800ac66:	d10c      	bne.n	800ac82 <_printf_float+0x412>
 800ac68:	e65d      	b.n	800a926 <_printf_float+0xb6>
 800ac6a:	2301      	movs	r3, #1
 800ac6c:	465a      	mov	r2, fp
 800ac6e:	4631      	mov	r1, r6
 800ac70:	4628      	mov	r0, r5
 800ac72:	47b8      	blx	r7
 800ac74:	3001      	adds	r0, #1
 800ac76:	f43f ae56 	beq.w	800a926 <_printf_float+0xb6>
 800ac7a:	f108 0801 	add.w	r8, r8, #1
 800ac7e:	45d0      	cmp	r8, sl
 800ac80:	dbf3      	blt.n	800ac6a <_printf_float+0x3fa>
 800ac82:	464b      	mov	r3, r9
 800ac84:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ac88:	e6df      	b.n	800aa4a <_printf_float+0x1da>
 800ac8a:	f04f 0800 	mov.w	r8, #0
 800ac8e:	f104 0b1a 	add.w	fp, r4, #26
 800ac92:	e7f4      	b.n	800ac7e <_printf_float+0x40e>
 800ac94:	2301      	movs	r3, #1
 800ac96:	4642      	mov	r2, r8
 800ac98:	e7e1      	b.n	800ac5e <_printf_float+0x3ee>
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	464a      	mov	r2, r9
 800ac9e:	4631      	mov	r1, r6
 800aca0:	4628      	mov	r0, r5
 800aca2:	47b8      	blx	r7
 800aca4:	3001      	adds	r0, #1
 800aca6:	f43f ae3e 	beq.w	800a926 <_printf_float+0xb6>
 800acaa:	f108 0801 	add.w	r8, r8, #1
 800acae:	68e3      	ldr	r3, [r4, #12]
 800acb0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800acb2:	1a5b      	subs	r3, r3, r1
 800acb4:	4543      	cmp	r3, r8
 800acb6:	dcf0      	bgt.n	800ac9a <_printf_float+0x42a>
 800acb8:	e6fc      	b.n	800aab4 <_printf_float+0x244>
 800acba:	f04f 0800 	mov.w	r8, #0
 800acbe:	f104 0919 	add.w	r9, r4, #25
 800acc2:	e7f4      	b.n	800acae <_printf_float+0x43e>

0800acc4 <_printf_common>:
 800acc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acc8:	4616      	mov	r6, r2
 800acca:	4698      	mov	r8, r3
 800accc:	688a      	ldr	r2, [r1, #8]
 800acce:	690b      	ldr	r3, [r1, #16]
 800acd0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800acd4:	4293      	cmp	r3, r2
 800acd6:	bfb8      	it	lt
 800acd8:	4613      	movlt	r3, r2
 800acda:	6033      	str	r3, [r6, #0]
 800acdc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ace0:	4607      	mov	r7, r0
 800ace2:	460c      	mov	r4, r1
 800ace4:	b10a      	cbz	r2, 800acea <_printf_common+0x26>
 800ace6:	3301      	adds	r3, #1
 800ace8:	6033      	str	r3, [r6, #0]
 800acea:	6823      	ldr	r3, [r4, #0]
 800acec:	0699      	lsls	r1, r3, #26
 800acee:	bf42      	ittt	mi
 800acf0:	6833      	ldrmi	r3, [r6, #0]
 800acf2:	3302      	addmi	r3, #2
 800acf4:	6033      	strmi	r3, [r6, #0]
 800acf6:	6825      	ldr	r5, [r4, #0]
 800acf8:	f015 0506 	ands.w	r5, r5, #6
 800acfc:	d106      	bne.n	800ad0c <_printf_common+0x48>
 800acfe:	f104 0a19 	add.w	sl, r4, #25
 800ad02:	68e3      	ldr	r3, [r4, #12]
 800ad04:	6832      	ldr	r2, [r6, #0]
 800ad06:	1a9b      	subs	r3, r3, r2
 800ad08:	42ab      	cmp	r3, r5
 800ad0a:	dc26      	bgt.n	800ad5a <_printf_common+0x96>
 800ad0c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ad10:	6822      	ldr	r2, [r4, #0]
 800ad12:	3b00      	subs	r3, #0
 800ad14:	bf18      	it	ne
 800ad16:	2301      	movne	r3, #1
 800ad18:	0692      	lsls	r2, r2, #26
 800ad1a:	d42b      	bmi.n	800ad74 <_printf_common+0xb0>
 800ad1c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ad20:	4641      	mov	r1, r8
 800ad22:	4638      	mov	r0, r7
 800ad24:	47c8      	blx	r9
 800ad26:	3001      	adds	r0, #1
 800ad28:	d01e      	beq.n	800ad68 <_printf_common+0xa4>
 800ad2a:	6823      	ldr	r3, [r4, #0]
 800ad2c:	6922      	ldr	r2, [r4, #16]
 800ad2e:	f003 0306 	and.w	r3, r3, #6
 800ad32:	2b04      	cmp	r3, #4
 800ad34:	bf02      	ittt	eq
 800ad36:	68e5      	ldreq	r5, [r4, #12]
 800ad38:	6833      	ldreq	r3, [r6, #0]
 800ad3a:	1aed      	subeq	r5, r5, r3
 800ad3c:	68a3      	ldr	r3, [r4, #8]
 800ad3e:	bf0c      	ite	eq
 800ad40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ad44:	2500      	movne	r5, #0
 800ad46:	4293      	cmp	r3, r2
 800ad48:	bfc4      	itt	gt
 800ad4a:	1a9b      	subgt	r3, r3, r2
 800ad4c:	18ed      	addgt	r5, r5, r3
 800ad4e:	2600      	movs	r6, #0
 800ad50:	341a      	adds	r4, #26
 800ad52:	42b5      	cmp	r5, r6
 800ad54:	d11a      	bne.n	800ad8c <_printf_common+0xc8>
 800ad56:	2000      	movs	r0, #0
 800ad58:	e008      	b.n	800ad6c <_printf_common+0xa8>
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	4652      	mov	r2, sl
 800ad5e:	4641      	mov	r1, r8
 800ad60:	4638      	mov	r0, r7
 800ad62:	47c8      	blx	r9
 800ad64:	3001      	adds	r0, #1
 800ad66:	d103      	bne.n	800ad70 <_printf_common+0xac>
 800ad68:	f04f 30ff 	mov.w	r0, #4294967295
 800ad6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad70:	3501      	adds	r5, #1
 800ad72:	e7c6      	b.n	800ad02 <_printf_common+0x3e>
 800ad74:	18e1      	adds	r1, r4, r3
 800ad76:	1c5a      	adds	r2, r3, #1
 800ad78:	2030      	movs	r0, #48	@ 0x30
 800ad7a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ad7e:	4422      	add	r2, r4
 800ad80:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ad84:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ad88:	3302      	adds	r3, #2
 800ad8a:	e7c7      	b.n	800ad1c <_printf_common+0x58>
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	4622      	mov	r2, r4
 800ad90:	4641      	mov	r1, r8
 800ad92:	4638      	mov	r0, r7
 800ad94:	47c8      	blx	r9
 800ad96:	3001      	adds	r0, #1
 800ad98:	d0e6      	beq.n	800ad68 <_printf_common+0xa4>
 800ad9a:	3601      	adds	r6, #1
 800ad9c:	e7d9      	b.n	800ad52 <_printf_common+0x8e>
	...

0800ada0 <_printf_i>:
 800ada0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ada4:	7e0f      	ldrb	r7, [r1, #24]
 800ada6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ada8:	2f78      	cmp	r7, #120	@ 0x78
 800adaa:	4691      	mov	r9, r2
 800adac:	4680      	mov	r8, r0
 800adae:	460c      	mov	r4, r1
 800adb0:	469a      	mov	sl, r3
 800adb2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800adb6:	d807      	bhi.n	800adc8 <_printf_i+0x28>
 800adb8:	2f62      	cmp	r7, #98	@ 0x62
 800adba:	d80a      	bhi.n	800add2 <_printf_i+0x32>
 800adbc:	2f00      	cmp	r7, #0
 800adbe:	f000 80d1 	beq.w	800af64 <_printf_i+0x1c4>
 800adc2:	2f58      	cmp	r7, #88	@ 0x58
 800adc4:	f000 80b8 	beq.w	800af38 <_printf_i+0x198>
 800adc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800adcc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800add0:	e03a      	b.n	800ae48 <_printf_i+0xa8>
 800add2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800add6:	2b15      	cmp	r3, #21
 800add8:	d8f6      	bhi.n	800adc8 <_printf_i+0x28>
 800adda:	a101      	add	r1, pc, #4	@ (adr r1, 800ade0 <_printf_i+0x40>)
 800addc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ade0:	0800ae39 	.word	0x0800ae39
 800ade4:	0800ae4d 	.word	0x0800ae4d
 800ade8:	0800adc9 	.word	0x0800adc9
 800adec:	0800adc9 	.word	0x0800adc9
 800adf0:	0800adc9 	.word	0x0800adc9
 800adf4:	0800adc9 	.word	0x0800adc9
 800adf8:	0800ae4d 	.word	0x0800ae4d
 800adfc:	0800adc9 	.word	0x0800adc9
 800ae00:	0800adc9 	.word	0x0800adc9
 800ae04:	0800adc9 	.word	0x0800adc9
 800ae08:	0800adc9 	.word	0x0800adc9
 800ae0c:	0800af4b 	.word	0x0800af4b
 800ae10:	0800ae77 	.word	0x0800ae77
 800ae14:	0800af05 	.word	0x0800af05
 800ae18:	0800adc9 	.word	0x0800adc9
 800ae1c:	0800adc9 	.word	0x0800adc9
 800ae20:	0800af6d 	.word	0x0800af6d
 800ae24:	0800adc9 	.word	0x0800adc9
 800ae28:	0800ae77 	.word	0x0800ae77
 800ae2c:	0800adc9 	.word	0x0800adc9
 800ae30:	0800adc9 	.word	0x0800adc9
 800ae34:	0800af0d 	.word	0x0800af0d
 800ae38:	6833      	ldr	r3, [r6, #0]
 800ae3a:	1d1a      	adds	r2, r3, #4
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	6032      	str	r2, [r6, #0]
 800ae40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ae44:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ae48:	2301      	movs	r3, #1
 800ae4a:	e09c      	b.n	800af86 <_printf_i+0x1e6>
 800ae4c:	6833      	ldr	r3, [r6, #0]
 800ae4e:	6820      	ldr	r0, [r4, #0]
 800ae50:	1d19      	adds	r1, r3, #4
 800ae52:	6031      	str	r1, [r6, #0]
 800ae54:	0606      	lsls	r6, r0, #24
 800ae56:	d501      	bpl.n	800ae5c <_printf_i+0xbc>
 800ae58:	681d      	ldr	r5, [r3, #0]
 800ae5a:	e003      	b.n	800ae64 <_printf_i+0xc4>
 800ae5c:	0645      	lsls	r5, r0, #25
 800ae5e:	d5fb      	bpl.n	800ae58 <_printf_i+0xb8>
 800ae60:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ae64:	2d00      	cmp	r5, #0
 800ae66:	da03      	bge.n	800ae70 <_printf_i+0xd0>
 800ae68:	232d      	movs	r3, #45	@ 0x2d
 800ae6a:	426d      	negs	r5, r5
 800ae6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae70:	4858      	ldr	r0, [pc, #352]	@ (800afd4 <_printf_i+0x234>)
 800ae72:	230a      	movs	r3, #10
 800ae74:	e011      	b.n	800ae9a <_printf_i+0xfa>
 800ae76:	6821      	ldr	r1, [r4, #0]
 800ae78:	6833      	ldr	r3, [r6, #0]
 800ae7a:	0608      	lsls	r0, r1, #24
 800ae7c:	f853 5b04 	ldr.w	r5, [r3], #4
 800ae80:	d402      	bmi.n	800ae88 <_printf_i+0xe8>
 800ae82:	0649      	lsls	r1, r1, #25
 800ae84:	bf48      	it	mi
 800ae86:	b2ad      	uxthmi	r5, r5
 800ae88:	2f6f      	cmp	r7, #111	@ 0x6f
 800ae8a:	4852      	ldr	r0, [pc, #328]	@ (800afd4 <_printf_i+0x234>)
 800ae8c:	6033      	str	r3, [r6, #0]
 800ae8e:	bf14      	ite	ne
 800ae90:	230a      	movne	r3, #10
 800ae92:	2308      	moveq	r3, #8
 800ae94:	2100      	movs	r1, #0
 800ae96:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ae9a:	6866      	ldr	r6, [r4, #4]
 800ae9c:	60a6      	str	r6, [r4, #8]
 800ae9e:	2e00      	cmp	r6, #0
 800aea0:	db05      	blt.n	800aeae <_printf_i+0x10e>
 800aea2:	6821      	ldr	r1, [r4, #0]
 800aea4:	432e      	orrs	r6, r5
 800aea6:	f021 0104 	bic.w	r1, r1, #4
 800aeaa:	6021      	str	r1, [r4, #0]
 800aeac:	d04b      	beq.n	800af46 <_printf_i+0x1a6>
 800aeae:	4616      	mov	r6, r2
 800aeb0:	fbb5 f1f3 	udiv	r1, r5, r3
 800aeb4:	fb03 5711 	mls	r7, r3, r1, r5
 800aeb8:	5dc7      	ldrb	r7, [r0, r7]
 800aeba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aebe:	462f      	mov	r7, r5
 800aec0:	42bb      	cmp	r3, r7
 800aec2:	460d      	mov	r5, r1
 800aec4:	d9f4      	bls.n	800aeb0 <_printf_i+0x110>
 800aec6:	2b08      	cmp	r3, #8
 800aec8:	d10b      	bne.n	800aee2 <_printf_i+0x142>
 800aeca:	6823      	ldr	r3, [r4, #0]
 800aecc:	07df      	lsls	r7, r3, #31
 800aece:	d508      	bpl.n	800aee2 <_printf_i+0x142>
 800aed0:	6923      	ldr	r3, [r4, #16]
 800aed2:	6861      	ldr	r1, [r4, #4]
 800aed4:	4299      	cmp	r1, r3
 800aed6:	bfde      	ittt	le
 800aed8:	2330      	movle	r3, #48	@ 0x30
 800aeda:	f806 3c01 	strble.w	r3, [r6, #-1]
 800aede:	f106 36ff 	addle.w	r6, r6, #4294967295
 800aee2:	1b92      	subs	r2, r2, r6
 800aee4:	6122      	str	r2, [r4, #16]
 800aee6:	f8cd a000 	str.w	sl, [sp]
 800aeea:	464b      	mov	r3, r9
 800aeec:	aa03      	add	r2, sp, #12
 800aeee:	4621      	mov	r1, r4
 800aef0:	4640      	mov	r0, r8
 800aef2:	f7ff fee7 	bl	800acc4 <_printf_common>
 800aef6:	3001      	adds	r0, #1
 800aef8:	d14a      	bne.n	800af90 <_printf_i+0x1f0>
 800aefa:	f04f 30ff 	mov.w	r0, #4294967295
 800aefe:	b004      	add	sp, #16
 800af00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af04:	6823      	ldr	r3, [r4, #0]
 800af06:	f043 0320 	orr.w	r3, r3, #32
 800af0a:	6023      	str	r3, [r4, #0]
 800af0c:	4832      	ldr	r0, [pc, #200]	@ (800afd8 <_printf_i+0x238>)
 800af0e:	2778      	movs	r7, #120	@ 0x78
 800af10:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800af14:	6823      	ldr	r3, [r4, #0]
 800af16:	6831      	ldr	r1, [r6, #0]
 800af18:	061f      	lsls	r7, r3, #24
 800af1a:	f851 5b04 	ldr.w	r5, [r1], #4
 800af1e:	d402      	bmi.n	800af26 <_printf_i+0x186>
 800af20:	065f      	lsls	r7, r3, #25
 800af22:	bf48      	it	mi
 800af24:	b2ad      	uxthmi	r5, r5
 800af26:	6031      	str	r1, [r6, #0]
 800af28:	07d9      	lsls	r1, r3, #31
 800af2a:	bf44      	itt	mi
 800af2c:	f043 0320 	orrmi.w	r3, r3, #32
 800af30:	6023      	strmi	r3, [r4, #0]
 800af32:	b11d      	cbz	r5, 800af3c <_printf_i+0x19c>
 800af34:	2310      	movs	r3, #16
 800af36:	e7ad      	b.n	800ae94 <_printf_i+0xf4>
 800af38:	4826      	ldr	r0, [pc, #152]	@ (800afd4 <_printf_i+0x234>)
 800af3a:	e7e9      	b.n	800af10 <_printf_i+0x170>
 800af3c:	6823      	ldr	r3, [r4, #0]
 800af3e:	f023 0320 	bic.w	r3, r3, #32
 800af42:	6023      	str	r3, [r4, #0]
 800af44:	e7f6      	b.n	800af34 <_printf_i+0x194>
 800af46:	4616      	mov	r6, r2
 800af48:	e7bd      	b.n	800aec6 <_printf_i+0x126>
 800af4a:	6833      	ldr	r3, [r6, #0]
 800af4c:	6825      	ldr	r5, [r4, #0]
 800af4e:	6961      	ldr	r1, [r4, #20]
 800af50:	1d18      	adds	r0, r3, #4
 800af52:	6030      	str	r0, [r6, #0]
 800af54:	062e      	lsls	r6, r5, #24
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	d501      	bpl.n	800af5e <_printf_i+0x1be>
 800af5a:	6019      	str	r1, [r3, #0]
 800af5c:	e002      	b.n	800af64 <_printf_i+0x1c4>
 800af5e:	0668      	lsls	r0, r5, #25
 800af60:	d5fb      	bpl.n	800af5a <_printf_i+0x1ba>
 800af62:	8019      	strh	r1, [r3, #0]
 800af64:	2300      	movs	r3, #0
 800af66:	6123      	str	r3, [r4, #16]
 800af68:	4616      	mov	r6, r2
 800af6a:	e7bc      	b.n	800aee6 <_printf_i+0x146>
 800af6c:	6833      	ldr	r3, [r6, #0]
 800af6e:	1d1a      	adds	r2, r3, #4
 800af70:	6032      	str	r2, [r6, #0]
 800af72:	681e      	ldr	r6, [r3, #0]
 800af74:	6862      	ldr	r2, [r4, #4]
 800af76:	2100      	movs	r1, #0
 800af78:	4630      	mov	r0, r6
 800af7a:	f7f5 f929 	bl	80001d0 <memchr>
 800af7e:	b108      	cbz	r0, 800af84 <_printf_i+0x1e4>
 800af80:	1b80      	subs	r0, r0, r6
 800af82:	6060      	str	r0, [r4, #4]
 800af84:	6863      	ldr	r3, [r4, #4]
 800af86:	6123      	str	r3, [r4, #16]
 800af88:	2300      	movs	r3, #0
 800af8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af8e:	e7aa      	b.n	800aee6 <_printf_i+0x146>
 800af90:	6923      	ldr	r3, [r4, #16]
 800af92:	4632      	mov	r2, r6
 800af94:	4649      	mov	r1, r9
 800af96:	4640      	mov	r0, r8
 800af98:	47d0      	blx	sl
 800af9a:	3001      	adds	r0, #1
 800af9c:	d0ad      	beq.n	800aefa <_printf_i+0x15a>
 800af9e:	6823      	ldr	r3, [r4, #0]
 800afa0:	079b      	lsls	r3, r3, #30
 800afa2:	d413      	bmi.n	800afcc <_printf_i+0x22c>
 800afa4:	68e0      	ldr	r0, [r4, #12]
 800afa6:	9b03      	ldr	r3, [sp, #12]
 800afa8:	4298      	cmp	r0, r3
 800afaa:	bfb8      	it	lt
 800afac:	4618      	movlt	r0, r3
 800afae:	e7a6      	b.n	800aefe <_printf_i+0x15e>
 800afb0:	2301      	movs	r3, #1
 800afb2:	4632      	mov	r2, r6
 800afb4:	4649      	mov	r1, r9
 800afb6:	4640      	mov	r0, r8
 800afb8:	47d0      	blx	sl
 800afba:	3001      	adds	r0, #1
 800afbc:	d09d      	beq.n	800aefa <_printf_i+0x15a>
 800afbe:	3501      	adds	r5, #1
 800afc0:	68e3      	ldr	r3, [r4, #12]
 800afc2:	9903      	ldr	r1, [sp, #12]
 800afc4:	1a5b      	subs	r3, r3, r1
 800afc6:	42ab      	cmp	r3, r5
 800afc8:	dcf2      	bgt.n	800afb0 <_printf_i+0x210>
 800afca:	e7eb      	b.n	800afa4 <_printf_i+0x204>
 800afcc:	2500      	movs	r5, #0
 800afce:	f104 0619 	add.w	r6, r4, #25
 800afd2:	e7f5      	b.n	800afc0 <_printf_i+0x220>
 800afd4:	0801032c 	.word	0x0801032c
 800afd8:	0801033d 	.word	0x0801033d

0800afdc <_scanf_float>:
 800afdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afe0:	b087      	sub	sp, #28
 800afe2:	4691      	mov	r9, r2
 800afe4:	9303      	str	r3, [sp, #12]
 800afe6:	688b      	ldr	r3, [r1, #8]
 800afe8:	1e5a      	subs	r2, r3, #1
 800afea:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800afee:	bf81      	itttt	hi
 800aff0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800aff4:	eb03 0b05 	addhi.w	fp, r3, r5
 800aff8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800affc:	608b      	strhi	r3, [r1, #8]
 800affe:	680b      	ldr	r3, [r1, #0]
 800b000:	460a      	mov	r2, r1
 800b002:	f04f 0500 	mov.w	r5, #0
 800b006:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800b00a:	f842 3b1c 	str.w	r3, [r2], #28
 800b00e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b012:	4680      	mov	r8, r0
 800b014:	460c      	mov	r4, r1
 800b016:	bf98      	it	ls
 800b018:	f04f 0b00 	movls.w	fp, #0
 800b01c:	9201      	str	r2, [sp, #4]
 800b01e:	4616      	mov	r6, r2
 800b020:	46aa      	mov	sl, r5
 800b022:	462f      	mov	r7, r5
 800b024:	9502      	str	r5, [sp, #8]
 800b026:	68a2      	ldr	r2, [r4, #8]
 800b028:	b15a      	cbz	r2, 800b042 <_scanf_float+0x66>
 800b02a:	f8d9 3000 	ldr.w	r3, [r9]
 800b02e:	781b      	ldrb	r3, [r3, #0]
 800b030:	2b4e      	cmp	r3, #78	@ 0x4e
 800b032:	d863      	bhi.n	800b0fc <_scanf_float+0x120>
 800b034:	2b40      	cmp	r3, #64	@ 0x40
 800b036:	d83b      	bhi.n	800b0b0 <_scanf_float+0xd4>
 800b038:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800b03c:	b2c8      	uxtb	r0, r1
 800b03e:	280e      	cmp	r0, #14
 800b040:	d939      	bls.n	800b0b6 <_scanf_float+0xda>
 800b042:	b11f      	cbz	r7, 800b04c <_scanf_float+0x70>
 800b044:	6823      	ldr	r3, [r4, #0]
 800b046:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b04a:	6023      	str	r3, [r4, #0]
 800b04c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b050:	f1ba 0f01 	cmp.w	sl, #1
 800b054:	f200 8114 	bhi.w	800b280 <_scanf_float+0x2a4>
 800b058:	9b01      	ldr	r3, [sp, #4]
 800b05a:	429e      	cmp	r6, r3
 800b05c:	f200 8105 	bhi.w	800b26a <_scanf_float+0x28e>
 800b060:	2001      	movs	r0, #1
 800b062:	b007      	add	sp, #28
 800b064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b068:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800b06c:	2a0d      	cmp	r2, #13
 800b06e:	d8e8      	bhi.n	800b042 <_scanf_float+0x66>
 800b070:	a101      	add	r1, pc, #4	@ (adr r1, 800b078 <_scanf_float+0x9c>)
 800b072:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b076:	bf00      	nop
 800b078:	0800b1c1 	.word	0x0800b1c1
 800b07c:	0800b043 	.word	0x0800b043
 800b080:	0800b043 	.word	0x0800b043
 800b084:	0800b043 	.word	0x0800b043
 800b088:	0800b21d 	.word	0x0800b21d
 800b08c:	0800b1f7 	.word	0x0800b1f7
 800b090:	0800b043 	.word	0x0800b043
 800b094:	0800b043 	.word	0x0800b043
 800b098:	0800b1cf 	.word	0x0800b1cf
 800b09c:	0800b043 	.word	0x0800b043
 800b0a0:	0800b043 	.word	0x0800b043
 800b0a4:	0800b043 	.word	0x0800b043
 800b0a8:	0800b043 	.word	0x0800b043
 800b0ac:	0800b18b 	.word	0x0800b18b
 800b0b0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800b0b4:	e7da      	b.n	800b06c <_scanf_float+0x90>
 800b0b6:	290e      	cmp	r1, #14
 800b0b8:	d8c3      	bhi.n	800b042 <_scanf_float+0x66>
 800b0ba:	a001      	add	r0, pc, #4	@ (adr r0, 800b0c0 <_scanf_float+0xe4>)
 800b0bc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b0c0:	0800b17b 	.word	0x0800b17b
 800b0c4:	0800b043 	.word	0x0800b043
 800b0c8:	0800b17b 	.word	0x0800b17b
 800b0cc:	0800b20b 	.word	0x0800b20b
 800b0d0:	0800b043 	.word	0x0800b043
 800b0d4:	0800b11d 	.word	0x0800b11d
 800b0d8:	0800b161 	.word	0x0800b161
 800b0dc:	0800b161 	.word	0x0800b161
 800b0e0:	0800b161 	.word	0x0800b161
 800b0e4:	0800b161 	.word	0x0800b161
 800b0e8:	0800b161 	.word	0x0800b161
 800b0ec:	0800b161 	.word	0x0800b161
 800b0f0:	0800b161 	.word	0x0800b161
 800b0f4:	0800b161 	.word	0x0800b161
 800b0f8:	0800b161 	.word	0x0800b161
 800b0fc:	2b6e      	cmp	r3, #110	@ 0x6e
 800b0fe:	d809      	bhi.n	800b114 <_scanf_float+0x138>
 800b100:	2b60      	cmp	r3, #96	@ 0x60
 800b102:	d8b1      	bhi.n	800b068 <_scanf_float+0x8c>
 800b104:	2b54      	cmp	r3, #84	@ 0x54
 800b106:	d07b      	beq.n	800b200 <_scanf_float+0x224>
 800b108:	2b59      	cmp	r3, #89	@ 0x59
 800b10a:	d19a      	bne.n	800b042 <_scanf_float+0x66>
 800b10c:	2d07      	cmp	r5, #7
 800b10e:	d198      	bne.n	800b042 <_scanf_float+0x66>
 800b110:	2508      	movs	r5, #8
 800b112:	e02f      	b.n	800b174 <_scanf_float+0x198>
 800b114:	2b74      	cmp	r3, #116	@ 0x74
 800b116:	d073      	beq.n	800b200 <_scanf_float+0x224>
 800b118:	2b79      	cmp	r3, #121	@ 0x79
 800b11a:	e7f6      	b.n	800b10a <_scanf_float+0x12e>
 800b11c:	6821      	ldr	r1, [r4, #0]
 800b11e:	05c8      	lsls	r0, r1, #23
 800b120:	d51e      	bpl.n	800b160 <_scanf_float+0x184>
 800b122:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800b126:	6021      	str	r1, [r4, #0]
 800b128:	3701      	adds	r7, #1
 800b12a:	f1bb 0f00 	cmp.w	fp, #0
 800b12e:	d003      	beq.n	800b138 <_scanf_float+0x15c>
 800b130:	3201      	adds	r2, #1
 800b132:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b136:	60a2      	str	r2, [r4, #8]
 800b138:	68a3      	ldr	r3, [r4, #8]
 800b13a:	3b01      	subs	r3, #1
 800b13c:	60a3      	str	r3, [r4, #8]
 800b13e:	6923      	ldr	r3, [r4, #16]
 800b140:	3301      	adds	r3, #1
 800b142:	6123      	str	r3, [r4, #16]
 800b144:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800b148:	3b01      	subs	r3, #1
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	f8c9 3004 	str.w	r3, [r9, #4]
 800b150:	f340 8082 	ble.w	800b258 <_scanf_float+0x27c>
 800b154:	f8d9 3000 	ldr.w	r3, [r9]
 800b158:	3301      	adds	r3, #1
 800b15a:	f8c9 3000 	str.w	r3, [r9]
 800b15e:	e762      	b.n	800b026 <_scanf_float+0x4a>
 800b160:	eb1a 0105 	adds.w	r1, sl, r5
 800b164:	f47f af6d 	bne.w	800b042 <_scanf_float+0x66>
 800b168:	6822      	ldr	r2, [r4, #0]
 800b16a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800b16e:	6022      	str	r2, [r4, #0]
 800b170:	460d      	mov	r5, r1
 800b172:	468a      	mov	sl, r1
 800b174:	f806 3b01 	strb.w	r3, [r6], #1
 800b178:	e7de      	b.n	800b138 <_scanf_float+0x15c>
 800b17a:	6822      	ldr	r2, [r4, #0]
 800b17c:	0610      	lsls	r0, r2, #24
 800b17e:	f57f af60 	bpl.w	800b042 <_scanf_float+0x66>
 800b182:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b186:	6022      	str	r2, [r4, #0]
 800b188:	e7f4      	b.n	800b174 <_scanf_float+0x198>
 800b18a:	f1ba 0f00 	cmp.w	sl, #0
 800b18e:	d10c      	bne.n	800b1aa <_scanf_float+0x1ce>
 800b190:	b977      	cbnz	r7, 800b1b0 <_scanf_float+0x1d4>
 800b192:	6822      	ldr	r2, [r4, #0]
 800b194:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b198:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b19c:	d108      	bne.n	800b1b0 <_scanf_float+0x1d4>
 800b19e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b1a2:	6022      	str	r2, [r4, #0]
 800b1a4:	f04f 0a01 	mov.w	sl, #1
 800b1a8:	e7e4      	b.n	800b174 <_scanf_float+0x198>
 800b1aa:	f1ba 0f02 	cmp.w	sl, #2
 800b1ae:	d050      	beq.n	800b252 <_scanf_float+0x276>
 800b1b0:	2d01      	cmp	r5, #1
 800b1b2:	d002      	beq.n	800b1ba <_scanf_float+0x1de>
 800b1b4:	2d04      	cmp	r5, #4
 800b1b6:	f47f af44 	bne.w	800b042 <_scanf_float+0x66>
 800b1ba:	3501      	adds	r5, #1
 800b1bc:	b2ed      	uxtb	r5, r5
 800b1be:	e7d9      	b.n	800b174 <_scanf_float+0x198>
 800b1c0:	f1ba 0f01 	cmp.w	sl, #1
 800b1c4:	f47f af3d 	bne.w	800b042 <_scanf_float+0x66>
 800b1c8:	f04f 0a02 	mov.w	sl, #2
 800b1cc:	e7d2      	b.n	800b174 <_scanf_float+0x198>
 800b1ce:	b975      	cbnz	r5, 800b1ee <_scanf_float+0x212>
 800b1d0:	2f00      	cmp	r7, #0
 800b1d2:	f47f af37 	bne.w	800b044 <_scanf_float+0x68>
 800b1d6:	6822      	ldr	r2, [r4, #0]
 800b1d8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800b1dc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800b1e0:	f040 8103 	bne.w	800b3ea <_scanf_float+0x40e>
 800b1e4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b1e8:	6022      	str	r2, [r4, #0]
 800b1ea:	2501      	movs	r5, #1
 800b1ec:	e7c2      	b.n	800b174 <_scanf_float+0x198>
 800b1ee:	2d03      	cmp	r5, #3
 800b1f0:	d0e3      	beq.n	800b1ba <_scanf_float+0x1de>
 800b1f2:	2d05      	cmp	r5, #5
 800b1f4:	e7df      	b.n	800b1b6 <_scanf_float+0x1da>
 800b1f6:	2d02      	cmp	r5, #2
 800b1f8:	f47f af23 	bne.w	800b042 <_scanf_float+0x66>
 800b1fc:	2503      	movs	r5, #3
 800b1fe:	e7b9      	b.n	800b174 <_scanf_float+0x198>
 800b200:	2d06      	cmp	r5, #6
 800b202:	f47f af1e 	bne.w	800b042 <_scanf_float+0x66>
 800b206:	2507      	movs	r5, #7
 800b208:	e7b4      	b.n	800b174 <_scanf_float+0x198>
 800b20a:	6822      	ldr	r2, [r4, #0]
 800b20c:	0591      	lsls	r1, r2, #22
 800b20e:	f57f af18 	bpl.w	800b042 <_scanf_float+0x66>
 800b212:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800b216:	6022      	str	r2, [r4, #0]
 800b218:	9702      	str	r7, [sp, #8]
 800b21a:	e7ab      	b.n	800b174 <_scanf_float+0x198>
 800b21c:	6822      	ldr	r2, [r4, #0]
 800b21e:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800b222:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b226:	d005      	beq.n	800b234 <_scanf_float+0x258>
 800b228:	0550      	lsls	r0, r2, #21
 800b22a:	f57f af0a 	bpl.w	800b042 <_scanf_float+0x66>
 800b22e:	2f00      	cmp	r7, #0
 800b230:	f000 80db 	beq.w	800b3ea <_scanf_float+0x40e>
 800b234:	0591      	lsls	r1, r2, #22
 800b236:	bf58      	it	pl
 800b238:	9902      	ldrpl	r1, [sp, #8]
 800b23a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800b23e:	bf58      	it	pl
 800b240:	1a79      	subpl	r1, r7, r1
 800b242:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800b246:	bf58      	it	pl
 800b248:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b24c:	6022      	str	r2, [r4, #0]
 800b24e:	2700      	movs	r7, #0
 800b250:	e790      	b.n	800b174 <_scanf_float+0x198>
 800b252:	f04f 0a03 	mov.w	sl, #3
 800b256:	e78d      	b.n	800b174 <_scanf_float+0x198>
 800b258:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b25c:	4649      	mov	r1, r9
 800b25e:	4640      	mov	r0, r8
 800b260:	4798      	blx	r3
 800b262:	2800      	cmp	r0, #0
 800b264:	f43f aedf 	beq.w	800b026 <_scanf_float+0x4a>
 800b268:	e6eb      	b.n	800b042 <_scanf_float+0x66>
 800b26a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b26e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b272:	464a      	mov	r2, r9
 800b274:	4640      	mov	r0, r8
 800b276:	4798      	blx	r3
 800b278:	6923      	ldr	r3, [r4, #16]
 800b27a:	3b01      	subs	r3, #1
 800b27c:	6123      	str	r3, [r4, #16]
 800b27e:	e6eb      	b.n	800b058 <_scanf_float+0x7c>
 800b280:	1e6b      	subs	r3, r5, #1
 800b282:	2b06      	cmp	r3, #6
 800b284:	d824      	bhi.n	800b2d0 <_scanf_float+0x2f4>
 800b286:	2d02      	cmp	r5, #2
 800b288:	d836      	bhi.n	800b2f8 <_scanf_float+0x31c>
 800b28a:	9b01      	ldr	r3, [sp, #4]
 800b28c:	429e      	cmp	r6, r3
 800b28e:	f67f aee7 	bls.w	800b060 <_scanf_float+0x84>
 800b292:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b296:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b29a:	464a      	mov	r2, r9
 800b29c:	4640      	mov	r0, r8
 800b29e:	4798      	blx	r3
 800b2a0:	6923      	ldr	r3, [r4, #16]
 800b2a2:	3b01      	subs	r3, #1
 800b2a4:	6123      	str	r3, [r4, #16]
 800b2a6:	e7f0      	b.n	800b28a <_scanf_float+0x2ae>
 800b2a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b2ac:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800b2b0:	464a      	mov	r2, r9
 800b2b2:	4640      	mov	r0, r8
 800b2b4:	4798      	blx	r3
 800b2b6:	6923      	ldr	r3, [r4, #16]
 800b2b8:	3b01      	subs	r3, #1
 800b2ba:	6123      	str	r3, [r4, #16]
 800b2bc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b2c0:	fa5f fa8a 	uxtb.w	sl, sl
 800b2c4:	f1ba 0f02 	cmp.w	sl, #2
 800b2c8:	d1ee      	bne.n	800b2a8 <_scanf_float+0x2cc>
 800b2ca:	3d03      	subs	r5, #3
 800b2cc:	b2ed      	uxtb	r5, r5
 800b2ce:	1b76      	subs	r6, r6, r5
 800b2d0:	6823      	ldr	r3, [r4, #0]
 800b2d2:	05da      	lsls	r2, r3, #23
 800b2d4:	d530      	bpl.n	800b338 <_scanf_float+0x35c>
 800b2d6:	055b      	lsls	r3, r3, #21
 800b2d8:	d511      	bpl.n	800b2fe <_scanf_float+0x322>
 800b2da:	9b01      	ldr	r3, [sp, #4]
 800b2dc:	429e      	cmp	r6, r3
 800b2de:	f67f aebf 	bls.w	800b060 <_scanf_float+0x84>
 800b2e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b2e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b2ea:	464a      	mov	r2, r9
 800b2ec:	4640      	mov	r0, r8
 800b2ee:	4798      	blx	r3
 800b2f0:	6923      	ldr	r3, [r4, #16]
 800b2f2:	3b01      	subs	r3, #1
 800b2f4:	6123      	str	r3, [r4, #16]
 800b2f6:	e7f0      	b.n	800b2da <_scanf_float+0x2fe>
 800b2f8:	46aa      	mov	sl, r5
 800b2fa:	46b3      	mov	fp, r6
 800b2fc:	e7de      	b.n	800b2bc <_scanf_float+0x2e0>
 800b2fe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b302:	6923      	ldr	r3, [r4, #16]
 800b304:	2965      	cmp	r1, #101	@ 0x65
 800b306:	f103 33ff 	add.w	r3, r3, #4294967295
 800b30a:	f106 35ff 	add.w	r5, r6, #4294967295
 800b30e:	6123      	str	r3, [r4, #16]
 800b310:	d00c      	beq.n	800b32c <_scanf_float+0x350>
 800b312:	2945      	cmp	r1, #69	@ 0x45
 800b314:	d00a      	beq.n	800b32c <_scanf_float+0x350>
 800b316:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b31a:	464a      	mov	r2, r9
 800b31c:	4640      	mov	r0, r8
 800b31e:	4798      	blx	r3
 800b320:	6923      	ldr	r3, [r4, #16]
 800b322:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b326:	3b01      	subs	r3, #1
 800b328:	1eb5      	subs	r5, r6, #2
 800b32a:	6123      	str	r3, [r4, #16]
 800b32c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b330:	464a      	mov	r2, r9
 800b332:	4640      	mov	r0, r8
 800b334:	4798      	blx	r3
 800b336:	462e      	mov	r6, r5
 800b338:	6822      	ldr	r2, [r4, #0]
 800b33a:	f012 0210 	ands.w	r2, r2, #16
 800b33e:	d001      	beq.n	800b344 <_scanf_float+0x368>
 800b340:	2000      	movs	r0, #0
 800b342:	e68e      	b.n	800b062 <_scanf_float+0x86>
 800b344:	7032      	strb	r2, [r6, #0]
 800b346:	6823      	ldr	r3, [r4, #0]
 800b348:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b34c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b350:	d125      	bne.n	800b39e <_scanf_float+0x3c2>
 800b352:	9b02      	ldr	r3, [sp, #8]
 800b354:	429f      	cmp	r7, r3
 800b356:	d00a      	beq.n	800b36e <_scanf_float+0x392>
 800b358:	1bda      	subs	r2, r3, r7
 800b35a:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800b35e:	429e      	cmp	r6, r3
 800b360:	bf28      	it	cs
 800b362:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800b366:	4922      	ldr	r1, [pc, #136]	@ (800b3f0 <_scanf_float+0x414>)
 800b368:	4630      	mov	r0, r6
 800b36a:	f000 f977 	bl	800b65c <siprintf>
 800b36e:	9901      	ldr	r1, [sp, #4]
 800b370:	2200      	movs	r2, #0
 800b372:	4640      	mov	r0, r8
 800b374:	f002 fdbc 	bl	800def0 <_strtod_r>
 800b378:	9b03      	ldr	r3, [sp, #12]
 800b37a:	6821      	ldr	r1, [r4, #0]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	f011 0f02 	tst.w	r1, #2
 800b382:	ec57 6b10 	vmov	r6, r7, d0
 800b386:	f103 0204 	add.w	r2, r3, #4
 800b38a:	d015      	beq.n	800b3b8 <_scanf_float+0x3dc>
 800b38c:	9903      	ldr	r1, [sp, #12]
 800b38e:	600a      	str	r2, [r1, #0]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	e9c3 6700 	strd	r6, r7, [r3]
 800b396:	68e3      	ldr	r3, [r4, #12]
 800b398:	3301      	adds	r3, #1
 800b39a:	60e3      	str	r3, [r4, #12]
 800b39c:	e7d0      	b.n	800b340 <_scanf_float+0x364>
 800b39e:	9b04      	ldr	r3, [sp, #16]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d0e4      	beq.n	800b36e <_scanf_float+0x392>
 800b3a4:	9905      	ldr	r1, [sp, #20]
 800b3a6:	230a      	movs	r3, #10
 800b3a8:	3101      	adds	r1, #1
 800b3aa:	4640      	mov	r0, r8
 800b3ac:	f002 fe20 	bl	800dff0 <_strtol_r>
 800b3b0:	9b04      	ldr	r3, [sp, #16]
 800b3b2:	9e05      	ldr	r6, [sp, #20]
 800b3b4:	1ac2      	subs	r2, r0, r3
 800b3b6:	e7d0      	b.n	800b35a <_scanf_float+0x37e>
 800b3b8:	f011 0f04 	tst.w	r1, #4
 800b3bc:	9903      	ldr	r1, [sp, #12]
 800b3be:	600a      	str	r2, [r1, #0]
 800b3c0:	d1e6      	bne.n	800b390 <_scanf_float+0x3b4>
 800b3c2:	681d      	ldr	r5, [r3, #0]
 800b3c4:	4632      	mov	r2, r6
 800b3c6:	463b      	mov	r3, r7
 800b3c8:	4630      	mov	r0, r6
 800b3ca:	4639      	mov	r1, r7
 800b3cc:	f7f5 fbae 	bl	8000b2c <__aeabi_dcmpun>
 800b3d0:	b128      	cbz	r0, 800b3de <_scanf_float+0x402>
 800b3d2:	4808      	ldr	r0, [pc, #32]	@ (800b3f4 <_scanf_float+0x418>)
 800b3d4:	f000 fb62 	bl	800ba9c <nanf>
 800b3d8:	ed85 0a00 	vstr	s0, [r5]
 800b3dc:	e7db      	b.n	800b396 <_scanf_float+0x3ba>
 800b3de:	4630      	mov	r0, r6
 800b3e0:	4639      	mov	r1, r7
 800b3e2:	f7f5 fc01 	bl	8000be8 <__aeabi_d2f>
 800b3e6:	6028      	str	r0, [r5, #0]
 800b3e8:	e7d5      	b.n	800b396 <_scanf_float+0x3ba>
 800b3ea:	2700      	movs	r7, #0
 800b3ec:	e62e      	b.n	800b04c <_scanf_float+0x70>
 800b3ee:	bf00      	nop
 800b3f0:	0801034e 	.word	0x0801034e
 800b3f4:	0801038e 	.word	0x0801038e

0800b3f8 <std>:
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	b510      	push	{r4, lr}
 800b3fc:	4604      	mov	r4, r0
 800b3fe:	e9c0 3300 	strd	r3, r3, [r0]
 800b402:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b406:	6083      	str	r3, [r0, #8]
 800b408:	8181      	strh	r1, [r0, #12]
 800b40a:	6643      	str	r3, [r0, #100]	@ 0x64
 800b40c:	81c2      	strh	r2, [r0, #14]
 800b40e:	6183      	str	r3, [r0, #24]
 800b410:	4619      	mov	r1, r3
 800b412:	2208      	movs	r2, #8
 800b414:	305c      	adds	r0, #92	@ 0x5c
 800b416:	f000 fa35 	bl	800b884 <memset>
 800b41a:	4b0d      	ldr	r3, [pc, #52]	@ (800b450 <std+0x58>)
 800b41c:	6263      	str	r3, [r4, #36]	@ 0x24
 800b41e:	4b0d      	ldr	r3, [pc, #52]	@ (800b454 <std+0x5c>)
 800b420:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b422:	4b0d      	ldr	r3, [pc, #52]	@ (800b458 <std+0x60>)
 800b424:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b426:	4b0d      	ldr	r3, [pc, #52]	@ (800b45c <std+0x64>)
 800b428:	6323      	str	r3, [r4, #48]	@ 0x30
 800b42a:	4b0d      	ldr	r3, [pc, #52]	@ (800b460 <std+0x68>)
 800b42c:	6224      	str	r4, [r4, #32]
 800b42e:	429c      	cmp	r4, r3
 800b430:	d006      	beq.n	800b440 <std+0x48>
 800b432:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b436:	4294      	cmp	r4, r2
 800b438:	d002      	beq.n	800b440 <std+0x48>
 800b43a:	33d0      	adds	r3, #208	@ 0xd0
 800b43c:	429c      	cmp	r4, r3
 800b43e:	d105      	bne.n	800b44c <std+0x54>
 800b440:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b448:	f000 bb16 	b.w	800ba78 <__retarget_lock_init_recursive>
 800b44c:	bd10      	pop	{r4, pc}
 800b44e:	bf00      	nop
 800b450:	0800b6a1 	.word	0x0800b6a1
 800b454:	0800b6c3 	.word	0x0800b6c3
 800b458:	0800b6fb 	.word	0x0800b6fb
 800b45c:	0800b71f 	.word	0x0800b71f
 800b460:	20004e18 	.word	0x20004e18

0800b464 <stdio_exit_handler>:
 800b464:	4a02      	ldr	r2, [pc, #8]	@ (800b470 <stdio_exit_handler+0xc>)
 800b466:	4903      	ldr	r1, [pc, #12]	@ (800b474 <stdio_exit_handler+0x10>)
 800b468:	4803      	ldr	r0, [pc, #12]	@ (800b478 <stdio_exit_handler+0x14>)
 800b46a:	f000 b869 	b.w	800b540 <_fwalk_sglue>
 800b46e:	bf00      	nop
 800b470:	20000058 	.word	0x20000058
 800b474:	0800e631 	.word	0x0800e631
 800b478:	20000068 	.word	0x20000068

0800b47c <cleanup_stdio>:
 800b47c:	6841      	ldr	r1, [r0, #4]
 800b47e:	4b0c      	ldr	r3, [pc, #48]	@ (800b4b0 <cleanup_stdio+0x34>)
 800b480:	4299      	cmp	r1, r3
 800b482:	b510      	push	{r4, lr}
 800b484:	4604      	mov	r4, r0
 800b486:	d001      	beq.n	800b48c <cleanup_stdio+0x10>
 800b488:	f003 f8d2 	bl	800e630 <_fflush_r>
 800b48c:	68a1      	ldr	r1, [r4, #8]
 800b48e:	4b09      	ldr	r3, [pc, #36]	@ (800b4b4 <cleanup_stdio+0x38>)
 800b490:	4299      	cmp	r1, r3
 800b492:	d002      	beq.n	800b49a <cleanup_stdio+0x1e>
 800b494:	4620      	mov	r0, r4
 800b496:	f003 f8cb 	bl	800e630 <_fflush_r>
 800b49a:	68e1      	ldr	r1, [r4, #12]
 800b49c:	4b06      	ldr	r3, [pc, #24]	@ (800b4b8 <cleanup_stdio+0x3c>)
 800b49e:	4299      	cmp	r1, r3
 800b4a0:	d004      	beq.n	800b4ac <cleanup_stdio+0x30>
 800b4a2:	4620      	mov	r0, r4
 800b4a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4a8:	f003 b8c2 	b.w	800e630 <_fflush_r>
 800b4ac:	bd10      	pop	{r4, pc}
 800b4ae:	bf00      	nop
 800b4b0:	20004e18 	.word	0x20004e18
 800b4b4:	20004e80 	.word	0x20004e80
 800b4b8:	20004ee8 	.word	0x20004ee8

0800b4bc <global_stdio_init.part.0>:
 800b4bc:	b510      	push	{r4, lr}
 800b4be:	4b0b      	ldr	r3, [pc, #44]	@ (800b4ec <global_stdio_init.part.0+0x30>)
 800b4c0:	4c0b      	ldr	r4, [pc, #44]	@ (800b4f0 <global_stdio_init.part.0+0x34>)
 800b4c2:	4a0c      	ldr	r2, [pc, #48]	@ (800b4f4 <global_stdio_init.part.0+0x38>)
 800b4c4:	601a      	str	r2, [r3, #0]
 800b4c6:	4620      	mov	r0, r4
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	2104      	movs	r1, #4
 800b4cc:	f7ff ff94 	bl	800b3f8 <std>
 800b4d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b4d4:	2201      	movs	r2, #1
 800b4d6:	2109      	movs	r1, #9
 800b4d8:	f7ff ff8e 	bl	800b3f8 <std>
 800b4dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b4e0:	2202      	movs	r2, #2
 800b4e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4e6:	2112      	movs	r1, #18
 800b4e8:	f7ff bf86 	b.w	800b3f8 <std>
 800b4ec:	20004f50 	.word	0x20004f50
 800b4f0:	20004e18 	.word	0x20004e18
 800b4f4:	0800b465 	.word	0x0800b465

0800b4f8 <__sfp_lock_acquire>:
 800b4f8:	4801      	ldr	r0, [pc, #4]	@ (800b500 <__sfp_lock_acquire+0x8>)
 800b4fa:	f000 babe 	b.w	800ba7a <__retarget_lock_acquire_recursive>
 800b4fe:	bf00      	nop
 800b500:	20004f59 	.word	0x20004f59

0800b504 <__sfp_lock_release>:
 800b504:	4801      	ldr	r0, [pc, #4]	@ (800b50c <__sfp_lock_release+0x8>)
 800b506:	f000 bab9 	b.w	800ba7c <__retarget_lock_release_recursive>
 800b50a:	bf00      	nop
 800b50c:	20004f59 	.word	0x20004f59

0800b510 <__sinit>:
 800b510:	b510      	push	{r4, lr}
 800b512:	4604      	mov	r4, r0
 800b514:	f7ff fff0 	bl	800b4f8 <__sfp_lock_acquire>
 800b518:	6a23      	ldr	r3, [r4, #32]
 800b51a:	b11b      	cbz	r3, 800b524 <__sinit+0x14>
 800b51c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b520:	f7ff bff0 	b.w	800b504 <__sfp_lock_release>
 800b524:	4b04      	ldr	r3, [pc, #16]	@ (800b538 <__sinit+0x28>)
 800b526:	6223      	str	r3, [r4, #32]
 800b528:	4b04      	ldr	r3, [pc, #16]	@ (800b53c <__sinit+0x2c>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d1f5      	bne.n	800b51c <__sinit+0xc>
 800b530:	f7ff ffc4 	bl	800b4bc <global_stdio_init.part.0>
 800b534:	e7f2      	b.n	800b51c <__sinit+0xc>
 800b536:	bf00      	nop
 800b538:	0800b47d 	.word	0x0800b47d
 800b53c:	20004f50 	.word	0x20004f50

0800b540 <_fwalk_sglue>:
 800b540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b544:	4607      	mov	r7, r0
 800b546:	4688      	mov	r8, r1
 800b548:	4614      	mov	r4, r2
 800b54a:	2600      	movs	r6, #0
 800b54c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b550:	f1b9 0901 	subs.w	r9, r9, #1
 800b554:	d505      	bpl.n	800b562 <_fwalk_sglue+0x22>
 800b556:	6824      	ldr	r4, [r4, #0]
 800b558:	2c00      	cmp	r4, #0
 800b55a:	d1f7      	bne.n	800b54c <_fwalk_sglue+0xc>
 800b55c:	4630      	mov	r0, r6
 800b55e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b562:	89ab      	ldrh	r3, [r5, #12]
 800b564:	2b01      	cmp	r3, #1
 800b566:	d907      	bls.n	800b578 <_fwalk_sglue+0x38>
 800b568:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b56c:	3301      	adds	r3, #1
 800b56e:	d003      	beq.n	800b578 <_fwalk_sglue+0x38>
 800b570:	4629      	mov	r1, r5
 800b572:	4638      	mov	r0, r7
 800b574:	47c0      	blx	r8
 800b576:	4306      	orrs	r6, r0
 800b578:	3568      	adds	r5, #104	@ 0x68
 800b57a:	e7e9      	b.n	800b550 <_fwalk_sglue+0x10>

0800b57c <iprintf>:
 800b57c:	b40f      	push	{r0, r1, r2, r3}
 800b57e:	b507      	push	{r0, r1, r2, lr}
 800b580:	4906      	ldr	r1, [pc, #24]	@ (800b59c <iprintf+0x20>)
 800b582:	ab04      	add	r3, sp, #16
 800b584:	6808      	ldr	r0, [r1, #0]
 800b586:	f853 2b04 	ldr.w	r2, [r3], #4
 800b58a:	6881      	ldr	r1, [r0, #8]
 800b58c:	9301      	str	r3, [sp, #4]
 800b58e:	f002 feb3 	bl	800e2f8 <_vfiprintf_r>
 800b592:	b003      	add	sp, #12
 800b594:	f85d eb04 	ldr.w	lr, [sp], #4
 800b598:	b004      	add	sp, #16
 800b59a:	4770      	bx	lr
 800b59c:	20000064 	.word	0x20000064

0800b5a0 <_puts_r>:
 800b5a0:	6a03      	ldr	r3, [r0, #32]
 800b5a2:	b570      	push	{r4, r5, r6, lr}
 800b5a4:	6884      	ldr	r4, [r0, #8]
 800b5a6:	4605      	mov	r5, r0
 800b5a8:	460e      	mov	r6, r1
 800b5aa:	b90b      	cbnz	r3, 800b5b0 <_puts_r+0x10>
 800b5ac:	f7ff ffb0 	bl	800b510 <__sinit>
 800b5b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b5b2:	07db      	lsls	r3, r3, #31
 800b5b4:	d405      	bmi.n	800b5c2 <_puts_r+0x22>
 800b5b6:	89a3      	ldrh	r3, [r4, #12]
 800b5b8:	0598      	lsls	r0, r3, #22
 800b5ba:	d402      	bmi.n	800b5c2 <_puts_r+0x22>
 800b5bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b5be:	f000 fa5c 	bl	800ba7a <__retarget_lock_acquire_recursive>
 800b5c2:	89a3      	ldrh	r3, [r4, #12]
 800b5c4:	0719      	lsls	r1, r3, #28
 800b5c6:	d502      	bpl.n	800b5ce <_puts_r+0x2e>
 800b5c8:	6923      	ldr	r3, [r4, #16]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d135      	bne.n	800b63a <_puts_r+0x9a>
 800b5ce:	4621      	mov	r1, r4
 800b5d0:	4628      	mov	r0, r5
 800b5d2:	f000 f8f1 	bl	800b7b8 <__swsetup_r>
 800b5d6:	b380      	cbz	r0, 800b63a <_puts_r+0x9a>
 800b5d8:	f04f 35ff 	mov.w	r5, #4294967295
 800b5dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b5de:	07da      	lsls	r2, r3, #31
 800b5e0:	d405      	bmi.n	800b5ee <_puts_r+0x4e>
 800b5e2:	89a3      	ldrh	r3, [r4, #12]
 800b5e4:	059b      	lsls	r3, r3, #22
 800b5e6:	d402      	bmi.n	800b5ee <_puts_r+0x4e>
 800b5e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b5ea:	f000 fa47 	bl	800ba7c <__retarget_lock_release_recursive>
 800b5ee:	4628      	mov	r0, r5
 800b5f0:	bd70      	pop	{r4, r5, r6, pc}
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	da04      	bge.n	800b600 <_puts_r+0x60>
 800b5f6:	69a2      	ldr	r2, [r4, #24]
 800b5f8:	429a      	cmp	r2, r3
 800b5fa:	dc17      	bgt.n	800b62c <_puts_r+0x8c>
 800b5fc:	290a      	cmp	r1, #10
 800b5fe:	d015      	beq.n	800b62c <_puts_r+0x8c>
 800b600:	6823      	ldr	r3, [r4, #0]
 800b602:	1c5a      	adds	r2, r3, #1
 800b604:	6022      	str	r2, [r4, #0]
 800b606:	7019      	strb	r1, [r3, #0]
 800b608:	68a3      	ldr	r3, [r4, #8]
 800b60a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b60e:	3b01      	subs	r3, #1
 800b610:	60a3      	str	r3, [r4, #8]
 800b612:	2900      	cmp	r1, #0
 800b614:	d1ed      	bne.n	800b5f2 <_puts_r+0x52>
 800b616:	2b00      	cmp	r3, #0
 800b618:	da11      	bge.n	800b63e <_puts_r+0x9e>
 800b61a:	4622      	mov	r2, r4
 800b61c:	210a      	movs	r1, #10
 800b61e:	4628      	mov	r0, r5
 800b620:	f000 f88c 	bl	800b73c <__swbuf_r>
 800b624:	3001      	adds	r0, #1
 800b626:	d0d7      	beq.n	800b5d8 <_puts_r+0x38>
 800b628:	250a      	movs	r5, #10
 800b62a:	e7d7      	b.n	800b5dc <_puts_r+0x3c>
 800b62c:	4622      	mov	r2, r4
 800b62e:	4628      	mov	r0, r5
 800b630:	f000 f884 	bl	800b73c <__swbuf_r>
 800b634:	3001      	adds	r0, #1
 800b636:	d1e7      	bne.n	800b608 <_puts_r+0x68>
 800b638:	e7ce      	b.n	800b5d8 <_puts_r+0x38>
 800b63a:	3e01      	subs	r6, #1
 800b63c:	e7e4      	b.n	800b608 <_puts_r+0x68>
 800b63e:	6823      	ldr	r3, [r4, #0]
 800b640:	1c5a      	adds	r2, r3, #1
 800b642:	6022      	str	r2, [r4, #0]
 800b644:	220a      	movs	r2, #10
 800b646:	701a      	strb	r2, [r3, #0]
 800b648:	e7ee      	b.n	800b628 <_puts_r+0x88>
	...

0800b64c <puts>:
 800b64c:	4b02      	ldr	r3, [pc, #8]	@ (800b658 <puts+0xc>)
 800b64e:	4601      	mov	r1, r0
 800b650:	6818      	ldr	r0, [r3, #0]
 800b652:	f7ff bfa5 	b.w	800b5a0 <_puts_r>
 800b656:	bf00      	nop
 800b658:	20000064 	.word	0x20000064

0800b65c <siprintf>:
 800b65c:	b40e      	push	{r1, r2, r3}
 800b65e:	b510      	push	{r4, lr}
 800b660:	b09d      	sub	sp, #116	@ 0x74
 800b662:	ab1f      	add	r3, sp, #124	@ 0x7c
 800b664:	9002      	str	r0, [sp, #8]
 800b666:	9006      	str	r0, [sp, #24]
 800b668:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b66c:	480a      	ldr	r0, [pc, #40]	@ (800b698 <siprintf+0x3c>)
 800b66e:	9107      	str	r1, [sp, #28]
 800b670:	9104      	str	r1, [sp, #16]
 800b672:	490a      	ldr	r1, [pc, #40]	@ (800b69c <siprintf+0x40>)
 800b674:	f853 2b04 	ldr.w	r2, [r3], #4
 800b678:	9105      	str	r1, [sp, #20]
 800b67a:	2400      	movs	r4, #0
 800b67c:	a902      	add	r1, sp, #8
 800b67e:	6800      	ldr	r0, [r0, #0]
 800b680:	9301      	str	r3, [sp, #4]
 800b682:	941b      	str	r4, [sp, #108]	@ 0x6c
 800b684:	f002 fd12 	bl	800e0ac <_svfiprintf_r>
 800b688:	9b02      	ldr	r3, [sp, #8]
 800b68a:	701c      	strb	r4, [r3, #0]
 800b68c:	b01d      	add	sp, #116	@ 0x74
 800b68e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b692:	b003      	add	sp, #12
 800b694:	4770      	bx	lr
 800b696:	bf00      	nop
 800b698:	20000064 	.word	0x20000064
 800b69c:	ffff0208 	.word	0xffff0208

0800b6a0 <__sread>:
 800b6a0:	b510      	push	{r4, lr}
 800b6a2:	460c      	mov	r4, r1
 800b6a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6a8:	f000 f998 	bl	800b9dc <_read_r>
 800b6ac:	2800      	cmp	r0, #0
 800b6ae:	bfab      	itete	ge
 800b6b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b6b2:	89a3      	ldrhlt	r3, [r4, #12]
 800b6b4:	181b      	addge	r3, r3, r0
 800b6b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b6ba:	bfac      	ite	ge
 800b6bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b6be:	81a3      	strhlt	r3, [r4, #12]
 800b6c0:	bd10      	pop	{r4, pc}

0800b6c2 <__swrite>:
 800b6c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6c6:	461f      	mov	r7, r3
 800b6c8:	898b      	ldrh	r3, [r1, #12]
 800b6ca:	05db      	lsls	r3, r3, #23
 800b6cc:	4605      	mov	r5, r0
 800b6ce:	460c      	mov	r4, r1
 800b6d0:	4616      	mov	r6, r2
 800b6d2:	d505      	bpl.n	800b6e0 <__swrite+0x1e>
 800b6d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6d8:	2302      	movs	r3, #2
 800b6da:	2200      	movs	r2, #0
 800b6dc:	f000 f96c 	bl	800b9b8 <_lseek_r>
 800b6e0:	89a3      	ldrh	r3, [r4, #12]
 800b6e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b6e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b6ea:	81a3      	strh	r3, [r4, #12]
 800b6ec:	4632      	mov	r2, r6
 800b6ee:	463b      	mov	r3, r7
 800b6f0:	4628      	mov	r0, r5
 800b6f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b6f6:	f000 b983 	b.w	800ba00 <_write_r>

0800b6fa <__sseek>:
 800b6fa:	b510      	push	{r4, lr}
 800b6fc:	460c      	mov	r4, r1
 800b6fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b702:	f000 f959 	bl	800b9b8 <_lseek_r>
 800b706:	1c43      	adds	r3, r0, #1
 800b708:	89a3      	ldrh	r3, [r4, #12]
 800b70a:	bf15      	itete	ne
 800b70c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b70e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b712:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b716:	81a3      	strheq	r3, [r4, #12]
 800b718:	bf18      	it	ne
 800b71a:	81a3      	strhne	r3, [r4, #12]
 800b71c:	bd10      	pop	{r4, pc}

0800b71e <__sclose>:
 800b71e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b722:	f000 b8db 	b.w	800b8dc <_close_r>
	...

0800b728 <viprintf>:
 800b728:	460b      	mov	r3, r1
 800b72a:	4903      	ldr	r1, [pc, #12]	@ (800b738 <viprintf+0x10>)
 800b72c:	4602      	mov	r2, r0
 800b72e:	6808      	ldr	r0, [r1, #0]
 800b730:	6881      	ldr	r1, [r0, #8]
 800b732:	f002 bde1 	b.w	800e2f8 <_vfiprintf_r>
 800b736:	bf00      	nop
 800b738:	20000064 	.word	0x20000064

0800b73c <__swbuf_r>:
 800b73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b73e:	460e      	mov	r6, r1
 800b740:	4614      	mov	r4, r2
 800b742:	4605      	mov	r5, r0
 800b744:	b118      	cbz	r0, 800b74e <__swbuf_r+0x12>
 800b746:	6a03      	ldr	r3, [r0, #32]
 800b748:	b90b      	cbnz	r3, 800b74e <__swbuf_r+0x12>
 800b74a:	f7ff fee1 	bl	800b510 <__sinit>
 800b74e:	69a3      	ldr	r3, [r4, #24]
 800b750:	60a3      	str	r3, [r4, #8]
 800b752:	89a3      	ldrh	r3, [r4, #12]
 800b754:	071a      	lsls	r2, r3, #28
 800b756:	d501      	bpl.n	800b75c <__swbuf_r+0x20>
 800b758:	6923      	ldr	r3, [r4, #16]
 800b75a:	b943      	cbnz	r3, 800b76e <__swbuf_r+0x32>
 800b75c:	4621      	mov	r1, r4
 800b75e:	4628      	mov	r0, r5
 800b760:	f000 f82a 	bl	800b7b8 <__swsetup_r>
 800b764:	b118      	cbz	r0, 800b76e <__swbuf_r+0x32>
 800b766:	f04f 37ff 	mov.w	r7, #4294967295
 800b76a:	4638      	mov	r0, r7
 800b76c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b76e:	6823      	ldr	r3, [r4, #0]
 800b770:	6922      	ldr	r2, [r4, #16]
 800b772:	1a98      	subs	r0, r3, r2
 800b774:	6963      	ldr	r3, [r4, #20]
 800b776:	b2f6      	uxtb	r6, r6
 800b778:	4283      	cmp	r3, r0
 800b77a:	4637      	mov	r7, r6
 800b77c:	dc05      	bgt.n	800b78a <__swbuf_r+0x4e>
 800b77e:	4621      	mov	r1, r4
 800b780:	4628      	mov	r0, r5
 800b782:	f002 ff55 	bl	800e630 <_fflush_r>
 800b786:	2800      	cmp	r0, #0
 800b788:	d1ed      	bne.n	800b766 <__swbuf_r+0x2a>
 800b78a:	68a3      	ldr	r3, [r4, #8]
 800b78c:	3b01      	subs	r3, #1
 800b78e:	60a3      	str	r3, [r4, #8]
 800b790:	6823      	ldr	r3, [r4, #0]
 800b792:	1c5a      	adds	r2, r3, #1
 800b794:	6022      	str	r2, [r4, #0]
 800b796:	701e      	strb	r6, [r3, #0]
 800b798:	6962      	ldr	r2, [r4, #20]
 800b79a:	1c43      	adds	r3, r0, #1
 800b79c:	429a      	cmp	r2, r3
 800b79e:	d004      	beq.n	800b7aa <__swbuf_r+0x6e>
 800b7a0:	89a3      	ldrh	r3, [r4, #12]
 800b7a2:	07db      	lsls	r3, r3, #31
 800b7a4:	d5e1      	bpl.n	800b76a <__swbuf_r+0x2e>
 800b7a6:	2e0a      	cmp	r6, #10
 800b7a8:	d1df      	bne.n	800b76a <__swbuf_r+0x2e>
 800b7aa:	4621      	mov	r1, r4
 800b7ac:	4628      	mov	r0, r5
 800b7ae:	f002 ff3f 	bl	800e630 <_fflush_r>
 800b7b2:	2800      	cmp	r0, #0
 800b7b4:	d0d9      	beq.n	800b76a <__swbuf_r+0x2e>
 800b7b6:	e7d6      	b.n	800b766 <__swbuf_r+0x2a>

0800b7b8 <__swsetup_r>:
 800b7b8:	b538      	push	{r3, r4, r5, lr}
 800b7ba:	4b29      	ldr	r3, [pc, #164]	@ (800b860 <__swsetup_r+0xa8>)
 800b7bc:	4605      	mov	r5, r0
 800b7be:	6818      	ldr	r0, [r3, #0]
 800b7c0:	460c      	mov	r4, r1
 800b7c2:	b118      	cbz	r0, 800b7cc <__swsetup_r+0x14>
 800b7c4:	6a03      	ldr	r3, [r0, #32]
 800b7c6:	b90b      	cbnz	r3, 800b7cc <__swsetup_r+0x14>
 800b7c8:	f7ff fea2 	bl	800b510 <__sinit>
 800b7cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7d0:	0719      	lsls	r1, r3, #28
 800b7d2:	d422      	bmi.n	800b81a <__swsetup_r+0x62>
 800b7d4:	06da      	lsls	r2, r3, #27
 800b7d6:	d407      	bmi.n	800b7e8 <__swsetup_r+0x30>
 800b7d8:	2209      	movs	r2, #9
 800b7da:	602a      	str	r2, [r5, #0]
 800b7dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b7e0:	81a3      	strh	r3, [r4, #12]
 800b7e2:	f04f 30ff 	mov.w	r0, #4294967295
 800b7e6:	e033      	b.n	800b850 <__swsetup_r+0x98>
 800b7e8:	0758      	lsls	r0, r3, #29
 800b7ea:	d512      	bpl.n	800b812 <__swsetup_r+0x5a>
 800b7ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b7ee:	b141      	cbz	r1, 800b802 <__swsetup_r+0x4a>
 800b7f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b7f4:	4299      	cmp	r1, r3
 800b7f6:	d002      	beq.n	800b7fe <__swsetup_r+0x46>
 800b7f8:	4628      	mov	r0, r5
 800b7fa:	f000 ffcd 	bl	800c798 <_free_r>
 800b7fe:	2300      	movs	r3, #0
 800b800:	6363      	str	r3, [r4, #52]	@ 0x34
 800b802:	89a3      	ldrh	r3, [r4, #12]
 800b804:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b808:	81a3      	strh	r3, [r4, #12]
 800b80a:	2300      	movs	r3, #0
 800b80c:	6063      	str	r3, [r4, #4]
 800b80e:	6923      	ldr	r3, [r4, #16]
 800b810:	6023      	str	r3, [r4, #0]
 800b812:	89a3      	ldrh	r3, [r4, #12]
 800b814:	f043 0308 	orr.w	r3, r3, #8
 800b818:	81a3      	strh	r3, [r4, #12]
 800b81a:	6923      	ldr	r3, [r4, #16]
 800b81c:	b94b      	cbnz	r3, 800b832 <__swsetup_r+0x7a>
 800b81e:	89a3      	ldrh	r3, [r4, #12]
 800b820:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b824:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b828:	d003      	beq.n	800b832 <__swsetup_r+0x7a>
 800b82a:	4621      	mov	r1, r4
 800b82c:	4628      	mov	r0, r5
 800b82e:	f002 ff5f 	bl	800e6f0 <__smakebuf_r>
 800b832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b836:	f013 0201 	ands.w	r2, r3, #1
 800b83a:	d00a      	beq.n	800b852 <__swsetup_r+0x9a>
 800b83c:	2200      	movs	r2, #0
 800b83e:	60a2      	str	r2, [r4, #8]
 800b840:	6962      	ldr	r2, [r4, #20]
 800b842:	4252      	negs	r2, r2
 800b844:	61a2      	str	r2, [r4, #24]
 800b846:	6922      	ldr	r2, [r4, #16]
 800b848:	b942      	cbnz	r2, 800b85c <__swsetup_r+0xa4>
 800b84a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b84e:	d1c5      	bne.n	800b7dc <__swsetup_r+0x24>
 800b850:	bd38      	pop	{r3, r4, r5, pc}
 800b852:	0799      	lsls	r1, r3, #30
 800b854:	bf58      	it	pl
 800b856:	6962      	ldrpl	r2, [r4, #20]
 800b858:	60a2      	str	r2, [r4, #8]
 800b85a:	e7f4      	b.n	800b846 <__swsetup_r+0x8e>
 800b85c:	2000      	movs	r0, #0
 800b85e:	e7f7      	b.n	800b850 <__swsetup_r+0x98>
 800b860:	20000064 	.word	0x20000064

0800b864 <memcmp>:
 800b864:	b510      	push	{r4, lr}
 800b866:	3901      	subs	r1, #1
 800b868:	4402      	add	r2, r0
 800b86a:	4290      	cmp	r0, r2
 800b86c:	d101      	bne.n	800b872 <memcmp+0xe>
 800b86e:	2000      	movs	r0, #0
 800b870:	e005      	b.n	800b87e <memcmp+0x1a>
 800b872:	7803      	ldrb	r3, [r0, #0]
 800b874:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b878:	42a3      	cmp	r3, r4
 800b87a:	d001      	beq.n	800b880 <memcmp+0x1c>
 800b87c:	1b18      	subs	r0, r3, r4
 800b87e:	bd10      	pop	{r4, pc}
 800b880:	3001      	adds	r0, #1
 800b882:	e7f2      	b.n	800b86a <memcmp+0x6>

0800b884 <memset>:
 800b884:	4402      	add	r2, r0
 800b886:	4603      	mov	r3, r0
 800b888:	4293      	cmp	r3, r2
 800b88a:	d100      	bne.n	800b88e <memset+0xa>
 800b88c:	4770      	bx	lr
 800b88e:	f803 1b01 	strb.w	r1, [r3], #1
 800b892:	e7f9      	b.n	800b888 <memset+0x4>

0800b894 <strncasecmp>:
 800b894:	b570      	push	{r4, r5, r6, lr}
 800b896:	4e0e      	ldr	r6, [pc, #56]	@ (800b8d0 <strncasecmp+0x3c>)
 800b898:	4605      	mov	r5, r0
 800b89a:	440a      	add	r2, r1
 800b89c:	428a      	cmp	r2, r1
 800b89e:	d101      	bne.n	800b8a4 <strncasecmp+0x10>
 800b8a0:	2000      	movs	r0, #0
 800b8a2:	e013      	b.n	800b8cc <strncasecmp+0x38>
 800b8a4:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b8a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b8ac:	5cf0      	ldrb	r0, [r6, r3]
 800b8ae:	f000 0003 	and.w	r0, r0, #3
 800b8b2:	2801      	cmp	r0, #1
 800b8b4:	5d30      	ldrb	r0, [r6, r4]
 800b8b6:	f000 0003 	and.w	r0, r0, #3
 800b8ba:	bf08      	it	eq
 800b8bc:	3320      	addeq	r3, #32
 800b8be:	2801      	cmp	r0, #1
 800b8c0:	bf08      	it	eq
 800b8c2:	3420      	addeq	r4, #32
 800b8c4:	1b18      	subs	r0, r3, r4
 800b8c6:	d101      	bne.n	800b8cc <strncasecmp+0x38>
 800b8c8:	2c00      	cmp	r4, #0
 800b8ca:	d1e7      	bne.n	800b89c <strncasecmp+0x8>
 800b8cc:	bd70      	pop	{r4, r5, r6, pc}
 800b8ce:	bf00      	nop
 800b8d0:	08010629 	.word	0x08010629

0800b8d4 <_localeconv_r>:
 800b8d4:	4800      	ldr	r0, [pc, #0]	@ (800b8d8 <_localeconv_r+0x4>)
 800b8d6:	4770      	bx	lr
 800b8d8:	200001a4 	.word	0x200001a4

0800b8dc <_close_r>:
 800b8dc:	b538      	push	{r3, r4, r5, lr}
 800b8de:	4d06      	ldr	r5, [pc, #24]	@ (800b8f8 <_close_r+0x1c>)
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	4604      	mov	r4, r0
 800b8e4:	4608      	mov	r0, r1
 800b8e6:	602b      	str	r3, [r5, #0]
 800b8e8:	f7f6 fa0e 	bl	8001d08 <_close>
 800b8ec:	1c43      	adds	r3, r0, #1
 800b8ee:	d102      	bne.n	800b8f6 <_close_r+0x1a>
 800b8f0:	682b      	ldr	r3, [r5, #0]
 800b8f2:	b103      	cbz	r3, 800b8f6 <_close_r+0x1a>
 800b8f4:	6023      	str	r3, [r4, #0]
 800b8f6:	bd38      	pop	{r3, r4, r5, pc}
 800b8f8:	20004f54 	.word	0x20004f54

0800b8fc <_reclaim_reent>:
 800b8fc:	4b2d      	ldr	r3, [pc, #180]	@ (800b9b4 <_reclaim_reent+0xb8>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	4283      	cmp	r3, r0
 800b902:	b570      	push	{r4, r5, r6, lr}
 800b904:	4604      	mov	r4, r0
 800b906:	d053      	beq.n	800b9b0 <_reclaim_reent+0xb4>
 800b908:	69c3      	ldr	r3, [r0, #28]
 800b90a:	b31b      	cbz	r3, 800b954 <_reclaim_reent+0x58>
 800b90c:	68db      	ldr	r3, [r3, #12]
 800b90e:	b163      	cbz	r3, 800b92a <_reclaim_reent+0x2e>
 800b910:	2500      	movs	r5, #0
 800b912:	69e3      	ldr	r3, [r4, #28]
 800b914:	68db      	ldr	r3, [r3, #12]
 800b916:	5959      	ldr	r1, [r3, r5]
 800b918:	b9b1      	cbnz	r1, 800b948 <_reclaim_reent+0x4c>
 800b91a:	3504      	adds	r5, #4
 800b91c:	2d80      	cmp	r5, #128	@ 0x80
 800b91e:	d1f8      	bne.n	800b912 <_reclaim_reent+0x16>
 800b920:	69e3      	ldr	r3, [r4, #28]
 800b922:	4620      	mov	r0, r4
 800b924:	68d9      	ldr	r1, [r3, #12]
 800b926:	f000 ff37 	bl	800c798 <_free_r>
 800b92a:	69e3      	ldr	r3, [r4, #28]
 800b92c:	6819      	ldr	r1, [r3, #0]
 800b92e:	b111      	cbz	r1, 800b936 <_reclaim_reent+0x3a>
 800b930:	4620      	mov	r0, r4
 800b932:	f000 ff31 	bl	800c798 <_free_r>
 800b936:	69e3      	ldr	r3, [r4, #28]
 800b938:	689d      	ldr	r5, [r3, #8]
 800b93a:	b15d      	cbz	r5, 800b954 <_reclaim_reent+0x58>
 800b93c:	4629      	mov	r1, r5
 800b93e:	4620      	mov	r0, r4
 800b940:	682d      	ldr	r5, [r5, #0]
 800b942:	f000 ff29 	bl	800c798 <_free_r>
 800b946:	e7f8      	b.n	800b93a <_reclaim_reent+0x3e>
 800b948:	680e      	ldr	r6, [r1, #0]
 800b94a:	4620      	mov	r0, r4
 800b94c:	f000 ff24 	bl	800c798 <_free_r>
 800b950:	4631      	mov	r1, r6
 800b952:	e7e1      	b.n	800b918 <_reclaim_reent+0x1c>
 800b954:	6961      	ldr	r1, [r4, #20]
 800b956:	b111      	cbz	r1, 800b95e <_reclaim_reent+0x62>
 800b958:	4620      	mov	r0, r4
 800b95a:	f000 ff1d 	bl	800c798 <_free_r>
 800b95e:	69e1      	ldr	r1, [r4, #28]
 800b960:	b111      	cbz	r1, 800b968 <_reclaim_reent+0x6c>
 800b962:	4620      	mov	r0, r4
 800b964:	f000 ff18 	bl	800c798 <_free_r>
 800b968:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b96a:	b111      	cbz	r1, 800b972 <_reclaim_reent+0x76>
 800b96c:	4620      	mov	r0, r4
 800b96e:	f000 ff13 	bl	800c798 <_free_r>
 800b972:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b974:	b111      	cbz	r1, 800b97c <_reclaim_reent+0x80>
 800b976:	4620      	mov	r0, r4
 800b978:	f000 ff0e 	bl	800c798 <_free_r>
 800b97c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800b97e:	b111      	cbz	r1, 800b986 <_reclaim_reent+0x8a>
 800b980:	4620      	mov	r0, r4
 800b982:	f000 ff09 	bl	800c798 <_free_r>
 800b986:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b988:	b111      	cbz	r1, 800b990 <_reclaim_reent+0x94>
 800b98a:	4620      	mov	r0, r4
 800b98c:	f000 ff04 	bl	800c798 <_free_r>
 800b990:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800b992:	b111      	cbz	r1, 800b99a <_reclaim_reent+0x9e>
 800b994:	4620      	mov	r0, r4
 800b996:	f000 feff 	bl	800c798 <_free_r>
 800b99a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b99c:	b111      	cbz	r1, 800b9a4 <_reclaim_reent+0xa8>
 800b99e:	4620      	mov	r0, r4
 800b9a0:	f000 fefa 	bl	800c798 <_free_r>
 800b9a4:	6a23      	ldr	r3, [r4, #32]
 800b9a6:	b11b      	cbz	r3, 800b9b0 <_reclaim_reent+0xb4>
 800b9a8:	4620      	mov	r0, r4
 800b9aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b9ae:	4718      	bx	r3
 800b9b0:	bd70      	pop	{r4, r5, r6, pc}
 800b9b2:	bf00      	nop
 800b9b4:	20000064 	.word	0x20000064

0800b9b8 <_lseek_r>:
 800b9b8:	b538      	push	{r3, r4, r5, lr}
 800b9ba:	4d07      	ldr	r5, [pc, #28]	@ (800b9d8 <_lseek_r+0x20>)
 800b9bc:	4604      	mov	r4, r0
 800b9be:	4608      	mov	r0, r1
 800b9c0:	4611      	mov	r1, r2
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	602a      	str	r2, [r5, #0]
 800b9c6:	461a      	mov	r2, r3
 800b9c8:	f7f6 f9c5 	bl	8001d56 <_lseek>
 800b9cc:	1c43      	adds	r3, r0, #1
 800b9ce:	d102      	bne.n	800b9d6 <_lseek_r+0x1e>
 800b9d0:	682b      	ldr	r3, [r5, #0]
 800b9d2:	b103      	cbz	r3, 800b9d6 <_lseek_r+0x1e>
 800b9d4:	6023      	str	r3, [r4, #0]
 800b9d6:	bd38      	pop	{r3, r4, r5, pc}
 800b9d8:	20004f54 	.word	0x20004f54

0800b9dc <_read_r>:
 800b9dc:	b538      	push	{r3, r4, r5, lr}
 800b9de:	4d07      	ldr	r5, [pc, #28]	@ (800b9fc <_read_r+0x20>)
 800b9e0:	4604      	mov	r4, r0
 800b9e2:	4608      	mov	r0, r1
 800b9e4:	4611      	mov	r1, r2
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	602a      	str	r2, [r5, #0]
 800b9ea:	461a      	mov	r2, r3
 800b9ec:	f7f6 f953 	bl	8001c96 <_read>
 800b9f0:	1c43      	adds	r3, r0, #1
 800b9f2:	d102      	bne.n	800b9fa <_read_r+0x1e>
 800b9f4:	682b      	ldr	r3, [r5, #0]
 800b9f6:	b103      	cbz	r3, 800b9fa <_read_r+0x1e>
 800b9f8:	6023      	str	r3, [r4, #0]
 800b9fa:	bd38      	pop	{r3, r4, r5, pc}
 800b9fc:	20004f54 	.word	0x20004f54

0800ba00 <_write_r>:
 800ba00:	b538      	push	{r3, r4, r5, lr}
 800ba02:	4d07      	ldr	r5, [pc, #28]	@ (800ba20 <_write_r+0x20>)
 800ba04:	4604      	mov	r4, r0
 800ba06:	4608      	mov	r0, r1
 800ba08:	4611      	mov	r1, r2
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	602a      	str	r2, [r5, #0]
 800ba0e:	461a      	mov	r2, r3
 800ba10:	f7f6 f95e 	bl	8001cd0 <_write>
 800ba14:	1c43      	adds	r3, r0, #1
 800ba16:	d102      	bne.n	800ba1e <_write_r+0x1e>
 800ba18:	682b      	ldr	r3, [r5, #0]
 800ba1a:	b103      	cbz	r3, 800ba1e <_write_r+0x1e>
 800ba1c:	6023      	str	r3, [r4, #0]
 800ba1e:	bd38      	pop	{r3, r4, r5, pc}
 800ba20:	20004f54 	.word	0x20004f54

0800ba24 <__errno>:
 800ba24:	4b01      	ldr	r3, [pc, #4]	@ (800ba2c <__errno+0x8>)
 800ba26:	6818      	ldr	r0, [r3, #0]
 800ba28:	4770      	bx	lr
 800ba2a:	bf00      	nop
 800ba2c:	20000064 	.word	0x20000064

0800ba30 <__libc_init_array>:
 800ba30:	b570      	push	{r4, r5, r6, lr}
 800ba32:	4d0d      	ldr	r5, [pc, #52]	@ (800ba68 <__libc_init_array+0x38>)
 800ba34:	4c0d      	ldr	r4, [pc, #52]	@ (800ba6c <__libc_init_array+0x3c>)
 800ba36:	1b64      	subs	r4, r4, r5
 800ba38:	10a4      	asrs	r4, r4, #2
 800ba3a:	2600      	movs	r6, #0
 800ba3c:	42a6      	cmp	r6, r4
 800ba3e:	d109      	bne.n	800ba54 <__libc_init_array+0x24>
 800ba40:	4d0b      	ldr	r5, [pc, #44]	@ (800ba70 <__libc_init_array+0x40>)
 800ba42:	4c0c      	ldr	r4, [pc, #48]	@ (800ba74 <__libc_init_array+0x44>)
 800ba44:	f003 fae4 	bl	800f010 <_init>
 800ba48:	1b64      	subs	r4, r4, r5
 800ba4a:	10a4      	asrs	r4, r4, #2
 800ba4c:	2600      	movs	r6, #0
 800ba4e:	42a6      	cmp	r6, r4
 800ba50:	d105      	bne.n	800ba5e <__libc_init_array+0x2e>
 800ba52:	bd70      	pop	{r4, r5, r6, pc}
 800ba54:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba58:	4798      	blx	r3
 800ba5a:	3601      	adds	r6, #1
 800ba5c:	e7ee      	b.n	800ba3c <__libc_init_array+0xc>
 800ba5e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba62:	4798      	blx	r3
 800ba64:	3601      	adds	r6, #1
 800ba66:	e7f2      	b.n	800ba4e <__libc_init_array+0x1e>
 800ba68:	08010734 	.word	0x08010734
 800ba6c:	08010734 	.word	0x08010734
 800ba70:	08010734 	.word	0x08010734
 800ba74:	08010738 	.word	0x08010738

0800ba78 <__retarget_lock_init_recursive>:
 800ba78:	4770      	bx	lr

0800ba7a <__retarget_lock_acquire_recursive>:
 800ba7a:	4770      	bx	lr

0800ba7c <__retarget_lock_release_recursive>:
 800ba7c:	4770      	bx	lr

0800ba7e <memcpy>:
 800ba7e:	440a      	add	r2, r1
 800ba80:	4291      	cmp	r1, r2
 800ba82:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba86:	d100      	bne.n	800ba8a <memcpy+0xc>
 800ba88:	4770      	bx	lr
 800ba8a:	b510      	push	{r4, lr}
 800ba8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba90:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba94:	4291      	cmp	r1, r2
 800ba96:	d1f9      	bne.n	800ba8c <memcpy+0xe>
 800ba98:	bd10      	pop	{r4, pc}
	...

0800ba9c <nanf>:
 800ba9c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800baa4 <nanf+0x8>
 800baa0:	4770      	bx	lr
 800baa2:	bf00      	nop
 800baa4:	7fc00000 	.word	0x7fc00000

0800baa8 <__assert_func>:
 800baa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800baaa:	4614      	mov	r4, r2
 800baac:	461a      	mov	r2, r3
 800baae:	4b09      	ldr	r3, [pc, #36]	@ (800bad4 <__assert_func+0x2c>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	4605      	mov	r5, r0
 800bab4:	68d8      	ldr	r0, [r3, #12]
 800bab6:	b14c      	cbz	r4, 800bacc <__assert_func+0x24>
 800bab8:	4b07      	ldr	r3, [pc, #28]	@ (800bad8 <__assert_func+0x30>)
 800baba:	9100      	str	r1, [sp, #0]
 800babc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bac0:	4906      	ldr	r1, [pc, #24]	@ (800badc <__assert_func+0x34>)
 800bac2:	462b      	mov	r3, r5
 800bac4:	f002 fddc 	bl	800e680 <fiprintf>
 800bac8:	f002 feb6 	bl	800e838 <abort>
 800bacc:	4b04      	ldr	r3, [pc, #16]	@ (800bae0 <__assert_func+0x38>)
 800bace:	461c      	mov	r4, r3
 800bad0:	e7f3      	b.n	800baba <__assert_func+0x12>
 800bad2:	bf00      	nop
 800bad4:	20000064 	.word	0x20000064
 800bad8:	08010353 	.word	0x08010353
 800badc:	08010360 	.word	0x08010360
 800bae0:	0801038e 	.word	0x0801038e

0800bae4 <quorem>:
 800bae4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bae8:	6903      	ldr	r3, [r0, #16]
 800baea:	690c      	ldr	r4, [r1, #16]
 800baec:	42a3      	cmp	r3, r4
 800baee:	4607      	mov	r7, r0
 800baf0:	db7e      	blt.n	800bbf0 <quorem+0x10c>
 800baf2:	3c01      	subs	r4, #1
 800baf4:	f101 0814 	add.w	r8, r1, #20
 800baf8:	00a3      	lsls	r3, r4, #2
 800bafa:	f100 0514 	add.w	r5, r0, #20
 800bafe:	9300      	str	r3, [sp, #0]
 800bb00:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bb04:	9301      	str	r3, [sp, #4]
 800bb06:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bb0a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bb0e:	3301      	adds	r3, #1
 800bb10:	429a      	cmp	r2, r3
 800bb12:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bb16:	fbb2 f6f3 	udiv	r6, r2, r3
 800bb1a:	d32e      	bcc.n	800bb7a <quorem+0x96>
 800bb1c:	f04f 0a00 	mov.w	sl, #0
 800bb20:	46c4      	mov	ip, r8
 800bb22:	46ae      	mov	lr, r5
 800bb24:	46d3      	mov	fp, sl
 800bb26:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bb2a:	b298      	uxth	r0, r3
 800bb2c:	fb06 a000 	mla	r0, r6, r0, sl
 800bb30:	0c02      	lsrs	r2, r0, #16
 800bb32:	0c1b      	lsrs	r3, r3, #16
 800bb34:	fb06 2303 	mla	r3, r6, r3, r2
 800bb38:	f8de 2000 	ldr.w	r2, [lr]
 800bb3c:	b280      	uxth	r0, r0
 800bb3e:	b292      	uxth	r2, r2
 800bb40:	1a12      	subs	r2, r2, r0
 800bb42:	445a      	add	r2, fp
 800bb44:	f8de 0000 	ldr.w	r0, [lr]
 800bb48:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bb4c:	b29b      	uxth	r3, r3
 800bb4e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bb52:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bb56:	b292      	uxth	r2, r2
 800bb58:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bb5c:	45e1      	cmp	r9, ip
 800bb5e:	f84e 2b04 	str.w	r2, [lr], #4
 800bb62:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bb66:	d2de      	bcs.n	800bb26 <quorem+0x42>
 800bb68:	9b00      	ldr	r3, [sp, #0]
 800bb6a:	58eb      	ldr	r3, [r5, r3]
 800bb6c:	b92b      	cbnz	r3, 800bb7a <quorem+0x96>
 800bb6e:	9b01      	ldr	r3, [sp, #4]
 800bb70:	3b04      	subs	r3, #4
 800bb72:	429d      	cmp	r5, r3
 800bb74:	461a      	mov	r2, r3
 800bb76:	d32f      	bcc.n	800bbd8 <quorem+0xf4>
 800bb78:	613c      	str	r4, [r7, #16]
 800bb7a:	4638      	mov	r0, r7
 800bb7c:	f001 f9c8 	bl	800cf10 <__mcmp>
 800bb80:	2800      	cmp	r0, #0
 800bb82:	db25      	blt.n	800bbd0 <quorem+0xec>
 800bb84:	4629      	mov	r1, r5
 800bb86:	2000      	movs	r0, #0
 800bb88:	f858 2b04 	ldr.w	r2, [r8], #4
 800bb8c:	f8d1 c000 	ldr.w	ip, [r1]
 800bb90:	fa1f fe82 	uxth.w	lr, r2
 800bb94:	fa1f f38c 	uxth.w	r3, ip
 800bb98:	eba3 030e 	sub.w	r3, r3, lr
 800bb9c:	4403      	add	r3, r0
 800bb9e:	0c12      	lsrs	r2, r2, #16
 800bba0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bba4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bba8:	b29b      	uxth	r3, r3
 800bbaa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bbae:	45c1      	cmp	r9, r8
 800bbb0:	f841 3b04 	str.w	r3, [r1], #4
 800bbb4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bbb8:	d2e6      	bcs.n	800bb88 <quorem+0xa4>
 800bbba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bbbe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bbc2:	b922      	cbnz	r2, 800bbce <quorem+0xea>
 800bbc4:	3b04      	subs	r3, #4
 800bbc6:	429d      	cmp	r5, r3
 800bbc8:	461a      	mov	r2, r3
 800bbca:	d30b      	bcc.n	800bbe4 <quorem+0x100>
 800bbcc:	613c      	str	r4, [r7, #16]
 800bbce:	3601      	adds	r6, #1
 800bbd0:	4630      	mov	r0, r6
 800bbd2:	b003      	add	sp, #12
 800bbd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbd8:	6812      	ldr	r2, [r2, #0]
 800bbda:	3b04      	subs	r3, #4
 800bbdc:	2a00      	cmp	r2, #0
 800bbde:	d1cb      	bne.n	800bb78 <quorem+0x94>
 800bbe0:	3c01      	subs	r4, #1
 800bbe2:	e7c6      	b.n	800bb72 <quorem+0x8e>
 800bbe4:	6812      	ldr	r2, [r2, #0]
 800bbe6:	3b04      	subs	r3, #4
 800bbe8:	2a00      	cmp	r2, #0
 800bbea:	d1ef      	bne.n	800bbcc <quorem+0xe8>
 800bbec:	3c01      	subs	r4, #1
 800bbee:	e7ea      	b.n	800bbc6 <quorem+0xe2>
 800bbf0:	2000      	movs	r0, #0
 800bbf2:	e7ee      	b.n	800bbd2 <quorem+0xee>
 800bbf4:	0000      	movs	r0, r0
	...

0800bbf8 <_dtoa_r>:
 800bbf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbfc:	69c7      	ldr	r7, [r0, #28]
 800bbfe:	b097      	sub	sp, #92	@ 0x5c
 800bc00:	ed8d 0b04 	vstr	d0, [sp, #16]
 800bc04:	ec55 4b10 	vmov	r4, r5, d0
 800bc08:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800bc0a:	9107      	str	r1, [sp, #28]
 800bc0c:	4681      	mov	r9, r0
 800bc0e:	920c      	str	r2, [sp, #48]	@ 0x30
 800bc10:	9311      	str	r3, [sp, #68]	@ 0x44
 800bc12:	b97f      	cbnz	r7, 800bc34 <_dtoa_r+0x3c>
 800bc14:	2010      	movs	r0, #16
 800bc16:	f000 fe09 	bl	800c82c <malloc>
 800bc1a:	4602      	mov	r2, r0
 800bc1c:	f8c9 001c 	str.w	r0, [r9, #28]
 800bc20:	b920      	cbnz	r0, 800bc2c <_dtoa_r+0x34>
 800bc22:	4ba9      	ldr	r3, [pc, #676]	@ (800bec8 <_dtoa_r+0x2d0>)
 800bc24:	21ef      	movs	r1, #239	@ 0xef
 800bc26:	48a9      	ldr	r0, [pc, #676]	@ (800becc <_dtoa_r+0x2d4>)
 800bc28:	f7ff ff3e 	bl	800baa8 <__assert_func>
 800bc2c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bc30:	6007      	str	r7, [r0, #0]
 800bc32:	60c7      	str	r7, [r0, #12]
 800bc34:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bc38:	6819      	ldr	r1, [r3, #0]
 800bc3a:	b159      	cbz	r1, 800bc54 <_dtoa_r+0x5c>
 800bc3c:	685a      	ldr	r2, [r3, #4]
 800bc3e:	604a      	str	r2, [r1, #4]
 800bc40:	2301      	movs	r3, #1
 800bc42:	4093      	lsls	r3, r2
 800bc44:	608b      	str	r3, [r1, #8]
 800bc46:	4648      	mov	r0, r9
 800bc48:	f000 fee6 	bl	800ca18 <_Bfree>
 800bc4c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bc50:	2200      	movs	r2, #0
 800bc52:	601a      	str	r2, [r3, #0]
 800bc54:	1e2b      	subs	r3, r5, #0
 800bc56:	bfb9      	ittee	lt
 800bc58:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bc5c:	9305      	strlt	r3, [sp, #20]
 800bc5e:	2300      	movge	r3, #0
 800bc60:	6033      	strge	r3, [r6, #0]
 800bc62:	9f05      	ldr	r7, [sp, #20]
 800bc64:	4b9a      	ldr	r3, [pc, #616]	@ (800bed0 <_dtoa_r+0x2d8>)
 800bc66:	bfbc      	itt	lt
 800bc68:	2201      	movlt	r2, #1
 800bc6a:	6032      	strlt	r2, [r6, #0]
 800bc6c:	43bb      	bics	r3, r7
 800bc6e:	d112      	bne.n	800bc96 <_dtoa_r+0x9e>
 800bc70:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bc72:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bc76:	6013      	str	r3, [r2, #0]
 800bc78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bc7c:	4323      	orrs	r3, r4
 800bc7e:	f000 855a 	beq.w	800c736 <_dtoa_r+0xb3e>
 800bc82:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bc84:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800bee4 <_dtoa_r+0x2ec>
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	f000 855c 	beq.w	800c746 <_dtoa_r+0xb4e>
 800bc8e:	f10a 0303 	add.w	r3, sl, #3
 800bc92:	f000 bd56 	b.w	800c742 <_dtoa_r+0xb4a>
 800bc96:	ed9d 7b04 	vldr	d7, [sp, #16]
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	ec51 0b17 	vmov	r0, r1, d7
 800bca0:	2300      	movs	r3, #0
 800bca2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800bca6:	f7f4 ff0f 	bl	8000ac8 <__aeabi_dcmpeq>
 800bcaa:	4680      	mov	r8, r0
 800bcac:	b158      	cbz	r0, 800bcc6 <_dtoa_r+0xce>
 800bcae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	6013      	str	r3, [r2, #0]
 800bcb4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bcb6:	b113      	cbz	r3, 800bcbe <_dtoa_r+0xc6>
 800bcb8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800bcba:	4b86      	ldr	r3, [pc, #536]	@ (800bed4 <_dtoa_r+0x2dc>)
 800bcbc:	6013      	str	r3, [r2, #0]
 800bcbe:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800bee8 <_dtoa_r+0x2f0>
 800bcc2:	f000 bd40 	b.w	800c746 <_dtoa_r+0xb4e>
 800bcc6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800bcca:	aa14      	add	r2, sp, #80	@ 0x50
 800bccc:	a915      	add	r1, sp, #84	@ 0x54
 800bcce:	4648      	mov	r0, r9
 800bcd0:	f001 fa3e 	bl	800d150 <__d2b>
 800bcd4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bcd8:	9002      	str	r0, [sp, #8]
 800bcda:	2e00      	cmp	r6, #0
 800bcdc:	d078      	beq.n	800bdd0 <_dtoa_r+0x1d8>
 800bcde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bce0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800bce4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bce8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bcec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bcf0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bcf4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bcf8:	4619      	mov	r1, r3
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	4b76      	ldr	r3, [pc, #472]	@ (800bed8 <_dtoa_r+0x2e0>)
 800bcfe:	f7f4 fac3 	bl	8000288 <__aeabi_dsub>
 800bd02:	a36b      	add	r3, pc, #428	@ (adr r3, 800beb0 <_dtoa_r+0x2b8>)
 800bd04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd08:	f7f4 fc76 	bl	80005f8 <__aeabi_dmul>
 800bd0c:	a36a      	add	r3, pc, #424	@ (adr r3, 800beb8 <_dtoa_r+0x2c0>)
 800bd0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd12:	f7f4 fabb 	bl	800028c <__adddf3>
 800bd16:	4604      	mov	r4, r0
 800bd18:	4630      	mov	r0, r6
 800bd1a:	460d      	mov	r5, r1
 800bd1c:	f7f4 fc02 	bl	8000524 <__aeabi_i2d>
 800bd20:	a367      	add	r3, pc, #412	@ (adr r3, 800bec0 <_dtoa_r+0x2c8>)
 800bd22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd26:	f7f4 fc67 	bl	80005f8 <__aeabi_dmul>
 800bd2a:	4602      	mov	r2, r0
 800bd2c:	460b      	mov	r3, r1
 800bd2e:	4620      	mov	r0, r4
 800bd30:	4629      	mov	r1, r5
 800bd32:	f7f4 faab 	bl	800028c <__adddf3>
 800bd36:	4604      	mov	r4, r0
 800bd38:	460d      	mov	r5, r1
 800bd3a:	f7f4 ff0d 	bl	8000b58 <__aeabi_d2iz>
 800bd3e:	2200      	movs	r2, #0
 800bd40:	4607      	mov	r7, r0
 800bd42:	2300      	movs	r3, #0
 800bd44:	4620      	mov	r0, r4
 800bd46:	4629      	mov	r1, r5
 800bd48:	f7f4 fec8 	bl	8000adc <__aeabi_dcmplt>
 800bd4c:	b140      	cbz	r0, 800bd60 <_dtoa_r+0x168>
 800bd4e:	4638      	mov	r0, r7
 800bd50:	f7f4 fbe8 	bl	8000524 <__aeabi_i2d>
 800bd54:	4622      	mov	r2, r4
 800bd56:	462b      	mov	r3, r5
 800bd58:	f7f4 feb6 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd5c:	b900      	cbnz	r0, 800bd60 <_dtoa_r+0x168>
 800bd5e:	3f01      	subs	r7, #1
 800bd60:	2f16      	cmp	r7, #22
 800bd62:	d852      	bhi.n	800be0a <_dtoa_r+0x212>
 800bd64:	4b5d      	ldr	r3, [pc, #372]	@ (800bedc <_dtoa_r+0x2e4>)
 800bd66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bd6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd6e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bd72:	f7f4 feb3 	bl	8000adc <__aeabi_dcmplt>
 800bd76:	2800      	cmp	r0, #0
 800bd78:	d049      	beq.n	800be0e <_dtoa_r+0x216>
 800bd7a:	3f01      	subs	r7, #1
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	9310      	str	r3, [sp, #64]	@ 0x40
 800bd80:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bd82:	1b9b      	subs	r3, r3, r6
 800bd84:	1e5a      	subs	r2, r3, #1
 800bd86:	bf45      	ittet	mi
 800bd88:	f1c3 0301 	rsbmi	r3, r3, #1
 800bd8c:	9300      	strmi	r3, [sp, #0]
 800bd8e:	2300      	movpl	r3, #0
 800bd90:	2300      	movmi	r3, #0
 800bd92:	9206      	str	r2, [sp, #24]
 800bd94:	bf54      	ite	pl
 800bd96:	9300      	strpl	r3, [sp, #0]
 800bd98:	9306      	strmi	r3, [sp, #24]
 800bd9a:	2f00      	cmp	r7, #0
 800bd9c:	db39      	blt.n	800be12 <_dtoa_r+0x21a>
 800bd9e:	9b06      	ldr	r3, [sp, #24]
 800bda0:	970d      	str	r7, [sp, #52]	@ 0x34
 800bda2:	443b      	add	r3, r7
 800bda4:	9306      	str	r3, [sp, #24]
 800bda6:	2300      	movs	r3, #0
 800bda8:	9308      	str	r3, [sp, #32]
 800bdaa:	9b07      	ldr	r3, [sp, #28]
 800bdac:	2b09      	cmp	r3, #9
 800bdae:	d863      	bhi.n	800be78 <_dtoa_r+0x280>
 800bdb0:	2b05      	cmp	r3, #5
 800bdb2:	bfc4      	itt	gt
 800bdb4:	3b04      	subgt	r3, #4
 800bdb6:	9307      	strgt	r3, [sp, #28]
 800bdb8:	9b07      	ldr	r3, [sp, #28]
 800bdba:	f1a3 0302 	sub.w	r3, r3, #2
 800bdbe:	bfcc      	ite	gt
 800bdc0:	2400      	movgt	r4, #0
 800bdc2:	2401      	movle	r4, #1
 800bdc4:	2b03      	cmp	r3, #3
 800bdc6:	d863      	bhi.n	800be90 <_dtoa_r+0x298>
 800bdc8:	e8df f003 	tbb	[pc, r3]
 800bdcc:	2b375452 	.word	0x2b375452
 800bdd0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800bdd4:	441e      	add	r6, r3
 800bdd6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bdda:	2b20      	cmp	r3, #32
 800bddc:	bfc1      	itttt	gt
 800bdde:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bde2:	409f      	lslgt	r7, r3
 800bde4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bde8:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bdec:	bfd6      	itet	le
 800bdee:	f1c3 0320 	rsble	r3, r3, #32
 800bdf2:	ea47 0003 	orrgt.w	r0, r7, r3
 800bdf6:	fa04 f003 	lslle.w	r0, r4, r3
 800bdfa:	f7f4 fb83 	bl	8000504 <__aeabi_ui2d>
 800bdfe:	2201      	movs	r2, #1
 800be00:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800be04:	3e01      	subs	r6, #1
 800be06:	9212      	str	r2, [sp, #72]	@ 0x48
 800be08:	e776      	b.n	800bcf8 <_dtoa_r+0x100>
 800be0a:	2301      	movs	r3, #1
 800be0c:	e7b7      	b.n	800bd7e <_dtoa_r+0x186>
 800be0e:	9010      	str	r0, [sp, #64]	@ 0x40
 800be10:	e7b6      	b.n	800bd80 <_dtoa_r+0x188>
 800be12:	9b00      	ldr	r3, [sp, #0]
 800be14:	1bdb      	subs	r3, r3, r7
 800be16:	9300      	str	r3, [sp, #0]
 800be18:	427b      	negs	r3, r7
 800be1a:	9308      	str	r3, [sp, #32]
 800be1c:	2300      	movs	r3, #0
 800be1e:	930d      	str	r3, [sp, #52]	@ 0x34
 800be20:	e7c3      	b.n	800bdaa <_dtoa_r+0x1b2>
 800be22:	2301      	movs	r3, #1
 800be24:	9309      	str	r3, [sp, #36]	@ 0x24
 800be26:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800be28:	eb07 0b03 	add.w	fp, r7, r3
 800be2c:	f10b 0301 	add.w	r3, fp, #1
 800be30:	2b01      	cmp	r3, #1
 800be32:	9303      	str	r3, [sp, #12]
 800be34:	bfb8      	it	lt
 800be36:	2301      	movlt	r3, #1
 800be38:	e006      	b.n	800be48 <_dtoa_r+0x250>
 800be3a:	2301      	movs	r3, #1
 800be3c:	9309      	str	r3, [sp, #36]	@ 0x24
 800be3e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800be40:	2b00      	cmp	r3, #0
 800be42:	dd28      	ble.n	800be96 <_dtoa_r+0x29e>
 800be44:	469b      	mov	fp, r3
 800be46:	9303      	str	r3, [sp, #12]
 800be48:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800be4c:	2100      	movs	r1, #0
 800be4e:	2204      	movs	r2, #4
 800be50:	f102 0514 	add.w	r5, r2, #20
 800be54:	429d      	cmp	r5, r3
 800be56:	d926      	bls.n	800bea6 <_dtoa_r+0x2ae>
 800be58:	6041      	str	r1, [r0, #4]
 800be5a:	4648      	mov	r0, r9
 800be5c:	f000 fd9c 	bl	800c998 <_Balloc>
 800be60:	4682      	mov	sl, r0
 800be62:	2800      	cmp	r0, #0
 800be64:	d142      	bne.n	800beec <_dtoa_r+0x2f4>
 800be66:	4b1e      	ldr	r3, [pc, #120]	@ (800bee0 <_dtoa_r+0x2e8>)
 800be68:	4602      	mov	r2, r0
 800be6a:	f240 11af 	movw	r1, #431	@ 0x1af
 800be6e:	e6da      	b.n	800bc26 <_dtoa_r+0x2e>
 800be70:	2300      	movs	r3, #0
 800be72:	e7e3      	b.n	800be3c <_dtoa_r+0x244>
 800be74:	2300      	movs	r3, #0
 800be76:	e7d5      	b.n	800be24 <_dtoa_r+0x22c>
 800be78:	2401      	movs	r4, #1
 800be7a:	2300      	movs	r3, #0
 800be7c:	9307      	str	r3, [sp, #28]
 800be7e:	9409      	str	r4, [sp, #36]	@ 0x24
 800be80:	f04f 3bff 	mov.w	fp, #4294967295
 800be84:	2200      	movs	r2, #0
 800be86:	f8cd b00c 	str.w	fp, [sp, #12]
 800be8a:	2312      	movs	r3, #18
 800be8c:	920c      	str	r2, [sp, #48]	@ 0x30
 800be8e:	e7db      	b.n	800be48 <_dtoa_r+0x250>
 800be90:	2301      	movs	r3, #1
 800be92:	9309      	str	r3, [sp, #36]	@ 0x24
 800be94:	e7f4      	b.n	800be80 <_dtoa_r+0x288>
 800be96:	f04f 0b01 	mov.w	fp, #1
 800be9a:	f8cd b00c 	str.w	fp, [sp, #12]
 800be9e:	465b      	mov	r3, fp
 800bea0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800bea4:	e7d0      	b.n	800be48 <_dtoa_r+0x250>
 800bea6:	3101      	adds	r1, #1
 800bea8:	0052      	lsls	r2, r2, #1
 800beaa:	e7d1      	b.n	800be50 <_dtoa_r+0x258>
 800beac:	f3af 8000 	nop.w
 800beb0:	636f4361 	.word	0x636f4361
 800beb4:	3fd287a7 	.word	0x3fd287a7
 800beb8:	8b60c8b3 	.word	0x8b60c8b3
 800bebc:	3fc68a28 	.word	0x3fc68a28
 800bec0:	509f79fb 	.word	0x509f79fb
 800bec4:	3fd34413 	.word	0x3fd34413
 800bec8:	080102ab 	.word	0x080102ab
 800becc:	0801039c 	.word	0x0801039c
 800bed0:	7ff00000 	.word	0x7ff00000
 800bed4:	0801032b 	.word	0x0801032b
 800bed8:	3ff80000 	.word	0x3ff80000
 800bedc:	08010510 	.word	0x08010510
 800bee0:	080103f4 	.word	0x080103f4
 800bee4:	08010398 	.word	0x08010398
 800bee8:	0801032a 	.word	0x0801032a
 800beec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bef0:	6018      	str	r0, [r3, #0]
 800bef2:	9b03      	ldr	r3, [sp, #12]
 800bef4:	2b0e      	cmp	r3, #14
 800bef6:	f200 80a1 	bhi.w	800c03c <_dtoa_r+0x444>
 800befa:	2c00      	cmp	r4, #0
 800befc:	f000 809e 	beq.w	800c03c <_dtoa_r+0x444>
 800bf00:	2f00      	cmp	r7, #0
 800bf02:	dd33      	ble.n	800bf6c <_dtoa_r+0x374>
 800bf04:	4b9c      	ldr	r3, [pc, #624]	@ (800c178 <_dtoa_r+0x580>)
 800bf06:	f007 020f 	and.w	r2, r7, #15
 800bf0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bf0e:	ed93 7b00 	vldr	d7, [r3]
 800bf12:	05f8      	lsls	r0, r7, #23
 800bf14:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800bf18:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bf1c:	d516      	bpl.n	800bf4c <_dtoa_r+0x354>
 800bf1e:	4b97      	ldr	r3, [pc, #604]	@ (800c17c <_dtoa_r+0x584>)
 800bf20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bf24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bf28:	f7f4 fc90 	bl	800084c <__aeabi_ddiv>
 800bf2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bf30:	f004 040f 	and.w	r4, r4, #15
 800bf34:	2603      	movs	r6, #3
 800bf36:	4d91      	ldr	r5, [pc, #580]	@ (800c17c <_dtoa_r+0x584>)
 800bf38:	b954      	cbnz	r4, 800bf50 <_dtoa_r+0x358>
 800bf3a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800bf3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf42:	f7f4 fc83 	bl	800084c <__aeabi_ddiv>
 800bf46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bf4a:	e028      	b.n	800bf9e <_dtoa_r+0x3a6>
 800bf4c:	2602      	movs	r6, #2
 800bf4e:	e7f2      	b.n	800bf36 <_dtoa_r+0x33e>
 800bf50:	07e1      	lsls	r1, r4, #31
 800bf52:	d508      	bpl.n	800bf66 <_dtoa_r+0x36e>
 800bf54:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800bf58:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bf5c:	f7f4 fb4c 	bl	80005f8 <__aeabi_dmul>
 800bf60:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800bf64:	3601      	adds	r6, #1
 800bf66:	1064      	asrs	r4, r4, #1
 800bf68:	3508      	adds	r5, #8
 800bf6a:	e7e5      	b.n	800bf38 <_dtoa_r+0x340>
 800bf6c:	f000 80af 	beq.w	800c0ce <_dtoa_r+0x4d6>
 800bf70:	427c      	negs	r4, r7
 800bf72:	4b81      	ldr	r3, [pc, #516]	@ (800c178 <_dtoa_r+0x580>)
 800bf74:	4d81      	ldr	r5, [pc, #516]	@ (800c17c <_dtoa_r+0x584>)
 800bf76:	f004 020f 	and.w	r2, r4, #15
 800bf7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bf7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf82:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bf86:	f7f4 fb37 	bl	80005f8 <__aeabi_dmul>
 800bf8a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bf8e:	1124      	asrs	r4, r4, #4
 800bf90:	2300      	movs	r3, #0
 800bf92:	2602      	movs	r6, #2
 800bf94:	2c00      	cmp	r4, #0
 800bf96:	f040 808f 	bne.w	800c0b8 <_dtoa_r+0x4c0>
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d1d3      	bne.n	800bf46 <_dtoa_r+0x34e>
 800bf9e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bfa0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	f000 8094 	beq.w	800c0d2 <_dtoa_r+0x4da>
 800bfaa:	4b75      	ldr	r3, [pc, #468]	@ (800c180 <_dtoa_r+0x588>)
 800bfac:	2200      	movs	r2, #0
 800bfae:	4620      	mov	r0, r4
 800bfb0:	4629      	mov	r1, r5
 800bfb2:	f7f4 fd93 	bl	8000adc <__aeabi_dcmplt>
 800bfb6:	2800      	cmp	r0, #0
 800bfb8:	f000 808b 	beq.w	800c0d2 <_dtoa_r+0x4da>
 800bfbc:	9b03      	ldr	r3, [sp, #12]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	f000 8087 	beq.w	800c0d2 <_dtoa_r+0x4da>
 800bfc4:	f1bb 0f00 	cmp.w	fp, #0
 800bfc8:	dd34      	ble.n	800c034 <_dtoa_r+0x43c>
 800bfca:	4620      	mov	r0, r4
 800bfcc:	4b6d      	ldr	r3, [pc, #436]	@ (800c184 <_dtoa_r+0x58c>)
 800bfce:	2200      	movs	r2, #0
 800bfd0:	4629      	mov	r1, r5
 800bfd2:	f7f4 fb11 	bl	80005f8 <__aeabi_dmul>
 800bfd6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bfda:	f107 38ff 	add.w	r8, r7, #4294967295
 800bfde:	3601      	adds	r6, #1
 800bfe0:	465c      	mov	r4, fp
 800bfe2:	4630      	mov	r0, r6
 800bfe4:	f7f4 fa9e 	bl	8000524 <__aeabi_i2d>
 800bfe8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bfec:	f7f4 fb04 	bl	80005f8 <__aeabi_dmul>
 800bff0:	4b65      	ldr	r3, [pc, #404]	@ (800c188 <_dtoa_r+0x590>)
 800bff2:	2200      	movs	r2, #0
 800bff4:	f7f4 f94a 	bl	800028c <__adddf3>
 800bff8:	4605      	mov	r5, r0
 800bffa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bffe:	2c00      	cmp	r4, #0
 800c000:	d16a      	bne.n	800c0d8 <_dtoa_r+0x4e0>
 800c002:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c006:	4b61      	ldr	r3, [pc, #388]	@ (800c18c <_dtoa_r+0x594>)
 800c008:	2200      	movs	r2, #0
 800c00a:	f7f4 f93d 	bl	8000288 <__aeabi_dsub>
 800c00e:	4602      	mov	r2, r0
 800c010:	460b      	mov	r3, r1
 800c012:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c016:	462a      	mov	r2, r5
 800c018:	4633      	mov	r3, r6
 800c01a:	f7f4 fd7d 	bl	8000b18 <__aeabi_dcmpgt>
 800c01e:	2800      	cmp	r0, #0
 800c020:	f040 8298 	bne.w	800c554 <_dtoa_r+0x95c>
 800c024:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c028:	462a      	mov	r2, r5
 800c02a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c02e:	f7f4 fd55 	bl	8000adc <__aeabi_dcmplt>
 800c032:	bb38      	cbnz	r0, 800c084 <_dtoa_r+0x48c>
 800c034:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800c038:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c03c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c03e:	2b00      	cmp	r3, #0
 800c040:	f2c0 8157 	blt.w	800c2f2 <_dtoa_r+0x6fa>
 800c044:	2f0e      	cmp	r7, #14
 800c046:	f300 8154 	bgt.w	800c2f2 <_dtoa_r+0x6fa>
 800c04a:	4b4b      	ldr	r3, [pc, #300]	@ (800c178 <_dtoa_r+0x580>)
 800c04c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c050:	ed93 7b00 	vldr	d7, [r3]
 800c054:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c056:	2b00      	cmp	r3, #0
 800c058:	ed8d 7b00 	vstr	d7, [sp]
 800c05c:	f280 80e5 	bge.w	800c22a <_dtoa_r+0x632>
 800c060:	9b03      	ldr	r3, [sp, #12]
 800c062:	2b00      	cmp	r3, #0
 800c064:	f300 80e1 	bgt.w	800c22a <_dtoa_r+0x632>
 800c068:	d10c      	bne.n	800c084 <_dtoa_r+0x48c>
 800c06a:	4b48      	ldr	r3, [pc, #288]	@ (800c18c <_dtoa_r+0x594>)
 800c06c:	2200      	movs	r2, #0
 800c06e:	ec51 0b17 	vmov	r0, r1, d7
 800c072:	f7f4 fac1 	bl	80005f8 <__aeabi_dmul>
 800c076:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c07a:	f7f4 fd43 	bl	8000b04 <__aeabi_dcmpge>
 800c07e:	2800      	cmp	r0, #0
 800c080:	f000 8266 	beq.w	800c550 <_dtoa_r+0x958>
 800c084:	2400      	movs	r4, #0
 800c086:	4625      	mov	r5, r4
 800c088:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c08a:	4656      	mov	r6, sl
 800c08c:	ea6f 0803 	mvn.w	r8, r3
 800c090:	2700      	movs	r7, #0
 800c092:	4621      	mov	r1, r4
 800c094:	4648      	mov	r0, r9
 800c096:	f000 fcbf 	bl	800ca18 <_Bfree>
 800c09a:	2d00      	cmp	r5, #0
 800c09c:	f000 80bd 	beq.w	800c21a <_dtoa_r+0x622>
 800c0a0:	b12f      	cbz	r7, 800c0ae <_dtoa_r+0x4b6>
 800c0a2:	42af      	cmp	r7, r5
 800c0a4:	d003      	beq.n	800c0ae <_dtoa_r+0x4b6>
 800c0a6:	4639      	mov	r1, r7
 800c0a8:	4648      	mov	r0, r9
 800c0aa:	f000 fcb5 	bl	800ca18 <_Bfree>
 800c0ae:	4629      	mov	r1, r5
 800c0b0:	4648      	mov	r0, r9
 800c0b2:	f000 fcb1 	bl	800ca18 <_Bfree>
 800c0b6:	e0b0      	b.n	800c21a <_dtoa_r+0x622>
 800c0b8:	07e2      	lsls	r2, r4, #31
 800c0ba:	d505      	bpl.n	800c0c8 <_dtoa_r+0x4d0>
 800c0bc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c0c0:	f7f4 fa9a 	bl	80005f8 <__aeabi_dmul>
 800c0c4:	3601      	adds	r6, #1
 800c0c6:	2301      	movs	r3, #1
 800c0c8:	1064      	asrs	r4, r4, #1
 800c0ca:	3508      	adds	r5, #8
 800c0cc:	e762      	b.n	800bf94 <_dtoa_r+0x39c>
 800c0ce:	2602      	movs	r6, #2
 800c0d0:	e765      	b.n	800bf9e <_dtoa_r+0x3a6>
 800c0d2:	9c03      	ldr	r4, [sp, #12]
 800c0d4:	46b8      	mov	r8, r7
 800c0d6:	e784      	b.n	800bfe2 <_dtoa_r+0x3ea>
 800c0d8:	4b27      	ldr	r3, [pc, #156]	@ (800c178 <_dtoa_r+0x580>)
 800c0da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c0dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c0e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c0e4:	4454      	add	r4, sl
 800c0e6:	2900      	cmp	r1, #0
 800c0e8:	d054      	beq.n	800c194 <_dtoa_r+0x59c>
 800c0ea:	4929      	ldr	r1, [pc, #164]	@ (800c190 <_dtoa_r+0x598>)
 800c0ec:	2000      	movs	r0, #0
 800c0ee:	f7f4 fbad 	bl	800084c <__aeabi_ddiv>
 800c0f2:	4633      	mov	r3, r6
 800c0f4:	462a      	mov	r2, r5
 800c0f6:	f7f4 f8c7 	bl	8000288 <__aeabi_dsub>
 800c0fa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c0fe:	4656      	mov	r6, sl
 800c100:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c104:	f7f4 fd28 	bl	8000b58 <__aeabi_d2iz>
 800c108:	4605      	mov	r5, r0
 800c10a:	f7f4 fa0b 	bl	8000524 <__aeabi_i2d>
 800c10e:	4602      	mov	r2, r0
 800c110:	460b      	mov	r3, r1
 800c112:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c116:	f7f4 f8b7 	bl	8000288 <__aeabi_dsub>
 800c11a:	3530      	adds	r5, #48	@ 0x30
 800c11c:	4602      	mov	r2, r0
 800c11e:	460b      	mov	r3, r1
 800c120:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c124:	f806 5b01 	strb.w	r5, [r6], #1
 800c128:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c12c:	f7f4 fcd6 	bl	8000adc <__aeabi_dcmplt>
 800c130:	2800      	cmp	r0, #0
 800c132:	d172      	bne.n	800c21a <_dtoa_r+0x622>
 800c134:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c138:	4911      	ldr	r1, [pc, #68]	@ (800c180 <_dtoa_r+0x588>)
 800c13a:	2000      	movs	r0, #0
 800c13c:	f7f4 f8a4 	bl	8000288 <__aeabi_dsub>
 800c140:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c144:	f7f4 fcca 	bl	8000adc <__aeabi_dcmplt>
 800c148:	2800      	cmp	r0, #0
 800c14a:	f040 80b4 	bne.w	800c2b6 <_dtoa_r+0x6be>
 800c14e:	42a6      	cmp	r6, r4
 800c150:	f43f af70 	beq.w	800c034 <_dtoa_r+0x43c>
 800c154:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c158:	4b0a      	ldr	r3, [pc, #40]	@ (800c184 <_dtoa_r+0x58c>)
 800c15a:	2200      	movs	r2, #0
 800c15c:	f7f4 fa4c 	bl	80005f8 <__aeabi_dmul>
 800c160:	4b08      	ldr	r3, [pc, #32]	@ (800c184 <_dtoa_r+0x58c>)
 800c162:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c166:	2200      	movs	r2, #0
 800c168:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c16c:	f7f4 fa44 	bl	80005f8 <__aeabi_dmul>
 800c170:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c174:	e7c4      	b.n	800c100 <_dtoa_r+0x508>
 800c176:	bf00      	nop
 800c178:	08010510 	.word	0x08010510
 800c17c:	080104e8 	.word	0x080104e8
 800c180:	3ff00000 	.word	0x3ff00000
 800c184:	40240000 	.word	0x40240000
 800c188:	401c0000 	.word	0x401c0000
 800c18c:	40140000 	.word	0x40140000
 800c190:	3fe00000 	.word	0x3fe00000
 800c194:	4631      	mov	r1, r6
 800c196:	4628      	mov	r0, r5
 800c198:	f7f4 fa2e 	bl	80005f8 <__aeabi_dmul>
 800c19c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c1a0:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c1a2:	4656      	mov	r6, sl
 800c1a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c1a8:	f7f4 fcd6 	bl	8000b58 <__aeabi_d2iz>
 800c1ac:	4605      	mov	r5, r0
 800c1ae:	f7f4 f9b9 	bl	8000524 <__aeabi_i2d>
 800c1b2:	4602      	mov	r2, r0
 800c1b4:	460b      	mov	r3, r1
 800c1b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c1ba:	f7f4 f865 	bl	8000288 <__aeabi_dsub>
 800c1be:	3530      	adds	r5, #48	@ 0x30
 800c1c0:	f806 5b01 	strb.w	r5, [r6], #1
 800c1c4:	4602      	mov	r2, r0
 800c1c6:	460b      	mov	r3, r1
 800c1c8:	42a6      	cmp	r6, r4
 800c1ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c1ce:	f04f 0200 	mov.w	r2, #0
 800c1d2:	d124      	bne.n	800c21e <_dtoa_r+0x626>
 800c1d4:	4baf      	ldr	r3, [pc, #700]	@ (800c494 <_dtoa_r+0x89c>)
 800c1d6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c1da:	f7f4 f857 	bl	800028c <__adddf3>
 800c1de:	4602      	mov	r2, r0
 800c1e0:	460b      	mov	r3, r1
 800c1e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c1e6:	f7f4 fc97 	bl	8000b18 <__aeabi_dcmpgt>
 800c1ea:	2800      	cmp	r0, #0
 800c1ec:	d163      	bne.n	800c2b6 <_dtoa_r+0x6be>
 800c1ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c1f2:	49a8      	ldr	r1, [pc, #672]	@ (800c494 <_dtoa_r+0x89c>)
 800c1f4:	2000      	movs	r0, #0
 800c1f6:	f7f4 f847 	bl	8000288 <__aeabi_dsub>
 800c1fa:	4602      	mov	r2, r0
 800c1fc:	460b      	mov	r3, r1
 800c1fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c202:	f7f4 fc6b 	bl	8000adc <__aeabi_dcmplt>
 800c206:	2800      	cmp	r0, #0
 800c208:	f43f af14 	beq.w	800c034 <_dtoa_r+0x43c>
 800c20c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c20e:	1e73      	subs	r3, r6, #1
 800c210:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c212:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c216:	2b30      	cmp	r3, #48	@ 0x30
 800c218:	d0f8      	beq.n	800c20c <_dtoa_r+0x614>
 800c21a:	4647      	mov	r7, r8
 800c21c:	e03b      	b.n	800c296 <_dtoa_r+0x69e>
 800c21e:	4b9e      	ldr	r3, [pc, #632]	@ (800c498 <_dtoa_r+0x8a0>)
 800c220:	f7f4 f9ea 	bl	80005f8 <__aeabi_dmul>
 800c224:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c228:	e7bc      	b.n	800c1a4 <_dtoa_r+0x5ac>
 800c22a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c22e:	4656      	mov	r6, sl
 800c230:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c234:	4620      	mov	r0, r4
 800c236:	4629      	mov	r1, r5
 800c238:	f7f4 fb08 	bl	800084c <__aeabi_ddiv>
 800c23c:	f7f4 fc8c 	bl	8000b58 <__aeabi_d2iz>
 800c240:	4680      	mov	r8, r0
 800c242:	f7f4 f96f 	bl	8000524 <__aeabi_i2d>
 800c246:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c24a:	f7f4 f9d5 	bl	80005f8 <__aeabi_dmul>
 800c24e:	4602      	mov	r2, r0
 800c250:	460b      	mov	r3, r1
 800c252:	4620      	mov	r0, r4
 800c254:	4629      	mov	r1, r5
 800c256:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c25a:	f7f4 f815 	bl	8000288 <__aeabi_dsub>
 800c25e:	f806 4b01 	strb.w	r4, [r6], #1
 800c262:	9d03      	ldr	r5, [sp, #12]
 800c264:	eba6 040a 	sub.w	r4, r6, sl
 800c268:	42a5      	cmp	r5, r4
 800c26a:	4602      	mov	r2, r0
 800c26c:	460b      	mov	r3, r1
 800c26e:	d133      	bne.n	800c2d8 <_dtoa_r+0x6e0>
 800c270:	f7f4 f80c 	bl	800028c <__adddf3>
 800c274:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c278:	4604      	mov	r4, r0
 800c27a:	460d      	mov	r5, r1
 800c27c:	f7f4 fc4c 	bl	8000b18 <__aeabi_dcmpgt>
 800c280:	b9c0      	cbnz	r0, 800c2b4 <_dtoa_r+0x6bc>
 800c282:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c286:	4620      	mov	r0, r4
 800c288:	4629      	mov	r1, r5
 800c28a:	f7f4 fc1d 	bl	8000ac8 <__aeabi_dcmpeq>
 800c28e:	b110      	cbz	r0, 800c296 <_dtoa_r+0x69e>
 800c290:	f018 0f01 	tst.w	r8, #1
 800c294:	d10e      	bne.n	800c2b4 <_dtoa_r+0x6bc>
 800c296:	9902      	ldr	r1, [sp, #8]
 800c298:	4648      	mov	r0, r9
 800c29a:	f000 fbbd 	bl	800ca18 <_Bfree>
 800c29e:	2300      	movs	r3, #0
 800c2a0:	7033      	strb	r3, [r6, #0]
 800c2a2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c2a4:	3701      	adds	r7, #1
 800c2a6:	601f      	str	r7, [r3, #0]
 800c2a8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	f000 824b 	beq.w	800c746 <_dtoa_r+0xb4e>
 800c2b0:	601e      	str	r6, [r3, #0]
 800c2b2:	e248      	b.n	800c746 <_dtoa_r+0xb4e>
 800c2b4:	46b8      	mov	r8, r7
 800c2b6:	4633      	mov	r3, r6
 800c2b8:	461e      	mov	r6, r3
 800c2ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c2be:	2a39      	cmp	r2, #57	@ 0x39
 800c2c0:	d106      	bne.n	800c2d0 <_dtoa_r+0x6d8>
 800c2c2:	459a      	cmp	sl, r3
 800c2c4:	d1f8      	bne.n	800c2b8 <_dtoa_r+0x6c0>
 800c2c6:	2230      	movs	r2, #48	@ 0x30
 800c2c8:	f108 0801 	add.w	r8, r8, #1
 800c2cc:	f88a 2000 	strb.w	r2, [sl]
 800c2d0:	781a      	ldrb	r2, [r3, #0]
 800c2d2:	3201      	adds	r2, #1
 800c2d4:	701a      	strb	r2, [r3, #0]
 800c2d6:	e7a0      	b.n	800c21a <_dtoa_r+0x622>
 800c2d8:	4b6f      	ldr	r3, [pc, #444]	@ (800c498 <_dtoa_r+0x8a0>)
 800c2da:	2200      	movs	r2, #0
 800c2dc:	f7f4 f98c 	bl	80005f8 <__aeabi_dmul>
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	4604      	mov	r4, r0
 800c2e6:	460d      	mov	r5, r1
 800c2e8:	f7f4 fbee 	bl	8000ac8 <__aeabi_dcmpeq>
 800c2ec:	2800      	cmp	r0, #0
 800c2ee:	d09f      	beq.n	800c230 <_dtoa_r+0x638>
 800c2f0:	e7d1      	b.n	800c296 <_dtoa_r+0x69e>
 800c2f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c2f4:	2a00      	cmp	r2, #0
 800c2f6:	f000 80ea 	beq.w	800c4ce <_dtoa_r+0x8d6>
 800c2fa:	9a07      	ldr	r2, [sp, #28]
 800c2fc:	2a01      	cmp	r2, #1
 800c2fe:	f300 80cd 	bgt.w	800c49c <_dtoa_r+0x8a4>
 800c302:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c304:	2a00      	cmp	r2, #0
 800c306:	f000 80c1 	beq.w	800c48c <_dtoa_r+0x894>
 800c30a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c30e:	9c08      	ldr	r4, [sp, #32]
 800c310:	9e00      	ldr	r6, [sp, #0]
 800c312:	9a00      	ldr	r2, [sp, #0]
 800c314:	441a      	add	r2, r3
 800c316:	9200      	str	r2, [sp, #0]
 800c318:	9a06      	ldr	r2, [sp, #24]
 800c31a:	2101      	movs	r1, #1
 800c31c:	441a      	add	r2, r3
 800c31e:	4648      	mov	r0, r9
 800c320:	9206      	str	r2, [sp, #24]
 800c322:	f000 fc77 	bl	800cc14 <__i2b>
 800c326:	4605      	mov	r5, r0
 800c328:	b166      	cbz	r6, 800c344 <_dtoa_r+0x74c>
 800c32a:	9b06      	ldr	r3, [sp, #24]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	dd09      	ble.n	800c344 <_dtoa_r+0x74c>
 800c330:	42b3      	cmp	r3, r6
 800c332:	9a00      	ldr	r2, [sp, #0]
 800c334:	bfa8      	it	ge
 800c336:	4633      	movge	r3, r6
 800c338:	1ad2      	subs	r2, r2, r3
 800c33a:	9200      	str	r2, [sp, #0]
 800c33c:	9a06      	ldr	r2, [sp, #24]
 800c33e:	1af6      	subs	r6, r6, r3
 800c340:	1ad3      	subs	r3, r2, r3
 800c342:	9306      	str	r3, [sp, #24]
 800c344:	9b08      	ldr	r3, [sp, #32]
 800c346:	b30b      	cbz	r3, 800c38c <_dtoa_r+0x794>
 800c348:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	f000 80c6 	beq.w	800c4dc <_dtoa_r+0x8e4>
 800c350:	2c00      	cmp	r4, #0
 800c352:	f000 80c0 	beq.w	800c4d6 <_dtoa_r+0x8de>
 800c356:	4629      	mov	r1, r5
 800c358:	4622      	mov	r2, r4
 800c35a:	4648      	mov	r0, r9
 800c35c:	f000 fd12 	bl	800cd84 <__pow5mult>
 800c360:	9a02      	ldr	r2, [sp, #8]
 800c362:	4601      	mov	r1, r0
 800c364:	4605      	mov	r5, r0
 800c366:	4648      	mov	r0, r9
 800c368:	f000 fc6a 	bl	800cc40 <__multiply>
 800c36c:	9902      	ldr	r1, [sp, #8]
 800c36e:	4680      	mov	r8, r0
 800c370:	4648      	mov	r0, r9
 800c372:	f000 fb51 	bl	800ca18 <_Bfree>
 800c376:	9b08      	ldr	r3, [sp, #32]
 800c378:	1b1b      	subs	r3, r3, r4
 800c37a:	9308      	str	r3, [sp, #32]
 800c37c:	f000 80b1 	beq.w	800c4e2 <_dtoa_r+0x8ea>
 800c380:	9a08      	ldr	r2, [sp, #32]
 800c382:	4641      	mov	r1, r8
 800c384:	4648      	mov	r0, r9
 800c386:	f000 fcfd 	bl	800cd84 <__pow5mult>
 800c38a:	9002      	str	r0, [sp, #8]
 800c38c:	2101      	movs	r1, #1
 800c38e:	4648      	mov	r0, r9
 800c390:	f000 fc40 	bl	800cc14 <__i2b>
 800c394:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c396:	4604      	mov	r4, r0
 800c398:	2b00      	cmp	r3, #0
 800c39a:	f000 81d8 	beq.w	800c74e <_dtoa_r+0xb56>
 800c39e:	461a      	mov	r2, r3
 800c3a0:	4601      	mov	r1, r0
 800c3a2:	4648      	mov	r0, r9
 800c3a4:	f000 fcee 	bl	800cd84 <__pow5mult>
 800c3a8:	9b07      	ldr	r3, [sp, #28]
 800c3aa:	2b01      	cmp	r3, #1
 800c3ac:	4604      	mov	r4, r0
 800c3ae:	f300 809f 	bgt.w	800c4f0 <_dtoa_r+0x8f8>
 800c3b2:	9b04      	ldr	r3, [sp, #16]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	f040 8097 	bne.w	800c4e8 <_dtoa_r+0x8f0>
 800c3ba:	9b05      	ldr	r3, [sp, #20]
 800c3bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	f040 8093 	bne.w	800c4ec <_dtoa_r+0x8f4>
 800c3c6:	9b05      	ldr	r3, [sp, #20]
 800c3c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c3cc:	0d1b      	lsrs	r3, r3, #20
 800c3ce:	051b      	lsls	r3, r3, #20
 800c3d0:	b133      	cbz	r3, 800c3e0 <_dtoa_r+0x7e8>
 800c3d2:	9b00      	ldr	r3, [sp, #0]
 800c3d4:	3301      	adds	r3, #1
 800c3d6:	9300      	str	r3, [sp, #0]
 800c3d8:	9b06      	ldr	r3, [sp, #24]
 800c3da:	3301      	adds	r3, #1
 800c3dc:	9306      	str	r3, [sp, #24]
 800c3de:	2301      	movs	r3, #1
 800c3e0:	9308      	str	r3, [sp, #32]
 800c3e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	f000 81b8 	beq.w	800c75a <_dtoa_r+0xb62>
 800c3ea:	6923      	ldr	r3, [r4, #16]
 800c3ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c3f0:	6918      	ldr	r0, [r3, #16]
 800c3f2:	f000 fbc3 	bl	800cb7c <__hi0bits>
 800c3f6:	f1c0 0020 	rsb	r0, r0, #32
 800c3fa:	9b06      	ldr	r3, [sp, #24]
 800c3fc:	4418      	add	r0, r3
 800c3fe:	f010 001f 	ands.w	r0, r0, #31
 800c402:	f000 8082 	beq.w	800c50a <_dtoa_r+0x912>
 800c406:	f1c0 0320 	rsb	r3, r0, #32
 800c40a:	2b04      	cmp	r3, #4
 800c40c:	dd73      	ble.n	800c4f6 <_dtoa_r+0x8fe>
 800c40e:	9b00      	ldr	r3, [sp, #0]
 800c410:	f1c0 001c 	rsb	r0, r0, #28
 800c414:	4403      	add	r3, r0
 800c416:	9300      	str	r3, [sp, #0]
 800c418:	9b06      	ldr	r3, [sp, #24]
 800c41a:	4403      	add	r3, r0
 800c41c:	4406      	add	r6, r0
 800c41e:	9306      	str	r3, [sp, #24]
 800c420:	9b00      	ldr	r3, [sp, #0]
 800c422:	2b00      	cmp	r3, #0
 800c424:	dd05      	ble.n	800c432 <_dtoa_r+0x83a>
 800c426:	9902      	ldr	r1, [sp, #8]
 800c428:	461a      	mov	r2, r3
 800c42a:	4648      	mov	r0, r9
 800c42c:	f000 fd04 	bl	800ce38 <__lshift>
 800c430:	9002      	str	r0, [sp, #8]
 800c432:	9b06      	ldr	r3, [sp, #24]
 800c434:	2b00      	cmp	r3, #0
 800c436:	dd05      	ble.n	800c444 <_dtoa_r+0x84c>
 800c438:	4621      	mov	r1, r4
 800c43a:	461a      	mov	r2, r3
 800c43c:	4648      	mov	r0, r9
 800c43e:	f000 fcfb 	bl	800ce38 <__lshift>
 800c442:	4604      	mov	r4, r0
 800c444:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c446:	2b00      	cmp	r3, #0
 800c448:	d061      	beq.n	800c50e <_dtoa_r+0x916>
 800c44a:	9802      	ldr	r0, [sp, #8]
 800c44c:	4621      	mov	r1, r4
 800c44e:	f000 fd5f 	bl	800cf10 <__mcmp>
 800c452:	2800      	cmp	r0, #0
 800c454:	da5b      	bge.n	800c50e <_dtoa_r+0x916>
 800c456:	2300      	movs	r3, #0
 800c458:	9902      	ldr	r1, [sp, #8]
 800c45a:	220a      	movs	r2, #10
 800c45c:	4648      	mov	r0, r9
 800c45e:	f000 fafd 	bl	800ca5c <__multadd>
 800c462:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c464:	9002      	str	r0, [sp, #8]
 800c466:	f107 38ff 	add.w	r8, r7, #4294967295
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	f000 8177 	beq.w	800c75e <_dtoa_r+0xb66>
 800c470:	4629      	mov	r1, r5
 800c472:	2300      	movs	r3, #0
 800c474:	220a      	movs	r2, #10
 800c476:	4648      	mov	r0, r9
 800c478:	f000 faf0 	bl	800ca5c <__multadd>
 800c47c:	f1bb 0f00 	cmp.w	fp, #0
 800c480:	4605      	mov	r5, r0
 800c482:	dc6f      	bgt.n	800c564 <_dtoa_r+0x96c>
 800c484:	9b07      	ldr	r3, [sp, #28]
 800c486:	2b02      	cmp	r3, #2
 800c488:	dc49      	bgt.n	800c51e <_dtoa_r+0x926>
 800c48a:	e06b      	b.n	800c564 <_dtoa_r+0x96c>
 800c48c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c48e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c492:	e73c      	b.n	800c30e <_dtoa_r+0x716>
 800c494:	3fe00000 	.word	0x3fe00000
 800c498:	40240000 	.word	0x40240000
 800c49c:	9b03      	ldr	r3, [sp, #12]
 800c49e:	1e5c      	subs	r4, r3, #1
 800c4a0:	9b08      	ldr	r3, [sp, #32]
 800c4a2:	42a3      	cmp	r3, r4
 800c4a4:	db09      	blt.n	800c4ba <_dtoa_r+0x8c2>
 800c4a6:	1b1c      	subs	r4, r3, r4
 800c4a8:	9b03      	ldr	r3, [sp, #12]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	f6bf af30 	bge.w	800c310 <_dtoa_r+0x718>
 800c4b0:	9b00      	ldr	r3, [sp, #0]
 800c4b2:	9a03      	ldr	r2, [sp, #12]
 800c4b4:	1a9e      	subs	r6, r3, r2
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	e72b      	b.n	800c312 <_dtoa_r+0x71a>
 800c4ba:	9b08      	ldr	r3, [sp, #32]
 800c4bc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c4be:	9408      	str	r4, [sp, #32]
 800c4c0:	1ae3      	subs	r3, r4, r3
 800c4c2:	441a      	add	r2, r3
 800c4c4:	9e00      	ldr	r6, [sp, #0]
 800c4c6:	9b03      	ldr	r3, [sp, #12]
 800c4c8:	920d      	str	r2, [sp, #52]	@ 0x34
 800c4ca:	2400      	movs	r4, #0
 800c4cc:	e721      	b.n	800c312 <_dtoa_r+0x71a>
 800c4ce:	9c08      	ldr	r4, [sp, #32]
 800c4d0:	9e00      	ldr	r6, [sp, #0]
 800c4d2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800c4d4:	e728      	b.n	800c328 <_dtoa_r+0x730>
 800c4d6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800c4da:	e751      	b.n	800c380 <_dtoa_r+0x788>
 800c4dc:	9a08      	ldr	r2, [sp, #32]
 800c4de:	9902      	ldr	r1, [sp, #8]
 800c4e0:	e750      	b.n	800c384 <_dtoa_r+0x78c>
 800c4e2:	f8cd 8008 	str.w	r8, [sp, #8]
 800c4e6:	e751      	b.n	800c38c <_dtoa_r+0x794>
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	e779      	b.n	800c3e0 <_dtoa_r+0x7e8>
 800c4ec:	9b04      	ldr	r3, [sp, #16]
 800c4ee:	e777      	b.n	800c3e0 <_dtoa_r+0x7e8>
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	9308      	str	r3, [sp, #32]
 800c4f4:	e779      	b.n	800c3ea <_dtoa_r+0x7f2>
 800c4f6:	d093      	beq.n	800c420 <_dtoa_r+0x828>
 800c4f8:	9a00      	ldr	r2, [sp, #0]
 800c4fa:	331c      	adds	r3, #28
 800c4fc:	441a      	add	r2, r3
 800c4fe:	9200      	str	r2, [sp, #0]
 800c500:	9a06      	ldr	r2, [sp, #24]
 800c502:	441a      	add	r2, r3
 800c504:	441e      	add	r6, r3
 800c506:	9206      	str	r2, [sp, #24]
 800c508:	e78a      	b.n	800c420 <_dtoa_r+0x828>
 800c50a:	4603      	mov	r3, r0
 800c50c:	e7f4      	b.n	800c4f8 <_dtoa_r+0x900>
 800c50e:	9b03      	ldr	r3, [sp, #12]
 800c510:	2b00      	cmp	r3, #0
 800c512:	46b8      	mov	r8, r7
 800c514:	dc20      	bgt.n	800c558 <_dtoa_r+0x960>
 800c516:	469b      	mov	fp, r3
 800c518:	9b07      	ldr	r3, [sp, #28]
 800c51a:	2b02      	cmp	r3, #2
 800c51c:	dd1e      	ble.n	800c55c <_dtoa_r+0x964>
 800c51e:	f1bb 0f00 	cmp.w	fp, #0
 800c522:	f47f adb1 	bne.w	800c088 <_dtoa_r+0x490>
 800c526:	4621      	mov	r1, r4
 800c528:	465b      	mov	r3, fp
 800c52a:	2205      	movs	r2, #5
 800c52c:	4648      	mov	r0, r9
 800c52e:	f000 fa95 	bl	800ca5c <__multadd>
 800c532:	4601      	mov	r1, r0
 800c534:	4604      	mov	r4, r0
 800c536:	9802      	ldr	r0, [sp, #8]
 800c538:	f000 fcea 	bl	800cf10 <__mcmp>
 800c53c:	2800      	cmp	r0, #0
 800c53e:	f77f ada3 	ble.w	800c088 <_dtoa_r+0x490>
 800c542:	4656      	mov	r6, sl
 800c544:	2331      	movs	r3, #49	@ 0x31
 800c546:	f806 3b01 	strb.w	r3, [r6], #1
 800c54a:	f108 0801 	add.w	r8, r8, #1
 800c54e:	e59f      	b.n	800c090 <_dtoa_r+0x498>
 800c550:	9c03      	ldr	r4, [sp, #12]
 800c552:	46b8      	mov	r8, r7
 800c554:	4625      	mov	r5, r4
 800c556:	e7f4      	b.n	800c542 <_dtoa_r+0x94a>
 800c558:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800c55c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c55e:	2b00      	cmp	r3, #0
 800c560:	f000 8101 	beq.w	800c766 <_dtoa_r+0xb6e>
 800c564:	2e00      	cmp	r6, #0
 800c566:	dd05      	ble.n	800c574 <_dtoa_r+0x97c>
 800c568:	4629      	mov	r1, r5
 800c56a:	4632      	mov	r2, r6
 800c56c:	4648      	mov	r0, r9
 800c56e:	f000 fc63 	bl	800ce38 <__lshift>
 800c572:	4605      	mov	r5, r0
 800c574:	9b08      	ldr	r3, [sp, #32]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d05c      	beq.n	800c634 <_dtoa_r+0xa3c>
 800c57a:	6869      	ldr	r1, [r5, #4]
 800c57c:	4648      	mov	r0, r9
 800c57e:	f000 fa0b 	bl	800c998 <_Balloc>
 800c582:	4606      	mov	r6, r0
 800c584:	b928      	cbnz	r0, 800c592 <_dtoa_r+0x99a>
 800c586:	4b82      	ldr	r3, [pc, #520]	@ (800c790 <_dtoa_r+0xb98>)
 800c588:	4602      	mov	r2, r0
 800c58a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c58e:	f7ff bb4a 	b.w	800bc26 <_dtoa_r+0x2e>
 800c592:	692a      	ldr	r2, [r5, #16]
 800c594:	3202      	adds	r2, #2
 800c596:	0092      	lsls	r2, r2, #2
 800c598:	f105 010c 	add.w	r1, r5, #12
 800c59c:	300c      	adds	r0, #12
 800c59e:	f7ff fa6e 	bl	800ba7e <memcpy>
 800c5a2:	2201      	movs	r2, #1
 800c5a4:	4631      	mov	r1, r6
 800c5a6:	4648      	mov	r0, r9
 800c5a8:	f000 fc46 	bl	800ce38 <__lshift>
 800c5ac:	f10a 0301 	add.w	r3, sl, #1
 800c5b0:	9300      	str	r3, [sp, #0]
 800c5b2:	eb0a 030b 	add.w	r3, sl, fp
 800c5b6:	9308      	str	r3, [sp, #32]
 800c5b8:	9b04      	ldr	r3, [sp, #16]
 800c5ba:	f003 0301 	and.w	r3, r3, #1
 800c5be:	462f      	mov	r7, r5
 800c5c0:	9306      	str	r3, [sp, #24]
 800c5c2:	4605      	mov	r5, r0
 800c5c4:	9b00      	ldr	r3, [sp, #0]
 800c5c6:	9802      	ldr	r0, [sp, #8]
 800c5c8:	4621      	mov	r1, r4
 800c5ca:	f103 3bff 	add.w	fp, r3, #4294967295
 800c5ce:	f7ff fa89 	bl	800bae4 <quorem>
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	3330      	adds	r3, #48	@ 0x30
 800c5d6:	9003      	str	r0, [sp, #12]
 800c5d8:	4639      	mov	r1, r7
 800c5da:	9802      	ldr	r0, [sp, #8]
 800c5dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5de:	f000 fc97 	bl	800cf10 <__mcmp>
 800c5e2:	462a      	mov	r2, r5
 800c5e4:	9004      	str	r0, [sp, #16]
 800c5e6:	4621      	mov	r1, r4
 800c5e8:	4648      	mov	r0, r9
 800c5ea:	f000 fcad 	bl	800cf48 <__mdiff>
 800c5ee:	68c2      	ldr	r2, [r0, #12]
 800c5f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5f2:	4606      	mov	r6, r0
 800c5f4:	bb02      	cbnz	r2, 800c638 <_dtoa_r+0xa40>
 800c5f6:	4601      	mov	r1, r0
 800c5f8:	9802      	ldr	r0, [sp, #8]
 800c5fa:	f000 fc89 	bl	800cf10 <__mcmp>
 800c5fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c600:	4602      	mov	r2, r0
 800c602:	4631      	mov	r1, r6
 800c604:	4648      	mov	r0, r9
 800c606:	920c      	str	r2, [sp, #48]	@ 0x30
 800c608:	9309      	str	r3, [sp, #36]	@ 0x24
 800c60a:	f000 fa05 	bl	800ca18 <_Bfree>
 800c60e:	9b07      	ldr	r3, [sp, #28]
 800c610:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c612:	9e00      	ldr	r6, [sp, #0]
 800c614:	ea42 0103 	orr.w	r1, r2, r3
 800c618:	9b06      	ldr	r3, [sp, #24]
 800c61a:	4319      	orrs	r1, r3
 800c61c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c61e:	d10d      	bne.n	800c63c <_dtoa_r+0xa44>
 800c620:	2b39      	cmp	r3, #57	@ 0x39
 800c622:	d027      	beq.n	800c674 <_dtoa_r+0xa7c>
 800c624:	9a04      	ldr	r2, [sp, #16]
 800c626:	2a00      	cmp	r2, #0
 800c628:	dd01      	ble.n	800c62e <_dtoa_r+0xa36>
 800c62a:	9b03      	ldr	r3, [sp, #12]
 800c62c:	3331      	adds	r3, #49	@ 0x31
 800c62e:	f88b 3000 	strb.w	r3, [fp]
 800c632:	e52e      	b.n	800c092 <_dtoa_r+0x49a>
 800c634:	4628      	mov	r0, r5
 800c636:	e7b9      	b.n	800c5ac <_dtoa_r+0x9b4>
 800c638:	2201      	movs	r2, #1
 800c63a:	e7e2      	b.n	800c602 <_dtoa_r+0xa0a>
 800c63c:	9904      	ldr	r1, [sp, #16]
 800c63e:	2900      	cmp	r1, #0
 800c640:	db04      	blt.n	800c64c <_dtoa_r+0xa54>
 800c642:	9807      	ldr	r0, [sp, #28]
 800c644:	4301      	orrs	r1, r0
 800c646:	9806      	ldr	r0, [sp, #24]
 800c648:	4301      	orrs	r1, r0
 800c64a:	d120      	bne.n	800c68e <_dtoa_r+0xa96>
 800c64c:	2a00      	cmp	r2, #0
 800c64e:	ddee      	ble.n	800c62e <_dtoa_r+0xa36>
 800c650:	9902      	ldr	r1, [sp, #8]
 800c652:	9300      	str	r3, [sp, #0]
 800c654:	2201      	movs	r2, #1
 800c656:	4648      	mov	r0, r9
 800c658:	f000 fbee 	bl	800ce38 <__lshift>
 800c65c:	4621      	mov	r1, r4
 800c65e:	9002      	str	r0, [sp, #8]
 800c660:	f000 fc56 	bl	800cf10 <__mcmp>
 800c664:	2800      	cmp	r0, #0
 800c666:	9b00      	ldr	r3, [sp, #0]
 800c668:	dc02      	bgt.n	800c670 <_dtoa_r+0xa78>
 800c66a:	d1e0      	bne.n	800c62e <_dtoa_r+0xa36>
 800c66c:	07da      	lsls	r2, r3, #31
 800c66e:	d5de      	bpl.n	800c62e <_dtoa_r+0xa36>
 800c670:	2b39      	cmp	r3, #57	@ 0x39
 800c672:	d1da      	bne.n	800c62a <_dtoa_r+0xa32>
 800c674:	2339      	movs	r3, #57	@ 0x39
 800c676:	f88b 3000 	strb.w	r3, [fp]
 800c67a:	4633      	mov	r3, r6
 800c67c:	461e      	mov	r6, r3
 800c67e:	3b01      	subs	r3, #1
 800c680:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c684:	2a39      	cmp	r2, #57	@ 0x39
 800c686:	d04e      	beq.n	800c726 <_dtoa_r+0xb2e>
 800c688:	3201      	adds	r2, #1
 800c68a:	701a      	strb	r2, [r3, #0]
 800c68c:	e501      	b.n	800c092 <_dtoa_r+0x49a>
 800c68e:	2a00      	cmp	r2, #0
 800c690:	dd03      	ble.n	800c69a <_dtoa_r+0xaa2>
 800c692:	2b39      	cmp	r3, #57	@ 0x39
 800c694:	d0ee      	beq.n	800c674 <_dtoa_r+0xa7c>
 800c696:	3301      	adds	r3, #1
 800c698:	e7c9      	b.n	800c62e <_dtoa_r+0xa36>
 800c69a:	9a00      	ldr	r2, [sp, #0]
 800c69c:	9908      	ldr	r1, [sp, #32]
 800c69e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c6a2:	428a      	cmp	r2, r1
 800c6a4:	d028      	beq.n	800c6f8 <_dtoa_r+0xb00>
 800c6a6:	9902      	ldr	r1, [sp, #8]
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	220a      	movs	r2, #10
 800c6ac:	4648      	mov	r0, r9
 800c6ae:	f000 f9d5 	bl	800ca5c <__multadd>
 800c6b2:	42af      	cmp	r7, r5
 800c6b4:	9002      	str	r0, [sp, #8]
 800c6b6:	f04f 0300 	mov.w	r3, #0
 800c6ba:	f04f 020a 	mov.w	r2, #10
 800c6be:	4639      	mov	r1, r7
 800c6c0:	4648      	mov	r0, r9
 800c6c2:	d107      	bne.n	800c6d4 <_dtoa_r+0xadc>
 800c6c4:	f000 f9ca 	bl	800ca5c <__multadd>
 800c6c8:	4607      	mov	r7, r0
 800c6ca:	4605      	mov	r5, r0
 800c6cc:	9b00      	ldr	r3, [sp, #0]
 800c6ce:	3301      	adds	r3, #1
 800c6d0:	9300      	str	r3, [sp, #0]
 800c6d2:	e777      	b.n	800c5c4 <_dtoa_r+0x9cc>
 800c6d4:	f000 f9c2 	bl	800ca5c <__multadd>
 800c6d8:	4629      	mov	r1, r5
 800c6da:	4607      	mov	r7, r0
 800c6dc:	2300      	movs	r3, #0
 800c6de:	220a      	movs	r2, #10
 800c6e0:	4648      	mov	r0, r9
 800c6e2:	f000 f9bb 	bl	800ca5c <__multadd>
 800c6e6:	4605      	mov	r5, r0
 800c6e8:	e7f0      	b.n	800c6cc <_dtoa_r+0xad4>
 800c6ea:	f1bb 0f00 	cmp.w	fp, #0
 800c6ee:	bfcc      	ite	gt
 800c6f0:	465e      	movgt	r6, fp
 800c6f2:	2601      	movle	r6, #1
 800c6f4:	4456      	add	r6, sl
 800c6f6:	2700      	movs	r7, #0
 800c6f8:	9902      	ldr	r1, [sp, #8]
 800c6fa:	9300      	str	r3, [sp, #0]
 800c6fc:	2201      	movs	r2, #1
 800c6fe:	4648      	mov	r0, r9
 800c700:	f000 fb9a 	bl	800ce38 <__lshift>
 800c704:	4621      	mov	r1, r4
 800c706:	9002      	str	r0, [sp, #8]
 800c708:	f000 fc02 	bl	800cf10 <__mcmp>
 800c70c:	2800      	cmp	r0, #0
 800c70e:	dcb4      	bgt.n	800c67a <_dtoa_r+0xa82>
 800c710:	d102      	bne.n	800c718 <_dtoa_r+0xb20>
 800c712:	9b00      	ldr	r3, [sp, #0]
 800c714:	07db      	lsls	r3, r3, #31
 800c716:	d4b0      	bmi.n	800c67a <_dtoa_r+0xa82>
 800c718:	4633      	mov	r3, r6
 800c71a:	461e      	mov	r6, r3
 800c71c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c720:	2a30      	cmp	r2, #48	@ 0x30
 800c722:	d0fa      	beq.n	800c71a <_dtoa_r+0xb22>
 800c724:	e4b5      	b.n	800c092 <_dtoa_r+0x49a>
 800c726:	459a      	cmp	sl, r3
 800c728:	d1a8      	bne.n	800c67c <_dtoa_r+0xa84>
 800c72a:	2331      	movs	r3, #49	@ 0x31
 800c72c:	f108 0801 	add.w	r8, r8, #1
 800c730:	f88a 3000 	strb.w	r3, [sl]
 800c734:	e4ad      	b.n	800c092 <_dtoa_r+0x49a>
 800c736:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c738:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800c794 <_dtoa_r+0xb9c>
 800c73c:	b11b      	cbz	r3, 800c746 <_dtoa_r+0xb4e>
 800c73e:	f10a 0308 	add.w	r3, sl, #8
 800c742:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c744:	6013      	str	r3, [r2, #0]
 800c746:	4650      	mov	r0, sl
 800c748:	b017      	add	sp, #92	@ 0x5c
 800c74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c74e:	9b07      	ldr	r3, [sp, #28]
 800c750:	2b01      	cmp	r3, #1
 800c752:	f77f ae2e 	ble.w	800c3b2 <_dtoa_r+0x7ba>
 800c756:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c758:	9308      	str	r3, [sp, #32]
 800c75a:	2001      	movs	r0, #1
 800c75c:	e64d      	b.n	800c3fa <_dtoa_r+0x802>
 800c75e:	f1bb 0f00 	cmp.w	fp, #0
 800c762:	f77f aed9 	ble.w	800c518 <_dtoa_r+0x920>
 800c766:	4656      	mov	r6, sl
 800c768:	9802      	ldr	r0, [sp, #8]
 800c76a:	4621      	mov	r1, r4
 800c76c:	f7ff f9ba 	bl	800bae4 <quorem>
 800c770:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800c774:	f806 3b01 	strb.w	r3, [r6], #1
 800c778:	eba6 020a 	sub.w	r2, r6, sl
 800c77c:	4593      	cmp	fp, r2
 800c77e:	ddb4      	ble.n	800c6ea <_dtoa_r+0xaf2>
 800c780:	9902      	ldr	r1, [sp, #8]
 800c782:	2300      	movs	r3, #0
 800c784:	220a      	movs	r2, #10
 800c786:	4648      	mov	r0, r9
 800c788:	f000 f968 	bl	800ca5c <__multadd>
 800c78c:	9002      	str	r0, [sp, #8]
 800c78e:	e7eb      	b.n	800c768 <_dtoa_r+0xb70>
 800c790:	080103f4 	.word	0x080103f4
 800c794:	0801038f 	.word	0x0801038f

0800c798 <_free_r>:
 800c798:	b538      	push	{r3, r4, r5, lr}
 800c79a:	4605      	mov	r5, r0
 800c79c:	2900      	cmp	r1, #0
 800c79e:	d041      	beq.n	800c824 <_free_r+0x8c>
 800c7a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7a4:	1f0c      	subs	r4, r1, #4
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	bfb8      	it	lt
 800c7aa:	18e4      	addlt	r4, r4, r3
 800c7ac:	f000 f8e8 	bl	800c980 <__malloc_lock>
 800c7b0:	4a1d      	ldr	r2, [pc, #116]	@ (800c828 <_free_r+0x90>)
 800c7b2:	6813      	ldr	r3, [r2, #0]
 800c7b4:	b933      	cbnz	r3, 800c7c4 <_free_r+0x2c>
 800c7b6:	6063      	str	r3, [r4, #4]
 800c7b8:	6014      	str	r4, [r2, #0]
 800c7ba:	4628      	mov	r0, r5
 800c7bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c7c0:	f000 b8e4 	b.w	800c98c <__malloc_unlock>
 800c7c4:	42a3      	cmp	r3, r4
 800c7c6:	d908      	bls.n	800c7da <_free_r+0x42>
 800c7c8:	6820      	ldr	r0, [r4, #0]
 800c7ca:	1821      	adds	r1, r4, r0
 800c7cc:	428b      	cmp	r3, r1
 800c7ce:	bf01      	itttt	eq
 800c7d0:	6819      	ldreq	r1, [r3, #0]
 800c7d2:	685b      	ldreq	r3, [r3, #4]
 800c7d4:	1809      	addeq	r1, r1, r0
 800c7d6:	6021      	streq	r1, [r4, #0]
 800c7d8:	e7ed      	b.n	800c7b6 <_free_r+0x1e>
 800c7da:	461a      	mov	r2, r3
 800c7dc:	685b      	ldr	r3, [r3, #4]
 800c7de:	b10b      	cbz	r3, 800c7e4 <_free_r+0x4c>
 800c7e0:	42a3      	cmp	r3, r4
 800c7e2:	d9fa      	bls.n	800c7da <_free_r+0x42>
 800c7e4:	6811      	ldr	r1, [r2, #0]
 800c7e6:	1850      	adds	r0, r2, r1
 800c7e8:	42a0      	cmp	r0, r4
 800c7ea:	d10b      	bne.n	800c804 <_free_r+0x6c>
 800c7ec:	6820      	ldr	r0, [r4, #0]
 800c7ee:	4401      	add	r1, r0
 800c7f0:	1850      	adds	r0, r2, r1
 800c7f2:	4283      	cmp	r3, r0
 800c7f4:	6011      	str	r1, [r2, #0]
 800c7f6:	d1e0      	bne.n	800c7ba <_free_r+0x22>
 800c7f8:	6818      	ldr	r0, [r3, #0]
 800c7fa:	685b      	ldr	r3, [r3, #4]
 800c7fc:	6053      	str	r3, [r2, #4]
 800c7fe:	4408      	add	r0, r1
 800c800:	6010      	str	r0, [r2, #0]
 800c802:	e7da      	b.n	800c7ba <_free_r+0x22>
 800c804:	d902      	bls.n	800c80c <_free_r+0x74>
 800c806:	230c      	movs	r3, #12
 800c808:	602b      	str	r3, [r5, #0]
 800c80a:	e7d6      	b.n	800c7ba <_free_r+0x22>
 800c80c:	6820      	ldr	r0, [r4, #0]
 800c80e:	1821      	adds	r1, r4, r0
 800c810:	428b      	cmp	r3, r1
 800c812:	bf04      	itt	eq
 800c814:	6819      	ldreq	r1, [r3, #0]
 800c816:	685b      	ldreq	r3, [r3, #4]
 800c818:	6063      	str	r3, [r4, #4]
 800c81a:	bf04      	itt	eq
 800c81c:	1809      	addeq	r1, r1, r0
 800c81e:	6021      	streq	r1, [r4, #0]
 800c820:	6054      	str	r4, [r2, #4]
 800c822:	e7ca      	b.n	800c7ba <_free_r+0x22>
 800c824:	bd38      	pop	{r3, r4, r5, pc}
 800c826:	bf00      	nop
 800c828:	20004f60 	.word	0x20004f60

0800c82c <malloc>:
 800c82c:	4b02      	ldr	r3, [pc, #8]	@ (800c838 <malloc+0xc>)
 800c82e:	4601      	mov	r1, r0
 800c830:	6818      	ldr	r0, [r3, #0]
 800c832:	f000 b825 	b.w	800c880 <_malloc_r>
 800c836:	bf00      	nop
 800c838:	20000064 	.word	0x20000064

0800c83c <sbrk_aligned>:
 800c83c:	b570      	push	{r4, r5, r6, lr}
 800c83e:	4e0f      	ldr	r6, [pc, #60]	@ (800c87c <sbrk_aligned+0x40>)
 800c840:	460c      	mov	r4, r1
 800c842:	6831      	ldr	r1, [r6, #0]
 800c844:	4605      	mov	r5, r0
 800c846:	b911      	cbnz	r1, 800c84e <sbrk_aligned+0x12>
 800c848:	f001 ffdc 	bl	800e804 <_sbrk_r>
 800c84c:	6030      	str	r0, [r6, #0]
 800c84e:	4621      	mov	r1, r4
 800c850:	4628      	mov	r0, r5
 800c852:	f001 ffd7 	bl	800e804 <_sbrk_r>
 800c856:	1c43      	adds	r3, r0, #1
 800c858:	d103      	bne.n	800c862 <sbrk_aligned+0x26>
 800c85a:	f04f 34ff 	mov.w	r4, #4294967295
 800c85e:	4620      	mov	r0, r4
 800c860:	bd70      	pop	{r4, r5, r6, pc}
 800c862:	1cc4      	adds	r4, r0, #3
 800c864:	f024 0403 	bic.w	r4, r4, #3
 800c868:	42a0      	cmp	r0, r4
 800c86a:	d0f8      	beq.n	800c85e <sbrk_aligned+0x22>
 800c86c:	1a21      	subs	r1, r4, r0
 800c86e:	4628      	mov	r0, r5
 800c870:	f001 ffc8 	bl	800e804 <_sbrk_r>
 800c874:	3001      	adds	r0, #1
 800c876:	d1f2      	bne.n	800c85e <sbrk_aligned+0x22>
 800c878:	e7ef      	b.n	800c85a <sbrk_aligned+0x1e>
 800c87a:	bf00      	nop
 800c87c:	20004f5c 	.word	0x20004f5c

0800c880 <_malloc_r>:
 800c880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c884:	1ccd      	adds	r5, r1, #3
 800c886:	f025 0503 	bic.w	r5, r5, #3
 800c88a:	3508      	adds	r5, #8
 800c88c:	2d0c      	cmp	r5, #12
 800c88e:	bf38      	it	cc
 800c890:	250c      	movcc	r5, #12
 800c892:	2d00      	cmp	r5, #0
 800c894:	4606      	mov	r6, r0
 800c896:	db01      	blt.n	800c89c <_malloc_r+0x1c>
 800c898:	42a9      	cmp	r1, r5
 800c89a:	d904      	bls.n	800c8a6 <_malloc_r+0x26>
 800c89c:	230c      	movs	r3, #12
 800c89e:	6033      	str	r3, [r6, #0]
 800c8a0:	2000      	movs	r0, #0
 800c8a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c97c <_malloc_r+0xfc>
 800c8aa:	f000 f869 	bl	800c980 <__malloc_lock>
 800c8ae:	f8d8 3000 	ldr.w	r3, [r8]
 800c8b2:	461c      	mov	r4, r3
 800c8b4:	bb44      	cbnz	r4, 800c908 <_malloc_r+0x88>
 800c8b6:	4629      	mov	r1, r5
 800c8b8:	4630      	mov	r0, r6
 800c8ba:	f7ff ffbf 	bl	800c83c <sbrk_aligned>
 800c8be:	1c43      	adds	r3, r0, #1
 800c8c0:	4604      	mov	r4, r0
 800c8c2:	d158      	bne.n	800c976 <_malloc_r+0xf6>
 800c8c4:	f8d8 4000 	ldr.w	r4, [r8]
 800c8c8:	4627      	mov	r7, r4
 800c8ca:	2f00      	cmp	r7, #0
 800c8cc:	d143      	bne.n	800c956 <_malloc_r+0xd6>
 800c8ce:	2c00      	cmp	r4, #0
 800c8d0:	d04b      	beq.n	800c96a <_malloc_r+0xea>
 800c8d2:	6823      	ldr	r3, [r4, #0]
 800c8d4:	4639      	mov	r1, r7
 800c8d6:	4630      	mov	r0, r6
 800c8d8:	eb04 0903 	add.w	r9, r4, r3
 800c8dc:	f001 ff92 	bl	800e804 <_sbrk_r>
 800c8e0:	4581      	cmp	r9, r0
 800c8e2:	d142      	bne.n	800c96a <_malloc_r+0xea>
 800c8e4:	6821      	ldr	r1, [r4, #0]
 800c8e6:	1a6d      	subs	r5, r5, r1
 800c8e8:	4629      	mov	r1, r5
 800c8ea:	4630      	mov	r0, r6
 800c8ec:	f7ff ffa6 	bl	800c83c <sbrk_aligned>
 800c8f0:	3001      	adds	r0, #1
 800c8f2:	d03a      	beq.n	800c96a <_malloc_r+0xea>
 800c8f4:	6823      	ldr	r3, [r4, #0]
 800c8f6:	442b      	add	r3, r5
 800c8f8:	6023      	str	r3, [r4, #0]
 800c8fa:	f8d8 3000 	ldr.w	r3, [r8]
 800c8fe:	685a      	ldr	r2, [r3, #4]
 800c900:	bb62      	cbnz	r2, 800c95c <_malloc_r+0xdc>
 800c902:	f8c8 7000 	str.w	r7, [r8]
 800c906:	e00f      	b.n	800c928 <_malloc_r+0xa8>
 800c908:	6822      	ldr	r2, [r4, #0]
 800c90a:	1b52      	subs	r2, r2, r5
 800c90c:	d420      	bmi.n	800c950 <_malloc_r+0xd0>
 800c90e:	2a0b      	cmp	r2, #11
 800c910:	d917      	bls.n	800c942 <_malloc_r+0xc2>
 800c912:	1961      	adds	r1, r4, r5
 800c914:	42a3      	cmp	r3, r4
 800c916:	6025      	str	r5, [r4, #0]
 800c918:	bf18      	it	ne
 800c91a:	6059      	strne	r1, [r3, #4]
 800c91c:	6863      	ldr	r3, [r4, #4]
 800c91e:	bf08      	it	eq
 800c920:	f8c8 1000 	streq.w	r1, [r8]
 800c924:	5162      	str	r2, [r4, r5]
 800c926:	604b      	str	r3, [r1, #4]
 800c928:	4630      	mov	r0, r6
 800c92a:	f000 f82f 	bl	800c98c <__malloc_unlock>
 800c92e:	f104 000b 	add.w	r0, r4, #11
 800c932:	1d23      	adds	r3, r4, #4
 800c934:	f020 0007 	bic.w	r0, r0, #7
 800c938:	1ac2      	subs	r2, r0, r3
 800c93a:	bf1c      	itt	ne
 800c93c:	1a1b      	subne	r3, r3, r0
 800c93e:	50a3      	strne	r3, [r4, r2]
 800c940:	e7af      	b.n	800c8a2 <_malloc_r+0x22>
 800c942:	6862      	ldr	r2, [r4, #4]
 800c944:	42a3      	cmp	r3, r4
 800c946:	bf0c      	ite	eq
 800c948:	f8c8 2000 	streq.w	r2, [r8]
 800c94c:	605a      	strne	r2, [r3, #4]
 800c94e:	e7eb      	b.n	800c928 <_malloc_r+0xa8>
 800c950:	4623      	mov	r3, r4
 800c952:	6864      	ldr	r4, [r4, #4]
 800c954:	e7ae      	b.n	800c8b4 <_malloc_r+0x34>
 800c956:	463c      	mov	r4, r7
 800c958:	687f      	ldr	r7, [r7, #4]
 800c95a:	e7b6      	b.n	800c8ca <_malloc_r+0x4a>
 800c95c:	461a      	mov	r2, r3
 800c95e:	685b      	ldr	r3, [r3, #4]
 800c960:	42a3      	cmp	r3, r4
 800c962:	d1fb      	bne.n	800c95c <_malloc_r+0xdc>
 800c964:	2300      	movs	r3, #0
 800c966:	6053      	str	r3, [r2, #4]
 800c968:	e7de      	b.n	800c928 <_malloc_r+0xa8>
 800c96a:	230c      	movs	r3, #12
 800c96c:	6033      	str	r3, [r6, #0]
 800c96e:	4630      	mov	r0, r6
 800c970:	f000 f80c 	bl	800c98c <__malloc_unlock>
 800c974:	e794      	b.n	800c8a0 <_malloc_r+0x20>
 800c976:	6005      	str	r5, [r0, #0]
 800c978:	e7d6      	b.n	800c928 <_malloc_r+0xa8>
 800c97a:	bf00      	nop
 800c97c:	20004f60 	.word	0x20004f60

0800c980 <__malloc_lock>:
 800c980:	4801      	ldr	r0, [pc, #4]	@ (800c988 <__malloc_lock+0x8>)
 800c982:	f7ff b87a 	b.w	800ba7a <__retarget_lock_acquire_recursive>
 800c986:	bf00      	nop
 800c988:	20004f58 	.word	0x20004f58

0800c98c <__malloc_unlock>:
 800c98c:	4801      	ldr	r0, [pc, #4]	@ (800c994 <__malloc_unlock+0x8>)
 800c98e:	f7ff b875 	b.w	800ba7c <__retarget_lock_release_recursive>
 800c992:	bf00      	nop
 800c994:	20004f58 	.word	0x20004f58

0800c998 <_Balloc>:
 800c998:	b570      	push	{r4, r5, r6, lr}
 800c99a:	69c6      	ldr	r6, [r0, #28]
 800c99c:	4604      	mov	r4, r0
 800c99e:	460d      	mov	r5, r1
 800c9a0:	b976      	cbnz	r6, 800c9c0 <_Balloc+0x28>
 800c9a2:	2010      	movs	r0, #16
 800c9a4:	f7ff ff42 	bl	800c82c <malloc>
 800c9a8:	4602      	mov	r2, r0
 800c9aa:	61e0      	str	r0, [r4, #28]
 800c9ac:	b920      	cbnz	r0, 800c9b8 <_Balloc+0x20>
 800c9ae:	4b18      	ldr	r3, [pc, #96]	@ (800ca10 <_Balloc+0x78>)
 800c9b0:	4818      	ldr	r0, [pc, #96]	@ (800ca14 <_Balloc+0x7c>)
 800c9b2:	216b      	movs	r1, #107	@ 0x6b
 800c9b4:	f7ff f878 	bl	800baa8 <__assert_func>
 800c9b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c9bc:	6006      	str	r6, [r0, #0]
 800c9be:	60c6      	str	r6, [r0, #12]
 800c9c0:	69e6      	ldr	r6, [r4, #28]
 800c9c2:	68f3      	ldr	r3, [r6, #12]
 800c9c4:	b183      	cbz	r3, 800c9e8 <_Balloc+0x50>
 800c9c6:	69e3      	ldr	r3, [r4, #28]
 800c9c8:	68db      	ldr	r3, [r3, #12]
 800c9ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c9ce:	b9b8      	cbnz	r0, 800ca00 <_Balloc+0x68>
 800c9d0:	2101      	movs	r1, #1
 800c9d2:	fa01 f605 	lsl.w	r6, r1, r5
 800c9d6:	1d72      	adds	r2, r6, #5
 800c9d8:	0092      	lsls	r2, r2, #2
 800c9da:	4620      	mov	r0, r4
 800c9dc:	f001 ff33 	bl	800e846 <_calloc_r>
 800c9e0:	b160      	cbz	r0, 800c9fc <_Balloc+0x64>
 800c9e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c9e6:	e00e      	b.n	800ca06 <_Balloc+0x6e>
 800c9e8:	2221      	movs	r2, #33	@ 0x21
 800c9ea:	2104      	movs	r1, #4
 800c9ec:	4620      	mov	r0, r4
 800c9ee:	f001 ff2a 	bl	800e846 <_calloc_r>
 800c9f2:	69e3      	ldr	r3, [r4, #28]
 800c9f4:	60f0      	str	r0, [r6, #12]
 800c9f6:	68db      	ldr	r3, [r3, #12]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d1e4      	bne.n	800c9c6 <_Balloc+0x2e>
 800c9fc:	2000      	movs	r0, #0
 800c9fe:	bd70      	pop	{r4, r5, r6, pc}
 800ca00:	6802      	ldr	r2, [r0, #0]
 800ca02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ca06:	2300      	movs	r3, #0
 800ca08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ca0c:	e7f7      	b.n	800c9fe <_Balloc+0x66>
 800ca0e:	bf00      	nop
 800ca10:	080102ab 	.word	0x080102ab
 800ca14:	08010405 	.word	0x08010405

0800ca18 <_Bfree>:
 800ca18:	b570      	push	{r4, r5, r6, lr}
 800ca1a:	69c6      	ldr	r6, [r0, #28]
 800ca1c:	4605      	mov	r5, r0
 800ca1e:	460c      	mov	r4, r1
 800ca20:	b976      	cbnz	r6, 800ca40 <_Bfree+0x28>
 800ca22:	2010      	movs	r0, #16
 800ca24:	f7ff ff02 	bl	800c82c <malloc>
 800ca28:	4602      	mov	r2, r0
 800ca2a:	61e8      	str	r0, [r5, #28]
 800ca2c:	b920      	cbnz	r0, 800ca38 <_Bfree+0x20>
 800ca2e:	4b09      	ldr	r3, [pc, #36]	@ (800ca54 <_Bfree+0x3c>)
 800ca30:	4809      	ldr	r0, [pc, #36]	@ (800ca58 <_Bfree+0x40>)
 800ca32:	218f      	movs	r1, #143	@ 0x8f
 800ca34:	f7ff f838 	bl	800baa8 <__assert_func>
 800ca38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ca3c:	6006      	str	r6, [r0, #0]
 800ca3e:	60c6      	str	r6, [r0, #12]
 800ca40:	b13c      	cbz	r4, 800ca52 <_Bfree+0x3a>
 800ca42:	69eb      	ldr	r3, [r5, #28]
 800ca44:	6862      	ldr	r2, [r4, #4]
 800ca46:	68db      	ldr	r3, [r3, #12]
 800ca48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ca4c:	6021      	str	r1, [r4, #0]
 800ca4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ca52:	bd70      	pop	{r4, r5, r6, pc}
 800ca54:	080102ab 	.word	0x080102ab
 800ca58:	08010405 	.word	0x08010405

0800ca5c <__multadd>:
 800ca5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca60:	690d      	ldr	r5, [r1, #16]
 800ca62:	4607      	mov	r7, r0
 800ca64:	460c      	mov	r4, r1
 800ca66:	461e      	mov	r6, r3
 800ca68:	f101 0c14 	add.w	ip, r1, #20
 800ca6c:	2000      	movs	r0, #0
 800ca6e:	f8dc 3000 	ldr.w	r3, [ip]
 800ca72:	b299      	uxth	r1, r3
 800ca74:	fb02 6101 	mla	r1, r2, r1, r6
 800ca78:	0c1e      	lsrs	r6, r3, #16
 800ca7a:	0c0b      	lsrs	r3, r1, #16
 800ca7c:	fb02 3306 	mla	r3, r2, r6, r3
 800ca80:	b289      	uxth	r1, r1
 800ca82:	3001      	adds	r0, #1
 800ca84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ca88:	4285      	cmp	r5, r0
 800ca8a:	f84c 1b04 	str.w	r1, [ip], #4
 800ca8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ca92:	dcec      	bgt.n	800ca6e <__multadd+0x12>
 800ca94:	b30e      	cbz	r6, 800cada <__multadd+0x7e>
 800ca96:	68a3      	ldr	r3, [r4, #8]
 800ca98:	42ab      	cmp	r3, r5
 800ca9a:	dc19      	bgt.n	800cad0 <__multadd+0x74>
 800ca9c:	6861      	ldr	r1, [r4, #4]
 800ca9e:	4638      	mov	r0, r7
 800caa0:	3101      	adds	r1, #1
 800caa2:	f7ff ff79 	bl	800c998 <_Balloc>
 800caa6:	4680      	mov	r8, r0
 800caa8:	b928      	cbnz	r0, 800cab6 <__multadd+0x5a>
 800caaa:	4602      	mov	r2, r0
 800caac:	4b0c      	ldr	r3, [pc, #48]	@ (800cae0 <__multadd+0x84>)
 800caae:	480d      	ldr	r0, [pc, #52]	@ (800cae4 <__multadd+0x88>)
 800cab0:	21ba      	movs	r1, #186	@ 0xba
 800cab2:	f7fe fff9 	bl	800baa8 <__assert_func>
 800cab6:	6922      	ldr	r2, [r4, #16]
 800cab8:	3202      	adds	r2, #2
 800caba:	f104 010c 	add.w	r1, r4, #12
 800cabe:	0092      	lsls	r2, r2, #2
 800cac0:	300c      	adds	r0, #12
 800cac2:	f7fe ffdc 	bl	800ba7e <memcpy>
 800cac6:	4621      	mov	r1, r4
 800cac8:	4638      	mov	r0, r7
 800caca:	f7ff ffa5 	bl	800ca18 <_Bfree>
 800cace:	4644      	mov	r4, r8
 800cad0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cad4:	3501      	adds	r5, #1
 800cad6:	615e      	str	r6, [r3, #20]
 800cad8:	6125      	str	r5, [r4, #16]
 800cada:	4620      	mov	r0, r4
 800cadc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cae0:	080103f4 	.word	0x080103f4
 800cae4:	08010405 	.word	0x08010405

0800cae8 <__s2b>:
 800cae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800caec:	460c      	mov	r4, r1
 800caee:	4615      	mov	r5, r2
 800caf0:	461f      	mov	r7, r3
 800caf2:	2209      	movs	r2, #9
 800caf4:	3308      	adds	r3, #8
 800caf6:	4606      	mov	r6, r0
 800caf8:	fb93 f3f2 	sdiv	r3, r3, r2
 800cafc:	2100      	movs	r1, #0
 800cafe:	2201      	movs	r2, #1
 800cb00:	429a      	cmp	r2, r3
 800cb02:	db09      	blt.n	800cb18 <__s2b+0x30>
 800cb04:	4630      	mov	r0, r6
 800cb06:	f7ff ff47 	bl	800c998 <_Balloc>
 800cb0a:	b940      	cbnz	r0, 800cb1e <__s2b+0x36>
 800cb0c:	4602      	mov	r2, r0
 800cb0e:	4b19      	ldr	r3, [pc, #100]	@ (800cb74 <__s2b+0x8c>)
 800cb10:	4819      	ldr	r0, [pc, #100]	@ (800cb78 <__s2b+0x90>)
 800cb12:	21d3      	movs	r1, #211	@ 0xd3
 800cb14:	f7fe ffc8 	bl	800baa8 <__assert_func>
 800cb18:	0052      	lsls	r2, r2, #1
 800cb1a:	3101      	adds	r1, #1
 800cb1c:	e7f0      	b.n	800cb00 <__s2b+0x18>
 800cb1e:	9b08      	ldr	r3, [sp, #32]
 800cb20:	6143      	str	r3, [r0, #20]
 800cb22:	2d09      	cmp	r5, #9
 800cb24:	f04f 0301 	mov.w	r3, #1
 800cb28:	6103      	str	r3, [r0, #16]
 800cb2a:	dd16      	ble.n	800cb5a <__s2b+0x72>
 800cb2c:	f104 0909 	add.w	r9, r4, #9
 800cb30:	46c8      	mov	r8, r9
 800cb32:	442c      	add	r4, r5
 800cb34:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cb38:	4601      	mov	r1, r0
 800cb3a:	3b30      	subs	r3, #48	@ 0x30
 800cb3c:	220a      	movs	r2, #10
 800cb3e:	4630      	mov	r0, r6
 800cb40:	f7ff ff8c 	bl	800ca5c <__multadd>
 800cb44:	45a0      	cmp	r8, r4
 800cb46:	d1f5      	bne.n	800cb34 <__s2b+0x4c>
 800cb48:	f1a5 0408 	sub.w	r4, r5, #8
 800cb4c:	444c      	add	r4, r9
 800cb4e:	1b2d      	subs	r5, r5, r4
 800cb50:	1963      	adds	r3, r4, r5
 800cb52:	42bb      	cmp	r3, r7
 800cb54:	db04      	blt.n	800cb60 <__s2b+0x78>
 800cb56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb5a:	340a      	adds	r4, #10
 800cb5c:	2509      	movs	r5, #9
 800cb5e:	e7f6      	b.n	800cb4e <__s2b+0x66>
 800cb60:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cb64:	4601      	mov	r1, r0
 800cb66:	3b30      	subs	r3, #48	@ 0x30
 800cb68:	220a      	movs	r2, #10
 800cb6a:	4630      	mov	r0, r6
 800cb6c:	f7ff ff76 	bl	800ca5c <__multadd>
 800cb70:	e7ee      	b.n	800cb50 <__s2b+0x68>
 800cb72:	bf00      	nop
 800cb74:	080103f4 	.word	0x080103f4
 800cb78:	08010405 	.word	0x08010405

0800cb7c <__hi0bits>:
 800cb7c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cb80:	4603      	mov	r3, r0
 800cb82:	bf36      	itet	cc
 800cb84:	0403      	lslcc	r3, r0, #16
 800cb86:	2000      	movcs	r0, #0
 800cb88:	2010      	movcc	r0, #16
 800cb8a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cb8e:	bf3c      	itt	cc
 800cb90:	021b      	lslcc	r3, r3, #8
 800cb92:	3008      	addcc	r0, #8
 800cb94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cb98:	bf3c      	itt	cc
 800cb9a:	011b      	lslcc	r3, r3, #4
 800cb9c:	3004      	addcc	r0, #4
 800cb9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cba2:	bf3c      	itt	cc
 800cba4:	009b      	lslcc	r3, r3, #2
 800cba6:	3002      	addcc	r0, #2
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	db05      	blt.n	800cbb8 <__hi0bits+0x3c>
 800cbac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cbb0:	f100 0001 	add.w	r0, r0, #1
 800cbb4:	bf08      	it	eq
 800cbb6:	2020      	moveq	r0, #32
 800cbb8:	4770      	bx	lr

0800cbba <__lo0bits>:
 800cbba:	6803      	ldr	r3, [r0, #0]
 800cbbc:	4602      	mov	r2, r0
 800cbbe:	f013 0007 	ands.w	r0, r3, #7
 800cbc2:	d00b      	beq.n	800cbdc <__lo0bits+0x22>
 800cbc4:	07d9      	lsls	r1, r3, #31
 800cbc6:	d421      	bmi.n	800cc0c <__lo0bits+0x52>
 800cbc8:	0798      	lsls	r0, r3, #30
 800cbca:	bf49      	itett	mi
 800cbcc:	085b      	lsrmi	r3, r3, #1
 800cbce:	089b      	lsrpl	r3, r3, #2
 800cbd0:	2001      	movmi	r0, #1
 800cbd2:	6013      	strmi	r3, [r2, #0]
 800cbd4:	bf5c      	itt	pl
 800cbd6:	6013      	strpl	r3, [r2, #0]
 800cbd8:	2002      	movpl	r0, #2
 800cbda:	4770      	bx	lr
 800cbdc:	b299      	uxth	r1, r3
 800cbde:	b909      	cbnz	r1, 800cbe4 <__lo0bits+0x2a>
 800cbe0:	0c1b      	lsrs	r3, r3, #16
 800cbe2:	2010      	movs	r0, #16
 800cbe4:	b2d9      	uxtb	r1, r3
 800cbe6:	b909      	cbnz	r1, 800cbec <__lo0bits+0x32>
 800cbe8:	3008      	adds	r0, #8
 800cbea:	0a1b      	lsrs	r3, r3, #8
 800cbec:	0719      	lsls	r1, r3, #28
 800cbee:	bf04      	itt	eq
 800cbf0:	091b      	lsreq	r3, r3, #4
 800cbf2:	3004      	addeq	r0, #4
 800cbf4:	0799      	lsls	r1, r3, #30
 800cbf6:	bf04      	itt	eq
 800cbf8:	089b      	lsreq	r3, r3, #2
 800cbfa:	3002      	addeq	r0, #2
 800cbfc:	07d9      	lsls	r1, r3, #31
 800cbfe:	d403      	bmi.n	800cc08 <__lo0bits+0x4e>
 800cc00:	085b      	lsrs	r3, r3, #1
 800cc02:	f100 0001 	add.w	r0, r0, #1
 800cc06:	d003      	beq.n	800cc10 <__lo0bits+0x56>
 800cc08:	6013      	str	r3, [r2, #0]
 800cc0a:	4770      	bx	lr
 800cc0c:	2000      	movs	r0, #0
 800cc0e:	4770      	bx	lr
 800cc10:	2020      	movs	r0, #32
 800cc12:	4770      	bx	lr

0800cc14 <__i2b>:
 800cc14:	b510      	push	{r4, lr}
 800cc16:	460c      	mov	r4, r1
 800cc18:	2101      	movs	r1, #1
 800cc1a:	f7ff febd 	bl	800c998 <_Balloc>
 800cc1e:	4602      	mov	r2, r0
 800cc20:	b928      	cbnz	r0, 800cc2e <__i2b+0x1a>
 800cc22:	4b05      	ldr	r3, [pc, #20]	@ (800cc38 <__i2b+0x24>)
 800cc24:	4805      	ldr	r0, [pc, #20]	@ (800cc3c <__i2b+0x28>)
 800cc26:	f240 1145 	movw	r1, #325	@ 0x145
 800cc2a:	f7fe ff3d 	bl	800baa8 <__assert_func>
 800cc2e:	2301      	movs	r3, #1
 800cc30:	6144      	str	r4, [r0, #20]
 800cc32:	6103      	str	r3, [r0, #16]
 800cc34:	bd10      	pop	{r4, pc}
 800cc36:	bf00      	nop
 800cc38:	080103f4 	.word	0x080103f4
 800cc3c:	08010405 	.word	0x08010405

0800cc40 <__multiply>:
 800cc40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc44:	4617      	mov	r7, r2
 800cc46:	690a      	ldr	r2, [r1, #16]
 800cc48:	693b      	ldr	r3, [r7, #16]
 800cc4a:	429a      	cmp	r2, r3
 800cc4c:	bfa8      	it	ge
 800cc4e:	463b      	movge	r3, r7
 800cc50:	4689      	mov	r9, r1
 800cc52:	bfa4      	itt	ge
 800cc54:	460f      	movge	r7, r1
 800cc56:	4699      	movge	r9, r3
 800cc58:	693d      	ldr	r5, [r7, #16]
 800cc5a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cc5e:	68bb      	ldr	r3, [r7, #8]
 800cc60:	6879      	ldr	r1, [r7, #4]
 800cc62:	eb05 060a 	add.w	r6, r5, sl
 800cc66:	42b3      	cmp	r3, r6
 800cc68:	b085      	sub	sp, #20
 800cc6a:	bfb8      	it	lt
 800cc6c:	3101      	addlt	r1, #1
 800cc6e:	f7ff fe93 	bl	800c998 <_Balloc>
 800cc72:	b930      	cbnz	r0, 800cc82 <__multiply+0x42>
 800cc74:	4602      	mov	r2, r0
 800cc76:	4b41      	ldr	r3, [pc, #260]	@ (800cd7c <__multiply+0x13c>)
 800cc78:	4841      	ldr	r0, [pc, #260]	@ (800cd80 <__multiply+0x140>)
 800cc7a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cc7e:	f7fe ff13 	bl	800baa8 <__assert_func>
 800cc82:	f100 0414 	add.w	r4, r0, #20
 800cc86:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800cc8a:	4623      	mov	r3, r4
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	4573      	cmp	r3, lr
 800cc90:	d320      	bcc.n	800ccd4 <__multiply+0x94>
 800cc92:	f107 0814 	add.w	r8, r7, #20
 800cc96:	f109 0114 	add.w	r1, r9, #20
 800cc9a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800cc9e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800cca2:	9302      	str	r3, [sp, #8]
 800cca4:	1beb      	subs	r3, r5, r7
 800cca6:	3b15      	subs	r3, #21
 800cca8:	f023 0303 	bic.w	r3, r3, #3
 800ccac:	3304      	adds	r3, #4
 800ccae:	3715      	adds	r7, #21
 800ccb0:	42bd      	cmp	r5, r7
 800ccb2:	bf38      	it	cc
 800ccb4:	2304      	movcc	r3, #4
 800ccb6:	9301      	str	r3, [sp, #4]
 800ccb8:	9b02      	ldr	r3, [sp, #8]
 800ccba:	9103      	str	r1, [sp, #12]
 800ccbc:	428b      	cmp	r3, r1
 800ccbe:	d80c      	bhi.n	800ccda <__multiply+0x9a>
 800ccc0:	2e00      	cmp	r6, #0
 800ccc2:	dd03      	ble.n	800cccc <__multiply+0x8c>
 800ccc4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d055      	beq.n	800cd78 <__multiply+0x138>
 800cccc:	6106      	str	r6, [r0, #16]
 800ccce:	b005      	add	sp, #20
 800ccd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccd4:	f843 2b04 	str.w	r2, [r3], #4
 800ccd8:	e7d9      	b.n	800cc8e <__multiply+0x4e>
 800ccda:	f8b1 a000 	ldrh.w	sl, [r1]
 800ccde:	f1ba 0f00 	cmp.w	sl, #0
 800cce2:	d01f      	beq.n	800cd24 <__multiply+0xe4>
 800cce4:	46c4      	mov	ip, r8
 800cce6:	46a1      	mov	r9, r4
 800cce8:	2700      	movs	r7, #0
 800ccea:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ccee:	f8d9 3000 	ldr.w	r3, [r9]
 800ccf2:	fa1f fb82 	uxth.w	fp, r2
 800ccf6:	b29b      	uxth	r3, r3
 800ccf8:	fb0a 330b 	mla	r3, sl, fp, r3
 800ccfc:	443b      	add	r3, r7
 800ccfe:	f8d9 7000 	ldr.w	r7, [r9]
 800cd02:	0c12      	lsrs	r2, r2, #16
 800cd04:	0c3f      	lsrs	r7, r7, #16
 800cd06:	fb0a 7202 	mla	r2, sl, r2, r7
 800cd0a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800cd0e:	b29b      	uxth	r3, r3
 800cd10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cd14:	4565      	cmp	r5, ip
 800cd16:	f849 3b04 	str.w	r3, [r9], #4
 800cd1a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800cd1e:	d8e4      	bhi.n	800ccea <__multiply+0xaa>
 800cd20:	9b01      	ldr	r3, [sp, #4]
 800cd22:	50e7      	str	r7, [r4, r3]
 800cd24:	9b03      	ldr	r3, [sp, #12]
 800cd26:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cd2a:	3104      	adds	r1, #4
 800cd2c:	f1b9 0f00 	cmp.w	r9, #0
 800cd30:	d020      	beq.n	800cd74 <__multiply+0x134>
 800cd32:	6823      	ldr	r3, [r4, #0]
 800cd34:	4647      	mov	r7, r8
 800cd36:	46a4      	mov	ip, r4
 800cd38:	f04f 0a00 	mov.w	sl, #0
 800cd3c:	f8b7 b000 	ldrh.w	fp, [r7]
 800cd40:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800cd44:	fb09 220b 	mla	r2, r9, fp, r2
 800cd48:	4452      	add	r2, sl
 800cd4a:	b29b      	uxth	r3, r3
 800cd4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cd50:	f84c 3b04 	str.w	r3, [ip], #4
 800cd54:	f857 3b04 	ldr.w	r3, [r7], #4
 800cd58:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cd5c:	f8bc 3000 	ldrh.w	r3, [ip]
 800cd60:	fb09 330a 	mla	r3, r9, sl, r3
 800cd64:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800cd68:	42bd      	cmp	r5, r7
 800cd6a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cd6e:	d8e5      	bhi.n	800cd3c <__multiply+0xfc>
 800cd70:	9a01      	ldr	r2, [sp, #4]
 800cd72:	50a3      	str	r3, [r4, r2]
 800cd74:	3404      	adds	r4, #4
 800cd76:	e79f      	b.n	800ccb8 <__multiply+0x78>
 800cd78:	3e01      	subs	r6, #1
 800cd7a:	e7a1      	b.n	800ccc0 <__multiply+0x80>
 800cd7c:	080103f4 	.word	0x080103f4
 800cd80:	08010405 	.word	0x08010405

0800cd84 <__pow5mult>:
 800cd84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd88:	4615      	mov	r5, r2
 800cd8a:	f012 0203 	ands.w	r2, r2, #3
 800cd8e:	4607      	mov	r7, r0
 800cd90:	460e      	mov	r6, r1
 800cd92:	d007      	beq.n	800cda4 <__pow5mult+0x20>
 800cd94:	4c25      	ldr	r4, [pc, #148]	@ (800ce2c <__pow5mult+0xa8>)
 800cd96:	3a01      	subs	r2, #1
 800cd98:	2300      	movs	r3, #0
 800cd9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cd9e:	f7ff fe5d 	bl	800ca5c <__multadd>
 800cda2:	4606      	mov	r6, r0
 800cda4:	10ad      	asrs	r5, r5, #2
 800cda6:	d03d      	beq.n	800ce24 <__pow5mult+0xa0>
 800cda8:	69fc      	ldr	r4, [r7, #28]
 800cdaa:	b97c      	cbnz	r4, 800cdcc <__pow5mult+0x48>
 800cdac:	2010      	movs	r0, #16
 800cdae:	f7ff fd3d 	bl	800c82c <malloc>
 800cdb2:	4602      	mov	r2, r0
 800cdb4:	61f8      	str	r0, [r7, #28]
 800cdb6:	b928      	cbnz	r0, 800cdc4 <__pow5mult+0x40>
 800cdb8:	4b1d      	ldr	r3, [pc, #116]	@ (800ce30 <__pow5mult+0xac>)
 800cdba:	481e      	ldr	r0, [pc, #120]	@ (800ce34 <__pow5mult+0xb0>)
 800cdbc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cdc0:	f7fe fe72 	bl	800baa8 <__assert_func>
 800cdc4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cdc8:	6004      	str	r4, [r0, #0]
 800cdca:	60c4      	str	r4, [r0, #12]
 800cdcc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cdd0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cdd4:	b94c      	cbnz	r4, 800cdea <__pow5mult+0x66>
 800cdd6:	f240 2171 	movw	r1, #625	@ 0x271
 800cdda:	4638      	mov	r0, r7
 800cddc:	f7ff ff1a 	bl	800cc14 <__i2b>
 800cde0:	2300      	movs	r3, #0
 800cde2:	f8c8 0008 	str.w	r0, [r8, #8]
 800cde6:	4604      	mov	r4, r0
 800cde8:	6003      	str	r3, [r0, #0]
 800cdea:	f04f 0900 	mov.w	r9, #0
 800cdee:	07eb      	lsls	r3, r5, #31
 800cdf0:	d50a      	bpl.n	800ce08 <__pow5mult+0x84>
 800cdf2:	4631      	mov	r1, r6
 800cdf4:	4622      	mov	r2, r4
 800cdf6:	4638      	mov	r0, r7
 800cdf8:	f7ff ff22 	bl	800cc40 <__multiply>
 800cdfc:	4631      	mov	r1, r6
 800cdfe:	4680      	mov	r8, r0
 800ce00:	4638      	mov	r0, r7
 800ce02:	f7ff fe09 	bl	800ca18 <_Bfree>
 800ce06:	4646      	mov	r6, r8
 800ce08:	106d      	asrs	r5, r5, #1
 800ce0a:	d00b      	beq.n	800ce24 <__pow5mult+0xa0>
 800ce0c:	6820      	ldr	r0, [r4, #0]
 800ce0e:	b938      	cbnz	r0, 800ce20 <__pow5mult+0x9c>
 800ce10:	4622      	mov	r2, r4
 800ce12:	4621      	mov	r1, r4
 800ce14:	4638      	mov	r0, r7
 800ce16:	f7ff ff13 	bl	800cc40 <__multiply>
 800ce1a:	6020      	str	r0, [r4, #0]
 800ce1c:	f8c0 9000 	str.w	r9, [r0]
 800ce20:	4604      	mov	r4, r0
 800ce22:	e7e4      	b.n	800cdee <__pow5mult+0x6a>
 800ce24:	4630      	mov	r0, r6
 800ce26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce2a:	bf00      	nop
 800ce2c:	080104dc 	.word	0x080104dc
 800ce30:	080102ab 	.word	0x080102ab
 800ce34:	08010405 	.word	0x08010405

0800ce38 <__lshift>:
 800ce38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce3c:	460c      	mov	r4, r1
 800ce3e:	6849      	ldr	r1, [r1, #4]
 800ce40:	6923      	ldr	r3, [r4, #16]
 800ce42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ce46:	68a3      	ldr	r3, [r4, #8]
 800ce48:	4607      	mov	r7, r0
 800ce4a:	4691      	mov	r9, r2
 800ce4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ce50:	f108 0601 	add.w	r6, r8, #1
 800ce54:	42b3      	cmp	r3, r6
 800ce56:	db0b      	blt.n	800ce70 <__lshift+0x38>
 800ce58:	4638      	mov	r0, r7
 800ce5a:	f7ff fd9d 	bl	800c998 <_Balloc>
 800ce5e:	4605      	mov	r5, r0
 800ce60:	b948      	cbnz	r0, 800ce76 <__lshift+0x3e>
 800ce62:	4602      	mov	r2, r0
 800ce64:	4b28      	ldr	r3, [pc, #160]	@ (800cf08 <__lshift+0xd0>)
 800ce66:	4829      	ldr	r0, [pc, #164]	@ (800cf0c <__lshift+0xd4>)
 800ce68:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ce6c:	f7fe fe1c 	bl	800baa8 <__assert_func>
 800ce70:	3101      	adds	r1, #1
 800ce72:	005b      	lsls	r3, r3, #1
 800ce74:	e7ee      	b.n	800ce54 <__lshift+0x1c>
 800ce76:	2300      	movs	r3, #0
 800ce78:	f100 0114 	add.w	r1, r0, #20
 800ce7c:	f100 0210 	add.w	r2, r0, #16
 800ce80:	4618      	mov	r0, r3
 800ce82:	4553      	cmp	r3, sl
 800ce84:	db33      	blt.n	800ceee <__lshift+0xb6>
 800ce86:	6920      	ldr	r0, [r4, #16]
 800ce88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ce8c:	f104 0314 	add.w	r3, r4, #20
 800ce90:	f019 091f 	ands.w	r9, r9, #31
 800ce94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ce98:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ce9c:	d02b      	beq.n	800cef6 <__lshift+0xbe>
 800ce9e:	f1c9 0e20 	rsb	lr, r9, #32
 800cea2:	468a      	mov	sl, r1
 800cea4:	2200      	movs	r2, #0
 800cea6:	6818      	ldr	r0, [r3, #0]
 800cea8:	fa00 f009 	lsl.w	r0, r0, r9
 800ceac:	4310      	orrs	r0, r2
 800ceae:	f84a 0b04 	str.w	r0, [sl], #4
 800ceb2:	f853 2b04 	ldr.w	r2, [r3], #4
 800ceb6:	459c      	cmp	ip, r3
 800ceb8:	fa22 f20e 	lsr.w	r2, r2, lr
 800cebc:	d8f3      	bhi.n	800cea6 <__lshift+0x6e>
 800cebe:	ebac 0304 	sub.w	r3, ip, r4
 800cec2:	3b15      	subs	r3, #21
 800cec4:	f023 0303 	bic.w	r3, r3, #3
 800cec8:	3304      	adds	r3, #4
 800ceca:	f104 0015 	add.w	r0, r4, #21
 800cece:	4560      	cmp	r0, ip
 800ced0:	bf88      	it	hi
 800ced2:	2304      	movhi	r3, #4
 800ced4:	50ca      	str	r2, [r1, r3]
 800ced6:	b10a      	cbz	r2, 800cedc <__lshift+0xa4>
 800ced8:	f108 0602 	add.w	r6, r8, #2
 800cedc:	3e01      	subs	r6, #1
 800cede:	4638      	mov	r0, r7
 800cee0:	612e      	str	r6, [r5, #16]
 800cee2:	4621      	mov	r1, r4
 800cee4:	f7ff fd98 	bl	800ca18 <_Bfree>
 800cee8:	4628      	mov	r0, r5
 800ceea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ceee:	f842 0f04 	str.w	r0, [r2, #4]!
 800cef2:	3301      	adds	r3, #1
 800cef4:	e7c5      	b.n	800ce82 <__lshift+0x4a>
 800cef6:	3904      	subs	r1, #4
 800cef8:	f853 2b04 	ldr.w	r2, [r3], #4
 800cefc:	f841 2f04 	str.w	r2, [r1, #4]!
 800cf00:	459c      	cmp	ip, r3
 800cf02:	d8f9      	bhi.n	800cef8 <__lshift+0xc0>
 800cf04:	e7ea      	b.n	800cedc <__lshift+0xa4>
 800cf06:	bf00      	nop
 800cf08:	080103f4 	.word	0x080103f4
 800cf0c:	08010405 	.word	0x08010405

0800cf10 <__mcmp>:
 800cf10:	690a      	ldr	r2, [r1, #16]
 800cf12:	4603      	mov	r3, r0
 800cf14:	6900      	ldr	r0, [r0, #16]
 800cf16:	1a80      	subs	r0, r0, r2
 800cf18:	b530      	push	{r4, r5, lr}
 800cf1a:	d10e      	bne.n	800cf3a <__mcmp+0x2a>
 800cf1c:	3314      	adds	r3, #20
 800cf1e:	3114      	adds	r1, #20
 800cf20:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cf24:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cf28:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cf2c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cf30:	4295      	cmp	r5, r2
 800cf32:	d003      	beq.n	800cf3c <__mcmp+0x2c>
 800cf34:	d205      	bcs.n	800cf42 <__mcmp+0x32>
 800cf36:	f04f 30ff 	mov.w	r0, #4294967295
 800cf3a:	bd30      	pop	{r4, r5, pc}
 800cf3c:	42a3      	cmp	r3, r4
 800cf3e:	d3f3      	bcc.n	800cf28 <__mcmp+0x18>
 800cf40:	e7fb      	b.n	800cf3a <__mcmp+0x2a>
 800cf42:	2001      	movs	r0, #1
 800cf44:	e7f9      	b.n	800cf3a <__mcmp+0x2a>
	...

0800cf48 <__mdiff>:
 800cf48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf4c:	4689      	mov	r9, r1
 800cf4e:	4606      	mov	r6, r0
 800cf50:	4611      	mov	r1, r2
 800cf52:	4648      	mov	r0, r9
 800cf54:	4614      	mov	r4, r2
 800cf56:	f7ff ffdb 	bl	800cf10 <__mcmp>
 800cf5a:	1e05      	subs	r5, r0, #0
 800cf5c:	d112      	bne.n	800cf84 <__mdiff+0x3c>
 800cf5e:	4629      	mov	r1, r5
 800cf60:	4630      	mov	r0, r6
 800cf62:	f7ff fd19 	bl	800c998 <_Balloc>
 800cf66:	4602      	mov	r2, r0
 800cf68:	b928      	cbnz	r0, 800cf76 <__mdiff+0x2e>
 800cf6a:	4b3f      	ldr	r3, [pc, #252]	@ (800d068 <__mdiff+0x120>)
 800cf6c:	f240 2137 	movw	r1, #567	@ 0x237
 800cf70:	483e      	ldr	r0, [pc, #248]	@ (800d06c <__mdiff+0x124>)
 800cf72:	f7fe fd99 	bl	800baa8 <__assert_func>
 800cf76:	2301      	movs	r3, #1
 800cf78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cf7c:	4610      	mov	r0, r2
 800cf7e:	b003      	add	sp, #12
 800cf80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf84:	bfbc      	itt	lt
 800cf86:	464b      	movlt	r3, r9
 800cf88:	46a1      	movlt	r9, r4
 800cf8a:	4630      	mov	r0, r6
 800cf8c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cf90:	bfba      	itte	lt
 800cf92:	461c      	movlt	r4, r3
 800cf94:	2501      	movlt	r5, #1
 800cf96:	2500      	movge	r5, #0
 800cf98:	f7ff fcfe 	bl	800c998 <_Balloc>
 800cf9c:	4602      	mov	r2, r0
 800cf9e:	b918      	cbnz	r0, 800cfa8 <__mdiff+0x60>
 800cfa0:	4b31      	ldr	r3, [pc, #196]	@ (800d068 <__mdiff+0x120>)
 800cfa2:	f240 2145 	movw	r1, #581	@ 0x245
 800cfa6:	e7e3      	b.n	800cf70 <__mdiff+0x28>
 800cfa8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cfac:	6926      	ldr	r6, [r4, #16]
 800cfae:	60c5      	str	r5, [r0, #12]
 800cfb0:	f109 0310 	add.w	r3, r9, #16
 800cfb4:	f109 0514 	add.w	r5, r9, #20
 800cfb8:	f104 0e14 	add.w	lr, r4, #20
 800cfbc:	f100 0b14 	add.w	fp, r0, #20
 800cfc0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cfc4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cfc8:	9301      	str	r3, [sp, #4]
 800cfca:	46d9      	mov	r9, fp
 800cfcc:	f04f 0c00 	mov.w	ip, #0
 800cfd0:	9b01      	ldr	r3, [sp, #4]
 800cfd2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cfd6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cfda:	9301      	str	r3, [sp, #4]
 800cfdc:	fa1f f38a 	uxth.w	r3, sl
 800cfe0:	4619      	mov	r1, r3
 800cfe2:	b283      	uxth	r3, r0
 800cfe4:	1acb      	subs	r3, r1, r3
 800cfe6:	0c00      	lsrs	r0, r0, #16
 800cfe8:	4463      	add	r3, ip
 800cfea:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cfee:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cff2:	b29b      	uxth	r3, r3
 800cff4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cff8:	4576      	cmp	r6, lr
 800cffa:	f849 3b04 	str.w	r3, [r9], #4
 800cffe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d002:	d8e5      	bhi.n	800cfd0 <__mdiff+0x88>
 800d004:	1b33      	subs	r3, r6, r4
 800d006:	3b15      	subs	r3, #21
 800d008:	f023 0303 	bic.w	r3, r3, #3
 800d00c:	3415      	adds	r4, #21
 800d00e:	3304      	adds	r3, #4
 800d010:	42a6      	cmp	r6, r4
 800d012:	bf38      	it	cc
 800d014:	2304      	movcc	r3, #4
 800d016:	441d      	add	r5, r3
 800d018:	445b      	add	r3, fp
 800d01a:	461e      	mov	r6, r3
 800d01c:	462c      	mov	r4, r5
 800d01e:	4544      	cmp	r4, r8
 800d020:	d30e      	bcc.n	800d040 <__mdiff+0xf8>
 800d022:	f108 0103 	add.w	r1, r8, #3
 800d026:	1b49      	subs	r1, r1, r5
 800d028:	f021 0103 	bic.w	r1, r1, #3
 800d02c:	3d03      	subs	r5, #3
 800d02e:	45a8      	cmp	r8, r5
 800d030:	bf38      	it	cc
 800d032:	2100      	movcc	r1, #0
 800d034:	440b      	add	r3, r1
 800d036:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d03a:	b191      	cbz	r1, 800d062 <__mdiff+0x11a>
 800d03c:	6117      	str	r7, [r2, #16]
 800d03e:	e79d      	b.n	800cf7c <__mdiff+0x34>
 800d040:	f854 1b04 	ldr.w	r1, [r4], #4
 800d044:	46e6      	mov	lr, ip
 800d046:	0c08      	lsrs	r0, r1, #16
 800d048:	fa1c fc81 	uxtah	ip, ip, r1
 800d04c:	4471      	add	r1, lr
 800d04e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d052:	b289      	uxth	r1, r1
 800d054:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d058:	f846 1b04 	str.w	r1, [r6], #4
 800d05c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d060:	e7dd      	b.n	800d01e <__mdiff+0xd6>
 800d062:	3f01      	subs	r7, #1
 800d064:	e7e7      	b.n	800d036 <__mdiff+0xee>
 800d066:	bf00      	nop
 800d068:	080103f4 	.word	0x080103f4
 800d06c:	08010405 	.word	0x08010405

0800d070 <__ulp>:
 800d070:	b082      	sub	sp, #8
 800d072:	ed8d 0b00 	vstr	d0, [sp]
 800d076:	9a01      	ldr	r2, [sp, #4]
 800d078:	4b0f      	ldr	r3, [pc, #60]	@ (800d0b8 <__ulp+0x48>)
 800d07a:	4013      	ands	r3, r2
 800d07c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d080:	2b00      	cmp	r3, #0
 800d082:	dc08      	bgt.n	800d096 <__ulp+0x26>
 800d084:	425b      	negs	r3, r3
 800d086:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d08a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d08e:	da04      	bge.n	800d09a <__ulp+0x2a>
 800d090:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d094:	4113      	asrs	r3, r2
 800d096:	2200      	movs	r2, #0
 800d098:	e008      	b.n	800d0ac <__ulp+0x3c>
 800d09a:	f1a2 0314 	sub.w	r3, r2, #20
 800d09e:	2b1e      	cmp	r3, #30
 800d0a0:	bfda      	itte	le
 800d0a2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d0a6:	40da      	lsrle	r2, r3
 800d0a8:	2201      	movgt	r2, #1
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	4619      	mov	r1, r3
 800d0ae:	4610      	mov	r0, r2
 800d0b0:	ec41 0b10 	vmov	d0, r0, r1
 800d0b4:	b002      	add	sp, #8
 800d0b6:	4770      	bx	lr
 800d0b8:	7ff00000 	.word	0x7ff00000

0800d0bc <__b2d>:
 800d0bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0c0:	6906      	ldr	r6, [r0, #16]
 800d0c2:	f100 0814 	add.w	r8, r0, #20
 800d0c6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d0ca:	1f37      	subs	r7, r6, #4
 800d0cc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d0d0:	4610      	mov	r0, r2
 800d0d2:	f7ff fd53 	bl	800cb7c <__hi0bits>
 800d0d6:	f1c0 0320 	rsb	r3, r0, #32
 800d0da:	280a      	cmp	r0, #10
 800d0dc:	600b      	str	r3, [r1, #0]
 800d0de:	491b      	ldr	r1, [pc, #108]	@ (800d14c <__b2d+0x90>)
 800d0e0:	dc15      	bgt.n	800d10e <__b2d+0x52>
 800d0e2:	f1c0 0c0b 	rsb	ip, r0, #11
 800d0e6:	fa22 f30c 	lsr.w	r3, r2, ip
 800d0ea:	45b8      	cmp	r8, r7
 800d0ec:	ea43 0501 	orr.w	r5, r3, r1
 800d0f0:	bf34      	ite	cc
 800d0f2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d0f6:	2300      	movcs	r3, #0
 800d0f8:	3015      	adds	r0, #21
 800d0fa:	fa02 f000 	lsl.w	r0, r2, r0
 800d0fe:	fa23 f30c 	lsr.w	r3, r3, ip
 800d102:	4303      	orrs	r3, r0
 800d104:	461c      	mov	r4, r3
 800d106:	ec45 4b10 	vmov	d0, r4, r5
 800d10a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d10e:	45b8      	cmp	r8, r7
 800d110:	bf3a      	itte	cc
 800d112:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d116:	f1a6 0708 	subcc.w	r7, r6, #8
 800d11a:	2300      	movcs	r3, #0
 800d11c:	380b      	subs	r0, #11
 800d11e:	d012      	beq.n	800d146 <__b2d+0x8a>
 800d120:	f1c0 0120 	rsb	r1, r0, #32
 800d124:	fa23 f401 	lsr.w	r4, r3, r1
 800d128:	4082      	lsls	r2, r0
 800d12a:	4322      	orrs	r2, r4
 800d12c:	4547      	cmp	r7, r8
 800d12e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d132:	bf8c      	ite	hi
 800d134:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d138:	2200      	movls	r2, #0
 800d13a:	4083      	lsls	r3, r0
 800d13c:	40ca      	lsrs	r2, r1
 800d13e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d142:	4313      	orrs	r3, r2
 800d144:	e7de      	b.n	800d104 <__b2d+0x48>
 800d146:	ea42 0501 	orr.w	r5, r2, r1
 800d14a:	e7db      	b.n	800d104 <__b2d+0x48>
 800d14c:	3ff00000 	.word	0x3ff00000

0800d150 <__d2b>:
 800d150:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d154:	460f      	mov	r7, r1
 800d156:	2101      	movs	r1, #1
 800d158:	ec59 8b10 	vmov	r8, r9, d0
 800d15c:	4616      	mov	r6, r2
 800d15e:	f7ff fc1b 	bl	800c998 <_Balloc>
 800d162:	4604      	mov	r4, r0
 800d164:	b930      	cbnz	r0, 800d174 <__d2b+0x24>
 800d166:	4602      	mov	r2, r0
 800d168:	4b23      	ldr	r3, [pc, #140]	@ (800d1f8 <__d2b+0xa8>)
 800d16a:	4824      	ldr	r0, [pc, #144]	@ (800d1fc <__d2b+0xac>)
 800d16c:	f240 310f 	movw	r1, #783	@ 0x30f
 800d170:	f7fe fc9a 	bl	800baa8 <__assert_func>
 800d174:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d178:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d17c:	b10d      	cbz	r5, 800d182 <__d2b+0x32>
 800d17e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d182:	9301      	str	r3, [sp, #4]
 800d184:	f1b8 0300 	subs.w	r3, r8, #0
 800d188:	d023      	beq.n	800d1d2 <__d2b+0x82>
 800d18a:	4668      	mov	r0, sp
 800d18c:	9300      	str	r3, [sp, #0]
 800d18e:	f7ff fd14 	bl	800cbba <__lo0bits>
 800d192:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d196:	b1d0      	cbz	r0, 800d1ce <__d2b+0x7e>
 800d198:	f1c0 0320 	rsb	r3, r0, #32
 800d19c:	fa02 f303 	lsl.w	r3, r2, r3
 800d1a0:	430b      	orrs	r3, r1
 800d1a2:	40c2      	lsrs	r2, r0
 800d1a4:	6163      	str	r3, [r4, #20]
 800d1a6:	9201      	str	r2, [sp, #4]
 800d1a8:	9b01      	ldr	r3, [sp, #4]
 800d1aa:	61a3      	str	r3, [r4, #24]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	bf0c      	ite	eq
 800d1b0:	2201      	moveq	r2, #1
 800d1b2:	2202      	movne	r2, #2
 800d1b4:	6122      	str	r2, [r4, #16]
 800d1b6:	b1a5      	cbz	r5, 800d1e2 <__d2b+0x92>
 800d1b8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d1bc:	4405      	add	r5, r0
 800d1be:	603d      	str	r5, [r7, #0]
 800d1c0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d1c4:	6030      	str	r0, [r6, #0]
 800d1c6:	4620      	mov	r0, r4
 800d1c8:	b003      	add	sp, #12
 800d1ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d1ce:	6161      	str	r1, [r4, #20]
 800d1d0:	e7ea      	b.n	800d1a8 <__d2b+0x58>
 800d1d2:	a801      	add	r0, sp, #4
 800d1d4:	f7ff fcf1 	bl	800cbba <__lo0bits>
 800d1d8:	9b01      	ldr	r3, [sp, #4]
 800d1da:	6163      	str	r3, [r4, #20]
 800d1dc:	3020      	adds	r0, #32
 800d1de:	2201      	movs	r2, #1
 800d1e0:	e7e8      	b.n	800d1b4 <__d2b+0x64>
 800d1e2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d1e6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d1ea:	6038      	str	r0, [r7, #0]
 800d1ec:	6918      	ldr	r0, [r3, #16]
 800d1ee:	f7ff fcc5 	bl	800cb7c <__hi0bits>
 800d1f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d1f6:	e7e5      	b.n	800d1c4 <__d2b+0x74>
 800d1f8:	080103f4 	.word	0x080103f4
 800d1fc:	08010405 	.word	0x08010405

0800d200 <__ratio>:
 800d200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d204:	b085      	sub	sp, #20
 800d206:	e9cd 1000 	strd	r1, r0, [sp]
 800d20a:	a902      	add	r1, sp, #8
 800d20c:	f7ff ff56 	bl	800d0bc <__b2d>
 800d210:	9800      	ldr	r0, [sp, #0]
 800d212:	a903      	add	r1, sp, #12
 800d214:	ec55 4b10 	vmov	r4, r5, d0
 800d218:	f7ff ff50 	bl	800d0bc <__b2d>
 800d21c:	9b01      	ldr	r3, [sp, #4]
 800d21e:	6919      	ldr	r1, [r3, #16]
 800d220:	9b00      	ldr	r3, [sp, #0]
 800d222:	691b      	ldr	r3, [r3, #16]
 800d224:	1ac9      	subs	r1, r1, r3
 800d226:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d22a:	1a9b      	subs	r3, r3, r2
 800d22c:	ec5b ab10 	vmov	sl, fp, d0
 800d230:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d234:	2b00      	cmp	r3, #0
 800d236:	bfce      	itee	gt
 800d238:	462a      	movgt	r2, r5
 800d23a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d23e:	465a      	movle	r2, fp
 800d240:	462f      	mov	r7, r5
 800d242:	46d9      	mov	r9, fp
 800d244:	bfcc      	ite	gt
 800d246:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d24a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800d24e:	464b      	mov	r3, r9
 800d250:	4652      	mov	r2, sl
 800d252:	4620      	mov	r0, r4
 800d254:	4639      	mov	r1, r7
 800d256:	f7f3 faf9 	bl	800084c <__aeabi_ddiv>
 800d25a:	ec41 0b10 	vmov	d0, r0, r1
 800d25e:	b005      	add	sp, #20
 800d260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d264 <__copybits>:
 800d264:	3901      	subs	r1, #1
 800d266:	b570      	push	{r4, r5, r6, lr}
 800d268:	1149      	asrs	r1, r1, #5
 800d26a:	6914      	ldr	r4, [r2, #16]
 800d26c:	3101      	adds	r1, #1
 800d26e:	f102 0314 	add.w	r3, r2, #20
 800d272:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d276:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d27a:	1f05      	subs	r5, r0, #4
 800d27c:	42a3      	cmp	r3, r4
 800d27e:	d30c      	bcc.n	800d29a <__copybits+0x36>
 800d280:	1aa3      	subs	r3, r4, r2
 800d282:	3b11      	subs	r3, #17
 800d284:	f023 0303 	bic.w	r3, r3, #3
 800d288:	3211      	adds	r2, #17
 800d28a:	42a2      	cmp	r2, r4
 800d28c:	bf88      	it	hi
 800d28e:	2300      	movhi	r3, #0
 800d290:	4418      	add	r0, r3
 800d292:	2300      	movs	r3, #0
 800d294:	4288      	cmp	r0, r1
 800d296:	d305      	bcc.n	800d2a4 <__copybits+0x40>
 800d298:	bd70      	pop	{r4, r5, r6, pc}
 800d29a:	f853 6b04 	ldr.w	r6, [r3], #4
 800d29e:	f845 6f04 	str.w	r6, [r5, #4]!
 800d2a2:	e7eb      	b.n	800d27c <__copybits+0x18>
 800d2a4:	f840 3b04 	str.w	r3, [r0], #4
 800d2a8:	e7f4      	b.n	800d294 <__copybits+0x30>

0800d2aa <__any_on>:
 800d2aa:	f100 0214 	add.w	r2, r0, #20
 800d2ae:	6900      	ldr	r0, [r0, #16]
 800d2b0:	114b      	asrs	r3, r1, #5
 800d2b2:	4298      	cmp	r0, r3
 800d2b4:	b510      	push	{r4, lr}
 800d2b6:	db11      	blt.n	800d2dc <__any_on+0x32>
 800d2b8:	dd0a      	ble.n	800d2d0 <__any_on+0x26>
 800d2ba:	f011 011f 	ands.w	r1, r1, #31
 800d2be:	d007      	beq.n	800d2d0 <__any_on+0x26>
 800d2c0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d2c4:	fa24 f001 	lsr.w	r0, r4, r1
 800d2c8:	fa00 f101 	lsl.w	r1, r0, r1
 800d2cc:	428c      	cmp	r4, r1
 800d2ce:	d10b      	bne.n	800d2e8 <__any_on+0x3e>
 800d2d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d2d4:	4293      	cmp	r3, r2
 800d2d6:	d803      	bhi.n	800d2e0 <__any_on+0x36>
 800d2d8:	2000      	movs	r0, #0
 800d2da:	bd10      	pop	{r4, pc}
 800d2dc:	4603      	mov	r3, r0
 800d2de:	e7f7      	b.n	800d2d0 <__any_on+0x26>
 800d2e0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d2e4:	2900      	cmp	r1, #0
 800d2e6:	d0f5      	beq.n	800d2d4 <__any_on+0x2a>
 800d2e8:	2001      	movs	r0, #1
 800d2ea:	e7f6      	b.n	800d2da <__any_on+0x30>

0800d2ec <sulp>:
 800d2ec:	b570      	push	{r4, r5, r6, lr}
 800d2ee:	4604      	mov	r4, r0
 800d2f0:	460d      	mov	r5, r1
 800d2f2:	ec45 4b10 	vmov	d0, r4, r5
 800d2f6:	4616      	mov	r6, r2
 800d2f8:	f7ff feba 	bl	800d070 <__ulp>
 800d2fc:	ec51 0b10 	vmov	r0, r1, d0
 800d300:	b17e      	cbz	r6, 800d322 <sulp+0x36>
 800d302:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d306:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	dd09      	ble.n	800d322 <sulp+0x36>
 800d30e:	051b      	lsls	r3, r3, #20
 800d310:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800d314:	2400      	movs	r4, #0
 800d316:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800d31a:	4622      	mov	r2, r4
 800d31c:	462b      	mov	r3, r5
 800d31e:	f7f3 f96b 	bl	80005f8 <__aeabi_dmul>
 800d322:	ec41 0b10 	vmov	d0, r0, r1
 800d326:	bd70      	pop	{r4, r5, r6, pc}

0800d328 <_strtod_l>:
 800d328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d32c:	b09f      	sub	sp, #124	@ 0x7c
 800d32e:	460c      	mov	r4, r1
 800d330:	9217      	str	r2, [sp, #92]	@ 0x5c
 800d332:	2200      	movs	r2, #0
 800d334:	921a      	str	r2, [sp, #104]	@ 0x68
 800d336:	9005      	str	r0, [sp, #20]
 800d338:	f04f 0a00 	mov.w	sl, #0
 800d33c:	f04f 0b00 	mov.w	fp, #0
 800d340:	460a      	mov	r2, r1
 800d342:	9219      	str	r2, [sp, #100]	@ 0x64
 800d344:	7811      	ldrb	r1, [r2, #0]
 800d346:	292b      	cmp	r1, #43	@ 0x2b
 800d348:	d04a      	beq.n	800d3e0 <_strtod_l+0xb8>
 800d34a:	d838      	bhi.n	800d3be <_strtod_l+0x96>
 800d34c:	290d      	cmp	r1, #13
 800d34e:	d832      	bhi.n	800d3b6 <_strtod_l+0x8e>
 800d350:	2908      	cmp	r1, #8
 800d352:	d832      	bhi.n	800d3ba <_strtod_l+0x92>
 800d354:	2900      	cmp	r1, #0
 800d356:	d03b      	beq.n	800d3d0 <_strtod_l+0xa8>
 800d358:	2200      	movs	r2, #0
 800d35a:	920e      	str	r2, [sp, #56]	@ 0x38
 800d35c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800d35e:	782a      	ldrb	r2, [r5, #0]
 800d360:	2a30      	cmp	r2, #48	@ 0x30
 800d362:	f040 80b2 	bne.w	800d4ca <_strtod_l+0x1a2>
 800d366:	786a      	ldrb	r2, [r5, #1]
 800d368:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d36c:	2a58      	cmp	r2, #88	@ 0x58
 800d36e:	d16e      	bne.n	800d44e <_strtod_l+0x126>
 800d370:	9302      	str	r3, [sp, #8]
 800d372:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d374:	9301      	str	r3, [sp, #4]
 800d376:	ab1a      	add	r3, sp, #104	@ 0x68
 800d378:	9300      	str	r3, [sp, #0]
 800d37a:	4a8f      	ldr	r2, [pc, #572]	@ (800d5b8 <_strtod_l+0x290>)
 800d37c:	9805      	ldr	r0, [sp, #20]
 800d37e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d380:	a919      	add	r1, sp, #100	@ 0x64
 800d382:	f001 fadb 	bl	800e93c <__gethex>
 800d386:	f010 060f 	ands.w	r6, r0, #15
 800d38a:	4604      	mov	r4, r0
 800d38c:	d005      	beq.n	800d39a <_strtod_l+0x72>
 800d38e:	2e06      	cmp	r6, #6
 800d390:	d128      	bne.n	800d3e4 <_strtod_l+0xbc>
 800d392:	3501      	adds	r5, #1
 800d394:	2300      	movs	r3, #0
 800d396:	9519      	str	r5, [sp, #100]	@ 0x64
 800d398:	930e      	str	r3, [sp, #56]	@ 0x38
 800d39a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	f040 858e 	bne.w	800debe <_strtod_l+0xb96>
 800d3a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d3a4:	b1cb      	cbz	r3, 800d3da <_strtod_l+0xb2>
 800d3a6:	4652      	mov	r2, sl
 800d3a8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800d3ac:	ec43 2b10 	vmov	d0, r2, r3
 800d3b0:	b01f      	add	sp, #124	@ 0x7c
 800d3b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3b6:	2920      	cmp	r1, #32
 800d3b8:	d1ce      	bne.n	800d358 <_strtod_l+0x30>
 800d3ba:	3201      	adds	r2, #1
 800d3bc:	e7c1      	b.n	800d342 <_strtod_l+0x1a>
 800d3be:	292d      	cmp	r1, #45	@ 0x2d
 800d3c0:	d1ca      	bne.n	800d358 <_strtod_l+0x30>
 800d3c2:	2101      	movs	r1, #1
 800d3c4:	910e      	str	r1, [sp, #56]	@ 0x38
 800d3c6:	1c51      	adds	r1, r2, #1
 800d3c8:	9119      	str	r1, [sp, #100]	@ 0x64
 800d3ca:	7852      	ldrb	r2, [r2, #1]
 800d3cc:	2a00      	cmp	r2, #0
 800d3ce:	d1c5      	bne.n	800d35c <_strtod_l+0x34>
 800d3d0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d3d2:	9419      	str	r4, [sp, #100]	@ 0x64
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	f040 8570 	bne.w	800deba <_strtod_l+0xb92>
 800d3da:	4652      	mov	r2, sl
 800d3dc:	465b      	mov	r3, fp
 800d3de:	e7e5      	b.n	800d3ac <_strtod_l+0x84>
 800d3e0:	2100      	movs	r1, #0
 800d3e2:	e7ef      	b.n	800d3c4 <_strtod_l+0x9c>
 800d3e4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d3e6:	b13a      	cbz	r2, 800d3f8 <_strtod_l+0xd0>
 800d3e8:	2135      	movs	r1, #53	@ 0x35
 800d3ea:	a81c      	add	r0, sp, #112	@ 0x70
 800d3ec:	f7ff ff3a 	bl	800d264 <__copybits>
 800d3f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d3f2:	9805      	ldr	r0, [sp, #20]
 800d3f4:	f7ff fb10 	bl	800ca18 <_Bfree>
 800d3f8:	3e01      	subs	r6, #1
 800d3fa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d3fc:	2e04      	cmp	r6, #4
 800d3fe:	d806      	bhi.n	800d40e <_strtod_l+0xe6>
 800d400:	e8df f006 	tbb	[pc, r6]
 800d404:	201d0314 	.word	0x201d0314
 800d408:	14          	.byte	0x14
 800d409:	00          	.byte	0x00
 800d40a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d40e:	05e1      	lsls	r1, r4, #23
 800d410:	bf48      	it	mi
 800d412:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d416:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d41a:	0d1b      	lsrs	r3, r3, #20
 800d41c:	051b      	lsls	r3, r3, #20
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d1bb      	bne.n	800d39a <_strtod_l+0x72>
 800d422:	f7fe faff 	bl	800ba24 <__errno>
 800d426:	2322      	movs	r3, #34	@ 0x22
 800d428:	6003      	str	r3, [r0, #0]
 800d42a:	e7b6      	b.n	800d39a <_strtod_l+0x72>
 800d42c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d430:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d434:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d438:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d43c:	e7e7      	b.n	800d40e <_strtod_l+0xe6>
 800d43e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800d5c0 <_strtod_l+0x298>
 800d442:	e7e4      	b.n	800d40e <_strtod_l+0xe6>
 800d444:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d448:	f04f 3aff 	mov.w	sl, #4294967295
 800d44c:	e7df      	b.n	800d40e <_strtod_l+0xe6>
 800d44e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d450:	1c5a      	adds	r2, r3, #1
 800d452:	9219      	str	r2, [sp, #100]	@ 0x64
 800d454:	785b      	ldrb	r3, [r3, #1]
 800d456:	2b30      	cmp	r3, #48	@ 0x30
 800d458:	d0f9      	beq.n	800d44e <_strtod_l+0x126>
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d09d      	beq.n	800d39a <_strtod_l+0x72>
 800d45e:	2301      	movs	r3, #1
 800d460:	2700      	movs	r7, #0
 800d462:	9308      	str	r3, [sp, #32]
 800d464:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d466:	930c      	str	r3, [sp, #48]	@ 0x30
 800d468:	970b      	str	r7, [sp, #44]	@ 0x2c
 800d46a:	46b9      	mov	r9, r7
 800d46c:	220a      	movs	r2, #10
 800d46e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d470:	7805      	ldrb	r5, [r0, #0]
 800d472:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d476:	b2d9      	uxtb	r1, r3
 800d478:	2909      	cmp	r1, #9
 800d47a:	d928      	bls.n	800d4ce <_strtod_l+0x1a6>
 800d47c:	494f      	ldr	r1, [pc, #316]	@ (800d5bc <_strtod_l+0x294>)
 800d47e:	2201      	movs	r2, #1
 800d480:	f001 f98c 	bl	800e79c <strncmp>
 800d484:	2800      	cmp	r0, #0
 800d486:	d032      	beq.n	800d4ee <_strtod_l+0x1c6>
 800d488:	2000      	movs	r0, #0
 800d48a:	462a      	mov	r2, r5
 800d48c:	900a      	str	r0, [sp, #40]	@ 0x28
 800d48e:	464d      	mov	r5, r9
 800d490:	4603      	mov	r3, r0
 800d492:	2a65      	cmp	r2, #101	@ 0x65
 800d494:	d001      	beq.n	800d49a <_strtod_l+0x172>
 800d496:	2a45      	cmp	r2, #69	@ 0x45
 800d498:	d114      	bne.n	800d4c4 <_strtod_l+0x19c>
 800d49a:	b91d      	cbnz	r5, 800d4a4 <_strtod_l+0x17c>
 800d49c:	9a08      	ldr	r2, [sp, #32]
 800d49e:	4302      	orrs	r2, r0
 800d4a0:	d096      	beq.n	800d3d0 <_strtod_l+0xa8>
 800d4a2:	2500      	movs	r5, #0
 800d4a4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d4a6:	1c62      	adds	r2, r4, #1
 800d4a8:	9219      	str	r2, [sp, #100]	@ 0x64
 800d4aa:	7862      	ldrb	r2, [r4, #1]
 800d4ac:	2a2b      	cmp	r2, #43	@ 0x2b
 800d4ae:	d07a      	beq.n	800d5a6 <_strtod_l+0x27e>
 800d4b0:	2a2d      	cmp	r2, #45	@ 0x2d
 800d4b2:	d07e      	beq.n	800d5b2 <_strtod_l+0x28a>
 800d4b4:	f04f 0c00 	mov.w	ip, #0
 800d4b8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d4bc:	2909      	cmp	r1, #9
 800d4be:	f240 8085 	bls.w	800d5cc <_strtod_l+0x2a4>
 800d4c2:	9419      	str	r4, [sp, #100]	@ 0x64
 800d4c4:	f04f 0800 	mov.w	r8, #0
 800d4c8:	e0a5      	b.n	800d616 <_strtod_l+0x2ee>
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	e7c8      	b.n	800d460 <_strtod_l+0x138>
 800d4ce:	f1b9 0f08 	cmp.w	r9, #8
 800d4d2:	bfd8      	it	le
 800d4d4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800d4d6:	f100 0001 	add.w	r0, r0, #1
 800d4da:	bfda      	itte	le
 800d4dc:	fb02 3301 	mlale	r3, r2, r1, r3
 800d4e0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800d4e2:	fb02 3707 	mlagt	r7, r2, r7, r3
 800d4e6:	f109 0901 	add.w	r9, r9, #1
 800d4ea:	9019      	str	r0, [sp, #100]	@ 0x64
 800d4ec:	e7bf      	b.n	800d46e <_strtod_l+0x146>
 800d4ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d4f0:	1c5a      	adds	r2, r3, #1
 800d4f2:	9219      	str	r2, [sp, #100]	@ 0x64
 800d4f4:	785a      	ldrb	r2, [r3, #1]
 800d4f6:	f1b9 0f00 	cmp.w	r9, #0
 800d4fa:	d03b      	beq.n	800d574 <_strtod_l+0x24c>
 800d4fc:	900a      	str	r0, [sp, #40]	@ 0x28
 800d4fe:	464d      	mov	r5, r9
 800d500:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d504:	2b09      	cmp	r3, #9
 800d506:	d912      	bls.n	800d52e <_strtod_l+0x206>
 800d508:	2301      	movs	r3, #1
 800d50a:	e7c2      	b.n	800d492 <_strtod_l+0x16a>
 800d50c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d50e:	1c5a      	adds	r2, r3, #1
 800d510:	9219      	str	r2, [sp, #100]	@ 0x64
 800d512:	785a      	ldrb	r2, [r3, #1]
 800d514:	3001      	adds	r0, #1
 800d516:	2a30      	cmp	r2, #48	@ 0x30
 800d518:	d0f8      	beq.n	800d50c <_strtod_l+0x1e4>
 800d51a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d51e:	2b08      	cmp	r3, #8
 800d520:	f200 84d2 	bhi.w	800dec8 <_strtod_l+0xba0>
 800d524:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d526:	900a      	str	r0, [sp, #40]	@ 0x28
 800d528:	2000      	movs	r0, #0
 800d52a:	930c      	str	r3, [sp, #48]	@ 0x30
 800d52c:	4605      	mov	r5, r0
 800d52e:	3a30      	subs	r2, #48	@ 0x30
 800d530:	f100 0301 	add.w	r3, r0, #1
 800d534:	d018      	beq.n	800d568 <_strtod_l+0x240>
 800d536:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d538:	4419      	add	r1, r3
 800d53a:	910a      	str	r1, [sp, #40]	@ 0x28
 800d53c:	462e      	mov	r6, r5
 800d53e:	f04f 0e0a 	mov.w	lr, #10
 800d542:	1c71      	adds	r1, r6, #1
 800d544:	eba1 0c05 	sub.w	ip, r1, r5
 800d548:	4563      	cmp	r3, ip
 800d54a:	dc15      	bgt.n	800d578 <_strtod_l+0x250>
 800d54c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800d550:	182b      	adds	r3, r5, r0
 800d552:	2b08      	cmp	r3, #8
 800d554:	f105 0501 	add.w	r5, r5, #1
 800d558:	4405      	add	r5, r0
 800d55a:	dc1a      	bgt.n	800d592 <_strtod_l+0x26a>
 800d55c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d55e:	230a      	movs	r3, #10
 800d560:	fb03 2301 	mla	r3, r3, r1, r2
 800d564:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d566:	2300      	movs	r3, #0
 800d568:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d56a:	1c51      	adds	r1, r2, #1
 800d56c:	9119      	str	r1, [sp, #100]	@ 0x64
 800d56e:	7852      	ldrb	r2, [r2, #1]
 800d570:	4618      	mov	r0, r3
 800d572:	e7c5      	b.n	800d500 <_strtod_l+0x1d8>
 800d574:	4648      	mov	r0, r9
 800d576:	e7ce      	b.n	800d516 <_strtod_l+0x1ee>
 800d578:	2e08      	cmp	r6, #8
 800d57a:	dc05      	bgt.n	800d588 <_strtod_l+0x260>
 800d57c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800d57e:	fb0e f606 	mul.w	r6, lr, r6
 800d582:	960b      	str	r6, [sp, #44]	@ 0x2c
 800d584:	460e      	mov	r6, r1
 800d586:	e7dc      	b.n	800d542 <_strtod_l+0x21a>
 800d588:	2910      	cmp	r1, #16
 800d58a:	bfd8      	it	le
 800d58c:	fb0e f707 	mulle.w	r7, lr, r7
 800d590:	e7f8      	b.n	800d584 <_strtod_l+0x25c>
 800d592:	2b0f      	cmp	r3, #15
 800d594:	bfdc      	itt	le
 800d596:	230a      	movle	r3, #10
 800d598:	fb03 2707 	mlale	r7, r3, r7, r2
 800d59c:	e7e3      	b.n	800d566 <_strtod_l+0x23e>
 800d59e:	2300      	movs	r3, #0
 800d5a0:	930a      	str	r3, [sp, #40]	@ 0x28
 800d5a2:	2301      	movs	r3, #1
 800d5a4:	e77a      	b.n	800d49c <_strtod_l+0x174>
 800d5a6:	f04f 0c00 	mov.w	ip, #0
 800d5aa:	1ca2      	adds	r2, r4, #2
 800d5ac:	9219      	str	r2, [sp, #100]	@ 0x64
 800d5ae:	78a2      	ldrb	r2, [r4, #2]
 800d5b0:	e782      	b.n	800d4b8 <_strtod_l+0x190>
 800d5b2:	f04f 0c01 	mov.w	ip, #1
 800d5b6:	e7f8      	b.n	800d5aa <_strtod_l+0x282>
 800d5b8:	080105ec 	.word	0x080105ec
 800d5bc:	0801045e 	.word	0x0801045e
 800d5c0:	7ff00000 	.word	0x7ff00000
 800d5c4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d5c6:	1c51      	adds	r1, r2, #1
 800d5c8:	9119      	str	r1, [sp, #100]	@ 0x64
 800d5ca:	7852      	ldrb	r2, [r2, #1]
 800d5cc:	2a30      	cmp	r2, #48	@ 0x30
 800d5ce:	d0f9      	beq.n	800d5c4 <_strtod_l+0x29c>
 800d5d0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800d5d4:	2908      	cmp	r1, #8
 800d5d6:	f63f af75 	bhi.w	800d4c4 <_strtod_l+0x19c>
 800d5da:	3a30      	subs	r2, #48	@ 0x30
 800d5dc:	9209      	str	r2, [sp, #36]	@ 0x24
 800d5de:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d5e0:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d5e2:	f04f 080a 	mov.w	r8, #10
 800d5e6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d5e8:	1c56      	adds	r6, r2, #1
 800d5ea:	9619      	str	r6, [sp, #100]	@ 0x64
 800d5ec:	7852      	ldrb	r2, [r2, #1]
 800d5ee:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800d5f2:	f1be 0f09 	cmp.w	lr, #9
 800d5f6:	d939      	bls.n	800d66c <_strtod_l+0x344>
 800d5f8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d5fa:	1a76      	subs	r6, r6, r1
 800d5fc:	2e08      	cmp	r6, #8
 800d5fe:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800d602:	dc03      	bgt.n	800d60c <_strtod_l+0x2e4>
 800d604:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d606:	4588      	cmp	r8, r1
 800d608:	bfa8      	it	ge
 800d60a:	4688      	movge	r8, r1
 800d60c:	f1bc 0f00 	cmp.w	ip, #0
 800d610:	d001      	beq.n	800d616 <_strtod_l+0x2ee>
 800d612:	f1c8 0800 	rsb	r8, r8, #0
 800d616:	2d00      	cmp	r5, #0
 800d618:	d14e      	bne.n	800d6b8 <_strtod_l+0x390>
 800d61a:	9908      	ldr	r1, [sp, #32]
 800d61c:	4308      	orrs	r0, r1
 800d61e:	f47f aebc 	bne.w	800d39a <_strtod_l+0x72>
 800d622:	2b00      	cmp	r3, #0
 800d624:	f47f aed4 	bne.w	800d3d0 <_strtod_l+0xa8>
 800d628:	2a69      	cmp	r2, #105	@ 0x69
 800d62a:	d028      	beq.n	800d67e <_strtod_l+0x356>
 800d62c:	dc25      	bgt.n	800d67a <_strtod_l+0x352>
 800d62e:	2a49      	cmp	r2, #73	@ 0x49
 800d630:	d025      	beq.n	800d67e <_strtod_l+0x356>
 800d632:	2a4e      	cmp	r2, #78	@ 0x4e
 800d634:	f47f aecc 	bne.w	800d3d0 <_strtod_l+0xa8>
 800d638:	499a      	ldr	r1, [pc, #616]	@ (800d8a4 <_strtod_l+0x57c>)
 800d63a:	a819      	add	r0, sp, #100	@ 0x64
 800d63c:	f001 fba0 	bl	800ed80 <__match>
 800d640:	2800      	cmp	r0, #0
 800d642:	f43f aec5 	beq.w	800d3d0 <_strtod_l+0xa8>
 800d646:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d648:	781b      	ldrb	r3, [r3, #0]
 800d64a:	2b28      	cmp	r3, #40	@ 0x28
 800d64c:	d12e      	bne.n	800d6ac <_strtod_l+0x384>
 800d64e:	4996      	ldr	r1, [pc, #600]	@ (800d8a8 <_strtod_l+0x580>)
 800d650:	aa1c      	add	r2, sp, #112	@ 0x70
 800d652:	a819      	add	r0, sp, #100	@ 0x64
 800d654:	f001 fba8 	bl	800eda8 <__hexnan>
 800d658:	2805      	cmp	r0, #5
 800d65a:	d127      	bne.n	800d6ac <_strtod_l+0x384>
 800d65c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d65e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800d662:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d666:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d66a:	e696      	b.n	800d39a <_strtod_l+0x72>
 800d66c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d66e:	fb08 2101 	mla	r1, r8, r1, r2
 800d672:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800d676:	9209      	str	r2, [sp, #36]	@ 0x24
 800d678:	e7b5      	b.n	800d5e6 <_strtod_l+0x2be>
 800d67a:	2a6e      	cmp	r2, #110	@ 0x6e
 800d67c:	e7da      	b.n	800d634 <_strtod_l+0x30c>
 800d67e:	498b      	ldr	r1, [pc, #556]	@ (800d8ac <_strtod_l+0x584>)
 800d680:	a819      	add	r0, sp, #100	@ 0x64
 800d682:	f001 fb7d 	bl	800ed80 <__match>
 800d686:	2800      	cmp	r0, #0
 800d688:	f43f aea2 	beq.w	800d3d0 <_strtod_l+0xa8>
 800d68c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d68e:	4988      	ldr	r1, [pc, #544]	@ (800d8b0 <_strtod_l+0x588>)
 800d690:	3b01      	subs	r3, #1
 800d692:	a819      	add	r0, sp, #100	@ 0x64
 800d694:	9319      	str	r3, [sp, #100]	@ 0x64
 800d696:	f001 fb73 	bl	800ed80 <__match>
 800d69a:	b910      	cbnz	r0, 800d6a2 <_strtod_l+0x37a>
 800d69c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d69e:	3301      	adds	r3, #1
 800d6a0:	9319      	str	r3, [sp, #100]	@ 0x64
 800d6a2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800d8c0 <_strtod_l+0x598>
 800d6a6:	f04f 0a00 	mov.w	sl, #0
 800d6aa:	e676      	b.n	800d39a <_strtod_l+0x72>
 800d6ac:	4881      	ldr	r0, [pc, #516]	@ (800d8b4 <_strtod_l+0x58c>)
 800d6ae:	f001 f8bb 	bl	800e828 <nan>
 800d6b2:	ec5b ab10 	vmov	sl, fp, d0
 800d6b6:	e670      	b.n	800d39a <_strtod_l+0x72>
 800d6b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d6ba:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800d6bc:	eba8 0303 	sub.w	r3, r8, r3
 800d6c0:	f1b9 0f00 	cmp.w	r9, #0
 800d6c4:	bf08      	it	eq
 800d6c6:	46a9      	moveq	r9, r5
 800d6c8:	2d10      	cmp	r5, #16
 800d6ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6cc:	462c      	mov	r4, r5
 800d6ce:	bfa8      	it	ge
 800d6d0:	2410      	movge	r4, #16
 800d6d2:	f7f2 ff17 	bl	8000504 <__aeabi_ui2d>
 800d6d6:	2d09      	cmp	r5, #9
 800d6d8:	4682      	mov	sl, r0
 800d6da:	468b      	mov	fp, r1
 800d6dc:	dc13      	bgt.n	800d706 <_strtod_l+0x3de>
 800d6de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	f43f ae5a 	beq.w	800d39a <_strtod_l+0x72>
 800d6e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6e8:	dd78      	ble.n	800d7dc <_strtod_l+0x4b4>
 800d6ea:	2b16      	cmp	r3, #22
 800d6ec:	dc5f      	bgt.n	800d7ae <_strtod_l+0x486>
 800d6ee:	4972      	ldr	r1, [pc, #456]	@ (800d8b8 <_strtod_l+0x590>)
 800d6f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d6f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d6f8:	4652      	mov	r2, sl
 800d6fa:	465b      	mov	r3, fp
 800d6fc:	f7f2 ff7c 	bl	80005f8 <__aeabi_dmul>
 800d700:	4682      	mov	sl, r0
 800d702:	468b      	mov	fp, r1
 800d704:	e649      	b.n	800d39a <_strtod_l+0x72>
 800d706:	4b6c      	ldr	r3, [pc, #432]	@ (800d8b8 <_strtod_l+0x590>)
 800d708:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d70c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800d710:	f7f2 ff72 	bl	80005f8 <__aeabi_dmul>
 800d714:	4682      	mov	sl, r0
 800d716:	4638      	mov	r0, r7
 800d718:	468b      	mov	fp, r1
 800d71a:	f7f2 fef3 	bl	8000504 <__aeabi_ui2d>
 800d71e:	4602      	mov	r2, r0
 800d720:	460b      	mov	r3, r1
 800d722:	4650      	mov	r0, sl
 800d724:	4659      	mov	r1, fp
 800d726:	f7f2 fdb1 	bl	800028c <__adddf3>
 800d72a:	2d0f      	cmp	r5, #15
 800d72c:	4682      	mov	sl, r0
 800d72e:	468b      	mov	fp, r1
 800d730:	ddd5      	ble.n	800d6de <_strtod_l+0x3b6>
 800d732:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d734:	1b2c      	subs	r4, r5, r4
 800d736:	441c      	add	r4, r3
 800d738:	2c00      	cmp	r4, #0
 800d73a:	f340 8093 	ble.w	800d864 <_strtod_l+0x53c>
 800d73e:	f014 030f 	ands.w	r3, r4, #15
 800d742:	d00a      	beq.n	800d75a <_strtod_l+0x432>
 800d744:	495c      	ldr	r1, [pc, #368]	@ (800d8b8 <_strtod_l+0x590>)
 800d746:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d74a:	4652      	mov	r2, sl
 800d74c:	465b      	mov	r3, fp
 800d74e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d752:	f7f2 ff51 	bl	80005f8 <__aeabi_dmul>
 800d756:	4682      	mov	sl, r0
 800d758:	468b      	mov	fp, r1
 800d75a:	f034 040f 	bics.w	r4, r4, #15
 800d75e:	d073      	beq.n	800d848 <_strtod_l+0x520>
 800d760:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800d764:	dd49      	ble.n	800d7fa <_strtod_l+0x4d2>
 800d766:	2400      	movs	r4, #0
 800d768:	46a0      	mov	r8, r4
 800d76a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d76c:	46a1      	mov	r9, r4
 800d76e:	9a05      	ldr	r2, [sp, #20]
 800d770:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800d8c0 <_strtod_l+0x598>
 800d774:	2322      	movs	r3, #34	@ 0x22
 800d776:	6013      	str	r3, [r2, #0]
 800d778:	f04f 0a00 	mov.w	sl, #0
 800d77c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d77e:	2b00      	cmp	r3, #0
 800d780:	f43f ae0b 	beq.w	800d39a <_strtod_l+0x72>
 800d784:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d786:	9805      	ldr	r0, [sp, #20]
 800d788:	f7ff f946 	bl	800ca18 <_Bfree>
 800d78c:	9805      	ldr	r0, [sp, #20]
 800d78e:	4649      	mov	r1, r9
 800d790:	f7ff f942 	bl	800ca18 <_Bfree>
 800d794:	9805      	ldr	r0, [sp, #20]
 800d796:	4641      	mov	r1, r8
 800d798:	f7ff f93e 	bl	800ca18 <_Bfree>
 800d79c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d79e:	9805      	ldr	r0, [sp, #20]
 800d7a0:	f7ff f93a 	bl	800ca18 <_Bfree>
 800d7a4:	9805      	ldr	r0, [sp, #20]
 800d7a6:	4621      	mov	r1, r4
 800d7a8:	f7ff f936 	bl	800ca18 <_Bfree>
 800d7ac:	e5f5      	b.n	800d39a <_strtod_l+0x72>
 800d7ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d7b0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800d7b4:	4293      	cmp	r3, r2
 800d7b6:	dbbc      	blt.n	800d732 <_strtod_l+0x40a>
 800d7b8:	4c3f      	ldr	r4, [pc, #252]	@ (800d8b8 <_strtod_l+0x590>)
 800d7ba:	f1c5 050f 	rsb	r5, r5, #15
 800d7be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d7c2:	4652      	mov	r2, sl
 800d7c4:	465b      	mov	r3, fp
 800d7c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d7ca:	f7f2 ff15 	bl	80005f8 <__aeabi_dmul>
 800d7ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7d0:	1b5d      	subs	r5, r3, r5
 800d7d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d7d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d7da:	e78f      	b.n	800d6fc <_strtod_l+0x3d4>
 800d7dc:	3316      	adds	r3, #22
 800d7de:	dba8      	blt.n	800d732 <_strtod_l+0x40a>
 800d7e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d7e2:	eba3 0808 	sub.w	r8, r3, r8
 800d7e6:	4b34      	ldr	r3, [pc, #208]	@ (800d8b8 <_strtod_l+0x590>)
 800d7e8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800d7ec:	e9d8 2300 	ldrd	r2, r3, [r8]
 800d7f0:	4650      	mov	r0, sl
 800d7f2:	4659      	mov	r1, fp
 800d7f4:	f7f3 f82a 	bl	800084c <__aeabi_ddiv>
 800d7f8:	e782      	b.n	800d700 <_strtod_l+0x3d8>
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	4f2f      	ldr	r7, [pc, #188]	@ (800d8bc <_strtod_l+0x594>)
 800d7fe:	1124      	asrs	r4, r4, #4
 800d800:	4650      	mov	r0, sl
 800d802:	4659      	mov	r1, fp
 800d804:	461e      	mov	r6, r3
 800d806:	2c01      	cmp	r4, #1
 800d808:	dc21      	bgt.n	800d84e <_strtod_l+0x526>
 800d80a:	b10b      	cbz	r3, 800d810 <_strtod_l+0x4e8>
 800d80c:	4682      	mov	sl, r0
 800d80e:	468b      	mov	fp, r1
 800d810:	492a      	ldr	r1, [pc, #168]	@ (800d8bc <_strtod_l+0x594>)
 800d812:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d816:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d81a:	4652      	mov	r2, sl
 800d81c:	465b      	mov	r3, fp
 800d81e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d822:	f7f2 fee9 	bl	80005f8 <__aeabi_dmul>
 800d826:	4b26      	ldr	r3, [pc, #152]	@ (800d8c0 <_strtod_l+0x598>)
 800d828:	460a      	mov	r2, r1
 800d82a:	400b      	ands	r3, r1
 800d82c:	4925      	ldr	r1, [pc, #148]	@ (800d8c4 <_strtod_l+0x59c>)
 800d82e:	428b      	cmp	r3, r1
 800d830:	4682      	mov	sl, r0
 800d832:	d898      	bhi.n	800d766 <_strtod_l+0x43e>
 800d834:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800d838:	428b      	cmp	r3, r1
 800d83a:	bf86      	itte	hi
 800d83c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800d8c8 <_strtod_l+0x5a0>
 800d840:	f04f 3aff 	movhi.w	sl, #4294967295
 800d844:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800d848:	2300      	movs	r3, #0
 800d84a:	9308      	str	r3, [sp, #32]
 800d84c:	e076      	b.n	800d93c <_strtod_l+0x614>
 800d84e:	07e2      	lsls	r2, r4, #31
 800d850:	d504      	bpl.n	800d85c <_strtod_l+0x534>
 800d852:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d856:	f7f2 fecf 	bl	80005f8 <__aeabi_dmul>
 800d85a:	2301      	movs	r3, #1
 800d85c:	3601      	adds	r6, #1
 800d85e:	1064      	asrs	r4, r4, #1
 800d860:	3708      	adds	r7, #8
 800d862:	e7d0      	b.n	800d806 <_strtod_l+0x4de>
 800d864:	d0f0      	beq.n	800d848 <_strtod_l+0x520>
 800d866:	4264      	negs	r4, r4
 800d868:	f014 020f 	ands.w	r2, r4, #15
 800d86c:	d00a      	beq.n	800d884 <_strtod_l+0x55c>
 800d86e:	4b12      	ldr	r3, [pc, #72]	@ (800d8b8 <_strtod_l+0x590>)
 800d870:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d874:	4650      	mov	r0, sl
 800d876:	4659      	mov	r1, fp
 800d878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d87c:	f7f2 ffe6 	bl	800084c <__aeabi_ddiv>
 800d880:	4682      	mov	sl, r0
 800d882:	468b      	mov	fp, r1
 800d884:	1124      	asrs	r4, r4, #4
 800d886:	d0df      	beq.n	800d848 <_strtod_l+0x520>
 800d888:	2c1f      	cmp	r4, #31
 800d88a:	dd1f      	ble.n	800d8cc <_strtod_l+0x5a4>
 800d88c:	2400      	movs	r4, #0
 800d88e:	46a0      	mov	r8, r4
 800d890:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d892:	46a1      	mov	r9, r4
 800d894:	9a05      	ldr	r2, [sp, #20]
 800d896:	2322      	movs	r3, #34	@ 0x22
 800d898:	f04f 0a00 	mov.w	sl, #0
 800d89c:	f04f 0b00 	mov.w	fp, #0
 800d8a0:	6013      	str	r3, [r2, #0]
 800d8a2:	e76b      	b.n	800d77c <_strtod_l+0x454>
 800d8a4:	08010327 	.word	0x08010327
 800d8a8:	080105d8 	.word	0x080105d8
 800d8ac:	0801031f 	.word	0x0801031f
 800d8b0:	08010392 	.word	0x08010392
 800d8b4:	0801038e 	.word	0x0801038e
 800d8b8:	08010510 	.word	0x08010510
 800d8bc:	080104e8 	.word	0x080104e8
 800d8c0:	7ff00000 	.word	0x7ff00000
 800d8c4:	7ca00000 	.word	0x7ca00000
 800d8c8:	7fefffff 	.word	0x7fefffff
 800d8cc:	f014 0310 	ands.w	r3, r4, #16
 800d8d0:	bf18      	it	ne
 800d8d2:	236a      	movne	r3, #106	@ 0x6a
 800d8d4:	4ea9      	ldr	r6, [pc, #676]	@ (800db7c <_strtod_l+0x854>)
 800d8d6:	9308      	str	r3, [sp, #32]
 800d8d8:	4650      	mov	r0, sl
 800d8da:	4659      	mov	r1, fp
 800d8dc:	2300      	movs	r3, #0
 800d8de:	07e7      	lsls	r7, r4, #31
 800d8e0:	d504      	bpl.n	800d8ec <_strtod_l+0x5c4>
 800d8e2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d8e6:	f7f2 fe87 	bl	80005f8 <__aeabi_dmul>
 800d8ea:	2301      	movs	r3, #1
 800d8ec:	1064      	asrs	r4, r4, #1
 800d8ee:	f106 0608 	add.w	r6, r6, #8
 800d8f2:	d1f4      	bne.n	800d8de <_strtod_l+0x5b6>
 800d8f4:	b10b      	cbz	r3, 800d8fa <_strtod_l+0x5d2>
 800d8f6:	4682      	mov	sl, r0
 800d8f8:	468b      	mov	fp, r1
 800d8fa:	9b08      	ldr	r3, [sp, #32]
 800d8fc:	b1b3      	cbz	r3, 800d92c <_strtod_l+0x604>
 800d8fe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d902:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d906:	2b00      	cmp	r3, #0
 800d908:	4659      	mov	r1, fp
 800d90a:	dd0f      	ble.n	800d92c <_strtod_l+0x604>
 800d90c:	2b1f      	cmp	r3, #31
 800d90e:	dd56      	ble.n	800d9be <_strtod_l+0x696>
 800d910:	2b34      	cmp	r3, #52	@ 0x34
 800d912:	bfde      	ittt	le
 800d914:	f04f 33ff 	movle.w	r3, #4294967295
 800d918:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d91c:	4093      	lslle	r3, r2
 800d91e:	f04f 0a00 	mov.w	sl, #0
 800d922:	bfcc      	ite	gt
 800d924:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d928:	ea03 0b01 	andle.w	fp, r3, r1
 800d92c:	2200      	movs	r2, #0
 800d92e:	2300      	movs	r3, #0
 800d930:	4650      	mov	r0, sl
 800d932:	4659      	mov	r1, fp
 800d934:	f7f3 f8c8 	bl	8000ac8 <__aeabi_dcmpeq>
 800d938:	2800      	cmp	r0, #0
 800d93a:	d1a7      	bne.n	800d88c <_strtod_l+0x564>
 800d93c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d93e:	9300      	str	r3, [sp, #0]
 800d940:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d942:	9805      	ldr	r0, [sp, #20]
 800d944:	462b      	mov	r3, r5
 800d946:	464a      	mov	r2, r9
 800d948:	f7ff f8ce 	bl	800cae8 <__s2b>
 800d94c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800d94e:	2800      	cmp	r0, #0
 800d950:	f43f af09 	beq.w	800d766 <_strtod_l+0x43e>
 800d954:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d956:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d958:	2a00      	cmp	r2, #0
 800d95a:	eba3 0308 	sub.w	r3, r3, r8
 800d95e:	bfa8      	it	ge
 800d960:	2300      	movge	r3, #0
 800d962:	9312      	str	r3, [sp, #72]	@ 0x48
 800d964:	2400      	movs	r4, #0
 800d966:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d96a:	9316      	str	r3, [sp, #88]	@ 0x58
 800d96c:	46a0      	mov	r8, r4
 800d96e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d970:	9805      	ldr	r0, [sp, #20]
 800d972:	6859      	ldr	r1, [r3, #4]
 800d974:	f7ff f810 	bl	800c998 <_Balloc>
 800d978:	4681      	mov	r9, r0
 800d97a:	2800      	cmp	r0, #0
 800d97c:	f43f aef7 	beq.w	800d76e <_strtod_l+0x446>
 800d980:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d982:	691a      	ldr	r2, [r3, #16]
 800d984:	3202      	adds	r2, #2
 800d986:	f103 010c 	add.w	r1, r3, #12
 800d98a:	0092      	lsls	r2, r2, #2
 800d98c:	300c      	adds	r0, #12
 800d98e:	f7fe f876 	bl	800ba7e <memcpy>
 800d992:	ec4b ab10 	vmov	d0, sl, fp
 800d996:	9805      	ldr	r0, [sp, #20]
 800d998:	aa1c      	add	r2, sp, #112	@ 0x70
 800d99a:	a91b      	add	r1, sp, #108	@ 0x6c
 800d99c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d9a0:	f7ff fbd6 	bl	800d150 <__d2b>
 800d9a4:	901a      	str	r0, [sp, #104]	@ 0x68
 800d9a6:	2800      	cmp	r0, #0
 800d9a8:	f43f aee1 	beq.w	800d76e <_strtod_l+0x446>
 800d9ac:	9805      	ldr	r0, [sp, #20]
 800d9ae:	2101      	movs	r1, #1
 800d9b0:	f7ff f930 	bl	800cc14 <__i2b>
 800d9b4:	4680      	mov	r8, r0
 800d9b6:	b948      	cbnz	r0, 800d9cc <_strtod_l+0x6a4>
 800d9b8:	f04f 0800 	mov.w	r8, #0
 800d9bc:	e6d7      	b.n	800d76e <_strtod_l+0x446>
 800d9be:	f04f 32ff 	mov.w	r2, #4294967295
 800d9c2:	fa02 f303 	lsl.w	r3, r2, r3
 800d9c6:	ea03 0a0a 	and.w	sl, r3, sl
 800d9ca:	e7af      	b.n	800d92c <_strtod_l+0x604>
 800d9cc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d9ce:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d9d0:	2d00      	cmp	r5, #0
 800d9d2:	bfab      	itete	ge
 800d9d4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d9d6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d9d8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d9da:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d9dc:	bfac      	ite	ge
 800d9de:	18ef      	addge	r7, r5, r3
 800d9e0:	1b5e      	sublt	r6, r3, r5
 800d9e2:	9b08      	ldr	r3, [sp, #32]
 800d9e4:	1aed      	subs	r5, r5, r3
 800d9e6:	4415      	add	r5, r2
 800d9e8:	4b65      	ldr	r3, [pc, #404]	@ (800db80 <_strtod_l+0x858>)
 800d9ea:	3d01      	subs	r5, #1
 800d9ec:	429d      	cmp	r5, r3
 800d9ee:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d9f2:	da50      	bge.n	800da96 <_strtod_l+0x76e>
 800d9f4:	1b5b      	subs	r3, r3, r5
 800d9f6:	2b1f      	cmp	r3, #31
 800d9f8:	eba2 0203 	sub.w	r2, r2, r3
 800d9fc:	f04f 0101 	mov.w	r1, #1
 800da00:	dc3d      	bgt.n	800da7e <_strtod_l+0x756>
 800da02:	fa01 f303 	lsl.w	r3, r1, r3
 800da06:	9313      	str	r3, [sp, #76]	@ 0x4c
 800da08:	2300      	movs	r3, #0
 800da0a:	9310      	str	r3, [sp, #64]	@ 0x40
 800da0c:	18bd      	adds	r5, r7, r2
 800da0e:	9b08      	ldr	r3, [sp, #32]
 800da10:	42af      	cmp	r7, r5
 800da12:	4416      	add	r6, r2
 800da14:	441e      	add	r6, r3
 800da16:	463b      	mov	r3, r7
 800da18:	bfa8      	it	ge
 800da1a:	462b      	movge	r3, r5
 800da1c:	42b3      	cmp	r3, r6
 800da1e:	bfa8      	it	ge
 800da20:	4633      	movge	r3, r6
 800da22:	2b00      	cmp	r3, #0
 800da24:	bfc2      	ittt	gt
 800da26:	1aed      	subgt	r5, r5, r3
 800da28:	1af6      	subgt	r6, r6, r3
 800da2a:	1aff      	subgt	r7, r7, r3
 800da2c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800da2e:	2b00      	cmp	r3, #0
 800da30:	dd16      	ble.n	800da60 <_strtod_l+0x738>
 800da32:	4641      	mov	r1, r8
 800da34:	9805      	ldr	r0, [sp, #20]
 800da36:	461a      	mov	r2, r3
 800da38:	f7ff f9a4 	bl	800cd84 <__pow5mult>
 800da3c:	4680      	mov	r8, r0
 800da3e:	2800      	cmp	r0, #0
 800da40:	d0ba      	beq.n	800d9b8 <_strtod_l+0x690>
 800da42:	4601      	mov	r1, r0
 800da44:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800da46:	9805      	ldr	r0, [sp, #20]
 800da48:	f7ff f8fa 	bl	800cc40 <__multiply>
 800da4c:	900a      	str	r0, [sp, #40]	@ 0x28
 800da4e:	2800      	cmp	r0, #0
 800da50:	f43f ae8d 	beq.w	800d76e <_strtod_l+0x446>
 800da54:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800da56:	9805      	ldr	r0, [sp, #20]
 800da58:	f7fe ffde 	bl	800ca18 <_Bfree>
 800da5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da5e:	931a      	str	r3, [sp, #104]	@ 0x68
 800da60:	2d00      	cmp	r5, #0
 800da62:	dc1d      	bgt.n	800daa0 <_strtod_l+0x778>
 800da64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da66:	2b00      	cmp	r3, #0
 800da68:	dd23      	ble.n	800dab2 <_strtod_l+0x78a>
 800da6a:	4649      	mov	r1, r9
 800da6c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800da6e:	9805      	ldr	r0, [sp, #20]
 800da70:	f7ff f988 	bl	800cd84 <__pow5mult>
 800da74:	4681      	mov	r9, r0
 800da76:	b9e0      	cbnz	r0, 800dab2 <_strtod_l+0x78a>
 800da78:	f04f 0900 	mov.w	r9, #0
 800da7c:	e677      	b.n	800d76e <_strtod_l+0x446>
 800da7e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800da82:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800da86:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800da8a:	35e2      	adds	r5, #226	@ 0xe2
 800da8c:	fa01 f305 	lsl.w	r3, r1, r5
 800da90:	9310      	str	r3, [sp, #64]	@ 0x40
 800da92:	9113      	str	r1, [sp, #76]	@ 0x4c
 800da94:	e7ba      	b.n	800da0c <_strtod_l+0x6e4>
 800da96:	2300      	movs	r3, #0
 800da98:	9310      	str	r3, [sp, #64]	@ 0x40
 800da9a:	2301      	movs	r3, #1
 800da9c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800da9e:	e7b5      	b.n	800da0c <_strtod_l+0x6e4>
 800daa0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800daa2:	9805      	ldr	r0, [sp, #20]
 800daa4:	462a      	mov	r2, r5
 800daa6:	f7ff f9c7 	bl	800ce38 <__lshift>
 800daaa:	901a      	str	r0, [sp, #104]	@ 0x68
 800daac:	2800      	cmp	r0, #0
 800daae:	d1d9      	bne.n	800da64 <_strtod_l+0x73c>
 800dab0:	e65d      	b.n	800d76e <_strtod_l+0x446>
 800dab2:	2e00      	cmp	r6, #0
 800dab4:	dd07      	ble.n	800dac6 <_strtod_l+0x79e>
 800dab6:	4649      	mov	r1, r9
 800dab8:	9805      	ldr	r0, [sp, #20]
 800daba:	4632      	mov	r2, r6
 800dabc:	f7ff f9bc 	bl	800ce38 <__lshift>
 800dac0:	4681      	mov	r9, r0
 800dac2:	2800      	cmp	r0, #0
 800dac4:	d0d8      	beq.n	800da78 <_strtod_l+0x750>
 800dac6:	2f00      	cmp	r7, #0
 800dac8:	dd08      	ble.n	800dadc <_strtod_l+0x7b4>
 800daca:	4641      	mov	r1, r8
 800dacc:	9805      	ldr	r0, [sp, #20]
 800dace:	463a      	mov	r2, r7
 800dad0:	f7ff f9b2 	bl	800ce38 <__lshift>
 800dad4:	4680      	mov	r8, r0
 800dad6:	2800      	cmp	r0, #0
 800dad8:	f43f ae49 	beq.w	800d76e <_strtod_l+0x446>
 800dadc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dade:	9805      	ldr	r0, [sp, #20]
 800dae0:	464a      	mov	r2, r9
 800dae2:	f7ff fa31 	bl	800cf48 <__mdiff>
 800dae6:	4604      	mov	r4, r0
 800dae8:	2800      	cmp	r0, #0
 800daea:	f43f ae40 	beq.w	800d76e <_strtod_l+0x446>
 800daee:	68c3      	ldr	r3, [r0, #12]
 800daf0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800daf2:	2300      	movs	r3, #0
 800daf4:	60c3      	str	r3, [r0, #12]
 800daf6:	4641      	mov	r1, r8
 800daf8:	f7ff fa0a 	bl	800cf10 <__mcmp>
 800dafc:	2800      	cmp	r0, #0
 800dafe:	da45      	bge.n	800db8c <_strtod_l+0x864>
 800db00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db02:	ea53 030a 	orrs.w	r3, r3, sl
 800db06:	d16b      	bne.n	800dbe0 <_strtod_l+0x8b8>
 800db08:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d167      	bne.n	800dbe0 <_strtod_l+0x8b8>
 800db10:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800db14:	0d1b      	lsrs	r3, r3, #20
 800db16:	051b      	lsls	r3, r3, #20
 800db18:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800db1c:	d960      	bls.n	800dbe0 <_strtod_l+0x8b8>
 800db1e:	6963      	ldr	r3, [r4, #20]
 800db20:	b913      	cbnz	r3, 800db28 <_strtod_l+0x800>
 800db22:	6923      	ldr	r3, [r4, #16]
 800db24:	2b01      	cmp	r3, #1
 800db26:	dd5b      	ble.n	800dbe0 <_strtod_l+0x8b8>
 800db28:	4621      	mov	r1, r4
 800db2a:	2201      	movs	r2, #1
 800db2c:	9805      	ldr	r0, [sp, #20]
 800db2e:	f7ff f983 	bl	800ce38 <__lshift>
 800db32:	4641      	mov	r1, r8
 800db34:	4604      	mov	r4, r0
 800db36:	f7ff f9eb 	bl	800cf10 <__mcmp>
 800db3a:	2800      	cmp	r0, #0
 800db3c:	dd50      	ble.n	800dbe0 <_strtod_l+0x8b8>
 800db3e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800db42:	9a08      	ldr	r2, [sp, #32]
 800db44:	0d1b      	lsrs	r3, r3, #20
 800db46:	051b      	lsls	r3, r3, #20
 800db48:	2a00      	cmp	r2, #0
 800db4a:	d06a      	beq.n	800dc22 <_strtod_l+0x8fa>
 800db4c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800db50:	d867      	bhi.n	800dc22 <_strtod_l+0x8fa>
 800db52:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800db56:	f67f ae9d 	bls.w	800d894 <_strtod_l+0x56c>
 800db5a:	4b0a      	ldr	r3, [pc, #40]	@ (800db84 <_strtod_l+0x85c>)
 800db5c:	4650      	mov	r0, sl
 800db5e:	4659      	mov	r1, fp
 800db60:	2200      	movs	r2, #0
 800db62:	f7f2 fd49 	bl	80005f8 <__aeabi_dmul>
 800db66:	4b08      	ldr	r3, [pc, #32]	@ (800db88 <_strtod_l+0x860>)
 800db68:	400b      	ands	r3, r1
 800db6a:	4682      	mov	sl, r0
 800db6c:	468b      	mov	fp, r1
 800db6e:	2b00      	cmp	r3, #0
 800db70:	f47f ae08 	bne.w	800d784 <_strtod_l+0x45c>
 800db74:	9a05      	ldr	r2, [sp, #20]
 800db76:	2322      	movs	r3, #34	@ 0x22
 800db78:	6013      	str	r3, [r2, #0]
 800db7a:	e603      	b.n	800d784 <_strtod_l+0x45c>
 800db7c:	08010600 	.word	0x08010600
 800db80:	fffffc02 	.word	0xfffffc02
 800db84:	39500000 	.word	0x39500000
 800db88:	7ff00000 	.word	0x7ff00000
 800db8c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800db90:	d165      	bne.n	800dc5e <_strtod_l+0x936>
 800db92:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800db94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800db98:	b35a      	cbz	r2, 800dbf2 <_strtod_l+0x8ca>
 800db9a:	4a9f      	ldr	r2, [pc, #636]	@ (800de18 <_strtod_l+0xaf0>)
 800db9c:	4293      	cmp	r3, r2
 800db9e:	d12b      	bne.n	800dbf8 <_strtod_l+0x8d0>
 800dba0:	9b08      	ldr	r3, [sp, #32]
 800dba2:	4651      	mov	r1, sl
 800dba4:	b303      	cbz	r3, 800dbe8 <_strtod_l+0x8c0>
 800dba6:	4b9d      	ldr	r3, [pc, #628]	@ (800de1c <_strtod_l+0xaf4>)
 800dba8:	465a      	mov	r2, fp
 800dbaa:	4013      	ands	r3, r2
 800dbac:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800dbb0:	f04f 32ff 	mov.w	r2, #4294967295
 800dbb4:	d81b      	bhi.n	800dbee <_strtod_l+0x8c6>
 800dbb6:	0d1b      	lsrs	r3, r3, #20
 800dbb8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800dbbc:	fa02 f303 	lsl.w	r3, r2, r3
 800dbc0:	4299      	cmp	r1, r3
 800dbc2:	d119      	bne.n	800dbf8 <_strtod_l+0x8d0>
 800dbc4:	4b96      	ldr	r3, [pc, #600]	@ (800de20 <_strtod_l+0xaf8>)
 800dbc6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dbc8:	429a      	cmp	r2, r3
 800dbca:	d102      	bne.n	800dbd2 <_strtod_l+0x8aa>
 800dbcc:	3101      	adds	r1, #1
 800dbce:	f43f adce 	beq.w	800d76e <_strtod_l+0x446>
 800dbd2:	4b92      	ldr	r3, [pc, #584]	@ (800de1c <_strtod_l+0xaf4>)
 800dbd4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dbd6:	401a      	ands	r2, r3
 800dbd8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800dbdc:	f04f 0a00 	mov.w	sl, #0
 800dbe0:	9b08      	ldr	r3, [sp, #32]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d1b9      	bne.n	800db5a <_strtod_l+0x832>
 800dbe6:	e5cd      	b.n	800d784 <_strtod_l+0x45c>
 800dbe8:	f04f 33ff 	mov.w	r3, #4294967295
 800dbec:	e7e8      	b.n	800dbc0 <_strtod_l+0x898>
 800dbee:	4613      	mov	r3, r2
 800dbf0:	e7e6      	b.n	800dbc0 <_strtod_l+0x898>
 800dbf2:	ea53 030a 	orrs.w	r3, r3, sl
 800dbf6:	d0a2      	beq.n	800db3e <_strtod_l+0x816>
 800dbf8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800dbfa:	b1db      	cbz	r3, 800dc34 <_strtod_l+0x90c>
 800dbfc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dbfe:	4213      	tst	r3, r2
 800dc00:	d0ee      	beq.n	800dbe0 <_strtod_l+0x8b8>
 800dc02:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc04:	9a08      	ldr	r2, [sp, #32]
 800dc06:	4650      	mov	r0, sl
 800dc08:	4659      	mov	r1, fp
 800dc0a:	b1bb      	cbz	r3, 800dc3c <_strtod_l+0x914>
 800dc0c:	f7ff fb6e 	bl	800d2ec <sulp>
 800dc10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dc14:	ec53 2b10 	vmov	r2, r3, d0
 800dc18:	f7f2 fb38 	bl	800028c <__adddf3>
 800dc1c:	4682      	mov	sl, r0
 800dc1e:	468b      	mov	fp, r1
 800dc20:	e7de      	b.n	800dbe0 <_strtod_l+0x8b8>
 800dc22:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800dc26:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800dc2a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800dc2e:	f04f 3aff 	mov.w	sl, #4294967295
 800dc32:	e7d5      	b.n	800dbe0 <_strtod_l+0x8b8>
 800dc34:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800dc36:	ea13 0f0a 	tst.w	r3, sl
 800dc3a:	e7e1      	b.n	800dc00 <_strtod_l+0x8d8>
 800dc3c:	f7ff fb56 	bl	800d2ec <sulp>
 800dc40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dc44:	ec53 2b10 	vmov	r2, r3, d0
 800dc48:	f7f2 fb1e 	bl	8000288 <__aeabi_dsub>
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	2300      	movs	r3, #0
 800dc50:	4682      	mov	sl, r0
 800dc52:	468b      	mov	fp, r1
 800dc54:	f7f2 ff38 	bl	8000ac8 <__aeabi_dcmpeq>
 800dc58:	2800      	cmp	r0, #0
 800dc5a:	d0c1      	beq.n	800dbe0 <_strtod_l+0x8b8>
 800dc5c:	e61a      	b.n	800d894 <_strtod_l+0x56c>
 800dc5e:	4641      	mov	r1, r8
 800dc60:	4620      	mov	r0, r4
 800dc62:	f7ff facd 	bl	800d200 <__ratio>
 800dc66:	ec57 6b10 	vmov	r6, r7, d0
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800dc70:	4630      	mov	r0, r6
 800dc72:	4639      	mov	r1, r7
 800dc74:	f7f2 ff3c 	bl	8000af0 <__aeabi_dcmple>
 800dc78:	2800      	cmp	r0, #0
 800dc7a:	d06f      	beq.n	800dd5c <_strtod_l+0xa34>
 800dc7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d17a      	bne.n	800dd78 <_strtod_l+0xa50>
 800dc82:	f1ba 0f00 	cmp.w	sl, #0
 800dc86:	d158      	bne.n	800dd3a <_strtod_l+0xa12>
 800dc88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dc8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d15a      	bne.n	800dd48 <_strtod_l+0xa20>
 800dc92:	4b64      	ldr	r3, [pc, #400]	@ (800de24 <_strtod_l+0xafc>)
 800dc94:	2200      	movs	r2, #0
 800dc96:	4630      	mov	r0, r6
 800dc98:	4639      	mov	r1, r7
 800dc9a:	f7f2 ff1f 	bl	8000adc <__aeabi_dcmplt>
 800dc9e:	2800      	cmp	r0, #0
 800dca0:	d159      	bne.n	800dd56 <_strtod_l+0xa2e>
 800dca2:	4630      	mov	r0, r6
 800dca4:	4639      	mov	r1, r7
 800dca6:	4b60      	ldr	r3, [pc, #384]	@ (800de28 <_strtod_l+0xb00>)
 800dca8:	2200      	movs	r2, #0
 800dcaa:	f7f2 fca5 	bl	80005f8 <__aeabi_dmul>
 800dcae:	4606      	mov	r6, r0
 800dcb0:	460f      	mov	r7, r1
 800dcb2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800dcb6:	9606      	str	r6, [sp, #24]
 800dcb8:	9307      	str	r3, [sp, #28]
 800dcba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dcbe:	4d57      	ldr	r5, [pc, #348]	@ (800de1c <_strtod_l+0xaf4>)
 800dcc0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800dcc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dcc6:	401d      	ands	r5, r3
 800dcc8:	4b58      	ldr	r3, [pc, #352]	@ (800de2c <_strtod_l+0xb04>)
 800dcca:	429d      	cmp	r5, r3
 800dccc:	f040 80b2 	bne.w	800de34 <_strtod_l+0xb0c>
 800dcd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dcd2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800dcd6:	ec4b ab10 	vmov	d0, sl, fp
 800dcda:	f7ff f9c9 	bl	800d070 <__ulp>
 800dcde:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dce2:	ec51 0b10 	vmov	r0, r1, d0
 800dce6:	f7f2 fc87 	bl	80005f8 <__aeabi_dmul>
 800dcea:	4652      	mov	r2, sl
 800dcec:	465b      	mov	r3, fp
 800dcee:	f7f2 facd 	bl	800028c <__adddf3>
 800dcf2:	460b      	mov	r3, r1
 800dcf4:	4949      	ldr	r1, [pc, #292]	@ (800de1c <_strtod_l+0xaf4>)
 800dcf6:	4a4e      	ldr	r2, [pc, #312]	@ (800de30 <_strtod_l+0xb08>)
 800dcf8:	4019      	ands	r1, r3
 800dcfa:	4291      	cmp	r1, r2
 800dcfc:	4682      	mov	sl, r0
 800dcfe:	d942      	bls.n	800dd86 <_strtod_l+0xa5e>
 800dd00:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800dd02:	4b47      	ldr	r3, [pc, #284]	@ (800de20 <_strtod_l+0xaf8>)
 800dd04:	429a      	cmp	r2, r3
 800dd06:	d103      	bne.n	800dd10 <_strtod_l+0x9e8>
 800dd08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dd0a:	3301      	adds	r3, #1
 800dd0c:	f43f ad2f 	beq.w	800d76e <_strtod_l+0x446>
 800dd10:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800de20 <_strtod_l+0xaf8>
 800dd14:	f04f 3aff 	mov.w	sl, #4294967295
 800dd18:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dd1a:	9805      	ldr	r0, [sp, #20]
 800dd1c:	f7fe fe7c 	bl	800ca18 <_Bfree>
 800dd20:	9805      	ldr	r0, [sp, #20]
 800dd22:	4649      	mov	r1, r9
 800dd24:	f7fe fe78 	bl	800ca18 <_Bfree>
 800dd28:	9805      	ldr	r0, [sp, #20]
 800dd2a:	4641      	mov	r1, r8
 800dd2c:	f7fe fe74 	bl	800ca18 <_Bfree>
 800dd30:	9805      	ldr	r0, [sp, #20]
 800dd32:	4621      	mov	r1, r4
 800dd34:	f7fe fe70 	bl	800ca18 <_Bfree>
 800dd38:	e619      	b.n	800d96e <_strtod_l+0x646>
 800dd3a:	f1ba 0f01 	cmp.w	sl, #1
 800dd3e:	d103      	bne.n	800dd48 <_strtod_l+0xa20>
 800dd40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	f43f ada6 	beq.w	800d894 <_strtod_l+0x56c>
 800dd48:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800ddf8 <_strtod_l+0xad0>
 800dd4c:	4f35      	ldr	r7, [pc, #212]	@ (800de24 <_strtod_l+0xafc>)
 800dd4e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800dd52:	2600      	movs	r6, #0
 800dd54:	e7b1      	b.n	800dcba <_strtod_l+0x992>
 800dd56:	4f34      	ldr	r7, [pc, #208]	@ (800de28 <_strtod_l+0xb00>)
 800dd58:	2600      	movs	r6, #0
 800dd5a:	e7aa      	b.n	800dcb2 <_strtod_l+0x98a>
 800dd5c:	4b32      	ldr	r3, [pc, #200]	@ (800de28 <_strtod_l+0xb00>)
 800dd5e:	4630      	mov	r0, r6
 800dd60:	4639      	mov	r1, r7
 800dd62:	2200      	movs	r2, #0
 800dd64:	f7f2 fc48 	bl	80005f8 <__aeabi_dmul>
 800dd68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dd6a:	4606      	mov	r6, r0
 800dd6c:	460f      	mov	r7, r1
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d09f      	beq.n	800dcb2 <_strtod_l+0x98a>
 800dd72:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800dd76:	e7a0      	b.n	800dcba <_strtod_l+0x992>
 800dd78:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800de00 <_strtod_l+0xad8>
 800dd7c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800dd80:	ec57 6b17 	vmov	r6, r7, d7
 800dd84:	e799      	b.n	800dcba <_strtod_l+0x992>
 800dd86:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800dd8a:	9b08      	ldr	r3, [sp, #32]
 800dd8c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d1c1      	bne.n	800dd18 <_strtod_l+0x9f0>
 800dd94:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dd98:	0d1b      	lsrs	r3, r3, #20
 800dd9a:	051b      	lsls	r3, r3, #20
 800dd9c:	429d      	cmp	r5, r3
 800dd9e:	d1bb      	bne.n	800dd18 <_strtod_l+0x9f0>
 800dda0:	4630      	mov	r0, r6
 800dda2:	4639      	mov	r1, r7
 800dda4:	f7f2 ff88 	bl	8000cb8 <__aeabi_d2lz>
 800dda8:	f7f2 fbf8 	bl	800059c <__aeabi_l2d>
 800ddac:	4602      	mov	r2, r0
 800ddae:	460b      	mov	r3, r1
 800ddb0:	4630      	mov	r0, r6
 800ddb2:	4639      	mov	r1, r7
 800ddb4:	f7f2 fa68 	bl	8000288 <__aeabi_dsub>
 800ddb8:	460b      	mov	r3, r1
 800ddba:	4602      	mov	r2, r0
 800ddbc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ddc0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800ddc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ddc6:	ea46 060a 	orr.w	r6, r6, sl
 800ddca:	431e      	orrs	r6, r3
 800ddcc:	d06f      	beq.n	800deae <_strtod_l+0xb86>
 800ddce:	a30e      	add	r3, pc, #56	@ (adr r3, 800de08 <_strtod_l+0xae0>)
 800ddd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddd4:	f7f2 fe82 	bl	8000adc <__aeabi_dcmplt>
 800ddd8:	2800      	cmp	r0, #0
 800ddda:	f47f acd3 	bne.w	800d784 <_strtod_l+0x45c>
 800ddde:	a30c      	add	r3, pc, #48	@ (adr r3, 800de10 <_strtod_l+0xae8>)
 800dde0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dde4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dde8:	f7f2 fe96 	bl	8000b18 <__aeabi_dcmpgt>
 800ddec:	2800      	cmp	r0, #0
 800ddee:	d093      	beq.n	800dd18 <_strtod_l+0x9f0>
 800ddf0:	e4c8      	b.n	800d784 <_strtod_l+0x45c>
 800ddf2:	bf00      	nop
 800ddf4:	f3af 8000 	nop.w
 800ddf8:	00000000 	.word	0x00000000
 800ddfc:	bff00000 	.word	0xbff00000
 800de00:	00000000 	.word	0x00000000
 800de04:	3ff00000 	.word	0x3ff00000
 800de08:	94a03595 	.word	0x94a03595
 800de0c:	3fdfffff 	.word	0x3fdfffff
 800de10:	35afe535 	.word	0x35afe535
 800de14:	3fe00000 	.word	0x3fe00000
 800de18:	000fffff 	.word	0x000fffff
 800de1c:	7ff00000 	.word	0x7ff00000
 800de20:	7fefffff 	.word	0x7fefffff
 800de24:	3ff00000 	.word	0x3ff00000
 800de28:	3fe00000 	.word	0x3fe00000
 800de2c:	7fe00000 	.word	0x7fe00000
 800de30:	7c9fffff 	.word	0x7c9fffff
 800de34:	9b08      	ldr	r3, [sp, #32]
 800de36:	b323      	cbz	r3, 800de82 <_strtod_l+0xb5a>
 800de38:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800de3c:	d821      	bhi.n	800de82 <_strtod_l+0xb5a>
 800de3e:	a328      	add	r3, pc, #160	@ (adr r3, 800dee0 <_strtod_l+0xbb8>)
 800de40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de44:	4630      	mov	r0, r6
 800de46:	4639      	mov	r1, r7
 800de48:	f7f2 fe52 	bl	8000af0 <__aeabi_dcmple>
 800de4c:	b1a0      	cbz	r0, 800de78 <_strtod_l+0xb50>
 800de4e:	4639      	mov	r1, r7
 800de50:	4630      	mov	r0, r6
 800de52:	f7f2 fea9 	bl	8000ba8 <__aeabi_d2uiz>
 800de56:	2801      	cmp	r0, #1
 800de58:	bf38      	it	cc
 800de5a:	2001      	movcc	r0, #1
 800de5c:	f7f2 fb52 	bl	8000504 <__aeabi_ui2d>
 800de60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800de62:	4606      	mov	r6, r0
 800de64:	460f      	mov	r7, r1
 800de66:	b9fb      	cbnz	r3, 800dea8 <_strtod_l+0xb80>
 800de68:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800de6c:	9014      	str	r0, [sp, #80]	@ 0x50
 800de6e:	9315      	str	r3, [sp, #84]	@ 0x54
 800de70:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800de74:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800de78:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800de7a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800de7e:	1b5b      	subs	r3, r3, r5
 800de80:	9311      	str	r3, [sp, #68]	@ 0x44
 800de82:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800de86:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800de8a:	f7ff f8f1 	bl	800d070 <__ulp>
 800de8e:	4650      	mov	r0, sl
 800de90:	ec53 2b10 	vmov	r2, r3, d0
 800de94:	4659      	mov	r1, fp
 800de96:	f7f2 fbaf 	bl	80005f8 <__aeabi_dmul>
 800de9a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800de9e:	f7f2 f9f5 	bl	800028c <__adddf3>
 800dea2:	4682      	mov	sl, r0
 800dea4:	468b      	mov	fp, r1
 800dea6:	e770      	b.n	800dd8a <_strtod_l+0xa62>
 800dea8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800deac:	e7e0      	b.n	800de70 <_strtod_l+0xb48>
 800deae:	a30e      	add	r3, pc, #56	@ (adr r3, 800dee8 <_strtod_l+0xbc0>)
 800deb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deb4:	f7f2 fe12 	bl	8000adc <__aeabi_dcmplt>
 800deb8:	e798      	b.n	800ddec <_strtod_l+0xac4>
 800deba:	2300      	movs	r3, #0
 800debc:	930e      	str	r3, [sp, #56]	@ 0x38
 800debe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800dec0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dec2:	6013      	str	r3, [r2, #0]
 800dec4:	f7ff ba6d 	b.w	800d3a2 <_strtod_l+0x7a>
 800dec8:	2a65      	cmp	r2, #101	@ 0x65
 800deca:	f43f ab68 	beq.w	800d59e <_strtod_l+0x276>
 800dece:	2a45      	cmp	r2, #69	@ 0x45
 800ded0:	f43f ab65 	beq.w	800d59e <_strtod_l+0x276>
 800ded4:	2301      	movs	r3, #1
 800ded6:	f7ff bba0 	b.w	800d61a <_strtod_l+0x2f2>
 800deda:	bf00      	nop
 800dedc:	f3af 8000 	nop.w
 800dee0:	ffc00000 	.word	0xffc00000
 800dee4:	41dfffff 	.word	0x41dfffff
 800dee8:	94a03595 	.word	0x94a03595
 800deec:	3fcfffff 	.word	0x3fcfffff

0800def0 <_strtod_r>:
 800def0:	4b01      	ldr	r3, [pc, #4]	@ (800def8 <_strtod_r+0x8>)
 800def2:	f7ff ba19 	b.w	800d328 <_strtod_l>
 800def6:	bf00      	nop
 800def8:	200000b4 	.word	0x200000b4

0800defc <_strtol_l.isra.0>:
 800defc:	2b24      	cmp	r3, #36	@ 0x24
 800defe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df02:	4686      	mov	lr, r0
 800df04:	4690      	mov	r8, r2
 800df06:	d801      	bhi.n	800df0c <_strtol_l.isra.0+0x10>
 800df08:	2b01      	cmp	r3, #1
 800df0a:	d106      	bne.n	800df1a <_strtol_l.isra.0+0x1e>
 800df0c:	f7fd fd8a 	bl	800ba24 <__errno>
 800df10:	2316      	movs	r3, #22
 800df12:	6003      	str	r3, [r0, #0]
 800df14:	2000      	movs	r0, #0
 800df16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df1a:	4834      	ldr	r0, [pc, #208]	@ (800dfec <_strtol_l.isra.0+0xf0>)
 800df1c:	460d      	mov	r5, r1
 800df1e:	462a      	mov	r2, r5
 800df20:	f815 4b01 	ldrb.w	r4, [r5], #1
 800df24:	5d06      	ldrb	r6, [r0, r4]
 800df26:	f016 0608 	ands.w	r6, r6, #8
 800df2a:	d1f8      	bne.n	800df1e <_strtol_l.isra.0+0x22>
 800df2c:	2c2d      	cmp	r4, #45	@ 0x2d
 800df2e:	d110      	bne.n	800df52 <_strtol_l.isra.0+0x56>
 800df30:	782c      	ldrb	r4, [r5, #0]
 800df32:	2601      	movs	r6, #1
 800df34:	1c95      	adds	r5, r2, #2
 800df36:	f033 0210 	bics.w	r2, r3, #16
 800df3a:	d115      	bne.n	800df68 <_strtol_l.isra.0+0x6c>
 800df3c:	2c30      	cmp	r4, #48	@ 0x30
 800df3e:	d10d      	bne.n	800df5c <_strtol_l.isra.0+0x60>
 800df40:	782a      	ldrb	r2, [r5, #0]
 800df42:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800df46:	2a58      	cmp	r2, #88	@ 0x58
 800df48:	d108      	bne.n	800df5c <_strtol_l.isra.0+0x60>
 800df4a:	786c      	ldrb	r4, [r5, #1]
 800df4c:	3502      	adds	r5, #2
 800df4e:	2310      	movs	r3, #16
 800df50:	e00a      	b.n	800df68 <_strtol_l.isra.0+0x6c>
 800df52:	2c2b      	cmp	r4, #43	@ 0x2b
 800df54:	bf04      	itt	eq
 800df56:	782c      	ldrbeq	r4, [r5, #0]
 800df58:	1c95      	addeq	r5, r2, #2
 800df5a:	e7ec      	b.n	800df36 <_strtol_l.isra.0+0x3a>
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d1f6      	bne.n	800df4e <_strtol_l.isra.0+0x52>
 800df60:	2c30      	cmp	r4, #48	@ 0x30
 800df62:	bf14      	ite	ne
 800df64:	230a      	movne	r3, #10
 800df66:	2308      	moveq	r3, #8
 800df68:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800df6c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800df70:	2200      	movs	r2, #0
 800df72:	fbbc f9f3 	udiv	r9, ip, r3
 800df76:	4610      	mov	r0, r2
 800df78:	fb03 ca19 	mls	sl, r3, r9, ip
 800df7c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800df80:	2f09      	cmp	r7, #9
 800df82:	d80f      	bhi.n	800dfa4 <_strtol_l.isra.0+0xa8>
 800df84:	463c      	mov	r4, r7
 800df86:	42a3      	cmp	r3, r4
 800df88:	dd1b      	ble.n	800dfc2 <_strtol_l.isra.0+0xc6>
 800df8a:	1c57      	adds	r7, r2, #1
 800df8c:	d007      	beq.n	800df9e <_strtol_l.isra.0+0xa2>
 800df8e:	4581      	cmp	r9, r0
 800df90:	d314      	bcc.n	800dfbc <_strtol_l.isra.0+0xc0>
 800df92:	d101      	bne.n	800df98 <_strtol_l.isra.0+0x9c>
 800df94:	45a2      	cmp	sl, r4
 800df96:	db11      	blt.n	800dfbc <_strtol_l.isra.0+0xc0>
 800df98:	fb00 4003 	mla	r0, r0, r3, r4
 800df9c:	2201      	movs	r2, #1
 800df9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dfa2:	e7eb      	b.n	800df7c <_strtol_l.isra.0+0x80>
 800dfa4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800dfa8:	2f19      	cmp	r7, #25
 800dfaa:	d801      	bhi.n	800dfb0 <_strtol_l.isra.0+0xb4>
 800dfac:	3c37      	subs	r4, #55	@ 0x37
 800dfae:	e7ea      	b.n	800df86 <_strtol_l.isra.0+0x8a>
 800dfb0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800dfb4:	2f19      	cmp	r7, #25
 800dfb6:	d804      	bhi.n	800dfc2 <_strtol_l.isra.0+0xc6>
 800dfb8:	3c57      	subs	r4, #87	@ 0x57
 800dfba:	e7e4      	b.n	800df86 <_strtol_l.isra.0+0x8a>
 800dfbc:	f04f 32ff 	mov.w	r2, #4294967295
 800dfc0:	e7ed      	b.n	800df9e <_strtol_l.isra.0+0xa2>
 800dfc2:	1c53      	adds	r3, r2, #1
 800dfc4:	d108      	bne.n	800dfd8 <_strtol_l.isra.0+0xdc>
 800dfc6:	2322      	movs	r3, #34	@ 0x22
 800dfc8:	f8ce 3000 	str.w	r3, [lr]
 800dfcc:	4660      	mov	r0, ip
 800dfce:	f1b8 0f00 	cmp.w	r8, #0
 800dfd2:	d0a0      	beq.n	800df16 <_strtol_l.isra.0+0x1a>
 800dfd4:	1e69      	subs	r1, r5, #1
 800dfd6:	e006      	b.n	800dfe6 <_strtol_l.isra.0+0xea>
 800dfd8:	b106      	cbz	r6, 800dfdc <_strtol_l.isra.0+0xe0>
 800dfda:	4240      	negs	r0, r0
 800dfdc:	f1b8 0f00 	cmp.w	r8, #0
 800dfe0:	d099      	beq.n	800df16 <_strtol_l.isra.0+0x1a>
 800dfe2:	2a00      	cmp	r2, #0
 800dfe4:	d1f6      	bne.n	800dfd4 <_strtol_l.isra.0+0xd8>
 800dfe6:	f8c8 1000 	str.w	r1, [r8]
 800dfea:	e794      	b.n	800df16 <_strtol_l.isra.0+0x1a>
 800dfec:	08010629 	.word	0x08010629

0800dff0 <_strtol_r>:
 800dff0:	f7ff bf84 	b.w	800defc <_strtol_l.isra.0>

0800dff4 <__ssputs_r>:
 800dff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dff8:	688e      	ldr	r6, [r1, #8]
 800dffa:	461f      	mov	r7, r3
 800dffc:	42be      	cmp	r6, r7
 800dffe:	680b      	ldr	r3, [r1, #0]
 800e000:	4682      	mov	sl, r0
 800e002:	460c      	mov	r4, r1
 800e004:	4690      	mov	r8, r2
 800e006:	d82d      	bhi.n	800e064 <__ssputs_r+0x70>
 800e008:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e00c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e010:	d026      	beq.n	800e060 <__ssputs_r+0x6c>
 800e012:	6965      	ldr	r5, [r4, #20]
 800e014:	6909      	ldr	r1, [r1, #16]
 800e016:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e01a:	eba3 0901 	sub.w	r9, r3, r1
 800e01e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e022:	1c7b      	adds	r3, r7, #1
 800e024:	444b      	add	r3, r9
 800e026:	106d      	asrs	r5, r5, #1
 800e028:	429d      	cmp	r5, r3
 800e02a:	bf38      	it	cc
 800e02c:	461d      	movcc	r5, r3
 800e02e:	0553      	lsls	r3, r2, #21
 800e030:	d527      	bpl.n	800e082 <__ssputs_r+0x8e>
 800e032:	4629      	mov	r1, r5
 800e034:	f7fe fc24 	bl	800c880 <_malloc_r>
 800e038:	4606      	mov	r6, r0
 800e03a:	b360      	cbz	r0, 800e096 <__ssputs_r+0xa2>
 800e03c:	6921      	ldr	r1, [r4, #16]
 800e03e:	464a      	mov	r2, r9
 800e040:	f7fd fd1d 	bl	800ba7e <memcpy>
 800e044:	89a3      	ldrh	r3, [r4, #12]
 800e046:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e04a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e04e:	81a3      	strh	r3, [r4, #12]
 800e050:	6126      	str	r6, [r4, #16]
 800e052:	6165      	str	r5, [r4, #20]
 800e054:	444e      	add	r6, r9
 800e056:	eba5 0509 	sub.w	r5, r5, r9
 800e05a:	6026      	str	r6, [r4, #0]
 800e05c:	60a5      	str	r5, [r4, #8]
 800e05e:	463e      	mov	r6, r7
 800e060:	42be      	cmp	r6, r7
 800e062:	d900      	bls.n	800e066 <__ssputs_r+0x72>
 800e064:	463e      	mov	r6, r7
 800e066:	6820      	ldr	r0, [r4, #0]
 800e068:	4632      	mov	r2, r6
 800e06a:	4641      	mov	r1, r8
 800e06c:	f000 fb7c 	bl	800e768 <memmove>
 800e070:	68a3      	ldr	r3, [r4, #8]
 800e072:	1b9b      	subs	r3, r3, r6
 800e074:	60a3      	str	r3, [r4, #8]
 800e076:	6823      	ldr	r3, [r4, #0]
 800e078:	4433      	add	r3, r6
 800e07a:	6023      	str	r3, [r4, #0]
 800e07c:	2000      	movs	r0, #0
 800e07e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e082:	462a      	mov	r2, r5
 800e084:	f000 ff3d 	bl	800ef02 <_realloc_r>
 800e088:	4606      	mov	r6, r0
 800e08a:	2800      	cmp	r0, #0
 800e08c:	d1e0      	bne.n	800e050 <__ssputs_r+0x5c>
 800e08e:	6921      	ldr	r1, [r4, #16]
 800e090:	4650      	mov	r0, sl
 800e092:	f7fe fb81 	bl	800c798 <_free_r>
 800e096:	230c      	movs	r3, #12
 800e098:	f8ca 3000 	str.w	r3, [sl]
 800e09c:	89a3      	ldrh	r3, [r4, #12]
 800e09e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e0a2:	81a3      	strh	r3, [r4, #12]
 800e0a4:	f04f 30ff 	mov.w	r0, #4294967295
 800e0a8:	e7e9      	b.n	800e07e <__ssputs_r+0x8a>
	...

0800e0ac <_svfiprintf_r>:
 800e0ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0b0:	4698      	mov	r8, r3
 800e0b2:	898b      	ldrh	r3, [r1, #12]
 800e0b4:	061b      	lsls	r3, r3, #24
 800e0b6:	b09d      	sub	sp, #116	@ 0x74
 800e0b8:	4607      	mov	r7, r0
 800e0ba:	460d      	mov	r5, r1
 800e0bc:	4614      	mov	r4, r2
 800e0be:	d510      	bpl.n	800e0e2 <_svfiprintf_r+0x36>
 800e0c0:	690b      	ldr	r3, [r1, #16]
 800e0c2:	b973      	cbnz	r3, 800e0e2 <_svfiprintf_r+0x36>
 800e0c4:	2140      	movs	r1, #64	@ 0x40
 800e0c6:	f7fe fbdb 	bl	800c880 <_malloc_r>
 800e0ca:	6028      	str	r0, [r5, #0]
 800e0cc:	6128      	str	r0, [r5, #16]
 800e0ce:	b930      	cbnz	r0, 800e0de <_svfiprintf_r+0x32>
 800e0d0:	230c      	movs	r3, #12
 800e0d2:	603b      	str	r3, [r7, #0]
 800e0d4:	f04f 30ff 	mov.w	r0, #4294967295
 800e0d8:	b01d      	add	sp, #116	@ 0x74
 800e0da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0de:	2340      	movs	r3, #64	@ 0x40
 800e0e0:	616b      	str	r3, [r5, #20]
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800e0e6:	2320      	movs	r3, #32
 800e0e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e0ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800e0f0:	2330      	movs	r3, #48	@ 0x30
 800e0f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e290 <_svfiprintf_r+0x1e4>
 800e0f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e0fa:	f04f 0901 	mov.w	r9, #1
 800e0fe:	4623      	mov	r3, r4
 800e100:	469a      	mov	sl, r3
 800e102:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e106:	b10a      	cbz	r2, 800e10c <_svfiprintf_r+0x60>
 800e108:	2a25      	cmp	r2, #37	@ 0x25
 800e10a:	d1f9      	bne.n	800e100 <_svfiprintf_r+0x54>
 800e10c:	ebba 0b04 	subs.w	fp, sl, r4
 800e110:	d00b      	beq.n	800e12a <_svfiprintf_r+0x7e>
 800e112:	465b      	mov	r3, fp
 800e114:	4622      	mov	r2, r4
 800e116:	4629      	mov	r1, r5
 800e118:	4638      	mov	r0, r7
 800e11a:	f7ff ff6b 	bl	800dff4 <__ssputs_r>
 800e11e:	3001      	adds	r0, #1
 800e120:	f000 80a7 	beq.w	800e272 <_svfiprintf_r+0x1c6>
 800e124:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e126:	445a      	add	r2, fp
 800e128:	9209      	str	r2, [sp, #36]	@ 0x24
 800e12a:	f89a 3000 	ldrb.w	r3, [sl]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	f000 809f 	beq.w	800e272 <_svfiprintf_r+0x1c6>
 800e134:	2300      	movs	r3, #0
 800e136:	f04f 32ff 	mov.w	r2, #4294967295
 800e13a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e13e:	f10a 0a01 	add.w	sl, sl, #1
 800e142:	9304      	str	r3, [sp, #16]
 800e144:	9307      	str	r3, [sp, #28]
 800e146:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e14a:	931a      	str	r3, [sp, #104]	@ 0x68
 800e14c:	4654      	mov	r4, sl
 800e14e:	2205      	movs	r2, #5
 800e150:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e154:	484e      	ldr	r0, [pc, #312]	@ (800e290 <_svfiprintf_r+0x1e4>)
 800e156:	f7f2 f83b 	bl	80001d0 <memchr>
 800e15a:	9a04      	ldr	r2, [sp, #16]
 800e15c:	b9d8      	cbnz	r0, 800e196 <_svfiprintf_r+0xea>
 800e15e:	06d0      	lsls	r0, r2, #27
 800e160:	bf44      	itt	mi
 800e162:	2320      	movmi	r3, #32
 800e164:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e168:	0711      	lsls	r1, r2, #28
 800e16a:	bf44      	itt	mi
 800e16c:	232b      	movmi	r3, #43	@ 0x2b
 800e16e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e172:	f89a 3000 	ldrb.w	r3, [sl]
 800e176:	2b2a      	cmp	r3, #42	@ 0x2a
 800e178:	d015      	beq.n	800e1a6 <_svfiprintf_r+0xfa>
 800e17a:	9a07      	ldr	r2, [sp, #28]
 800e17c:	4654      	mov	r4, sl
 800e17e:	2000      	movs	r0, #0
 800e180:	f04f 0c0a 	mov.w	ip, #10
 800e184:	4621      	mov	r1, r4
 800e186:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e18a:	3b30      	subs	r3, #48	@ 0x30
 800e18c:	2b09      	cmp	r3, #9
 800e18e:	d94b      	bls.n	800e228 <_svfiprintf_r+0x17c>
 800e190:	b1b0      	cbz	r0, 800e1c0 <_svfiprintf_r+0x114>
 800e192:	9207      	str	r2, [sp, #28]
 800e194:	e014      	b.n	800e1c0 <_svfiprintf_r+0x114>
 800e196:	eba0 0308 	sub.w	r3, r0, r8
 800e19a:	fa09 f303 	lsl.w	r3, r9, r3
 800e19e:	4313      	orrs	r3, r2
 800e1a0:	9304      	str	r3, [sp, #16]
 800e1a2:	46a2      	mov	sl, r4
 800e1a4:	e7d2      	b.n	800e14c <_svfiprintf_r+0xa0>
 800e1a6:	9b03      	ldr	r3, [sp, #12]
 800e1a8:	1d19      	adds	r1, r3, #4
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	9103      	str	r1, [sp, #12]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	bfbb      	ittet	lt
 800e1b2:	425b      	neglt	r3, r3
 800e1b4:	f042 0202 	orrlt.w	r2, r2, #2
 800e1b8:	9307      	strge	r3, [sp, #28]
 800e1ba:	9307      	strlt	r3, [sp, #28]
 800e1bc:	bfb8      	it	lt
 800e1be:	9204      	strlt	r2, [sp, #16]
 800e1c0:	7823      	ldrb	r3, [r4, #0]
 800e1c2:	2b2e      	cmp	r3, #46	@ 0x2e
 800e1c4:	d10a      	bne.n	800e1dc <_svfiprintf_r+0x130>
 800e1c6:	7863      	ldrb	r3, [r4, #1]
 800e1c8:	2b2a      	cmp	r3, #42	@ 0x2a
 800e1ca:	d132      	bne.n	800e232 <_svfiprintf_r+0x186>
 800e1cc:	9b03      	ldr	r3, [sp, #12]
 800e1ce:	1d1a      	adds	r2, r3, #4
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	9203      	str	r2, [sp, #12]
 800e1d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e1d8:	3402      	adds	r4, #2
 800e1da:	9305      	str	r3, [sp, #20]
 800e1dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e2a0 <_svfiprintf_r+0x1f4>
 800e1e0:	7821      	ldrb	r1, [r4, #0]
 800e1e2:	2203      	movs	r2, #3
 800e1e4:	4650      	mov	r0, sl
 800e1e6:	f7f1 fff3 	bl	80001d0 <memchr>
 800e1ea:	b138      	cbz	r0, 800e1fc <_svfiprintf_r+0x150>
 800e1ec:	9b04      	ldr	r3, [sp, #16]
 800e1ee:	eba0 000a 	sub.w	r0, r0, sl
 800e1f2:	2240      	movs	r2, #64	@ 0x40
 800e1f4:	4082      	lsls	r2, r0
 800e1f6:	4313      	orrs	r3, r2
 800e1f8:	3401      	adds	r4, #1
 800e1fa:	9304      	str	r3, [sp, #16]
 800e1fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e200:	4824      	ldr	r0, [pc, #144]	@ (800e294 <_svfiprintf_r+0x1e8>)
 800e202:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e206:	2206      	movs	r2, #6
 800e208:	f7f1 ffe2 	bl	80001d0 <memchr>
 800e20c:	2800      	cmp	r0, #0
 800e20e:	d036      	beq.n	800e27e <_svfiprintf_r+0x1d2>
 800e210:	4b21      	ldr	r3, [pc, #132]	@ (800e298 <_svfiprintf_r+0x1ec>)
 800e212:	bb1b      	cbnz	r3, 800e25c <_svfiprintf_r+0x1b0>
 800e214:	9b03      	ldr	r3, [sp, #12]
 800e216:	3307      	adds	r3, #7
 800e218:	f023 0307 	bic.w	r3, r3, #7
 800e21c:	3308      	adds	r3, #8
 800e21e:	9303      	str	r3, [sp, #12]
 800e220:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e222:	4433      	add	r3, r6
 800e224:	9309      	str	r3, [sp, #36]	@ 0x24
 800e226:	e76a      	b.n	800e0fe <_svfiprintf_r+0x52>
 800e228:	fb0c 3202 	mla	r2, ip, r2, r3
 800e22c:	460c      	mov	r4, r1
 800e22e:	2001      	movs	r0, #1
 800e230:	e7a8      	b.n	800e184 <_svfiprintf_r+0xd8>
 800e232:	2300      	movs	r3, #0
 800e234:	3401      	adds	r4, #1
 800e236:	9305      	str	r3, [sp, #20]
 800e238:	4619      	mov	r1, r3
 800e23a:	f04f 0c0a 	mov.w	ip, #10
 800e23e:	4620      	mov	r0, r4
 800e240:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e244:	3a30      	subs	r2, #48	@ 0x30
 800e246:	2a09      	cmp	r2, #9
 800e248:	d903      	bls.n	800e252 <_svfiprintf_r+0x1a6>
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d0c6      	beq.n	800e1dc <_svfiprintf_r+0x130>
 800e24e:	9105      	str	r1, [sp, #20]
 800e250:	e7c4      	b.n	800e1dc <_svfiprintf_r+0x130>
 800e252:	fb0c 2101 	mla	r1, ip, r1, r2
 800e256:	4604      	mov	r4, r0
 800e258:	2301      	movs	r3, #1
 800e25a:	e7f0      	b.n	800e23e <_svfiprintf_r+0x192>
 800e25c:	ab03      	add	r3, sp, #12
 800e25e:	9300      	str	r3, [sp, #0]
 800e260:	462a      	mov	r2, r5
 800e262:	4b0e      	ldr	r3, [pc, #56]	@ (800e29c <_svfiprintf_r+0x1f0>)
 800e264:	a904      	add	r1, sp, #16
 800e266:	4638      	mov	r0, r7
 800e268:	f7fc fb02 	bl	800a870 <_printf_float>
 800e26c:	1c42      	adds	r2, r0, #1
 800e26e:	4606      	mov	r6, r0
 800e270:	d1d6      	bne.n	800e220 <_svfiprintf_r+0x174>
 800e272:	89ab      	ldrh	r3, [r5, #12]
 800e274:	065b      	lsls	r3, r3, #25
 800e276:	f53f af2d 	bmi.w	800e0d4 <_svfiprintf_r+0x28>
 800e27a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e27c:	e72c      	b.n	800e0d8 <_svfiprintf_r+0x2c>
 800e27e:	ab03      	add	r3, sp, #12
 800e280:	9300      	str	r3, [sp, #0]
 800e282:	462a      	mov	r2, r5
 800e284:	4b05      	ldr	r3, [pc, #20]	@ (800e29c <_svfiprintf_r+0x1f0>)
 800e286:	a904      	add	r1, sp, #16
 800e288:	4638      	mov	r0, r7
 800e28a:	f7fc fd89 	bl	800ada0 <_printf_i>
 800e28e:	e7ed      	b.n	800e26c <_svfiprintf_r+0x1c0>
 800e290:	08010460 	.word	0x08010460
 800e294:	0801046a 	.word	0x0801046a
 800e298:	0800a871 	.word	0x0800a871
 800e29c:	0800dff5 	.word	0x0800dff5
 800e2a0:	08010466 	.word	0x08010466

0800e2a4 <__sfputc_r>:
 800e2a4:	6893      	ldr	r3, [r2, #8]
 800e2a6:	3b01      	subs	r3, #1
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	b410      	push	{r4}
 800e2ac:	6093      	str	r3, [r2, #8]
 800e2ae:	da08      	bge.n	800e2c2 <__sfputc_r+0x1e>
 800e2b0:	6994      	ldr	r4, [r2, #24]
 800e2b2:	42a3      	cmp	r3, r4
 800e2b4:	db01      	blt.n	800e2ba <__sfputc_r+0x16>
 800e2b6:	290a      	cmp	r1, #10
 800e2b8:	d103      	bne.n	800e2c2 <__sfputc_r+0x1e>
 800e2ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e2be:	f7fd ba3d 	b.w	800b73c <__swbuf_r>
 800e2c2:	6813      	ldr	r3, [r2, #0]
 800e2c4:	1c58      	adds	r0, r3, #1
 800e2c6:	6010      	str	r0, [r2, #0]
 800e2c8:	7019      	strb	r1, [r3, #0]
 800e2ca:	4608      	mov	r0, r1
 800e2cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e2d0:	4770      	bx	lr

0800e2d2 <__sfputs_r>:
 800e2d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2d4:	4606      	mov	r6, r0
 800e2d6:	460f      	mov	r7, r1
 800e2d8:	4614      	mov	r4, r2
 800e2da:	18d5      	adds	r5, r2, r3
 800e2dc:	42ac      	cmp	r4, r5
 800e2de:	d101      	bne.n	800e2e4 <__sfputs_r+0x12>
 800e2e0:	2000      	movs	r0, #0
 800e2e2:	e007      	b.n	800e2f4 <__sfputs_r+0x22>
 800e2e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2e8:	463a      	mov	r2, r7
 800e2ea:	4630      	mov	r0, r6
 800e2ec:	f7ff ffda 	bl	800e2a4 <__sfputc_r>
 800e2f0:	1c43      	adds	r3, r0, #1
 800e2f2:	d1f3      	bne.n	800e2dc <__sfputs_r+0xa>
 800e2f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e2f8 <_vfiprintf_r>:
 800e2f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2fc:	460d      	mov	r5, r1
 800e2fe:	b09d      	sub	sp, #116	@ 0x74
 800e300:	4614      	mov	r4, r2
 800e302:	4698      	mov	r8, r3
 800e304:	4606      	mov	r6, r0
 800e306:	b118      	cbz	r0, 800e310 <_vfiprintf_r+0x18>
 800e308:	6a03      	ldr	r3, [r0, #32]
 800e30a:	b90b      	cbnz	r3, 800e310 <_vfiprintf_r+0x18>
 800e30c:	f7fd f900 	bl	800b510 <__sinit>
 800e310:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e312:	07d9      	lsls	r1, r3, #31
 800e314:	d405      	bmi.n	800e322 <_vfiprintf_r+0x2a>
 800e316:	89ab      	ldrh	r3, [r5, #12]
 800e318:	059a      	lsls	r2, r3, #22
 800e31a:	d402      	bmi.n	800e322 <_vfiprintf_r+0x2a>
 800e31c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e31e:	f7fd fbac 	bl	800ba7a <__retarget_lock_acquire_recursive>
 800e322:	89ab      	ldrh	r3, [r5, #12]
 800e324:	071b      	lsls	r3, r3, #28
 800e326:	d501      	bpl.n	800e32c <_vfiprintf_r+0x34>
 800e328:	692b      	ldr	r3, [r5, #16]
 800e32a:	b99b      	cbnz	r3, 800e354 <_vfiprintf_r+0x5c>
 800e32c:	4629      	mov	r1, r5
 800e32e:	4630      	mov	r0, r6
 800e330:	f7fd fa42 	bl	800b7b8 <__swsetup_r>
 800e334:	b170      	cbz	r0, 800e354 <_vfiprintf_r+0x5c>
 800e336:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e338:	07dc      	lsls	r4, r3, #31
 800e33a:	d504      	bpl.n	800e346 <_vfiprintf_r+0x4e>
 800e33c:	f04f 30ff 	mov.w	r0, #4294967295
 800e340:	b01d      	add	sp, #116	@ 0x74
 800e342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e346:	89ab      	ldrh	r3, [r5, #12]
 800e348:	0598      	lsls	r0, r3, #22
 800e34a:	d4f7      	bmi.n	800e33c <_vfiprintf_r+0x44>
 800e34c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e34e:	f7fd fb95 	bl	800ba7c <__retarget_lock_release_recursive>
 800e352:	e7f3      	b.n	800e33c <_vfiprintf_r+0x44>
 800e354:	2300      	movs	r3, #0
 800e356:	9309      	str	r3, [sp, #36]	@ 0x24
 800e358:	2320      	movs	r3, #32
 800e35a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e35e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e362:	2330      	movs	r3, #48	@ 0x30
 800e364:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e514 <_vfiprintf_r+0x21c>
 800e368:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e36c:	f04f 0901 	mov.w	r9, #1
 800e370:	4623      	mov	r3, r4
 800e372:	469a      	mov	sl, r3
 800e374:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e378:	b10a      	cbz	r2, 800e37e <_vfiprintf_r+0x86>
 800e37a:	2a25      	cmp	r2, #37	@ 0x25
 800e37c:	d1f9      	bne.n	800e372 <_vfiprintf_r+0x7a>
 800e37e:	ebba 0b04 	subs.w	fp, sl, r4
 800e382:	d00b      	beq.n	800e39c <_vfiprintf_r+0xa4>
 800e384:	465b      	mov	r3, fp
 800e386:	4622      	mov	r2, r4
 800e388:	4629      	mov	r1, r5
 800e38a:	4630      	mov	r0, r6
 800e38c:	f7ff ffa1 	bl	800e2d2 <__sfputs_r>
 800e390:	3001      	adds	r0, #1
 800e392:	f000 80a7 	beq.w	800e4e4 <_vfiprintf_r+0x1ec>
 800e396:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e398:	445a      	add	r2, fp
 800e39a:	9209      	str	r2, [sp, #36]	@ 0x24
 800e39c:	f89a 3000 	ldrb.w	r3, [sl]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	f000 809f 	beq.w	800e4e4 <_vfiprintf_r+0x1ec>
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	f04f 32ff 	mov.w	r2, #4294967295
 800e3ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e3b0:	f10a 0a01 	add.w	sl, sl, #1
 800e3b4:	9304      	str	r3, [sp, #16]
 800e3b6:	9307      	str	r3, [sp, #28]
 800e3b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e3bc:	931a      	str	r3, [sp, #104]	@ 0x68
 800e3be:	4654      	mov	r4, sl
 800e3c0:	2205      	movs	r2, #5
 800e3c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3c6:	4853      	ldr	r0, [pc, #332]	@ (800e514 <_vfiprintf_r+0x21c>)
 800e3c8:	f7f1 ff02 	bl	80001d0 <memchr>
 800e3cc:	9a04      	ldr	r2, [sp, #16]
 800e3ce:	b9d8      	cbnz	r0, 800e408 <_vfiprintf_r+0x110>
 800e3d0:	06d1      	lsls	r1, r2, #27
 800e3d2:	bf44      	itt	mi
 800e3d4:	2320      	movmi	r3, #32
 800e3d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e3da:	0713      	lsls	r3, r2, #28
 800e3dc:	bf44      	itt	mi
 800e3de:	232b      	movmi	r3, #43	@ 0x2b
 800e3e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e3e4:	f89a 3000 	ldrb.w	r3, [sl]
 800e3e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800e3ea:	d015      	beq.n	800e418 <_vfiprintf_r+0x120>
 800e3ec:	9a07      	ldr	r2, [sp, #28]
 800e3ee:	4654      	mov	r4, sl
 800e3f0:	2000      	movs	r0, #0
 800e3f2:	f04f 0c0a 	mov.w	ip, #10
 800e3f6:	4621      	mov	r1, r4
 800e3f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e3fc:	3b30      	subs	r3, #48	@ 0x30
 800e3fe:	2b09      	cmp	r3, #9
 800e400:	d94b      	bls.n	800e49a <_vfiprintf_r+0x1a2>
 800e402:	b1b0      	cbz	r0, 800e432 <_vfiprintf_r+0x13a>
 800e404:	9207      	str	r2, [sp, #28]
 800e406:	e014      	b.n	800e432 <_vfiprintf_r+0x13a>
 800e408:	eba0 0308 	sub.w	r3, r0, r8
 800e40c:	fa09 f303 	lsl.w	r3, r9, r3
 800e410:	4313      	orrs	r3, r2
 800e412:	9304      	str	r3, [sp, #16]
 800e414:	46a2      	mov	sl, r4
 800e416:	e7d2      	b.n	800e3be <_vfiprintf_r+0xc6>
 800e418:	9b03      	ldr	r3, [sp, #12]
 800e41a:	1d19      	adds	r1, r3, #4
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	9103      	str	r1, [sp, #12]
 800e420:	2b00      	cmp	r3, #0
 800e422:	bfbb      	ittet	lt
 800e424:	425b      	neglt	r3, r3
 800e426:	f042 0202 	orrlt.w	r2, r2, #2
 800e42a:	9307      	strge	r3, [sp, #28]
 800e42c:	9307      	strlt	r3, [sp, #28]
 800e42e:	bfb8      	it	lt
 800e430:	9204      	strlt	r2, [sp, #16]
 800e432:	7823      	ldrb	r3, [r4, #0]
 800e434:	2b2e      	cmp	r3, #46	@ 0x2e
 800e436:	d10a      	bne.n	800e44e <_vfiprintf_r+0x156>
 800e438:	7863      	ldrb	r3, [r4, #1]
 800e43a:	2b2a      	cmp	r3, #42	@ 0x2a
 800e43c:	d132      	bne.n	800e4a4 <_vfiprintf_r+0x1ac>
 800e43e:	9b03      	ldr	r3, [sp, #12]
 800e440:	1d1a      	adds	r2, r3, #4
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	9203      	str	r2, [sp, #12]
 800e446:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e44a:	3402      	adds	r4, #2
 800e44c:	9305      	str	r3, [sp, #20]
 800e44e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e524 <_vfiprintf_r+0x22c>
 800e452:	7821      	ldrb	r1, [r4, #0]
 800e454:	2203      	movs	r2, #3
 800e456:	4650      	mov	r0, sl
 800e458:	f7f1 feba 	bl	80001d0 <memchr>
 800e45c:	b138      	cbz	r0, 800e46e <_vfiprintf_r+0x176>
 800e45e:	9b04      	ldr	r3, [sp, #16]
 800e460:	eba0 000a 	sub.w	r0, r0, sl
 800e464:	2240      	movs	r2, #64	@ 0x40
 800e466:	4082      	lsls	r2, r0
 800e468:	4313      	orrs	r3, r2
 800e46a:	3401      	adds	r4, #1
 800e46c:	9304      	str	r3, [sp, #16]
 800e46e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e472:	4829      	ldr	r0, [pc, #164]	@ (800e518 <_vfiprintf_r+0x220>)
 800e474:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e478:	2206      	movs	r2, #6
 800e47a:	f7f1 fea9 	bl	80001d0 <memchr>
 800e47e:	2800      	cmp	r0, #0
 800e480:	d03f      	beq.n	800e502 <_vfiprintf_r+0x20a>
 800e482:	4b26      	ldr	r3, [pc, #152]	@ (800e51c <_vfiprintf_r+0x224>)
 800e484:	bb1b      	cbnz	r3, 800e4ce <_vfiprintf_r+0x1d6>
 800e486:	9b03      	ldr	r3, [sp, #12]
 800e488:	3307      	adds	r3, #7
 800e48a:	f023 0307 	bic.w	r3, r3, #7
 800e48e:	3308      	adds	r3, #8
 800e490:	9303      	str	r3, [sp, #12]
 800e492:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e494:	443b      	add	r3, r7
 800e496:	9309      	str	r3, [sp, #36]	@ 0x24
 800e498:	e76a      	b.n	800e370 <_vfiprintf_r+0x78>
 800e49a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e49e:	460c      	mov	r4, r1
 800e4a0:	2001      	movs	r0, #1
 800e4a2:	e7a8      	b.n	800e3f6 <_vfiprintf_r+0xfe>
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	3401      	adds	r4, #1
 800e4a8:	9305      	str	r3, [sp, #20]
 800e4aa:	4619      	mov	r1, r3
 800e4ac:	f04f 0c0a 	mov.w	ip, #10
 800e4b0:	4620      	mov	r0, r4
 800e4b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e4b6:	3a30      	subs	r2, #48	@ 0x30
 800e4b8:	2a09      	cmp	r2, #9
 800e4ba:	d903      	bls.n	800e4c4 <_vfiprintf_r+0x1cc>
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d0c6      	beq.n	800e44e <_vfiprintf_r+0x156>
 800e4c0:	9105      	str	r1, [sp, #20]
 800e4c2:	e7c4      	b.n	800e44e <_vfiprintf_r+0x156>
 800e4c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800e4c8:	4604      	mov	r4, r0
 800e4ca:	2301      	movs	r3, #1
 800e4cc:	e7f0      	b.n	800e4b0 <_vfiprintf_r+0x1b8>
 800e4ce:	ab03      	add	r3, sp, #12
 800e4d0:	9300      	str	r3, [sp, #0]
 800e4d2:	462a      	mov	r2, r5
 800e4d4:	4b12      	ldr	r3, [pc, #72]	@ (800e520 <_vfiprintf_r+0x228>)
 800e4d6:	a904      	add	r1, sp, #16
 800e4d8:	4630      	mov	r0, r6
 800e4da:	f7fc f9c9 	bl	800a870 <_printf_float>
 800e4de:	4607      	mov	r7, r0
 800e4e0:	1c78      	adds	r0, r7, #1
 800e4e2:	d1d6      	bne.n	800e492 <_vfiprintf_r+0x19a>
 800e4e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e4e6:	07d9      	lsls	r1, r3, #31
 800e4e8:	d405      	bmi.n	800e4f6 <_vfiprintf_r+0x1fe>
 800e4ea:	89ab      	ldrh	r3, [r5, #12]
 800e4ec:	059a      	lsls	r2, r3, #22
 800e4ee:	d402      	bmi.n	800e4f6 <_vfiprintf_r+0x1fe>
 800e4f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e4f2:	f7fd fac3 	bl	800ba7c <__retarget_lock_release_recursive>
 800e4f6:	89ab      	ldrh	r3, [r5, #12]
 800e4f8:	065b      	lsls	r3, r3, #25
 800e4fa:	f53f af1f 	bmi.w	800e33c <_vfiprintf_r+0x44>
 800e4fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e500:	e71e      	b.n	800e340 <_vfiprintf_r+0x48>
 800e502:	ab03      	add	r3, sp, #12
 800e504:	9300      	str	r3, [sp, #0]
 800e506:	462a      	mov	r2, r5
 800e508:	4b05      	ldr	r3, [pc, #20]	@ (800e520 <_vfiprintf_r+0x228>)
 800e50a:	a904      	add	r1, sp, #16
 800e50c:	4630      	mov	r0, r6
 800e50e:	f7fc fc47 	bl	800ada0 <_printf_i>
 800e512:	e7e4      	b.n	800e4de <_vfiprintf_r+0x1e6>
 800e514:	08010460 	.word	0x08010460
 800e518:	0801046a 	.word	0x0801046a
 800e51c:	0800a871 	.word	0x0800a871
 800e520:	0800e2d3 	.word	0x0800e2d3
 800e524:	08010466 	.word	0x08010466

0800e528 <__sflush_r>:
 800e528:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e52c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e530:	0716      	lsls	r6, r2, #28
 800e532:	4605      	mov	r5, r0
 800e534:	460c      	mov	r4, r1
 800e536:	d454      	bmi.n	800e5e2 <__sflush_r+0xba>
 800e538:	684b      	ldr	r3, [r1, #4]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	dc02      	bgt.n	800e544 <__sflush_r+0x1c>
 800e53e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e540:	2b00      	cmp	r3, #0
 800e542:	dd48      	ble.n	800e5d6 <__sflush_r+0xae>
 800e544:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e546:	2e00      	cmp	r6, #0
 800e548:	d045      	beq.n	800e5d6 <__sflush_r+0xae>
 800e54a:	2300      	movs	r3, #0
 800e54c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e550:	682f      	ldr	r7, [r5, #0]
 800e552:	6a21      	ldr	r1, [r4, #32]
 800e554:	602b      	str	r3, [r5, #0]
 800e556:	d030      	beq.n	800e5ba <__sflush_r+0x92>
 800e558:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e55a:	89a3      	ldrh	r3, [r4, #12]
 800e55c:	0759      	lsls	r1, r3, #29
 800e55e:	d505      	bpl.n	800e56c <__sflush_r+0x44>
 800e560:	6863      	ldr	r3, [r4, #4]
 800e562:	1ad2      	subs	r2, r2, r3
 800e564:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e566:	b10b      	cbz	r3, 800e56c <__sflush_r+0x44>
 800e568:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e56a:	1ad2      	subs	r2, r2, r3
 800e56c:	2300      	movs	r3, #0
 800e56e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e570:	6a21      	ldr	r1, [r4, #32]
 800e572:	4628      	mov	r0, r5
 800e574:	47b0      	blx	r6
 800e576:	1c43      	adds	r3, r0, #1
 800e578:	89a3      	ldrh	r3, [r4, #12]
 800e57a:	d106      	bne.n	800e58a <__sflush_r+0x62>
 800e57c:	6829      	ldr	r1, [r5, #0]
 800e57e:	291d      	cmp	r1, #29
 800e580:	d82b      	bhi.n	800e5da <__sflush_r+0xb2>
 800e582:	4a2a      	ldr	r2, [pc, #168]	@ (800e62c <__sflush_r+0x104>)
 800e584:	40ca      	lsrs	r2, r1
 800e586:	07d6      	lsls	r6, r2, #31
 800e588:	d527      	bpl.n	800e5da <__sflush_r+0xb2>
 800e58a:	2200      	movs	r2, #0
 800e58c:	6062      	str	r2, [r4, #4]
 800e58e:	04d9      	lsls	r1, r3, #19
 800e590:	6922      	ldr	r2, [r4, #16]
 800e592:	6022      	str	r2, [r4, #0]
 800e594:	d504      	bpl.n	800e5a0 <__sflush_r+0x78>
 800e596:	1c42      	adds	r2, r0, #1
 800e598:	d101      	bne.n	800e59e <__sflush_r+0x76>
 800e59a:	682b      	ldr	r3, [r5, #0]
 800e59c:	b903      	cbnz	r3, 800e5a0 <__sflush_r+0x78>
 800e59e:	6560      	str	r0, [r4, #84]	@ 0x54
 800e5a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e5a2:	602f      	str	r7, [r5, #0]
 800e5a4:	b1b9      	cbz	r1, 800e5d6 <__sflush_r+0xae>
 800e5a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e5aa:	4299      	cmp	r1, r3
 800e5ac:	d002      	beq.n	800e5b4 <__sflush_r+0x8c>
 800e5ae:	4628      	mov	r0, r5
 800e5b0:	f7fe f8f2 	bl	800c798 <_free_r>
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	6363      	str	r3, [r4, #52]	@ 0x34
 800e5b8:	e00d      	b.n	800e5d6 <__sflush_r+0xae>
 800e5ba:	2301      	movs	r3, #1
 800e5bc:	4628      	mov	r0, r5
 800e5be:	47b0      	blx	r6
 800e5c0:	4602      	mov	r2, r0
 800e5c2:	1c50      	adds	r0, r2, #1
 800e5c4:	d1c9      	bne.n	800e55a <__sflush_r+0x32>
 800e5c6:	682b      	ldr	r3, [r5, #0]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d0c6      	beq.n	800e55a <__sflush_r+0x32>
 800e5cc:	2b1d      	cmp	r3, #29
 800e5ce:	d001      	beq.n	800e5d4 <__sflush_r+0xac>
 800e5d0:	2b16      	cmp	r3, #22
 800e5d2:	d11e      	bne.n	800e612 <__sflush_r+0xea>
 800e5d4:	602f      	str	r7, [r5, #0]
 800e5d6:	2000      	movs	r0, #0
 800e5d8:	e022      	b.n	800e620 <__sflush_r+0xf8>
 800e5da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e5de:	b21b      	sxth	r3, r3
 800e5e0:	e01b      	b.n	800e61a <__sflush_r+0xf2>
 800e5e2:	690f      	ldr	r7, [r1, #16]
 800e5e4:	2f00      	cmp	r7, #0
 800e5e6:	d0f6      	beq.n	800e5d6 <__sflush_r+0xae>
 800e5e8:	0793      	lsls	r3, r2, #30
 800e5ea:	680e      	ldr	r6, [r1, #0]
 800e5ec:	bf08      	it	eq
 800e5ee:	694b      	ldreq	r3, [r1, #20]
 800e5f0:	600f      	str	r7, [r1, #0]
 800e5f2:	bf18      	it	ne
 800e5f4:	2300      	movne	r3, #0
 800e5f6:	eba6 0807 	sub.w	r8, r6, r7
 800e5fa:	608b      	str	r3, [r1, #8]
 800e5fc:	f1b8 0f00 	cmp.w	r8, #0
 800e600:	dde9      	ble.n	800e5d6 <__sflush_r+0xae>
 800e602:	6a21      	ldr	r1, [r4, #32]
 800e604:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e606:	4643      	mov	r3, r8
 800e608:	463a      	mov	r2, r7
 800e60a:	4628      	mov	r0, r5
 800e60c:	47b0      	blx	r6
 800e60e:	2800      	cmp	r0, #0
 800e610:	dc08      	bgt.n	800e624 <__sflush_r+0xfc>
 800e612:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e616:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e61a:	81a3      	strh	r3, [r4, #12]
 800e61c:	f04f 30ff 	mov.w	r0, #4294967295
 800e620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e624:	4407      	add	r7, r0
 800e626:	eba8 0800 	sub.w	r8, r8, r0
 800e62a:	e7e7      	b.n	800e5fc <__sflush_r+0xd4>
 800e62c:	20400001 	.word	0x20400001

0800e630 <_fflush_r>:
 800e630:	b538      	push	{r3, r4, r5, lr}
 800e632:	690b      	ldr	r3, [r1, #16]
 800e634:	4605      	mov	r5, r0
 800e636:	460c      	mov	r4, r1
 800e638:	b913      	cbnz	r3, 800e640 <_fflush_r+0x10>
 800e63a:	2500      	movs	r5, #0
 800e63c:	4628      	mov	r0, r5
 800e63e:	bd38      	pop	{r3, r4, r5, pc}
 800e640:	b118      	cbz	r0, 800e64a <_fflush_r+0x1a>
 800e642:	6a03      	ldr	r3, [r0, #32]
 800e644:	b90b      	cbnz	r3, 800e64a <_fflush_r+0x1a>
 800e646:	f7fc ff63 	bl	800b510 <__sinit>
 800e64a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d0f3      	beq.n	800e63a <_fflush_r+0xa>
 800e652:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e654:	07d0      	lsls	r0, r2, #31
 800e656:	d404      	bmi.n	800e662 <_fflush_r+0x32>
 800e658:	0599      	lsls	r1, r3, #22
 800e65a:	d402      	bmi.n	800e662 <_fflush_r+0x32>
 800e65c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e65e:	f7fd fa0c 	bl	800ba7a <__retarget_lock_acquire_recursive>
 800e662:	4628      	mov	r0, r5
 800e664:	4621      	mov	r1, r4
 800e666:	f7ff ff5f 	bl	800e528 <__sflush_r>
 800e66a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e66c:	07da      	lsls	r2, r3, #31
 800e66e:	4605      	mov	r5, r0
 800e670:	d4e4      	bmi.n	800e63c <_fflush_r+0xc>
 800e672:	89a3      	ldrh	r3, [r4, #12]
 800e674:	059b      	lsls	r3, r3, #22
 800e676:	d4e1      	bmi.n	800e63c <_fflush_r+0xc>
 800e678:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e67a:	f7fd f9ff 	bl	800ba7c <__retarget_lock_release_recursive>
 800e67e:	e7dd      	b.n	800e63c <_fflush_r+0xc>

0800e680 <fiprintf>:
 800e680:	b40e      	push	{r1, r2, r3}
 800e682:	b503      	push	{r0, r1, lr}
 800e684:	4601      	mov	r1, r0
 800e686:	ab03      	add	r3, sp, #12
 800e688:	4805      	ldr	r0, [pc, #20]	@ (800e6a0 <fiprintf+0x20>)
 800e68a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e68e:	6800      	ldr	r0, [r0, #0]
 800e690:	9301      	str	r3, [sp, #4]
 800e692:	f7ff fe31 	bl	800e2f8 <_vfiprintf_r>
 800e696:	b002      	add	sp, #8
 800e698:	f85d eb04 	ldr.w	lr, [sp], #4
 800e69c:	b003      	add	sp, #12
 800e69e:	4770      	bx	lr
 800e6a0:	20000064 	.word	0x20000064

0800e6a4 <__swhatbuf_r>:
 800e6a4:	b570      	push	{r4, r5, r6, lr}
 800e6a6:	460c      	mov	r4, r1
 800e6a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6ac:	2900      	cmp	r1, #0
 800e6ae:	b096      	sub	sp, #88	@ 0x58
 800e6b0:	4615      	mov	r5, r2
 800e6b2:	461e      	mov	r6, r3
 800e6b4:	da0d      	bge.n	800e6d2 <__swhatbuf_r+0x2e>
 800e6b6:	89a3      	ldrh	r3, [r4, #12]
 800e6b8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e6bc:	f04f 0100 	mov.w	r1, #0
 800e6c0:	bf14      	ite	ne
 800e6c2:	2340      	movne	r3, #64	@ 0x40
 800e6c4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e6c8:	2000      	movs	r0, #0
 800e6ca:	6031      	str	r1, [r6, #0]
 800e6cc:	602b      	str	r3, [r5, #0]
 800e6ce:	b016      	add	sp, #88	@ 0x58
 800e6d0:	bd70      	pop	{r4, r5, r6, pc}
 800e6d2:	466a      	mov	r2, sp
 800e6d4:	f000 f874 	bl	800e7c0 <_fstat_r>
 800e6d8:	2800      	cmp	r0, #0
 800e6da:	dbec      	blt.n	800e6b6 <__swhatbuf_r+0x12>
 800e6dc:	9901      	ldr	r1, [sp, #4]
 800e6de:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e6e2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e6e6:	4259      	negs	r1, r3
 800e6e8:	4159      	adcs	r1, r3
 800e6ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e6ee:	e7eb      	b.n	800e6c8 <__swhatbuf_r+0x24>

0800e6f0 <__smakebuf_r>:
 800e6f0:	898b      	ldrh	r3, [r1, #12]
 800e6f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e6f4:	079d      	lsls	r5, r3, #30
 800e6f6:	4606      	mov	r6, r0
 800e6f8:	460c      	mov	r4, r1
 800e6fa:	d507      	bpl.n	800e70c <__smakebuf_r+0x1c>
 800e6fc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e700:	6023      	str	r3, [r4, #0]
 800e702:	6123      	str	r3, [r4, #16]
 800e704:	2301      	movs	r3, #1
 800e706:	6163      	str	r3, [r4, #20]
 800e708:	b003      	add	sp, #12
 800e70a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e70c:	ab01      	add	r3, sp, #4
 800e70e:	466a      	mov	r2, sp
 800e710:	f7ff ffc8 	bl	800e6a4 <__swhatbuf_r>
 800e714:	9f00      	ldr	r7, [sp, #0]
 800e716:	4605      	mov	r5, r0
 800e718:	4639      	mov	r1, r7
 800e71a:	4630      	mov	r0, r6
 800e71c:	f7fe f8b0 	bl	800c880 <_malloc_r>
 800e720:	b948      	cbnz	r0, 800e736 <__smakebuf_r+0x46>
 800e722:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e726:	059a      	lsls	r2, r3, #22
 800e728:	d4ee      	bmi.n	800e708 <__smakebuf_r+0x18>
 800e72a:	f023 0303 	bic.w	r3, r3, #3
 800e72e:	f043 0302 	orr.w	r3, r3, #2
 800e732:	81a3      	strh	r3, [r4, #12]
 800e734:	e7e2      	b.n	800e6fc <__smakebuf_r+0xc>
 800e736:	89a3      	ldrh	r3, [r4, #12]
 800e738:	6020      	str	r0, [r4, #0]
 800e73a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e73e:	81a3      	strh	r3, [r4, #12]
 800e740:	9b01      	ldr	r3, [sp, #4]
 800e742:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e746:	b15b      	cbz	r3, 800e760 <__smakebuf_r+0x70>
 800e748:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e74c:	4630      	mov	r0, r6
 800e74e:	f000 f849 	bl	800e7e4 <_isatty_r>
 800e752:	b128      	cbz	r0, 800e760 <__smakebuf_r+0x70>
 800e754:	89a3      	ldrh	r3, [r4, #12]
 800e756:	f023 0303 	bic.w	r3, r3, #3
 800e75a:	f043 0301 	orr.w	r3, r3, #1
 800e75e:	81a3      	strh	r3, [r4, #12]
 800e760:	89a3      	ldrh	r3, [r4, #12]
 800e762:	431d      	orrs	r5, r3
 800e764:	81a5      	strh	r5, [r4, #12]
 800e766:	e7cf      	b.n	800e708 <__smakebuf_r+0x18>

0800e768 <memmove>:
 800e768:	4288      	cmp	r0, r1
 800e76a:	b510      	push	{r4, lr}
 800e76c:	eb01 0402 	add.w	r4, r1, r2
 800e770:	d902      	bls.n	800e778 <memmove+0x10>
 800e772:	4284      	cmp	r4, r0
 800e774:	4623      	mov	r3, r4
 800e776:	d807      	bhi.n	800e788 <memmove+0x20>
 800e778:	1e43      	subs	r3, r0, #1
 800e77a:	42a1      	cmp	r1, r4
 800e77c:	d008      	beq.n	800e790 <memmove+0x28>
 800e77e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e782:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e786:	e7f8      	b.n	800e77a <memmove+0x12>
 800e788:	4402      	add	r2, r0
 800e78a:	4601      	mov	r1, r0
 800e78c:	428a      	cmp	r2, r1
 800e78e:	d100      	bne.n	800e792 <memmove+0x2a>
 800e790:	bd10      	pop	{r4, pc}
 800e792:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e796:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e79a:	e7f7      	b.n	800e78c <memmove+0x24>

0800e79c <strncmp>:
 800e79c:	b510      	push	{r4, lr}
 800e79e:	b16a      	cbz	r2, 800e7bc <strncmp+0x20>
 800e7a0:	3901      	subs	r1, #1
 800e7a2:	1884      	adds	r4, r0, r2
 800e7a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e7a8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e7ac:	429a      	cmp	r2, r3
 800e7ae:	d103      	bne.n	800e7b8 <strncmp+0x1c>
 800e7b0:	42a0      	cmp	r0, r4
 800e7b2:	d001      	beq.n	800e7b8 <strncmp+0x1c>
 800e7b4:	2a00      	cmp	r2, #0
 800e7b6:	d1f5      	bne.n	800e7a4 <strncmp+0x8>
 800e7b8:	1ad0      	subs	r0, r2, r3
 800e7ba:	bd10      	pop	{r4, pc}
 800e7bc:	4610      	mov	r0, r2
 800e7be:	e7fc      	b.n	800e7ba <strncmp+0x1e>

0800e7c0 <_fstat_r>:
 800e7c0:	b538      	push	{r3, r4, r5, lr}
 800e7c2:	4d07      	ldr	r5, [pc, #28]	@ (800e7e0 <_fstat_r+0x20>)
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	4604      	mov	r4, r0
 800e7c8:	4608      	mov	r0, r1
 800e7ca:	4611      	mov	r1, r2
 800e7cc:	602b      	str	r3, [r5, #0]
 800e7ce:	f7f3 faa7 	bl	8001d20 <_fstat>
 800e7d2:	1c43      	adds	r3, r0, #1
 800e7d4:	d102      	bne.n	800e7dc <_fstat_r+0x1c>
 800e7d6:	682b      	ldr	r3, [r5, #0]
 800e7d8:	b103      	cbz	r3, 800e7dc <_fstat_r+0x1c>
 800e7da:	6023      	str	r3, [r4, #0]
 800e7dc:	bd38      	pop	{r3, r4, r5, pc}
 800e7de:	bf00      	nop
 800e7e0:	20004f54 	.word	0x20004f54

0800e7e4 <_isatty_r>:
 800e7e4:	b538      	push	{r3, r4, r5, lr}
 800e7e6:	4d06      	ldr	r5, [pc, #24]	@ (800e800 <_isatty_r+0x1c>)
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	4604      	mov	r4, r0
 800e7ec:	4608      	mov	r0, r1
 800e7ee:	602b      	str	r3, [r5, #0]
 800e7f0:	f7f3 faa6 	bl	8001d40 <_isatty>
 800e7f4:	1c43      	adds	r3, r0, #1
 800e7f6:	d102      	bne.n	800e7fe <_isatty_r+0x1a>
 800e7f8:	682b      	ldr	r3, [r5, #0]
 800e7fa:	b103      	cbz	r3, 800e7fe <_isatty_r+0x1a>
 800e7fc:	6023      	str	r3, [r4, #0]
 800e7fe:	bd38      	pop	{r3, r4, r5, pc}
 800e800:	20004f54 	.word	0x20004f54

0800e804 <_sbrk_r>:
 800e804:	b538      	push	{r3, r4, r5, lr}
 800e806:	4d06      	ldr	r5, [pc, #24]	@ (800e820 <_sbrk_r+0x1c>)
 800e808:	2300      	movs	r3, #0
 800e80a:	4604      	mov	r4, r0
 800e80c:	4608      	mov	r0, r1
 800e80e:	602b      	str	r3, [r5, #0]
 800e810:	f7f3 faae 	bl	8001d70 <_sbrk>
 800e814:	1c43      	adds	r3, r0, #1
 800e816:	d102      	bne.n	800e81e <_sbrk_r+0x1a>
 800e818:	682b      	ldr	r3, [r5, #0]
 800e81a:	b103      	cbz	r3, 800e81e <_sbrk_r+0x1a>
 800e81c:	6023      	str	r3, [r4, #0]
 800e81e:	bd38      	pop	{r3, r4, r5, pc}
 800e820:	20004f54 	.word	0x20004f54
 800e824:	00000000 	.word	0x00000000

0800e828 <nan>:
 800e828:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e830 <nan+0x8>
 800e82c:	4770      	bx	lr
 800e82e:	bf00      	nop
 800e830:	00000000 	.word	0x00000000
 800e834:	7ff80000 	.word	0x7ff80000

0800e838 <abort>:
 800e838:	b508      	push	{r3, lr}
 800e83a:	2006      	movs	r0, #6
 800e83c:	f000 fbc4 	bl	800efc8 <raise>
 800e840:	2001      	movs	r0, #1
 800e842:	f7f3 fa1d 	bl	8001c80 <_exit>

0800e846 <_calloc_r>:
 800e846:	b570      	push	{r4, r5, r6, lr}
 800e848:	fba1 5402 	umull	r5, r4, r1, r2
 800e84c:	b934      	cbnz	r4, 800e85c <_calloc_r+0x16>
 800e84e:	4629      	mov	r1, r5
 800e850:	f7fe f816 	bl	800c880 <_malloc_r>
 800e854:	4606      	mov	r6, r0
 800e856:	b928      	cbnz	r0, 800e864 <_calloc_r+0x1e>
 800e858:	4630      	mov	r0, r6
 800e85a:	bd70      	pop	{r4, r5, r6, pc}
 800e85c:	220c      	movs	r2, #12
 800e85e:	6002      	str	r2, [r0, #0]
 800e860:	2600      	movs	r6, #0
 800e862:	e7f9      	b.n	800e858 <_calloc_r+0x12>
 800e864:	462a      	mov	r2, r5
 800e866:	4621      	mov	r1, r4
 800e868:	f7fd f80c 	bl	800b884 <memset>
 800e86c:	e7f4      	b.n	800e858 <_calloc_r+0x12>

0800e86e <rshift>:
 800e86e:	6903      	ldr	r3, [r0, #16]
 800e870:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e874:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e878:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e87c:	f100 0414 	add.w	r4, r0, #20
 800e880:	dd45      	ble.n	800e90e <rshift+0xa0>
 800e882:	f011 011f 	ands.w	r1, r1, #31
 800e886:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e88a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e88e:	d10c      	bne.n	800e8aa <rshift+0x3c>
 800e890:	f100 0710 	add.w	r7, r0, #16
 800e894:	4629      	mov	r1, r5
 800e896:	42b1      	cmp	r1, r6
 800e898:	d334      	bcc.n	800e904 <rshift+0x96>
 800e89a:	1a9b      	subs	r3, r3, r2
 800e89c:	009b      	lsls	r3, r3, #2
 800e89e:	1eea      	subs	r2, r5, #3
 800e8a0:	4296      	cmp	r6, r2
 800e8a2:	bf38      	it	cc
 800e8a4:	2300      	movcc	r3, #0
 800e8a6:	4423      	add	r3, r4
 800e8a8:	e015      	b.n	800e8d6 <rshift+0x68>
 800e8aa:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e8ae:	f1c1 0820 	rsb	r8, r1, #32
 800e8b2:	40cf      	lsrs	r7, r1
 800e8b4:	f105 0e04 	add.w	lr, r5, #4
 800e8b8:	46a1      	mov	r9, r4
 800e8ba:	4576      	cmp	r6, lr
 800e8bc:	46f4      	mov	ip, lr
 800e8be:	d815      	bhi.n	800e8ec <rshift+0x7e>
 800e8c0:	1a9a      	subs	r2, r3, r2
 800e8c2:	0092      	lsls	r2, r2, #2
 800e8c4:	3a04      	subs	r2, #4
 800e8c6:	3501      	adds	r5, #1
 800e8c8:	42ae      	cmp	r6, r5
 800e8ca:	bf38      	it	cc
 800e8cc:	2200      	movcc	r2, #0
 800e8ce:	18a3      	adds	r3, r4, r2
 800e8d0:	50a7      	str	r7, [r4, r2]
 800e8d2:	b107      	cbz	r7, 800e8d6 <rshift+0x68>
 800e8d4:	3304      	adds	r3, #4
 800e8d6:	1b1a      	subs	r2, r3, r4
 800e8d8:	42a3      	cmp	r3, r4
 800e8da:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e8de:	bf08      	it	eq
 800e8e0:	2300      	moveq	r3, #0
 800e8e2:	6102      	str	r2, [r0, #16]
 800e8e4:	bf08      	it	eq
 800e8e6:	6143      	streq	r3, [r0, #20]
 800e8e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e8ec:	f8dc c000 	ldr.w	ip, [ip]
 800e8f0:	fa0c fc08 	lsl.w	ip, ip, r8
 800e8f4:	ea4c 0707 	orr.w	r7, ip, r7
 800e8f8:	f849 7b04 	str.w	r7, [r9], #4
 800e8fc:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e900:	40cf      	lsrs	r7, r1
 800e902:	e7da      	b.n	800e8ba <rshift+0x4c>
 800e904:	f851 cb04 	ldr.w	ip, [r1], #4
 800e908:	f847 cf04 	str.w	ip, [r7, #4]!
 800e90c:	e7c3      	b.n	800e896 <rshift+0x28>
 800e90e:	4623      	mov	r3, r4
 800e910:	e7e1      	b.n	800e8d6 <rshift+0x68>

0800e912 <__hexdig_fun>:
 800e912:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e916:	2b09      	cmp	r3, #9
 800e918:	d802      	bhi.n	800e920 <__hexdig_fun+0xe>
 800e91a:	3820      	subs	r0, #32
 800e91c:	b2c0      	uxtb	r0, r0
 800e91e:	4770      	bx	lr
 800e920:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e924:	2b05      	cmp	r3, #5
 800e926:	d801      	bhi.n	800e92c <__hexdig_fun+0x1a>
 800e928:	3847      	subs	r0, #71	@ 0x47
 800e92a:	e7f7      	b.n	800e91c <__hexdig_fun+0xa>
 800e92c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e930:	2b05      	cmp	r3, #5
 800e932:	d801      	bhi.n	800e938 <__hexdig_fun+0x26>
 800e934:	3827      	subs	r0, #39	@ 0x27
 800e936:	e7f1      	b.n	800e91c <__hexdig_fun+0xa>
 800e938:	2000      	movs	r0, #0
 800e93a:	4770      	bx	lr

0800e93c <__gethex>:
 800e93c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e940:	b085      	sub	sp, #20
 800e942:	468a      	mov	sl, r1
 800e944:	9302      	str	r3, [sp, #8]
 800e946:	680b      	ldr	r3, [r1, #0]
 800e948:	9001      	str	r0, [sp, #4]
 800e94a:	4690      	mov	r8, r2
 800e94c:	1c9c      	adds	r4, r3, #2
 800e94e:	46a1      	mov	r9, r4
 800e950:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e954:	2830      	cmp	r0, #48	@ 0x30
 800e956:	d0fa      	beq.n	800e94e <__gethex+0x12>
 800e958:	eba9 0303 	sub.w	r3, r9, r3
 800e95c:	f1a3 0b02 	sub.w	fp, r3, #2
 800e960:	f7ff ffd7 	bl	800e912 <__hexdig_fun>
 800e964:	4605      	mov	r5, r0
 800e966:	2800      	cmp	r0, #0
 800e968:	d168      	bne.n	800ea3c <__gethex+0x100>
 800e96a:	49a0      	ldr	r1, [pc, #640]	@ (800ebec <__gethex+0x2b0>)
 800e96c:	2201      	movs	r2, #1
 800e96e:	4648      	mov	r0, r9
 800e970:	f7ff ff14 	bl	800e79c <strncmp>
 800e974:	4607      	mov	r7, r0
 800e976:	2800      	cmp	r0, #0
 800e978:	d167      	bne.n	800ea4a <__gethex+0x10e>
 800e97a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e97e:	4626      	mov	r6, r4
 800e980:	f7ff ffc7 	bl	800e912 <__hexdig_fun>
 800e984:	2800      	cmp	r0, #0
 800e986:	d062      	beq.n	800ea4e <__gethex+0x112>
 800e988:	4623      	mov	r3, r4
 800e98a:	7818      	ldrb	r0, [r3, #0]
 800e98c:	2830      	cmp	r0, #48	@ 0x30
 800e98e:	4699      	mov	r9, r3
 800e990:	f103 0301 	add.w	r3, r3, #1
 800e994:	d0f9      	beq.n	800e98a <__gethex+0x4e>
 800e996:	f7ff ffbc 	bl	800e912 <__hexdig_fun>
 800e99a:	fab0 f580 	clz	r5, r0
 800e99e:	096d      	lsrs	r5, r5, #5
 800e9a0:	f04f 0b01 	mov.w	fp, #1
 800e9a4:	464a      	mov	r2, r9
 800e9a6:	4616      	mov	r6, r2
 800e9a8:	3201      	adds	r2, #1
 800e9aa:	7830      	ldrb	r0, [r6, #0]
 800e9ac:	f7ff ffb1 	bl	800e912 <__hexdig_fun>
 800e9b0:	2800      	cmp	r0, #0
 800e9b2:	d1f8      	bne.n	800e9a6 <__gethex+0x6a>
 800e9b4:	498d      	ldr	r1, [pc, #564]	@ (800ebec <__gethex+0x2b0>)
 800e9b6:	2201      	movs	r2, #1
 800e9b8:	4630      	mov	r0, r6
 800e9ba:	f7ff feef 	bl	800e79c <strncmp>
 800e9be:	2800      	cmp	r0, #0
 800e9c0:	d13f      	bne.n	800ea42 <__gethex+0x106>
 800e9c2:	b944      	cbnz	r4, 800e9d6 <__gethex+0x9a>
 800e9c4:	1c74      	adds	r4, r6, #1
 800e9c6:	4622      	mov	r2, r4
 800e9c8:	4616      	mov	r6, r2
 800e9ca:	3201      	adds	r2, #1
 800e9cc:	7830      	ldrb	r0, [r6, #0]
 800e9ce:	f7ff ffa0 	bl	800e912 <__hexdig_fun>
 800e9d2:	2800      	cmp	r0, #0
 800e9d4:	d1f8      	bne.n	800e9c8 <__gethex+0x8c>
 800e9d6:	1ba4      	subs	r4, r4, r6
 800e9d8:	00a7      	lsls	r7, r4, #2
 800e9da:	7833      	ldrb	r3, [r6, #0]
 800e9dc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e9e0:	2b50      	cmp	r3, #80	@ 0x50
 800e9e2:	d13e      	bne.n	800ea62 <__gethex+0x126>
 800e9e4:	7873      	ldrb	r3, [r6, #1]
 800e9e6:	2b2b      	cmp	r3, #43	@ 0x2b
 800e9e8:	d033      	beq.n	800ea52 <__gethex+0x116>
 800e9ea:	2b2d      	cmp	r3, #45	@ 0x2d
 800e9ec:	d034      	beq.n	800ea58 <__gethex+0x11c>
 800e9ee:	1c71      	adds	r1, r6, #1
 800e9f0:	2400      	movs	r4, #0
 800e9f2:	7808      	ldrb	r0, [r1, #0]
 800e9f4:	f7ff ff8d 	bl	800e912 <__hexdig_fun>
 800e9f8:	1e43      	subs	r3, r0, #1
 800e9fa:	b2db      	uxtb	r3, r3
 800e9fc:	2b18      	cmp	r3, #24
 800e9fe:	d830      	bhi.n	800ea62 <__gethex+0x126>
 800ea00:	f1a0 0210 	sub.w	r2, r0, #16
 800ea04:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ea08:	f7ff ff83 	bl	800e912 <__hexdig_fun>
 800ea0c:	f100 3cff 	add.w	ip, r0, #4294967295
 800ea10:	fa5f fc8c 	uxtb.w	ip, ip
 800ea14:	f1bc 0f18 	cmp.w	ip, #24
 800ea18:	f04f 030a 	mov.w	r3, #10
 800ea1c:	d91e      	bls.n	800ea5c <__gethex+0x120>
 800ea1e:	b104      	cbz	r4, 800ea22 <__gethex+0xe6>
 800ea20:	4252      	negs	r2, r2
 800ea22:	4417      	add	r7, r2
 800ea24:	f8ca 1000 	str.w	r1, [sl]
 800ea28:	b1ed      	cbz	r5, 800ea66 <__gethex+0x12a>
 800ea2a:	f1bb 0f00 	cmp.w	fp, #0
 800ea2e:	bf0c      	ite	eq
 800ea30:	2506      	moveq	r5, #6
 800ea32:	2500      	movne	r5, #0
 800ea34:	4628      	mov	r0, r5
 800ea36:	b005      	add	sp, #20
 800ea38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea3c:	2500      	movs	r5, #0
 800ea3e:	462c      	mov	r4, r5
 800ea40:	e7b0      	b.n	800e9a4 <__gethex+0x68>
 800ea42:	2c00      	cmp	r4, #0
 800ea44:	d1c7      	bne.n	800e9d6 <__gethex+0x9a>
 800ea46:	4627      	mov	r7, r4
 800ea48:	e7c7      	b.n	800e9da <__gethex+0x9e>
 800ea4a:	464e      	mov	r6, r9
 800ea4c:	462f      	mov	r7, r5
 800ea4e:	2501      	movs	r5, #1
 800ea50:	e7c3      	b.n	800e9da <__gethex+0x9e>
 800ea52:	2400      	movs	r4, #0
 800ea54:	1cb1      	adds	r1, r6, #2
 800ea56:	e7cc      	b.n	800e9f2 <__gethex+0xb6>
 800ea58:	2401      	movs	r4, #1
 800ea5a:	e7fb      	b.n	800ea54 <__gethex+0x118>
 800ea5c:	fb03 0002 	mla	r0, r3, r2, r0
 800ea60:	e7ce      	b.n	800ea00 <__gethex+0xc4>
 800ea62:	4631      	mov	r1, r6
 800ea64:	e7de      	b.n	800ea24 <__gethex+0xe8>
 800ea66:	eba6 0309 	sub.w	r3, r6, r9
 800ea6a:	3b01      	subs	r3, #1
 800ea6c:	4629      	mov	r1, r5
 800ea6e:	2b07      	cmp	r3, #7
 800ea70:	dc0a      	bgt.n	800ea88 <__gethex+0x14c>
 800ea72:	9801      	ldr	r0, [sp, #4]
 800ea74:	f7fd ff90 	bl	800c998 <_Balloc>
 800ea78:	4604      	mov	r4, r0
 800ea7a:	b940      	cbnz	r0, 800ea8e <__gethex+0x152>
 800ea7c:	4b5c      	ldr	r3, [pc, #368]	@ (800ebf0 <__gethex+0x2b4>)
 800ea7e:	4602      	mov	r2, r0
 800ea80:	21e4      	movs	r1, #228	@ 0xe4
 800ea82:	485c      	ldr	r0, [pc, #368]	@ (800ebf4 <__gethex+0x2b8>)
 800ea84:	f7fd f810 	bl	800baa8 <__assert_func>
 800ea88:	3101      	adds	r1, #1
 800ea8a:	105b      	asrs	r3, r3, #1
 800ea8c:	e7ef      	b.n	800ea6e <__gethex+0x132>
 800ea8e:	f100 0a14 	add.w	sl, r0, #20
 800ea92:	2300      	movs	r3, #0
 800ea94:	4655      	mov	r5, sl
 800ea96:	469b      	mov	fp, r3
 800ea98:	45b1      	cmp	r9, r6
 800ea9a:	d337      	bcc.n	800eb0c <__gethex+0x1d0>
 800ea9c:	f845 bb04 	str.w	fp, [r5], #4
 800eaa0:	eba5 050a 	sub.w	r5, r5, sl
 800eaa4:	10ad      	asrs	r5, r5, #2
 800eaa6:	6125      	str	r5, [r4, #16]
 800eaa8:	4658      	mov	r0, fp
 800eaaa:	f7fe f867 	bl	800cb7c <__hi0bits>
 800eaae:	016d      	lsls	r5, r5, #5
 800eab0:	f8d8 6000 	ldr.w	r6, [r8]
 800eab4:	1a2d      	subs	r5, r5, r0
 800eab6:	42b5      	cmp	r5, r6
 800eab8:	dd54      	ble.n	800eb64 <__gethex+0x228>
 800eaba:	1bad      	subs	r5, r5, r6
 800eabc:	4629      	mov	r1, r5
 800eabe:	4620      	mov	r0, r4
 800eac0:	f7fe fbf3 	bl	800d2aa <__any_on>
 800eac4:	4681      	mov	r9, r0
 800eac6:	b178      	cbz	r0, 800eae8 <__gethex+0x1ac>
 800eac8:	1e6b      	subs	r3, r5, #1
 800eaca:	1159      	asrs	r1, r3, #5
 800eacc:	f003 021f 	and.w	r2, r3, #31
 800ead0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ead4:	f04f 0901 	mov.w	r9, #1
 800ead8:	fa09 f202 	lsl.w	r2, r9, r2
 800eadc:	420a      	tst	r2, r1
 800eade:	d003      	beq.n	800eae8 <__gethex+0x1ac>
 800eae0:	454b      	cmp	r3, r9
 800eae2:	dc36      	bgt.n	800eb52 <__gethex+0x216>
 800eae4:	f04f 0902 	mov.w	r9, #2
 800eae8:	4629      	mov	r1, r5
 800eaea:	4620      	mov	r0, r4
 800eaec:	f7ff febf 	bl	800e86e <rshift>
 800eaf0:	442f      	add	r7, r5
 800eaf2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800eaf6:	42bb      	cmp	r3, r7
 800eaf8:	da42      	bge.n	800eb80 <__gethex+0x244>
 800eafa:	9801      	ldr	r0, [sp, #4]
 800eafc:	4621      	mov	r1, r4
 800eafe:	f7fd ff8b 	bl	800ca18 <_Bfree>
 800eb02:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eb04:	2300      	movs	r3, #0
 800eb06:	6013      	str	r3, [r2, #0]
 800eb08:	25a3      	movs	r5, #163	@ 0xa3
 800eb0a:	e793      	b.n	800ea34 <__gethex+0xf8>
 800eb0c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800eb10:	2a2e      	cmp	r2, #46	@ 0x2e
 800eb12:	d012      	beq.n	800eb3a <__gethex+0x1fe>
 800eb14:	2b20      	cmp	r3, #32
 800eb16:	d104      	bne.n	800eb22 <__gethex+0x1e6>
 800eb18:	f845 bb04 	str.w	fp, [r5], #4
 800eb1c:	f04f 0b00 	mov.w	fp, #0
 800eb20:	465b      	mov	r3, fp
 800eb22:	7830      	ldrb	r0, [r6, #0]
 800eb24:	9303      	str	r3, [sp, #12]
 800eb26:	f7ff fef4 	bl	800e912 <__hexdig_fun>
 800eb2a:	9b03      	ldr	r3, [sp, #12]
 800eb2c:	f000 000f 	and.w	r0, r0, #15
 800eb30:	4098      	lsls	r0, r3
 800eb32:	ea4b 0b00 	orr.w	fp, fp, r0
 800eb36:	3304      	adds	r3, #4
 800eb38:	e7ae      	b.n	800ea98 <__gethex+0x15c>
 800eb3a:	45b1      	cmp	r9, r6
 800eb3c:	d8ea      	bhi.n	800eb14 <__gethex+0x1d8>
 800eb3e:	492b      	ldr	r1, [pc, #172]	@ (800ebec <__gethex+0x2b0>)
 800eb40:	9303      	str	r3, [sp, #12]
 800eb42:	2201      	movs	r2, #1
 800eb44:	4630      	mov	r0, r6
 800eb46:	f7ff fe29 	bl	800e79c <strncmp>
 800eb4a:	9b03      	ldr	r3, [sp, #12]
 800eb4c:	2800      	cmp	r0, #0
 800eb4e:	d1e1      	bne.n	800eb14 <__gethex+0x1d8>
 800eb50:	e7a2      	b.n	800ea98 <__gethex+0x15c>
 800eb52:	1ea9      	subs	r1, r5, #2
 800eb54:	4620      	mov	r0, r4
 800eb56:	f7fe fba8 	bl	800d2aa <__any_on>
 800eb5a:	2800      	cmp	r0, #0
 800eb5c:	d0c2      	beq.n	800eae4 <__gethex+0x1a8>
 800eb5e:	f04f 0903 	mov.w	r9, #3
 800eb62:	e7c1      	b.n	800eae8 <__gethex+0x1ac>
 800eb64:	da09      	bge.n	800eb7a <__gethex+0x23e>
 800eb66:	1b75      	subs	r5, r6, r5
 800eb68:	4621      	mov	r1, r4
 800eb6a:	9801      	ldr	r0, [sp, #4]
 800eb6c:	462a      	mov	r2, r5
 800eb6e:	f7fe f963 	bl	800ce38 <__lshift>
 800eb72:	1b7f      	subs	r7, r7, r5
 800eb74:	4604      	mov	r4, r0
 800eb76:	f100 0a14 	add.w	sl, r0, #20
 800eb7a:	f04f 0900 	mov.w	r9, #0
 800eb7e:	e7b8      	b.n	800eaf2 <__gethex+0x1b6>
 800eb80:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800eb84:	42bd      	cmp	r5, r7
 800eb86:	dd6f      	ble.n	800ec68 <__gethex+0x32c>
 800eb88:	1bed      	subs	r5, r5, r7
 800eb8a:	42ae      	cmp	r6, r5
 800eb8c:	dc34      	bgt.n	800ebf8 <__gethex+0x2bc>
 800eb8e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800eb92:	2b02      	cmp	r3, #2
 800eb94:	d022      	beq.n	800ebdc <__gethex+0x2a0>
 800eb96:	2b03      	cmp	r3, #3
 800eb98:	d024      	beq.n	800ebe4 <__gethex+0x2a8>
 800eb9a:	2b01      	cmp	r3, #1
 800eb9c:	d115      	bne.n	800ebca <__gethex+0x28e>
 800eb9e:	42ae      	cmp	r6, r5
 800eba0:	d113      	bne.n	800ebca <__gethex+0x28e>
 800eba2:	2e01      	cmp	r6, #1
 800eba4:	d10b      	bne.n	800ebbe <__gethex+0x282>
 800eba6:	9a02      	ldr	r2, [sp, #8]
 800eba8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ebac:	6013      	str	r3, [r2, #0]
 800ebae:	2301      	movs	r3, #1
 800ebb0:	6123      	str	r3, [r4, #16]
 800ebb2:	f8ca 3000 	str.w	r3, [sl]
 800ebb6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ebb8:	2562      	movs	r5, #98	@ 0x62
 800ebba:	601c      	str	r4, [r3, #0]
 800ebbc:	e73a      	b.n	800ea34 <__gethex+0xf8>
 800ebbe:	1e71      	subs	r1, r6, #1
 800ebc0:	4620      	mov	r0, r4
 800ebc2:	f7fe fb72 	bl	800d2aa <__any_on>
 800ebc6:	2800      	cmp	r0, #0
 800ebc8:	d1ed      	bne.n	800eba6 <__gethex+0x26a>
 800ebca:	9801      	ldr	r0, [sp, #4]
 800ebcc:	4621      	mov	r1, r4
 800ebce:	f7fd ff23 	bl	800ca18 <_Bfree>
 800ebd2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	6013      	str	r3, [r2, #0]
 800ebd8:	2550      	movs	r5, #80	@ 0x50
 800ebda:	e72b      	b.n	800ea34 <__gethex+0xf8>
 800ebdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d1f3      	bne.n	800ebca <__gethex+0x28e>
 800ebe2:	e7e0      	b.n	800eba6 <__gethex+0x26a>
 800ebe4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d1dd      	bne.n	800eba6 <__gethex+0x26a>
 800ebea:	e7ee      	b.n	800ebca <__gethex+0x28e>
 800ebec:	0801045e 	.word	0x0801045e
 800ebf0:	080103f4 	.word	0x080103f4
 800ebf4:	08010479 	.word	0x08010479
 800ebf8:	1e6f      	subs	r7, r5, #1
 800ebfa:	f1b9 0f00 	cmp.w	r9, #0
 800ebfe:	d130      	bne.n	800ec62 <__gethex+0x326>
 800ec00:	b127      	cbz	r7, 800ec0c <__gethex+0x2d0>
 800ec02:	4639      	mov	r1, r7
 800ec04:	4620      	mov	r0, r4
 800ec06:	f7fe fb50 	bl	800d2aa <__any_on>
 800ec0a:	4681      	mov	r9, r0
 800ec0c:	117a      	asrs	r2, r7, #5
 800ec0e:	2301      	movs	r3, #1
 800ec10:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ec14:	f007 071f 	and.w	r7, r7, #31
 800ec18:	40bb      	lsls	r3, r7
 800ec1a:	4213      	tst	r3, r2
 800ec1c:	4629      	mov	r1, r5
 800ec1e:	4620      	mov	r0, r4
 800ec20:	bf18      	it	ne
 800ec22:	f049 0902 	orrne.w	r9, r9, #2
 800ec26:	f7ff fe22 	bl	800e86e <rshift>
 800ec2a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ec2e:	1b76      	subs	r6, r6, r5
 800ec30:	2502      	movs	r5, #2
 800ec32:	f1b9 0f00 	cmp.w	r9, #0
 800ec36:	d047      	beq.n	800ecc8 <__gethex+0x38c>
 800ec38:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ec3c:	2b02      	cmp	r3, #2
 800ec3e:	d015      	beq.n	800ec6c <__gethex+0x330>
 800ec40:	2b03      	cmp	r3, #3
 800ec42:	d017      	beq.n	800ec74 <__gethex+0x338>
 800ec44:	2b01      	cmp	r3, #1
 800ec46:	d109      	bne.n	800ec5c <__gethex+0x320>
 800ec48:	f019 0f02 	tst.w	r9, #2
 800ec4c:	d006      	beq.n	800ec5c <__gethex+0x320>
 800ec4e:	f8da 3000 	ldr.w	r3, [sl]
 800ec52:	ea49 0903 	orr.w	r9, r9, r3
 800ec56:	f019 0f01 	tst.w	r9, #1
 800ec5a:	d10e      	bne.n	800ec7a <__gethex+0x33e>
 800ec5c:	f045 0510 	orr.w	r5, r5, #16
 800ec60:	e032      	b.n	800ecc8 <__gethex+0x38c>
 800ec62:	f04f 0901 	mov.w	r9, #1
 800ec66:	e7d1      	b.n	800ec0c <__gethex+0x2d0>
 800ec68:	2501      	movs	r5, #1
 800ec6a:	e7e2      	b.n	800ec32 <__gethex+0x2f6>
 800ec6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ec6e:	f1c3 0301 	rsb	r3, r3, #1
 800ec72:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ec74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d0f0      	beq.n	800ec5c <__gethex+0x320>
 800ec7a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ec7e:	f104 0314 	add.w	r3, r4, #20
 800ec82:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ec86:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ec8a:	f04f 0c00 	mov.w	ip, #0
 800ec8e:	4618      	mov	r0, r3
 800ec90:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec94:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ec98:	d01b      	beq.n	800ecd2 <__gethex+0x396>
 800ec9a:	3201      	adds	r2, #1
 800ec9c:	6002      	str	r2, [r0, #0]
 800ec9e:	2d02      	cmp	r5, #2
 800eca0:	f104 0314 	add.w	r3, r4, #20
 800eca4:	d13c      	bne.n	800ed20 <__gethex+0x3e4>
 800eca6:	f8d8 2000 	ldr.w	r2, [r8]
 800ecaa:	3a01      	subs	r2, #1
 800ecac:	42b2      	cmp	r2, r6
 800ecae:	d109      	bne.n	800ecc4 <__gethex+0x388>
 800ecb0:	1171      	asrs	r1, r6, #5
 800ecb2:	2201      	movs	r2, #1
 800ecb4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ecb8:	f006 061f 	and.w	r6, r6, #31
 800ecbc:	fa02 f606 	lsl.w	r6, r2, r6
 800ecc0:	421e      	tst	r6, r3
 800ecc2:	d13a      	bne.n	800ed3a <__gethex+0x3fe>
 800ecc4:	f045 0520 	orr.w	r5, r5, #32
 800ecc8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ecca:	601c      	str	r4, [r3, #0]
 800eccc:	9b02      	ldr	r3, [sp, #8]
 800ecce:	601f      	str	r7, [r3, #0]
 800ecd0:	e6b0      	b.n	800ea34 <__gethex+0xf8>
 800ecd2:	4299      	cmp	r1, r3
 800ecd4:	f843 cc04 	str.w	ip, [r3, #-4]
 800ecd8:	d8d9      	bhi.n	800ec8e <__gethex+0x352>
 800ecda:	68a3      	ldr	r3, [r4, #8]
 800ecdc:	459b      	cmp	fp, r3
 800ecde:	db17      	blt.n	800ed10 <__gethex+0x3d4>
 800ece0:	6861      	ldr	r1, [r4, #4]
 800ece2:	9801      	ldr	r0, [sp, #4]
 800ece4:	3101      	adds	r1, #1
 800ece6:	f7fd fe57 	bl	800c998 <_Balloc>
 800ecea:	4681      	mov	r9, r0
 800ecec:	b918      	cbnz	r0, 800ecf6 <__gethex+0x3ba>
 800ecee:	4b1a      	ldr	r3, [pc, #104]	@ (800ed58 <__gethex+0x41c>)
 800ecf0:	4602      	mov	r2, r0
 800ecf2:	2184      	movs	r1, #132	@ 0x84
 800ecf4:	e6c5      	b.n	800ea82 <__gethex+0x146>
 800ecf6:	6922      	ldr	r2, [r4, #16]
 800ecf8:	3202      	adds	r2, #2
 800ecfa:	f104 010c 	add.w	r1, r4, #12
 800ecfe:	0092      	lsls	r2, r2, #2
 800ed00:	300c      	adds	r0, #12
 800ed02:	f7fc febc 	bl	800ba7e <memcpy>
 800ed06:	4621      	mov	r1, r4
 800ed08:	9801      	ldr	r0, [sp, #4]
 800ed0a:	f7fd fe85 	bl	800ca18 <_Bfree>
 800ed0e:	464c      	mov	r4, r9
 800ed10:	6923      	ldr	r3, [r4, #16]
 800ed12:	1c5a      	adds	r2, r3, #1
 800ed14:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ed18:	6122      	str	r2, [r4, #16]
 800ed1a:	2201      	movs	r2, #1
 800ed1c:	615a      	str	r2, [r3, #20]
 800ed1e:	e7be      	b.n	800ec9e <__gethex+0x362>
 800ed20:	6922      	ldr	r2, [r4, #16]
 800ed22:	455a      	cmp	r2, fp
 800ed24:	dd0b      	ble.n	800ed3e <__gethex+0x402>
 800ed26:	2101      	movs	r1, #1
 800ed28:	4620      	mov	r0, r4
 800ed2a:	f7ff fda0 	bl	800e86e <rshift>
 800ed2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ed32:	3701      	adds	r7, #1
 800ed34:	42bb      	cmp	r3, r7
 800ed36:	f6ff aee0 	blt.w	800eafa <__gethex+0x1be>
 800ed3a:	2501      	movs	r5, #1
 800ed3c:	e7c2      	b.n	800ecc4 <__gethex+0x388>
 800ed3e:	f016 061f 	ands.w	r6, r6, #31
 800ed42:	d0fa      	beq.n	800ed3a <__gethex+0x3fe>
 800ed44:	4453      	add	r3, sl
 800ed46:	f1c6 0620 	rsb	r6, r6, #32
 800ed4a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ed4e:	f7fd ff15 	bl	800cb7c <__hi0bits>
 800ed52:	42b0      	cmp	r0, r6
 800ed54:	dbe7      	blt.n	800ed26 <__gethex+0x3ea>
 800ed56:	e7f0      	b.n	800ed3a <__gethex+0x3fe>
 800ed58:	080103f4 	.word	0x080103f4

0800ed5c <L_shift>:
 800ed5c:	f1c2 0208 	rsb	r2, r2, #8
 800ed60:	0092      	lsls	r2, r2, #2
 800ed62:	b570      	push	{r4, r5, r6, lr}
 800ed64:	f1c2 0620 	rsb	r6, r2, #32
 800ed68:	6843      	ldr	r3, [r0, #4]
 800ed6a:	6804      	ldr	r4, [r0, #0]
 800ed6c:	fa03 f506 	lsl.w	r5, r3, r6
 800ed70:	432c      	orrs	r4, r5
 800ed72:	40d3      	lsrs	r3, r2
 800ed74:	6004      	str	r4, [r0, #0]
 800ed76:	f840 3f04 	str.w	r3, [r0, #4]!
 800ed7a:	4288      	cmp	r0, r1
 800ed7c:	d3f4      	bcc.n	800ed68 <L_shift+0xc>
 800ed7e:	bd70      	pop	{r4, r5, r6, pc}

0800ed80 <__match>:
 800ed80:	b530      	push	{r4, r5, lr}
 800ed82:	6803      	ldr	r3, [r0, #0]
 800ed84:	3301      	adds	r3, #1
 800ed86:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ed8a:	b914      	cbnz	r4, 800ed92 <__match+0x12>
 800ed8c:	6003      	str	r3, [r0, #0]
 800ed8e:	2001      	movs	r0, #1
 800ed90:	bd30      	pop	{r4, r5, pc}
 800ed92:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed96:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ed9a:	2d19      	cmp	r5, #25
 800ed9c:	bf98      	it	ls
 800ed9e:	3220      	addls	r2, #32
 800eda0:	42a2      	cmp	r2, r4
 800eda2:	d0f0      	beq.n	800ed86 <__match+0x6>
 800eda4:	2000      	movs	r0, #0
 800eda6:	e7f3      	b.n	800ed90 <__match+0x10>

0800eda8 <__hexnan>:
 800eda8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edac:	680b      	ldr	r3, [r1, #0]
 800edae:	6801      	ldr	r1, [r0, #0]
 800edb0:	115e      	asrs	r6, r3, #5
 800edb2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800edb6:	f013 031f 	ands.w	r3, r3, #31
 800edba:	b087      	sub	sp, #28
 800edbc:	bf18      	it	ne
 800edbe:	3604      	addne	r6, #4
 800edc0:	2500      	movs	r5, #0
 800edc2:	1f37      	subs	r7, r6, #4
 800edc4:	4682      	mov	sl, r0
 800edc6:	4690      	mov	r8, r2
 800edc8:	9301      	str	r3, [sp, #4]
 800edca:	f846 5c04 	str.w	r5, [r6, #-4]
 800edce:	46b9      	mov	r9, r7
 800edd0:	463c      	mov	r4, r7
 800edd2:	9502      	str	r5, [sp, #8]
 800edd4:	46ab      	mov	fp, r5
 800edd6:	784a      	ldrb	r2, [r1, #1]
 800edd8:	1c4b      	adds	r3, r1, #1
 800edda:	9303      	str	r3, [sp, #12]
 800eddc:	b342      	cbz	r2, 800ee30 <__hexnan+0x88>
 800edde:	4610      	mov	r0, r2
 800ede0:	9105      	str	r1, [sp, #20]
 800ede2:	9204      	str	r2, [sp, #16]
 800ede4:	f7ff fd95 	bl	800e912 <__hexdig_fun>
 800ede8:	2800      	cmp	r0, #0
 800edea:	d151      	bne.n	800ee90 <__hexnan+0xe8>
 800edec:	9a04      	ldr	r2, [sp, #16]
 800edee:	9905      	ldr	r1, [sp, #20]
 800edf0:	2a20      	cmp	r2, #32
 800edf2:	d818      	bhi.n	800ee26 <__hexnan+0x7e>
 800edf4:	9b02      	ldr	r3, [sp, #8]
 800edf6:	459b      	cmp	fp, r3
 800edf8:	dd13      	ble.n	800ee22 <__hexnan+0x7a>
 800edfa:	454c      	cmp	r4, r9
 800edfc:	d206      	bcs.n	800ee0c <__hexnan+0x64>
 800edfe:	2d07      	cmp	r5, #7
 800ee00:	dc04      	bgt.n	800ee0c <__hexnan+0x64>
 800ee02:	462a      	mov	r2, r5
 800ee04:	4649      	mov	r1, r9
 800ee06:	4620      	mov	r0, r4
 800ee08:	f7ff ffa8 	bl	800ed5c <L_shift>
 800ee0c:	4544      	cmp	r4, r8
 800ee0e:	d952      	bls.n	800eeb6 <__hexnan+0x10e>
 800ee10:	2300      	movs	r3, #0
 800ee12:	f1a4 0904 	sub.w	r9, r4, #4
 800ee16:	f844 3c04 	str.w	r3, [r4, #-4]
 800ee1a:	f8cd b008 	str.w	fp, [sp, #8]
 800ee1e:	464c      	mov	r4, r9
 800ee20:	461d      	mov	r5, r3
 800ee22:	9903      	ldr	r1, [sp, #12]
 800ee24:	e7d7      	b.n	800edd6 <__hexnan+0x2e>
 800ee26:	2a29      	cmp	r2, #41	@ 0x29
 800ee28:	d157      	bne.n	800eeda <__hexnan+0x132>
 800ee2a:	3102      	adds	r1, #2
 800ee2c:	f8ca 1000 	str.w	r1, [sl]
 800ee30:	f1bb 0f00 	cmp.w	fp, #0
 800ee34:	d051      	beq.n	800eeda <__hexnan+0x132>
 800ee36:	454c      	cmp	r4, r9
 800ee38:	d206      	bcs.n	800ee48 <__hexnan+0xa0>
 800ee3a:	2d07      	cmp	r5, #7
 800ee3c:	dc04      	bgt.n	800ee48 <__hexnan+0xa0>
 800ee3e:	462a      	mov	r2, r5
 800ee40:	4649      	mov	r1, r9
 800ee42:	4620      	mov	r0, r4
 800ee44:	f7ff ff8a 	bl	800ed5c <L_shift>
 800ee48:	4544      	cmp	r4, r8
 800ee4a:	d936      	bls.n	800eeba <__hexnan+0x112>
 800ee4c:	f1a8 0204 	sub.w	r2, r8, #4
 800ee50:	4623      	mov	r3, r4
 800ee52:	f853 1b04 	ldr.w	r1, [r3], #4
 800ee56:	f842 1f04 	str.w	r1, [r2, #4]!
 800ee5a:	429f      	cmp	r7, r3
 800ee5c:	d2f9      	bcs.n	800ee52 <__hexnan+0xaa>
 800ee5e:	1b3b      	subs	r3, r7, r4
 800ee60:	f023 0303 	bic.w	r3, r3, #3
 800ee64:	3304      	adds	r3, #4
 800ee66:	3401      	adds	r4, #1
 800ee68:	3e03      	subs	r6, #3
 800ee6a:	42b4      	cmp	r4, r6
 800ee6c:	bf88      	it	hi
 800ee6e:	2304      	movhi	r3, #4
 800ee70:	4443      	add	r3, r8
 800ee72:	2200      	movs	r2, #0
 800ee74:	f843 2b04 	str.w	r2, [r3], #4
 800ee78:	429f      	cmp	r7, r3
 800ee7a:	d2fb      	bcs.n	800ee74 <__hexnan+0xcc>
 800ee7c:	683b      	ldr	r3, [r7, #0]
 800ee7e:	b91b      	cbnz	r3, 800ee88 <__hexnan+0xe0>
 800ee80:	4547      	cmp	r7, r8
 800ee82:	d128      	bne.n	800eed6 <__hexnan+0x12e>
 800ee84:	2301      	movs	r3, #1
 800ee86:	603b      	str	r3, [r7, #0]
 800ee88:	2005      	movs	r0, #5
 800ee8a:	b007      	add	sp, #28
 800ee8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee90:	3501      	adds	r5, #1
 800ee92:	2d08      	cmp	r5, #8
 800ee94:	f10b 0b01 	add.w	fp, fp, #1
 800ee98:	dd06      	ble.n	800eea8 <__hexnan+0x100>
 800ee9a:	4544      	cmp	r4, r8
 800ee9c:	d9c1      	bls.n	800ee22 <__hexnan+0x7a>
 800ee9e:	2300      	movs	r3, #0
 800eea0:	f844 3c04 	str.w	r3, [r4, #-4]
 800eea4:	2501      	movs	r5, #1
 800eea6:	3c04      	subs	r4, #4
 800eea8:	6822      	ldr	r2, [r4, #0]
 800eeaa:	f000 000f 	and.w	r0, r0, #15
 800eeae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800eeb2:	6020      	str	r0, [r4, #0]
 800eeb4:	e7b5      	b.n	800ee22 <__hexnan+0x7a>
 800eeb6:	2508      	movs	r5, #8
 800eeb8:	e7b3      	b.n	800ee22 <__hexnan+0x7a>
 800eeba:	9b01      	ldr	r3, [sp, #4]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d0dd      	beq.n	800ee7c <__hexnan+0xd4>
 800eec0:	f1c3 0320 	rsb	r3, r3, #32
 800eec4:	f04f 32ff 	mov.w	r2, #4294967295
 800eec8:	40da      	lsrs	r2, r3
 800eeca:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800eece:	4013      	ands	r3, r2
 800eed0:	f846 3c04 	str.w	r3, [r6, #-4]
 800eed4:	e7d2      	b.n	800ee7c <__hexnan+0xd4>
 800eed6:	3f04      	subs	r7, #4
 800eed8:	e7d0      	b.n	800ee7c <__hexnan+0xd4>
 800eeda:	2004      	movs	r0, #4
 800eedc:	e7d5      	b.n	800ee8a <__hexnan+0xe2>

0800eede <__ascii_mbtowc>:
 800eede:	b082      	sub	sp, #8
 800eee0:	b901      	cbnz	r1, 800eee4 <__ascii_mbtowc+0x6>
 800eee2:	a901      	add	r1, sp, #4
 800eee4:	b142      	cbz	r2, 800eef8 <__ascii_mbtowc+0x1a>
 800eee6:	b14b      	cbz	r3, 800eefc <__ascii_mbtowc+0x1e>
 800eee8:	7813      	ldrb	r3, [r2, #0]
 800eeea:	600b      	str	r3, [r1, #0]
 800eeec:	7812      	ldrb	r2, [r2, #0]
 800eeee:	1e10      	subs	r0, r2, #0
 800eef0:	bf18      	it	ne
 800eef2:	2001      	movne	r0, #1
 800eef4:	b002      	add	sp, #8
 800eef6:	4770      	bx	lr
 800eef8:	4610      	mov	r0, r2
 800eefa:	e7fb      	b.n	800eef4 <__ascii_mbtowc+0x16>
 800eefc:	f06f 0001 	mvn.w	r0, #1
 800ef00:	e7f8      	b.n	800eef4 <__ascii_mbtowc+0x16>

0800ef02 <_realloc_r>:
 800ef02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef06:	4607      	mov	r7, r0
 800ef08:	4614      	mov	r4, r2
 800ef0a:	460d      	mov	r5, r1
 800ef0c:	b921      	cbnz	r1, 800ef18 <_realloc_r+0x16>
 800ef0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ef12:	4611      	mov	r1, r2
 800ef14:	f7fd bcb4 	b.w	800c880 <_malloc_r>
 800ef18:	b92a      	cbnz	r2, 800ef26 <_realloc_r+0x24>
 800ef1a:	f7fd fc3d 	bl	800c798 <_free_r>
 800ef1e:	4625      	mov	r5, r4
 800ef20:	4628      	mov	r0, r5
 800ef22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef26:	f000 f86b 	bl	800f000 <_malloc_usable_size_r>
 800ef2a:	4284      	cmp	r4, r0
 800ef2c:	4606      	mov	r6, r0
 800ef2e:	d802      	bhi.n	800ef36 <_realloc_r+0x34>
 800ef30:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ef34:	d8f4      	bhi.n	800ef20 <_realloc_r+0x1e>
 800ef36:	4621      	mov	r1, r4
 800ef38:	4638      	mov	r0, r7
 800ef3a:	f7fd fca1 	bl	800c880 <_malloc_r>
 800ef3e:	4680      	mov	r8, r0
 800ef40:	b908      	cbnz	r0, 800ef46 <_realloc_r+0x44>
 800ef42:	4645      	mov	r5, r8
 800ef44:	e7ec      	b.n	800ef20 <_realloc_r+0x1e>
 800ef46:	42b4      	cmp	r4, r6
 800ef48:	4622      	mov	r2, r4
 800ef4a:	4629      	mov	r1, r5
 800ef4c:	bf28      	it	cs
 800ef4e:	4632      	movcs	r2, r6
 800ef50:	f7fc fd95 	bl	800ba7e <memcpy>
 800ef54:	4629      	mov	r1, r5
 800ef56:	4638      	mov	r0, r7
 800ef58:	f7fd fc1e 	bl	800c798 <_free_r>
 800ef5c:	e7f1      	b.n	800ef42 <_realloc_r+0x40>

0800ef5e <__ascii_wctomb>:
 800ef5e:	4603      	mov	r3, r0
 800ef60:	4608      	mov	r0, r1
 800ef62:	b141      	cbz	r1, 800ef76 <__ascii_wctomb+0x18>
 800ef64:	2aff      	cmp	r2, #255	@ 0xff
 800ef66:	d904      	bls.n	800ef72 <__ascii_wctomb+0x14>
 800ef68:	228a      	movs	r2, #138	@ 0x8a
 800ef6a:	601a      	str	r2, [r3, #0]
 800ef6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ef70:	4770      	bx	lr
 800ef72:	700a      	strb	r2, [r1, #0]
 800ef74:	2001      	movs	r0, #1
 800ef76:	4770      	bx	lr

0800ef78 <_raise_r>:
 800ef78:	291f      	cmp	r1, #31
 800ef7a:	b538      	push	{r3, r4, r5, lr}
 800ef7c:	4605      	mov	r5, r0
 800ef7e:	460c      	mov	r4, r1
 800ef80:	d904      	bls.n	800ef8c <_raise_r+0x14>
 800ef82:	2316      	movs	r3, #22
 800ef84:	6003      	str	r3, [r0, #0]
 800ef86:	f04f 30ff 	mov.w	r0, #4294967295
 800ef8a:	bd38      	pop	{r3, r4, r5, pc}
 800ef8c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ef8e:	b112      	cbz	r2, 800ef96 <_raise_r+0x1e>
 800ef90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ef94:	b94b      	cbnz	r3, 800efaa <_raise_r+0x32>
 800ef96:	4628      	mov	r0, r5
 800ef98:	f000 f830 	bl	800effc <_getpid_r>
 800ef9c:	4622      	mov	r2, r4
 800ef9e:	4601      	mov	r1, r0
 800efa0:	4628      	mov	r0, r5
 800efa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800efa6:	f000 b817 	b.w	800efd8 <_kill_r>
 800efaa:	2b01      	cmp	r3, #1
 800efac:	d00a      	beq.n	800efc4 <_raise_r+0x4c>
 800efae:	1c59      	adds	r1, r3, #1
 800efb0:	d103      	bne.n	800efba <_raise_r+0x42>
 800efb2:	2316      	movs	r3, #22
 800efb4:	6003      	str	r3, [r0, #0]
 800efb6:	2001      	movs	r0, #1
 800efb8:	e7e7      	b.n	800ef8a <_raise_r+0x12>
 800efba:	2100      	movs	r1, #0
 800efbc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800efc0:	4620      	mov	r0, r4
 800efc2:	4798      	blx	r3
 800efc4:	2000      	movs	r0, #0
 800efc6:	e7e0      	b.n	800ef8a <_raise_r+0x12>

0800efc8 <raise>:
 800efc8:	4b02      	ldr	r3, [pc, #8]	@ (800efd4 <raise+0xc>)
 800efca:	4601      	mov	r1, r0
 800efcc:	6818      	ldr	r0, [r3, #0]
 800efce:	f7ff bfd3 	b.w	800ef78 <_raise_r>
 800efd2:	bf00      	nop
 800efd4:	20000064 	.word	0x20000064

0800efd8 <_kill_r>:
 800efd8:	b538      	push	{r3, r4, r5, lr}
 800efda:	4d07      	ldr	r5, [pc, #28]	@ (800eff8 <_kill_r+0x20>)
 800efdc:	2300      	movs	r3, #0
 800efde:	4604      	mov	r4, r0
 800efe0:	4608      	mov	r0, r1
 800efe2:	4611      	mov	r1, r2
 800efe4:	602b      	str	r3, [r5, #0]
 800efe6:	f7f2 fe3b 	bl	8001c60 <_kill>
 800efea:	1c43      	adds	r3, r0, #1
 800efec:	d102      	bne.n	800eff4 <_kill_r+0x1c>
 800efee:	682b      	ldr	r3, [r5, #0]
 800eff0:	b103      	cbz	r3, 800eff4 <_kill_r+0x1c>
 800eff2:	6023      	str	r3, [r4, #0]
 800eff4:	bd38      	pop	{r3, r4, r5, pc}
 800eff6:	bf00      	nop
 800eff8:	20004f54 	.word	0x20004f54

0800effc <_getpid_r>:
 800effc:	f7f2 be28 	b.w	8001c50 <_getpid>

0800f000 <_malloc_usable_size_r>:
 800f000:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f004:	1f18      	subs	r0, r3, #4
 800f006:	2b00      	cmp	r3, #0
 800f008:	bfbc      	itt	lt
 800f00a:	580b      	ldrlt	r3, [r1, r0]
 800f00c:	18c0      	addlt	r0, r0, r3
 800f00e:	4770      	bx	lr

0800f010 <_init>:
 800f010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f012:	bf00      	nop
 800f014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f016:	bc08      	pop	{r3}
 800f018:	469e      	mov	lr, r3
 800f01a:	4770      	bx	lr

0800f01c <_fini>:
 800f01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f01e:	bf00      	nop
 800f020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f022:	bc08      	pop	{r3}
 800f024:	469e      	mov	lr, r3
 800f026:	4770      	bx	lr
