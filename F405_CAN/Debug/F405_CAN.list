
F405_CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e31c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ac4  0800e4b0  0800e4b0  0000f4b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ef74  0800ef74  00010244  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ef74  0800ef74  0000ff74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ef7c  0800ef7c  00010244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ef7c  0800ef7c  0000ff7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ef80  0800ef80  0000ff80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000244  20000000  0800ef84  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010244  2**0
                  CONTENTS
 10 .bss          0000dd78  20000244  20000244  00010244  2**2
                  ALLOC
 11 .noinit       00001e94  2000dfbc  2000dfbc  00010244  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  2000fe50  2000fe50  00010244  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00010244  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001e79b  00000000  00000000  00010274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006368  00000000  00000000  0002ea0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000018c0  00000000  00000000  00034d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001231  00000000  00000000  00036638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00026ddf  00000000  00000000  00037869  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000213ae  00000000  00000000  0005e648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d4a81  00000000  00000000  0007f9f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00154477  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007524  00000000  00000000  001544bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000042  00000000  00000000  0015b9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000244 	.word	0x20000244
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e494 	.word	0x0800e494

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000248 	.word	0x20000248
 80001cc:	0800e494 	.word	0x0800e494

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <csp_can_tx_frame>:
#include "csp_error.h"

extern CAN_HandleTypeDef hcan1;

int csp_can_tx_frame(void *driver_data, uint32_t id, const uint8_t *data, uint8_t dlc)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08c      	sub	sp, #48	@ 0x30
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
 800102c:	70fb      	strb	r3, [r7, #3]
//	if (dlc > 8) {
//		return CSP_ERR_INVAL;
//	}

	CAN_TxHeaderTypeDef txHeader;
	txHeader.DLC = dlc;
 800102e:	78fb      	ldrb	r3, [r7, #3]
 8001030:	62bb      	str	r3, [r7, #40]	@ 0x28
	txHeader.IDE = CAN_ID_STD;
 8001032:	2300      	movs	r3, #0
 8001034:	623b      	str	r3, [r7, #32]
	txHeader.RTR = CAN_RTR_DATA;
 8001036:	2300      	movs	r3, #0
 8001038:	627b      	str	r3, [r7, #36]	@ 0x24
	txHeader.StdId = 0x103;
 800103a:	f240 1303 	movw	r3, #259	@ 0x103
 800103e:	61bb      	str	r3, [r7, #24]
	txHeader.TransmitGlobalTime = DISABLE;
 8001040:	2300      	movs	r3, #0
 8001042:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c


	uint32_t canMailBox;
//	HAL_CAN_AddTxMessage((CAN_HandleTypeDef *)driver_data, &txHeader, data, &canMailBox);
	HAL_CAN_AddTxMessage(&hcan1, &txHeader, data, &canMailBox);
 8001046:	f107 0314 	add.w	r3, r7, #20
 800104a:	f107 0118 	add.w	r1, r7, #24
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	4806      	ldr	r0, [pc, #24]	@ (800106c <csp_can_tx_frame+0x4c>)
 8001052:	f003 fc31 	bl	80048b8 <HAL_CAN_AddTxMessage>
	uart_ring_buffer_put(data, dlc);
 8001056:	78fb      	ldrb	r3, [r7, #3]
 8001058:	4619      	mov	r1, r3
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f008 fbc0 	bl	80097e0 <uart_ring_buffer_put>
	return CSP_ERR_NONE;
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3730      	adds	r7, #48	@ 0x30
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20000580 	.word	0x20000580

08001070 <csp_clock_get_time>:

#include <csp/csp_types.h>
#include <csp/csp_hooks.h>

__attribute__((weak)) void csp_clock_get_time(csp_timestamp_t * time) {
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	time->tv_sec = 0;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
	time->tv_nsec = 0;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	605a      	str	r2, [r3, #4]
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <csp_clock_set_time>:

__attribute__((weak)) int csp_clock_set_time(const csp_timestamp_t * time) {
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	return CSP_ERR_NOTSUP;
 8001098:	f06f 0304 	mvn.w	r3, #4
}
 800109c:	4618      	mov	r0, r3
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <csp_queue_create_static>:
#include <csp/csp.h>

#include <FreeRTOS.h>
#include <queue.h>

csp_queue_handle_t csp_queue_create_static(int length, size_t item_size, char * buffer, csp_static_queue_t * queue) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af02      	add	r7, sp, #8
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
 80010b4:	603b      	str	r3, [r7, #0]
	return xQueueCreateStatic(length, item_size, (uint8_t *)buffer, queue);
 80010b6:	68f8      	ldr	r0, [r7, #12]
 80010b8:	2300      	movs	r3, #0
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	68b9      	ldr	r1, [r7, #8]
 80010c2:	f005 fe7f 	bl	8006dc4 <xQueueGenericCreateStatic>
 80010c6:	4603      	mov	r3, r0
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <csp_queue_enqueue>:

int csp_queue_enqueue(csp_queue_handle_t handle, const void * value, uint32_t timeout) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
	if (timeout != CSP_MAX_TIMEOUT)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f1b3 3fff 	cmp.w	r3, #4294967295
		timeout = timeout / portTICK_PERIOD_MS;
	if (xQueueSendToBack(handle, value, timeout) == pdPASS) {
 80010e2:	2300      	movs	r3, #0
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	68b9      	ldr	r1, [r7, #8]
 80010e8:	68f8      	ldr	r0, [r7, #12]
 80010ea:	f005 ff0b 	bl	8006f04 <xQueueGenericSend>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d101      	bne.n	80010f8 <csp_queue_enqueue+0x28>
		return CSP_QUEUE_OK;
 80010f4:	2300      	movs	r3, #0
 80010f6:	e001      	b.n	80010fc <csp_queue_enqueue+0x2c>
	}
	return CSP_QUEUE_ERROR;
 80010f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <csp_queue_enqueue_isr>:

int csp_queue_enqueue_isr(csp_queue_handle_t handle, const void * value, int * task_woken) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
	if (xQueueSendToBackFromISR(handle, value, (portBASE_TYPE *)task_woken) == pdPASS) {
 8001110:	2300      	movs	r3, #0
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	68b9      	ldr	r1, [r7, #8]
 8001116:	68f8      	ldr	r0, [r7, #12]
 8001118:	f005 fff6 	bl	8007108 <xQueueGenericSendFromISR>
 800111c:	4603      	mov	r3, r0
 800111e:	2b01      	cmp	r3, #1
 8001120:	d101      	bne.n	8001126 <csp_queue_enqueue_isr+0x22>
		return CSP_QUEUE_OK;
 8001122:	2300      	movs	r3, #0
 8001124:	e001      	b.n	800112a <csp_queue_enqueue_isr+0x26>
	}
	return CSP_QUEUE_ERROR;
 8001126:	f04f 33ff 	mov.w	r3, #4294967295
}
 800112a:	4618      	mov	r0, r3
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <csp_queue_dequeue>:

int csp_queue_dequeue(csp_queue_handle_t handle, void * buf, uint32_t timeout) {
 8001132:	b580      	push	{r7, lr}
 8001134:	b084      	sub	sp, #16
 8001136:	af00      	add	r7, sp, #0
 8001138:	60f8      	str	r0, [r7, #12]
 800113a:	60b9      	str	r1, [r7, #8]
 800113c:	607a      	str	r2, [r7, #4]
	if (timeout != CSP_MAX_TIMEOUT)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f1b3 3fff 	cmp.w	r3, #4294967295
		timeout = timeout / portTICK_PERIOD_MS;
	if (xQueueReceive(handle, buf, timeout) == pdPASS) {
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	68b9      	ldr	r1, [r7, #8]
 8001148:	68f8      	ldr	r0, [r7, #12]
 800114a:	f006 f87b 	bl	8007244 <xQueueReceive>
 800114e:	4603      	mov	r3, r0
 8001150:	2b01      	cmp	r3, #1
 8001152:	d101      	bne.n	8001158 <csp_queue_dequeue+0x26>
		return CSP_QUEUE_OK;
 8001154:	2300      	movs	r3, #0
 8001156:	e001      	b.n	800115c <csp_queue_dequeue+0x2a>
	}
	return CSP_QUEUE_ERROR;
 8001158:	f04f 33ff 	mov.w	r3, #4294967295
}
 800115c:	4618      	mov	r0, r3
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <csp_queue_size>:
		return CSP_QUEUE_OK;
	}
	return CSP_QUEUE_ERROR;
}

int csp_queue_size(csp_queue_handle_t handle) {
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
	return uxQueueMessagesWaiting(handle);
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f006 f94b 	bl	8007408 <uxQueueMessagesWaiting>
 8001172:	4603      	mov	r3, r0
}
 8001174:	4618      	mov	r0, r3
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <csp_memfree_hook>:
#include <csp/csp_hooks.h>

#include <FreeRTOS.h>
#include <task.h>

__attribute__((weak)) uint32_t csp_memfree_hook(void) {
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
	return (uint32_t)xPortGetFreeHeapSize();
 8001180:	f008 f90e 	bl	80093a0 <xPortGetFreeHeapSize>
 8001184:	4603      	mov	r3, r0
#else
	return 0;
#endif
}
 8001186:	4618      	mov	r0, r3
 8001188:	bd80      	pop	{r7, pc}

0800118a <csp_ps_hook>:

__attribute__((weak)) unsigned int csp_ps_hook(csp_packet_t * packet) {
 800118a:	b480      	push	{r7}
 800118c:	b083      	sub	sp, #12
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
	return 0;
 8001192:	2300      	movs	r3, #0
 8001194:	4618      	mov	r0, r3
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <csp_get_ms>:
#include <csp/arch/csp_time.h>

#include <FreeRTOS.h>
#include <task.h>  // FreeRTOS

uint32_t csp_get_ms(void) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
	return (uint32_t)(xTaskGetTickCount() * (1000 / configTICK_RATE_HZ));
 80011a4:	f006 fdce 	bl	8007d44 <xTaskGetTickCount>
 80011a8:	4603      	mov	r3, r0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <csp_get_s>:

uint32_t csp_get_ms_isr(void) {
	return (uint32_t)(xTaskGetTickCountFromISR() * (1000 / configTICK_RATE_HZ));
}

uint32_t csp_get_s(void) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
	return (uint32_t)(xTaskGetTickCount() / configTICK_RATE_HZ);
 80011b4:	f006 fdc6 	bl	8007d44 <xTaskGetTickCount>
 80011b8:	4603      	mov	r3, r0
 80011ba:	4a03      	ldr	r2, [pc, #12]	@ (80011c8 <csp_get_s+0x18>)
 80011bc:	fba2 2303 	umull	r2, r3, r2, r3
 80011c0:	099b      	lsrs	r3, r3, #6
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	10624dd3 	.word	0x10624dd3

080011cc <csp_input_hook>:

	bif_a = if_a;
	bif_b = if_b;
}

__attribute__((weak)) void csp_input_hook(csp_iface_t * iface, csp_packet_t * packet) {
 80011cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ce:	b089      	sub	sp, #36	@ 0x24
 80011d0:	af06      	add	r7, sp, #24
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
	csp_print_packet("INP: S %u, D %u, Dp %u, Sp %u, Pr %u, Fl 0x%02X, Sz %" PRIu16 " VIA: %s\n",
 80011d6:	4b15      	ldr	r3, [pc, #84]	@ (800122c <csp_input_hook+0x60>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d021      	beq.n	8001222 <csp_input_hook+0x56>
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	8b1b      	ldrh	r3, [r3, #24]
 80011e2:	461d      	mov	r5, r3
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	8b5b      	ldrh	r3, [r3, #26]
 80011e8:	461e      	mov	r6, r3
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	7f1b      	ldrb	r3, [r3, #28]
 80011ee:	469c      	mov	ip, r3
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	7f5b      	ldrb	r3, [r3, #29]
 80011f4:	461a      	mov	r2, r3
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	7d9b      	ldrb	r3, [r3, #22]
 80011fa:	4619      	mov	r1, r3
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	7ddb      	ldrb	r3, [r3, #23]
 8001200:	4618      	mov	r0, r3
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	8a9b      	ldrh	r3, [r3, #20]
 8001206:	461c      	mov	r4, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	9304      	str	r3, [sp, #16]
 800120e:	9403      	str	r4, [sp, #12]
 8001210:	9002      	str	r0, [sp, #8]
 8001212:	9101      	str	r1, [sp, #4]
 8001214:	9200      	str	r2, [sp, #0]
 8001216:	4663      	mov	r3, ip
 8001218:	4632      	mov	r2, r6
 800121a:	4629      	mov	r1, r5
 800121c:	4804      	ldr	r0, [pc, #16]	@ (8001230 <csp_input_hook+0x64>)
 800121e:	f000 fc55 	bl	8001acc <csp_print_func>
				   packet->id.src, packet->id.dst, packet->id.dport,
				   packet->id.sport, packet->id.pri, packet->id.flags, packet->length, iface->name);
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800122a:	bf00      	nop
 800122c:	2000026b 	.word	0x2000026b
 8001230:	0800e4b0 	.word	0x0800e4b0

08001234 <csp_buffer_init>:
#define SKBUF_SIZE CSP_BUFFER_ALIGN *((sizeof(csp_skbf_t) + CSP_BUFFER_SIZE + CSP_BUFFER_PACKET_OVERHEAD + (CSP_BUFFER_ALIGN - 1)) / CSP_BUFFER_ALIGN)

// Queue of free CSP buffers
static csp_queue_handle_t csp_buffers;

void csp_buffer_init(void) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
	 * Putting this section in a separate non .bss area, saves some boot time */
	static char csp_buffer_pool[SKBUF_SIZE * CSP_BUFFER_COUNT] __attribute__((section(".noinit"))); // không được khởi tạo lại về 0 khi MCU reset mềm khi đặt nó vào section 
	static csp_static_queue_t csp_buffers_queue __attribute__((section(".noinit")));
	static char csp_buffer_queue_data[CSP_BUFFER_COUNT * sizeof(csp_skbf_t *)] __attribute__((section(".noinit")));

	csp_buffers = csp_queue_create_static(CSP_BUFFER_COUNT, sizeof(csp_skbf_t *), csp_buffer_queue_data, &csp_buffers_queue);
 800123a:	4b14      	ldr	r3, [pc, #80]	@ (800128c <csp_buffer_init+0x58>)
 800123c:	4a14      	ldr	r2, [pc, #80]	@ (8001290 <csp_buffer_init+0x5c>)
 800123e:	2104      	movs	r1, #4
 8001240:	2014      	movs	r0, #20
 8001242:	f7ff ff31 	bl	80010a8 <csp_queue_create_static>
 8001246:	4603      	mov	r3, r0
 8001248:	4a12      	ldr	r2, [pc, #72]	@ (8001294 <csp_buffer_init+0x60>)
 800124a:	6013      	str	r3, [r2, #0]

	for (unsigned int i = 0; i < CSP_BUFFER_COUNT; i++) {
 800124c:	2300      	movs	r3, #0
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	e014      	b.n	800127c <csp_buffer_init+0x48>
		csp_skbf_t * buf = (void *)&csp_buffer_pool[i * SKBUF_SIZE];
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8001258:	fb02 f303 	mul.w	r3, r2, r3
 800125c:	4a0e      	ldr	r2, [pc, #56]	@ (8001298 <csp_buffer_init+0x64>)
 800125e:	4413      	add	r3, r2
 8001260:	603b      	str	r3, [r7, #0]
		buf->skbf_addr = buf;
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	683a      	ldr	r2, [r7, #0]
 8001266:	605a      	str	r2, [r3, #4]
		csp_queue_enqueue(csp_buffers, &buf, 0);
 8001268:	4b0a      	ldr	r3, [pc, #40]	@ (8001294 <csp_buffer_init+0x60>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4639      	mov	r1, r7
 800126e:	2200      	movs	r2, #0
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff2d 	bl	80010d0 <csp_queue_enqueue>
	for (unsigned int i = 0; i < CSP_BUFFER_COUNT; i++) {
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	3301      	adds	r3, #1
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2b13      	cmp	r3, #19
 8001280:	d9e7      	bls.n	8001252 <csp_buffer_init+0x1e>
	}
}
 8001282:	bf00      	nop
 8001284:	bf00      	nop
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	2000f7cc 	.word	0x2000f7cc
 8001290:	2000f81c 	.word	0x2000f81c
 8001294:	20000260 	.word	0x20000260
 8001298:	2000dfbc 	.word	0x2000dfbc

0800129c <csp_buffer_get>:

	buffer->refcount = 1;
	return buffer->skbf_data;
}

void * csp_buffer_get(size_t _data_size) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]

	if (_data_size > CSP_BUFFER_SIZE) {
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80012aa:	d904      	bls.n	80012b6 <csp_buffer_get+0x1a>
		csp_dbg_errno = CSP_DBG_ERR_MTU_EXCEEDED;
 80012ac:	4b16      	ldr	r3, [pc, #88]	@ (8001308 <csp_buffer_get+0x6c>)
 80012ae:	2202      	movs	r2, #2
 80012b0:	701a      	strb	r2, [r3, #0]
		return NULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	e023      	b.n	80012fe <csp_buffer_get+0x62>
	}

	csp_skbf_t * buffer = NULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
	csp_queue_dequeue(csp_buffers, &buffer, 0);
 80012ba:	4b14      	ldr	r3, [pc, #80]	@ (800130c <csp_buffer_get+0x70>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f107 010c 	add.w	r1, r7, #12
 80012c2:	2200      	movs	r2, #0
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff ff34 	bl	8001132 <csp_queue_dequeue>
	if (buffer == NULL) {
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d107      	bne.n	80012e0 <csp_buffer_get+0x44>
		csp_dbg_buffer_out++;
 80012d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001310 <csp_buffer_get+0x74>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	3301      	adds	r3, #1
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001310 <csp_buffer_get+0x74>)
 80012da:	701a      	strb	r2, [r3, #0]
		return NULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	e00e      	b.n	80012fe <csp_buffer_get+0x62>
	}

	if (buffer != buffer->skbf_addr) {
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	685a      	ldr	r2, [r3, #4]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d004      	beq.n	80012f4 <csp_buffer_get+0x58>
		csp_dbg_errno = CSP_DBG_ERR_CORRUPT_BUFFER;
 80012ea:	4b07      	ldr	r3, [pc, #28]	@ (8001308 <csp_buffer_get+0x6c>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	701a      	strb	r2, [r3, #0]
		return NULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	e004      	b.n	80012fe <csp_buffer_get+0x62>
	}

	buffer->refcount = 1;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2201      	movs	r2, #1
 80012f8:	601a      	str	r2, [r3, #0]
	return buffer->skbf_data;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	3308      	adds	r3, #8
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000266 	.word	0x20000266
 800130c:	20000260 	.word	0x20000260
 8001310:	20000265 	.word	0x20000265

08001314 <csp_buffer_free_isr>:

void csp_buffer_free_isr(void * packet) {
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]

	if (packet == NULL) {
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d033      	beq.n	800138a <csp_buffer_free_isr+0x76>
		// freeing a NULL pointer is OK, e.g. standard free()
		return;
	}

	csp_skbf_t * buf = (void *)(((uint8_t *)packet) - sizeof(csp_skbf_t));
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	3b08      	subs	r3, #8
 8001326:	60fb      	str	r3, [r7, #12]

	if (((uintptr_t)buf % CSP_BUFFER_ALIGN) > 0) {
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f003 0303 	and.w	r3, r3, #3
 800132e:	2b00      	cmp	r3, #0
 8001330:	d003      	beq.n	800133a <csp_buffer_free_isr+0x26>
		csp_dbg_errno = CSP_DBG_ERR_CORRUPT_BUFFER;
 8001332:	4b18      	ldr	r3, [pc, #96]	@ (8001394 <csp_buffer_free_isr+0x80>)
 8001334:	2201      	movs	r2, #1
 8001336:	701a      	strb	r2, [r3, #0]
		return;
 8001338:	e028      	b.n	800138c <csp_buffer_free_isr+0x78>
	}

	if (buf->skbf_addr != buf) {
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	685a      	ldr	r2, [r3, #4]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	429a      	cmp	r2, r3
 8001342:	d003      	beq.n	800134c <csp_buffer_free_isr+0x38>
		csp_dbg_errno = CSP_DBG_ERR_CORRUPT_BUFFER;
 8001344:	4b13      	ldr	r3, [pc, #76]	@ (8001394 <csp_buffer_free_isr+0x80>)
 8001346:	2201      	movs	r2, #1
 8001348:	701a      	strb	r2, [r3, #0]
		return;
 800134a:	e01f      	b.n	800138c <csp_buffer_free_isr+0x78>
	}

	if (buf->refcount == 0) {
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d103      	bne.n	800135c <csp_buffer_free_isr+0x48>
		csp_dbg_errno = CSP_DBG_ERR_CORRUPT_BUFFER;
 8001354:	4b0f      	ldr	r3, [pc, #60]	@ (8001394 <csp_buffer_free_isr+0x80>)
 8001356:	2201      	movs	r2, #1
 8001358:	701a      	strb	r2, [r3, #0]
		return;
 800135a:	e017      	b.n	800138c <csp_buffer_free_isr+0x78>
	}

	if (--(buf->refcount) > 0) {
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	3a01      	subs	r2, #1
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <csp_buffer_free_isr+0x5e>
		csp_dbg_errno = CSP_DBG_ERR_CORRUPT_BUFFER;;
 800136a:	4b0a      	ldr	r3, [pc, #40]	@ (8001394 <csp_buffer_free_isr+0x80>)
 800136c:	2201      	movs	r2, #1
 800136e:	701a      	strb	r2, [r3, #0]
		return;
 8001370:	e00c      	b.n	800138c <csp_buffer_free_isr+0x78>
	}

	int task_woken = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	60bb      	str	r3, [r7, #8]
	csp_queue_enqueue_isr(csp_buffers, &buf, &task_woken);
 8001376:	4b08      	ldr	r3, [pc, #32]	@ (8001398 <csp_buffer_free_isr+0x84>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f107 0208 	add.w	r2, r7, #8
 800137e:	f107 010c 	add.w	r1, r7, #12
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff febe 	bl	8001104 <csp_queue_enqueue_isr>
 8001388:	e000      	b.n	800138c <csp_buffer_free_isr+0x78>
		return;
 800138a:	bf00      	nop
}
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000266 	.word	0x20000266
 8001398:	20000260 	.word	0x20000260

0800139c <csp_buffer_free>:

void csp_buffer_free(void * packet) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]

	if (packet == NULL) {
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d030      	beq.n	800140c <csp_buffer_free+0x70>
		/* freeing a NULL pointer is OK, e.g. standard free() */
		return;
	}

	csp_skbf_t * buf = (void *)(((uint8_t *)packet) - sizeof(csp_skbf_t));
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	3b08      	subs	r3, #8
 80013ae:	60fb      	str	r3, [r7, #12]

	if (((uintptr_t)buf % CSP_BUFFER_ALIGN) > 0) {
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f003 0303 	and.w	r3, r3, #3
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <csp_buffer_free+0x26>
		csp_dbg_errno = CSP_DBG_ERR_CORRUPT_BUFFER;
 80013ba:	4b16      	ldr	r3, [pc, #88]	@ (8001414 <csp_buffer_free+0x78>)
 80013bc:	2201      	movs	r2, #1
 80013be:	701a      	strb	r2, [r3, #0]
		return;
 80013c0:	e025      	b.n	800140e <csp_buffer_free+0x72>
	}

	if (buf->skbf_addr != buf) {
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	685a      	ldr	r2, [r3, #4]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d003      	beq.n	80013d4 <csp_buffer_free+0x38>
		csp_dbg_errno = CSP_DBG_ERR_CORRUPT_BUFFER;
 80013cc:	4b11      	ldr	r3, [pc, #68]	@ (8001414 <csp_buffer_free+0x78>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	701a      	strb	r2, [r3, #0]
		return;
 80013d2:	e01c      	b.n	800140e <csp_buffer_free+0x72>
	}

	if (buf->refcount == 0) {
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d103      	bne.n	80013e4 <csp_buffer_free+0x48>
		csp_dbg_errno = CSP_DBG_ERR_ALREADY_FREE;
 80013dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001414 <csp_buffer_free+0x78>)
 80013de:	2203      	movs	r2, #3
 80013e0:	701a      	strb	r2, [r3, #0]
		return;
 80013e2:	e014      	b.n	800140e <csp_buffer_free+0x72>
	}

	if (--(buf->refcount) > 0) {
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	3a01      	subs	r2, #1
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d003      	beq.n	80013fa <csp_buffer_free+0x5e>
		csp_dbg_errno = CSP_DBG_ERR_REFCOUNT;
 80013f2:	4b08      	ldr	r3, [pc, #32]	@ (8001414 <csp_buffer_free+0x78>)
 80013f4:	2204      	movs	r2, #4
 80013f6:	701a      	strb	r2, [r3, #0]
		return;
 80013f8:	e009      	b.n	800140e <csp_buffer_free+0x72>
	}

	csp_queue_enqueue(csp_buffers, &buf, 0);
 80013fa:	4b07      	ldr	r3, [pc, #28]	@ (8001418 <csp_buffer_free+0x7c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f107 010c 	add.w	r1, r7, #12
 8001402:	2200      	movs	r2, #0
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff fe63 	bl	80010d0 <csp_queue_enqueue>
 800140a:	e000      	b.n	800140e <csp_buffer_free+0x72>
		return;
 800140c:	bf00      	nop
}
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20000266 	.word	0x20000266
 8001418:	20000260 	.word	0x20000260

0800141c <csp_buffer_clone>:

void * csp_buffer_clone(void * buffer) {
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]

	csp_packet_t * packet = (csp_packet_t *)buffer;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	60fb      	str	r3, [r7, #12]
	if (!packet) {
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d101      	bne.n	8001432 <csp_buffer_clone+0x16>
		return NULL;
 800142e:	2300      	movs	r3, #0
 8001430:	e011      	b.n	8001456 <csp_buffer_clone+0x3a>
	}

	csp_packet_t * clone = csp_buffer_get(packet->length);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	8a9b      	ldrh	r3, [r3, #20]
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff ff30 	bl	800129c <csp_buffer_get>
 800143c:	60b8      	str	r0, [r7, #8]
	if (clone) {
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d007      	beq.n	8001454 <csp_buffer_clone+0x38>
		memcpy(clone, packet, csp_buffer_size());
 8001444:	f000 f818 	bl	8001478 <csp_buffer_size>
 8001448:	4603      	mov	r3, r0
 800144a:	461a      	mov	r2, r3
 800144c:	68f9      	ldr	r1, [r7, #12]
 800144e:	68b8      	ldr	r0, [r7, #8]
 8001450:	f009 fd9d 	bl	800af8e <memcpy>
	}

	return clone;
 8001454:	68bb      	ldr	r3, [r7, #8]
}
 8001456:	4618      	mov	r0, r3
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
	...

08001460 <csp_buffer_remaining>:

int csp_buffer_remaining(void) {
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
	return csp_queue_size(csp_buffers);
 8001464:	4b03      	ldr	r3, [pc, #12]	@ (8001474 <csp_buffer_remaining+0x14>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff fe7b 	bl	8001164 <csp_queue_size>
 800146e:	4603      	mov	r3, r0
}
 8001470:	4618      	mov	r0, r3
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20000260 	.word	0x20000260

08001478 <csp_buffer_size>:

size_t csp_buffer_size(void) {
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
	return (CSP_BUFFER_SIZE + CSP_BUFFER_PACKET_OVERHEAD);
 800147c:	f44f 7396 	mov.w	r3, #300	@ 0x12c
}
 8001480:	4618      	mov	r0, r3
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <csp_buffer_data_size>:

size_t csp_buffer_data_size(void) {
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0
	return CSP_BUFFER_SIZE;
 800148e:	f44f 7380 	mov.w	r3, #256	@ 0x100
}
 8001492:	4618      	mov	r0, r3
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <csp_conn_enqueue_packet>:
		}
	}
#endif
}

int csp_conn_enqueue_packet(csp_conn_t * conn, csp_packet_t * packet) {
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]

	if (!conn)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d102      	bne.n	80014b2 <csp_conn_enqueue_packet+0x16>
		return CSP_ERR_INVAL;
 80014ac:	f06f 0301 	mvn.w	r3, #1
 80014b0:	e013      	b.n	80014da <csp_conn_enqueue_packet+0x3e>

	if (csp_queue_enqueue(conn->rx_queue, &packet, 0) != CSP_QUEUE_OK) {
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	4639      	mov	r1, r7
 80014b8:	2200      	movs	r2, #0
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff fe08 	bl	80010d0 <csp_queue_enqueue>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d008      	beq.n	80014d8 <csp_conn_enqueue_packet+0x3c>
		csp_dbg_conn_ovf++;
 80014c6:	4b07      	ldr	r3, [pc, #28]	@ (80014e4 <csp_conn_enqueue_packet+0x48>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	3301      	adds	r3, #1
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	4b05      	ldr	r3, [pc, #20]	@ (80014e4 <csp_conn_enqueue_packet+0x48>)
 80014d0:	701a      	strb	r2, [r3, #0]
		return CSP_ERR_NOMEM;
 80014d2:	f04f 33ff 	mov.w	r3, #4294967295
 80014d6:	e000      	b.n	80014da <csp_conn_enqueue_packet+0x3e>
	}

	return CSP_ERR_NONE;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000268 	.word	0x20000268

080014e8 <csp_conn_init>:

void csp_conn_init(void) {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0

	for (int i = 0; i < CSP_CONN_MAX; i++) {
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	e028      	b.n	8001546 <csp_conn_init+0x5e>
		csp_conn_t * conn = &arr_conn[i];
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	22a8      	movs	r2, #168	@ 0xa8
 80014f8:	fb02 f303 	mul.w	r3, r2, r3
 80014fc:	4a16      	ldr	r2, [pc, #88]	@ (8001558 <csp_conn_init+0x70>)
 80014fe:	4413      	add	r3, r2
 8001500:	60bb      	str	r3, [r7, #8]

		conn->sport_outgoing = CSP_PORT_MAX_BIND + 1 + i;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	b2db      	uxtb	r3, r3
 8001506:	3340      	adds	r3, #64	@ 0x40
 8001508:	b2da      	uxtb	r2, r3
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	761a      	strb	r2, [r3, #24]
		conn->state = CONN_CLOSED;
 800150e:	2300      	movs	r3, #0
 8001510:	607b      	str	r3, [r7, #4]
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	3304      	adds	r3, #4
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	f3bf 8f5b 	dmb	ish
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	f3bf 8f5b 	dmb	ish
		conn->idin.flags = 0;
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	2200      	movs	r2, #0
 8001526:	725a      	strb	r2, [r3, #9]
		conn->rx_queue = csp_queue_create_static(CSP_CONN_RXQUEUE_LEN, sizeof(csp_packet_t *), conn->rx_queue_static_data, &conn->rx_queue_static);
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	3320      	adds	r3, #32
 8001532:	2104      	movs	r1, #4
 8001534:	200a      	movs	r0, #10
 8001536:	f7ff fdb7 	bl	80010a8 <csp_queue_create_static>
 800153a:	4602      	mov	r2, r0
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	61da      	str	r2, [r3, #28]
	for (int i = 0; i < CSP_CONN_MAX; i++) {
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	3301      	adds	r3, #1
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	2b07      	cmp	r3, #7
 800154a:	ddd3      	ble.n	80014f4 <csp_conn_init+0xc>

#if (CSP_USE_RDP)
		csp_rdp_init(conn);
#endif
	}
}
 800154c:	bf00      	nop
 800154e:	bf00      	nop
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	2000f86c 	.word	0x2000f86c

0800155c <csp_conn_find_existing>:
	}

	return NULL;
}

csp_conn_t * csp_conn_find_existing(csp_id_t * id) {
 800155c:	b480      	push	{r7}
 800155e:	b087      	sub	sp, #28
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < CSP_CONN_MAX; i++) {
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]
 8001568:	e03c      	b.n	80015e4 <csp_conn_find_existing+0x88>
		csp_conn_t * conn = &arr_conn[i];
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	22a8      	movs	r2, #168	@ 0xa8
 800156e:	fb02 f303 	mul.w	r3, r2, r3
 8001572:	4a21      	ldr	r2, [pc, #132]	@ (80015f8 <csp_conn_find_existing+0x9c>)
 8001574:	4413      	add	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
		 * Also this is written using explicit fields, not bitmasks, in order to improve
		 * portability and dual use between different header formats.
		 */

		/* Connection must match dport */
		if (conn->idin.dport != id->dport)
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	7b9a      	ldrb	r2, [r3, #14]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	799b      	ldrb	r3, [r3, #6]
 8001580:	429a      	cmp	r2, r3
 8001582:	d123      	bne.n	80015cc <csp_conn_find_existing+0x70>
			continue;

		/* Connection must match sport */
		if (conn->idin.sport != id->sport)
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	7bda      	ldrb	r2, [r3, #15]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	79db      	ldrb	r3, [r3, #7]
 800158c:	429a      	cmp	r2, r3
 800158e:	d11f      	bne.n	80015d0 <csp_conn_find_existing+0x74>
			continue;

		/* Connection must match destination */
		if (conn->idin.dst != id->dst)
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	899a      	ldrh	r2, [r3, #12]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	889b      	ldrh	r3, [r3, #4]
 8001598:	b29b      	uxth	r3, r3
 800159a:	429a      	cmp	r2, r3
 800159c:	d11a      	bne.n	80015d4 <csp_conn_find_existing+0x78>
			continue;


		/* Connection must be open */
		if (conn->state != CONN_OPEN)
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	3304      	adds	r3, #4
 80015a2:	f3bf 8f5b 	dmb	ish
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f3bf 8f5b 	dmb	ish
 80015ac:	60bb      	str	r3, [r7, #8]
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d111      	bne.n	80015d8 <csp_conn_find_existing+0x7c>
			continue;

		/* Connection must be client */
		if (conn->type != CONN_CLIENT)
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	f3bf 8f5b 	dmb	ish
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f3bf 8f5b 	dmb	ish
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d109      	bne.n	80015dc <csp_conn_find_existing+0x80>
			continue;

		/* All conditions found! */
		return conn;
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	e00f      	b.n	80015ec <csp_conn_find_existing+0x90>
			continue;
 80015cc:	bf00      	nop
 80015ce:	e006      	b.n	80015de <csp_conn_find_existing+0x82>
			continue;
 80015d0:	bf00      	nop
 80015d2:	e004      	b.n	80015de <csp_conn_find_existing+0x82>
			continue;
 80015d4:	bf00      	nop
 80015d6:	e002      	b.n	80015de <csp_conn_find_existing+0x82>
			continue;
 80015d8:	bf00      	nop
 80015da:	e000      	b.n	80015de <csp_conn_find_existing+0x82>
			continue;
 80015dc:	bf00      	nop
	for (int i = 0; i < CSP_CONN_MAX; i++) {
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	3301      	adds	r3, #1
 80015e2:	617b      	str	r3, [r7, #20]
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	2b07      	cmp	r3, #7
 80015e8:	ddbf      	ble.n	800156a <csp_conn_find_existing+0xe>
	}

	return NULL;
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	371c      	adds	r7, #28
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	2000f86c 	.word	0x2000f86c

080015fc <csp_conn_flush_rx_queue>:

static int csp_conn_flush_rx_queue(csp_conn_t * conn) {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]

	csp_packet_t * packet;

	/* Flush packet queues */
	while (csp_queue_dequeue(conn->rx_queue, &packet, 0) == CSP_QUEUE_OK) {
 8001604:	e006      	b.n	8001614 <csp_conn_flush_rx_queue+0x18>
		if (packet != NULL) {
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d003      	beq.n	8001614 <csp_conn_flush_rx_queue+0x18>
			csp_buffer_free(packet);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff fec4 	bl	800139c <csp_buffer_free>
	while (csp_queue_dequeue(conn->rx_queue, &packet, 0) == CSP_QUEUE_OK) {
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	69db      	ldr	r3, [r3, #28]
 8001618:	f107 010c 	add.w	r1, r7, #12
 800161c:	2200      	movs	r2, #0
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff fd87 	bl	8001132 <csp_queue_dequeue>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d0ed      	beq.n	8001606 <csp_conn_flush_rx_queue+0xa>
		}
	}

	return CSP_ERR_NONE;
 800162a:	2300      	movs	r3, #0
}
 800162c:	4618      	mov	r0, r3
 800162e:	3710      	adds	r7, #16
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <csp_conn_allocate>:

csp_conn_t * csp_conn_allocate(csp_conn_type_t type) {
 8001634:	b490      	push	{r4, r7}
 8001636:	b08a      	sub	sp, #40	@ 0x28
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	71fb      	strb	r3, [r7, #7]

	static uint8_t csp_conn_last_given = 0;

	/* Search for free connection */
	csp_conn_t * conn = NULL;
 800163e:	2300      	movs	r3, #0
 8001640:	627b      	str	r3, [r7, #36]	@ 0x24
	int i = csp_conn_last_given;
 8001642:	4b36      	ldr	r3, [pc, #216]	@ (800171c <csp_conn_allocate+0xe8>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	623b      	str	r3, [r7, #32]
	for (int j = 0; j < CSP_CONN_MAX; j++) {
 8001648:	2300      	movs	r3, #0
 800164a:	61fb      	str	r3, [r7, #28]
 800164c:	e03f      	b.n	80016ce <csp_conn_allocate+0x9a>
		i = (i + 1) % CSP_CONN_MAX;
 800164e:	6a3b      	ldr	r3, [r7, #32]
 8001650:	3301      	adds	r3, #1
 8001652:	425a      	negs	r2, r3
 8001654:	f003 0307 	and.w	r3, r3, #7
 8001658:	f002 0207 	and.w	r2, r2, #7
 800165c:	bf58      	it	pl
 800165e:	4253      	negpl	r3, r2
 8001660:	623b      	str	r3, [r7, #32]

		int expected = CONN_CLOSED;
 8001662:	2300      	movs	r3, #0
 8001664:	613b      	str	r3, [r7, #16]
		if (atomic_compare_exchange_weak(&arr_conn[i].state, &expected, CONN_OPEN)) {
 8001666:	6a3b      	ldr	r3, [r7, #32]
 8001668:	22a8      	movs	r2, #168	@ 0xa8
 800166a:	fb02 f303 	mul.w	r3, r2, r3
 800166e:	4a2c      	ldr	r2, [pc, #176]	@ (8001720 <csp_conn_allocate+0xec>)
 8001670:	4413      	add	r3, r2
 8001672:	3304      	adds	r3, #4
 8001674:	61bb      	str	r3, [r7, #24]
 8001676:	2301      	movs	r3, #1
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	461c      	mov	r4, r3
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	f107 0310 	add.w	r3, r7, #16
 8001684:	6818      	ldr	r0, [r3, #0]
 8001686:	f3bf 8f5b 	dmb	ish
 800168a:	e852 1f00 	ldrex	r1, [r2]
 800168e:	4281      	cmp	r1, r0
 8001690:	d103      	bne.n	800169a <csp_conn_allocate+0x66>
 8001692:	e842 4c00 	strex	ip, r4, [r2]
 8001696:	f1bc 0f00 	cmp.w	ip, #0
 800169a:	f3bf 8f5b 	dmb	ish
 800169e:	bf0c      	ite	eq
 80016a0:	2201      	moveq	r2, #1
 80016a2:	2200      	movne	r2, #0
 80016a4:	2a00      	cmp	r2, #0
 80016a6:	d100      	bne.n	80016aa <csp_conn_allocate+0x76>
 80016a8:	6019      	str	r1, [r3, #0]
 80016aa:	4613      	mov	r3, r2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d00b      	beq.n	80016c8 <csp_conn_allocate+0x94>
			conn = &arr_conn[i];
 80016b0:	6a3b      	ldr	r3, [r7, #32]
 80016b2:	22a8      	movs	r2, #168	@ 0xa8
 80016b4:	fb02 f303 	mul.w	r3, r2, r3
 80016b8:	4a19      	ldr	r2, [pc, #100]	@ (8001720 <csp_conn_allocate+0xec>)
 80016ba:	4413      	add	r3, r2
 80016bc:	627b      	str	r3, [r7, #36]	@ 0x24
			csp_conn_last_given = i;
 80016be:	6a3b      	ldr	r3, [r7, #32]
 80016c0:	b2da      	uxtb	r2, r3
 80016c2:	4b16      	ldr	r3, [pc, #88]	@ (800171c <csp_conn_allocate+0xe8>)
 80016c4:	701a      	strb	r2, [r3, #0]
 80016c6:	e005      	b.n	80016d4 <csp_conn_allocate+0xa0>
	for (int j = 0; j < CSP_CONN_MAX; j++) {
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	3301      	adds	r3, #1
 80016cc:	61fb      	str	r3, [r7, #28]
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	2b07      	cmp	r3, #7
 80016d2:	ddbc      	ble.n	800164e <csp_conn_allocate+0x1a>
			break;
		}
	}

	if (conn == NULL) {
 80016d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d107      	bne.n	80016ea <csp_conn_allocate+0xb6>
		csp_dbg_conn_out++;
 80016da:	4b12      	ldr	r3, [pc, #72]	@ (8001724 <csp_conn_allocate+0xf0>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	3301      	adds	r3, #1
 80016e0:	b2da      	uxtb	r2, r3
 80016e2:	4b10      	ldr	r3, [pc, #64]	@ (8001724 <csp_conn_allocate+0xf0>)
 80016e4:	701a      	strb	r2, [r3, #0]
		return NULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	e013      	b.n	8001712 <csp_conn_allocate+0xde>
	}

	conn->timestamp = 0;
 80016ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ec:	2200      	movs	r2, #0
 80016ee:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	conn->type = type;
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	617b      	str	r3, [r7, #20]
 80016f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f8:	697a      	ldr	r2, [r7, #20]
 80016fa:	f3bf 8f5b 	dmb	ish
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	f3bf 8f5b 	dmb	ish
	conn->idin.flags = 0;
 8001704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001706:	2200      	movs	r2, #0
 8001708:	725a      	strb	r2, [r3, #9]
	conn->idout.flags = 0;
 800170a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170c:	2200      	movs	r2, #0
 800170e:	745a      	strb	r2, [r3, #17]
	return conn;
 8001710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001712:	4618      	mov	r0, r3
 8001714:	3728      	adds	r7, #40	@ 0x28
 8001716:	46bd      	mov	sp, r7
 8001718:	bc90      	pop	{r4, r7}
 800171a:	4770      	bx	lr
 800171c:	20000264 	.word	0x20000264
 8001720:	2000f86c 	.word	0x2000f86c
 8001724:	20000267 	.word	0x20000267

08001728 <csp_conn_new>:

csp_conn_t * csp_conn_new(csp_id_t idin, csp_id_t idout) {
 8001728:	b590      	push	{r4, r7, lr}
 800172a:	b087      	sub	sp, #28
 800172c:	af00      	add	r7, sp, #0
 800172e:	f107 0408 	add.w	r4, r7, #8
 8001732:	e884 0003 	stmia.w	r4, {r0, r1}
 8001736:	4639      	mov	r1, r7
 8001738:	e881 000c 	stmia.w	r1, {r2, r3}

	/* Allocate connection structure */
	csp_conn_t * conn = csp_conn_allocate(CONN_CLIENT);
 800173c:	2000      	movs	r0, #0
 800173e:	f7ff ff79 	bl	8001634 <csp_conn_allocate>
 8001742:	6178      	str	r0, [r7, #20]

	if (conn) {
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d017      	beq.n	800177a <csp_conn_new+0x52>
		/* No lock is needed here, because nobody else *
		 * has a reference to this connection yet.     */
		csp_id_copy(&conn->idin, &idin);
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	3308      	adds	r3, #8
 800174e:	f107 0208 	add.w	r2, r7, #8
 8001752:	4611      	mov	r1, r2
 8001754:	4618      	mov	r0, r3
 8001756:	f000 fd5e 	bl	8002216 <csp_id_copy>
		csp_id_copy(&conn->idout, &idout);
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	3310      	adds	r3, #16
 800175e:	463a      	mov	r2, r7
 8001760:	4611      	mov	r1, r2
 8001762:	4618      	mov	r0, r3
 8001764:	f000 fd57 	bl	8002216 <csp_id_copy>

		conn->timestamp = csp_get_ms();
 8001768:	f7ff fd1a 	bl	80011a0 <csp_get_ms>
 800176c:	4602      	mov	r2, r0
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

		/* Ensure connection queue is empty */
		csp_conn_flush_rx_queue(conn);
 8001774:	6978      	ldr	r0, [r7, #20]
 8001776:	f7ff ff41 	bl	80015fc <csp_conn_flush_rx_queue>
	}

	return conn;
 800177a:	697b      	ldr	r3, [r7, #20]
}
 800177c:	4618      	mov	r0, r3
 800177e:	371c      	adds	r7, #28
 8001780:	46bd      	mov	sp, r7
 8001782:	bd90      	pop	{r4, r7, pc}

08001784 <csp_close>:

int csp_close(csp_conn_t * conn) {
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
	return csp_conn_close(conn, CSP_RDP_CLOSED_BY_USERSPACE);
 800178c:	2101      	movs	r1, #1
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f000 f806 	bl	80017a0 <csp_conn_close>
 8001794:	4603      	mov	r3, r0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
	...

080017a0 <csp_conn_close>:

int csp_conn_close(csp_conn_t * conn, uint8_t closed_by) {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	460b      	mov	r3, r1
 80017aa:	70fb      	strb	r3, [r7, #3]

	if (conn == NULL) {
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d101      	bne.n	80017b6 <csp_conn_close+0x16>
		return CSP_ERR_NONE;
 80017b2:	2300      	movs	r3, #0
 80017b4:	e01d      	b.n	80017f2 <csp_conn_close+0x52>
	}

	if (conn->state == CONN_CLOSED) {
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	3304      	adds	r3, #4
 80017ba:	f3bf 8f5b 	dmb	ish
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f3bf 8f5b 	dmb	ish
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d104      	bne.n	80017d6 <csp_conn_close+0x36>
		csp_dbg_errno = CSP_DBG_ERR_ALREADY_CLOSED;
 80017cc:	4b0b      	ldr	r3, [pc, #44]	@ (80017fc <csp_conn_close+0x5c>)
 80017ce:	220a      	movs	r2, #10
 80017d0:	701a      	strb	r2, [r3, #0]
		return CSP_ERR_NONE;
 80017d2:	2300      	movs	r3, #0
 80017d4:	e00d      	b.n	80017f2 <csp_conn_close+0x52>
		}
	}
#endif

	/* Ensure connection queue is empty */
	csp_conn_flush_rx_queue(conn);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f7ff ff10 	bl	80015fc <csp_conn_flush_rx_queue>
		csp_rdp_queue_flush(conn);
	}
#endif

	/* Set to closed */
	conn->state = CONN_CLOSED;
 80017dc:	2300      	movs	r3, #0
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3304      	adds	r3, #4
 80017e4:	68fa      	ldr	r2, [r7, #12]
 80017e6:	f3bf 8f5b 	dmb	ish
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	f3bf 8f5b 	dmb	ish
	
	return CSP_ERR_NONE;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000266 	.word	0x20000266

08001800 <csp_connect>:

csp_conn_t * csp_connect(uint8_t prio, uint16_t dest, uint8_t dport, uint32_t timeout, uint32_t opts) {
 8001800:	b580      	push	{r7, lr}
 8001802:	b08a      	sub	sp, #40	@ 0x28
 8001804:	af00      	add	r7, sp, #0
 8001806:	603b      	str	r3, [r7, #0]
 8001808:	4603      	mov	r3, r0
 800180a:	71fb      	strb	r3, [r7, #7]
 800180c:	460b      	mov	r3, r1
 800180e:	80bb      	strh	r3, [r7, #4]
 8001810:	4613      	mov	r3, r2
 8001812:	71bb      	strb	r3, [r7, #6]

	/* Force options on all connections */
	opts |= csp_conf.conn_dfl_so;
 8001814:	4b48      	ldr	r3, [pc, #288]	@ (8001938 <csp_connect+0x138>)
 8001816:	691b      	ldr	r3, [r3, #16]
 8001818:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800181a:	4313      	orrs	r3, r2
 800181c:	633b      	str	r3, [r7, #48]	@ 0x30

	int source_addr = -1;
 800181e:	f04f 33ff 	mov.w	r3, #4294967295
 8001822:	627b      	str	r3, [r7, #36]	@ 0x24
	csp_iface_t * local_interface = csp_iflist_get_by_subnet(dest);
 8001824:	88bb      	ldrh	r3, [r7, #4]
 8001826:	4618      	mov	r0, r3
 8001828:	f000 fc04 	bl	8002034 <csp_iflist_get_by_subnet>
 800182c:	6238      	str	r0, [r7, #32]
	if (local_interface) {
 800182e:	6a3b      	ldr	r3, [r7, #32]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d003      	beq.n	800183c <csp_connect+0x3c>
		source_addr = local_interface->addr;
 8001834:	6a3b      	ldr	r3, [r7, #32]
 8001836:	881b      	ldrh	r3, [r3, #0]
 8001838:	627b      	str	r3, [r7, #36]	@ 0x24
 800183a:	e00b      	b.n	8001854 <csp_connect+0x54>
	} else {
		csp_route_t * route = csp_rtable_find_route(dest);
 800183c:	88bb      	ldrh	r3, [r7, #4]
 800183e:	4618      	mov	r0, r3
 8001840:	f001 fb14 	bl	8002e6c <csp_rtable_find_route>
 8001844:	61f8      	str	r0, [r7, #28]
		if (route) {
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d003      	beq.n	8001854 <csp_connect+0x54>
			source_addr = route->iface->addr;
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	881b      	ldrh	r3, [r3, #0]
 8001852:	627b      	str	r3, [r7, #36]	@ 0x24
		}
	}

	if (source_addr == -1) {
 8001854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800185a:	d107      	bne.n	800186c <csp_connect+0x6c>
		csp_dbg_conn_noroute++;
 800185c:	4b37      	ldr	r3, [pc, #220]	@ (800193c <csp_connect+0x13c>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	3301      	adds	r3, #1
 8001862:	b2da      	uxtb	r2, r3
 8001864:	4b35      	ldr	r3, [pc, #212]	@ (800193c <csp_connect+0x13c>)
 8001866:	701a      	strb	r2, [r3, #0]
		return NULL;
 8001868:	2300      	movs	r3, #0
 800186a:	e060      	b.n	800192e <csp_connect+0x12e>
	}
	
	/* Generate identifier */
	csp_id_t incoming_id, outgoing_id;
	incoming_id.pri = prio;
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	743b      	strb	r3, [r7, #16]
	incoming_id.dst = source_addr;
 8001870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001872:	b29b      	uxth	r3, r3
 8001874:	82bb      	strh	r3, [r7, #20]
	incoming_id.src = dest;
 8001876:	88bb      	ldrh	r3, [r7, #4]
 8001878:	827b      	strh	r3, [r7, #18]
	incoming_id.sport = dport;
 800187a:	79bb      	ldrb	r3, [r7, #6]
 800187c:	75fb      	strb	r3, [r7, #23]
	incoming_id.flags = 0;
 800187e:	2300      	movs	r3, #0
 8001880:	747b      	strb	r3, [r7, #17]
	outgoing_id.pri = prio;
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	723b      	strb	r3, [r7, #8]
	outgoing_id.dst = dest;
 8001886:	88bb      	ldrh	r3, [r7, #4]
 8001888:	81bb      	strh	r3, [r7, #12]
	outgoing_id.src = source_addr;
 800188a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800188c:	b29b      	uxth	r3, r3
 800188e:	817b      	strh	r3, [r7, #10]
	outgoing_id.dport = dport;
 8001890:	79bb      	ldrb	r3, [r7, #6]
 8001892:	73bb      	strb	r3, [r7, #14]
	outgoing_id.flags = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	727b      	strb	r3, [r7, #9]

	/* Set connection options */
	if (opts & CSP_O_NOCRC32) {
 8001898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800189a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <csp_connect+0xaa>
		opts &= ~CSP_O_CRC32;
 80018a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80018a8:	633b      	str	r3, [r7, #48]	@ 0x30
	}

	if (opts & CSP_O_RDP) {
 80018aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018ac:	f003 0301 	and.w	r3, r3, #1
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d004      	beq.n	80018be <csp_connect+0xbe>
#if (CSP_USE_RDP)
		incoming_id.flags |= CSP_FRDP;
		outgoing_id.flags |= CSP_FRDP;
#else
		csp_dbg_errno = CSP_DBG_ERR_UNSUPPORTED;
 80018b4:	4b22      	ldr	r3, [pc, #136]	@ (8001940 <csp_connect+0x140>)
 80018b6:	2207      	movs	r2, #7
 80018b8:	701a      	strb	r2, [r3, #0]
		return NULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	e037      	b.n	800192e <csp_connect+0x12e>
#endif
	}

	if (opts & CSP_O_HMAC) {
 80018be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018c0:	f003 0304 	and.w	r3, r3, #4
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d004      	beq.n	80018d2 <csp_connect+0xd2>
#if (CSP_USE_HMAC)
		outgoing_id.flags |= CSP_FHMAC;
		incoming_id.flags |= CSP_FHMAC;
#else
		csp_dbg_errno = CSP_DBG_ERR_UNSUPPORTED;
 80018c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001940 <csp_connect+0x140>)
 80018ca:	2207      	movs	r2, #7
 80018cc:	701a      	strb	r2, [r3, #0]
		return NULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	e02d      	b.n	800192e <csp_connect+0x12e>
#endif
	}

	if (opts & CSP_O_CRC32) {
 80018d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d009      	beq.n	80018f0 <csp_connect+0xf0>
		outgoing_id.flags |= CSP_FCRC32;
 80018dc:	7a7b      	ldrb	r3, [r7, #9]
 80018de:	f043 0301 	orr.w	r3, r3, #1
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	727b      	strb	r3, [r7, #9]
		incoming_id.flags |= CSP_FCRC32;
 80018e6:	7c7b      	ldrb	r3, [r7, #17]
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	747b      	strb	r3, [r7, #17]
	}

	/* Find a new connection */
	csp_conn_t * conn = csp_conn_new(incoming_id, outgoing_id);
 80018f0:	f107 0308 	add.w	r3, r7, #8
 80018f4:	cb0c      	ldmia	r3, {r2, r3}
 80018f6:	f107 0110 	add.w	r1, r7, #16
 80018fa:	c903      	ldmia	r1, {r0, r1}
 80018fc:	f7ff ff14 	bl	8001728 <csp_conn_new>
 8001900:	61b8      	str	r0, [r7, #24]
	if (conn == NULL) {
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d101      	bne.n	800190c <csp_connect+0x10c>
		return NULL;
 8001908:	2300      	movs	r3, #0
 800190a:	e010      	b.n	800192e <csp_connect+0x12e>
	}

	/* Outgoing connections always use pre-defined source port */
	conn->idout.sport = conn->sport_outgoing;
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	7e1a      	ldrb	r2, [r3, #24]
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	75da      	strb	r2, [r3, #23]
	conn->idin.dport = conn->sport_outgoing;
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	7e1a      	ldrb	r2, [r3, #24]
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	739a      	strb	r2, [r3, #14]
	conn->dest_socket = NULL;
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	2200      	movs	r2, #0
 8001920:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

	/* Set connection options */
	conn->opts = opts;
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001928:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		}
	}
#endif

	/* We have a successful connection */
	return conn;
 800192c:	69bb      	ldr	r3, [r7, #24]
}
 800192e:	4618      	mov	r0, r3
 8001930:	3728      	adds	r7, #40	@ 0x28
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000000 	.word	0x20000000
 800193c:	20000269 	.word	0x20000269
 8001940:	20000266 	.word	0x20000266

08001944 <csp_conn_dport>:

int csp_conn_dport(csp_conn_t * conn) {
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]

	return conn->idin.dport;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	7b9b      	ldrb	r3, [r3, #14]
}
 8001950:	4618      	mov	r0, r3
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <csp_crc32_memory>:
	0xE330A81A, 0x115B2B19, 0x020BD8ED, 0xF0605BEE, 0x24AA3F05, 0xD6C1BC06, 0xC5914FF2, 0x37FACCF1,
	0x69E9F0D5, 0x9B8273D6, 0x88D28022, 0x7AB90321, 0xAE7367CA, 0x5C18E4C9, 0x4F48173D, 0xBD23943E,
	0xF36E6F75, 0x0105EC76, 0x12551F82, 0xE03E9C81, 0x34F4F86A, 0xC69F7B69, 0xD5CF889D, 0x27A40B9E,
	0x79B737BA, 0x8BDCB4B9, 0x988C474D, 0x6AE7C44E, 0xBE2DA0A5, 0x4C4623A6, 0x5F16D052, 0xAD7D5351};

uint32_t csp_crc32_memory(const uint8_t * data, uint32_t length) {
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
	uint32_t crc;

	crc = 0xFFFFFFFF;
 8001966:	f04f 33ff 	mov.w	r3, #4294967295
 800196a:	60fb      	str	r3, [r7, #12]
	while (length--)
 800196c:	e00e      	b.n	800198c <csp_crc32_memory+0x30>
#ifdef __AVR__
		crc = pgm_read_dword(&crc_tab[(crc ^ *data++) & 0xFFL]) ^ (crc >> 8);
#else
		crc = crc_tab[(crc ^ *data++) & 0xFFL] ^ (crc >> 8);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	1c5a      	adds	r2, r3, #1
 8001972:	607a      	str	r2, [r7, #4]
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	461a      	mov	r2, r3
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	4053      	eors	r3, r2
 800197c:	b2db      	uxtb	r3, r3
 800197e:	4a0a      	ldr	r2, [pc, #40]	@ (80019a8 <csp_crc32_memory+0x4c>)
 8001980:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	0a1b      	lsrs	r3, r3, #8
 8001988:	4053      	eors	r3, r2
 800198a:	60fb      	str	r3, [r7, #12]
	while (length--)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	1e5a      	subs	r2, r3, #1
 8001990:	603a      	str	r2, [r7, #0]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1eb      	bne.n	800196e <csp_crc32_memory+0x12>
#endif

	return (crc ^ 0xFFFFFFFF);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	43db      	mvns	r3, r3
}
 800199a:	4618      	mov	r0, r3
 800199c:	3714      	adds	r7, #20
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	0800e710 	.word	0x0800e710

080019ac <csp_crc32_append>:

int csp_crc32_append(csp_packet_t * packet) {
 80019ac:	b590      	push	{r4, r7, lr}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]

	uint32_t crc;

	if ((packet->length + sizeof(crc)) > csp_buffer_data_size()) {
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	8a9b      	ldrh	r3, [r3, #20]
 80019b8:	1d1c      	adds	r4, r3, #4
 80019ba:	f7ff fd66 	bl	800148a <csp_buffer_data_size>
 80019be:	4603      	mov	r3, r0
 80019c0:	429c      	cmp	r4, r3
 80019c2:	d902      	bls.n	80019ca <csp_crc32_append+0x1e>
		return CSP_ERR_NOMEM;
 80019c4:	f04f 33ff 	mov.w	r3, #4294967295
 80019c8:	e01f      	b.n	8001a0a <csp_crc32_append+0x5e>

	/* Calculate CRC32, convert to network byte order */
#if CSP_21 // In CSP 2.1 we change to include header per default
		crc = csp_crc32_memory((uint8_t *)&packet->id, packet->length + sizeof(packet->id));
#else
		crc = csp_crc32_memory(packet->data, packet->length);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	8a9b      	ldrh	r3, [r3, #20]
 80019d4:	4619      	mov	r1, r3
 80019d6:	4610      	mov	r0, r2
 80019d8:	f7ff ffc0 	bl	800195c <csp_crc32_memory>
 80019dc:	4603      	mov	r3, r0
 80019de:	60fb      	str	r3, [r7, #12]
#endif

	/* Convert to network byte order */
	crc = csp_htobe32(crc);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f000 f9eb 	bl	8001dbe <csp_htobe32>
 80019e8:	4603      	mov	r3, r0
 80019ea:	60fb      	str	r3, [r7, #12]

	/* Copy checksum to packet */
	memcpy(&packet->data[packet->length], &crc, sizeof(crc));
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	8a9b      	ldrh	r3, [r3, #20]
 80019f0:	3328      	adds	r3, #40	@ 0x28
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	4413      	add	r3, r2
 80019f6:	3304      	adds	r3, #4
 80019f8:	68fa      	ldr	r2, [r7, #12]
 80019fa:	601a      	str	r2, [r3, #0]
	packet->length += sizeof(crc);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	8a9b      	ldrh	r3, [r3, #20]
 8001a00:	3304      	adds	r3, #4
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	829a      	strh	r2, [r3, #20]

	return CSP_ERR_NONE;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3714      	adds	r7, #20
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd90      	pop	{r4, r7, pc}

08001a12 <csp_crc32_verify>:

int csp_crc32_verify(csp_packet_t * packet) {
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b084      	sub	sp, #16
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]

	uint32_t crc;

	if (packet->length < sizeof(crc)) {
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	8a9b      	ldrh	r3, [r3, #20]
 8001a1e:	2b03      	cmp	r3, #3
 8001a20:	d802      	bhi.n	8001a28 <csp_crc32_verify+0x16>
		return CSP_ERR_CRC32;
 8001a22:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8001a26:	e04d      	b.n	8001ac4 <csp_crc32_verify+0xb2>
	}

	/* Calculate CRC32, convert to network byte order */
	crc = csp_crc32_memory((uint8_t *)&packet->id, packet->length + sizeof(packet->id) - sizeof(crc));
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f103 0216 	add.w	r2, r3, #22
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	8a9b      	ldrh	r3, [r3, #20]
 8001a32:	3304      	adds	r3, #4
 8001a34:	4619      	mov	r1, r3
 8001a36:	4610      	mov	r0, r2
 8001a38:	f7ff ff90 	bl	800195c <csp_crc32_memory>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	60fb      	str	r3, [r7, #12]
	crc = csp_htobe32(crc);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f000 f9bb 	bl	8001dbe <csp_htobe32>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	60fb      	str	r3, [r7, #12]

	/* Compare calculated checksum with packet header */
	if (memcmp(&packet->data[packet->length] - sizeof(crc), &crc, sizeof(crc)) != 0) {
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	8a9b      	ldrh	r3, [r3, #20]
 8001a50:	3328      	adds	r3, #40	@ 0x28
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	4413      	add	r3, r2
 8001a56:	3304      	adds	r3, #4
 8001a58:	3b04      	subs	r3, #4
 8001a5a:	f107 010c 	add.w	r1, r7, #12
 8001a5e:	2204      	movs	r2, #4
 8001a60:	4618      	mov	r0, r3
 8001a62:	f009 f972 	bl	800ad4a <memcmp>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d024      	beq.n	8001ab6 <csp_crc32_verify+0xa4>

		/* CRC32 with header failed, try without header */
		crc = csp_crc32_memory(packet->data, packet->length - sizeof(crc));
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	8a9b      	ldrh	r3, [r3, #20]
 8001a76:	3b04      	subs	r3, #4
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4610      	mov	r0, r2
 8001a7c:	f7ff ff6e 	bl	800195c <csp_crc32_memory>
 8001a80:	4603      	mov	r3, r0
 8001a82:	60fb      	str	r3, [r7, #12]
		crc = csp_htobe32(crc);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f000 f999 	bl	8001dbe <csp_htobe32>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	60fb      	str	r3, [r7, #12]

		if (memcmp(&packet->data[packet->length] - sizeof(crc), &crc, sizeof(crc)) != 0) {
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	8a9b      	ldrh	r3, [r3, #20]
 8001a94:	3328      	adds	r3, #40	@ 0x28
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	4413      	add	r3, r2
 8001a9a:	3304      	adds	r3, #4
 8001a9c:	3b04      	subs	r3, #4
 8001a9e:	f107 010c 	add.w	r1, r7, #12
 8001aa2:	2204      	movs	r2, #4
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f009 f950 	bl	800ad4a <memcmp>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d002      	beq.n	8001ab6 <csp_crc32_verify+0xa4>
			return CSP_ERR_CRC32;
 8001ab0:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8001ab4:	e006      	b.n	8001ac4 <csp_crc32_verify+0xb2>
		}
		
	}

	/* Strip CRC32 */
	packet->length -= sizeof(crc);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	8a9b      	ldrh	r3, [r3, #20]
 8001aba:	3b04      	subs	r3, #4
 8001abc:	b29a      	uxth	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	829a      	strh	r2, [r3, #20]
	return CSP_ERR_NONE;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3710      	adds	r7, #16
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <csp_print_func>:
    va_start(args, fmt);
    vprintf(fmt, args);
    va_end(args);
}
#else
__attribute__((weak)) void csp_print_func(const char * fmt, ...) {}
 8001acc:	b40f      	push	{r0, r1, r2, r3}
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	bf00      	nop
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	b004      	add	sp, #16
 8001adc:	4770      	bx	lr
	...

08001ae0 <csp_dedup_is_duplicate>:
/* Store packet CRC's in a ringbuffer */
static uint32_t csp_dedup_array[CSP_DEDUP_COUNT] = {};
static uint32_t csp_dedup_timestamp[CSP_DEDUP_COUNT] = {};
static int csp_dedup_in = 0;

bool csp_dedup_is_duplicate(csp_packet_t * packet) {
 8001ae0:	b590      	push	{r4, r7, lr}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
	/* Calculate CRC32 for packet */
	uint32_t crc = csp_crc32_memory((const uint8_t *)&packet->id, packet->length + sizeof(packet->id));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f103 0216 	add.w	r2, r3, #22
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	8a9b      	ldrh	r3, [r3, #20]
 8001af2:	3308      	adds	r3, #8
 8001af4:	4619      	mov	r1, r3
 8001af6:	4610      	mov	r0, r2
 8001af8:	f7ff ff30 	bl	800195c <csp_crc32_memory>
 8001afc:	60b8      	str	r0, [r7, #8]

	/* Check if we have received this packet before */
	for (int i = 0; i < CSP_DEDUP_COUNT; i++) {
 8001afe:	2300      	movs	r3, #0
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	e015      	b.n	8001b30 <csp_dedup_is_duplicate+0x50>

		/* Check for match */
		if (crc == csp_dedup_array[i]) {
 8001b04:	4a1b      	ldr	r2, [pc, #108]	@ (8001b74 <csp_dedup_is_duplicate+0x94>)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b0c:	68ba      	ldr	r2, [r7, #8]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d10b      	bne.n	8001b2a <csp_dedup_is_duplicate+0x4a>

			/* Check the timestamp */
			if (csp_get_ms() < csp_dedup_timestamp[i] + CSP_DEDUP_WINDOW_MS)
 8001b12:	f7ff fb45 	bl	80011a0 <csp_get_ms>
 8001b16:	4602      	mov	r2, r0
 8001b18:	4917      	ldr	r1, [pc, #92]	@ (8001b78 <csp_dedup_is_duplicate+0x98>)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001b20:	3364      	adds	r3, #100	@ 0x64
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d201      	bcs.n	8001b2a <csp_dedup_is_duplicate+0x4a>
				return true;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e020      	b.n	8001b6c <csp_dedup_is_duplicate+0x8c>
	for (int i = 0; i < CSP_DEDUP_COUNT; i++) {
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2b0f      	cmp	r3, #15
 8001b34:	dde6      	ble.n	8001b04 <csp_dedup_is_duplicate+0x24>
		}
	}

	/* If not, insert packet into duplicate list */
	csp_dedup_array[csp_dedup_in] = crc;
 8001b36:	4b11      	ldr	r3, [pc, #68]	@ (8001b7c <csp_dedup_is_duplicate+0x9c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	490e      	ldr	r1, [pc, #56]	@ (8001b74 <csp_dedup_is_duplicate+0x94>)
 8001b3c:	68ba      	ldr	r2, [r7, #8]
 8001b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	csp_dedup_timestamp[csp_dedup_in] = csp_get_ms();
 8001b42:	4b0e      	ldr	r3, [pc, #56]	@ (8001b7c <csp_dedup_is_duplicate+0x9c>)
 8001b44:	681c      	ldr	r4, [r3, #0]
 8001b46:	f7ff fb2b 	bl	80011a0 <csp_get_ms>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	4a0a      	ldr	r2, [pc, #40]	@ (8001b78 <csp_dedup_is_duplicate+0x98>)
 8001b4e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	csp_dedup_in = (csp_dedup_in + 1) % CSP_DEDUP_COUNT;
 8001b52:	4b0a      	ldr	r3, [pc, #40]	@ (8001b7c <csp_dedup_is_duplicate+0x9c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	3301      	adds	r3, #1
 8001b58:	425a      	negs	r2, r3
 8001b5a:	f003 030f 	and.w	r3, r3, #15
 8001b5e:	f002 020f 	and.w	r2, r2, #15
 8001b62:	bf58      	it	pl
 8001b64:	4253      	negpl	r3, r2
 8001b66:	4a05      	ldr	r2, [pc, #20]	@ (8001b7c <csp_dedup_is_duplicate+0x9c>)
 8001b68:	6013      	str	r3, [r2, #0]

	return false;
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3714      	adds	r7, #20
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd90      	pop	{r4, r7, pc}
 8001b74:	2000026c 	.word	0x2000026c
 8001b78:	200002ac 	.word	0x200002ac
 8001b7c:	200002ec 	.word	0x200002ec

08001b80 <csp_hton16>:
/* CSP includes */
#include <csp/csp.h>
#include <csp/csp_endian.h>

/* Convert 16-bit number from host byte order to network byte order */
inline uint16_t __attribute__ ((__const__)) csp_hton16(uint16_t h16) {
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	80fb      	strh	r3, [r7, #6]
#ifdef CSP_BIG_ENDIAN
	return h16;
#else
	return (((h16 & 0xff00) >> 8) |
 8001b8a:	88fb      	ldrh	r3, [r7, #6]
 8001b8c:	0a1b      	lsrs	r3, r3, #8
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	b21a      	sxth	r2, r3
 8001b92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b96:	021b      	lsls	r3, r3, #8
 8001b98:	b21b      	sxth	r3, r3
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	b21b      	sxth	r3, r3
 8001b9e:	b29b      	uxth	r3, r3
			((h16 & 0x00ff) << 8));
#endif
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <csp_ntoh16>:

/* Convert 16-bit number from network byte order to host byte order */
inline uint16_t __attribute__ ((__const__)) csp_ntoh16(uint16_t n16) {
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	80fb      	strh	r3, [r7, #6]
	return csp_hton16(n16);
 8001bb6:	88fb      	ldrh	r3, [r7, #6]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff ffe1 	bl	8001b80 <csp_hton16>
 8001bbe:	4603      	mov	r3, r0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <csp_hton32>:

/* Convert 32-bit number from host byte order to network byte order */
inline uint32_t __attribute__ ((__const__)) csp_hton32(uint32_t h32) {
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
#ifdef CSP_BIG_ENDIAN
	return h32;
#else
	return (((h32 & 0xff000000) >> 24) |
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	0e1a      	lsrs	r2, r3, #24
			((h32 & 0x000000ff) << 24) |
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	061b      	lsls	r3, r3, #24
	return (((h32 & 0xff000000) >> 24) |
 8001bd8:	431a      	orrs	r2, r3
			((h32 & 0x0000ff00) <<  8) |
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	021b      	lsls	r3, r3, #8
 8001bde:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
			((h32 & 0x000000ff) << 24) |
 8001be2:	431a      	orrs	r2, r3
			((h32 & 0x00ff0000) >>  8));
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	0a1b      	lsrs	r3, r3, #8
 8001be8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
			((h32 & 0x0000ff00) <<  8) |
 8001bec:	4313      	orrs	r3, r2
#endif
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <csp_ntoh32>:

/* Convert 32-bit number from network byte order to host byte order */
inline uint32_t __attribute__ ((__const__)) csp_ntoh32(uint32_t n32) {
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b082      	sub	sp, #8
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
	return csp_hton32(n32);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f7ff ffe0 	bl	8001bc8 <csp_hton32>
 8001c08:	4603      	mov	r3, r0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <csp_hton64>:

/* Convert 64-bit number from host byte order to network byte order */
inline uint64_t __attribute__ ((__const__)) csp_hton64(uint64_t h64) {
 8001c12:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001c16:	b099      	sub	sp, #100	@ 0x64
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	e9c7 0116 	strd	r0, r1, [r7, #88]	@ 0x58
#ifdef CSP_BIG_ENDIAN
	return h64;
#else
	return (((h64 & 0xff00000000000000LL) >> 56) |
 8001c1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001c22:	f04f 0400 	mov.w	r4, #0
 8001c26:	f04f 0500 	mov.w	r5, #0
 8001c2a:	0e1c      	lsrs	r4, r3, #24
 8001c2c:	2500      	movs	r5, #0
			((h64 & 0x00000000000000ffLL) << 56) |
 8001c2e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001c32:	f04f 0000 	mov.w	r0, #0
 8001c36:	f04f 0100 	mov.w	r1, #0
 8001c3a:	0611      	lsls	r1, r2, #24
 8001c3c:	2000      	movs	r0, #0
	return (((h64 & 0xff00000000000000LL) >> 56) |
 8001c3e:	ea44 0a00 	orr.w	sl, r4, r0
 8001c42:	ea45 0b01 	orr.w	fp, r5, r1
			((h64 & 0x00ff000000000000LL) >> 40) |
 8001c46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001c4a:	f04f 0000 	mov.w	r0, #0
 8001c4e:	f04f 0100 	mov.w	r1, #0
 8001c52:	0a18      	lsrs	r0, r3, #8
 8001c54:	2100      	movs	r1, #0
 8001c56:	f400 487f 	and.w	r8, r0, #65280	@ 0xff00
 8001c5a:	f04f 0900 	mov.w	r9, #0
			((h64 & 0x00000000000000ffLL) << 56) |
 8001c5e:	ea4a 0308 	orr.w	r3, sl, r8
 8001c62:	653b      	str	r3, [r7, #80]	@ 0x50
 8001c64:	ea4b 0309 	orr.w	r3, fp, r9
 8001c68:	657b      	str	r3, [r7, #84]	@ 0x54
			((h64 & 0x000000000000ff00LL) << 40) |
 8001c6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001c6e:	f04f 0000 	mov.w	r0, #0
 8001c72:	f04f 0100 	mov.w	r1, #0
 8001c76:	0211      	lsls	r1, r2, #8
 8001c78:	2000      	movs	r0, #0
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c7e:	f401 037f 	and.w	r3, r1, #16711680	@ 0xff0000
 8001c82:	64fb      	str	r3, [r7, #76]	@ 0x4c
			((h64 & 0x00ff000000000000LL) >> 40) |
 8001c84:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001c88:	4623      	mov	r3, r4
 8001c8a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001c8e:	4602      	mov	r2, r0
 8001c90:	4313      	orrs	r3, r2
 8001c92:	643b      	str	r3, [r7, #64]	@ 0x40
 8001c94:	462b      	mov	r3, r5
 8001c96:	460a      	mov	r2, r1
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	647b      	str	r3, [r7, #68]	@ 0x44
			((h64 & 0x0000ff0000000000LL) >> 24) |
 8001c9c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001ca0:	f04f 0000 	mov.w	r0, #0
 8001ca4:	f04f 0100 	mov.w	r1, #0
 8001ca8:	0e10      	lsrs	r0, r2, #24
 8001caa:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8001cae:	0e19      	lsrs	r1, r3, #24
 8001cb0:	f400 037f 	and.w	r3, r0, #16711680	@ 0xff0000
 8001cb4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
			((h64 & 0x000000000000ff00LL) << 40) |
 8001cba:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8001cbe:	4623      	mov	r3, r4
 8001cc0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001cca:	462b      	mov	r3, r5
 8001ccc:	460a      	mov	r2, r1
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	637b      	str	r3, [r7, #52]	@ 0x34
			((h64 & 0x0000000000ff0000LL) << 24) |
 8001cd2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001cd6:	f04f 0000 	mov.w	r0, #0
 8001cda:	f04f 0100 	mov.w	r1, #0
 8001cde:	0619      	lsls	r1, r3, #24
 8001ce0:	ea41 2112 	orr.w	r1, r1, r2, lsr #8
 8001ce4:	0610      	lsls	r0, r2, #24
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001cea:	f401 437f 	and.w	r3, r1, #65280	@ 0xff00
 8001cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
			((h64 & 0x0000ff0000000000LL) >> 24) |
 8001cf0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001cf4:	4623      	mov	r3, r4
 8001cf6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	623b      	str	r3, [r7, #32]
 8001d00:	462b      	mov	r3, r5
 8001d02:	460a      	mov	r2, r1
 8001d04:	4313      	orrs	r3, r2
 8001d06:	627b      	str	r3, [r7, #36]	@ 0x24
			((h64 & 0x000000ff00000000LL) >>  8) |
 8001d08:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8001d0c:	f04f 0200 	mov.w	r2, #0
 8001d10:	f04f 0300 	mov.w	r3, #0
 8001d14:	0a02      	lsrs	r2, r0, #8
 8001d16:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001d1a:	0a0b      	lsrs	r3, r1, #8
 8001d1c:	f002 437f 	and.w	r3, r2, #4278190080	@ 0xff000000
 8001d20:	61bb      	str	r3, [r7, #24]
 8001d22:	2300      	movs	r3, #0
 8001d24:	61fb      	str	r3, [r7, #28]
			((h64 & 0x0000000000ff0000LL) << 24) |
 8001d26:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001d2a:	4623      	mov	r3, r4
 8001d2c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d30:	4602      	mov	r2, r0
 8001d32:	4313      	orrs	r3, r2
 8001d34:	613b      	str	r3, [r7, #16]
 8001d36:	462b      	mov	r3, r5
 8001d38:	460a      	mov	r2, r1
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	617b      	str	r3, [r7, #20]
			((h64 & 0x00000000ff000000LL) <<  8));
 8001d3e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8001d42:	f04f 0200 	mov.w	r2, #0
 8001d46:	f04f 0300 	mov.w	r3, #0
 8001d4a:	020b      	lsls	r3, r1, #8
 8001d4c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8001d50:	0202      	lsls	r2, r0, #8
 8001d52:	2100      	movs	r1, #0
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 8001d5a:	60fb      	str	r3, [r7, #12]
			((h64 & 0x000000ff00000000LL) >>  8) |
 8001d5c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001d60:	4623      	mov	r3, r4
 8001d62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d66:	4602      	mov	r2, r0
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	603b      	str	r3, [r7, #0]
 8001d6c:	462b      	mov	r3, r5
 8001d6e:	460a      	mov	r2, r1
 8001d70:	4313      	orrs	r3, r2
 8001d72:	607b      	str	r3, [r7, #4]
 8001d74:	e9d7 2300 	ldrd	r2, r3, [r7]
#endif
}
 8001d78:	4610      	mov	r0, r2
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	3764      	adds	r7, #100	@ 0x64
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001d84:	4770      	bx	lr

08001d86 <csp_htobe16>:
inline uint64_t __attribute__ ((__const__)) csp_ntoh64(uint64_t n64) {
	return csp_hton64(n64);
}

/* Convert 16-bit number from host byte order to big endian byte order */
inline uint16_t __attribute__ ((__const__)) csp_htobe16(uint16_t h16) {
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	80fb      	strh	r3, [r7, #6]
	return csp_hton16(h16);
 8001d90:	88fb      	ldrh	r3, [r7, #6]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff fef4 	bl	8001b80 <csp_hton16>
 8001d98:	4603      	mov	r3, r0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <csp_betoh16>:
			((h16 & 0x00ff) << 8));
#endif
}

/* Convert 16-bit number from big endian byte order to little endian byte order */
inline uint16_t __attribute__ ((__const__)) csp_betoh16(uint16_t be16) {
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b082      	sub	sp, #8
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	4603      	mov	r3, r0
 8001daa:	80fb      	strh	r3, [r7, #6]
	return csp_ntoh16(be16);
 8001dac:	88fb      	ldrh	r3, [r7, #6]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff fefc 	bl	8001bac <csp_ntoh16>
 8001db4:	4603      	mov	r3, r0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <csp_htobe32>:
inline uint16_t __attribute__ ((__const__)) csp_letoh16(uint16_t le16) {
	return csp_htole16(le16);
}

/* Convert 32-bit number from host byte order to big endian byte order */
inline uint32_t __attribute__ ((__const__)) csp_htobe32(uint32_t h32) {
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b082      	sub	sp, #8
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
	return csp_hton32(h32);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7ff fefe 	bl	8001bc8 <csp_hton32>
 8001dcc:	4603      	mov	r3, r0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <csp_betoh32>:
			((h32 & 0x00ff0000) >>  8));
#endif
}

/* Convert 32-bit number from big endian byte order to host byte order */
inline uint32_t __attribute__ ((__const__)) csp_betoh32(uint32_t be32) {
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b082      	sub	sp, #8
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
	return csp_ntoh32(be32);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7ff ff0b 	bl	8001bfa <csp_ntoh32>
 8001de4:	4603      	mov	r3, r0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <csp_htobe64>:
inline uint32_t __attribute__ ((__const__)) csp_letoh32(uint32_t le32) {
	return csp_htole32(le32);
}

/* Convert 64-bit number from host byte order to big endian byte order */
inline uint64_t __attribute__ ((__const__)) csp_htobe64(uint64_t h64) {
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b082      	sub	sp, #8
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	e9c7 0100 	strd	r0, r1, [r7]
	return csp_hton64(h64);
 8001df8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001dfc:	f7ff ff09 	bl	8001c12 <csp_hton64>
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
}
 8001e04:	4610      	mov	r0, r2
 8001e06:	4619      	mov	r1, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <csp_id1_prepend>:
#define CSP_ID1_FLAGS_MASK   0xFF
#define CSP_ID1_FLAGS_OFFSET 0

#define CSP_ID1_HEADER_SIZE 4

void csp_id1_prepend(csp_packet_t * packet) {
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b084      	sub	sp, #16
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]

	/* Pack into 32-bit using host endian */
	uint32_t id1 = ((packet->id.pri << CSP_ID1_PRIO_OFFSET) |
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	7d9b      	ldrb	r3, [r3, #22]
 8001e1a:	079a      	lsls	r2, r3, #30
					(packet->id.dst << CSP_ID1_DST_OFFSET) |
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	8b5b      	ldrh	r3, [r3, #26]
 8001e20:	051b      	lsls	r3, r3, #20
	uint32_t id1 = ((packet->id.pri << CSP_ID1_PRIO_OFFSET) |
 8001e22:	431a      	orrs	r2, r3
					(packet->id.src << CSP_ID1_SRC_OFFSET) |
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	8b1b      	ldrh	r3, [r3, #24]
 8001e28:	065b      	lsls	r3, r3, #25
					(packet->id.dst << CSP_ID1_DST_OFFSET) |
 8001e2a:	431a      	orrs	r2, r3
					(packet->id.dport << CSP_ID1_DPORT_OFFSET) |
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	7f1b      	ldrb	r3, [r3, #28]
 8001e30:	039b      	lsls	r3, r3, #14
					(packet->id.src << CSP_ID1_SRC_OFFSET) |
 8001e32:	431a      	orrs	r2, r3
					(packet->id.sport << CSP_ID1_SPORT_OFFSET) |
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	7f5b      	ldrb	r3, [r3, #29]
 8001e38:	021b      	lsls	r3, r3, #8
					(packet->id.dport << CSP_ID1_DPORT_OFFSET) |
 8001e3a:	4313      	orrs	r3, r2
					(packet->id.flags << CSP_ID1_FLAGS_OFFSET));
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	7dd2      	ldrb	r2, [r2, #23]
					(packet->id.sport << CSP_ID1_SPORT_OFFSET) |
 8001e40:	4313      	orrs	r3, r2
	uint32_t id1 = ((packet->id.pri << CSP_ID1_PRIO_OFFSET) |
 8001e42:	60fb      	str	r3, [r7, #12]

	/* Convert to big / network endian */
	id1 = csp_htobe32(id1);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff ffb9 	bl	8001dbe <csp_htobe32>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	60fb      	str	r3, [r7, #12]

	packet->frame_begin = packet->data - CSP_ID1_HEADER_SIZE;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	332c      	adds	r3, #44	@ 0x2c
 8001e54:	1f1a      	subs	r2, r3, #4
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	60da      	str	r2, [r3, #12]
	packet->frame_length = packet->length + CSP_ID1_HEADER_SIZE;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	8a9b      	ldrh	r3, [r3, #20]
 8001e5e:	3304      	adds	r3, #4
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	821a      	strh	r2, [r3, #16]

	memcpy(packet->frame_begin, &id1, CSP_ID1_HEADER_SIZE);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	601a      	str	r2, [r3, #0]
}
 8001e6e:	bf00      	nop
 8001e70:	3710      	adds	r7, #16
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <csp_id2_prepend>:
#define CSP_ID2_FLAGS_MASK   0x3F
#define CSP_ID2_FLAGS_OFFSET 0

#define CSP_ID2_HEADER_SIZE 6

void csp_id2_prepend(csp_packet_t * packet) {
 8001e76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e7a:	b097      	sub	sp, #92	@ 0x5c
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	64f8      	str	r0, [r7, #76]	@ 0x4c

	/* Pack into 64-bit using host endian */
	uint64_t id2 = ((((uint64_t)packet->id.pri) << CSP_ID2_PRIO_OFFSET) |
 8001e80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e82:	7d9b      	ldrb	r3, [r3, #22]
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2200      	movs	r2, #0
 8001e88:	643b      	str	r3, [r7, #64]	@ 0x40
 8001e8a:	647a      	str	r2, [r7, #68]	@ 0x44
 8001e8c:	f04f 0000 	mov.w	r0, #0
 8001e90:	f04f 0100 	mov.w	r1, #0
 8001e94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e96:	0399      	lsls	r1, r3, #14
 8001e98:	2000      	movs	r0, #0
					(((uint64_t)packet->id.dst) << CSP_ID2_DST_OFFSET) |
 8001e9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e9c:	8b5b      	ldrh	r3, [r3, #26]
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001ea4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001ea6:	f04f 0200 	mov.w	r2, #0
 8001eaa:	f04f 0300 	mov.w	r3, #0
 8001eae:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 8001eb0:	0033      	movs	r3, r6
 8001eb2:	2200      	movs	r2, #0
	uint64_t id2 = ((((uint64_t)packet->id.pri) << CSP_ID2_PRIO_OFFSET) |
 8001eb4:	ea40 0602 	orr.w	r6, r0, r2
 8001eb8:	633e      	str	r6, [r7, #48]	@ 0x30
 8001eba:	430b      	orrs	r3, r1
 8001ebc:	637b      	str	r3, [r7, #52]	@ 0x34
					(((uint64_t)packet->id.src) << CSP_ID2_SRC_OFFSET) |
 8001ebe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ec0:	8b1b      	ldrh	r3, [r3, #24]
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ec8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001eca:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8001ece:	460b      	mov	r3, r1
 8001ed0:	0b9d      	lsrs	r5, r3, #14
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	049c      	lsls	r4, r3, #18
					(((uint64_t)packet->id.dst) << CSP_ID2_DST_OFFSET) |
 8001ed6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8001eda:	460b      	mov	r3, r1
 8001edc:	4323      	orrs	r3, r4
 8001ede:	623b      	str	r3, [r7, #32]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	432b      	orrs	r3, r5
 8001ee4:	627b      	str	r3, [r7, #36]	@ 0x24
					(packet->id.dport << CSP_ID2_DPORT_OFFSET) |
 8001ee6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ee8:	7f1b      	ldrb	r3, [r3, #28]
 8001eea:	031b      	lsls	r3, r3, #12
 8001eec:	17da      	asrs	r2, r3, #31
 8001eee:	61bb      	str	r3, [r7, #24]
 8001ef0:	61fa      	str	r2, [r7, #28]
					(((uint64_t)packet->id.src) << CSP_ID2_SRC_OFFSET) |
 8001ef2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001ef6:	4623      	mov	r3, r4
 8001ef8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001efc:	4602      	mov	r2, r0
 8001efe:	ea43 0a02 	orr.w	sl, r3, r2
 8001f02:	462b      	mov	r3, r5
 8001f04:	460a      	mov	r2, r1
 8001f06:	ea43 0b02 	orr.w	fp, r3, r2
					(packet->id.sport << CSP_ID2_SPORT_OFFSET) |
 8001f0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f0c:	7f5b      	ldrb	r3, [r3, #29]
 8001f0e:	019b      	lsls	r3, r3, #6
 8001f10:	17da      	asrs	r2, r3, #31
 8001f12:	613b      	str	r3, [r7, #16]
 8001f14:	617a      	str	r2, [r7, #20]
					(packet->id.dport << CSP_ID2_DPORT_OFFSET) |
 8001f16:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	ea4a 0803 	orr.w	r8, sl, r3
 8001f20:	4613      	mov	r3, r2
 8001f22:	ea4b 0903 	orr.w	r9, fp, r3
					(packet->id.flags << CSP_ID2_FLAGS_OFFSET));
 8001f26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f28:	7ddb      	ldrb	r3, [r3, #23]
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	60bb      	str	r3, [r7, #8]
 8001f30:	60fa      	str	r2, [r7, #12]
					(packet->id.sport << CSP_ID2_SPORT_OFFSET) |
 8001f32:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001f36:	460b      	mov	r3, r1
 8001f38:	ea48 0303 	orr.w	r3, r8, r3
 8001f3c:	603b      	str	r3, [r7, #0]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	ea49 0303 	orr.w	r3, r9, r3
 8001f44:	607b      	str	r3, [r7, #4]
	uint64_t id2 = ((((uint64_t)packet->id.pri) << CSP_ID2_PRIO_OFFSET) |
 8001f46:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001f4a:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50

	/* Convert to big / network endian:
	 * We first shift up the 48 bit header to most significant end of the 64-bit */
	id2 = csp_htobe64(id2 << 16);
 8001f4e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001f52:	f04f 0200 	mov.w	r2, #0
 8001f56:	f04f 0300 	mov.w	r3, #0
 8001f5a:	040b      	lsls	r3, r1, #16
 8001f5c:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8001f60:	0402      	lsls	r2, r0, #16
 8001f62:	4610      	mov	r0, r2
 8001f64:	4619      	mov	r1, r3
 8001f66:	f7ff ff42 	bl	8001dee <csp_htobe64>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

	packet->frame_begin = packet->data - CSP_ID2_HEADER_SIZE;
 8001f72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f74:	332c      	adds	r3, #44	@ 0x2c
 8001f76:	1f9a      	subs	r2, r3, #6
 8001f78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f7a:	60da      	str	r2, [r3, #12]
	packet->frame_length = packet->length + CSP_ID2_HEADER_SIZE;
 8001f7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f7e:	8a9b      	ldrh	r3, [r3, #20]
 8001f80:	3306      	adds	r3, #6
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f86:	821a      	strh	r2, [r3, #16]

	memcpy(packet->frame_begin, &id2, CSP_ID2_HEADER_SIZE);
 8001f88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8001f90:	2206      	movs	r2, #6
 8001f92:	4618      	mov	r0, r3
 8001f94:	f008 fffb 	bl	800af8e <memcpy>
}
 8001f98:	bf00      	nop
 8001f9a:	375c      	adds	r7, #92	@ 0x5c
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001fa4 <csp_id_prepend>:
 * to avoid a runtime comparison. But that would also clutter the configuration and expose this
 * to the user. An alternative would be a set of global but non exported function pointers.
 * That would actually be nicer, but it can be done later, it works for now.
 */

void csp_id_prepend(csp_packet_t * packet) {
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
	if (csp_conf.version == 2) {
 8001fac:	4b07      	ldr	r3, [pc, #28]	@ (8001fcc <csp_id_prepend+0x28>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d103      	bne.n	8001fbc <csp_id_prepend+0x18>
		csp_id2_prepend(packet);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f7ff ff5e 	bl	8001e76 <csp_id2_prepend>
	} else {
		csp_id1_prepend(packet);
	}
}
 8001fba:	e002      	b.n	8001fc2 <csp_id_prepend+0x1e>
		csp_id1_prepend(packet);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f7ff ff26 	bl	8001e0e <csp_id1_prepend>
}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20000000 	.word	0x20000000

08001fd0 <csp_id_get_host_bits>:
		csp_id1_setup_rx(packet);
		return CSP_ID1_HEADER_SIZE;
	}
}

unsigned int csp_id_get_host_bits(void) {
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
	if (csp_conf.version == 2) {
 8001fd4:	4b05      	ldr	r3, [pc, #20]	@ (8001fec <csp_id_get_host_bits+0x1c>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d101      	bne.n	8001fe0 <csp_id_get_host_bits+0x10>
		return CSP_ID2_HOST_SIZE;
 8001fdc:	230e      	movs	r3, #14
 8001fde:	e000      	b.n	8001fe2 <csp_id_get_host_bits+0x12>
	} else {
		return CSP_ID1_HOST_SIZE;
 8001fe0:	2305      	movs	r3, #5
	}
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	20000000 	.word	0x20000000

08001ff0 <csp_id_is_broadcast>:

unsigned int csp_id_get_max_port(void) {
	return ((1 << (CSP_ID2_PORT_SIZE)) - 1);
}

int csp_id_is_broadcast(uint16_t addr, uint16_t netmask) {
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	460a      	mov	r2, r1
 8001ffa:	80fb      	strh	r3, [r7, #6]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	80bb      	strh	r3, [r7, #4]
	uint16_t hostmask = (1 << (csp_id_get_host_bits() - netmask)) - 1;
 8002000:	f7ff ffe6 	bl	8001fd0 <csp_id_get_host_bits>
 8002004:	4602      	mov	r2, r0
 8002006:	88bb      	ldrh	r3, [r7, #4]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2201      	movs	r2, #1
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	b29b      	uxth	r3, r3
 8002012:	3b01      	subs	r3, #1
 8002014:	81fb      	strh	r3, [r7, #14]
	if ((addr & hostmask) == hostmask) {
 8002016:	88fa      	ldrh	r2, [r7, #6]
 8002018:	89fb      	ldrh	r3, [r7, #14]
 800201a:	4013      	ands	r3, r2
 800201c:	b29b      	uxth	r3, r3
 800201e:	89fa      	ldrh	r2, [r7, #14]
 8002020:	429a      	cmp	r2, r3
 8002022:	d101      	bne.n	8002028 <csp_id_is_broadcast+0x38>
		return 1;
 8002024:	2301      	movs	r3, #1
 8002026:	e000      	b.n	800202a <csp_id_is_broadcast+0x3a>
	}
	return 0;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
	...

08002034 <csp_iflist_get_by_subnet>:
#include <csp/csp_debug.h>

/* Interfaces are stored in a linked list */
static csp_iface_t * interfaces = NULL;

csp_iface_t * csp_iflist_get_by_subnet(uint16_t addr) {
 8002034:	b590      	push	{r4, r7, lr}
 8002036:	b087      	sub	sp, #28
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	80fb      	strh	r3, [r7, #6]

	csp_iface_t * ifc = interfaces;
 800203e:	4b1a      	ldr	r3, [pc, #104]	@ (80020a8 <csp_iflist_get_by_subnet+0x74>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	617b      	str	r3, [r7, #20]
	while (ifc) {
 8002044:	e028      	b.n	8002098 <csp_iflist_get_by_subnet+0x64>

		/* Reject searches involving subnets, if the netmask is invalud */
		if (ifc->netmask == 0) {
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	885b      	ldrh	r3, [r3, #2]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d103      	bne.n	8002056 <csp_iflist_get_by_subnet+0x22>
			ifc = ifc->next;
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002052:	617b      	str	r3, [r7, #20]
			continue;
 8002054:	e020      	b.n	8002098 <csp_iflist_get_by_subnet+0x64>
		}

		/* Look if address is within subnet */
		uint16_t netmask = ((1 << ifc->netmask) - 1) << (csp_id_get_host_bits() - ifc->netmask);
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	885b      	ldrh	r3, [r3, #2]
 800205a:	461a      	mov	r2, r3
 800205c:	2301      	movs	r3, #1
 800205e:	4093      	lsls	r3, r2
 8002060:	1e5c      	subs	r4, r3, #1
 8002062:	f7ff ffb5 	bl	8001fd0 <csp_id_get_host_bits>
 8002066:	4602      	mov	r2, r0
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	885b      	ldrh	r3, [r3, #2]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	fa04 f303 	lsl.w	r3, r4, r3
 8002072:	827b      	strh	r3, [r7, #18]
		uint16_t network_a = ifc->addr & netmask;
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	881a      	ldrh	r2, [r3, #0]
 8002078:	8a7b      	ldrh	r3, [r7, #18]
 800207a:	4013      	ands	r3, r2
 800207c:	823b      	strh	r3, [r7, #16]
		uint16_t network_b = addr & netmask;
 800207e:	88fa      	ldrh	r2, [r7, #6]
 8002080:	8a7b      	ldrh	r3, [r7, #18]
 8002082:	4013      	ands	r3, r2
 8002084:	81fb      	strh	r3, [r7, #14]
		if (network_a == network_b) {
 8002086:	8a3a      	ldrh	r2, [r7, #16]
 8002088:	89fb      	ldrh	r3, [r7, #14]
 800208a:	429a      	cmp	r2, r3
 800208c:	d101      	bne.n	8002092 <csp_iflist_get_by_subnet+0x5e>
			return ifc;
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	e006      	b.n	80020a0 <csp_iflist_get_by_subnet+0x6c>
		}

		ifc = ifc->next;
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002096:	617b      	str	r3, [r7, #20]
	while (ifc) {
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1d3      	bne.n	8002046 <csp_iflist_get_by_subnet+0x12>
	}

	return NULL;
 800209e:	2300      	movs	r3, #0

}
 80020a0:	4618      	mov	r0, r3
 80020a2:	371c      	adds	r7, #28
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd90      	pop	{r4, r7, pc}
 80020a8:	200002f0 	.word	0x200002f0

080020ac <csp_iflist_get_by_name>:

	return NULL;

}

csp_iface_t * csp_iflist_get_by_name(const char * name) {
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
	csp_iface_t * ifc = interfaces;
 80020b4:	4b0d      	ldr	r3, [pc, #52]	@ (80020ec <csp_iflist_get_by_name+0x40>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	60fb      	str	r3, [r7, #12]
	while (ifc) {
 80020ba:	e00e      	b.n	80020da <csp_iflist_get_by_name+0x2e>
		if (strncmp(ifc->name, name, CSP_IFLIST_NAME_MAX) == 0) {
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	220a      	movs	r2, #10
 80020c2:	6879      	ldr	r1, [r7, #4]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f008 fe58 	bl	800ad7a <strncmp>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d101      	bne.n	80020d4 <csp_iflist_get_by_name+0x28>
			return ifc;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	e006      	b.n	80020e2 <csp_iflist_get_by_name+0x36>
		}
		ifc = ifc->next;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d8:	60fb      	str	r3, [r7, #12]
	while (ifc) {
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1ed      	bne.n	80020bc <csp_iflist_get_by_name+0x10>
	}
	return NULL;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	200002f0 	.word	0x200002f0

080020f0 <csp_iflist_add>:

int csp_iflist_add(csp_iface_t * ifc) {
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]

	ifc->next = NULL;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	641a      	str	r2, [r3, #64]	@ 0x40

	/* Add interface to pool */
	if (interfaces == NULL) {
 80020fe:	4b18      	ldr	r3, [pc, #96]	@ (8002160 <csp_iflist_add+0x70>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d103      	bne.n	800210e <csp_iflist_add+0x1e>
		/* This is the first interface to be added */
		interfaces = ifc;
 8002106:	4a16      	ldr	r2, [pc, #88]	@ (8002160 <csp_iflist_add+0x70>)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6013      	str	r3, [r2, #0]
 800210c:	e022      	b.n	8002154 <csp_iflist_add+0x64>
	} else {
		/* Insert interface last if not already in pool */
		csp_iface_t * last = NULL;
 800210e:	2300      	movs	r3, #0
 8002110:	60fb      	str	r3, [r7, #12]
		for (csp_iface_t * i = interfaces; i != NULL; i = i->next) {
 8002112:	4b13      	ldr	r3, [pc, #76]	@ (8002160 <csp_iflist_add+0x70>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	60bb      	str	r3, [r7, #8]
 8002118:	e016      	b.n	8002148 <csp_iflist_add+0x58>
			if ((i == ifc) || (strncmp(ifc->name, i->name, CSP_IFLIST_NAME_MAX) == 0)) {
 800211a:	68ba      	ldr	r2, [r7, #8]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	429a      	cmp	r2, r3
 8002120:	d00a      	beq.n	8002138 <csp_iflist_add+0x48>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6858      	ldr	r0, [r3, #4]
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	220a      	movs	r2, #10
 800212c:	4619      	mov	r1, r3
 800212e:	f008 fe24 	bl	800ad7a <strncmp>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d102      	bne.n	800213e <csp_iflist_add+0x4e>
				return CSP_ERR_ALREADY;
 8002138:	f06f 0306 	mvn.w	r3, #6
 800213c:	e00b      	b.n	8002156 <csp_iflist_add+0x66>
			}
			last = i;
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	60fb      	str	r3, [r7, #12]
		for (csp_iface_t * i = interfaces; i != NULL; i = i->next) {
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002146:	60bb      	str	r3, [r7, #8]
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1e5      	bne.n	800211a <csp_iflist_add+0x2a>
		}

		last->next = ifc;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	641a      	str	r2, [r3, #64]	@ 0x40
	}

	return CSP_ERR_NONE;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3710      	adds	r7, #16
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	200002f0 	.word	0x200002f0

08002164 <csp_init>:

uint16_t csp_get_address(void) {
	return csp_conf.address;
}

void csp_init(void) {
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0

	csp_buffer_init(); // cấp bộ nhớ nội cho CSP (packet buffer)
 8002168:	f7ff f864 	bl	8001234 <csp_buffer_init>
	csp_conn_init(); // khởi tạo hệ thống quản lí kết nối
 800216c:	f7ff f9bc 	bl	80014e8 <csp_conn_init>
	csp_qfifo_init(); // Khởi tạo FIFO queue cho các packet chờ xử lý.
 8002170:	f000 fbb0 	bl	80028d4 <csp_qfifo_init>
//	csp_iflist_add(&csp_if_lo); // Thêm interface (giao diện loopback) vào danh sách các giao diện của hệ thống CSP.
//								// (giao diện loopback) vào danh sách các giao diện của hệ thống CSP.
//
//	/* Register loopback route */
//	csp_rtable_set(0, 14, &csp_if_lo, CSP_NO_VIA_ADDRESS); // thiết lập routing table (bảng định tuyến) cho node.
}
 8002174:	bf00      	nop
 8002176:	bd80      	pop	{r7, pc}

08002178 <csp_accept>:
	sock->opts = opts;

	return sock;
}

csp_conn_t * csp_accept(csp_socket_t * sock, uint32_t timeout) {
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]

	if ((sock == NULL) || (sock->rx_queue == NULL)) {
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d003      	beq.n	8002190 <csp_accept+0x18>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d104      	bne.n	800219a <csp_accept+0x22>
		csp_dbg_errno = CSP_DBG_ERR_INVALID_POINTER;
 8002190:	4b0b      	ldr	r3, [pc, #44]	@ (80021c0 <csp_accept+0x48>)
 8002192:	220b      	movs	r2, #11
 8002194:	701a      	strb	r2, [r3, #0]
		return NULL;
 8002196:	2300      	movs	r3, #0
 8002198:	e00d      	b.n	80021b6 <csp_accept+0x3e>
	}

	csp_conn_t * conn;
	if (csp_queue_dequeue(sock->rx_queue, &conn, timeout) == CSP_QUEUE_OK) {
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f107 010c 	add.w	r1, r7, #12
 80021a2:	683a      	ldr	r2, [r7, #0]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7fe ffc4 	bl	8001132 <csp_queue_dequeue>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d101      	bne.n	80021b4 <csp_accept+0x3c>
		return conn;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	e000      	b.n	80021b6 <csp_accept+0x3e>
	}

	return NULL;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	20000266 	.word	0x20000266

080021c4 <csp_read>:

csp_packet_t * csp_read(csp_conn_t * conn, uint32_t timeout) {
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]

	csp_packet_t * packet = NULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	60bb      	str	r3, [r7, #8]

	if ((conn == NULL) || (conn->state != CONN_OPEN)) {
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00a      	beq.n	80021ee <csp_read+0x2a>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3304      	adds	r3, #4
 80021dc:	f3bf 8f5b 	dmb	ish
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f3bf 8f5b 	dmb	ish
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d001      	beq.n	80021f2 <csp_read+0x2e>
		return NULL;
 80021ee:	2300      	movs	r3, #0
 80021f0:	e00d      	b.n	800220e <csp_read+0x4a>
	if (timeout && (conn->idin.flags & CSP_FRDP) && (timeout < conn->rdp.conn_timeout)) {
		timeout = conn->rdp.conn_timeout;
	}
#endif

	if (csp_queue_dequeue(conn->rx_queue, &packet, timeout) != CSP_QUEUE_OK) {
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	f107 0108 	add.w	r1, r7, #8
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7fe ff98 	bl	8001132 <csp_queue_dequeue>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <csp_read+0x48>
		return NULL;
 8002208:	2300      	movs	r3, #0
 800220a:	e000      	b.n	800220e <csp_read+0x4a>
	if ((conn->idin.flags & CSP_FRDP) && conn->rdp.delayed_acks) {
		csp_rdp_check_ack(conn);
	}
#endif

	return packet;
 800220c:	68bb      	ldr	r3, [r7, #8]
}
 800220e:	4618      	mov	r0, r3
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <csp_id_copy>:

/* Provide a safe method to copy type safe, between two csp ids */
void csp_id_copy(csp_id_t * target, csp_id_t * source) {
 8002216:	b480      	push	{r7}
 8002218:	b083      	sub	sp, #12
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
 800221e:	6039      	str	r1, [r7, #0]
	target->pri = source->pri;
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	781a      	ldrb	r2, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	701a      	strb	r2, [r3, #0]
	target->dst = source->dst;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	889b      	ldrh	r3, [r3, #4]
 800222c:	b29a      	uxth	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	809a      	strh	r2, [r3, #4]
	target->src = source->src;
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	885b      	ldrh	r3, [r3, #2]
 8002236:	b29a      	uxth	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	805a      	strh	r2, [r3, #2]
	target->dport = source->dport;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	799a      	ldrb	r2, [r3, #6]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	719a      	strb	r2, [r3, #6]
	target->sport = source->sport;
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	79da      	ldrb	r2, [r3, #7]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	71da      	strb	r2, [r3, #7]
	target->flags = source->flags;
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	785a      	ldrb	r2, [r3, #1]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	705a      	strb	r2, [r3, #1]
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <csp_send_direct>:

int csp_send_direct(csp_id_t idout, csp_packet_t * packet, int from_me) {
 8002260:	b590      	push	{r4, r7, lr}
 8002262:	b08b      	sub	sp, #44	@ 0x2c
 8002264:	af02      	add	r7, sp, #8
 8002266:	f107 0408 	add.w	r4, r7, #8
 800226a:	e884 0003 	stmia.w	r4, {r0, r1}
 800226e:	607a      	str	r2, [r7, #4]
 8002270:	603b      	str	r3, [r7, #0]

	int ret;

	/* Try to find the destination on any local subnets */
	csp_iface_t * local_interface = csp_iflist_get_by_subnet(idout.dst);
 8002272:	89bb      	ldrh	r3, [r7, #12]
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff fedd 	bl	8002034 <csp_iflist_get_by_subnet>
 800227a:	61b8      	str	r0, [r7, #24]
	if (local_interface) {
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d010      	beq.n	80022a4 <csp_send_direct+0x44>
		idout.src = local_interface->addr;
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	881b      	ldrh	r3, [r3, #0]
 8002286:	817b      	strh	r3, [r7, #10]
		ret = csp_send_direct_iface(idout, packet, local_interface, CSP_NO_VIA_ADDRESS, 1);
 8002288:	2301      	movs	r3, #1
 800228a:	9301      	str	r3, [sp, #4]
 800228c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	f107 0108 	add.w	r1, r7, #8
 800229a:	c903      	ldmia	r1, {r0, r1}
 800229c:	f000 f86c 	bl	8002378 <csp_send_direct_iface>
 80022a0:	61f8      	str	r0, [r7, #28]
 80022a2:	e023      	b.n	80022ec <csp_send_direct+0x8c>

	/* Otherwise, resort to the routing table for help */		
	} else {
		csp_route_t * route = csp_rtable_find_route(idout.dst);
 80022a4:	89bb      	ldrh	r3, [r7, #12]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f000 fde0 	bl	8002e6c <csp_rtable_find_route>
 80022ac:	6178      	str	r0, [r7, #20]
		if (route == NULL) {
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d108      	bne.n	80022c6 <csp_send_direct+0x66>
			csp_dbg_conn_noroute++;
 80022b4:	4b10      	ldr	r3, [pc, #64]	@ (80022f8 <csp_send_direct+0x98>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	3301      	adds	r3, #1
 80022ba:	b2da      	uxtb	r2, r3
 80022bc:	4b0e      	ldr	r3, [pc, #56]	@ (80022f8 <csp_send_direct+0x98>)
 80022be:	701a      	strb	r2, [r3, #0]
			return CSP_ERR_TX;
 80022c0:	f06f 0309 	mvn.w	r3, #9
 80022c4:	e013      	b.n	80022ee <csp_send_direct+0x8e>
		}
		idout.src = route->iface->addr;
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	881b      	ldrh	r3, [r3, #0]
 80022cc:	817b      	strh	r3, [r7, #10]
		ret = csp_send_direct_iface(idout, packet, route->iface, route->via, 1);
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	689a      	ldr	r2, [r3, #8]
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	889b      	ldrh	r3, [r3, #4]
 80022d6:	2101      	movs	r1, #1
 80022d8:	9101      	str	r1, [sp, #4]
 80022da:	9300      	str	r3, [sp, #0]
 80022dc:	4613      	mov	r3, r2
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	f107 0108 	add.w	r1, r7, #8
 80022e4:	c903      	ldmia	r1, {r0, r1}
 80022e6:	f000 f847 	bl	8002378 <csp_send_direct_iface>
 80022ea:	61f8      	str	r0, [r7, #28]
	}
	return ret;
 80022ec:	69fb      	ldr	r3, [r7, #28]

}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3724      	adds	r7, #36	@ 0x24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd90      	pop	{r4, r7, pc}
 80022f6:	bf00      	nop
 80022f8:	20000269 	.word	0x20000269

080022fc <csp_output_hook>:

__attribute__((weak)) void csp_output_hook(csp_id_t idout, csp_packet_t * packet, csp_iface_t * iface, uint16_t via, int from_me) {
 80022fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002300:	b08a      	sub	sp, #40	@ 0x28
 8002302:	af06      	add	r7, sp, #24
 8002304:	f107 0408 	add.w	r4, r7, #8
 8002308:	e884 0003 	stmia.w	r4, {r0, r1}
 800230c:	607a      	str	r2, [r7, #4]
 800230e:	603b      	str	r3, [r7, #0]
	csp_print_packet("OUT: S %u, D %u, Dp %u, Sp %u, Pr %u, Fl 0x%02X, Sz %u VIA: %s (%u)\n",
 8002310:	4b17      	ldr	r3, [pc, #92]	@ (8002370 <csp_output_hook+0x74>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d025      	beq.n	8002364 <csp_output_hook+0x68>
 8002318:	897b      	ldrh	r3, [r7, #10]
 800231a:	469c      	mov	ip, r3
 800231c:	89bb      	ldrh	r3, [r7, #12]
 800231e:	469e      	mov	lr, r3
 8002320:	7bbb      	ldrb	r3, [r7, #14]
 8002322:	4698      	mov	r8, r3
 8002324:	7bfb      	ldrb	r3, [r7, #15]
 8002326:	4618      	mov	r0, r3
 8002328:	7a3b      	ldrb	r3, [r7, #8]
 800232a:	461c      	mov	r4, r3
 800232c:	7a7b      	ldrb	r3, [r7, #9]
 800232e:	461d      	mov	r5, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	8a9b      	ldrh	r3, [r3, #20]
 8002334:	461e      	mov	r6, r3
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800233c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002340:	428b      	cmp	r3, r1
 8002342:	d001      	beq.n	8002348 <csp_output_hook+0x4c>
 8002344:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002346:	e000      	b.n	800234a <csp_output_hook+0x4e>
 8002348:	89bb      	ldrh	r3, [r7, #12]
 800234a:	9305      	str	r3, [sp, #20]
 800234c:	9204      	str	r2, [sp, #16]
 800234e:	9603      	str	r6, [sp, #12]
 8002350:	9502      	str	r5, [sp, #8]
 8002352:	9401      	str	r4, [sp, #4]
 8002354:	9000      	str	r0, [sp, #0]
 8002356:	4643      	mov	r3, r8
 8002358:	4672      	mov	r2, lr
 800235a:	4661      	mov	r1, ip
 800235c:	4805      	ldr	r0, [pc, #20]	@ (8002374 <csp_output_hook+0x78>)
 800235e:	f7ff fbb5 	bl	8001acc <csp_print_func>
				idout.src, idout.dst, idout.dport, idout.sport, idout.pri, idout.flags, packet->length, iface->name, (via != CSP_NO_VIA_ADDRESS) ? via : idout.dst);
	return;
 8002362:	bf00      	nop
 8002364:	bf00      	nop
}
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800236e:	bf00      	nop
 8002370:	2000026b 	.word	0x2000026b
 8002374:	0800e514 	.word	0x0800e514

08002378 <csp_send_direct_iface>:

int csp_send_direct_iface(csp_id_t idout, csp_packet_t * packet, csp_iface_t * iface, uint16_t via, int from_me) {
 8002378:	b590      	push	{r4, r7, lr}
 800237a:	b089      	sub	sp, #36	@ 0x24
 800237c:	af02      	add	r7, sp, #8
 800237e:	f107 0408 	add.w	r4, r7, #8
 8002382:	e884 0003 	stmia.w	r4, {r0, r1}
 8002386:	607a      	str	r2, [r7, #4]
 8002388:	603b      	str	r3, [r7, #0]

	if (iface == NULL) {
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d106      	bne.n	800239e <csp_send_direct_iface+0x26>
		csp_dbg_conn_noroute++;
 8002390:	4b36      	ldr	r3, [pc, #216]	@ (800246c <csp_send_direct_iface+0xf4>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	3301      	adds	r3, #1
 8002396:	b2da      	uxtb	r2, r3
 8002398:	4b34      	ldr	r3, [pc, #208]	@ (800246c <csp_send_direct_iface+0xf4>)
 800239a:	701a      	strb	r2, [r3, #0]
		goto err;
 800239c:	e060      	b.n	8002460 <csp_send_direct_iface+0xe8>
	}

	csp_output_hook(idout, packet, iface, via, from_me);
 800239e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023a0:	9301      	str	r3, [sp, #4]
 80023a2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80023a4:	9300      	str	r3, [sp, #0]
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	f107 0108 	add.w	r1, r7, #8
 80023ae:	c903      	ldmia	r1, {r0, r1}
 80023b0:	f7ff ffa4 	bl	80022fc <csp_output_hook>

	/* Copy identifier to packet (before crc and hmac) */
	csp_id_copy(&packet->id, &idout);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3316      	adds	r3, #22
 80023b8:	f107 0208 	add.w	r2, r7, #8
 80023bc:	4611      	mov	r1, r2
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff ff29 	bl	8002216 <csp_id_copy>

#if (CSP_USE_PROMISC)
	/* Loopback traffic is added to promisc queue by the router */
	if (from_me && (iface != &csp_if_lo)) {
 80023c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d006      	beq.n	80023d8 <csp_send_direct_iface+0x60>
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	4a28      	ldr	r2, [pc, #160]	@ (8002470 <csp_send_direct_iface+0xf8>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d002      	beq.n	80023d8 <csp_send_direct_iface+0x60>
		csp_promisc_add(packet);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 fa4a 	bl	800286c <csp_promisc_add>
	}
#endif

	/* Only encrypt packets from the current node */
	if (from_me) {
 80023d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d013      	beq.n	8002406 <csp_send_direct_iface+0x8e>

		/* Append HMAC */
		if (idout.flags & CSP_FHMAC) {
 80023de:	7a7b      	ldrb	r3, [r7, #9]
 80023e0:	f003 0308 	and.w	r3, r3, #8
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d003      	beq.n	80023f0 <csp_send_direct_iface+0x78>
			if (csp_hmac_append(packet, false) != CSP_ERR_NONE) {
				/* HMAC append failed */
				goto tx_err;
			}
#else
			csp_dbg_errno = CSP_DBG_ERR_UNSUPPORTED;
 80023e8:	4b22      	ldr	r3, [pc, #136]	@ (8002474 <csp_send_direct_iface+0xfc>)
 80023ea:	2207      	movs	r2, #7
 80023ec:	701a      	strb	r2, [r3, #0]
			goto tx_err;
 80023ee:	e032      	b.n	8002456 <csp_send_direct_iface+0xde>
#endif
		}

		/* Append CRC32 */
		if (idout.flags & CSP_FCRC32) {
 80023f0:	7a7b      	ldrb	r3, [r7, #9]
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d005      	beq.n	8002406 <csp_send_direct_iface+0x8e>
			/* Calculate and add CRC32 (does not include header for backwards compatability with csp1.x) */
			if (csp_crc32_append(packet) != CSP_ERR_NONE) {
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f7ff fad6 	bl	80019ac <csp_crc32_append>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d122      	bne.n	800244c <csp_send_direct_iface+0xd4>
		}

	}

	/* Store length before passing to interface */
	uint16_t bytes = packet->length;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	8a9b      	ldrh	r3, [r3, #20]
 800240a:	82fb      	strh	r3, [r7, #22]
	uint16_t mtu = iface->mtu;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	8a9b      	ldrh	r3, [r3, #20]
 8002410:	82bb      	strh	r3, [r7, #20]

	if (mtu > 0 && bytes > mtu)
 8002412:	8abb      	ldrh	r3, [r7, #20]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d003      	beq.n	8002420 <csp_send_direct_iface+0xa8>
 8002418:	8afa      	ldrh	r2, [r7, #22]
 800241a:	8abb      	ldrh	r3, [r7, #20]
 800241c:	429a      	cmp	r2, r3
 800241e:	d817      	bhi.n	8002450 <csp_send_direct_iface+0xd8>
		goto tx_err;

	if ((*iface->nexthop)(iface, via, packet) != CSP_ERR_NONE)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	6838      	ldr	r0, [r7, #0]
 800242a:	4798      	blx	r3
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d110      	bne.n	8002454 <csp_send_direct_iface+0xdc>
		goto tx_err;

	iface->tx++;
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	1c5a      	adds	r2, r3, #1
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	619a      	str	r2, [r3, #24]
	iface->txbytes += bytes;
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002440:	8afb      	ldrh	r3, [r7, #22]
 8002442:	441a      	add	r2, r3
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	635a      	str	r2, [r3, #52]	@ 0x34
	return CSP_ERR_NONE;
 8002448:	2300      	movs	r3, #0
 800244a:	e00b      	b.n	8002464 <csp_send_direct_iface+0xec>
				goto tx_err;
 800244c:	bf00      	nop
 800244e:	e002      	b.n	8002456 <csp_send_direct_iface+0xde>
		goto tx_err;
 8002450:	bf00      	nop
 8002452:	e000      	b.n	8002456 <csp_send_direct_iface+0xde>
		goto tx_err;
 8002454:	bf00      	nop

tx_err:
	iface->tx_error++;
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	6a1b      	ldr	r3, [r3, #32]
 800245a:	1c5a      	adds	r2, r3, #1
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	621a      	str	r2, [r3, #32]
err:
	return CSP_ERR_TX;
 8002460:	f06f 0309 	mvn.w	r3, #9
}
 8002464:	4618      	mov	r0, r3
 8002466:	371c      	adds	r7, #28
 8002468:	46bd      	mov	sp, r7
 800246a:	bd90      	pop	{r4, r7, pc}
 800246c:	20000269 	.word	0x20000269
 8002470:	2000001c 	.word	0x2000001c
 8002474:	20000266 	.word	0x20000266

08002478 <csp_send>:

void csp_send(csp_conn_t * conn, csp_packet_t * packet) {
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]

	if (packet == NULL) {
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d01f      	beq.n	80024c8 <csp_send+0x50>
		return;
	}

	if ((conn == NULL) || (conn->state != CONN_OPEN)) {
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00a      	beq.n	80024a4 <csp_send+0x2c>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	3304      	adds	r3, #4
 8002492:	f3bf 8f5b 	dmb	ish
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f3bf 8f5b 	dmb	ish
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d003      	beq.n	80024ac <csp_send+0x34>
		csp_buffer_free(packet);
 80024a4:	6838      	ldr	r0, [r7, #0]
 80024a6:	f7fe ff79 	bl	800139c <csp_buffer_free>
		return;
 80024aa:	e00e      	b.n	80024ca <csp_send+0x52>
			return;
		}
	}
#endif

	if (csp_send_direct(conn->idout, packet, 1) != CSP_ERR_NONE) {
 80024ac:	6879      	ldr	r1, [r7, #4]
 80024ae:	2301      	movs	r3, #1
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	3110      	adds	r1, #16
 80024b4:	c903      	ldmia	r1, {r0, r1}
 80024b6:	f7ff fed3 	bl	8002260 <csp_send_direct>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d004      	beq.n	80024ca <csp_send+0x52>
		csp_buffer_free(packet);
 80024c0:	6838      	ldr	r0, [r7, #0]
 80024c2:	f7fe ff6b 	bl	800139c <csp_buffer_free>
		return;
 80024c6:	e000      	b.n	80024ca <csp_send+0x52>
		return;
 80024c8:	bf00      	nop
	}
}
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <csp_transaction_persistent>:
void csp_send_prio(uint8_t prio, csp_conn_t * conn, csp_packet_t * packet) {
	conn->idout.pri = prio;
	csp_send(conn, packet);
}

int csp_transaction_persistent(csp_conn_t * conn, uint32_t timeout, void * outbuf, int outlen, void * inbuf, int inlen) {
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b088      	sub	sp, #32
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
 80024dc:	603b      	str	r3, [r7, #0]

	int size = (inlen > outlen) ? inlen : outlen;
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024e2:	4293      	cmp	r3, r2
 80024e4:	bfb8      	it	lt
 80024e6:	4613      	movlt	r3, r2
 80024e8:	61fb      	str	r3, [r7, #28]
	csp_packet_t * packet = csp_buffer_get(size);
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7fe fed5 	bl	800129c <csp_buffer_get>
 80024f2:	61b8      	str	r0, [r7, #24]
	if (packet == NULL)
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <csp_transaction_persistent+0x2e>
		return 0;
 80024fa:	2300      	movs	r3, #0
 80024fc:	e048      	b.n	8002590 <csp_transaction_persistent+0xc0>

	/* Copy the request */
	if (outlen > 0 && outbuf != NULL)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	dd09      	ble.n	8002518 <csp_transaction_persistent+0x48>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d006      	beq.n	8002518 <csp_transaction_persistent+0x48>
		memcpy(packet->data, outbuf, outlen);
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	332c      	adds	r3, #44	@ 0x2c
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	4618      	mov	r0, r3
 8002514:	f008 fd3b 	bl	800af8e <memcpy>
	packet->length = outlen;
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	b29a      	uxth	r2, r3
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	829a      	strh	r2, [r3, #20]

	csp_send(conn, packet);
 8002520:	69b9      	ldr	r1, [r7, #24]
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	f7ff ffa8 	bl	8002478 <csp_send>

	/* If no reply is expected, return now */
	if (inlen == 0)
 8002528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <csp_transaction_persistent+0x62>
		return 1;
 800252e:	2301      	movs	r3, #1
 8002530:	e02e      	b.n	8002590 <csp_transaction_persistent+0xc0>

	packet = csp_read(conn, timeout);
 8002532:	68b9      	ldr	r1, [r7, #8]
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f7ff fe45 	bl	80021c4 <csp_read>
 800253a:	61b8      	str	r0, [r7, #24]
	if (packet == NULL)
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <csp_transaction_persistent+0x76>
		return 0;
 8002542:	2300      	movs	r3, #0
 8002544:	e024      	b.n	8002590 <csp_transaction_persistent+0xc0>

	if ((inlen != -1) && ((int)packet->length != inlen)) {
 8002546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800254c:	d010      	beq.n	8002570 <csp_transaction_persistent+0xa0>
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	8a9b      	ldrh	r3, [r3, #20]
 8002552:	461a      	mov	r2, r3
 8002554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002556:	4293      	cmp	r3, r2
 8002558:	d00a      	beq.n	8002570 <csp_transaction_persistent+0xa0>
		csp_dbg_inval_reply++;
 800255a:	4b0f      	ldr	r3, [pc, #60]	@ (8002598 <csp_transaction_persistent+0xc8>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	3301      	adds	r3, #1
 8002560:	b2da      	uxtb	r2, r3
 8002562:	4b0d      	ldr	r3, [pc, #52]	@ (8002598 <csp_transaction_persistent+0xc8>)
 8002564:	701a      	strb	r2, [r3, #0]
		csp_buffer_free(packet);
 8002566:	69b8      	ldr	r0, [r7, #24]
 8002568:	f7fe ff18 	bl	800139c <csp_buffer_free>
		return 0;
 800256c:	2300      	movs	r3, #0
 800256e:	e00f      	b.n	8002590 <csp_transaction_persistent+0xc0>
	}

	memcpy(inbuf, packet->data, packet->length);
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	8a9b      	ldrh	r3, [r3, #20]
 800257a:	461a      	mov	r2, r3
 800257c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800257e:	f008 fd06 	bl	800af8e <memcpy>
	int length = packet->length;
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	8a9b      	ldrh	r3, [r3, #20]
 8002586:	617b      	str	r3, [r7, #20]
	csp_buffer_free(packet);
 8002588:	69b8      	ldr	r0, [r7, #24]
 800258a:	f7fe ff07 	bl	800139c <csp_buffer_free>
	return length;
 800258e:	697b      	ldr	r3, [r7, #20]
}
 8002590:	4618      	mov	r0, r3
 8002592:	3720      	adds	r7, #32
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	2000026a 	.word	0x2000026a

0800259c <csp_transaction_w_opts>:

int csp_transaction_w_opts(uint8_t prio, uint16_t dest, uint8_t port, uint32_t timeout, void * outbuf, int outlen, void * inbuf, int inlen, uint32_t opts) {
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af02      	add	r7, sp, #8
 80025a2:	603b      	str	r3, [r7, #0]
 80025a4:	4603      	mov	r3, r0
 80025a6:	71fb      	strb	r3, [r7, #7]
 80025a8:	460b      	mov	r3, r1
 80025aa:	80bb      	strh	r3, [r7, #4]
 80025ac:	4613      	mov	r3, r2
 80025ae:	71bb      	strb	r3, [r7, #6]

	csp_conn_t * conn = csp_connect(prio, dest, port, 0, opts);
 80025b0:	79ba      	ldrb	r2, [r7, #6]
 80025b2:	88b9      	ldrh	r1, [r7, #4]
 80025b4:	79f8      	ldrb	r0, [r7, #7]
 80025b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025b8:	9300      	str	r3, [sp, #0]
 80025ba:	2300      	movs	r3, #0
 80025bc:	f7ff f920 	bl	8001800 <csp_connect>
 80025c0:	60f8      	str	r0, [r7, #12]
	if (conn == NULL)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d101      	bne.n	80025cc <csp_transaction_w_opts+0x30>
		return 0;
 80025c8:	2300      	movs	r3, #0
 80025ca:	e00e      	b.n	80025ea <csp_transaction_w_opts+0x4e>

	int status = csp_transaction_persistent(conn, timeout, outbuf, outlen, inbuf, inlen);
 80025cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ce:	9301      	str	r3, [sp, #4]
 80025d0:	6a3b      	ldr	r3, [r7, #32]
 80025d2:	9300      	str	r3, [sp, #0]
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	6839      	ldr	r1, [r7, #0]
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f7ff ff78 	bl	80024d0 <csp_transaction_persistent>
 80025e0:	60b8      	str	r0, [r7, #8]

	csp_close(conn);
 80025e2:	68f8      	ldr	r0, [r7, #12]
 80025e4:	f7ff f8ce 	bl	8001784 <csp_close>

	return status;
 80025e8:	68bb      	ldr	r3, [r7, #8]
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
	...

080025f4 <csp_sendto>:
	csp_queue_dequeue(socket->rx_queue, &packet, timeout);

	return packet;
}

void csp_sendto(uint8_t prio, uint16_t dest, uint8_t dport, uint8_t src_port, uint32_t opts, csp_packet_t * packet) {
 80025f4:	b590      	push	{r4, r7, lr}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4604      	mov	r4, r0
 80025fc:	4608      	mov	r0, r1
 80025fe:	4611      	mov	r1, r2
 8002600:	461a      	mov	r2, r3
 8002602:	4623      	mov	r3, r4
 8002604:	71fb      	strb	r3, [r7, #7]
 8002606:	4603      	mov	r3, r0
 8002608:	80bb      	strh	r3, [r7, #4]
 800260a:	460b      	mov	r3, r1
 800260c:	71bb      	strb	r3, [r7, #6]
 800260e:	4613      	mov	r3, r2
 8002610:	70fb      	strb	r3, [r7, #3]

	if (!(opts & CSP_O_SAME))
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d102      	bne.n	8002622 <csp_sendto+0x2e>
		packet->id.flags = 0;
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	2200      	movs	r2, #0
 8002620:	75da      	strb	r2, [r3, #23]

	if (opts & CSP_O_RDP) {
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	2b00      	cmp	r3, #0
 800262a:	d006      	beq.n	800263a <csp_sendto+0x46>
		csp_dbg_errno = CSP_DBG_ERR_UNSUPPORTED;
 800262c:	4b21      	ldr	r3, [pc, #132]	@ (80026b4 <csp_sendto+0xc0>)
 800262e:	2207      	movs	r2, #7
 8002630:	701a      	strb	r2, [r3, #0]
		csp_buffer_free(packet);
 8002632:	69f8      	ldr	r0, [r7, #28]
 8002634:	f7fe feb2 	bl	800139c <csp_buffer_free>
		return;
 8002638:	e038      	b.n	80026ac <csp_sendto+0xb8>
	}

	if (opts & CSP_O_HMAC) {
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	2b00      	cmp	r3, #0
 8002642:	d006      	beq.n	8002652 <csp_sendto+0x5e>
#if (CSP_USE_HMAC)
		packet->id.flags |= CSP_FHMAC;
#else
		csp_dbg_errno = CSP_DBG_ERR_UNSUPPORTED;
 8002644:	4b1b      	ldr	r3, [pc, #108]	@ (80026b4 <csp_sendto+0xc0>)
 8002646:	2207      	movs	r2, #7
 8002648:	701a      	strb	r2, [r3, #0]
		csp_buffer_free(packet);
 800264a:	69f8      	ldr	r0, [r7, #28]
 800264c:	f7fe fea6 	bl	800139c <csp_buffer_free>
		return;
 8002650:	e02c      	b.n	80026ac <csp_sendto+0xb8>
#endif
	}

	if (opts & CSP_O_CRC32) {
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002658:	2b00      	cmp	r3, #0
 800265a:	d006      	beq.n	800266a <csp_sendto+0x76>
		packet->id.flags |= CSP_FCRC32;
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	7ddb      	ldrb	r3, [r3, #23]
 8002660:	f043 0301 	orr.w	r3, r3, #1
 8002664:	b2da      	uxtb	r2, r3
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	75da      	strb	r2, [r3, #23]
	}

	packet->id.dst = dest;
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	88ba      	ldrh	r2, [r7, #4]
 800266e:	835a      	strh	r2, [r3, #26]
	packet->id.dport = dport;
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	79ba      	ldrb	r2, [r7, #6]
 8002674:	771a      	strb	r2, [r3, #28]
	packet->id.src = 0; // The source address will be filled by csp_send_direct
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	2200      	movs	r2, #0
 800267a:	831a      	strh	r2, [r3, #24]
	packet->id.sport = src_port;
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	78fa      	ldrb	r2, [r7, #3]
 8002680:	775a      	strb	r2, [r3, #29]
	packet->id.pri = prio;
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	79fa      	ldrb	r2, [r7, #7]
 8002686:	759a      	strb	r2, [r3, #22]

	if (csp_send_direct(packet->id, packet, 1) != CSP_ERR_NONE) {
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	f8d3 2016 	ldr.w	r2, [r3, #22]
 800268e:	4610      	mov	r0, r2
 8002690:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8002694:	4619      	mov	r1, r3
 8002696:	2301      	movs	r3, #1
 8002698:	69fa      	ldr	r2, [r7, #28]
 800269a:	f7ff fde1 	bl	8002260 <csp_send_direct>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d003      	beq.n	80026ac <csp_sendto+0xb8>
		csp_buffer_free(packet);
 80026a4:	69f8      	ldr	r0, [r7, #28]
 80026a6:	f7fe fe79 	bl	800139c <csp_buffer_free>
		return;
 80026aa:	bf00      	nop
	}
}
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd90      	pop	{r4, r7, pc}
 80026b2:	bf00      	nop
 80026b4:	20000266 	.word	0x20000266

080026b8 <csp_sendto_reply>:

void csp_sendto_reply(const csp_packet_t * request_packet, csp_packet_t * reply_packet, uint32_t opts) {
 80026b8:	b590      	push	{r4, r7, lr}
 80026ba:	b087      	sub	sp, #28
 80026bc:	af02      	add	r7, sp, #8
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]

	if (request_packet == NULL)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d018      	beq.n	80026fc <csp_sendto_reply+0x44>
		return;

	if (opts & CSP_O_SAME) {
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d003      	beq.n	80026dc <csp_sendto_reply+0x24>
		reply_packet->id.flags = request_packet->id.flags;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	7dda      	ldrb	r2, [r3, #23]
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	75da      	strb	r2, [r3, #23]
	}

	return csp_sendto(request_packet->id.pri, request_packet->id.src, request_packet->id.sport, request_packet->id.dport, opts, reply_packet);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	7d98      	ldrb	r0, [r3, #22]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8b19      	ldrh	r1, [r3, #24]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	7f5a      	ldrb	r2, [r3, #29]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	7f1c      	ldrb	r4, [r3, #28]
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	9301      	str	r3, [sp, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	9300      	str	r3, [sp, #0]
 80026f4:	4623      	mov	r3, r4
 80026f6:	f7ff ff7d 	bl	80025f4 <csp_sendto>
 80026fa:	e000      	b.n	80026fe <csp_sendto_reply+0x46>
		return;
 80026fc:	bf00      	nop
}
 80026fe:	3714      	adds	r7, #20
 8002700:	46bd      	mov	sp, r7
 8002702:	bd90      	pop	{r4, r7, pc}

08002704 <csp_port_get_callback>:
} csp_port_t;

/* We rely on the .bss section to clear this, so there is no csp_port_init() function */
static csp_port_t ports[CSP_PORT_MAX_BIND + 2] = {0};

csp_callback_t csp_port_get_callback(unsigned int port) {
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
	
	if (port > CSP_PORT_MAX_BIND) {
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002710:	d901      	bls.n	8002716 <csp_port_get_callback+0x12>
		return NULL;
 8002712:	2300      	movs	r3, #0
 8002714:	e01d      	b.n	8002752 <csp_port_get_callback+0x4e>
	}

	/* Check if port is open callback */
	if (ports[port].state == PORT_OPEN_CB) {
 8002716:	4a12      	ldr	r2, [pc, #72]	@ (8002760 <csp_port_get_callback+0x5c>)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800271e:	2b02      	cmp	r3, #2
 8002720:	d105      	bne.n	800272e <csp_port_get_callback+0x2a>
		return ports[port].callback;
 8002722:	4a0f      	ldr	r2, [pc, #60]	@ (8002760 <csp_port_get_callback+0x5c>)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	4413      	add	r3, r2
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	e011      	b.n	8002752 <csp_port_get_callback+0x4e>
	}

	/* If it's open socket, then return no callback */
	if (ports[port].state == PORT_OPEN) {
 800272e:	4a0c      	ldr	r2, [pc, #48]	@ (8002760 <csp_port_get_callback+0x5c>)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d101      	bne.n	800273e <csp_port_get_callback+0x3a>
		return NULL;
 800273a:	2300      	movs	r3, #0
 800273c:	e009      	b.n	8002752 <csp_port_get_callback+0x4e>
	}

	/* Otherwise check if we have a match all callback */
	if (ports[CSP_PORT_MAX_BIND + 1].state == PORT_OPEN_CB) {
 800273e:	4b08      	ldr	r3, [pc, #32]	@ (8002760 <csp_port_get_callback+0x5c>)
 8002740:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8002744:	2b02      	cmp	r3, #2
 8002746:	d103      	bne.n	8002750 <csp_port_get_callback+0x4c>
		return ports[CSP_PORT_MAX_BIND + 1].callback;
 8002748:	4b05      	ldr	r3, [pc, #20]	@ (8002760 <csp_port_get_callback+0x5c>)
 800274a:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800274e:	e000      	b.n	8002752 <csp_port_get_callback+0x4e>
	}

	return NULL;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	200002f4 	.word	0x200002f4

08002764 <csp_port_get_socket>:

csp_socket_t * csp_port_get_socket(unsigned int port) {
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]

	if (port > CSP_PORT_MAX_BIND) {
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002770:	d901      	bls.n	8002776 <csp_port_get_socket+0x12>
		return NULL;
 8002772:	2300      	movs	r3, #0
 8002774:	e01d      	b.n	80027b2 <csp_port_get_socket+0x4e>
	}

	if (ports[port].state == PORT_OPEN) {
 8002776:	4a12      	ldr	r2, [pc, #72]	@ (80027c0 <csp_port_get_socket+0x5c>)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d105      	bne.n	800278e <csp_port_get_socket+0x2a>
		return ports[port].socket;
 8002782:	4a0f      	ldr	r2, [pc, #60]	@ (80027c0 <csp_port_get_socket+0x5c>)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	4413      	add	r3, r2
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	e011      	b.n	80027b2 <csp_port_get_socket+0x4e>
	}

	if (ports[port].state == PORT_OPEN_CB) {
 800278e:	4a0c      	ldr	r2, [pc, #48]	@ (80027c0 <csp_port_get_socket+0x5c>)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8002796:	2b02      	cmp	r3, #2
 8002798:	d101      	bne.n	800279e <csp_port_get_socket+0x3a>
		return NULL;
 800279a:	2300      	movs	r3, #0
 800279c:	e009      	b.n	80027b2 <csp_port_get_socket+0x4e>
	}

	if (ports[CSP_PORT_MAX_BIND + 1].state == PORT_OPEN) {
 800279e:	4b08      	ldr	r3, [pc, #32]	@ (80027c0 <csp_port_get_socket+0x5c>)
 80027a0:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d103      	bne.n	80027b0 <csp_port_get_socket+0x4c>
		return ports[CSP_PORT_MAX_BIND + 1].socket;
 80027a8:	4b05      	ldr	r3, [pc, #20]	@ (80027c0 <csp_port_get_socket+0x5c>)
 80027aa:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80027ae:	e000      	b.n	80027b2 <csp_port_get_socket+0x4e>
	}

	return NULL;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	200002f4 	.word	0x200002f4

080027c4 <csp_listen>:

int csp_listen(csp_socket_t * socket, size_t backlog) {
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
	socket->rx_queue = csp_queue_create_static(CSP_CONN_RXQUEUE_LEN, sizeof(csp_packet_t *), socket->rx_queue_static_data, &socket->rx_queue_static);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f103 0254 	add.w	r2, r3, #84	@ 0x54
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3304      	adds	r3, #4
 80027d8:	2104      	movs	r1, #4
 80027da:	200a      	movs	r0, #10
 80027dc:	f7fe fc64 	bl	80010a8 <csp_queue_create_static>
 80027e0:	4602      	mov	r2, r0
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	601a      	str	r2, [r3, #0]
	return CSP_ERR_NONE;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <csp_bind>:

int csp_bind(csp_socket_t * socket, uint8_t port) {
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	460b      	mov	r3, r1
 80027fa:	70fb      	strb	r3, [r7, #3]

	if (socket == NULL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d102      	bne.n	8002808 <csp_bind+0x18>
		return CSP_ERR_INVAL;
 8002802:	f06f 0301 	mvn.w	r3, #1
 8002806:	e026      	b.n	8002856 <csp_bind+0x66>

	if (port == CSP_ANY) {
 8002808:	78fb      	ldrb	r3, [r7, #3]
 800280a:	2bff      	cmp	r3, #255	@ 0xff
 800280c:	d102      	bne.n	8002814 <csp_bind+0x24>
		port = CSP_PORT_MAX_BIND + 1;
 800280e:	2340      	movs	r3, #64	@ 0x40
 8002810:	70fb      	strb	r3, [r7, #3]
 8002812:	e008      	b.n	8002826 <csp_bind+0x36>
	} else if (port > CSP_PORT_MAX_BIND) {
 8002814:	78fb      	ldrb	r3, [r7, #3]
 8002816:	2b3f      	cmp	r3, #63	@ 0x3f
 8002818:	d905      	bls.n	8002826 <csp_bind+0x36>
		csp_dbg_errno = CSP_DBG_ERR_INVALID_BIND_PORT;
 800281a:	4b12      	ldr	r3, [pc, #72]	@ (8002864 <csp_bind+0x74>)
 800281c:	2208      	movs	r2, #8
 800281e:	701a      	strb	r2, [r3, #0]
		return CSP_ERR_INVAL;
 8002820:	f06f 0301 	mvn.w	r3, #1
 8002824:	e017      	b.n	8002856 <csp_bind+0x66>
	}

	if (ports[port].state != PORT_CLOSED) {
 8002826:	78fb      	ldrb	r3, [r7, #3]
 8002828:	4a0f      	ldr	r2, [pc, #60]	@ (8002868 <csp_bind+0x78>)
 800282a:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d005      	beq.n	800283e <csp_bind+0x4e>
		csp_dbg_errno = CSP_DBG_ERR_PORT_ALREADY_IN_USE;
 8002832:	4b0c      	ldr	r3, [pc, #48]	@ (8002864 <csp_bind+0x74>)
 8002834:	2209      	movs	r2, #9
 8002836:	701a      	strb	r2, [r3, #0]
		return CSP_ERR_USED;
 8002838:	f06f 0303 	mvn.w	r3, #3
 800283c:	e00b      	b.n	8002856 <csp_bind+0x66>
	}

	/* Save listener */
	ports[port].socket = socket;
 800283e:	78fb      	ldrb	r3, [r7, #3]
 8002840:	4a09      	ldr	r2, [pc, #36]	@ (8002868 <csp_bind+0x78>)
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	4413      	add	r3, r2
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	605a      	str	r2, [r3, #4]
	ports[port].state = PORT_OPEN;
 800284a:	78fb      	ldrb	r3, [r7, #3]
 800284c:	4a06      	ldr	r2, [pc, #24]	@ (8002868 <csp_bind+0x78>)
 800284e:	2101      	movs	r1, #1
 8002850:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]

	return CSP_ERR_NONE;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	20000266 	.word	0x20000266
 8002868:	200002f4 	.word	0x200002f4

0800286c <csp_promisc_add>:
	csp_queue_dequeue(csp_promisc_queue, &packet, timeout);

	return packet;
}

void csp_promisc_add(csp_packet_t * packet) {
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]

	if (csp_promisc_enabled == 0)
 8002874:	4b14      	ldr	r3, [pc, #80]	@ (80028c8 <csp_promisc_add+0x5c>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d021      	beq.n	80028c0 <csp_promisc_add+0x54>
		return;

	if (csp_promisc_queue != NULL) {
 800287c:	4b13      	ldr	r3, [pc, #76]	@ (80028cc <csp_promisc_add+0x60>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d01e      	beq.n	80028c2 <csp_promisc_add+0x56>
		/* Make a copy of the message and queue it to the promiscuous task */
		csp_packet_t * packet_copy = csp_buffer_clone(packet);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f7fe fdc9 	bl	800141c <csp_buffer_clone>
 800288a:	4603      	mov	r3, r0
 800288c:	60fb      	str	r3, [r7, #12]
		if (packet_copy != NULL) {
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d016      	beq.n	80028c2 <csp_promisc_add+0x56>
			if (csp_queue_enqueue(csp_promisc_queue, &packet_copy, 0) != CSP_QUEUE_OK) {
 8002894:	4b0d      	ldr	r3, [pc, #52]	@ (80028cc <csp_promisc_add+0x60>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f107 010c 	add.w	r1, r7, #12
 800289c:	2200      	movs	r2, #0
 800289e:	4618      	mov	r0, r3
 80028a0:	f7fe fc16 	bl	80010d0 <csp_queue_enqueue>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00b      	beq.n	80028c2 <csp_promisc_add+0x56>
				csp_dbg_conn_ovf++;
 80028aa:	4b09      	ldr	r3, [pc, #36]	@ (80028d0 <csp_promisc_add+0x64>)
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	3301      	adds	r3, #1
 80028b0:	b2da      	uxtb	r2, r3
 80028b2:	4b07      	ldr	r3, [pc, #28]	@ (80028d0 <csp_promisc_add+0x64>)
 80028b4:	701a      	strb	r2, [r3, #0]
				csp_buffer_free(packet_copy);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7fe fd6f 	bl	800139c <csp_buffer_free>
 80028be:	e000      	b.n	80028c2 <csp_promisc_add+0x56>
		return;
 80028c0:	bf00      	nop
			}
		}
	}
}
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	20000500 	.word	0x20000500
 80028cc:	200004fc 	.word	0x200004fc
 80028d0:	20000268 	.word	0x20000268

080028d4 <csp_qfifo_init>:

static csp_static_queue_t qfifo_queue __attribute__((section(".noinit")));
static csp_queue_handle_t qfifo_queue_handle __attribute__((section(".noinit")));
char qfifo_queue_buffer[sizeof(csp_qfifo_t) * CSP_QFIFO_LEN] __attribute__((section(".noinit")));

void csp_qfifo_init(void) {
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
	qfifo_queue_handle = csp_queue_create_static(CSP_QFIFO_LEN, sizeof(csp_qfifo_t), qfifo_queue_buffer, &qfifo_queue);
 80028d8:	4b05      	ldr	r3, [pc, #20]	@ (80028f0 <csp_qfifo_init+0x1c>)
 80028da:	4a06      	ldr	r2, [pc, #24]	@ (80028f4 <csp_qfifo_init+0x20>)
 80028dc:	2108      	movs	r1, #8
 80028de:	200a      	movs	r0, #10
 80028e0:	f7fe fbe2 	bl	80010a8 <csp_queue_create_static>
 80028e4:	4603      	mov	r3, r0
 80028e6:	4a04      	ldr	r2, [pc, #16]	@ (80028f8 <csp_qfifo_init+0x24>)
 80028e8:	6013      	str	r3, [r2, #0]
}
 80028ea:	bf00      	nop
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	2000fdac 	.word	0x2000fdac
 80028f4:	2000fe00 	.word	0x2000fe00
 80028f8:	2000fdfc 	.word	0x2000fdfc

080028fc <csp_qfifo_read>:

int csp_qfifo_read(csp_qfifo_t * input) {
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]

	if (csp_queue_dequeue(qfifo_queue_handle, input, FIFO_TIMEOUT) != CSP_QUEUE_OK)
 8002904:	4b09      	ldr	r3, [pc, #36]	@ (800292c <csp_qfifo_read+0x30>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f04f 32ff 	mov.w	r2, #4294967295
 800290c:	6879      	ldr	r1, [r7, #4]
 800290e:	4618      	mov	r0, r3
 8002910:	f7fe fc0f 	bl	8001132 <csp_queue_dequeue>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d002      	beq.n	8002920 <csp_qfifo_read+0x24>
		return CSP_ERR_TIMEDOUT;
 800291a:	f06f 0302 	mvn.w	r3, #2
 800291e:	e000      	b.n	8002922 <csp_qfifo_read+0x26>

	return CSP_ERR_NONE;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	2000fdfc 	.word	0x2000fdfc

08002930 <csp_qfifo_write>:

void csp_qfifo_write(csp_packet_t * packet, csp_iface_t * iface, void * pxTaskWoken) {
 8002930:	b580      	push	{r7, lr}
 8002932:	b088      	sub	sp, #32
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]

	int result;

	if (packet == NULL) {
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d103      	bne.n	800294a <csp_qfifo_write+0x1a>
		csp_dbg_errno = CSP_DBG_ERR_INVALID_POINTER;
 8002942:	4b25      	ldr	r3, [pc, #148]	@ (80029d8 <csp_qfifo_write+0xa8>)
 8002944:	220b      	movs	r2, #11
 8002946:	701a      	strb	r2, [r3, #0]
		return;
 8002948:	e042      	b.n	80029d0 <csp_qfifo_write+0xa0>
	}

	if (iface == NULL) {
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d10d      	bne.n	800296c <csp_qfifo_write+0x3c>
		csp_dbg_errno = CSP_DBG_ERR_INVALID_POINTER;
 8002950:	4b21      	ldr	r3, [pc, #132]	@ (80029d8 <csp_qfifo_write+0xa8>)
 8002952:	220b      	movs	r2, #11
 8002954:	701a      	strb	r2, [r3, #0]
		if (pxTaskWoken == NULL)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d103      	bne.n	8002964 <csp_qfifo_write+0x34>
			csp_buffer_free(packet);
 800295c:	68f8      	ldr	r0, [r7, #12]
 800295e:	f7fe fd1d 	bl	800139c <csp_buffer_free>
		else
			csp_buffer_free_isr(packet);
		return;
 8002962:	e035      	b.n	80029d0 <csp_qfifo_write+0xa0>
			csp_buffer_free_isr(packet);
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f7fe fcd5 	bl	8001314 <csp_buffer_free_isr>
		return;
 800296a:	e031      	b.n	80029d0 <csp_qfifo_write+0xa0>
	}

	csp_qfifo_t queue_element;
	queue_element.iface = iface;
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	617b      	str	r3, [r7, #20]
	queue_element.packet = packet;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	61bb      	str	r3, [r7, #24]

	if (pxTaskWoken == NULL)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d109      	bne.n	800298e <csp_qfifo_write+0x5e>
		result = csp_queue_enqueue(qfifo_queue_handle, &queue_element, 1);
 800297a:	4b18      	ldr	r3, [pc, #96]	@ (80029dc <csp_qfifo_write+0xac>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f107 0114 	add.w	r1, r7, #20
 8002982:	2201      	movs	r2, #1
 8002984:	4618      	mov	r0, r3
 8002986:	f7fe fba3 	bl	80010d0 <csp_queue_enqueue>
 800298a:	61f8      	str	r0, [r7, #28]
 800298c:	e008      	b.n	80029a0 <csp_qfifo_write+0x70>
	else
		result = csp_queue_enqueue_isr(qfifo_queue_handle, &queue_element, pxTaskWoken);
 800298e:	4b13      	ldr	r3, [pc, #76]	@ (80029dc <csp_qfifo_write+0xac>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f107 0114 	add.w	r1, r7, #20
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	4618      	mov	r0, r3
 800299a:	f7fe fbb3 	bl	8001104 <csp_queue_enqueue_isr>
 800299e:	61f8      	str	r0, [r7, #28]

	if (result != CSP_QUEUE_OK) {
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d014      	beq.n	80029d0 <csp_qfifo_write+0xa0>
		csp_dbg_conn_ovf++;
 80029a6:	4b0e      	ldr	r3, [pc, #56]	@ (80029e0 <csp_qfifo_write+0xb0>)
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	3301      	adds	r3, #1
 80029ac:	b2da      	uxtb	r2, r3
 80029ae:	4b0c      	ldr	r3, [pc, #48]	@ (80029e0 <csp_qfifo_write+0xb0>)
 80029b0:	701a      	strb	r2, [r3, #0]
		iface->drop++;
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029b6:	1c5a      	adds	r2, r3, #1
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	629a      	str	r2, [r3, #40]	@ 0x28
		if (pxTaskWoken == NULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d103      	bne.n	80029ca <csp_qfifo_write+0x9a>
			csp_buffer_free(packet);
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f7fe fcea 	bl	800139c <csp_buffer_free>
 80029c8:	e002      	b.n	80029d0 <csp_qfifo_write+0xa0>
		else
			csp_buffer_free_isr(packet);
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f7fe fca2 	bl	8001314 <csp_buffer_free_isr>
	}
}
 80029d0:	3720      	adds	r7, #32
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	20000266 	.word	0x20000266
 80029dc:	2000fdfc 	.word	0x2000fdfc
 80029e0:	20000268 	.word	0x20000268

080029e4 <csp_route_check_options>:
 * Check supported packet options
 * @param iface pointer to incoming interface
 * @param packet pointer to packet
 * @return CSP_ERR_NONE is all options are supported, CSP_ERR_NOTSUP if not
 */
static int csp_route_check_options(csp_iface_t * iface, csp_packet_t * packet) {
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]


#if (CSP_USE_HMAC == 0)
	/* Drop HMAC packets */
	if (packet->id.flags & CSP_FHMAC) {
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	7ddb      	ldrb	r3, [r3, #23]
 80029f2:	f003 0308 	and.w	r3, r3, #8
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00a      	beq.n	8002a10 <csp_route_check_options+0x2c>
		csp_dbg_errno = CSP_DBG_ERR_UNSUPPORTED;
 80029fa:	4b11      	ldr	r3, [pc, #68]	@ (8002a40 <csp_route_check_options+0x5c>)
 80029fc:	2207      	movs	r2, #7
 80029fe:	701a      	strb	r2, [r3, #0]
		iface->autherr++;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a04:	1c5a      	adds	r2, r3, #1
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	62da      	str	r2, [r3, #44]	@ 0x2c
		return CSP_ERR_NOTSUP;
 8002a0a:	f06f 0304 	mvn.w	r3, #4
 8002a0e:	e011      	b.n	8002a34 <csp_route_check_options+0x50>
	}
#endif

#if (CSP_USE_RDP == 0)
	/* Drop RDP packets */
	if (packet->id.flags & CSP_FRDP) {
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	7ddb      	ldrb	r3, [r3, #23]
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00a      	beq.n	8002a32 <csp_route_check_options+0x4e>
		csp_dbg_errno = CSP_DBG_ERR_UNSUPPORTED;
 8002a1c:	4b08      	ldr	r3, [pc, #32]	@ (8002a40 <csp_route_check_options+0x5c>)
 8002a1e:	2207      	movs	r2, #7
 8002a20:	701a      	strb	r2, [r3, #0]
		iface->rx_error++;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a26:	1c5a      	adds	r2, r3, #1
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	625a      	str	r2, [r3, #36]	@ 0x24
		return CSP_ERR_NOTSUP;
 8002a2c:	f06f 0304 	mvn.w	r3, #4
 8002a30:	e000      	b.n	8002a34 <csp_route_check_options+0x50>
	}
#endif
	return CSP_ERR_NONE;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	20000266 	.word	0x20000266

08002a44 <csp_route_security_check>:
 * @param security_opts either socket_opts or conn_opts
 * @param iface pointer to incoming interface
 * @param packet pointer to packet
 * @return #CSP_ERR_NONE on success, otherwise an error code.
 */
static int csp_route_security_check(uint32_t security_opts, csp_iface_t * iface, csp_packet_t * packet) {
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]


	/* CRC32 verified packet */
	if (packet->id.flags & CSP_FCRC32) {
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	7ddb      	ldrb	r3, [r3, #23]
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00d      	beq.n	8002a78 <csp_route_security_check+0x34>
		/* Verify CRC32 (does not include header for backwards compatability with csp1.x) */
		if (csp_crc32_verify(packet) != CSP_ERR_NONE) {
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f7fe ffd8 	bl	8001a12 <csp_crc32_verify>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d014      	beq.n	8002a92 <csp_route_security_check+0x4e>
			iface->rx_error++;
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6c:	1c5a      	adds	r2, r3, #1
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	625a      	str	r2, [r3, #36]	@ 0x24
			return CSP_ERR_CRC32;
 8002a72:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8002a76:	e00d      	b.n	8002a94 <csp_route_security_check+0x50>
		}
	} else if (security_opts & CSP_SO_CRC32REQ) {
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d007      	beq.n	8002a92 <csp_route_security_check+0x4e>
		iface->rx_error++;
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a86:	1c5a      	adds	r2, r3, #1
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	625a      	str	r2, [r3, #36]	@ 0x24
		return CSP_ERR_CRC32;
 8002a8c:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8002a90:	e000      	b.n	8002a94 <csp_route_security_check+0x50>
			return CSP_ERR_INVAL;
		}
	}
#endif

	return CSP_ERR_NONE;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3710      	adds	r7, #16
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <csp_route_work>:
	csp_print_packet("INP: S %u, D %u, Dp %u, Sp %u, Pr %u, Fl 0x%02X, Sz %" PRIu16 " VIA: %s\n",
				   packet->id.src, packet->id.dst, packet->id.dport,
				   packet->id.sport, packet->id.pri, packet->id.flags, packet->length, iface->name);
}

int csp_route_work(void) {
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b08a      	sub	sp, #40	@ 0x28
 8002aa0:	af00      	add	r7, sp, #0
	/* Check connection timeouts (currently only for RDP) */
	csp_conn_check_timeouts();
#endif

	/* Get next packet to route */
	if (csp_qfifo_read(&input) != CSP_ERR_NONE) {
 8002aa2:	f107 0310 	add.w	r3, r7, #16
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7ff ff28 	bl	80028fc <csp_qfifo_read>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d002      	beq.n	8002ab8 <csp_route_work+0x1c>
		return CSP_ERR_TIMEDOUT;
 8002ab2:	f06f 0302 	mvn.w	r3, #2
 8002ab6:	e194      	b.n	8002de2 <csp_route_work+0x346>
	}

	packet = input.packet;
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	60fb      	str	r3, [r7, #12]
	if (packet == NULL) {
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d102      	bne.n	8002ac8 <csp_route_work+0x2c>
		return CSP_ERR_TIMEDOUT;
 8002ac2:	f06f 0302 	mvn.w	r3, #2
 8002ac6:	e18c      	b.n	8002de2 <csp_route_work+0x346>
	}

	csp_input_hook(input.iface, packet);
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	4611      	mov	r1, r2
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7fe fb7c 	bl	80011cc <csp_input_hook>

	/* Here there be promiscuous mode */
#if (CSP_USE_PROMISC)
	csp_promisc_add(packet);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff fec8 	bl	800286c <csp_promisc_add>
#endif

	/* Count the message */
	input.iface->rx++;
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	69da      	ldr	r2, [r3, #28]
 8002ae0:	3201      	adds	r2, #1
 8002ae2:	61da      	str	r2, [r3, #28]
	input.iface->rxbytes += packet->length;
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	8a9b      	ldrh	r3, [r3, #20]
 8002aec:	4619      	mov	r1, r3
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	440a      	add	r2, r1
 8002af2:	639a      	str	r2, [r3, #56]	@ 0x38

	/* The packet is to me, if the address matches that of the incoming interface,
	 * or the address matches the broadcast address of the incoming interface */
	int is_to_me = ((input.iface->addr == packet->id.dst) || (csp_id_is_broadcast(packet->id.dst, input.iface->netmask)));
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	881a      	ldrh	r2, [r3, #0]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	8b5b      	ldrh	r3, [r3, #26]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d00a      	beq.n	8002b16 <csp_route_work+0x7a>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	8b5a      	ldrh	r2, [r3, #26]
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	885b      	ldrh	r3, [r3, #2]
 8002b08:	4619      	mov	r1, r3
 8002b0a:	4610      	mov	r0, r2
 8002b0c:	f7ff fa70 	bl	8001ff0 <csp_id_is_broadcast>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <csp_route_work+0x7e>
 8002b16:	2301      	movs	r3, #1
 8002b18:	e000      	b.n	8002b1c <csp_route_work+0x80>
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	627b      	str	r3, [r7, #36]	@ 0x24

	/* Deduplication */
	if ((csp_conf.dedup == CSP_DEDUP_ALL) ||
 8002b1e:	4b9c      	ldr	r3, [pc, #624]	@ (8002d90 <csp_route_work+0x2f4>)
 8002b20:	7d1b      	ldrb	r3, [r3, #20]
 8002b22:	2b03      	cmp	r3, #3
 8002b24:	d00d      	beq.n	8002b42 <csp_route_work+0xa6>
 8002b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d003      	beq.n	8002b34 <csp_route_work+0x98>
		((is_to_me) && (csp_conf.dedup == CSP_DEDUP_INCOMING)) ||
 8002b2c:	4b98      	ldr	r3, [pc, #608]	@ (8002d90 <csp_route_work+0x2f4>)
 8002b2e:	7d1b      	ldrb	r3, [r3, #20]
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d006      	beq.n	8002b42 <csp_route_work+0xa6>
 8002b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d114      	bne.n	8002b64 <csp_route_work+0xc8>
		((!is_to_me) && (csp_conf.dedup == CSP_DEDUP_FWD))) {
 8002b3a:	4b95      	ldr	r3, [pc, #596]	@ (8002d90 <csp_route_work+0x2f4>)
 8002b3c:	7d1b      	ldrb	r3, [r3, #20]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d110      	bne.n	8002b64 <csp_route_work+0xc8>
		if (csp_dedup_is_duplicate(packet)) {
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7fe ffcb 	bl	8001ae0 <csp_dedup_is_duplicate>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d009      	beq.n	8002b64 <csp_route_work+0xc8>
			/* Discard packet */
			input.iface->drop++;
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b54:	3201      	adds	r2, #1
 8002b56:	629a      	str	r2, [r3, #40]	@ 0x28
			csp_buffer_free(packet);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7fe fc1e 	bl	800139c <csp_buffer_free>
			return CSP_ERR_NONE;
 8002b60:	2300      	movs	r3, #0
 8002b62:	e13e      	b.n	8002de2 <csp_route_work+0x346>
		}
	}

	/* If the message is not to me, route the message to the correct interface */
	if (!is_to_me) {
 8002b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d12b      	bne.n	8002bc2 <csp_route_work+0x126>

		/* Find the destination interface */
		csp_route_t * route = csp_rtable_find_route(packet->id.dst);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	8b5b      	ldrh	r3, [r3, #26]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f000 f97c 	bl	8002e6c <csp_rtable_find_route>
 8002b74:	61b8      	str	r0, [r7, #24]

		/* If the message resolves to the input interface, don't loop it back out */
		if ((route == NULL) || ((route->iface == input.iface) && (input.iface->split_horizon_off == 0))) {
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d008      	beq.n	8002b8e <csp_route_work+0xf2>
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d109      	bne.n	8002b9a <csp_route_work+0xfe>
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	7d9b      	ldrb	r3, [r3, #22]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d105      	bne.n	8002b9a <csp_route_work+0xfe>
			csp_buffer_free(packet);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7fe fc03 	bl	800139c <csp_buffer_free>
			return CSP_ERR_NONE;
 8002b96:	2300      	movs	r3, #0
 8002b98:	e123      	b.n	8002de2 <csp_route_work+0x346>
		}

		/* Otherwise, actually send the message */
		if (csp_send_direct(packet->id, packet, 0) != CSP_ERR_NONE) {
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	f8d3 1016 	ldr.w	r1, [r3, #22]
 8002ba2:	4608      	mov	r0, r1
 8002ba4:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8002ba8:	4619      	mov	r1, r3
 8002baa:	2300      	movs	r3, #0
 8002bac:	f7ff fb58 	bl	8002260 <csp_send_direct>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <csp_route_work+0x122>
			csp_buffer_free(packet);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7fe fbef 	bl	800139c <csp_buffer_free>
		}

		/* Next message, please */
		return CSP_ERR_NONE;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	e10f      	b.n	8002de2 <csp_route_work+0x346>
	}

	/* Discard packets with unsupported options */
	if (csp_route_check_options(input.iface, packet) != CSP_ERR_NONE) {
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	4611      	mov	r1, r2
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff ff0b 	bl	80029e4 <csp_route_check_options>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d005      	beq.n	8002be0 <csp_route_work+0x144>
		csp_buffer_free(packet);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7fe fbe0 	bl	800139c <csp_buffer_free>
		return CSP_ERR_NONE;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	e100      	b.n	8002de2 <csp_route_work+0x346>
	}

	/**
	 * Callbacks 
	 */
	csp_callback_t callback = csp_port_get_callback(packet->id.dport);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	7f1b      	ldrb	r3, [r3, #28]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff fd8d 	bl	8002704 <csp_port_get_callback>
 8002bea:	6238      	str	r0, [r7, #32]
	if (callback) {
 8002bec:	6a3b      	ldr	r3, [r7, #32]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d014      	beq.n	8002c1c <csp_route_work+0x180>

		if (csp_route_security_check(CSP_SO_NONE, input.iface, packet) < 0) {
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	2000      	movs	r0, #0
 8002bfa:	f7ff ff23 	bl	8002a44 <csp_route_security_check>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	da05      	bge.n	8002c10 <csp_route_work+0x174>
			csp_buffer_free(packet);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7fe fbc8 	bl	800139c <csp_buffer_free>
			return CSP_ERR_NONE;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	e0e8      	b.n	8002de2 <csp_route_work+0x346>
		}

		callback(packet);
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	6a3b      	ldr	r3, [r7, #32]
 8002c14:	4610      	mov	r0, r2
 8002c16:	4798      	blx	r3
		return CSP_ERR_NONE;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	e0e2      	b.n	8002de2 <csp_route_work+0x346>
	/**
	 * Sockets 
	 */

	/* The message is to me, search for incoming socket */
	socket = csp_port_get_socket(packet->id.dport);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	7f1b      	ldrb	r3, [r3, #28]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff fd9f 	bl	8002764 <csp_port_get_socket>
 8002c26:	61f8      	str	r0, [r7, #28]

	/* If the socket is connection-less, deliver now */
	if (socket && (socket->opts & CSP_SO_CONN_LESS)) {
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d02e      	beq.n	8002c8c <csp_route_work+0x1f0>
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d028      	beq.n	8002c8c <csp_route_work+0x1f0>

		if (csp_route_security_check(socket->opts, input.iface, packet) < 0) {
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c3e:	6939      	ldr	r1, [r7, #16]
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7ff fefe 	bl	8002a44 <csp_route_security_check>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	da05      	bge.n	8002c5a <csp_route_work+0x1be>
			csp_buffer_free(packet);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7fe fba3 	bl	800139c <csp_buffer_free>
			return CSP_ERR_NONE;
 8002c56:	2300      	movs	r3, #0
 8002c58:	e0c3      	b.n	8002de2 <csp_route_work+0x346>
		}

		if (csp_queue_enqueue(socket->rx_queue, &packet, 0) != CSP_QUEUE_OK) {
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f107 010c 	add.w	r1, r7, #12
 8002c62:	2200      	movs	r2, #0
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7fe fa33 	bl	80010d0 <csp_queue_enqueue>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00b      	beq.n	8002c88 <csp_route_work+0x1ec>
			csp_dbg_conn_ovf++;
 8002c70:	4b48      	ldr	r3, [pc, #288]	@ (8002d94 <csp_route_work+0x2f8>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	3301      	adds	r3, #1
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	4b46      	ldr	r3, [pc, #280]	@ (8002d94 <csp_route_work+0x2f8>)
 8002c7a:	701a      	strb	r2, [r3, #0]
			csp_buffer_free(packet);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7fe fb8c 	bl	800139c <csp_buffer_free>
			return 0;
 8002c84:	2300      	movs	r3, #0
 8002c86:	e0ac      	b.n	8002de2 <csp_route_work+0x346>
		}
		
		return CSP_ERR_NONE;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	e0aa      	b.n	8002de2 <csp_route_work+0x346>
	}

	/* Search for an existing connection */
	conn = csp_conn_find_existing(&packet->id);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	3316      	adds	r3, #22
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7fe fc63 	bl	800155c <csp_conn_find_existing>
 8002c96:	4603      	mov	r3, r0
 8002c98:	60bb      	str	r3, [r7, #8]

	/* If this is an incoming packet on a new connection */
	if (conn == NULL) {
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d150      	bne.n	8002d42 <csp_route_work+0x2a6>

		/* Reject packet if no matching socket is found */
		if (!socket) {
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d105      	bne.n	8002cb2 <csp_route_work+0x216>
			csp_buffer_free(packet);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7fe fb77 	bl	800139c <csp_buffer_free>
			return CSP_ERR_NONE;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	e097      	b.n	8002de2 <csp_route_work+0x346>
		}

		/* Run security check on incoming packet */
		if (csp_route_security_check(socket->opts, input.iface, packet) < 0) {
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002cb6:	6939      	ldr	r1, [r7, #16]
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7ff fec2 	bl	8002a44 <csp_route_security_check>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	da05      	bge.n	8002cd2 <csp_route_work+0x236>
			csp_buffer_free(packet);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7fe fb67 	bl	800139c <csp_buffer_free>
			return CSP_ERR_NONE;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	e087      	b.n	8002de2 <csp_route_work+0x346>
		}

		/* New incoming connection accepted */
		csp_id_t idout;
		idout.pri = packet->id.pri;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	7d9b      	ldrb	r3, [r3, #22]
 8002cd6:	703b      	strb	r3, [r7, #0]
		idout.src = packet->id.dst;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8b5b      	ldrh	r3, [r3, #26]
 8002cdc:	807b      	strh	r3, [r7, #2]
		idout.dst = packet->id.src;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	8b1b      	ldrh	r3, [r3, #24]
 8002ce2:	80bb      	strh	r3, [r7, #4]
		idout.dport = packet->id.sport;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	7f5b      	ldrb	r3, [r3, #29]
 8002ce8:	71bb      	strb	r3, [r7, #6]
		idout.sport = packet->id.dport;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	7f1b      	ldrb	r3, [r3, #28]
 8002cee:	71fb      	strb	r3, [r7, #7]
		idout.flags = packet->id.flags;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	7ddb      	ldrb	r3, [r3, #23]
 8002cf4:	707b      	strb	r3, [r7, #1]

		/* Create connection */
		conn = csp_conn_new(packet->id, idout);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f8d3 2016 	ldr.w	r2, [r3, #22]
 8002cfc:	4610      	mov	r0, r2
 8002cfe:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8002d02:	4619      	mov	r1, r3
 8002d04:	463b      	mov	r3, r7
 8002d06:	cb0c      	ldmia	r3, {r2, r3}
 8002d08:	f7fe fd0e 	bl	8001728 <csp_conn_new>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	60bb      	str	r3, [r7, #8]

		if (!conn) {
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10b      	bne.n	8002d2e <csp_route_work+0x292>
			csp_dbg_conn_out++;
 8002d16:	4b20      	ldr	r3, [pc, #128]	@ (8002d98 <csp_route_work+0x2fc>)
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	b2da      	uxtb	r2, r3
 8002d1e:	4b1e      	ldr	r3, [pc, #120]	@ (8002d98 <csp_route_work+0x2fc>)
 8002d20:	701a      	strb	r2, [r3, #0]
			csp_buffer_free(packet);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7fe fb39 	bl	800139c <csp_buffer_free>
			return CSP_ERR_NONE;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	e059      	b.n	8002de2 <csp_route_work+0x346>
		}

		/* Store the socket queue and options */
		conn->dest_socket = socket;
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	69fa      	ldr	r2, [r7, #28]
 8002d32:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
		conn->opts = socket->opts;
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	69fa      	ldr	r2, [r7, #28]
 8002d3a:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 8002d3c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 8002d40:	e010      	b.n	8002d64 <csp_route_work+0x2c8>

		/* Packet to existing connection */
	} else {

		/* Run security check on incoming packet */
		if (csp_route_security_check(conn->opts, input.iface, packet) < 0) {
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002d48:	6939      	ldr	r1, [r7, #16]
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7ff fe79 	bl	8002a44 <csp_route_security_check>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	da05      	bge.n	8002d64 <csp_route_work+0x2c8>
			csp_buffer_free(packet);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7fe fb1e 	bl	800139c <csp_buffer_free>
			return CSP_ERR_NONE;
 8002d60:	2300      	movs	r3, #0
 8002d62:	e03e      	b.n	8002de2 <csp_route_work+0x346>
		return CSP_ERR_NONE;
	}
#endif

	/* Otherwise, enqueue directly */
	if (csp_conn_enqueue_packet(conn, packet) < 0) {
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	4611      	mov	r1, r2
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7fe fb96 	bl	800149c <csp_conn_enqueue_packet>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	da12      	bge.n	8002d9c <csp_route_work+0x300>
		csp_dbg_conn_ovf++;
 8002d76:	4b07      	ldr	r3, [pc, #28]	@ (8002d94 <csp_route_work+0x2f8>)
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	b2da      	uxtb	r2, r3
 8002d7e:	4b05      	ldr	r3, [pc, #20]	@ (8002d94 <csp_route_work+0x2f8>)
 8002d80:	701a      	strb	r2, [r3, #0]
		csp_buffer_free(packet);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7fe fb09 	bl	800139c <csp_buffer_free>
		return CSP_ERR_NONE;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	e029      	b.n	8002de2 <csp_route_work+0x346>
 8002d8e:	bf00      	nop
 8002d90:	20000000 	.word	0x20000000
 8002d94:	20000268 	.word	0x20000268
 8002d98:	20000267 	.word	0x20000267
	}

	/* Try to queue up the new connection pointer */
	if (conn->dest_socket != NULL) {
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d01c      	beq.n	8002de0 <csp_route_work+0x344>
		if (csp_queue_enqueue(conn->dest_socket->rx_queue, &conn, 0) != CSP_QUEUE_OK) {
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f107 0108 	add.w	r1, r7, #8
 8002db2:	2200      	movs	r2, #0
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7fe f98b 	bl	80010d0 <csp_queue_enqueue>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00b      	beq.n	8002dd8 <csp_route_work+0x33c>
			csp_dbg_conn_ovf++;
 8002dc0:	4b0a      	ldr	r3, [pc, #40]	@ (8002dec <csp_route_work+0x350>)
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	b2da      	uxtb	r2, r3
 8002dc8:	4b08      	ldr	r3, [pc, #32]	@ (8002dec <csp_route_work+0x350>)
 8002dca:	701a      	strb	r2, [r3, #0]
			csp_close(conn);
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fe fcd8 	bl	8001784 <csp_close>
			return CSP_ERR_NONE;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	e004      	b.n	8002de2 <csp_route_work+0x346>
		}

		/* Ensure that this connection will not be posted to this socket again */
		conn->dest_socket = NULL;
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	}

	return CSP_ERR_NONE;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3728      	adds	r7, #40	@ 0x28
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	20000268 	.word	0x20000268

08002df0 <csp_rtable_find_exact>:
/* Definition of routing table */
static csp_route_t rtable[CSP_RTABLE_SIZE] = {0};

static int rtable_inptr = 0;

static csp_route_t * csp_rtable_find_exact(uint16_t addr, uint16_t netmask) {
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	4603      	mov	r3, r0
 8002df8:	460a      	mov	r2, r1
 8002dfa:	80fb      	strh	r3, [r7, #6]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	80bb      	strh	r3, [r7, #4]

	/* Start search */
	for (int i = 0; i < rtable_inptr; i++) {
 8002e00:	2300      	movs	r3, #0
 8002e02:	60fb      	str	r3, [r7, #12]
 8002e04:	e021      	b.n	8002e4a <csp_rtable_find_exact+0x5a>
		if (rtable[i].address == addr && rtable[i].netmask == netmask) {
 8002e06:	4917      	ldr	r1, [pc, #92]	@ (8002e64 <csp_rtable_find_exact+0x74>)
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	4413      	add	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	440b      	add	r3, r1
 8002e14:	881b      	ldrh	r3, [r3, #0]
 8002e16:	88fa      	ldrh	r2, [r7, #6]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d113      	bne.n	8002e44 <csp_rtable_find_exact+0x54>
 8002e1c:	4911      	ldr	r1, [pc, #68]	@ (8002e64 <csp_rtable_find_exact+0x74>)
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	4613      	mov	r3, r2
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	4413      	add	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	440b      	add	r3, r1
 8002e2a:	3302      	adds	r3, #2
 8002e2c:	881b      	ldrh	r3, [r3, #0]
 8002e2e:	88ba      	ldrh	r2, [r7, #4]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d107      	bne.n	8002e44 <csp_rtable_find_exact+0x54>
			return &rtable[i];
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	4613      	mov	r3, r2
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	4413      	add	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4a09      	ldr	r2, [pc, #36]	@ (8002e64 <csp_rtable_find_exact+0x74>)
 8002e40:	4413      	add	r3, r2
 8002e42:	e008      	b.n	8002e56 <csp_rtable_find_exact+0x66>
	for (int i = 0; i < rtable_inptr; i++) {
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	3301      	adds	r3, #1
 8002e48:	60fb      	str	r3, [r7, #12]
 8002e4a:	4b07      	ldr	r3, [pc, #28]	@ (8002e68 <csp_rtable_find_exact+0x78>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	dbd8      	blt.n	8002e06 <csp_rtable_find_exact+0x16>
		}
	}

	return NULL;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3714      	adds	r7, #20
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	20000504 	.word	0x20000504
 8002e68:	2000057c 	.word	0x2000057c

08002e6c <csp_rtable_find_route>:

csp_route_t * csp_rtable_find_route(uint16_t addr) {
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b088      	sub	sp, #32
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	4603      	mov	r3, r0
 8002e74:	80fb      	strh	r3, [r7, #6]

	/* Remember best result */
	int best_result = -1;
 8002e76:	f04f 33ff 	mov.w	r3, #4294967295
 8002e7a:	61fb      	str	r3, [r7, #28]
	uint16_t best_result_mask = 0;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	837b      	strh	r3, [r7, #26]

	/* Start search */
	for (int i = 0; i < rtable_inptr; i++) {
 8002e80:	2300      	movs	r3, #0
 8002e82:	617b      	str	r3, [r7, #20]
 8002e84:	e043      	b.n	8002f0e <csp_rtable_find_route+0xa2>

		uint16_t hostbits = (1 << (csp_id_get_host_bits() - rtable[i].netmask)) - 1;
 8002e86:	f7ff f8a3 	bl	8001fd0 <csp_id_get_host_bits>
 8002e8a:	4601      	mov	r1, r0
 8002e8c:	482a      	ldr	r0, [pc, #168]	@ (8002f38 <csp_rtable_find_route+0xcc>)
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	4613      	mov	r3, r2
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	4413      	add	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4403      	add	r3, r0
 8002e9a:	3302      	adds	r3, #2
 8002e9c:	881b      	ldrh	r3, [r3, #0]
 8002e9e:	1acb      	subs	r3, r1, r3
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	827b      	strh	r3, [r7, #18]
		uint16_t netbits = ~hostbits;
 8002eac:	8a7b      	ldrh	r3, [r7, #18]
 8002eae:	43db      	mvns	r3, r3
 8002eb0:	823b      	strh	r3, [r7, #16]

		/* Match network addresses */
		uint16_t net_a = rtable[i].address & netbits;
 8002eb2:	4921      	ldr	r1, [pc, #132]	@ (8002f38 <csp_rtable_find_route+0xcc>)
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	4413      	add	r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	440b      	add	r3, r1
 8002ec0:	881a      	ldrh	r2, [r3, #0]
 8002ec2:	8a3b      	ldrh	r3, [r7, #16]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	81fb      	strh	r3, [r7, #14]
		uint16_t net_b = addr & netbits;
 8002ec8:	88fa      	ldrh	r2, [r7, #6]
 8002eca:	8a3b      	ldrh	r3, [r7, #16]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	81bb      	strh	r3, [r7, #12]

		/* We have a match */
		if (net_a == net_b) {
 8002ed0:	89fa      	ldrh	r2, [r7, #14]
 8002ed2:	89bb      	ldrh	r3, [r7, #12]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d117      	bne.n	8002f08 <csp_rtable_find_route+0x9c>
			if (rtable[i].netmask >= best_result_mask) {
 8002ed8:	4917      	ldr	r1, [pc, #92]	@ (8002f38 <csp_rtable_find_route+0xcc>)
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	4613      	mov	r3, r2
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	4413      	add	r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	440b      	add	r3, r1
 8002ee6:	3302      	adds	r3, #2
 8002ee8:	881b      	ldrh	r3, [r3, #0]
 8002eea:	8b7a      	ldrh	r2, [r7, #26]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d80b      	bhi.n	8002f08 <csp_rtable_find_route+0x9c>
				best_result = i;
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	61fb      	str	r3, [r7, #28]
				best_result_mask = rtable[i].netmask;
 8002ef4:	4910      	ldr	r1, [pc, #64]	@ (8002f38 <csp_rtable_find_route+0xcc>)
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	4413      	add	r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	440b      	add	r3, r1
 8002f02:	3302      	adds	r3, #2
 8002f04:	881b      	ldrh	r3, [r3, #0]
 8002f06:	837b      	strh	r3, [r7, #26]
	for (int i = 0; i < rtable_inptr; i++) {
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	617b      	str	r3, [r7, #20]
 8002f0e:	4b0b      	ldr	r3, [pc, #44]	@ (8002f3c <csp_rtable_find_route+0xd0>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	dbb6      	blt.n	8002e86 <csp_rtable_find_route+0x1a>
			}
		}
	}

	if (best_result > -1) {
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	db07      	blt.n	8002f2e <csp_rtable_find_route+0xc2>
		return &rtable[best_result];
 8002f1e:	69fa      	ldr	r2, [r7, #28]
 8002f20:	4613      	mov	r3, r2
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	4413      	add	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	4a03      	ldr	r2, [pc, #12]	@ (8002f38 <csp_rtable_find_route+0xcc>)
 8002f2a:	4413      	add	r3, r2
 8002f2c:	e000      	b.n	8002f30 <csp_rtable_find_route+0xc4>
	}

	return NULL;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3720      	adds	r7, #32
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	20000504 	.word	0x20000504
 8002f3c:	2000057c 	.word	0x2000057c

08002f40 <csp_rtable_set_internal>:

int csp_rtable_set_internal(uint16_t address, uint16_t netmask, csp_iface_t * ifc, uint16_t via) {
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60ba      	str	r2, [r7, #8]
 8002f48:	461a      	mov	r2, r3
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	81fb      	strh	r3, [r7, #14]
 8002f4e:	460b      	mov	r3, r1
 8002f50:	81bb      	strh	r3, [r7, #12]
 8002f52:	4613      	mov	r3, r2
 8002f54:	80fb      	strh	r3, [r7, #6]

	/* First see if the entry exists */
	csp_route_t * entry = csp_rtable_find_exact(address, netmask);
 8002f56:	89ba      	ldrh	r2, [r7, #12]
 8002f58:	89fb      	ldrh	r3, [r7, #14]
 8002f5a:	4611      	mov	r1, r2
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7ff ff47 	bl	8002df0 <csp_rtable_find_exact>
 8002f62:	6178      	str	r0, [r7, #20]

	/* If not, create a new one */
	if (!entry) {
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d112      	bne.n	8002f90 <csp_rtable_set_internal+0x50>
		entry = &rtable[rtable_inptr++];
 8002f6a:	4b12      	ldr	r3, [pc, #72]	@ (8002fb4 <csp_rtable_set_internal+0x74>)
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	1c53      	adds	r3, r2, #1
 8002f70:	4910      	ldr	r1, [pc, #64]	@ (8002fb4 <csp_rtable_set_internal+0x74>)
 8002f72:	600b      	str	r3, [r1, #0]
 8002f74:	4613      	mov	r3, r2
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	4413      	add	r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	4a0e      	ldr	r2, [pc, #56]	@ (8002fb8 <csp_rtable_set_internal+0x78>)
 8002f7e:	4413      	add	r3, r2
 8002f80:	617b      	str	r3, [r7, #20]
		if (rtable_inptr == CSP_RTABLE_SIZE)
 8002f82:	4b0c      	ldr	r3, [pc, #48]	@ (8002fb4 <csp_rtable_set_internal+0x74>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2b0a      	cmp	r3, #10
 8002f88:	d102      	bne.n	8002f90 <csp_rtable_set_internal+0x50>
			rtable_inptr = CSP_RTABLE_SIZE;
 8002f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8002fb4 <csp_rtable_set_internal+0x74>)
 8002f8c:	220a      	movs	r2, #10
 8002f8e:	601a      	str	r2, [r3, #0]
	}

	/* Fill in the data */
	entry->address = address;
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	89fa      	ldrh	r2, [r7, #14]
 8002f94:	801a      	strh	r2, [r3, #0]
	entry->netmask = netmask;
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	89ba      	ldrh	r2, [r7, #12]
 8002f9a:	805a      	strh	r2, [r3, #2]
	entry->iface = ifc;
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	609a      	str	r2, [r3, #8]
	entry->via = via;
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	88fa      	ldrh	r2, [r7, #6]
 8002fa6:	809a      	strh	r2, [r3, #4]

	return CSP_ERR_NONE;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3718      	adds	r7, #24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	2000057c 	.word	0x2000057c
 8002fb8:	20000504 	.word	0x20000504

08002fbc <csp_rtable_set>:

void csp_rtable_clear(void) {
	csp_rtable_free();
}

int csp_rtable_set(uint16_t address, int netmask, csp_iface_t * ifc, uint16_t via) {
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60b9      	str	r1, [r7, #8]
 8002fc4:	607a      	str	r2, [r7, #4]
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	4603      	mov	r3, r0
 8002fca:	81fb      	strh	r3, [r7, #14]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	81bb      	strh	r3, [r7, #12]
//address ở đây là địa chỉ đích của node hoặc mạng con mà bạn muốn thêm vào bảng định tuyến (routing table).
	if ((netmask < 0) || (netmask > (int)csp_id_get_host_bits())) {
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	db06      	blt.n	8002fe4 <csp_rtable_set+0x28>
 8002fd6:	f7fe fffb 	bl	8001fd0 <csp_id_get_host_bits>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	461a      	mov	r2, r3
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	dd03      	ble.n	8002fec <csp_rtable_set+0x30>
		netmask = csp_id_get_host_bits();
 8002fe4:	f7fe fff4 	bl	8001fd0 <csp_id_get_host_bits>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	60bb      	str	r3, [r7, #8]
	}

	/* Validates options */
	if ((ifc == NULL) || (netmask > (int)csp_id_get_host_bits())) {
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d006      	beq.n	8003000 <csp_rtable_set+0x44>
 8002ff2:	f7fe ffed 	bl	8001fd0 <csp_id_get_host_bits>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	dd05      	ble.n	800300c <csp_rtable_set+0x50>
		csp_dbg_errno = CSP_DBG_ERR_INVALID_RTABLE_ENTRY; 
 8003000:	4b08      	ldr	r3, [pc, #32]	@ (8003024 <csp_rtable_set+0x68>)
 8003002:	2206      	movs	r2, #6
 8003004:	701a      	strb	r2, [r3, #0]
		return CSP_ERR_INVAL;
 8003006:	f06f 0301 	mvn.w	r3, #1
 800300a:	e007      	b.n	800301c <csp_rtable_set+0x60>
	}

	return csp_rtable_set_internal(address, netmask, ifc, via);
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	b299      	uxth	r1, r3
 8003010:	89bb      	ldrh	r3, [r7, #12]
 8003012:	89f8      	ldrh	r0, [r7, #14]
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	f7ff ff93 	bl	8002f40 <csp_rtable_set_internal>
 800301a:	4603      	mov	r3, r0
}
 800301c:	4618      	mov	r0, r3
 800301e:	3710      	adds	r7, #16
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	20000266 	.word	0x20000266

08003028 <do_cmp_ident>:

void csp_cmp_set_memcpy(csp_memcpy_fnc_t fnc) {
	csp_cmp_memcpy_fnc = fnc;
}

static int do_cmp_ident(struct csp_cmp_message * cmp) {
 8003028:	b590      	push	{r4, r7, lr}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]

	/* Copy revision */
	strncpy(cmp->ident.revision, csp_conf.revision, CSP_CMP_IDENT_REV_LEN);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	3334      	adds	r3, #52	@ 0x34
 8003034:	4a20      	ldr	r2, [pc, #128]	@ (80030b8 <do_cmp_ident+0x90>)
 8003036:	68d1      	ldr	r1, [r2, #12]
 8003038:	2214      	movs	r2, #20
 800303a:	4618      	mov	r0, r3
 800303c:	f007 feaf 	bl	800ad9e <strncpy>
	cmp->ident.revision[CSP_CMP_IDENT_REV_LEN - 1] = '\0';
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

	/* Copy compilation date */
	strncpy(cmp->ident.date, __DATE__, CSP_CMP_IDENT_DATE_LEN);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	3348      	adds	r3, #72	@ 0x48
 800304c:	4a1b      	ldr	r2, [pc, #108]	@ (80030bc <do_cmp_ident+0x94>)
 800304e:	461c      	mov	r4, r3
 8003050:	4613      	mov	r3, r2
 8003052:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003054:	6020      	str	r0, [r4, #0]
 8003056:	6061      	str	r1, [r4, #4]
 8003058:	60a2      	str	r2, [r4, #8]
	cmp->ident.date[CSP_CMP_IDENT_DATE_LEN - 1] = '\0';
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53

	/* Copy compilation time */
	strncpy(cmp->ident.time, __TIME__, CSP_CMP_IDENT_TIME_LEN);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	3354      	adds	r3, #84	@ 0x54
 8003066:	4916      	ldr	r1, [pc, #88]	@ (80030c0 <do_cmp_ident+0x98>)
 8003068:	461a      	mov	r2, r3
 800306a:	460b      	mov	r3, r1
 800306c:	cb03      	ldmia	r3!, {r0, r1}
 800306e:	6010      	str	r0, [r2, #0]
 8003070:	6051      	str	r1, [r2, #4]
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	7213      	strb	r3, [r2, #8]
	cmp->ident.time[CSP_CMP_IDENT_TIME_LEN - 1] = '\0';
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

	/* Copy hostname */
	strncpy(cmp->ident.hostname, csp_conf.hostname, CSP_HOSTNAME_LEN);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	3302      	adds	r3, #2
 8003082:	4a0d      	ldr	r2, [pc, #52]	@ (80030b8 <do_cmp_ident+0x90>)
 8003084:	6851      	ldr	r1, [r2, #4]
 8003086:	2214      	movs	r2, #20
 8003088:	4618      	mov	r0, r3
 800308a:	f007 fe88 	bl	800ad9e <strncpy>
	cmp->ident.hostname[CSP_HOSTNAME_LEN - 1] = '\0';
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	755a      	strb	r2, [r3, #21]

	/* Copy model name */
	strncpy(cmp->ident.model, csp_conf.model, CSP_MODEL_LEN);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	3316      	adds	r3, #22
 8003098:	4a07      	ldr	r2, [pc, #28]	@ (80030b8 <do_cmp_ident+0x90>)
 800309a:	6891      	ldr	r1, [r2, #8]
 800309c:	221e      	movs	r2, #30
 800309e:	4618      	mov	r0, r3
 80030a0:	f007 fe7d 	bl	800ad9e <strncpy>
	cmp->ident.model[CSP_MODEL_LEN - 1] = '\0';
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

	return CSP_ERR_NONE;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd90      	pop	{r4, r7, pc}
 80030b6:	bf00      	nop
 80030b8:	20000000 	.word	0x20000000
 80030bc:	0800e564 	.word	0x0800e564
 80030c0:	0800e570 	.word	0x0800e570

080030c4 <do_cmp_route_set_v1>:

static int do_cmp_route_set_v1(struct csp_cmp_message * cmp) {
 80030c4:	b590      	push	{r4, r7, lr}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]

	csp_iface_t * ifc = csp_iflist_get_by_name(cmp->route_set_v1.interface);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	3304      	adds	r3, #4
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7fe ffeb 	bl	80020ac <csp_iflist_get_by_name>
 80030d6:	60f8      	str	r0, [r7, #12]
	if (ifc == NULL) {
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d102      	bne.n	80030e4 <do_cmp_route_set_v1+0x20>
		return CSP_ERR_INVAL;
 80030de:	f06f 0301 	mvn.w	r3, #1
 80030e2:	e013      	b.n	800310c <do_cmp_route_set_v1+0x48>
	}

	if (csp_rtable_set(cmp->route_set_v1.dest_node, csp_id_get_host_bits(), ifc, cmp->route_set_v1.next_hop_via) != CSP_ERR_NONE) {
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	789b      	ldrb	r3, [r3, #2]
 80030e8:	461c      	mov	r4, r3
 80030ea:	f7fe ff71 	bl	8001fd0 <csp_id_get_host_bits>
 80030ee:	4603      	mov	r3, r0
 80030f0:	4619      	mov	r1, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	78db      	ldrb	r3, [r3, #3]
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	4620      	mov	r0, r4
 80030fa:	f7ff ff5f 	bl	8002fbc <csp_rtable_set>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d002      	beq.n	800310a <do_cmp_route_set_v1+0x46>
		return CSP_ERR_INVAL;
 8003104:	f06f 0301 	mvn.w	r3, #1
 8003108:	e000      	b.n	800310c <do_cmp_route_set_v1+0x48>
	}

	return CSP_ERR_NONE;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3714      	adds	r7, #20
 8003110:	46bd      	mov	sp, r7
 8003112:	bd90      	pop	{r4, r7, pc}

08003114 <do_cmp_route_set_v2>:

static int do_cmp_route_set_v2(struct csp_cmp_message * cmp) {
 8003114:	b5b0      	push	{r4, r5, r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]

	csp_iface_t * ifc = csp_iflist_get_by_name(cmp->route_set_v2.interface);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	3308      	adds	r3, #8
 8003120:	4618      	mov	r0, r3
 8003122:	f7fe ffc3 	bl	80020ac <csp_iflist_get_by_name>
 8003126:	60f8      	str	r0, [r7, #12]
	if (ifc == NULL) {
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d102      	bne.n	8003134 <do_cmp_route_set_v2+0x20>
		return CSP_ERR_INVAL;
 800312e:	f06f 0301 	mvn.w	r3, #1
 8003132:	e022      	b.n	800317a <do_cmp_route_set_v2+0x66>
	}

	if (csp_rtable_set(csp_betoh16(cmp->route_set_v2.dest_node), csp_betoh16(cmp->route_set_v2.netmask), ifc, csp_betoh16(cmp->route_set_v2.next_hop_via)) != CSP_ERR_NONE) {
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	885b      	ldrh	r3, [r3, #2]
 8003138:	b29b      	uxth	r3, r3
 800313a:	4618      	mov	r0, r3
 800313c:	f7fe fe31 	bl	8001da2 <csp_betoh16>
 8003140:	4603      	mov	r3, r0
 8003142:	461c      	mov	r4, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	88db      	ldrh	r3, [r3, #6]
 8003148:	b29b      	uxth	r3, r3
 800314a:	4618      	mov	r0, r3
 800314c:	f7fe fe29 	bl	8001da2 <csp_betoh16>
 8003150:	4603      	mov	r3, r0
 8003152:	461d      	mov	r5, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	889b      	ldrh	r3, [r3, #4]
 8003158:	b29b      	uxth	r3, r3
 800315a:	4618      	mov	r0, r3
 800315c:	f7fe fe21 	bl	8001da2 <csp_betoh16>
 8003160:	4603      	mov	r3, r0
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	4629      	mov	r1, r5
 8003166:	4620      	mov	r0, r4
 8003168:	f7ff ff28 	bl	8002fbc <csp_rtable_set>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d002      	beq.n	8003178 <do_cmp_route_set_v2+0x64>
		return CSP_ERR_INVAL;
 8003172:	f06f 0301 	mvn.w	r3, #1
 8003176:	e000      	b.n	800317a <do_cmp_route_set_v2+0x66>
	}

	return CSP_ERR_NONE;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bdb0      	pop	{r4, r5, r7, pc}

08003182 <do_cmp_if_stats>:

static int do_cmp_if_stats(struct csp_cmp_message * cmp) {
 8003182:	b580      	push	{r7, lr}
 8003184:	b084      	sub	sp, #16
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]

	csp_iface_t * ifc = csp_iflist_get_by_name(cmp->if_stats.interface);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	3302      	adds	r3, #2
 800318e:	4618      	mov	r0, r3
 8003190:	f7fe ff8c 	bl	80020ac <csp_iflist_get_by_name>
 8003194:	60f8      	str	r0, [r7, #12]
	if (ifc == NULL)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d102      	bne.n	80031a2 <do_cmp_if_stats+0x20>
		return CSP_ERR_INVAL;
 800319c:	f06f 0301 	mvn.w	r3, #1
 80031a0:	e05a      	b.n	8003258 <do_cmp_if_stats+0xd6>

	cmp->if_stats.tx = csp_htobe32(ifc->tx);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7fe fe09 	bl	8001dbe <csp_htobe32>
 80031ac:	4602      	mov	r2, r0
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f8c3 200d 	str.w	r2, [r3, #13]
	cmp->if_stats.rx = csp_htobe32(ifc->rx);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	69db      	ldr	r3, [r3, #28]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7fe fe00 	bl	8001dbe <csp_htobe32>
 80031be:	4602      	mov	r2, r0
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f8c3 2011 	str.w	r2, [r3, #17]
	cmp->if_stats.tx_error = csp_htobe32(ifc->tx_error);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7fe fdf7 	bl	8001dbe <csp_htobe32>
 80031d0:	4602      	mov	r2, r0
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f8c3 2015 	str.w	r2, [r3, #21]
	cmp->if_stats.rx_error = csp_htobe32(ifc->rx_error);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031dc:	4618      	mov	r0, r3
 80031de:	f7fe fdee 	bl	8001dbe <csp_htobe32>
 80031e2:	4602      	mov	r2, r0
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f8c3 2019 	str.w	r2, [r3, #25]
	cmp->if_stats.drop = csp_htobe32(ifc->drop);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7fe fde5 	bl	8001dbe <csp_htobe32>
 80031f4:	4602      	mov	r2, r0
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f8c3 201d 	str.w	r2, [r3, #29]
	cmp->if_stats.autherr = csp_htobe32(ifc->autherr);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003200:	4618      	mov	r0, r3
 8003202:	f7fe fddc 	bl	8001dbe <csp_htobe32>
 8003206:	4602      	mov	r2, r0
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f8c3 2021 	str.w	r2, [r3, #33]	@ 0x21
	cmp->if_stats.frame = csp_htobe32(ifc->frame);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003212:	4618      	mov	r0, r3
 8003214:	f7fe fdd3 	bl	8001dbe <csp_htobe32>
 8003218:	4602      	mov	r2, r0
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f8c3 2025 	str.w	r2, [r3, #37]	@ 0x25
	cmp->if_stats.txbytes = csp_htobe32(ifc->txbytes);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003224:	4618      	mov	r0, r3
 8003226:	f7fe fdca 	bl	8001dbe <csp_htobe32>
 800322a:	4602      	mov	r2, r0
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f8c3 2029 	str.w	r2, [r3, #41]	@ 0x29
	cmp->if_stats.rxbytes = csp_htobe32(ifc->rxbytes);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003236:	4618      	mov	r0, r3
 8003238:	f7fe fdc1 	bl	8001dbe <csp_htobe32>
 800323c:	4602      	mov	r2, r0
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f8c3 202d 	str.w	r2, [r3, #45]	@ 0x2d
	cmp->if_stats.irq = csp_htobe32(ifc->irq);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003248:	4618      	mov	r0, r3
 800324a:	f7fe fdb8 	bl	8001dbe <csp_htobe32>
 800324e:	4602      	mov	r2, r0
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f8c3 2031 	str.w	r2, [r3, #49]	@ 0x31

	return CSP_ERR_NONE;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	3710      	adds	r7, #16
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <do_cmp_peek>:

static int do_cmp_peek(struct csp_cmp_message * cmp) {
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]

	cmp->peek.addr = csp_htobe32(cmp->peek.addr);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800326e:	4618      	mov	r0, r3
 8003270:	f7fe fda5 	bl	8001dbe <csp_htobe32>
 8003274:	4602      	mov	r2, r0
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f8c3 2002 	str.w	r2, [r3, #2]
	if (cmp->peek.len > CSP_CMP_PEEK_MAX_LEN)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	799b      	ldrb	r3, [r3, #6]
 8003280:	2bc8      	cmp	r3, #200	@ 0xc8
 8003282:	d902      	bls.n	800328a <do_cmp_peek+0x2a>
		return CSP_ERR_INVAL;
 8003284:	f06f 0301 	mvn.w	r3, #1
 8003288:	e00b      	b.n	80032a2 <do_cmp_peek+0x42>

	/* Dangerous, you better know what you are doing */
	csp_cmp_memcpy_fnc((csp_memptr_t)(uintptr_t)cmp->peek.data, (csp_memptr_t)(uintptr_t)cmp->peek.addr, cmp->peek.len);
 800328a:	4b08      	ldr	r3, [pc, #32]	@ (80032ac <do_cmp_peek+0x4c>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	1dd0      	adds	r0, r2, #7
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	f8d2 2002 	ldr.w	r2, [r2, #2]
 8003298:	4611      	mov	r1, r2
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	7992      	ldrb	r2, [r2, #6]
 800329e:	4798      	blx	r3

	return CSP_ERR_NONE;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	20000018 	.word	0x20000018

080032b0 <do_cmp_poke>:

static int do_cmp_poke(struct csp_cmp_message * cmp) {
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]

	cmp->poke.addr = csp_htobe32(cmp->poke.addr);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80032be:	4618      	mov	r0, r3
 80032c0:	f7fe fd7d 	bl	8001dbe <csp_htobe32>
 80032c4:	4602      	mov	r2, r0
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f8c3 2002 	str.w	r2, [r3, #2]
	if (cmp->poke.len > CSP_CMP_POKE_MAX_LEN)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	799b      	ldrb	r3, [r3, #6]
 80032d0:	2bc8      	cmp	r3, #200	@ 0xc8
 80032d2:	d902      	bls.n	80032da <do_cmp_poke+0x2a>
		return CSP_ERR_INVAL;
 80032d4:	f06f 0301 	mvn.w	r3, #1
 80032d8:	e00b      	b.n	80032f2 <do_cmp_poke+0x42>

	/* Extremely dangerous, you better know what you are doing */
	csp_cmp_memcpy_fnc((csp_memptr_t)(uintptr_t)cmp->poke.addr, (csp_memptr_t)(uintptr_t)cmp->poke.data, cmp->poke.len);
 80032da:	4b08      	ldr	r3, [pc, #32]	@ (80032fc <do_cmp_poke+0x4c>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	f8d2 2002 	ldr.w	r2, [r2, #2]
 80032e4:	4610      	mov	r0, r2
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	1dd1      	adds	r1, r2, #7
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	7992      	ldrb	r2, [r2, #6]
 80032ee:	4798      	blx	r3

	return CSP_ERR_NONE;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	20000018 	.word	0x20000018

08003300 <do_cmp_clock>:

static int do_cmp_clock(struct csp_cmp_message * cmp) {
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]

	csp_timestamp_t clock;
	clock.tv_sec = csp_betoh32(cmp->clock.tv_sec);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800330e:	4618      	mov	r0, r3
 8003310:	f7fe fd61 	bl	8001dd6 <csp_betoh32>
 8003314:	4603      	mov	r3, r0
 8003316:	60fb      	str	r3, [r7, #12]
	clock.tv_nsec = csp_betoh32(cmp->clock.tv_nsec);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f8d3 3006 	ldr.w	r3, [r3, #6]
 800331e:	4618      	mov	r0, r3
 8003320:	f7fe fd59 	bl	8001dd6 <csp_betoh32>
 8003324:	4603      	mov	r3, r0
 8003326:	613b      	str	r3, [r7, #16]

	int res = CSP_ERR_NONE;
 8003328:	2300      	movs	r3, #0
 800332a:	617b      	str	r3, [r7, #20]
	if (clock.tv_sec != 0) {
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00b      	beq.n	800334a <do_cmp_clock+0x4a>
		// set time
		res = csp_clock_set_time(&clock);
 8003332:	f107 030c 	add.w	r3, r7, #12
 8003336:	4618      	mov	r0, r3
 8003338:	f7fd feaa 	bl	8001090 <csp_clock_set_time>
 800333c:	6178      	str	r0, [r7, #20]
		if (res != CSP_ERR_NONE) {
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d002      	beq.n	800334a <do_cmp_clock+0x4a>
			csp_dbg_errno = CSP_DBG_ERR_CLOCK_SET_FAIL;
 8003344:	4b0e      	ldr	r3, [pc, #56]	@ (8003380 <do_cmp_clock+0x80>)
 8003346:	220c      	movs	r2, #12
 8003348:	701a      	strb	r2, [r3, #0]
		}
	}

	csp_clock_get_time(&clock);
 800334a:	f107 030c 	add.w	r3, r7, #12
 800334e:	4618      	mov	r0, r3
 8003350:	f7fd fe8e 	bl	8001070 <csp_clock_get_time>

	cmp->clock.tv_sec = csp_htobe32(clock.tv_sec);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	4618      	mov	r0, r3
 8003358:	f7fe fd31 	bl	8001dbe <csp_htobe32>
 800335c:	4602      	mov	r2, r0
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f8c3 2002 	str.w	r2, [r3, #2]
	cmp->clock.tv_nsec = csp_htobe32(clock.tv_nsec);
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	4618      	mov	r0, r3
 8003368:	f7fe fd29 	bl	8001dbe <csp_htobe32>
 800336c:	4602      	mov	r2, r0
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f8c3 2006 	str.w	r2, [r3, #6]

	return res;
 8003374:	697b      	ldr	r3, [r7, #20]
}
 8003376:	4618      	mov	r0, r3
 8003378:	3718      	adds	r7, #24
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	20000266 	.word	0x20000266

08003384 <csp_cmp_handler>:

/* CSP Management Protocol handler */
static int csp_cmp_handler(csp_packet_t * packet) {
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]

	int ret = CSP_ERR_INVAL;
 800338c:	f06f 0301 	mvn.w	r3, #1
 8003390:	60fb      	str	r3, [r7, #12]
	struct csp_cmp_message * cmp = (struct csp_cmp_message *)packet->data;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	332c      	adds	r3, #44	@ 0x2c
 8003396:	60bb      	str	r3, [r7, #8]

	/* Ignore everything but requests */
	if (cmp->type != CSP_CMP_REQUEST)
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <csp_cmp_handler+0x20>
		return ret;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	e04c      	b.n	800343e <csp_cmp_handler+0xba>

	switch (cmp->code) {
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	785b      	ldrb	r3, [r3, #1]
 80033a8:	3b01      	subs	r3, #1
 80033aa:	2b06      	cmp	r3, #6
 80033ac:	d83f      	bhi.n	800342e <csp_cmp_handler+0xaa>
 80033ae:	a201      	add	r2, pc, #4	@ (adr r2, 80033b4 <csp_cmp_handler+0x30>)
 80033b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b4:	080033d1 	.word	0x080033d1
 80033b8:	080033e1 	.word	0x080033e1
 80033bc:	08003401 	.word	0x08003401
 80033c0:	08003411 	.word	0x08003411
 80033c4:	0800341b 	.word	0x0800341b
 80033c8:	08003425 	.word	0x08003425
 80033cc:	080033f1 	.word	0x080033f1
		case CSP_CMP_IDENT:
			ret = do_cmp_ident(cmp);
 80033d0:	68b8      	ldr	r0, [r7, #8]
 80033d2:	f7ff fe29 	bl	8003028 <do_cmp_ident>
 80033d6:	60f8      	str	r0, [r7, #12]
			packet->length = CMP_SIZE(ident);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	225d      	movs	r2, #93	@ 0x5d
 80033dc:	829a      	strh	r2, [r3, #20]
			break;
 80033de:	e02a      	b.n	8003436 <csp_cmp_handler+0xb2>

		case CSP_CMP_ROUTE_SET_V1:
			ret = do_cmp_route_set_v1(cmp);
 80033e0:	68b8      	ldr	r0, [r7, #8]
 80033e2:	f7ff fe6f 	bl	80030c4 <do_cmp_route_set_v1>
 80033e6:	60f8      	str	r0, [r7, #12]
			packet->length = CMP_SIZE(route_set_v1);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	220f      	movs	r2, #15
 80033ec:	829a      	strh	r2, [r3, #20]
			break;
 80033ee:	e022      	b.n	8003436 <csp_cmp_handler+0xb2>

		case CSP_CMP_ROUTE_SET_V2:
			ret = do_cmp_route_set_v2(cmp);
 80033f0:	68b8      	ldr	r0, [r7, #8]
 80033f2:	f7ff fe8f 	bl	8003114 <do_cmp_route_set_v2>
 80033f6:	60f8      	str	r0, [r7, #12]
			packet->length = CMP_SIZE(route_set_v2);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2214      	movs	r2, #20
 80033fc:	829a      	strh	r2, [r3, #20]
			break;
 80033fe:	e01a      	b.n	8003436 <csp_cmp_handler+0xb2>

		case CSP_CMP_IF_STATS:
			ret = do_cmp_if_stats(cmp);
 8003400:	68b8      	ldr	r0, [r7, #8]
 8003402:	f7ff febe 	bl	8003182 <do_cmp_if_stats>
 8003406:	60f8      	str	r0, [r7, #12]
			packet->length = CMP_SIZE(if_stats);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2235      	movs	r2, #53	@ 0x35
 800340c:	829a      	strh	r2, [r3, #20]
			break;
 800340e:	e012      	b.n	8003436 <csp_cmp_handler+0xb2>

		case CSP_CMP_PEEK:
			ret = do_cmp_peek(cmp);
 8003410:	68b8      	ldr	r0, [r7, #8]
 8003412:	f7ff ff25 	bl	8003260 <do_cmp_peek>
 8003416:	60f8      	str	r0, [r7, #12]
			break;
 8003418:	e00d      	b.n	8003436 <csp_cmp_handler+0xb2>

		case CSP_CMP_POKE:
			ret = do_cmp_poke(cmp);
 800341a:	68b8      	ldr	r0, [r7, #8]
 800341c:	f7ff ff48 	bl	80032b0 <do_cmp_poke>
 8003420:	60f8      	str	r0, [r7, #12]
			break;
 8003422:	e008      	b.n	8003436 <csp_cmp_handler+0xb2>

		case CSP_CMP_CLOCK:
			ret = do_cmp_clock(cmp);
 8003424:	68b8      	ldr	r0, [r7, #8]
 8003426:	f7ff ff6b 	bl	8003300 <do_cmp_clock>
 800342a:	60f8      	str	r0, [r7, #12]
			break;
 800342c:	e003      	b.n	8003436 <csp_cmp_handler+0xb2>

		default:
			ret = CSP_ERR_INVAL;
 800342e:	f06f 0301 	mvn.w	r3, #1
 8003432:	60fb      	str	r3, [r7, #12]
			break;
 8003434:	bf00      	nop
	}

	cmp->type = CSP_CMP_REPLY;
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	22ff      	movs	r2, #255	@ 0xff
 800343a:	701a      	strb	r2, [r3, #0]

	return ret;
 800343c:	68fb      	ldr	r3, [r7, #12]
}
 800343e:	4618      	mov	r0, r3
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop

08003448 <csp_service_handler>:

void csp_service_handler(csp_packet_t * packet) {
 8003448:	b580      	push	{r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]

	switch (packet->id.dport) {
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	7f1b      	ldrb	r3, [r3, #28]
 8003454:	2b06      	cmp	r3, #6
 8003456:	d873      	bhi.n	8003540 <csp_service_handler+0xf8>
 8003458:	a201      	add	r2, pc, #4	@ (adr r2, 8003460 <csp_service_handler+0x18>)
 800345a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800345e:	bf00      	nop
 8003460:	0800347d 	.word	0x0800347d
 8003464:	08003549 	.word	0x08003549
 8003468:	08003491 	.word	0x08003491
 800346c:	080034af 	.word	0x080034af
 8003470:	080034d7 	.word	0x080034d7
 8003474:	080034f9 	.word	0x080034f9
 8003478:	0800351d 	.word	0x0800351d

		case CSP_CMP:
			/* Pass to CMP handler */
			if (csp_cmp_handler(packet) != CSP_ERR_NONE) {
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f7ff ff81 	bl	8003384 <csp_cmp_handler>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d061      	beq.n	800354c <csp_service_handler+0x104>
				csp_buffer_free(packet);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f7fd ff87 	bl	800139c <csp_buffer_free>
				return;
 800348e:	e069      	b.n	8003564 <csp_service_handler+0x11c>
		case CSP_PING:
			/* A ping means, just echo the packet, so no changes */
			break;

		case CSP_PS: {
			packet->length = csp_ps_hook(packet);
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f7fd fe7a 	bl	800118a <csp_ps_hook>
 8003496:	4603      	mov	r3, r0
 8003498:	b29a      	uxth	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	829a      	strh	r2, [r3, #20]
			if (packet->length == 0) {
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	8a9b      	ldrh	r3, [r3, #20]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d154      	bne.n	8003550 <csp_service_handler+0x108>
				csp_buffer_free(packet);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f7fd ff78 	bl	800139c <csp_buffer_free>
			}
			break;
 80034ac:	e050      	b.n	8003550 <csp_service_handler+0x108>
		}

		case CSP_MEMFREE: {

			uint32_t total = 0;
 80034ae:	2300      	movs	r3, #0
 80034b0:	617b      	str	r3, [r7, #20]
			total = csp_memfree_hook();
 80034b2:	f7fd fe63 	bl	800117c <csp_memfree_hook>
 80034b6:	4603      	mov	r3, r0
 80034b8:	617b      	str	r3, [r7, #20]
			
			total = csp_htobe32(total);
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	4618      	mov	r0, r3
 80034be:	f7fe fc7e 	bl	8001dbe <csp_htobe32>
 80034c2:	4603      	mov	r3, r0
 80034c4:	617b      	str	r3, [r7, #20]
			memcpy(packet->data, &total, sizeof(total));
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	332c      	adds	r3, #44	@ 0x2c
 80034ca:	697a      	ldr	r2, [r7, #20]
 80034cc:	601a      	str	r2, [r3, #0]
			packet->length = sizeof(total);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2204      	movs	r2, #4
 80034d2:	829a      	strh	r2, [r3, #20]

			break;
 80034d4:	e03d      	b.n	8003552 <csp_service_handler+0x10a>
		}

		case CSP_REBOOT: {
			uint32_t magic_word;
			memcpy(&magic_word, packet->data, sizeof(magic_word));
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	332c      	adds	r3, #44	@ 0x2c
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	613b      	str	r3, [r7, #16]

			magic_word = csp_betoh32(magic_word);
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7fe fc78 	bl	8001dd6 <csp_betoh32>
 80034e6:	4603      	mov	r3, r0
 80034e8:	613b      	str	r3, [r7, #16]

			/* If the magic word is valid, reboot */
			if (magic_word == CSP_REBOOT_MAGIC) {
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	4a1f      	ldr	r2, [pc, #124]	@ (800356c <csp_service_handler+0x124>)
 80034ee:	4293      	cmp	r3, r2
				
			} else if (magic_word == CSP_REBOOT_SHUTDOWN_MAGIC) {
				// csp_shutdown_hook();
			}

			csp_buffer_free(packet);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f7fd ff53 	bl	800139c <csp_buffer_free>
			return;
 80034f6:	e035      	b.n	8003564 <csp_service_handler+0x11c>
		}

		case CSP_BUF_FREE: {
			uint32_t size = csp_buffer_remaining();
 80034f8:	f7fd ffb2 	bl	8001460 <csp_buffer_remaining>
 80034fc:	4603      	mov	r3, r0
 80034fe:	60fb      	str	r3, [r7, #12]
			size = csp_htobe32(size);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	4618      	mov	r0, r3
 8003504:	f7fe fc5b 	bl	8001dbe <csp_htobe32>
 8003508:	4603      	mov	r3, r0
 800350a:	60fb      	str	r3, [r7, #12]
			memcpy(packet->data, &size, sizeof(size));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	332c      	adds	r3, #44	@ 0x2c
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	601a      	str	r2, [r3, #0]
			packet->length = sizeof(size);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2204      	movs	r2, #4
 8003518:	829a      	strh	r2, [r3, #20]
			break;
 800351a:	e01a      	b.n	8003552 <csp_service_handler+0x10a>
		}

		case CSP_UPTIME: {
			uint32_t time = csp_get_s();
 800351c:	f7fd fe48 	bl	80011b0 <csp_get_s>
 8003520:	4603      	mov	r3, r0
 8003522:	60bb      	str	r3, [r7, #8]
			time = csp_htobe32(time);
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	4618      	mov	r0, r3
 8003528:	f7fe fc49 	bl	8001dbe <csp_htobe32>
 800352c:	4603      	mov	r3, r0
 800352e:	60bb      	str	r3, [r7, #8]
			memcpy(packet->data, &time, sizeof(time));
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	332c      	adds	r3, #44	@ 0x2c
 8003534:	68ba      	ldr	r2, [r7, #8]
 8003536:	601a      	str	r2, [r3, #0]
			packet->length = sizeof(time);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2204      	movs	r2, #4
 800353c:	829a      	strh	r2, [r3, #20]
			break;
 800353e:	e008      	b.n	8003552 <csp_service_handler+0x10a>
		}

		default:
			csp_buffer_free(packet);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f7fd ff2b 	bl	800139c <csp_buffer_free>
			return;
 8003546:	e00d      	b.n	8003564 <csp_service_handler+0x11c>
			break;
 8003548:	bf00      	nop
 800354a:	e002      	b.n	8003552 <csp_service_handler+0x10a>
			break;
 800354c:	bf00      	nop
 800354e:	e000      	b.n	8003552 <csp_service_handler+0x10a>
			break;
 8003550:	bf00      	nop
	}

	if (packet != NULL) {
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d005      	beq.n	8003564 <csp_service_handler+0x11c>
		csp_sendto_reply(packet, packet, CSP_O_SAME);
 8003558:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800355c:	6879      	ldr	r1, [r7, #4]
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f7ff f8aa 	bl	80026b8 <csp_sendto_reply>
	}
}
 8003564:	3718      	adds	r7, #24
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	80078007 	.word	0x80078007

08003570 <csp_can1_tx>:
	}

	return CSP_ERR_NONE;
}

int csp_can1_tx(csp_iface_t * iface, uint16_t via, csp_packet_t * packet) {
 8003570:	b590      	push	{r4, r7, lr}
 8003572:	b08f      	sub	sp, #60	@ 0x3c
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	460b      	mov	r3, r1
 800357a:	607a      	str	r2, [r7, #4]
 800357c:	817b      	strh	r3, [r7, #10]

	/* Loopback */
	if (packet->id.dst == iface->addr) {
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	8b5a      	ldrh	r2, [r3, #26]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	881b      	ldrh	r3, [r3, #0]
 8003586:	429a      	cmp	r2, r3
 8003588:	d106      	bne.n	8003598 <csp_can1_tx+0x28>
		csp_qfifo_write(packet, iface, NULL);
 800358a:	2200      	movs	r2, #0
 800358c:	68f9      	ldr	r1, [r7, #12]
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f7ff f9ce 	bl	8002930 <csp_qfifo_write>
		return CSP_ERR_NONE;
 8003594:	2300      	movs	r3, #0
 8003596:	e0cd      	b.n	8003734 <csp_can1_tx+0x1c4>
	}

	csp_can_interface_data_t * ifdata = iface->interface_data;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Get an unique CFP id - this should be locked to prevent access from multiple tasks */
	const uint32_t ident = ifdata->cfp_packet_counter++;
 800359e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	1c59      	adds	r1, r3, #1
 80035a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035a6:	6011      	str	r1, [r2, #0]
 80035a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Figure out destination node based on routing entry */
	const uint8_t dest = (via != CSP_NO_VIA_ADDRESS) ? via : packet->id.dst;
 80035aa:	897b      	ldrh	r3, [r7, #10]
 80035ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d002      	beq.n	80035ba <csp_can1_tx+0x4a>
 80035b4:	897b      	ldrh	r3, [r7, #10]
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	e002      	b.n	80035c0 <csp_can1_tx+0x50>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	8b5b      	ldrh	r3, [r3, #26]
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

	uint32_t can_id = 0;
 80035c4:	2300      	movs	r3, #0
 80035c6:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t data_bytes = 0;
 80035c8:	2300      	movs	r3, #0
 80035ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

	/**
	 * CSP 1.x Frame Header:
	 * Data offset is always 6.
	 */
	can_id = (CFP_MAKE_SRC(packet->id.src) |
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	8b1b      	ldrh	r3, [r3, #24]
 80035d2:	061b      	lsls	r3, r3, #24
 80035d4:	f003 52f8 	and.w	r2, r3, #520093696	@ 0x1f000000
			  CFP_MAKE_DST(dest) |
 80035d8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80035dc:	04db      	lsls	r3, r3, #19
 80035de:	f403 0378 	and.w	r3, r3, #16252928	@ 0xf80000
	can_id = (CFP_MAKE_SRC(packet->id.src) |
 80035e2:	431a      	orrs	r2, r3
			  CFP_MAKE_ID(ident) |
 80035e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035ea:	431a      	orrs	r2, r3
			  CFP_MAKE_TYPE(CFP_BEGIN) |
			  CFP_MAKE_REMAIN((packet->length + CFP1_DATA_OFFSET - 1) / CAN_FRAME_SIZE));
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	8a9b      	ldrh	r3, [r3, #20]
 80035f0:	3305      	adds	r3, #5
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	da00      	bge.n	80035f8 <csp_can1_tx+0x88>
 80035f6:	3307      	adds	r3, #7
 80035f8:	10db      	asrs	r3, r3, #3
 80035fa:	029b      	lsls	r3, r3, #10
 80035fc:	f403 337f 	and.w	r3, r3, #261120	@ 0x3fc00
	can_id = (CFP_MAKE_SRC(packet->id.src) |
 8003600:	4313      	orrs	r3, r2
 8003602:	627b      	str	r3, [r7, #36]	@ 0x24
	 * 2 byte length field
	 * 2 byte data (optional)
	 */

	/* Copy CSP 1.x headers and data: Always 4 bytes */
	csp_id_prepend(packet);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f7fe fccd 	bl	8001fa4 <csp_id_prepend>
	memcpy(frame_buf + CFP1_CSP_HEADER_OFFSET, packet->frame_begin, CFP1_CSP_HEADER_SIZE);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	617b      	str	r3, [r7, #20]

	/* Copy length field, always 2 bytes */
	uint16_t csp_length_be = csp_htobe16(packet->length);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	8a9b      	ldrh	r3, [r3, #20]
 8003616:	4618      	mov	r0, r3
 8003618:	f7fe fbb5 	bl	8001d86 <csp_htobe16>
 800361c:	4603      	mov	r3, r0
 800361e:	827b      	strh	r3, [r7, #18]
	memcpy(frame_buf + CFP1_DATA_LEN_OFFSET, &csp_length_be, CFP1_DATA_LEN_SIZE);
 8003620:	f107 0314 	add.w	r3, r7, #20
 8003624:	3304      	adds	r3, #4
 8003626:	8a7a      	ldrh	r2, [r7, #18]
 8003628:	801a      	strh	r2, [r3, #0]

	/* Calculate number of data bytes. Max 2 bytes possible */
	data_bytes = (packet->length <= CFP1_DATA_SIZE_BEGIN) ? packet->length : CFP1_DATA_SIZE_BEGIN;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	8a9b      	ldrh	r3, [r3, #20]
 800362e:	2b02      	cmp	r3, #2
 8003630:	bf28      	it	cs
 8003632:	2302      	movcs	r3, #2
 8003634:	b29b      	uxth	r3, r3
 8003636:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	memcpy(frame_buf + CFP1_DATA_OFFSET, packet->data, data_bytes);
 800363a:	f107 0314 	add.w	r3, r7, #20
 800363e:	3306      	adds	r3, #6
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	f102 012c 	add.w	r1, r2, #44	@ 0x2c
 8003646:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800364a:	4618      	mov	r0, r3
 800364c:	f007 fc9f 	bl	800af8e <memcpy>

	/* Increment tx counter */
	uint16_t tx_count = data_bytes;
 8003650:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003654:	86fb      	strh	r3, [r7, #54]	@ 0x36

	const csp_can_driver_tx_t tx_func = ifdata->tx_func;
 8003656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	61fb      	str	r3, [r7, #28]

	/* Send first frame */
	if ((tx_func)(iface->driver_data, can_id, frame_buf, CFP1_DATA_OFFSET + data_bytes) != CSP_ERR_NONE) {
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	68d8      	ldr	r0, [r3, #12]
 8003660:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003664:	3306      	adds	r3, #6
 8003666:	b2db      	uxtb	r3, r3
 8003668:	f107 0214 	add.w	r2, r7, #20
 800366c:	69fc      	ldr	r4, [r7, #28]
 800366e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003670:	47a0      	blx	r4
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d054      	beq.n	8003722 <csp_can1_tx+0x1b2>
		iface->tx_error++;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	1c5a      	adds	r2, r3, #1
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	621a      	str	r2, [r3, #32]
		/* Does not free on return */
		return CSP_ERR_DRIVER;
 8003682:	f06f 030a 	mvn.w	r3, #10
 8003686:	e055      	b.n	8003734 <csp_can1_tx+0x1c4>
		 * CSP 1.x Frame Header:
		 * Data offset is always 6.
		 */

		/* Calculate frame data bytes */
		data_bytes = (packet->length - tx_count >= CAN_FRAME_SIZE) ? CAN_FRAME_SIZE : packet->length - tx_count;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	8a9b      	ldrh	r3, [r3, #20]
 800368c:	461a      	mov	r2, r3
 800368e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b08      	cmp	r3, #8
 8003694:	bfa8      	it	ge
 8003696:	2308      	movge	r3, #8
 8003698:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

		/* Prepare identifier */
		can_id = (CFP_MAKE_SRC(packet->id.src) |
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	8b1b      	ldrh	r3, [r3, #24]
 80036a0:	061b      	lsls	r3, r3, #24
 80036a2:	f003 52f8 	and.w	r2, r3, #520093696	@ 0x1f000000
				  CFP_MAKE_DST(dest) |
 80036a6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80036aa:	04db      	lsls	r3, r3, #19
 80036ac:	f403 0378 	and.w	r3, r3, #16252928	@ 0xf80000
		can_id = (CFP_MAKE_SRC(packet->id.src) |
 80036b0:	431a      	orrs	r2, r3
				  CFP_MAKE_ID(ident) |
 80036b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
				  CFP_MAKE_DST(dest) |
 80036b8:	431a      	orrs	r2, r3
				  CFP_MAKE_TYPE(CFP_MORE) |
				  CFP_MAKE_REMAIN((packet->length - tx_count - data_bytes + CAN_FRAME_SIZE - 1) / CAN_FRAME_SIZE));
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	8a9b      	ldrh	r3, [r3, #20]
 80036be:	4619      	mov	r1, r3
 80036c0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80036c2:	1ac9      	subs	r1, r1, r3
 80036c4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80036c8:	1acb      	subs	r3, r1, r3
 80036ca:	3307      	adds	r3, #7
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	da00      	bge.n	80036d2 <csp_can1_tx+0x162>
 80036d0:	3307      	adds	r3, #7
 80036d2:	10db      	asrs	r3, r3, #3
 80036d4:	029b      	lsls	r3, r3, #10
 80036d6:	f403 337f 	and.w	r3, r3, #261120	@ 0x3fc00
				  CFP_MAKE_TYPE(CFP_MORE) |
 80036da:	4313      	orrs	r3, r2
		can_id = (CFP_MAKE_SRC(packet->id.src) |
 80036dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036e0:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Increment tx counter */
		tx_count += data_bytes;
 80036e2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80036ea:	4413      	add	r3, r2
 80036ec:	86fb      	strh	r3, [r7, #54]	@ 0x36

		/* Send frame */
		if ((tx_func)(iface->driver_data, can_id, packet->data + tx_count - data_bytes, data_bytes) != CSP_ERR_NONE) {
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	68d8      	ldr	r0, [r3, #12]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 80036f8:	8ef9      	ldrh	r1, [r7, #54]	@ 0x36
 80036fa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80036fe:	1acb      	subs	r3, r1, r3
 8003700:	441a      	add	r2, r3
 8003702:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003706:	69fc      	ldr	r4, [r7, #28]
 8003708:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800370a:	47a0      	blx	r4
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d007      	beq.n	8003722 <csp_can1_tx+0x1b2>
			iface->tx_error++;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	1c5a      	adds	r2, r3, #1
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	621a      	str	r2, [r3, #32]
			/* Does not free on return */
			return CSP_ERR_DRIVER;
 800371c:	f06f 030a 	mvn.w	r3, #10
 8003720:	e008      	b.n	8003734 <csp_can1_tx+0x1c4>
	while (tx_count < packet->length) {
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	8a9b      	ldrh	r3, [r3, #20]
 8003726:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8003728:	429a      	cmp	r2, r3
 800372a:	d3ad      	bcc.n	8003688 <csp_can1_tx+0x118>
		}
	}

	csp_buffer_free(packet);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f7fd fe35 	bl	800139c <csp_buffer_free>

	return CSP_ERR_NONE;
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	373c      	adds	r7, #60	@ 0x3c
 8003738:	46bd      	mov	sp, r7
 800373a:	bd90      	pop	{r4, r7, pc}

0800373c <csp_can2_tx>:
	}

	return CSP_ERR_NONE;
}

int csp_can2_tx(csp_iface_t * iface, uint16_t via, csp_packet_t * packet) {
 800373c:	b590      	push	{r4, r7, lr}
 800373e:	b091      	sub	sp, #68	@ 0x44
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	460b      	mov	r3, r1
 8003746:	607a      	str	r2, [r7, #4]
 8003748:	817b      	strh	r3, [r7, #10]

	/* Loopback */
	if (packet->id.dst == iface->addr) {
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	8b5a      	ldrh	r2, [r3, #26]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	881b      	ldrh	r3, [r3, #0]
 8003752:	429a      	cmp	r2, r3
 8003754:	d106      	bne.n	8003764 <csp_can2_tx+0x28>
		csp_qfifo_write(packet, iface, NULL);
 8003756:	2200      	movs	r2, #0
 8003758:	68f9      	ldr	r1, [r7, #12]
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7ff f8e8 	bl	8002930 <csp_qfifo_write>
		return CSP_ERR_NONE;
 8003760:	2300      	movs	r3, #0
 8003762:	e0f0      	b.n	8003946 <csp_can2_tx+0x20a>
	}

	csp_can_interface_data_t * ifdata = iface->interface_data;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Setup counters */
	int sender_count = ifdata->cfp_packet_counter++;
 800376a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	1c59      	adds	r1, r3, #1
 8003770:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003772:	6011      	str	r1, [r2, #0]
 8003774:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int tx_count = 0;
 8003776:	2300      	movs	r3, #0
 8003778:	63fb      	str	r3, [r7, #60]	@ 0x3c

	uint32_t can_id = 0;
 800377a:	2300      	movs	r3, #0
 800377c:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint8_t frame_buf_inp = 0;
 800377e:	2300      	movs	r3, #0
 8003780:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	uint8_t frame_buf_avail = CAN_FRAME_SIZE;
 8003784:	2308      	movs	r3, #8
 8003786:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

	/* Pack mandatory fields of header */
	can_id = (((packet->id.pri & CFP2_PRIO_MASK) << CFP2_PRIO_OFFSET) |
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	7d9b      	ldrb	r3, [r3, #22]
 800378e:	06db      	lsls	r3, r3, #27
 8003790:	f003 52c0 	and.w	r2, r3, #402653184	@ 0x18000000
			  ((packet->id.dst & CFP2_DST_MASK) << CFP2_DST_OFFSET) |
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	8b5b      	ldrh	r3, [r3, #26]
 8003798:	0359      	lsls	r1, r3, #13
 800379a:	4b6d      	ldr	r3, [pc, #436]	@ (8003950 <csp_can2_tx+0x214>)
 800379c:	400b      	ands	r3, r1
	can_id = (((packet->id.pri & CFP2_PRIO_MASK) << CFP2_PRIO_OFFSET) |
 800379e:	431a      	orrs	r2, r3
			  ((iface->addr & CFP2_SENDER_MASK) << CFP2_SENDER_OFFSET) |
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	881b      	ldrh	r3, [r3, #0]
 80037a4:	01db      	lsls	r3, r3, #7
 80037a6:	f403 6378 	and.w	r3, r3, #3968	@ 0xf80
			  ((packet->id.dst & CFP2_DST_MASK) << CFP2_DST_OFFSET) |
 80037aa:	431a      	orrs	r2, r3
			  ((sender_count & CFP2_SC_MASK) << CFP2_SC_OFFSET) |
 80037ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ae:	015b      	lsls	r3, r3, #5
 80037b0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
			  ((iface->addr & CFP2_SENDER_MASK) << CFP2_SENDER_OFFSET) |
 80037b4:	4313      	orrs	r3, r2
			  ((sender_count & CFP2_SC_MASK) << CFP2_SC_OFFSET) |
 80037b6:	f043 0302 	orr.w	r3, r3, #2
	can_id = (((packet->id.pri & CFP2_PRIO_MASK) << CFP2_PRIO_OFFSET) |
 80037ba:	63bb      	str	r3, [r7, #56]	@ 0x38
			  ((1 & CFP2_BEGIN_MASK) << CFP2_BEGIN_OFFSET));

	/* Pack the rest of the CSP header in the first 32-bit of data */
    uint32_t frame_buf_mem[(CAN_FRAME_SIZE+sizeof(uint32_t)-1)/sizeof(uint32_t)];
    uint8_t *frame_buf = (uint8_t*)frame_buf_mem;
 80037bc:	f107 0314 	add.w	r3, r7, #20
 80037c0:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t * header_extension = (uint32_t *)frame_buf_mem;
 80037c2:	f107 0314 	add.w	r3, r7, #20
 80037c6:	623b      	str	r3, [r7, #32]

	*header_extension = (((packet->id.src & CFP2_SRC_MASK) << CFP2_SRC_OFFSET) |
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	8b1b      	ldrh	r3, [r3, #24]
 80037cc:	049a      	lsls	r2, r3, #18
						 ((packet->id.dport & CFP2_DPORT_MASK) << CFP2_DPORT_OFFSET) |
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	7f1b      	ldrb	r3, [r3, #28]
 80037d2:	031b      	lsls	r3, r3, #12
 80037d4:	f403 337c 	and.w	r3, r3, #258048	@ 0x3f000
	*header_extension = (((packet->id.src & CFP2_SRC_MASK) << CFP2_SRC_OFFSET) |
 80037d8:	431a      	orrs	r2, r3
						 ((packet->id.sport & CFP2_SPORT_MASK) << CFP2_SPORT_OFFSET) |
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	7f5b      	ldrb	r3, [r3, #29]
 80037de:	019b      	lsls	r3, r3, #6
 80037e0:	f403 637c 	and.w	r3, r3, #4032	@ 0xfc0
						 ((packet->id.dport & CFP2_DPORT_MASK) << CFP2_DPORT_OFFSET) |
 80037e4:	431a      	orrs	r2, r3
						 ((packet->id.flags & CFP2_FLAGS_MASK) << CFP2_FLAGS_OFFSET));
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	7ddb      	ldrb	r3, [r3, #23]
 80037ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
						 ((packet->id.sport & CFP2_SPORT_MASK) << CFP2_SPORT_OFFSET) |
 80037ee:	4313      	orrs	r3, r2
 80037f0:	461a      	mov	r2, r3
	*header_extension = (((packet->id.src & CFP2_SRC_MASK) << CFP2_SRC_OFFSET) |
 80037f2:	6a3b      	ldr	r3, [r7, #32]
 80037f4:	601a      	str	r2, [r3, #0]

	/* Convert to network byte order */
	*header_extension = csp_htobe32(*header_extension);
 80037f6:	6a3b      	ldr	r3, [r7, #32]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7fe fadf 	bl	8001dbe <csp_htobe32>
 8003800:	4602      	mov	r2, r0
 8003802:	6a3b      	ldr	r3, [r7, #32]
 8003804:	601a      	str	r2, [r3, #0]

	frame_buf_inp += 4;
 8003806:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800380a:	3304      	adds	r3, #4
 800380c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	frame_buf_avail -= 4;
 8003810:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003814:	3b04      	subs	r3, #4
 8003816:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

	/* Copy first bytes of data field (max 4) */
	int data_bytes = (packet->length >= 4) ? 4 : packet->length;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	8a9b      	ldrh	r3, [r3, #20]
 800381e:	2b04      	cmp	r3, #4
 8003820:	bf28      	it	cs
 8003822:	2304      	movcs	r3, #4
 8003824:	b29b      	uxth	r3, r3
 8003826:	61fb      	str	r3, [r7, #28]
	memcpy(frame_buf + frame_buf_inp, packet->data, data_bytes);
 8003828:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800382c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800382e:	18d0      	adds	r0, r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	332c      	adds	r3, #44	@ 0x2c
 8003834:	69fa      	ldr	r2, [r7, #28]
 8003836:	4619      	mov	r1, r3
 8003838:	f007 fba9 	bl	800af8e <memcpy>
	frame_buf_inp += data_bytes;
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	b2da      	uxtb	r2, r3
 8003840:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003844:	4413      	add	r3, r2
 8003846:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	tx_count = data_bytes;
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	63fb      	str	r3, [r7, #60]	@ 0x3c

	/* Check for end condition */
	if (tx_count == packet->length) {
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	8a9b      	ldrh	r3, [r3, #20]
 8003852:	461a      	mov	r2, r3
 8003854:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003856:	4293      	cmp	r3, r2
 8003858:	d103      	bne.n	8003862 <csp_can2_tx+0x126>
		can_id |= ((1 & CFP2_END_MASK) << CFP2_END_OFFSET);
 800385a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800385c:	f043 0301 	orr.w	r3, r3, #1
 8003860:	63bb      	str	r3, [r7, #56]	@ 0x38
	}

	/* Send first frame now */
	if ((ifdata->tx_func)(iface->driver_data, can_id, frame_buf, frame_buf_inp) != CSP_ERR_NONE) {
 8003862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003864:	685c      	ldr	r4, [r3, #4]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	68d8      	ldr	r0, [r3, #12]
 800386a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800386e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003870:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003872:	47a0      	blx	r4
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d007      	beq.n	800388a <csp_can2_tx+0x14e>
		iface->tx_error++;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	1c5a      	adds	r2, r3, #1
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	621a      	str	r2, [r3, #32]
		/* Does not free on return */
		return CSP_ERR_DRIVER;
 8003884:	f06f 030a 	mvn.w	r3, #10
 8003888:	e05d      	b.n	8003946 <csp_can2_tx+0x20a>
	}

	/* Send next fragments if not complete */
	int fragment_count = 1;
 800388a:	2301      	movs	r3, #1
 800388c:	637b      	str	r3, [r7, #52]	@ 0x34
	while (tx_count < packet->length) {
 800388e:	e050      	b.n	8003932 <csp_can2_tx+0x1f6>

		/* Pack mandatory fields of header */
		can_id = (((packet->id.pri & CFP2_PRIO_MASK) << CFP2_PRIO_OFFSET) |
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	7d9b      	ldrb	r3, [r3, #22]
 8003894:	06db      	lsls	r3, r3, #27
 8003896:	f003 52c0 	and.w	r2, r3, #402653184	@ 0x18000000
				  ((packet->id.dst & CFP2_DST_MASK) << CFP2_DST_OFFSET) |
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	8b5b      	ldrh	r3, [r3, #26]
 800389e:	0359      	lsls	r1, r3, #13
 80038a0:	4b2b      	ldr	r3, [pc, #172]	@ (8003950 <csp_can2_tx+0x214>)
 80038a2:	400b      	ands	r3, r1
		can_id = (((packet->id.pri & CFP2_PRIO_MASK) << CFP2_PRIO_OFFSET) |
 80038a4:	431a      	orrs	r2, r3
				  ((iface->addr & CFP2_SENDER_MASK) << CFP2_SENDER_OFFSET) |
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	881b      	ldrh	r3, [r3, #0]
 80038aa:	01db      	lsls	r3, r3, #7
 80038ac:	f403 6378 	and.w	r3, r3, #3968	@ 0xf80
				  ((packet->id.dst & CFP2_DST_MASK) << CFP2_DST_OFFSET) |
 80038b0:	431a      	orrs	r2, r3
				  ((sender_count & CFP2_SC_MASK) << CFP2_SC_OFFSET));
 80038b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038b4:	015b      	lsls	r3, r3, #5
 80038b6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
				  ((iface->addr & CFP2_SENDER_MASK) << CFP2_SENDER_OFFSET) |
 80038ba:	4313      	orrs	r3, r2
		can_id = (((packet->id.pri & CFP2_PRIO_MASK) << CFP2_PRIO_OFFSET) |
 80038bc:	63bb      	str	r3, [r7, #56]	@ 0x38

		/* Set and increment fragment count */
		can_id |= (fragment_count++ & CFP2_FC_MASK) << CFP2_FC_OFFSET;
 80038be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038c0:	1c5a      	adds	r2, r3, #1
 80038c2:	637a      	str	r2, [r7, #52]	@ 0x34
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	f003 031c 	and.w	r3, r3, #28
 80038ca:	461a      	mov	r2, r3
 80038cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038ce:	4313      	orrs	r3, r2
 80038d0:	63bb      	str	r3, [r7, #56]	@ 0x38

		/* Calculate frame data bytes */
		data_bytes = (packet->length - tx_count >= CAN_FRAME_SIZE) ? CAN_FRAME_SIZE : packet->length - tx_count;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	8a9b      	ldrh	r3, [r3, #20]
 80038d6:	461a      	mov	r2, r3
 80038d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	2b08      	cmp	r3, #8
 80038de:	bfa8      	it	ge
 80038e0:	2308      	movge	r3, #8
 80038e2:	61fb      	str	r3, [r7, #28]

		/* Check for end condition */
		if (tx_count + data_bytes == packet->length) {
 80038e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	4413      	add	r3, r2
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	8a92      	ldrh	r2, [r2, #20]
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d103      	bne.n	80038fa <csp_can2_tx+0x1be>
			can_id |= ((1 & CFP2_END_MASK) << CFP2_END_OFFSET);
 80038f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038f4:	f043 0301 	orr.w	r3, r3, #1
 80038f8:	63bb      	str	r3, [r7, #56]	@ 0x38
		}

		/* Send frame */
		if ((ifdata->tx_func)(iface->driver_data, can_id, packet->data + tx_count, data_bytes) != CSP_ERR_NONE) {
 80038fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038fc:	685c      	ldr	r4, [r3, #4]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	68d8      	ldr	r0, [r3, #12]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 8003908:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800390a:	441a      	add	r2, r3
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	b2db      	uxtb	r3, r3
 8003910:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003912:	47a0      	blx	r4
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d007      	beq.n	800392a <csp_can2_tx+0x1ee>
			iface->tx_error++;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	1c5a      	adds	r2, r3, #1
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	621a      	str	r2, [r3, #32]
			/* Does not free on return */
			return CSP_ERR_DRIVER;
 8003924:	f06f 030a 	mvn.w	r3, #10
 8003928:	e00d      	b.n	8003946 <csp_can2_tx+0x20a>
//			/* Does not free on return */
//			return CSP_ERR_DRIVER;
//		}

		/* Increment tx counter */
		tx_count += data_bytes;
 800392a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	4413      	add	r3, r2
 8003930:	63fb      	str	r3, [r7, #60]	@ 0x3c
	while (tx_count < packet->length) {
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	8a9b      	ldrh	r3, [r3, #20]
 8003936:	461a      	mov	r2, r3
 8003938:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800393a:	4293      	cmp	r3, r2
 800393c:	dba8      	blt.n	8003890 <csp_can2_tx+0x154>
	}

	csp_buffer_free(packet);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7fd fd2c 	bl	800139c <csp_buffer_free>

	return CSP_ERR_NONE;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3744      	adds	r7, #68	@ 0x44
 800394a:	46bd      	mov	sp, r7
 800394c:	bd90      	pop	{r4, r7, pc}
 800394e:	bf00      	nop
 8003950:	07ffe000 	.word	0x07ffe000

08003954 <csp_can_add_interface>:

int csp_can_add_interface(csp_iface_t * iface) {
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]

	if ((iface == NULL) || (iface->name == NULL) || (iface->interface_data == NULL)) {
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d007      	beq.n	8003972 <csp_can_add_interface+0x1e>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d003      	beq.n	8003972 <csp_can_add_interface+0x1e>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d102      	bne.n	8003978 <csp_can_add_interface+0x24>
		return CSP_ERR_INVAL;
 8003972:	f06f 0301 	mvn.w	r3, #1
 8003976:	e023      	b.n	80039c0 <csp_can_add_interface+0x6c>
	}

	csp_can_interface_data_t * ifdata = iface->interface_data;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	60fb      	str	r3, [r7, #12]
	if (ifdata->tx_func == NULL) {
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d102      	bne.n	800398c <csp_can_add_interface+0x38>
		return CSP_ERR_INVAL;
 8003986:	f06f 0301 	mvn.w	r3, #1
 800398a:	e019      	b.n	80039c0 <csp_can_add_interface+0x6c>

	/* We reserve 8 bytes of the data field, for CFP information:
	 * In reality we dont use as much, its between 3 and 6 depending
	 * on CFP format.
	 */
	iface->mtu = csp_buffer_data_size() - 8;
 800398c:	f7fd fd7d 	bl	800148a <csp_buffer_data_size>
 8003990:	4603      	mov	r3, r0
 8003992:	b29b      	uxth	r3, r3
 8003994:	3b08      	subs	r3, #8
 8003996:	b29a      	uxth	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	829a      	strh	r2, [r3, #20]

	ifdata->cfp_packet_counter = 0;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	601a      	str	r2, [r3, #0]

	if (csp_conf.version == 1) {
 80039a2:	4b09      	ldr	r3, [pc, #36]	@ (80039c8 <csp_can_add_interface+0x74>)
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d103      	bne.n	80039b2 <csp_can_add_interface+0x5e>
		iface->nexthop = csp_can1_tx;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a07      	ldr	r2, [pc, #28]	@ (80039cc <csp_can_add_interface+0x78>)
 80039ae:	611a      	str	r2, [r3, #16]
 80039b0:	e002      	b.n	80039b8 <csp_can_add_interface+0x64>
	} else {
		iface->nexthop = csp_can2_tx;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a06      	ldr	r2, [pc, #24]	@ (80039d0 <csp_can_add_interface+0x7c>)
 80039b6:	611a      	str	r2, [r3, #16]
	}

	return csp_iflist_add(iface);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f7fe fb99 	bl	80020f0 <csp_iflist_add>
 80039be:	4603      	mov	r3, r0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3710      	adds	r7, #16
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	20000000 	.word	0x20000000
 80039cc:	08003571 	.word	0x08003571
 80039d0:	0800373d 	.word	0x0800373d

080039d4 <csp_lo_tx>:
/**
 * Loopback interface transmit function
 * @param packet Packet to transmit
 * @return 1 if packet was successfully transmitted, 0 on error
 */
static int csp_lo_tx(csp_iface_t * iface, uint16_t via, csp_packet_t * packet) {
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	460b      	mov	r3, r1
 80039de:	607a      	str	r2, [r7, #4]
 80039e0:	817b      	strh	r3, [r7, #10]

	/* Send back into CSP, notice calling from task so last argument must be NULL! */
	csp_qfifo_write(packet, &csp_if_lo, NULL);
 80039e2:	2200      	movs	r2, #0
 80039e4:	4904      	ldr	r1, [pc, #16]	@ (80039f8 <csp_lo_tx+0x24>)
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f7fe ffa2 	bl	8002930 <csp_qfifo_write>

	return CSP_ERR_NONE;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3710      	adds	r7, #16
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	2000001c 	.word	0x2000001c

080039fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a00:	4b04      	ldr	r3, [pc, #16]	@ (8003a14 <__NVIC_GetPriorityGrouping+0x18>)
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	0a1b      	lsrs	r3, r3, #8
 8003a06:	f003 0307 	and.w	r3, r3, #7
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr
 8003a14:	e000ed00 	.word	0xe000ed00

08003a18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	4603      	mov	r3, r0
 8003a20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	db0b      	blt.n	8003a42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a2a:	79fb      	ldrb	r3, [r7, #7]
 8003a2c:	f003 021f 	and.w	r2, r3, #31
 8003a30:	4907      	ldr	r1, [pc, #28]	@ (8003a50 <__NVIC_EnableIRQ+0x38>)
 8003a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a36:	095b      	lsrs	r3, r3, #5
 8003a38:	2001      	movs	r0, #1
 8003a3a:	fa00 f202 	lsl.w	r2, r0, r2
 8003a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003a42:	bf00      	nop
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	e000e100 	.word	0xe000e100

08003a54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	6039      	str	r1, [r7, #0]
 8003a5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	db0a      	blt.n	8003a7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	b2da      	uxtb	r2, r3
 8003a6c:	490c      	ldr	r1, [pc, #48]	@ (8003aa0 <__NVIC_SetPriority+0x4c>)
 8003a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a72:	0112      	lsls	r2, r2, #4
 8003a74:	b2d2      	uxtb	r2, r2
 8003a76:	440b      	add	r3, r1
 8003a78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a7c:	e00a      	b.n	8003a94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	b2da      	uxtb	r2, r3
 8003a82:	4908      	ldr	r1, [pc, #32]	@ (8003aa4 <__NVIC_SetPriority+0x50>)
 8003a84:	79fb      	ldrb	r3, [r7, #7]
 8003a86:	f003 030f 	and.w	r3, r3, #15
 8003a8a:	3b04      	subs	r3, #4
 8003a8c:	0112      	lsls	r2, r2, #4
 8003a8e:	b2d2      	uxtb	r2, r2
 8003a90:	440b      	add	r3, r1
 8003a92:	761a      	strb	r2, [r3, #24]
}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr
 8003aa0:	e000e100 	.word	0xe000e100
 8003aa4:	e000ed00 	.word	0xe000ed00

08003aa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b089      	sub	sp, #36	@ 0x24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f003 0307 	and.w	r3, r3, #7
 8003aba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	f1c3 0307 	rsb	r3, r3, #7
 8003ac2:	2b04      	cmp	r3, #4
 8003ac4:	bf28      	it	cs
 8003ac6:	2304      	movcs	r3, #4
 8003ac8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	3304      	adds	r3, #4
 8003ace:	2b06      	cmp	r3, #6
 8003ad0:	d902      	bls.n	8003ad8 <NVIC_EncodePriority+0x30>
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	3b03      	subs	r3, #3
 8003ad6:	e000      	b.n	8003ada <NVIC_EncodePriority+0x32>
 8003ad8:	2300      	movs	r3, #0
 8003ada:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003adc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae6:	43da      	mvns	r2, r3
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	401a      	ands	r2, r3
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003af0:	f04f 31ff 	mov.w	r1, #4294967295
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	fa01 f303 	lsl.w	r3, r1, r3
 8003afa:	43d9      	mvns	r1, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b00:	4313      	orrs	r3, r2
         );
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3724      	adds	r7, #36	@ 0x24
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b083      	sub	sp, #12
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	60da      	str	r2, [r3, #12]
}
 8003b22:	bf00      	nop
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr

08003b2e <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8003b2e:	b480      	push	{r7}
 8003b30:	b083      	sub	sp, #12
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	615a      	str	r2, [r3, #20]
}
 8003b4e:	bf00      	nop
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
	...

08003b5c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003b64:	4b08      	ldr	r3, [pc, #32]	@ (8003b88 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003b66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b68:	4907      	ldr	r1, [pc, #28]	@ (8003b88 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003b70:	4b05      	ldr	r3, [pc, #20]	@ (8003b88 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003b72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4013      	ands	r3, r2
 8003b78:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
}
 8003b7c:	bf00      	nop
 8003b7e:	3714      	adds	r7, #20
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr
 8003b88:	40023800 	.word	0x40023800

08003b8c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8003b94:	4b08      	ldr	r3, [pc, #32]	@ (8003bb8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003b96:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b98:	4907      	ldr	r1, [pc, #28]	@ (8003bb8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003ba0:	4b05      	ldr	r3, [pc, #20]	@ (8003bb8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003ba2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003baa:	68fb      	ldr	r3, [r7, #12]
}
 8003bac:	bf00      	nop
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr
 8003bb8:	40023800 	.word	0x40023800

08003bbc <vApplicationStackOverflowHook>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
vApplicationStackOverflowHook()
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0

}
 8003bc0:	bf00      	nop
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <Debuglogging>:
void Debuglogging(void *pvParameters)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		task_debug_logging();
 8003bd4:	f005 fe9a 	bl	800990c <task_debug_logging>
		vTaskDelay(50);
 8003bd8:	2032      	movs	r0, #50	@ 0x32
 8003bda:	f003 ff61 	bl	8007aa0 <vTaskDelay>
		task_debug_logging();
 8003bde:	bf00      	nop
 8003be0:	e7f8      	b.n	8003bd4 <Debuglogging+0x8>
	...

08003be4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003bea:	f000 fbb1 	bl	8004350 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003bee:	f000 f879 	bl	8003ce4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003bf2:	f000 f991 	bl	8003f18 <MX_GPIO_Init>
  MX_CAN1_Init();
 8003bf6:	f000 f8dd 	bl	8003db4 <MX_CAN1_Init>
  MX_USART6_UART_Init();
 8003bfa:	f000 f92d 	bl	8003e58 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  /*****************Init CAN*******************/
  // Start CAN
  HAL_CAN_Start(&hcan1);
 8003bfe:	482a      	ldr	r0, [pc, #168]	@ (8003ca8 <main+0xc4>)
 8003c00:	f000 fe16 	bl	8004830 <HAL_CAN_Start>

  // Enable interrupt nhận
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8003c04:	2102      	movs	r1, #2
 8003c06:	4828      	ldr	r0, [pc, #160]	@ (8003ca8 <main+0xc4>)
 8003c08:	f000 ff26 	bl	8004a58 <HAL_CAN_ActivateNotification>

  // Cấu hình header truyền
  TxHeader.DLC = 8;             // 8 byte
 8003c0c:	4b27      	ldr	r3, [pc, #156]	@ (8003cac <main+0xc8>)
 8003c0e:	2208      	movs	r2, #8
 8003c10:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;    // Standard ID (11 bit)
 8003c12:	4b26      	ldr	r3, [pc, #152]	@ (8003cac <main+0xc8>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;  // Data frame
 8003c18:	4b24      	ldr	r3, [pc, #144]	@ (8003cac <main+0xc8>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x103;       // CAN ID của thiết bị này
 8003c1e:	4b23      	ldr	r3, [pc, #140]	@ (8003cac <main+0xc8>)
 8003c20:	f240 1203 	movw	r2, #259	@ 0x103
 8003c24:	601a      	str	r2, [r3, #0]

  TxData[0]= 0x83;
 8003c26:	4b22      	ldr	r3, [pc, #136]	@ (8003cb0 <main+0xcc>)
 8003c28:	2283      	movs	r2, #131	@ 0x83
 8003c2a:	701a      	strb	r2, [r3, #0]
  /************************************/

  CSP_Init();
 8003c2c:	f005 ff1a 	bl	8009a64 <CSP_Init>
  uart_debug_init();
 8003c30:	f005 feec 	bl	8009a0c <uart_debug_init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003c34:	f002 fe98 	bl	8006968 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003c38:	4a1e      	ldr	r2, [pc, #120]	@ (8003cb4 <main+0xd0>)
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	481e      	ldr	r0, [pc, #120]	@ (8003cb8 <main+0xd4>)
 8003c3e:	f002 fedd 	bl	80069fc <osThreadNew>
 8003c42:	4603      	mov	r3, r0
 8003c44:	4a1d      	ldr	r2, [pc, #116]	@ (8003cbc <main+0xd8>)
 8003c46:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(vTaskCspSend, "CSP_Send", 128 * 8, NULL, osPriorityNormal - 1, &hCspSend);
 8003c48:	4b1d      	ldr	r3, [pc, #116]	@ (8003cc0 <main+0xdc>)
 8003c4a:	9301      	str	r3, [sp, #4]
 8003c4c:	2317      	movs	r3, #23
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	2300      	movs	r3, #0
 8003c52:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c56:	491b      	ldr	r1, [pc, #108]	@ (8003cc4 <main+0xe0>)
 8003c58:	481b      	ldr	r0, [pc, #108]	@ (8003cc8 <main+0xe4>)
 8003c5a:	f003 fdc3 	bl	80077e4 <xTaskCreate>
  xTaskCreate(vTaskCspReceive, "CSP_Receive", 128 * 8, NULL, osPriorityNormal - 1, &hCspReceive);
 8003c5e:	4b1b      	ldr	r3, [pc, #108]	@ (8003ccc <main+0xe8>)
 8003c60:	9301      	str	r3, [sp, #4]
 8003c62:	2317      	movs	r3, #23
 8003c64:	9300      	str	r3, [sp, #0]
 8003c66:	2300      	movs	r3, #0
 8003c68:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c6c:	4918      	ldr	r1, [pc, #96]	@ (8003cd0 <main+0xec>)
 8003c6e:	4819      	ldr	r0, [pc, #100]	@ (8003cd4 <main+0xf0>)
 8003c70:	f003 fdb8 	bl	80077e4 <xTaskCreate>
  xTaskCreate(Debuglogging, "Debuglogging", 128 * 2, NULL, osPriorityNormal - 1, NULL);
 8003c74:	2300      	movs	r3, #0
 8003c76:	9301      	str	r3, [sp, #4]
 8003c78:	2317      	movs	r3, #23
 8003c7a:	9300      	str	r3, [sp, #0]
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c82:	4915      	ldr	r1, [pc, #84]	@ (8003cd8 <main+0xf4>)
 8003c84:	4815      	ldr	r0, [pc, #84]	@ (8003cdc <main+0xf8>)
 8003c86:	f003 fdad 	bl	80077e4 <xTaskCreate>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8003c8a:	f002 fe91 	bl	80069b0 <osKernelStart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8003c8e:	4b14      	ldr	r3, [pc, #80]	@ (8003ce0 <main+0xfc>)
 8003c90:	4a07      	ldr	r2, [pc, #28]	@ (8003cb0 <main+0xcc>)
 8003c92:	4906      	ldr	r1, [pc, #24]	@ (8003cac <main+0xc8>)
 8003c94:	4804      	ldr	r0, [pc, #16]	@ (8003ca8 <main+0xc4>)
 8003c96:	f000 fe0f 	bl	80048b8 <HAL_CAN_AddTxMessage>
//	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_5);
	  HAL_Delay(1000);
 8003c9a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003c9e:	f000 fbc9 	bl	8004434 <HAL_Delay>
	  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8003ca2:	bf00      	nop
 8003ca4:	e7f3      	b.n	8003c8e <main+0xaa>
 8003ca6:	bf00      	nop
 8003ca8:	20000580 	.word	0x20000580
 8003cac:	200005ac 	.word	0x200005ac
 8003cb0:	200005c4 	.word	0x200005c4
 8003cb4:	0800eb10 	.word	0x0800eb10
 8003cb8:	08003fb9 	.word	0x08003fb9
 8003cbc:	200005a8 	.word	0x200005a8
 8003cc0:	2000de1c 	.word	0x2000de1c
 8003cc4:	0800e590 	.word	0x0800e590
 8003cc8:	08009b15 	.word	0x08009b15
 8003ccc:	2000de20 	.word	0x2000de20
 8003cd0:	0800e59c 	.word	0x0800e59c
 8003cd4:	08009bb9 	.word	0x08009bb9
 8003cd8:	0800e5a8 	.word	0x0800e5a8
 8003cdc:	08003bcd 	.word	0x08003bcd
 8003ce0:	200005cc 	.word	0x200005cc

08003ce4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b094      	sub	sp, #80	@ 0x50
 8003ce8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003cea:	f107 0320 	add.w	r3, r7, #32
 8003cee:	2230      	movs	r2, #48	@ 0x30
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f007 f839 	bl	800ad6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003cf8:	f107 030c 	add.w	r3, r7, #12
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	601a      	str	r2, [r3, #0]
 8003d00:	605a      	str	r2, [r3, #4]
 8003d02:	609a      	str	r2, [r3, #8]
 8003d04:	60da      	str	r2, [r3, #12]
 8003d06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d08:	2300      	movs	r3, #0
 8003d0a:	60bb      	str	r3, [r7, #8]
 8003d0c:	4b27      	ldr	r3, [pc, #156]	@ (8003dac <SystemClock_Config+0xc8>)
 8003d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d10:	4a26      	ldr	r2, [pc, #152]	@ (8003dac <SystemClock_Config+0xc8>)
 8003d12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d16:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d18:	4b24      	ldr	r3, [pc, #144]	@ (8003dac <SystemClock_Config+0xc8>)
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d20:	60bb      	str	r3, [r7, #8]
 8003d22:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d24:	2300      	movs	r3, #0
 8003d26:	607b      	str	r3, [r7, #4]
 8003d28:	4b21      	ldr	r3, [pc, #132]	@ (8003db0 <SystemClock_Config+0xcc>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a20      	ldr	r2, [pc, #128]	@ (8003db0 <SystemClock_Config+0xcc>)
 8003d2e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d32:	6013      	str	r3, [r2, #0]
 8003d34:	4b1e      	ldr	r3, [pc, #120]	@ (8003db0 <SystemClock_Config+0xcc>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d3c:	607b      	str	r3, [r7, #4]
 8003d3e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003d40:	2302      	movs	r3, #2
 8003d42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003d44:	2301      	movs	r3, #1
 8003d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003d48:	2310      	movs	r3, #16
 8003d4a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003d50:	2300      	movs	r3, #0
 8003d52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003d54:	2308      	movs	r3, #8
 8003d56:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8003d58:	2348      	movs	r3, #72	@ 0x48
 8003d5a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003d60:	2304      	movs	r3, #4
 8003d62:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d64:	f107 0320 	add.w	r3, r7, #32
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f001 fbb7 	bl	80054dc <HAL_RCC_OscConfig>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d001      	beq.n	8003d78 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003d74:	f000 f930 	bl	8003fd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003d78:	230f      	movs	r3, #15
 8003d7a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d80:	2300      	movs	r3, #0
 8003d82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003d84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003d8e:	f107 030c 	add.w	r3, r7, #12
 8003d92:	2102      	movs	r1, #2
 8003d94:	4618      	mov	r0, r3
 8003d96:	f001 fe19 	bl	80059cc <HAL_RCC_ClockConfig>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d001      	beq.n	8003da4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003da0:	f000 f91a 	bl	8003fd8 <Error_Handler>
  }
}
 8003da4:	bf00      	nop
 8003da6:	3750      	adds	r7, #80	@ 0x50
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	40023800 	.word	0x40023800
 8003db0:	40007000 	.word	0x40007000

08003db4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b08a      	sub	sp, #40	@ 0x28
 8003db8:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8003dba:	4b25      	ldr	r3, [pc, #148]	@ (8003e50 <MX_CAN1_Init+0x9c>)
 8003dbc:	4a25      	ldr	r2, [pc, #148]	@ (8003e54 <MX_CAN1_Init+0xa0>)
 8003dbe:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 8003dc0:	4b23      	ldr	r3, [pc, #140]	@ (8003e50 <MX_CAN1_Init+0x9c>)
 8003dc2:	2212      	movs	r2, #18
 8003dc4:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003dc6:	4b22      	ldr	r3, [pc, #136]	@ (8003e50 <MX_CAN1_Init+0x9c>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003dcc:	4b20      	ldr	r3, [pc, #128]	@ (8003e50 <MX_CAN1_Init+0x9c>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8003dd2:	4b1f      	ldr	r3, [pc, #124]	@ (8003e50 <MX_CAN1_Init+0x9c>)
 8003dd4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003dd8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8003dda:	4b1d      	ldr	r3, [pc, #116]	@ (8003e50 <MX_CAN1_Init+0x9c>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8003de0:	4b1b      	ldr	r3, [pc, #108]	@ (8003e50 <MX_CAN1_Init+0x9c>)
 8003de2:	2200      	movs	r2, #0
 8003de4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8003de6:	4b1a      	ldr	r3, [pc, #104]	@ (8003e50 <MX_CAN1_Init+0x9c>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8003dec:	4b18      	ldr	r3, [pc, #96]	@ (8003e50 <MX_CAN1_Init+0x9c>)
 8003dee:	2200      	movs	r2, #0
 8003df0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8003df2:	4b17      	ldr	r3, [pc, #92]	@ (8003e50 <MX_CAN1_Init+0x9c>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003df8:	4b15      	ldr	r3, [pc, #84]	@ (8003e50 <MX_CAN1_Init+0x9c>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8003dfe:	4b14      	ldr	r3, [pc, #80]	@ (8003e50 <MX_CAN1_Init+0x9c>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003e04:	4812      	ldr	r0, [pc, #72]	@ (8003e50 <MX_CAN1_Init+0x9c>)
 8003e06:	f000 fb39 	bl	800447c <HAL_CAN_Init>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d001      	beq.n	8003e14 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8003e10:	f000 f8e2 	bl	8003fd8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef sFilterConfig;

  // Cấu hình filter: nhận tất cả message
  sFilterConfig.FilterBank = 0;
 8003e14:	2300      	movs	r3, #0
 8003e16:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8003e20:	2300      	movs	r3, #0
 8003e22:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8003e24:	2300      	movs	r3, #0
 8003e26:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8003e30:	2300      	movs	r3, #0
 8003e32:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8003e34:	2301      	movs	r3, #1
 8003e36:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 8003e38:	230e      	movs	r3, #14
 8003e3a:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8003e3c:	463b      	mov	r3, r7
 8003e3e:	4619      	mov	r1, r3
 8003e40:	4803      	ldr	r0, [pc, #12]	@ (8003e50 <MX_CAN1_Init+0x9c>)
 8003e42:	f000 fc17 	bl	8004674 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8003e46:	bf00      	nop
 8003e48:	3728      	adds	r7, #40	@ 0x28
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	20000580 	.word	0x20000580
 8003e54:	40006400 	.word	0x40006400

08003e58 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b08e      	sub	sp, #56	@ 0x38
 8003e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8003e5e:	f107 031c 	add.w	r3, r7, #28
 8003e62:	2200      	movs	r2, #0
 8003e64:	601a      	str	r2, [r3, #0]
 8003e66:	605a      	str	r2, [r3, #4]
 8003e68:	609a      	str	r2, [r3, #8]
 8003e6a:	60da      	str	r2, [r3, #12]
 8003e6c:	611a      	str	r2, [r3, #16]
 8003e6e:	615a      	str	r2, [r3, #20]
 8003e70:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e72:	1d3b      	adds	r3, r7, #4
 8003e74:	2200      	movs	r2, #0
 8003e76:	601a      	str	r2, [r3, #0]
 8003e78:	605a      	str	r2, [r3, #4]
 8003e7a:	609a      	str	r2, [r3, #8]
 8003e7c:	60da      	str	r2, [r3, #12]
 8003e7e:	611a      	str	r2, [r3, #16]
 8003e80:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 8003e82:	2020      	movs	r0, #32
 8003e84:	f7ff fe82 	bl	8003b8c <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8003e88:	2004      	movs	r0, #4
 8003e8a:	f7ff fe67 	bl	8003b5c <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8003e8e:	23c0      	movs	r3, #192	@ 0xc0
 8003e90:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003e92:	2302      	movs	r3, #2
 8003e94:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003e96:	2303      	movs	r3, #3
 8003e98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8003ea2:	2308      	movs	r3, #8
 8003ea4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ea6:	1d3b      	adds	r3, r7, #4
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	4819      	ldr	r0, [pc, #100]	@ (8003f10 <MX_USART6_UART_Init+0xb8>)
 8003eac:	f002 f885 	bl	8005fba <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),6, 0));
 8003eb0:	f7ff fda4 	bl	80039fc <__NVIC_GetPriorityGrouping>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	2106      	movs	r1, #6
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7ff fdf4 	bl	8003aa8 <NVIC_EncodePriority>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	2047      	movs	r0, #71	@ 0x47
 8003ec6:	f7ff fdc5 	bl	8003a54 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 8003eca:	2047      	movs	r0, #71	@ 0x47
 8003ecc:	f7ff fda4 	bl	8003a18 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8003ed0:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8003ed4:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003eda:	2300      	movs	r3, #0
 8003edc:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003ee2:	230c      	movs	r3, #12
 8003ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003eea:	2300      	movs	r3, #0
 8003eec:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 8003eee:	f107 031c 	add.w	r3, r7, #28
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	4807      	ldr	r0, [pc, #28]	@ (8003f14 <MX_USART6_UART_Init+0xbc>)
 8003ef6:	f002 fc83 	bl	8006800 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 8003efa:	4806      	ldr	r0, [pc, #24]	@ (8003f14 <MX_USART6_UART_Init+0xbc>)
 8003efc:	f7ff fe17 	bl	8003b2e <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 8003f00:	4804      	ldr	r0, [pc, #16]	@ (8003f14 <MX_USART6_UART_Init+0xbc>)
 8003f02:	f7ff fe04 	bl	8003b0e <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003f06:	bf00      	nop
 8003f08:	3738      	adds	r7, #56	@ 0x38
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	40020800 	.word	0x40020800
 8003f14:	40011400 	.word	0x40011400

08003f18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b088      	sub	sp, #32
 8003f1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f1e:	f107 030c 	add.w	r3, r7, #12
 8003f22:	2200      	movs	r2, #0
 8003f24:	601a      	str	r2, [r3, #0]
 8003f26:	605a      	str	r2, [r3, #4]
 8003f28:	609a      	str	r2, [r3, #8]
 8003f2a:	60da      	str	r2, [r3, #12]
 8003f2c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f2e:	2300      	movs	r3, #0
 8003f30:	60bb      	str	r3, [r7, #8]
 8003f32:	4b1f      	ldr	r3, [pc, #124]	@ (8003fb0 <MX_GPIO_Init+0x98>)
 8003f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f36:	4a1e      	ldr	r2, [pc, #120]	@ (8003fb0 <MX_GPIO_Init+0x98>)
 8003f38:	f043 0304 	orr.w	r3, r3, #4
 8003f3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f3e:	4b1c      	ldr	r3, [pc, #112]	@ (8003fb0 <MX_GPIO_Init+0x98>)
 8003f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f42:	f003 0304 	and.w	r3, r3, #4
 8003f46:	60bb      	str	r3, [r7, #8]
 8003f48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	607b      	str	r3, [r7, #4]
 8003f4e:	4b18      	ldr	r3, [pc, #96]	@ (8003fb0 <MX_GPIO_Init+0x98>)
 8003f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f52:	4a17      	ldr	r2, [pc, #92]	@ (8003fb0 <MX_GPIO_Init+0x98>)
 8003f54:	f043 0301 	orr.w	r3, r3, #1
 8003f58:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f5a:	4b15      	ldr	r3, [pc, #84]	@ (8003fb0 <MX_GPIO_Init+0x98>)
 8003f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	607b      	str	r3, [r7, #4]
 8003f64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f66:	2300      	movs	r3, #0
 8003f68:	603b      	str	r3, [r7, #0]
 8003f6a:	4b11      	ldr	r3, [pc, #68]	@ (8003fb0 <MX_GPIO_Init+0x98>)
 8003f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f6e:	4a10      	ldr	r2, [pc, #64]	@ (8003fb0 <MX_GPIO_Init+0x98>)
 8003f70:	f043 0302 	orr.w	r3, r3, #2
 8003f74:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f76:	4b0e      	ldr	r3, [pc, #56]	@ (8003fb0 <MX_GPIO_Init+0x98>)
 8003f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	603b      	str	r3, [r7, #0]
 8003f80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8003f82:	2200      	movs	r2, #0
 8003f84:	2120      	movs	r1, #32
 8003f86:	480b      	ldr	r0, [pc, #44]	@ (8003fb4 <MX_GPIO_Init+0x9c>)
 8003f88:	f001 fa74 	bl	8005474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003f8c:	2320      	movs	r3, #32
 8003f8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f90:	2301      	movs	r3, #1
 8003f92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f94:	2300      	movs	r3, #0
 8003f96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f9c:	f107 030c 	add.w	r3, r7, #12
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	4804      	ldr	r0, [pc, #16]	@ (8003fb4 <MX_GPIO_Init+0x9c>)
 8003fa4:	f001 f8ca 	bl	800513c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8003fa8:	bf00      	nop
 8003faa:	3720      	adds	r7, #32
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	40023800 	.word	0x40023800
 8003fb4:	40020800 	.word	0x40020800

08003fb8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
//	uart_ring_buffer_put((uint8_t*)"Red toggle\n", 16);
//	  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_5);
 8003fc0:	2120      	movs	r1, #32
 8003fc2:	4804      	ldr	r0, [pc, #16]	@ (8003fd4 <StartDefaultTask+0x1c>)
 8003fc4:	f001 fa6f 	bl	80054a6 <HAL_GPIO_TogglePin>
    vTaskDelay(200);
 8003fc8:	20c8      	movs	r0, #200	@ 0xc8
 8003fca:	f003 fd69 	bl	8007aa0 <vTaskDelay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_5);
 8003fce:	bf00      	nop
 8003fd0:	e7f6      	b.n	8003fc0 <StartDefaultTask+0x8>
 8003fd2:	bf00      	nop
 8003fd4:	40020800 	.word	0x40020800

08003fd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003fdc:	b672      	cpsid	i
}
 8003fde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003fe0:	bf00      	nop
 8003fe2:	e7fd      	b.n	8003fe0 <Error_Handler+0x8>

08003fe4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fea:	2300      	movs	r3, #0
 8003fec:	607b      	str	r3, [r7, #4]
 8003fee:	4b12      	ldr	r3, [pc, #72]	@ (8004038 <HAL_MspInit+0x54>)
 8003ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ff2:	4a11      	ldr	r2, [pc, #68]	@ (8004038 <HAL_MspInit+0x54>)
 8003ff4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ff8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ffa:	4b0f      	ldr	r3, [pc, #60]	@ (8004038 <HAL_MspInit+0x54>)
 8003ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ffe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004002:	607b      	str	r3, [r7, #4]
 8004004:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004006:	2300      	movs	r3, #0
 8004008:	603b      	str	r3, [r7, #0]
 800400a:	4b0b      	ldr	r3, [pc, #44]	@ (8004038 <HAL_MspInit+0x54>)
 800400c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800400e:	4a0a      	ldr	r2, [pc, #40]	@ (8004038 <HAL_MspInit+0x54>)
 8004010:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004014:	6413      	str	r3, [r2, #64]	@ 0x40
 8004016:	4b08      	ldr	r3, [pc, #32]	@ (8004038 <HAL_MspInit+0x54>)
 8004018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800401a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800401e:	603b      	str	r3, [r7, #0]
 8004020:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004022:	2200      	movs	r2, #0
 8004024:	210f      	movs	r1, #15
 8004026:	f06f 0001 	mvn.w	r0, #1
 800402a:	f001 f850 	bl	80050ce <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800402e:	bf00      	nop
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	40023800 	.word	0x40023800

0800403c <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b08a      	sub	sp, #40	@ 0x28
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004044:	f107 0314 	add.w	r3, r7, #20
 8004048:	2200      	movs	r2, #0
 800404a:	601a      	str	r2, [r3, #0]
 800404c:	605a      	str	r2, [r3, #4]
 800404e:	609a      	str	r2, [r3, #8]
 8004050:	60da      	str	r2, [r3, #12]
 8004052:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a1d      	ldr	r2, [pc, #116]	@ (80040d0 <HAL_CAN_MspInit+0x94>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d134      	bne.n	80040c8 <HAL_CAN_MspInit+0x8c>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800405e:	2300      	movs	r3, #0
 8004060:	613b      	str	r3, [r7, #16]
 8004062:	4b1c      	ldr	r3, [pc, #112]	@ (80040d4 <HAL_CAN_MspInit+0x98>)
 8004064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004066:	4a1b      	ldr	r2, [pc, #108]	@ (80040d4 <HAL_CAN_MspInit+0x98>)
 8004068:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800406c:	6413      	str	r3, [r2, #64]	@ 0x40
 800406e:	4b19      	ldr	r3, [pc, #100]	@ (80040d4 <HAL_CAN_MspInit+0x98>)
 8004070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004076:	613b      	str	r3, [r7, #16]
 8004078:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800407a:	2300      	movs	r3, #0
 800407c:	60fb      	str	r3, [r7, #12]
 800407e:	4b15      	ldr	r3, [pc, #84]	@ (80040d4 <HAL_CAN_MspInit+0x98>)
 8004080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004082:	4a14      	ldr	r2, [pc, #80]	@ (80040d4 <HAL_CAN_MspInit+0x98>)
 8004084:	f043 0302 	orr.w	r3, r3, #2
 8004088:	6313      	str	r3, [r2, #48]	@ 0x30
 800408a:	4b12      	ldr	r3, [pc, #72]	@ (80040d4 <HAL_CAN_MspInit+0x98>)
 800408c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	60fb      	str	r3, [r7, #12]
 8004094:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004096:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800409a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800409c:	2302      	movs	r3, #2
 800409e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040a0:	2300      	movs	r3, #0
 80040a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040a4:	2303      	movs	r3, #3
 80040a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80040a8:	2309      	movs	r3, #9
 80040aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040ac:	f107 0314 	add.w	r3, r7, #20
 80040b0:	4619      	mov	r1, r3
 80040b2:	4809      	ldr	r0, [pc, #36]	@ (80040d8 <HAL_CAN_MspInit+0x9c>)
 80040b4:	f001 f842 	bl	800513c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80040b8:	2200      	movs	r2, #0
 80040ba:	2105      	movs	r1, #5
 80040bc:	2014      	movs	r0, #20
 80040be:	f001 f806 	bl	80050ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80040c2:	2014      	movs	r0, #20
 80040c4:	f001 f81f 	bl	8005106 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 80040c8:	bf00      	nop
 80040ca:	3728      	adds	r7, #40	@ 0x28
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	40006400 	.word	0x40006400
 80040d4:	40023800 	.word	0x40023800
 80040d8:	40020400 	.word	0x40020400

080040dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040dc:	b480      	push	{r7}
 80040de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80040e0:	bf00      	nop
 80040e2:	e7fd      	b.n	80040e0 <NMI_Handler+0x4>

080040e4 <HardFault_Handler>:
}

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void){
 80040e4:	b480      	push	{r7}
 80040e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040e8:	bf00      	nop
 80040ea:	e7fd      	b.n	80040e8 <HardFault_Handler+0x4>

080040ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040f0:	bf00      	nop
 80040f2:	e7fd      	b.n	80040f0 <MemManage_Handler+0x4>

080040f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040f4:	b480      	push	{r7}
 80040f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040f8:	bf00      	nop
 80040fa:	e7fd      	b.n	80040f8 <BusFault_Handler+0x4>

080040fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80040fc:	b480      	push	{r7}
 80040fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004100:	bf00      	nop
 8004102:	e7fd      	b.n	8004100 <UsageFault_Handler+0x4>

08004104 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004104:	b480      	push	{r7}
 8004106:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004108:	bf00      	nop
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr

08004112 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004116:	f000 f96d 	bl	80043f4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800411a:	f004 f97f 	bl	800841c <xTaskGetSchedulerState>
 800411e:	4603      	mov	r3, r0
 8004120:	2b01      	cmp	r3, #1
 8004122:	d001      	beq.n	8004128 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8004124:	f004 ff78 	bl	8009018 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004128:	bf00      	nop
 800412a:	bd80      	pop	{r7, pc}

0800412c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004130:	4802      	ldr	r0, [pc, #8]	@ (800413c <CAN1_RX0_IRQHandler+0x10>)
 8004132:	f000 fcb7 	bl	8004aa4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8004136:	bf00      	nop
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	20000580 	.word	0x20000580

08004140 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	uart_IRQ_handler();
 8004144:	f005 fc16 	bl	8009974 <uart_IRQ_handler>
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004148:	bf00      	nop
 800414a:	bd80      	pop	{r7, pc}

0800414c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800414c:	b480      	push	{r7}
 800414e:	af00      	add	r7, sp, #0
  return 1;
 8004150:	2301      	movs	r3, #1
}
 8004152:	4618      	mov	r0, r3
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <_kill>:

int _kill(int pid, int sig)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004166:	f006 fee5 	bl	800af34 <__errno>
 800416a:	4603      	mov	r3, r0
 800416c:	2216      	movs	r2, #22
 800416e:	601a      	str	r2, [r3, #0]
  return -1;
 8004170:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004174:	4618      	mov	r0, r3
 8004176:	3708      	adds	r7, #8
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <_exit>:

void _exit (int status)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004184:	f04f 31ff 	mov.w	r1, #4294967295
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f7ff ffe7 	bl	800415c <_kill>
  while (1) {}    /* Make sure we hang here */
 800418e:	bf00      	nop
 8004190:	e7fd      	b.n	800418e <_exit+0x12>

08004192 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004192:	b580      	push	{r7, lr}
 8004194:	b086      	sub	sp, #24
 8004196:	af00      	add	r7, sp, #0
 8004198:	60f8      	str	r0, [r7, #12]
 800419a:	60b9      	str	r1, [r7, #8]
 800419c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800419e:	2300      	movs	r3, #0
 80041a0:	617b      	str	r3, [r7, #20]
 80041a2:	e00a      	b.n	80041ba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80041a4:	f3af 8000 	nop.w
 80041a8:	4601      	mov	r1, r0
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	1c5a      	adds	r2, r3, #1
 80041ae:	60ba      	str	r2, [r7, #8]
 80041b0:	b2ca      	uxtb	r2, r1
 80041b2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	3301      	adds	r3, #1
 80041b8:	617b      	str	r3, [r7, #20]
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	429a      	cmp	r2, r3
 80041c0:	dbf0      	blt.n	80041a4 <_read+0x12>
  }

  return len;
 80041c2:	687b      	ldr	r3, [r7, #4]
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3718      	adds	r7, #24
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041d8:	2300      	movs	r3, #0
 80041da:	617b      	str	r3, [r7, #20]
 80041dc:	e009      	b.n	80041f2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	1c5a      	adds	r2, r3, #1
 80041e2:	60ba      	str	r2, [r7, #8]
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	3301      	adds	r3, #1
 80041f0:	617b      	str	r3, [r7, #20]
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	dbf1      	blt.n	80041de <_write+0x12>
  }
  return len;
 80041fa:	687b      	ldr	r3, [r7, #4]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3718      	adds	r7, #24
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <_close>:

int _close(int file)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800420c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004210:	4618      	mov	r0, r3
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800422c:	605a      	str	r2, [r3, #4]
  return 0;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <_isatty>:

int _isatty(int file)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004244:	2301      	movs	r3, #1
}
 8004246:	4618      	mov	r0, r3
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004252:	b480      	push	{r7}
 8004254:	b085      	sub	sp, #20
 8004256:	af00      	add	r7, sp, #0
 8004258:	60f8      	str	r0, [r7, #12]
 800425a:	60b9      	str	r1, [r7, #8]
 800425c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	3714      	adds	r7, #20
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b086      	sub	sp, #24
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004274:	4a14      	ldr	r2, [pc, #80]	@ (80042c8 <_sbrk+0x5c>)
 8004276:	4b15      	ldr	r3, [pc, #84]	@ (80042cc <_sbrk+0x60>)
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004280:	4b13      	ldr	r3, [pc, #76]	@ (80042d0 <_sbrk+0x64>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d102      	bne.n	800428e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004288:	4b11      	ldr	r3, [pc, #68]	@ (80042d0 <_sbrk+0x64>)
 800428a:	4a12      	ldr	r2, [pc, #72]	@ (80042d4 <_sbrk+0x68>)
 800428c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800428e:	4b10      	ldr	r3, [pc, #64]	@ (80042d0 <_sbrk+0x64>)
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4413      	add	r3, r2
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	429a      	cmp	r2, r3
 800429a:	d207      	bcs.n	80042ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800429c:	f006 fe4a 	bl	800af34 <__errno>
 80042a0:	4603      	mov	r3, r0
 80042a2:	220c      	movs	r2, #12
 80042a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80042a6:	f04f 33ff 	mov.w	r3, #4294967295
 80042aa:	e009      	b.n	80042c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80042ac:	4b08      	ldr	r3, [pc, #32]	@ (80042d0 <_sbrk+0x64>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80042b2:	4b07      	ldr	r3, [pc, #28]	@ (80042d0 <_sbrk+0x64>)
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4413      	add	r3, r2
 80042ba:	4a05      	ldr	r2, [pc, #20]	@ (80042d0 <_sbrk+0x64>)
 80042bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80042be:	68fb      	ldr	r3, [r7, #12]
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3718      	adds	r7, #24
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	20020000 	.word	0x20020000
 80042cc:	00000400 	.word	0x00000400
 80042d0:	200005d0 	.word	0x200005d0
 80042d4:	2000fe50 	.word	0x2000fe50

080042d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80042d8:	b480      	push	{r7}
 80042da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80042dc:	4b06      	ldr	r3, [pc, #24]	@ (80042f8 <SystemInit+0x20>)
 80042de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042e2:	4a05      	ldr	r2, [pc, #20]	@ (80042f8 <SystemInit+0x20>)
 80042e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80042e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80042ec:	bf00      	nop
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	e000ed00 	.word	0xe000ed00

080042fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80042fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004334 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004300:	f7ff ffea 	bl	80042d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004304:	480c      	ldr	r0, [pc, #48]	@ (8004338 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004306:	490d      	ldr	r1, [pc, #52]	@ (800433c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004308:	4a0d      	ldr	r2, [pc, #52]	@ (8004340 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800430a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800430c:	e002      	b.n	8004314 <LoopCopyDataInit>

0800430e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800430e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004312:	3304      	adds	r3, #4

08004314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004318:	d3f9      	bcc.n	800430e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800431a:	4a0a      	ldr	r2, [pc, #40]	@ (8004344 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800431c:	4c0a      	ldr	r4, [pc, #40]	@ (8004348 <LoopFillZerobss+0x22>)
  movs r3, #0
 800431e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004320:	e001      	b.n	8004326 <LoopFillZerobss>

08004322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004324:	3204      	adds	r2, #4

08004326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004328:	d3fb      	bcc.n	8004322 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800432a:	f006 fe09 	bl	800af40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800432e:	f7ff fc59 	bl	8003be4 <main>
  bx  lr    
 8004332:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004334:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004338:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800433c:	20000244 	.word	0x20000244
  ldr r2, =_sidata
 8004340:	0800ef84 	.word	0x0800ef84
  ldr r2, =_sbss
 8004344:	20000244 	.word	0x20000244
  ldr r4, =_ebss
 8004348:	2000dfbc 	.word	0x2000dfbc

0800434c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800434c:	e7fe      	b.n	800434c <ADC_IRQHandler>
	...

08004350 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004354:	4b0e      	ldr	r3, [pc, #56]	@ (8004390 <HAL_Init+0x40>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a0d      	ldr	r2, [pc, #52]	@ (8004390 <HAL_Init+0x40>)
 800435a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800435e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004360:	4b0b      	ldr	r3, [pc, #44]	@ (8004390 <HAL_Init+0x40>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a0a      	ldr	r2, [pc, #40]	@ (8004390 <HAL_Init+0x40>)
 8004366:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800436a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800436c:	4b08      	ldr	r3, [pc, #32]	@ (8004390 <HAL_Init+0x40>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a07      	ldr	r2, [pc, #28]	@ (8004390 <HAL_Init+0x40>)
 8004372:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004376:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004378:	2003      	movs	r0, #3
 800437a:	f000 fe9d 	bl	80050b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800437e:	200f      	movs	r0, #15
 8004380:	f000 f808 	bl	8004394 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004384:	f7ff fe2e 	bl	8003fe4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	40023c00 	.word	0x40023c00

08004394 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800439c:	4b12      	ldr	r3, [pc, #72]	@ (80043e8 <HAL_InitTick+0x54>)
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	4b12      	ldr	r3, [pc, #72]	@ (80043ec <HAL_InitTick+0x58>)
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	4619      	mov	r1, r3
 80043a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80043aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80043ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b2:	4618      	mov	r0, r3
 80043b4:	f000 feb5 	bl	8005122 <HAL_SYSTICK_Config>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e00e      	b.n	80043e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2b0f      	cmp	r3, #15
 80043c6:	d80a      	bhi.n	80043de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043c8:	2200      	movs	r2, #0
 80043ca:	6879      	ldr	r1, [r7, #4]
 80043cc:	f04f 30ff 	mov.w	r0, #4294967295
 80043d0:	f000 fe7d 	bl	80050ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043d4:	4a06      	ldr	r2, [pc, #24]	@ (80043f0 <HAL_InitTick+0x5c>)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80043da:	2300      	movs	r3, #0
 80043dc:	e000      	b.n	80043e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3708      	adds	r7, #8
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	20000060 	.word	0x20000060
 80043ec:	20000068 	.word	0x20000068
 80043f0:	20000064 	.word	0x20000064

080043f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043f4:	b480      	push	{r7}
 80043f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80043f8:	4b06      	ldr	r3, [pc, #24]	@ (8004414 <HAL_IncTick+0x20>)
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	461a      	mov	r2, r3
 80043fe:	4b06      	ldr	r3, [pc, #24]	@ (8004418 <HAL_IncTick+0x24>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4413      	add	r3, r2
 8004404:	4a04      	ldr	r2, [pc, #16]	@ (8004418 <HAL_IncTick+0x24>)
 8004406:	6013      	str	r3, [r2, #0]
}
 8004408:	bf00      	nop
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	20000068 	.word	0x20000068
 8004418:	200005d4 	.word	0x200005d4

0800441c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800441c:	b480      	push	{r7}
 800441e:	af00      	add	r7, sp, #0
  return uwTick;
 8004420:	4b03      	ldr	r3, [pc, #12]	@ (8004430 <HAL_GetTick+0x14>)
 8004422:	681b      	ldr	r3, [r3, #0]
}
 8004424:	4618      	mov	r0, r3
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	200005d4 	.word	0x200005d4

08004434 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800443c:	f7ff ffee 	bl	800441c <HAL_GetTick>
 8004440:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800444c:	d005      	beq.n	800445a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800444e:	4b0a      	ldr	r3, [pc, #40]	@ (8004478 <HAL_Delay+0x44>)
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	461a      	mov	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	4413      	add	r3, r2
 8004458:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800445a:	bf00      	nop
 800445c:	f7ff ffde 	bl	800441c <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	429a      	cmp	r2, r3
 800446a:	d8f7      	bhi.n	800445c <HAL_Delay+0x28>
  {
  }
}
 800446c:	bf00      	nop
 800446e:	bf00      	nop
 8004470:	3710      	adds	r7, #16
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	20000068 	.word	0x20000068

0800447c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e0ed      	b.n	800466a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d102      	bne.n	80044a0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f7ff fdce 	bl	800403c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f042 0201 	orr.w	r2, r2, #1
 80044ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044b0:	f7ff ffb4 	bl	800441c <HAL_GetTick>
 80044b4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80044b6:	e012      	b.n	80044de <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80044b8:	f7ff ffb0 	bl	800441c <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	2b0a      	cmp	r3, #10
 80044c4:	d90b      	bls.n	80044de <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ca:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2205      	movs	r2, #5
 80044d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e0c5      	b.n	800466a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f003 0301 	and.w	r3, r3, #1
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d0e5      	beq.n	80044b8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f022 0202 	bic.w	r2, r2, #2
 80044fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044fc:	f7ff ff8e 	bl	800441c <HAL_GetTick>
 8004500:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004502:	e012      	b.n	800452a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004504:	f7ff ff8a 	bl	800441c <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	2b0a      	cmp	r3, #10
 8004510:	d90b      	bls.n	800452a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004516:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2205      	movs	r2, #5
 8004522:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e09f      	b.n	800466a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f003 0302 	and.w	r3, r3, #2
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1e5      	bne.n	8004504 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	7e1b      	ldrb	r3, [r3, #24]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d108      	bne.n	8004552 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800454e:	601a      	str	r2, [r3, #0]
 8004550:	e007      	b.n	8004562 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004560:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	7e5b      	ldrb	r3, [r3, #25]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d108      	bne.n	800457c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004578:	601a      	str	r2, [r3, #0]
 800457a:	e007      	b.n	800458c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800458a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	7e9b      	ldrb	r3, [r3, #26]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d108      	bne.n	80045a6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f042 0220 	orr.w	r2, r2, #32
 80045a2:	601a      	str	r2, [r3, #0]
 80045a4:	e007      	b.n	80045b6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f022 0220 	bic.w	r2, r2, #32
 80045b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	7edb      	ldrb	r3, [r3, #27]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d108      	bne.n	80045d0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f022 0210 	bic.w	r2, r2, #16
 80045cc:	601a      	str	r2, [r3, #0]
 80045ce:	e007      	b.n	80045e0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f042 0210 	orr.w	r2, r2, #16
 80045de:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	7f1b      	ldrb	r3, [r3, #28]
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d108      	bne.n	80045fa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f042 0208 	orr.w	r2, r2, #8
 80045f6:	601a      	str	r2, [r3, #0]
 80045f8:	e007      	b.n	800460a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f022 0208 	bic.w	r2, r2, #8
 8004608:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	7f5b      	ldrb	r3, [r3, #29]
 800460e:	2b01      	cmp	r3, #1
 8004610:	d108      	bne.n	8004624 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f042 0204 	orr.w	r2, r2, #4
 8004620:	601a      	str	r2, [r3, #0]
 8004622:	e007      	b.n	8004634 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f022 0204 	bic.w	r2, r2, #4
 8004632:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689a      	ldr	r2, [r3, #8]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	431a      	orrs	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	431a      	orrs	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	695b      	ldr	r3, [r3, #20]
 8004648:	ea42 0103 	orr.w	r1, r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	1e5a      	subs	r2, r3, #1
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	430a      	orrs	r2, r1
 8004658:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3710      	adds	r7, #16
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
	...

08004674 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8004674:	b480      	push	{r7}
 8004676:	b087      	sub	sp, #28
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004684:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 8004686:	7dfb      	ldrb	r3, [r7, #23]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d003      	beq.n	8004694 <HAL_CAN_ConfigFilter+0x20>
 800468c:	7dfb      	ldrb	r3, [r7, #23]
 800468e:	2b02      	cmp	r3, #2
 8004690:	f040 80be 	bne.w	8004810 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004694:	4b65      	ldr	r3, [pc, #404]	@ (800482c <HAL_CAN_ConfigFilter+0x1b8>)
 8004696:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800469e:	f043 0201 	orr.w	r2, r3, #1
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80046ae:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c2:	021b      	lsls	r3, r3, #8
 80046c4:	431a      	orrs	r2, r3
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	695b      	ldr	r3, [r3, #20]
 80046d0:	f003 031f 	and.w	r3, r3, #31
 80046d4:	2201      	movs	r2, #1
 80046d6:	fa02 f303 	lsl.w	r3, r2, r3
 80046da:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	43db      	mvns	r3, r3
 80046e6:	401a      	ands	r2, r3
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d123      	bne.n	800473e <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	43db      	mvns	r3, r3
 8004700:	401a      	ands	r2, r3
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004714:	683a      	ldr	r2, [r7, #0]
 8004716:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004718:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	3248      	adds	r2, #72	@ 0x48
 800471e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004732:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004734:	6939      	ldr	r1, [r7, #16]
 8004736:	3348      	adds	r3, #72	@ 0x48
 8004738:	00db      	lsls	r3, r3, #3
 800473a:	440b      	add	r3, r1
 800473c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	69db      	ldr	r3, [r3, #28]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d122      	bne.n	800478c <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	431a      	orrs	r2, r3
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004762:	683a      	ldr	r2, [r7, #0]
 8004764:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004766:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	3248      	adds	r2, #72	@ 0x48
 800476c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004780:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004782:	6939      	ldr	r1, [r7, #16]
 8004784:	3348      	adds	r3, #72	@ 0x48
 8004786:	00db      	lsls	r3, r3, #3
 8004788:	440b      	add	r3, r1
 800478a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d109      	bne.n	80047a8 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	43db      	mvns	r3, r3
 800479e:	401a      	ands	r2, r3
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80047a6:	e007      	b.n	80047b8 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	431a      	orrs	r2, r3
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	691b      	ldr	r3, [r3, #16]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d109      	bne.n	80047d4 <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	43db      	mvns	r3, r3
 80047ca:	401a      	ands	r2, r3
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80047d2:	e007      	b.n	80047e4 <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	431a      	orrs	r2, r3
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	6a1b      	ldr	r3, [r3, #32]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d107      	bne.n	80047fc <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	431a      	orrs	r2, r3
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004802:	f023 0201 	bic.w	r2, r3, #1
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800480c:	2300      	movs	r3, #0
 800480e:	e006      	b.n	800481e <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004814:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
  }
}
 800481e:	4618      	mov	r0, r3
 8004820:	371c      	adds	r7, #28
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	40006400 	.word	0x40006400

08004830 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800483e:	b2db      	uxtb	r3, r3
 8004840:	2b01      	cmp	r3, #1
 8004842:	d12e      	bne.n	80048a2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2202      	movs	r2, #2
 8004848:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f022 0201 	bic.w	r2, r2, #1
 800485a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800485c:	f7ff fdde 	bl	800441c <HAL_GetTick>
 8004860:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004862:	e012      	b.n	800488a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004864:	f7ff fdda 	bl	800441c <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b0a      	cmp	r3, #10
 8004870:	d90b      	bls.n	800488a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004876:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2205      	movs	r2, #5
 8004882:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e012      	b.n	80048b0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f003 0301 	and.w	r3, r3, #1
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1e5      	bne.n	8004864 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800489e:	2300      	movs	r3, #0
 80048a0:	e006      	b.n	80048b0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a6:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
  }
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3710      	adds	r7, #16
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b089      	sub	sp, #36	@ 0x24
 80048bc:	af00      	add	r7, sp, #0
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	607a      	str	r2, [r7, #4]
 80048c4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048cc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80048d6:	7ffb      	ldrb	r3, [r7, #31]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d003      	beq.n	80048e4 <HAL_CAN_AddTxMessage+0x2c>
 80048dc:	7ffb      	ldrb	r3, [r7, #31]
 80048de:	2b02      	cmp	r3, #2
 80048e0:	f040 80ad 	bne.w	8004a3e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d10a      	bne.n	8004904 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d105      	bne.n	8004904 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80048fe:	2b00      	cmp	r3, #0
 8004900:	f000 8095 	beq.w	8004a2e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	0e1b      	lsrs	r3, r3, #24
 8004908:	f003 0303 	and.w	r3, r3, #3
 800490c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800490e:	2201      	movs	r2, #1
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	409a      	lsls	r2, r3
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d10d      	bne.n	800493c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800492a:	68f9      	ldr	r1, [r7, #12]
 800492c:	6809      	ldr	r1, [r1, #0]
 800492e:	431a      	orrs	r2, r3
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	3318      	adds	r3, #24
 8004934:	011b      	lsls	r3, r3, #4
 8004936:	440b      	add	r3, r1
 8004938:	601a      	str	r2, [r3, #0]
 800493a:	e00f      	b.n	800495c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004946:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800494c:	68f9      	ldr	r1, [r7, #12]
 800494e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004950:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	3318      	adds	r3, #24
 8004956:	011b      	lsls	r3, r3, #4
 8004958:	440b      	add	r3, r1
 800495a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6819      	ldr	r1, [r3, #0]
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	691a      	ldr	r2, [r3, #16]
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	3318      	adds	r3, #24
 8004968:	011b      	lsls	r3, r3, #4
 800496a:	440b      	add	r3, r1
 800496c:	3304      	adds	r3, #4
 800496e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	7d1b      	ldrb	r3, [r3, #20]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d111      	bne.n	800499c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	3318      	adds	r3, #24
 8004980:	011b      	lsls	r3, r3, #4
 8004982:	4413      	add	r3, r2
 8004984:	3304      	adds	r3, #4
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	6811      	ldr	r1, [r2, #0]
 800498c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	3318      	adds	r3, #24
 8004994:	011b      	lsls	r3, r3, #4
 8004996:	440b      	add	r3, r1
 8004998:	3304      	adds	r3, #4
 800499a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	3307      	adds	r3, #7
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	061a      	lsls	r2, r3, #24
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	3306      	adds	r3, #6
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	041b      	lsls	r3, r3, #16
 80049ac:	431a      	orrs	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	3305      	adds	r3, #5
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	021b      	lsls	r3, r3, #8
 80049b6:	4313      	orrs	r3, r2
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	3204      	adds	r2, #4
 80049bc:	7812      	ldrb	r2, [r2, #0]
 80049be:	4610      	mov	r0, r2
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	6811      	ldr	r1, [r2, #0]
 80049c4:	ea43 0200 	orr.w	r2, r3, r0
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	011b      	lsls	r3, r3, #4
 80049cc:	440b      	add	r3, r1
 80049ce:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80049d2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	3303      	adds	r3, #3
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	061a      	lsls	r2, r3, #24
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	3302      	adds	r3, #2
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	041b      	lsls	r3, r3, #16
 80049e4:	431a      	orrs	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	3301      	adds	r3, #1
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	021b      	lsls	r3, r3, #8
 80049ee:	4313      	orrs	r3, r2
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	7812      	ldrb	r2, [r2, #0]
 80049f4:	4610      	mov	r0, r2
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	6811      	ldr	r1, [r2, #0]
 80049fa:	ea43 0200 	orr.w	r2, r3, r0
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	011b      	lsls	r3, r3, #4
 8004a02:	440b      	add	r3, r1
 8004a04:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8004a08:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	3318      	adds	r3, #24
 8004a12:	011b      	lsls	r3, r3, #4
 8004a14:	4413      	add	r3, r2
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	6811      	ldr	r1, [r2, #0]
 8004a1c:	f043 0201 	orr.w	r2, r3, #1
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	3318      	adds	r3, #24
 8004a24:	011b      	lsls	r3, r3, #4
 8004a26:	440b      	add	r3, r1
 8004a28:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	e00e      	b.n	8004a4c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a32:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e006      	b.n	8004a4c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a42:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
  }
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3724      	adds	r7, #36	@ 0x24
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b085      	sub	sp, #20
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a68:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004a6a:	7bfb      	ldrb	r3, [r7, #15]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d002      	beq.n	8004a76 <HAL_CAN_ActivateNotification+0x1e>
 8004a70:	7bfb      	ldrb	r3, [r7, #15]
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d109      	bne.n	8004a8a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	6959      	ldr	r1, [r3, #20]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	683a      	ldr	r2, [r7, #0]
 8004a82:	430a      	orrs	r2, r1
 8004a84:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004a86:	2300      	movs	r3, #0
 8004a88:	e006      	b.n	8004a98 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a8e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
  }
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3714      	adds	r7, #20
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b08a      	sub	sp, #40	@ 0x28
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004aac:	2300      	movs	r3, #0
 8004aae:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004ae0:	6a3b      	ldr	r3, [r7, #32]
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d07c      	beq.n	8004be4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	f003 0301 	and.w	r3, r3, #1
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d023      	beq.n	8004b3c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2201      	movs	r2, #1
 8004afa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	f003 0302 	and.w	r3, r3, #2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d003      	beq.n	8004b0e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 f983 	bl	8004e12 <HAL_CAN_TxMailbox0CompleteCallback>
 8004b0c:	e016      	b.n	8004b3c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	f003 0304 	and.w	r3, r3, #4
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d004      	beq.n	8004b22 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b1a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004b1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b20:	e00c      	b.n	8004b3c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	f003 0308 	and.w	r3, r3, #8
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d004      	beq.n	8004b36 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b2e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004b32:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b34:	e002      	b.n	8004b3c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f989 	bl	8004e4e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d024      	beq.n	8004b90 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004b4e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d003      	beq.n	8004b62 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f963 	bl	8004e26 <HAL_CAN_TxMailbox1CompleteCallback>
 8004b60:	e016      	b.n	8004b90 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d004      	beq.n	8004b76 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b6e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004b72:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b74:	e00c      	b.n	8004b90 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d004      	beq.n	8004b8a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004b86:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b88:	e002      	b.n	8004b90 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 f969 	bl	8004e62 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d024      	beq.n	8004be4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004ba2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d003      	beq.n	8004bb6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f943 	bl	8004e3a <HAL_CAN_TxMailbox2CompleteCallback>
 8004bb4:	e016      	b.n	8004be4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d004      	beq.n	8004bca <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004bc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bc8:	e00c      	b.n	8004be4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d004      	beq.n	8004bde <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bda:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bdc:	e002      	b.n	8004be4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 f949 	bl	8004e76 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004be4:	6a3b      	ldr	r3, [r7, #32]
 8004be6:	f003 0308 	and.w	r3, r3, #8
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00c      	beq.n	8004c08 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	f003 0310 	and.w	r3, r3, #16
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d007      	beq.n	8004c08 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bfa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004bfe:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2210      	movs	r2, #16
 8004c06:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004c08:	6a3b      	ldr	r3, [r7, #32]
 8004c0a:	f003 0304 	and.w	r3, r3, #4
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00b      	beq.n	8004c2a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	f003 0308 	and.w	r3, r3, #8
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d006      	beq.n	8004c2a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2208      	movs	r2, #8
 8004c22:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 f93a 	bl	8004e9e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004c2a:	6a3b      	ldr	r3, [r7, #32]
 8004c2c:	f003 0302 	and.w	r3, r3, #2
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d009      	beq.n	8004c48 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	f003 0303 	and.w	r3, r3, #3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d002      	beq.n	8004c48 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f921 	bl	8004e8a <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004c48:	6a3b      	ldr	r3, [r7, #32]
 8004c4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00c      	beq.n	8004c6c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	f003 0310 	and.w	r3, r3, #16
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d007      	beq.n	8004c6c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004c62:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2210      	movs	r2, #16
 8004c6a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004c6c:	6a3b      	ldr	r3, [r7, #32]
 8004c6e:	f003 0320 	and.w	r3, r3, #32
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00b      	beq.n	8004c8e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	f003 0308 	and.w	r3, r3, #8
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d006      	beq.n	8004c8e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2208      	movs	r2, #8
 8004c86:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 f91c 	bl	8004ec6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004c8e:	6a3b      	ldr	r3, [r7, #32]
 8004c90:	f003 0310 	and.w	r3, r3, #16
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d009      	beq.n	8004cac <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	f003 0303 	and.w	r3, r3, #3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d002      	beq.n	8004cac <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 f903 	bl	8004eb2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004cac:	6a3b      	ldr	r3, [r7, #32]
 8004cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00b      	beq.n	8004cce <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	f003 0310 	and.w	r3, r3, #16
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d006      	beq.n	8004cce <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2210      	movs	r2, #16
 8004cc6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 f906 	bl	8004eda <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004cce:	6a3b      	ldr	r3, [r7, #32]
 8004cd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d00b      	beq.n	8004cf0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	f003 0308 	and.w	r3, r3, #8
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d006      	beq.n	8004cf0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2208      	movs	r2, #8
 8004ce8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 f8ff 	bl	8004eee <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004cf0:	6a3b      	ldr	r3, [r7, #32]
 8004cf2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d07b      	beq.n	8004df2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	f003 0304 	and.w	r3, r3, #4
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d072      	beq.n	8004dea <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004d04:	6a3b      	ldr	r3, [r7, #32]
 8004d06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d008      	beq.n	8004d20 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d003      	beq.n	8004d20 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d1a:	f043 0301 	orr.w	r3, r3, #1
 8004d1e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004d20:	6a3b      	ldr	r3, [r7, #32]
 8004d22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d008      	beq.n	8004d3c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d003      	beq.n	8004d3c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d36:	f043 0302 	orr.w	r3, r3, #2
 8004d3a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004d3c:	6a3b      	ldr	r3, [r7, #32]
 8004d3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d008      	beq.n	8004d58 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d003      	beq.n	8004d58 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d52:	f043 0304 	orr.w	r3, r3, #4
 8004d56:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004d58:	6a3b      	ldr	r3, [r7, #32]
 8004d5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d043      	beq.n	8004dea <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d03e      	beq.n	8004dea <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004d72:	2b60      	cmp	r3, #96	@ 0x60
 8004d74:	d02b      	beq.n	8004dce <HAL_CAN_IRQHandler+0x32a>
 8004d76:	2b60      	cmp	r3, #96	@ 0x60
 8004d78:	d82e      	bhi.n	8004dd8 <HAL_CAN_IRQHandler+0x334>
 8004d7a:	2b50      	cmp	r3, #80	@ 0x50
 8004d7c:	d022      	beq.n	8004dc4 <HAL_CAN_IRQHandler+0x320>
 8004d7e:	2b50      	cmp	r3, #80	@ 0x50
 8004d80:	d82a      	bhi.n	8004dd8 <HAL_CAN_IRQHandler+0x334>
 8004d82:	2b40      	cmp	r3, #64	@ 0x40
 8004d84:	d019      	beq.n	8004dba <HAL_CAN_IRQHandler+0x316>
 8004d86:	2b40      	cmp	r3, #64	@ 0x40
 8004d88:	d826      	bhi.n	8004dd8 <HAL_CAN_IRQHandler+0x334>
 8004d8a:	2b30      	cmp	r3, #48	@ 0x30
 8004d8c:	d010      	beq.n	8004db0 <HAL_CAN_IRQHandler+0x30c>
 8004d8e:	2b30      	cmp	r3, #48	@ 0x30
 8004d90:	d822      	bhi.n	8004dd8 <HAL_CAN_IRQHandler+0x334>
 8004d92:	2b10      	cmp	r3, #16
 8004d94:	d002      	beq.n	8004d9c <HAL_CAN_IRQHandler+0x2f8>
 8004d96:	2b20      	cmp	r3, #32
 8004d98:	d005      	beq.n	8004da6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004d9a:	e01d      	b.n	8004dd8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d9e:	f043 0308 	orr.w	r3, r3, #8
 8004da2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004da4:	e019      	b.n	8004dda <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da8:	f043 0310 	orr.w	r3, r3, #16
 8004dac:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004dae:	e014      	b.n	8004dda <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db2:	f043 0320 	orr.w	r3, r3, #32
 8004db6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004db8:	e00f      	b.n	8004dda <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004dc0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004dc2:	e00a      	b.n	8004dda <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dca:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004dcc:	e005      	b.n	8004dda <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dd4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004dd6:	e000      	b.n	8004dda <HAL_CAN_IRQHandler+0x336>
            break;
 8004dd8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	699a      	ldr	r2, [r3, #24]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004de8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2204      	movs	r2, #4
 8004df0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d008      	beq.n	8004e0a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 f87c 	bl	8004f02 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004e0a:	bf00      	nop
 8004e0c:	3728      	adds	r7, #40	@ 0x28
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004e12:	b480      	push	{r7}
 8004e14:	b083      	sub	sp, #12
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004e1a:	bf00      	nop
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004e26:	b480      	push	{r7}
 8004e28:	b083      	sub	sp, #12
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004e2e:	bf00      	nop
 8004e30:	370c      	adds	r7, #12
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr

08004e3a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b083      	sub	sp, #12
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004e42:	bf00      	nop
 8004e44:	370c      	adds	r7, #12
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr

08004e4e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004e4e:	b480      	push	{r7}
 8004e50:	b083      	sub	sp, #12
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004e56:	bf00      	nop
 8004e58:	370c      	adds	r7, #12
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr

08004e62 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004e62:	b480      	push	{r7}
 8004e64:	b083      	sub	sp, #12
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004e6a:	bf00      	nop
 8004e6c:	370c      	adds	r7, #12
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr

08004e76 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004e76:	b480      	push	{r7}
 8004e78:	b083      	sub	sp, #12
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004e7e:	bf00      	nop
 8004e80:	370c      	adds	r7, #12
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr

08004e8a <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004e8a:	b480      	push	{r7}
 8004e8c:	b083      	sub	sp, #12
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8004e92:	bf00      	nop
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr

08004e9e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	b083      	sub	sp, #12
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004ea6:	bf00      	nop
 8004ea8:	370c      	adds	r7, #12
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr

08004eb2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004eb2:	b480      	push	{r7}
 8004eb4:	b083      	sub	sp, #12
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004eba:	bf00      	nop
 8004ebc:	370c      	adds	r7, #12
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr

08004ec6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b083      	sub	sp, #12
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004ece:	bf00      	nop
 8004ed0:	370c      	adds	r7, #12
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr

08004eda <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004eda:	b480      	push	{r7}
 8004edc:	b083      	sub	sp, #12
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004ee2:	bf00      	nop
 8004ee4:	370c      	adds	r7, #12
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr

08004eee <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004eee:	b480      	push	{r7}
 8004ef0:	b083      	sub	sp, #12
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004ef6:	bf00      	nop
 8004ef8:	370c      	adds	r7, #12
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr

08004f02 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004f02:	b480      	push	{r7}
 8004f04:	b083      	sub	sp, #12
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004f0a:	bf00      	nop
 8004f0c:	370c      	adds	r7, #12
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
	...

08004f18 <__NVIC_SetPriorityGrouping>:
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f003 0307 	and.w	r3, r3, #7
 8004f26:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f28:	4b0c      	ldr	r3, [pc, #48]	@ (8004f5c <__NVIC_SetPriorityGrouping+0x44>)
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f2e:	68ba      	ldr	r2, [r7, #8]
 8004f30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004f34:	4013      	ands	r3, r2
 8004f36:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004f44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f4a:	4a04      	ldr	r2, [pc, #16]	@ (8004f5c <__NVIC_SetPriorityGrouping+0x44>)
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	60d3      	str	r3, [r2, #12]
}
 8004f50:	bf00      	nop
 8004f52:	3714      	adds	r7, #20
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr
 8004f5c:	e000ed00 	.word	0xe000ed00

08004f60 <__NVIC_GetPriorityGrouping>:
{
 8004f60:	b480      	push	{r7}
 8004f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f64:	4b04      	ldr	r3, [pc, #16]	@ (8004f78 <__NVIC_GetPriorityGrouping+0x18>)
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	0a1b      	lsrs	r3, r3, #8
 8004f6a:	f003 0307 	and.w	r3, r3, #7
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr
 8004f78:	e000ed00 	.word	0xe000ed00

08004f7c <__NVIC_EnableIRQ>:
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	4603      	mov	r3, r0
 8004f84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	db0b      	blt.n	8004fa6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f8e:	79fb      	ldrb	r3, [r7, #7]
 8004f90:	f003 021f 	and.w	r2, r3, #31
 8004f94:	4907      	ldr	r1, [pc, #28]	@ (8004fb4 <__NVIC_EnableIRQ+0x38>)
 8004f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f9a:	095b      	lsrs	r3, r3, #5
 8004f9c:	2001      	movs	r0, #1
 8004f9e:	fa00 f202 	lsl.w	r2, r0, r2
 8004fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004fa6:	bf00      	nop
 8004fa8:	370c      	adds	r7, #12
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	e000e100 	.word	0xe000e100

08004fb8 <__NVIC_SetPriority>:
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	6039      	str	r1, [r7, #0]
 8004fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	db0a      	blt.n	8004fe2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	b2da      	uxtb	r2, r3
 8004fd0:	490c      	ldr	r1, [pc, #48]	@ (8005004 <__NVIC_SetPriority+0x4c>)
 8004fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fd6:	0112      	lsls	r2, r2, #4
 8004fd8:	b2d2      	uxtb	r2, r2
 8004fda:	440b      	add	r3, r1
 8004fdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004fe0:	e00a      	b.n	8004ff8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	b2da      	uxtb	r2, r3
 8004fe6:	4908      	ldr	r1, [pc, #32]	@ (8005008 <__NVIC_SetPriority+0x50>)
 8004fe8:	79fb      	ldrb	r3, [r7, #7]
 8004fea:	f003 030f 	and.w	r3, r3, #15
 8004fee:	3b04      	subs	r3, #4
 8004ff0:	0112      	lsls	r2, r2, #4
 8004ff2:	b2d2      	uxtb	r2, r2
 8004ff4:	440b      	add	r3, r1
 8004ff6:	761a      	strb	r2, [r3, #24]
}
 8004ff8:	bf00      	nop
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr
 8005004:	e000e100 	.word	0xe000e100
 8005008:	e000ed00 	.word	0xe000ed00

0800500c <NVIC_EncodePriority>:
{
 800500c:	b480      	push	{r7}
 800500e:	b089      	sub	sp, #36	@ 0x24
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f003 0307 	and.w	r3, r3, #7
 800501e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	f1c3 0307 	rsb	r3, r3, #7
 8005026:	2b04      	cmp	r3, #4
 8005028:	bf28      	it	cs
 800502a:	2304      	movcs	r3, #4
 800502c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	3304      	adds	r3, #4
 8005032:	2b06      	cmp	r3, #6
 8005034:	d902      	bls.n	800503c <NVIC_EncodePriority+0x30>
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	3b03      	subs	r3, #3
 800503a:	e000      	b.n	800503e <NVIC_EncodePriority+0x32>
 800503c:	2300      	movs	r3, #0
 800503e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005040:	f04f 32ff 	mov.w	r2, #4294967295
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	fa02 f303 	lsl.w	r3, r2, r3
 800504a:	43da      	mvns	r2, r3
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	401a      	ands	r2, r3
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005054:	f04f 31ff 	mov.w	r1, #4294967295
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	fa01 f303 	lsl.w	r3, r1, r3
 800505e:	43d9      	mvns	r1, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005064:	4313      	orrs	r3, r2
}
 8005066:	4618      	mov	r0, r3
 8005068:	3724      	adds	r7, #36	@ 0x24
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
	...

08005074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	3b01      	subs	r3, #1
 8005080:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005084:	d301      	bcc.n	800508a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005086:	2301      	movs	r3, #1
 8005088:	e00f      	b.n	80050aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800508a:	4a0a      	ldr	r2, [pc, #40]	@ (80050b4 <SysTick_Config+0x40>)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	3b01      	subs	r3, #1
 8005090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005092:	210f      	movs	r1, #15
 8005094:	f04f 30ff 	mov.w	r0, #4294967295
 8005098:	f7ff ff8e 	bl	8004fb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800509c:	4b05      	ldr	r3, [pc, #20]	@ (80050b4 <SysTick_Config+0x40>)
 800509e:	2200      	movs	r2, #0
 80050a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050a2:	4b04      	ldr	r3, [pc, #16]	@ (80050b4 <SysTick_Config+0x40>)
 80050a4:	2207      	movs	r2, #7
 80050a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3708      	adds	r7, #8
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	e000e010 	.word	0xe000e010

080050b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f7ff ff29 	bl	8004f18 <__NVIC_SetPriorityGrouping>
}
 80050c6:	bf00      	nop
 80050c8:	3708      	adds	r7, #8
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b086      	sub	sp, #24
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	4603      	mov	r3, r0
 80050d6:	60b9      	str	r1, [r7, #8]
 80050d8:	607a      	str	r2, [r7, #4]
 80050da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80050dc:	2300      	movs	r3, #0
 80050de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80050e0:	f7ff ff3e 	bl	8004f60 <__NVIC_GetPriorityGrouping>
 80050e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	68b9      	ldr	r1, [r7, #8]
 80050ea:	6978      	ldr	r0, [r7, #20]
 80050ec:	f7ff ff8e 	bl	800500c <NVIC_EncodePriority>
 80050f0:	4602      	mov	r2, r0
 80050f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050f6:	4611      	mov	r1, r2
 80050f8:	4618      	mov	r0, r3
 80050fa:	f7ff ff5d 	bl	8004fb8 <__NVIC_SetPriority>
}
 80050fe:	bf00      	nop
 8005100:	3718      	adds	r7, #24
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}

08005106 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005106:	b580      	push	{r7, lr}
 8005108:	b082      	sub	sp, #8
 800510a:	af00      	add	r7, sp, #0
 800510c:	4603      	mov	r3, r0
 800510e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005114:	4618      	mov	r0, r3
 8005116:	f7ff ff31 	bl	8004f7c <__NVIC_EnableIRQ>
}
 800511a:	bf00      	nop
 800511c:	3708      	adds	r7, #8
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}

08005122 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005122:	b580      	push	{r7, lr}
 8005124:	b082      	sub	sp, #8
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f7ff ffa2 	bl	8005074 <SysTick_Config>
 8005130:	4603      	mov	r3, r0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3708      	adds	r7, #8
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
	...

0800513c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800513c:	b480      	push	{r7}
 800513e:	b089      	sub	sp, #36	@ 0x24
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005146:	2300      	movs	r3, #0
 8005148:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800514a:	2300      	movs	r3, #0
 800514c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800514e:	2300      	movs	r3, #0
 8005150:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005152:	2300      	movs	r3, #0
 8005154:	61fb      	str	r3, [r7, #28]
 8005156:	e16b      	b.n	8005430 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005158:	2201      	movs	r2, #1
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	fa02 f303 	lsl.w	r3, r2, r3
 8005160:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	697a      	ldr	r2, [r7, #20]
 8005168:	4013      	ands	r3, r2
 800516a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800516c:	693a      	ldr	r2, [r7, #16]
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	429a      	cmp	r2, r3
 8005172:	f040 815a 	bne.w	800542a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	f003 0303 	and.w	r3, r3, #3
 800517e:	2b01      	cmp	r3, #1
 8005180:	d005      	beq.n	800518e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800518a:	2b02      	cmp	r3, #2
 800518c:	d130      	bne.n	80051f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	005b      	lsls	r3, r3, #1
 8005198:	2203      	movs	r2, #3
 800519a:	fa02 f303 	lsl.w	r3, r2, r3
 800519e:	43db      	mvns	r3, r3
 80051a0:	69ba      	ldr	r2, [r7, #24]
 80051a2:	4013      	ands	r3, r2
 80051a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	68da      	ldr	r2, [r3, #12]
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	005b      	lsls	r3, r3, #1
 80051ae:	fa02 f303 	lsl.w	r3, r2, r3
 80051b2:	69ba      	ldr	r2, [r7, #24]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	69ba      	ldr	r2, [r7, #24]
 80051bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80051c4:	2201      	movs	r2, #1
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	fa02 f303 	lsl.w	r3, r2, r3
 80051cc:	43db      	mvns	r3, r3
 80051ce:	69ba      	ldr	r2, [r7, #24]
 80051d0:	4013      	ands	r3, r2
 80051d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	091b      	lsrs	r3, r3, #4
 80051da:	f003 0201 	and.w	r2, r3, #1
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	fa02 f303 	lsl.w	r3, r2, r3
 80051e4:	69ba      	ldr	r2, [r7, #24]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	69ba      	ldr	r2, [r7, #24]
 80051ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	f003 0303 	and.w	r3, r3, #3
 80051f8:	2b03      	cmp	r3, #3
 80051fa:	d017      	beq.n	800522c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	005b      	lsls	r3, r3, #1
 8005206:	2203      	movs	r2, #3
 8005208:	fa02 f303 	lsl.w	r3, r2, r3
 800520c:	43db      	mvns	r3, r3
 800520e:	69ba      	ldr	r2, [r7, #24]
 8005210:	4013      	ands	r3, r2
 8005212:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	689a      	ldr	r2, [r3, #8]
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	005b      	lsls	r3, r3, #1
 800521c:	fa02 f303 	lsl.w	r3, r2, r3
 8005220:	69ba      	ldr	r2, [r7, #24]
 8005222:	4313      	orrs	r3, r2
 8005224:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	69ba      	ldr	r2, [r7, #24]
 800522a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	f003 0303 	and.w	r3, r3, #3
 8005234:	2b02      	cmp	r3, #2
 8005236:	d123      	bne.n	8005280 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	08da      	lsrs	r2, r3, #3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	3208      	adds	r2, #8
 8005240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005244:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	f003 0307 	and.w	r3, r3, #7
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	220f      	movs	r2, #15
 8005250:	fa02 f303 	lsl.w	r3, r2, r3
 8005254:	43db      	mvns	r3, r3
 8005256:	69ba      	ldr	r2, [r7, #24]
 8005258:	4013      	ands	r3, r2
 800525a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	691a      	ldr	r2, [r3, #16]
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	f003 0307 	and.w	r3, r3, #7
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	fa02 f303 	lsl.w	r3, r2, r3
 800526c:	69ba      	ldr	r2, [r7, #24]
 800526e:	4313      	orrs	r3, r2
 8005270:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	08da      	lsrs	r2, r3, #3
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	3208      	adds	r2, #8
 800527a:	69b9      	ldr	r1, [r7, #24]
 800527c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	005b      	lsls	r3, r3, #1
 800528a:	2203      	movs	r2, #3
 800528c:	fa02 f303 	lsl.w	r3, r2, r3
 8005290:	43db      	mvns	r3, r3
 8005292:	69ba      	ldr	r2, [r7, #24]
 8005294:	4013      	ands	r3, r2
 8005296:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	f003 0203 	and.w	r2, r3, #3
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	005b      	lsls	r3, r3, #1
 80052a4:	fa02 f303 	lsl.w	r3, r2, r3
 80052a8:	69ba      	ldr	r2, [r7, #24]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	69ba      	ldr	r2, [r7, #24]
 80052b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	f000 80b4 	beq.w	800542a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052c2:	2300      	movs	r3, #0
 80052c4:	60fb      	str	r3, [r7, #12]
 80052c6:	4b60      	ldr	r3, [pc, #384]	@ (8005448 <HAL_GPIO_Init+0x30c>)
 80052c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ca:	4a5f      	ldr	r2, [pc, #380]	@ (8005448 <HAL_GPIO_Init+0x30c>)
 80052cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80052d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80052d2:	4b5d      	ldr	r3, [pc, #372]	@ (8005448 <HAL_GPIO_Init+0x30c>)
 80052d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052da:	60fb      	str	r3, [r7, #12]
 80052dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80052de:	4a5b      	ldr	r2, [pc, #364]	@ (800544c <HAL_GPIO_Init+0x310>)
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	089b      	lsrs	r3, r3, #2
 80052e4:	3302      	adds	r3, #2
 80052e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	f003 0303 	and.w	r3, r3, #3
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	220f      	movs	r2, #15
 80052f6:	fa02 f303 	lsl.w	r3, r2, r3
 80052fa:	43db      	mvns	r3, r3
 80052fc:	69ba      	ldr	r2, [r7, #24]
 80052fe:	4013      	ands	r3, r2
 8005300:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a52      	ldr	r2, [pc, #328]	@ (8005450 <HAL_GPIO_Init+0x314>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d02b      	beq.n	8005362 <HAL_GPIO_Init+0x226>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a51      	ldr	r2, [pc, #324]	@ (8005454 <HAL_GPIO_Init+0x318>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d025      	beq.n	800535e <HAL_GPIO_Init+0x222>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a50      	ldr	r2, [pc, #320]	@ (8005458 <HAL_GPIO_Init+0x31c>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d01f      	beq.n	800535a <HAL_GPIO_Init+0x21e>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a4f      	ldr	r2, [pc, #316]	@ (800545c <HAL_GPIO_Init+0x320>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d019      	beq.n	8005356 <HAL_GPIO_Init+0x21a>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a4e      	ldr	r2, [pc, #312]	@ (8005460 <HAL_GPIO_Init+0x324>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d013      	beq.n	8005352 <HAL_GPIO_Init+0x216>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a4d      	ldr	r2, [pc, #308]	@ (8005464 <HAL_GPIO_Init+0x328>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d00d      	beq.n	800534e <HAL_GPIO_Init+0x212>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a4c      	ldr	r2, [pc, #304]	@ (8005468 <HAL_GPIO_Init+0x32c>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d007      	beq.n	800534a <HAL_GPIO_Init+0x20e>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a4b      	ldr	r2, [pc, #300]	@ (800546c <HAL_GPIO_Init+0x330>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d101      	bne.n	8005346 <HAL_GPIO_Init+0x20a>
 8005342:	2307      	movs	r3, #7
 8005344:	e00e      	b.n	8005364 <HAL_GPIO_Init+0x228>
 8005346:	2308      	movs	r3, #8
 8005348:	e00c      	b.n	8005364 <HAL_GPIO_Init+0x228>
 800534a:	2306      	movs	r3, #6
 800534c:	e00a      	b.n	8005364 <HAL_GPIO_Init+0x228>
 800534e:	2305      	movs	r3, #5
 8005350:	e008      	b.n	8005364 <HAL_GPIO_Init+0x228>
 8005352:	2304      	movs	r3, #4
 8005354:	e006      	b.n	8005364 <HAL_GPIO_Init+0x228>
 8005356:	2303      	movs	r3, #3
 8005358:	e004      	b.n	8005364 <HAL_GPIO_Init+0x228>
 800535a:	2302      	movs	r3, #2
 800535c:	e002      	b.n	8005364 <HAL_GPIO_Init+0x228>
 800535e:	2301      	movs	r3, #1
 8005360:	e000      	b.n	8005364 <HAL_GPIO_Init+0x228>
 8005362:	2300      	movs	r3, #0
 8005364:	69fa      	ldr	r2, [r7, #28]
 8005366:	f002 0203 	and.w	r2, r2, #3
 800536a:	0092      	lsls	r2, r2, #2
 800536c:	4093      	lsls	r3, r2
 800536e:	69ba      	ldr	r2, [r7, #24]
 8005370:	4313      	orrs	r3, r2
 8005372:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005374:	4935      	ldr	r1, [pc, #212]	@ (800544c <HAL_GPIO_Init+0x310>)
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	089b      	lsrs	r3, r3, #2
 800537a:	3302      	adds	r3, #2
 800537c:	69ba      	ldr	r2, [r7, #24]
 800537e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005382:	4b3b      	ldr	r3, [pc, #236]	@ (8005470 <HAL_GPIO_Init+0x334>)
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	43db      	mvns	r3, r3
 800538c:	69ba      	ldr	r2, [r7, #24]
 800538e:	4013      	ands	r3, r2
 8005390:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d003      	beq.n	80053a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800539e:	69ba      	ldr	r2, [r7, #24]
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80053a6:	4a32      	ldr	r2, [pc, #200]	@ (8005470 <HAL_GPIO_Init+0x334>)
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80053ac:	4b30      	ldr	r3, [pc, #192]	@ (8005470 <HAL_GPIO_Init+0x334>)
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	43db      	mvns	r3, r3
 80053b6:	69ba      	ldr	r2, [r7, #24]
 80053b8:	4013      	ands	r3, r2
 80053ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d003      	beq.n	80053d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80053c8:	69ba      	ldr	r2, [r7, #24]
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80053d0:	4a27      	ldr	r2, [pc, #156]	@ (8005470 <HAL_GPIO_Init+0x334>)
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80053d6:	4b26      	ldr	r3, [pc, #152]	@ (8005470 <HAL_GPIO_Init+0x334>)
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	43db      	mvns	r3, r3
 80053e0:	69ba      	ldr	r2, [r7, #24]
 80053e2:	4013      	ands	r3, r2
 80053e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d003      	beq.n	80053fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80053f2:	69ba      	ldr	r2, [r7, #24]
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80053fa:	4a1d      	ldr	r2, [pc, #116]	@ (8005470 <HAL_GPIO_Init+0x334>)
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005400:	4b1b      	ldr	r3, [pc, #108]	@ (8005470 <HAL_GPIO_Init+0x334>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	43db      	mvns	r3, r3
 800540a:	69ba      	ldr	r2, [r7, #24]
 800540c:	4013      	ands	r3, r2
 800540e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d003      	beq.n	8005424 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800541c:	69ba      	ldr	r2, [r7, #24]
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	4313      	orrs	r3, r2
 8005422:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005424:	4a12      	ldr	r2, [pc, #72]	@ (8005470 <HAL_GPIO_Init+0x334>)
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	3301      	adds	r3, #1
 800542e:	61fb      	str	r3, [r7, #28]
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	2b0f      	cmp	r3, #15
 8005434:	f67f ae90 	bls.w	8005158 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005438:	bf00      	nop
 800543a:	bf00      	nop
 800543c:	3724      	adds	r7, #36	@ 0x24
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	40023800 	.word	0x40023800
 800544c:	40013800 	.word	0x40013800
 8005450:	40020000 	.word	0x40020000
 8005454:	40020400 	.word	0x40020400
 8005458:	40020800 	.word	0x40020800
 800545c:	40020c00 	.word	0x40020c00
 8005460:	40021000 	.word	0x40021000
 8005464:	40021400 	.word	0x40021400
 8005468:	40021800 	.word	0x40021800
 800546c:	40021c00 	.word	0x40021c00
 8005470:	40013c00 	.word	0x40013c00

08005474 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	460b      	mov	r3, r1
 800547e:	807b      	strh	r3, [r7, #2]
 8005480:	4613      	mov	r3, r2
 8005482:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005484:	787b      	ldrb	r3, [r7, #1]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d003      	beq.n	8005492 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800548a:	887a      	ldrh	r2, [r7, #2]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005490:	e003      	b.n	800549a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005492:	887b      	ldrh	r3, [r7, #2]
 8005494:	041a      	lsls	r2, r3, #16
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	619a      	str	r2, [r3, #24]
}
 800549a:	bf00      	nop
 800549c:	370c      	adds	r7, #12
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr

080054a6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80054a6:	b480      	push	{r7}
 80054a8:	b085      	sub	sp, #20
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
 80054ae:	460b      	mov	r3, r1
 80054b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80054b8:	887a      	ldrh	r2, [r7, #2]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	4013      	ands	r3, r2
 80054be:	041a      	lsls	r2, r3, #16
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	43d9      	mvns	r1, r3
 80054c4:	887b      	ldrh	r3, [r7, #2]
 80054c6:	400b      	ands	r3, r1
 80054c8:	431a      	orrs	r2, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	619a      	str	r2, [r3, #24]
}
 80054ce:	bf00      	nop
 80054d0:	3714      	adds	r7, #20
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
	...

080054dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b086      	sub	sp, #24
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d101      	bne.n	80054ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e267      	b.n	80059be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 0301 	and.w	r3, r3, #1
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d075      	beq.n	80055e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80054fa:	4b88      	ldr	r3, [pc, #544]	@ (800571c <HAL_RCC_OscConfig+0x240>)
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	f003 030c 	and.w	r3, r3, #12
 8005502:	2b04      	cmp	r3, #4
 8005504:	d00c      	beq.n	8005520 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005506:	4b85      	ldr	r3, [pc, #532]	@ (800571c <HAL_RCC_OscConfig+0x240>)
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800550e:	2b08      	cmp	r3, #8
 8005510:	d112      	bne.n	8005538 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005512:	4b82      	ldr	r3, [pc, #520]	@ (800571c <HAL_RCC_OscConfig+0x240>)
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800551a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800551e:	d10b      	bne.n	8005538 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005520:	4b7e      	ldr	r3, [pc, #504]	@ (800571c <HAL_RCC_OscConfig+0x240>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005528:	2b00      	cmp	r3, #0
 800552a:	d05b      	beq.n	80055e4 <HAL_RCC_OscConfig+0x108>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d157      	bne.n	80055e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e242      	b.n	80059be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005540:	d106      	bne.n	8005550 <HAL_RCC_OscConfig+0x74>
 8005542:	4b76      	ldr	r3, [pc, #472]	@ (800571c <HAL_RCC_OscConfig+0x240>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a75      	ldr	r2, [pc, #468]	@ (800571c <HAL_RCC_OscConfig+0x240>)
 8005548:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800554c:	6013      	str	r3, [r2, #0]
 800554e:	e01d      	b.n	800558c <HAL_RCC_OscConfig+0xb0>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005558:	d10c      	bne.n	8005574 <HAL_RCC_OscConfig+0x98>
 800555a:	4b70      	ldr	r3, [pc, #448]	@ (800571c <HAL_RCC_OscConfig+0x240>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a6f      	ldr	r2, [pc, #444]	@ (800571c <HAL_RCC_OscConfig+0x240>)
 8005560:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005564:	6013      	str	r3, [r2, #0]
 8005566:	4b6d      	ldr	r3, [pc, #436]	@ (800571c <HAL_RCC_OscConfig+0x240>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a6c      	ldr	r2, [pc, #432]	@ (800571c <HAL_RCC_OscConfig+0x240>)
 800556c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005570:	6013      	str	r3, [r2, #0]
 8005572:	e00b      	b.n	800558c <HAL_RCC_OscConfig+0xb0>
 8005574:	4b69      	ldr	r3, [pc, #420]	@ (800571c <HAL_RCC_OscConfig+0x240>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a68      	ldr	r2, [pc, #416]	@ (800571c <HAL_RCC_OscConfig+0x240>)
 800557a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800557e:	6013      	str	r3, [r2, #0]
 8005580:	4b66      	ldr	r3, [pc, #408]	@ (800571c <HAL_RCC_OscConfig+0x240>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a65      	ldr	r2, [pc, #404]	@ (800571c <HAL_RCC_OscConfig+0x240>)
 8005586:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800558a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d013      	beq.n	80055bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005594:	f7fe ff42 	bl	800441c <HAL_GetTick>
 8005598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800559a:	e008      	b.n	80055ae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800559c:	f7fe ff3e 	bl	800441c <HAL_GetTick>
 80055a0:	4602      	mov	r2, r0
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	2b64      	cmp	r3, #100	@ 0x64
 80055a8:	d901      	bls.n	80055ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e207      	b.n	80059be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055ae:	4b5b      	ldr	r3, [pc, #364]	@ (800571c <HAL_RCC_OscConfig+0x240>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d0f0      	beq.n	800559c <HAL_RCC_OscConfig+0xc0>
 80055ba:	e014      	b.n	80055e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055bc:	f7fe ff2e 	bl	800441c <HAL_GetTick>
 80055c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055c2:	e008      	b.n	80055d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055c4:	f7fe ff2a 	bl	800441c <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	2b64      	cmp	r3, #100	@ 0x64
 80055d0:	d901      	bls.n	80055d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e1f3      	b.n	80059be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055d6:	4b51      	ldr	r3, [pc, #324]	@ (800571c <HAL_RCC_OscConfig+0x240>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1f0      	bne.n	80055c4 <HAL_RCC_OscConfig+0xe8>
 80055e2:	e000      	b.n	80055e6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0302 	and.w	r3, r3, #2
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d063      	beq.n	80056ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80055f2:	4b4a      	ldr	r3, [pc, #296]	@ (800571c <HAL_RCC_OscConfig+0x240>)
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	f003 030c 	and.w	r3, r3, #12
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00b      	beq.n	8005616 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055fe:	4b47      	ldr	r3, [pc, #284]	@ (800571c <HAL_RCC_OscConfig+0x240>)
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005606:	2b08      	cmp	r3, #8
 8005608:	d11c      	bne.n	8005644 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800560a:	4b44      	ldr	r3, [pc, #272]	@ (800571c <HAL_RCC_OscConfig+0x240>)
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005612:	2b00      	cmp	r3, #0
 8005614:	d116      	bne.n	8005644 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005616:	4b41      	ldr	r3, [pc, #260]	@ (800571c <HAL_RCC_OscConfig+0x240>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0302 	and.w	r3, r3, #2
 800561e:	2b00      	cmp	r3, #0
 8005620:	d005      	beq.n	800562e <HAL_RCC_OscConfig+0x152>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	2b01      	cmp	r3, #1
 8005628:	d001      	beq.n	800562e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e1c7      	b.n	80059be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800562e:	4b3b      	ldr	r3, [pc, #236]	@ (800571c <HAL_RCC_OscConfig+0x240>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	00db      	lsls	r3, r3, #3
 800563c:	4937      	ldr	r1, [pc, #220]	@ (800571c <HAL_RCC_OscConfig+0x240>)
 800563e:	4313      	orrs	r3, r2
 8005640:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005642:	e03a      	b.n	80056ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d020      	beq.n	800568e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800564c:	4b34      	ldr	r3, [pc, #208]	@ (8005720 <HAL_RCC_OscConfig+0x244>)
 800564e:	2201      	movs	r2, #1
 8005650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005652:	f7fe fee3 	bl	800441c <HAL_GetTick>
 8005656:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005658:	e008      	b.n	800566c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800565a:	f7fe fedf 	bl	800441c <HAL_GetTick>
 800565e:	4602      	mov	r2, r0
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	2b02      	cmp	r3, #2
 8005666:	d901      	bls.n	800566c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e1a8      	b.n	80059be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800566c:	4b2b      	ldr	r3, [pc, #172]	@ (800571c <HAL_RCC_OscConfig+0x240>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0302 	and.w	r3, r3, #2
 8005674:	2b00      	cmp	r3, #0
 8005676:	d0f0      	beq.n	800565a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005678:	4b28      	ldr	r3, [pc, #160]	@ (800571c <HAL_RCC_OscConfig+0x240>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	00db      	lsls	r3, r3, #3
 8005686:	4925      	ldr	r1, [pc, #148]	@ (800571c <HAL_RCC_OscConfig+0x240>)
 8005688:	4313      	orrs	r3, r2
 800568a:	600b      	str	r3, [r1, #0]
 800568c:	e015      	b.n	80056ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800568e:	4b24      	ldr	r3, [pc, #144]	@ (8005720 <HAL_RCC_OscConfig+0x244>)
 8005690:	2200      	movs	r2, #0
 8005692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005694:	f7fe fec2 	bl	800441c <HAL_GetTick>
 8005698:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800569a:	e008      	b.n	80056ae <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800569c:	f7fe febe 	bl	800441c <HAL_GetTick>
 80056a0:	4602      	mov	r2, r0
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	d901      	bls.n	80056ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	e187      	b.n	80059be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056ae:	4b1b      	ldr	r3, [pc, #108]	@ (800571c <HAL_RCC_OscConfig+0x240>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0302 	and.w	r3, r3, #2
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d1f0      	bne.n	800569c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0308 	and.w	r3, r3, #8
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d036      	beq.n	8005734 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	695b      	ldr	r3, [r3, #20]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d016      	beq.n	80056fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056ce:	4b15      	ldr	r3, [pc, #84]	@ (8005724 <HAL_RCC_OscConfig+0x248>)
 80056d0:	2201      	movs	r2, #1
 80056d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056d4:	f7fe fea2 	bl	800441c <HAL_GetTick>
 80056d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056da:	e008      	b.n	80056ee <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056dc:	f7fe fe9e 	bl	800441c <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d901      	bls.n	80056ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e167      	b.n	80059be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056ee:	4b0b      	ldr	r3, [pc, #44]	@ (800571c <HAL_RCC_OscConfig+0x240>)
 80056f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056f2:	f003 0302 	and.w	r3, r3, #2
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d0f0      	beq.n	80056dc <HAL_RCC_OscConfig+0x200>
 80056fa:	e01b      	b.n	8005734 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056fc:	4b09      	ldr	r3, [pc, #36]	@ (8005724 <HAL_RCC_OscConfig+0x248>)
 80056fe:	2200      	movs	r2, #0
 8005700:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005702:	f7fe fe8b 	bl	800441c <HAL_GetTick>
 8005706:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005708:	e00e      	b.n	8005728 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800570a:	f7fe fe87 	bl	800441c <HAL_GetTick>
 800570e:	4602      	mov	r2, r0
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	2b02      	cmp	r3, #2
 8005716:	d907      	bls.n	8005728 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	e150      	b.n	80059be <HAL_RCC_OscConfig+0x4e2>
 800571c:	40023800 	.word	0x40023800
 8005720:	42470000 	.word	0x42470000
 8005724:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005728:	4b88      	ldr	r3, [pc, #544]	@ (800594c <HAL_RCC_OscConfig+0x470>)
 800572a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800572c:	f003 0302 	and.w	r3, r3, #2
 8005730:	2b00      	cmp	r3, #0
 8005732:	d1ea      	bne.n	800570a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 0304 	and.w	r3, r3, #4
 800573c:	2b00      	cmp	r3, #0
 800573e:	f000 8097 	beq.w	8005870 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005742:	2300      	movs	r3, #0
 8005744:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005746:	4b81      	ldr	r3, [pc, #516]	@ (800594c <HAL_RCC_OscConfig+0x470>)
 8005748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800574a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800574e:	2b00      	cmp	r3, #0
 8005750:	d10f      	bne.n	8005772 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005752:	2300      	movs	r3, #0
 8005754:	60bb      	str	r3, [r7, #8]
 8005756:	4b7d      	ldr	r3, [pc, #500]	@ (800594c <HAL_RCC_OscConfig+0x470>)
 8005758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800575a:	4a7c      	ldr	r2, [pc, #496]	@ (800594c <HAL_RCC_OscConfig+0x470>)
 800575c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005760:	6413      	str	r3, [r2, #64]	@ 0x40
 8005762:	4b7a      	ldr	r3, [pc, #488]	@ (800594c <HAL_RCC_OscConfig+0x470>)
 8005764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005766:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800576a:	60bb      	str	r3, [r7, #8]
 800576c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800576e:	2301      	movs	r3, #1
 8005770:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005772:	4b77      	ldr	r3, [pc, #476]	@ (8005950 <HAL_RCC_OscConfig+0x474>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800577a:	2b00      	cmp	r3, #0
 800577c:	d118      	bne.n	80057b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800577e:	4b74      	ldr	r3, [pc, #464]	@ (8005950 <HAL_RCC_OscConfig+0x474>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a73      	ldr	r2, [pc, #460]	@ (8005950 <HAL_RCC_OscConfig+0x474>)
 8005784:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005788:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800578a:	f7fe fe47 	bl	800441c <HAL_GetTick>
 800578e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005790:	e008      	b.n	80057a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005792:	f7fe fe43 	bl	800441c <HAL_GetTick>
 8005796:	4602      	mov	r2, r0
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	2b02      	cmp	r3, #2
 800579e:	d901      	bls.n	80057a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80057a0:	2303      	movs	r3, #3
 80057a2:	e10c      	b.n	80059be <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057a4:	4b6a      	ldr	r3, [pc, #424]	@ (8005950 <HAL_RCC_OscConfig+0x474>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d0f0      	beq.n	8005792 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d106      	bne.n	80057c6 <HAL_RCC_OscConfig+0x2ea>
 80057b8:	4b64      	ldr	r3, [pc, #400]	@ (800594c <HAL_RCC_OscConfig+0x470>)
 80057ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057bc:	4a63      	ldr	r2, [pc, #396]	@ (800594c <HAL_RCC_OscConfig+0x470>)
 80057be:	f043 0301 	orr.w	r3, r3, #1
 80057c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80057c4:	e01c      	b.n	8005800 <HAL_RCC_OscConfig+0x324>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	2b05      	cmp	r3, #5
 80057cc:	d10c      	bne.n	80057e8 <HAL_RCC_OscConfig+0x30c>
 80057ce:	4b5f      	ldr	r3, [pc, #380]	@ (800594c <HAL_RCC_OscConfig+0x470>)
 80057d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057d2:	4a5e      	ldr	r2, [pc, #376]	@ (800594c <HAL_RCC_OscConfig+0x470>)
 80057d4:	f043 0304 	orr.w	r3, r3, #4
 80057d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80057da:	4b5c      	ldr	r3, [pc, #368]	@ (800594c <HAL_RCC_OscConfig+0x470>)
 80057dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057de:	4a5b      	ldr	r2, [pc, #364]	@ (800594c <HAL_RCC_OscConfig+0x470>)
 80057e0:	f043 0301 	orr.w	r3, r3, #1
 80057e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80057e6:	e00b      	b.n	8005800 <HAL_RCC_OscConfig+0x324>
 80057e8:	4b58      	ldr	r3, [pc, #352]	@ (800594c <HAL_RCC_OscConfig+0x470>)
 80057ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057ec:	4a57      	ldr	r2, [pc, #348]	@ (800594c <HAL_RCC_OscConfig+0x470>)
 80057ee:	f023 0301 	bic.w	r3, r3, #1
 80057f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80057f4:	4b55      	ldr	r3, [pc, #340]	@ (800594c <HAL_RCC_OscConfig+0x470>)
 80057f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057f8:	4a54      	ldr	r2, [pc, #336]	@ (800594c <HAL_RCC_OscConfig+0x470>)
 80057fa:	f023 0304 	bic.w	r3, r3, #4
 80057fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d015      	beq.n	8005834 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005808:	f7fe fe08 	bl	800441c <HAL_GetTick>
 800580c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800580e:	e00a      	b.n	8005826 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005810:	f7fe fe04 	bl	800441c <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800581e:	4293      	cmp	r3, r2
 8005820:	d901      	bls.n	8005826 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e0cb      	b.n	80059be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005826:	4b49      	ldr	r3, [pc, #292]	@ (800594c <HAL_RCC_OscConfig+0x470>)
 8005828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800582a:	f003 0302 	and.w	r3, r3, #2
 800582e:	2b00      	cmp	r3, #0
 8005830:	d0ee      	beq.n	8005810 <HAL_RCC_OscConfig+0x334>
 8005832:	e014      	b.n	800585e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005834:	f7fe fdf2 	bl	800441c <HAL_GetTick>
 8005838:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800583a:	e00a      	b.n	8005852 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800583c:	f7fe fdee 	bl	800441c <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	f241 3288 	movw	r2, #5000	@ 0x1388
 800584a:	4293      	cmp	r3, r2
 800584c:	d901      	bls.n	8005852 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e0b5      	b.n	80059be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005852:	4b3e      	ldr	r3, [pc, #248]	@ (800594c <HAL_RCC_OscConfig+0x470>)
 8005854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005856:	f003 0302 	and.w	r3, r3, #2
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1ee      	bne.n	800583c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800585e:	7dfb      	ldrb	r3, [r7, #23]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d105      	bne.n	8005870 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005864:	4b39      	ldr	r3, [pc, #228]	@ (800594c <HAL_RCC_OscConfig+0x470>)
 8005866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005868:	4a38      	ldr	r2, [pc, #224]	@ (800594c <HAL_RCC_OscConfig+0x470>)
 800586a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800586e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	699b      	ldr	r3, [r3, #24]
 8005874:	2b00      	cmp	r3, #0
 8005876:	f000 80a1 	beq.w	80059bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800587a:	4b34      	ldr	r3, [pc, #208]	@ (800594c <HAL_RCC_OscConfig+0x470>)
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	f003 030c 	and.w	r3, r3, #12
 8005882:	2b08      	cmp	r3, #8
 8005884:	d05c      	beq.n	8005940 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	2b02      	cmp	r3, #2
 800588c:	d141      	bne.n	8005912 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800588e:	4b31      	ldr	r3, [pc, #196]	@ (8005954 <HAL_RCC_OscConfig+0x478>)
 8005890:	2200      	movs	r2, #0
 8005892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005894:	f7fe fdc2 	bl	800441c <HAL_GetTick>
 8005898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800589a:	e008      	b.n	80058ae <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800589c:	f7fe fdbe 	bl	800441c <HAL_GetTick>
 80058a0:	4602      	mov	r2, r0
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	2b02      	cmp	r3, #2
 80058a8:	d901      	bls.n	80058ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80058aa:	2303      	movs	r3, #3
 80058ac:	e087      	b.n	80059be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058ae:	4b27      	ldr	r3, [pc, #156]	@ (800594c <HAL_RCC_OscConfig+0x470>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d1f0      	bne.n	800589c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	69da      	ldr	r2, [r3, #28]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a1b      	ldr	r3, [r3, #32]
 80058c2:	431a      	orrs	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058c8:	019b      	lsls	r3, r3, #6
 80058ca:	431a      	orrs	r2, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058d0:	085b      	lsrs	r3, r3, #1
 80058d2:	3b01      	subs	r3, #1
 80058d4:	041b      	lsls	r3, r3, #16
 80058d6:	431a      	orrs	r2, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058dc:	061b      	lsls	r3, r3, #24
 80058de:	491b      	ldr	r1, [pc, #108]	@ (800594c <HAL_RCC_OscConfig+0x470>)
 80058e0:	4313      	orrs	r3, r2
 80058e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058e4:	4b1b      	ldr	r3, [pc, #108]	@ (8005954 <HAL_RCC_OscConfig+0x478>)
 80058e6:	2201      	movs	r2, #1
 80058e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058ea:	f7fe fd97 	bl	800441c <HAL_GetTick>
 80058ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058f0:	e008      	b.n	8005904 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058f2:	f7fe fd93 	bl	800441c <HAL_GetTick>
 80058f6:	4602      	mov	r2, r0
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d901      	bls.n	8005904 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005900:	2303      	movs	r3, #3
 8005902:	e05c      	b.n	80059be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005904:	4b11      	ldr	r3, [pc, #68]	@ (800594c <HAL_RCC_OscConfig+0x470>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d0f0      	beq.n	80058f2 <HAL_RCC_OscConfig+0x416>
 8005910:	e054      	b.n	80059bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005912:	4b10      	ldr	r3, [pc, #64]	@ (8005954 <HAL_RCC_OscConfig+0x478>)
 8005914:	2200      	movs	r2, #0
 8005916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005918:	f7fe fd80 	bl	800441c <HAL_GetTick>
 800591c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800591e:	e008      	b.n	8005932 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005920:	f7fe fd7c 	bl	800441c <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	2b02      	cmp	r3, #2
 800592c:	d901      	bls.n	8005932 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e045      	b.n	80059be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005932:	4b06      	ldr	r3, [pc, #24]	@ (800594c <HAL_RCC_OscConfig+0x470>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1f0      	bne.n	8005920 <HAL_RCC_OscConfig+0x444>
 800593e:	e03d      	b.n	80059bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	699b      	ldr	r3, [r3, #24]
 8005944:	2b01      	cmp	r3, #1
 8005946:	d107      	bne.n	8005958 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e038      	b.n	80059be <HAL_RCC_OscConfig+0x4e2>
 800594c:	40023800 	.word	0x40023800
 8005950:	40007000 	.word	0x40007000
 8005954:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005958:	4b1b      	ldr	r3, [pc, #108]	@ (80059c8 <HAL_RCC_OscConfig+0x4ec>)
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	699b      	ldr	r3, [r3, #24]
 8005962:	2b01      	cmp	r3, #1
 8005964:	d028      	beq.n	80059b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005970:	429a      	cmp	r2, r3
 8005972:	d121      	bne.n	80059b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800597e:	429a      	cmp	r2, r3
 8005980:	d11a      	bne.n	80059b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005982:	68fa      	ldr	r2, [r7, #12]
 8005984:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005988:	4013      	ands	r3, r2
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800598e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005990:	4293      	cmp	r3, r2
 8005992:	d111      	bne.n	80059b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800599e:	085b      	lsrs	r3, r3, #1
 80059a0:	3b01      	subs	r3, #1
 80059a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d107      	bne.n	80059b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d001      	beq.n	80059bc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e000      	b.n	80059be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3718      	adds	r7, #24
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	40023800 	.word	0x40023800

080059cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d101      	bne.n	80059e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	e0cc      	b.n	8005b7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80059e0:	4b68      	ldr	r3, [pc, #416]	@ (8005b84 <HAL_RCC_ClockConfig+0x1b8>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 0307 	and.w	r3, r3, #7
 80059e8:	683a      	ldr	r2, [r7, #0]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d90c      	bls.n	8005a08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059ee:	4b65      	ldr	r3, [pc, #404]	@ (8005b84 <HAL_RCC_ClockConfig+0x1b8>)
 80059f0:	683a      	ldr	r2, [r7, #0]
 80059f2:	b2d2      	uxtb	r2, r2
 80059f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059f6:	4b63      	ldr	r3, [pc, #396]	@ (8005b84 <HAL_RCC_ClockConfig+0x1b8>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 0307 	and.w	r3, r3, #7
 80059fe:	683a      	ldr	r2, [r7, #0]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d001      	beq.n	8005a08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e0b8      	b.n	8005b7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0302 	and.w	r3, r3, #2
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d020      	beq.n	8005a56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f003 0304 	and.w	r3, r3, #4
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d005      	beq.n	8005a2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a20:	4b59      	ldr	r3, [pc, #356]	@ (8005b88 <HAL_RCC_ClockConfig+0x1bc>)
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	4a58      	ldr	r2, [pc, #352]	@ (8005b88 <HAL_RCC_ClockConfig+0x1bc>)
 8005a26:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005a2a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0308 	and.w	r3, r3, #8
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d005      	beq.n	8005a44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a38:	4b53      	ldr	r3, [pc, #332]	@ (8005b88 <HAL_RCC_ClockConfig+0x1bc>)
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	4a52      	ldr	r2, [pc, #328]	@ (8005b88 <HAL_RCC_ClockConfig+0x1bc>)
 8005a3e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005a42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a44:	4b50      	ldr	r3, [pc, #320]	@ (8005b88 <HAL_RCC_ClockConfig+0x1bc>)
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	494d      	ldr	r1, [pc, #308]	@ (8005b88 <HAL_RCC_ClockConfig+0x1bc>)
 8005a52:	4313      	orrs	r3, r2
 8005a54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 0301 	and.w	r3, r3, #1
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d044      	beq.n	8005aec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d107      	bne.n	8005a7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a6a:	4b47      	ldr	r3, [pc, #284]	@ (8005b88 <HAL_RCC_ClockConfig+0x1bc>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d119      	bne.n	8005aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e07f      	b.n	8005b7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d003      	beq.n	8005a8a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a86:	2b03      	cmp	r3, #3
 8005a88:	d107      	bne.n	8005a9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a8a:	4b3f      	ldr	r3, [pc, #252]	@ (8005b88 <HAL_RCC_ClockConfig+0x1bc>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d109      	bne.n	8005aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e06f      	b.n	8005b7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a9a:	4b3b      	ldr	r3, [pc, #236]	@ (8005b88 <HAL_RCC_ClockConfig+0x1bc>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0302 	and.w	r3, r3, #2
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d101      	bne.n	8005aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e067      	b.n	8005b7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005aaa:	4b37      	ldr	r3, [pc, #220]	@ (8005b88 <HAL_RCC_ClockConfig+0x1bc>)
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	f023 0203 	bic.w	r2, r3, #3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	4934      	ldr	r1, [pc, #208]	@ (8005b88 <HAL_RCC_ClockConfig+0x1bc>)
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005abc:	f7fe fcae 	bl	800441c <HAL_GetTick>
 8005ac0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ac2:	e00a      	b.n	8005ada <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ac4:	f7fe fcaa 	bl	800441c <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d901      	bls.n	8005ada <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	e04f      	b.n	8005b7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ada:	4b2b      	ldr	r3, [pc, #172]	@ (8005b88 <HAL_RCC_ClockConfig+0x1bc>)
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	f003 020c 	and.w	r2, r3, #12
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d1eb      	bne.n	8005ac4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005aec:	4b25      	ldr	r3, [pc, #148]	@ (8005b84 <HAL_RCC_ClockConfig+0x1b8>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 0307 	and.w	r3, r3, #7
 8005af4:	683a      	ldr	r2, [r7, #0]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d20c      	bcs.n	8005b14 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005afa:	4b22      	ldr	r3, [pc, #136]	@ (8005b84 <HAL_RCC_ClockConfig+0x1b8>)
 8005afc:	683a      	ldr	r2, [r7, #0]
 8005afe:	b2d2      	uxtb	r2, r2
 8005b00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b02:	4b20      	ldr	r3, [pc, #128]	@ (8005b84 <HAL_RCC_ClockConfig+0x1b8>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0307 	and.w	r3, r3, #7
 8005b0a:	683a      	ldr	r2, [r7, #0]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d001      	beq.n	8005b14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e032      	b.n	8005b7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 0304 	and.w	r3, r3, #4
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d008      	beq.n	8005b32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b20:	4b19      	ldr	r3, [pc, #100]	@ (8005b88 <HAL_RCC_ClockConfig+0x1bc>)
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	68db      	ldr	r3, [r3, #12]
 8005b2c:	4916      	ldr	r1, [pc, #88]	@ (8005b88 <HAL_RCC_ClockConfig+0x1bc>)
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 0308 	and.w	r3, r3, #8
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d009      	beq.n	8005b52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b3e:	4b12      	ldr	r3, [pc, #72]	@ (8005b88 <HAL_RCC_ClockConfig+0x1bc>)
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	00db      	lsls	r3, r3, #3
 8005b4c:	490e      	ldr	r1, [pc, #56]	@ (8005b88 <HAL_RCC_ClockConfig+0x1bc>)
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005b52:	f000 f821 	bl	8005b98 <HAL_RCC_GetSysClockFreq>
 8005b56:	4602      	mov	r2, r0
 8005b58:	4b0b      	ldr	r3, [pc, #44]	@ (8005b88 <HAL_RCC_ClockConfig+0x1bc>)
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	091b      	lsrs	r3, r3, #4
 8005b5e:	f003 030f 	and.w	r3, r3, #15
 8005b62:	490a      	ldr	r1, [pc, #40]	@ (8005b8c <HAL_RCC_ClockConfig+0x1c0>)
 8005b64:	5ccb      	ldrb	r3, [r1, r3]
 8005b66:	fa22 f303 	lsr.w	r3, r2, r3
 8005b6a:	4a09      	ldr	r2, [pc, #36]	@ (8005b90 <HAL_RCC_ClockConfig+0x1c4>)
 8005b6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005b6e:	4b09      	ldr	r3, [pc, #36]	@ (8005b94 <HAL_RCC_ClockConfig+0x1c8>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4618      	mov	r0, r3
 8005b74:	f7fe fc0e 	bl	8004394 <HAL_InitTick>

  return HAL_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3710      	adds	r7, #16
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	40023c00 	.word	0x40023c00
 8005b88:	40023800 	.word	0x40023800
 8005b8c:	0800eb34 	.word	0x0800eb34
 8005b90:	20000060 	.word	0x20000060
 8005b94:	20000064 	.word	0x20000064

08005b98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b9c:	b090      	sub	sp, #64	@ 0x40
 8005b9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005bac:	2300      	movs	r3, #0
 8005bae:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005bb0:	4b59      	ldr	r3, [pc, #356]	@ (8005d18 <HAL_RCC_GetSysClockFreq+0x180>)
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	f003 030c 	and.w	r3, r3, #12
 8005bb8:	2b08      	cmp	r3, #8
 8005bba:	d00d      	beq.n	8005bd8 <HAL_RCC_GetSysClockFreq+0x40>
 8005bbc:	2b08      	cmp	r3, #8
 8005bbe:	f200 80a1 	bhi.w	8005d04 <HAL_RCC_GetSysClockFreq+0x16c>
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d002      	beq.n	8005bcc <HAL_RCC_GetSysClockFreq+0x34>
 8005bc6:	2b04      	cmp	r3, #4
 8005bc8:	d003      	beq.n	8005bd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8005bca:	e09b      	b.n	8005d04 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005bcc:	4b53      	ldr	r3, [pc, #332]	@ (8005d1c <HAL_RCC_GetSysClockFreq+0x184>)
 8005bce:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005bd0:	e09b      	b.n	8005d0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005bd2:	4b53      	ldr	r3, [pc, #332]	@ (8005d20 <HAL_RCC_GetSysClockFreq+0x188>)
 8005bd4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005bd6:	e098      	b.n	8005d0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005bd8:	4b4f      	ldr	r3, [pc, #316]	@ (8005d18 <HAL_RCC_GetSysClockFreq+0x180>)
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005be0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005be2:	4b4d      	ldr	r3, [pc, #308]	@ (8005d18 <HAL_RCC_GetSysClockFreq+0x180>)
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d028      	beq.n	8005c40 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bee:	4b4a      	ldr	r3, [pc, #296]	@ (8005d18 <HAL_RCC_GetSysClockFreq+0x180>)
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	099b      	lsrs	r3, r3, #6
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	623b      	str	r3, [r7, #32]
 8005bf8:	627a      	str	r2, [r7, #36]	@ 0x24
 8005bfa:	6a3b      	ldr	r3, [r7, #32]
 8005bfc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005c00:	2100      	movs	r1, #0
 8005c02:	4b47      	ldr	r3, [pc, #284]	@ (8005d20 <HAL_RCC_GetSysClockFreq+0x188>)
 8005c04:	fb03 f201 	mul.w	r2, r3, r1
 8005c08:	2300      	movs	r3, #0
 8005c0a:	fb00 f303 	mul.w	r3, r0, r3
 8005c0e:	4413      	add	r3, r2
 8005c10:	4a43      	ldr	r2, [pc, #268]	@ (8005d20 <HAL_RCC_GetSysClockFreq+0x188>)
 8005c12:	fba0 1202 	umull	r1, r2, r0, r2
 8005c16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c18:	460a      	mov	r2, r1
 8005c1a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005c1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c1e:	4413      	add	r3, r2
 8005c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c24:	2200      	movs	r2, #0
 8005c26:	61bb      	str	r3, [r7, #24]
 8005c28:	61fa      	str	r2, [r7, #28]
 8005c2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c2e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005c32:	f7fb f829 	bl	8000c88 <__aeabi_uldivmod>
 8005c36:	4602      	mov	r2, r0
 8005c38:	460b      	mov	r3, r1
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c3e:	e053      	b.n	8005ce8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c40:	4b35      	ldr	r3, [pc, #212]	@ (8005d18 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	099b      	lsrs	r3, r3, #6
 8005c46:	2200      	movs	r2, #0
 8005c48:	613b      	str	r3, [r7, #16]
 8005c4a:	617a      	str	r2, [r7, #20]
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005c52:	f04f 0b00 	mov.w	fp, #0
 8005c56:	4652      	mov	r2, sl
 8005c58:	465b      	mov	r3, fp
 8005c5a:	f04f 0000 	mov.w	r0, #0
 8005c5e:	f04f 0100 	mov.w	r1, #0
 8005c62:	0159      	lsls	r1, r3, #5
 8005c64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c68:	0150      	lsls	r0, r2, #5
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	ebb2 080a 	subs.w	r8, r2, sl
 8005c72:	eb63 090b 	sbc.w	r9, r3, fp
 8005c76:	f04f 0200 	mov.w	r2, #0
 8005c7a:	f04f 0300 	mov.w	r3, #0
 8005c7e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005c82:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005c86:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005c8a:	ebb2 0408 	subs.w	r4, r2, r8
 8005c8e:	eb63 0509 	sbc.w	r5, r3, r9
 8005c92:	f04f 0200 	mov.w	r2, #0
 8005c96:	f04f 0300 	mov.w	r3, #0
 8005c9a:	00eb      	lsls	r3, r5, #3
 8005c9c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ca0:	00e2      	lsls	r2, r4, #3
 8005ca2:	4614      	mov	r4, r2
 8005ca4:	461d      	mov	r5, r3
 8005ca6:	eb14 030a 	adds.w	r3, r4, sl
 8005caa:	603b      	str	r3, [r7, #0]
 8005cac:	eb45 030b 	adc.w	r3, r5, fp
 8005cb0:	607b      	str	r3, [r7, #4]
 8005cb2:	f04f 0200 	mov.w	r2, #0
 8005cb6:	f04f 0300 	mov.w	r3, #0
 8005cba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005cbe:	4629      	mov	r1, r5
 8005cc0:	028b      	lsls	r3, r1, #10
 8005cc2:	4621      	mov	r1, r4
 8005cc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005cc8:	4621      	mov	r1, r4
 8005cca:	028a      	lsls	r2, r1, #10
 8005ccc:	4610      	mov	r0, r2
 8005cce:	4619      	mov	r1, r3
 8005cd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	60bb      	str	r3, [r7, #8]
 8005cd6:	60fa      	str	r2, [r7, #12]
 8005cd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005cdc:	f7fa ffd4 	bl	8000c88 <__aeabi_uldivmod>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8005d18 <HAL_RCC_GetSysClockFreq+0x180>)
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	0c1b      	lsrs	r3, r3, #16
 8005cee:	f003 0303 	and.w	r3, r3, #3
 8005cf2:	3301      	adds	r3, #1
 8005cf4:	005b      	lsls	r3, r3, #1
 8005cf6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005cf8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d00:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005d02:	e002      	b.n	8005d0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d04:	4b05      	ldr	r3, [pc, #20]	@ (8005d1c <HAL_RCC_GetSysClockFreq+0x184>)
 8005d06:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005d08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3740      	adds	r7, #64	@ 0x40
 8005d10:	46bd      	mov	sp, r7
 8005d12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d16:	bf00      	nop
 8005d18:	40023800 	.word	0x40023800
 8005d1c:	00f42400 	.word	0x00f42400
 8005d20:	017d7840 	.word	0x017d7840

08005d24 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b08b      	sub	sp, #44	@ 0x2c
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	fa93 f3a3 	rbit	r3, r3
 8005d3e:	613b      	str	r3, [r7, #16]
  return result;
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d101      	bne.n	8005d4e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8005d4a:	2320      	movs	r3, #32
 8005d4c:	e003      	b.n	8005d56 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	fab3 f383 	clz	r3, r3
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	005b      	lsls	r3, r3, #1
 8005d58:	2103      	movs	r1, #3
 8005d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d5e:	43db      	mvns	r3, r3
 8005d60:	401a      	ands	r2, r3
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d66:	6a3b      	ldr	r3, [r7, #32]
 8005d68:	fa93 f3a3 	rbit	r3, r3
 8005d6c:	61fb      	str	r3, [r7, #28]
  return result;
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d101      	bne.n	8005d7c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8005d78:	2320      	movs	r3, #32
 8005d7a:	e003      	b.n	8005d84 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8005d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d7e:	fab3 f383 	clz	r3, r3
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	005b      	lsls	r3, r3, #1
 8005d86:	6879      	ldr	r1, [r7, #4]
 8005d88:	fa01 f303 	lsl.w	r3, r1, r3
 8005d8c:	431a      	orrs	r2, r3
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	601a      	str	r2, [r3, #0]
}
 8005d92:	bf00      	nop
 8005d94:	372c      	adds	r7, #44	@ 0x2c
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr

08005d9e <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b085      	sub	sp, #20
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	60f8      	str	r0, [r7, #12]
 8005da6:	60b9      	str	r1, [r7, #8]
 8005da8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	685a      	ldr	r2, [r3, #4]
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	43db      	mvns	r3, r3
 8005db2:	401a      	ands	r2, r3
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	6879      	ldr	r1, [r7, #4]
 8005db8:	fb01 f303 	mul.w	r3, r1, r3
 8005dbc:	431a      	orrs	r2, r3
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	605a      	str	r2, [r3, #4]
}
 8005dc2:	bf00      	nop
 8005dc4:	3714      	adds	r7, #20
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr

08005dce <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8005dce:	b480      	push	{r7}
 8005dd0:	b08b      	sub	sp, #44	@ 0x2c
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	60f8      	str	r0, [r7, #12]
 8005dd6:	60b9      	str	r1, [r7, #8]
 8005dd8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	689a      	ldr	r2, [r3, #8]
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	fa93 f3a3 	rbit	r3, r3
 8005de8:	613b      	str	r3, [r7, #16]
  return result;
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d101      	bne.n	8005df8 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8005df4:	2320      	movs	r3, #32
 8005df6:	e003      	b.n	8005e00 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	fab3 f383 	clz	r3, r3
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	005b      	lsls	r3, r3, #1
 8005e02:	2103      	movs	r1, #3
 8005e04:	fa01 f303 	lsl.w	r3, r1, r3
 8005e08:	43db      	mvns	r3, r3
 8005e0a:	401a      	ands	r2, r3
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e10:	6a3b      	ldr	r3, [r7, #32]
 8005e12:	fa93 f3a3 	rbit	r3, r3
 8005e16:	61fb      	str	r3, [r7, #28]
  return result;
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d101      	bne.n	8005e26 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8005e22:	2320      	movs	r3, #32
 8005e24:	e003      	b.n	8005e2e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8005e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e28:	fab3 f383 	clz	r3, r3
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	005b      	lsls	r3, r3, #1
 8005e30:	6879      	ldr	r1, [r7, #4]
 8005e32:	fa01 f303 	lsl.w	r3, r1, r3
 8005e36:	431a      	orrs	r2, r3
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8005e3c:	bf00      	nop
 8005e3e:	372c      	adds	r7, #44	@ 0x2c
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b08b      	sub	sp, #44	@ 0x2c
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	68da      	ldr	r2, [r3, #12]
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	fa93 f3a3 	rbit	r3, r3
 8005e62:	613b      	str	r3, [r7, #16]
  return result;
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d101      	bne.n	8005e72 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8005e6e:	2320      	movs	r3, #32
 8005e70:	e003      	b.n	8005e7a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	fab3 f383 	clz	r3, r3
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	005b      	lsls	r3, r3, #1
 8005e7c:	2103      	movs	r1, #3
 8005e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e82:	43db      	mvns	r3, r3
 8005e84:	401a      	ands	r2, r3
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e8a:	6a3b      	ldr	r3, [r7, #32]
 8005e8c:	fa93 f3a3 	rbit	r3, r3
 8005e90:	61fb      	str	r3, [r7, #28]
  return result;
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d101      	bne.n	8005ea0 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8005e9c:	2320      	movs	r3, #32
 8005e9e:	e003      	b.n	8005ea8 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8005ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea2:	fab3 f383 	clz	r3, r3
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	005b      	lsls	r3, r3, #1
 8005eaa:	6879      	ldr	r1, [r7, #4]
 8005eac:	fa01 f303 	lsl.w	r3, r1, r3
 8005eb0:	431a      	orrs	r2, r3
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	60da      	str	r2, [r3, #12]
}
 8005eb6:	bf00      	nop
 8005eb8:	372c      	adds	r7, #44	@ 0x2c
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr

08005ec2 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8005ec2:	b480      	push	{r7}
 8005ec4:	b08b      	sub	sp, #44	@ 0x2c
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	60f8      	str	r0, [r7, #12]
 8005eca:	60b9      	str	r1, [r7, #8]
 8005ecc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6a1a      	ldr	r2, [r3, #32]
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	fa93 f3a3 	rbit	r3, r3
 8005edc:	613b      	str	r3, [r7, #16]
  return result;
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d101      	bne.n	8005eec <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8005ee8:	2320      	movs	r3, #32
 8005eea:	e003      	b.n	8005ef4 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	fab3 f383 	clz	r3, r3
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	210f      	movs	r1, #15
 8005ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8005efc:	43db      	mvns	r3, r3
 8005efe:	401a      	ands	r2, r3
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f04:	6a3b      	ldr	r3, [r7, #32]
 8005f06:	fa93 f3a3 	rbit	r3, r3
 8005f0a:	61fb      	str	r3, [r7, #28]
  return result;
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d101      	bne.n	8005f1a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8005f16:	2320      	movs	r3, #32
 8005f18:	e003      	b.n	8005f22 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f1c:	fab3 f383 	clz	r3, r3
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	6879      	ldr	r1, [r7, #4]
 8005f26:	fa01 f303 	lsl.w	r3, r1, r3
 8005f2a:	431a      	orrs	r2, r3
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8005f30:	bf00      	nop
 8005f32:	372c      	adds	r7, #44	@ 0x2c
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b08b      	sub	sp, #44	@ 0x2c
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	0a1b      	lsrs	r3, r3, #8
 8005f50:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	fa93 f3a3 	rbit	r3, r3
 8005f58:	613b      	str	r3, [r7, #16]
  return result;
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d101      	bne.n	8005f68 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8005f64:	2320      	movs	r3, #32
 8005f66:	e003      	b.n	8005f70 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	fab3 f383 	clz	r3, r3
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	210f      	movs	r1, #15
 8005f74:	fa01 f303 	lsl.w	r3, r1, r3
 8005f78:	43db      	mvns	r3, r3
 8005f7a:	401a      	ands	r2, r3
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	0a1b      	lsrs	r3, r3, #8
 8005f80:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f82:	6a3b      	ldr	r3, [r7, #32]
 8005f84:	fa93 f3a3 	rbit	r3, r3
 8005f88:	61fb      	str	r3, [r7, #28]
  return result;
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d101      	bne.n	8005f98 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8005f94:	2320      	movs	r3, #32
 8005f96:	e003      	b.n	8005fa0 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8005f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f9a:	fab3 f383 	clz	r3, r3
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	6879      	ldr	r1, [r7, #4]
 8005fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8005fa8:	431a      	orrs	r2, r3
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8005fae:	bf00      	nop
 8005fb0:	372c      	adds	r7, #44	@ 0x2c
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr

08005fba <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005fba:	b580      	push	{r7, lr}
 8005fbc:	b08a      	sub	sp, #40	@ 0x28
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
 8005fc2:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	fa93 f3a3 	rbit	r3, r3
 8005fd8:	617b      	str	r3, [r7, #20]
  return result;
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d101      	bne.n	8005fe8 <LL_GPIO_Init+0x2e>
    return 32U;
 8005fe4:	2320      	movs	r3, #32
 8005fe6:	e003      	b.n	8005ff0 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	fab3 f383 	clz	r3, r3
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005ff2:	e057      	b.n	80060a4 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	2101      	movs	r1, #1
 8005ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8006000:	4013      	ands	r3, r2
 8006002:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8006004:	6a3b      	ldr	r3, [r7, #32]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d049      	beq.n	800609e <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	2b01      	cmp	r3, #1
 8006010:	d003      	beq.n	800601a <LL_GPIO_Init+0x60>
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	2b02      	cmp	r3, #2
 8006018:	d10d      	bne.n	8006036 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	461a      	mov	r2, r3
 8006020:	6a39      	ldr	r1, [r7, #32]
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f7ff fed3 	bl	8005dce <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	461a      	mov	r2, r3
 800602e:	6a39      	ldr	r1, [r7, #32]
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f7ff feb4 	bl	8005d9e <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	461a      	mov	r2, r3
 800603c:	6a39      	ldr	r1, [r7, #32]
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f7ff ff02 	bl	8005e48 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	2b02      	cmp	r3, #2
 800604a:	d121      	bne.n	8006090 <LL_GPIO_Init+0xd6>
 800604c:	6a3b      	ldr	r3, [r7, #32]
 800604e:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	fa93 f3a3 	rbit	r3, r3
 8006056:	60bb      	str	r3, [r7, #8]
  return result;
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d101      	bne.n	8006066 <LL_GPIO_Init+0xac>
    return 32U;
 8006062:	2320      	movs	r3, #32
 8006064:	e003      	b.n	800606e <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	fab3 f383 	clz	r3, r3
 800606c:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800606e:	2b07      	cmp	r3, #7
 8006070:	d807      	bhi.n	8006082 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	695b      	ldr	r3, [r3, #20]
 8006076:	461a      	mov	r2, r3
 8006078:	6a39      	ldr	r1, [r7, #32]
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f7ff ff21 	bl	8005ec2 <LL_GPIO_SetAFPin_0_7>
 8006080:	e006      	b.n	8006090 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	695b      	ldr	r3, [r3, #20]
 8006086:	461a      	mov	r2, r3
 8006088:	6a39      	ldr	r1, [r7, #32]
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f7ff ff56 	bl	8005f3c <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	461a      	mov	r2, r3
 8006096:	6a39      	ldr	r1, [r7, #32]
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f7ff fe43 	bl	8005d24 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800609e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a0:	3301      	adds	r3, #1
 80060a2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060aa:	fa22 f303 	lsr.w	r3, r2, r3
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d1a0      	bne.n	8005ff4 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3728      	adds	r7, #40	@ 0x28
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80060bc:	b480      	push	{r7}
 80060be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80060c0:	4b04      	ldr	r3, [pc, #16]	@ (80060d4 <LL_RCC_GetSysClkSource+0x18>)
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	f003 030c 	and.w	r3, r3, #12
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	40023800 	.word	0x40023800

080060d8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80060d8:	b480      	push	{r7}
 80060da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80060dc:	4b04      	ldr	r3, [pc, #16]	@ (80060f0 <LL_RCC_GetAHBPrescaler+0x18>)
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	40023800 	.word	0x40023800

080060f4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80060f4:	b480      	push	{r7}
 80060f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80060f8:	4b04      	ldr	r3, [pc, #16]	@ (800610c <LL_RCC_GetAPB1Prescaler+0x18>)
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8006100:	4618      	mov	r0, r3
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	40023800 	.word	0x40023800

08006110 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8006110:	b480      	push	{r7}
 8006112:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006114:	4b04      	ldr	r3, [pc, #16]	@ (8006128 <LL_RCC_GetAPB2Prescaler+0x18>)
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800611c:	4618      	mov	r0, r3
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop
 8006128:	40023800 	.word	0x40023800

0800612c <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800612c:	b480      	push	{r7}
 800612e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006130:	4b04      	ldr	r3, [pc, #16]	@ (8006144 <LL_RCC_PLL_GetMainSource+0x18>)
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 8006138:	4618      	mov	r0, r3
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop
 8006144:	40023800 	.word	0x40023800

08006148 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8006148:	b480      	push	{r7}
 800614a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800614c:	4b04      	ldr	r3, [pc, #16]	@ (8006160 <LL_RCC_PLL_GetN+0x18>)
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	099b      	lsrs	r3, r3, #6
 8006152:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8006156:	4618      	mov	r0, r3
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr
 8006160:	40023800 	.word	0x40023800

08006164 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8006164:	b480      	push	{r7}
 8006166:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8006168:	4b04      	ldr	r3, [pc, #16]	@ (800617c <LL_RCC_PLL_GetP+0x18>)
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8006170:	4618      	mov	r0, r3
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr
 800617a:	bf00      	nop
 800617c:	40023800 	.word	0x40023800

08006180 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8006180:	b480      	push	{r7}
 8006182:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006184:	4b04      	ldr	r3, [pc, #16]	@ (8006198 <LL_RCC_PLL_GetDivider+0x18>)
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 800618c:	4618      	mov	r0, r3
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr
 8006196:	bf00      	nop
 8006198:	40023800 	.word	0x40023800

0800619c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80061a4:	f000 f820 	bl	80061e8 <RCC_GetSystemClockFreq>
 80061a8:	4602      	mov	r2, r0
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4618      	mov	r0, r3
 80061b4:	f000 f840 	bl	8006238 <RCC_GetHCLKClockFreq>
 80061b8:	4602      	mov	r2, r0
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	4618      	mov	r0, r3
 80061c4:	f000 f84e 	bl	8006264 <RCC_GetPCLK1ClockFreq>
 80061c8:	4602      	mov	r2, r0
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	4618      	mov	r0, r3
 80061d4:	f000 f85a 	bl	800628c <RCC_GetPCLK2ClockFreq>
 80061d8:	4602      	mov	r2, r0
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	60da      	str	r2, [r3, #12]
}
 80061de:	bf00      	nop
 80061e0:	3708      	adds	r7, #8
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
	...

080061e8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80061ee:	2300      	movs	r3, #0
 80061f0:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80061f2:	f7ff ff63 	bl	80060bc <LL_RCC_GetSysClkSource>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b08      	cmp	r3, #8
 80061fa:	d00c      	beq.n	8006216 <RCC_GetSystemClockFreq+0x2e>
 80061fc:	2b08      	cmp	r3, #8
 80061fe:	d80f      	bhi.n	8006220 <RCC_GetSystemClockFreq+0x38>
 8006200:	2b00      	cmp	r3, #0
 8006202:	d002      	beq.n	800620a <RCC_GetSystemClockFreq+0x22>
 8006204:	2b04      	cmp	r3, #4
 8006206:	d003      	beq.n	8006210 <RCC_GetSystemClockFreq+0x28>
 8006208:	e00a      	b.n	8006220 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800620a:	4b09      	ldr	r3, [pc, #36]	@ (8006230 <RCC_GetSystemClockFreq+0x48>)
 800620c:	607b      	str	r3, [r7, #4]
      break;
 800620e:	e00a      	b.n	8006226 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8006210:	4b08      	ldr	r3, [pc, #32]	@ (8006234 <RCC_GetSystemClockFreq+0x4c>)
 8006212:	607b      	str	r3, [r7, #4]
      break;
 8006214:	e007      	b.n	8006226 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8006216:	2008      	movs	r0, #8
 8006218:	f000 f84c 	bl	80062b4 <RCC_PLL_GetFreqDomain_SYS>
 800621c:	6078      	str	r0, [r7, #4]
      break;
 800621e:	e002      	b.n	8006226 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8006220:	4b03      	ldr	r3, [pc, #12]	@ (8006230 <RCC_GetSystemClockFreq+0x48>)
 8006222:	607b      	str	r3, [r7, #4]
      break;
 8006224:	bf00      	nop
  }

  return frequency;
 8006226:	687b      	ldr	r3, [r7, #4]
}
 8006228:	4618      	mov	r0, r3
 800622a:	3708      	adds	r7, #8
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}
 8006230:	00f42400 	.word	0x00f42400
 8006234:	017d7840 	.word	0x017d7840

08006238 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8006240:	f7ff ff4a 	bl	80060d8 <LL_RCC_GetAHBPrescaler>
 8006244:	4603      	mov	r3, r0
 8006246:	091b      	lsrs	r3, r3, #4
 8006248:	f003 030f 	and.w	r3, r3, #15
 800624c:	4a04      	ldr	r2, [pc, #16]	@ (8006260 <RCC_GetHCLKClockFreq+0x28>)
 800624e:	5cd3      	ldrb	r3, [r2, r3]
 8006250:	461a      	mov	r2, r3
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	40d3      	lsrs	r3, r2
}
 8006256:	4618      	mov	r0, r3
 8006258:	3708      	adds	r7, #8
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	0800eb34 	.word	0x0800eb34

08006264 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800626c:	f7ff ff42 	bl	80060f4 <LL_RCC_GetAPB1Prescaler>
 8006270:	4603      	mov	r3, r0
 8006272:	0a9b      	lsrs	r3, r3, #10
 8006274:	4a04      	ldr	r2, [pc, #16]	@ (8006288 <RCC_GetPCLK1ClockFreq+0x24>)
 8006276:	5cd3      	ldrb	r3, [r2, r3]
 8006278:	461a      	mov	r2, r3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	40d3      	lsrs	r3, r2
}
 800627e:	4618      	mov	r0, r3
 8006280:	3708      	adds	r7, #8
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	0800eb44 	.word	0x0800eb44

0800628c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b082      	sub	sp, #8
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8006294:	f7ff ff3c 	bl	8006110 <LL_RCC_GetAPB2Prescaler>
 8006298:	4603      	mov	r3, r0
 800629a:	0b5b      	lsrs	r3, r3, #13
 800629c:	4a04      	ldr	r2, [pc, #16]	@ (80062b0 <RCC_GetPCLK2ClockFreq+0x24>)
 800629e:	5cd3      	ldrb	r3, [r2, r3]
 80062a0:	461a      	mov	r2, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	40d3      	lsrs	r3, r2
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3708      	adds	r7, #8
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	0800eb44 	.word	0x0800eb44

080062b4 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80062b4:	b590      	push	{r4, r7, lr}
 80062b6:	b087      	sub	sp, #28
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 80062bc:	2300      	movs	r3, #0
 80062be:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 80062c0:	2300      	movs	r3, #0
 80062c2:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 80062c4:	2300      	movs	r3, #0
 80062c6:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80062c8:	f7ff ff30 	bl	800612c <LL_RCC_PLL_GetMainSource>
 80062cc:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d004      	beq.n	80062de <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80062da:	d003      	beq.n	80062e4 <RCC_PLL_GetFreqDomain_SYS+0x30>
 80062dc:	e005      	b.n	80062ea <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80062de:	4b12      	ldr	r3, [pc, #72]	@ (8006328 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80062e0:	617b      	str	r3, [r7, #20]
      break;
 80062e2:	e005      	b.n	80062f0 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80062e4:	4b11      	ldr	r3, [pc, #68]	@ (800632c <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80062e6:	617b      	str	r3, [r7, #20]
      break;
 80062e8:	e002      	b.n	80062f0 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 80062ea:	4b0f      	ldr	r3, [pc, #60]	@ (8006328 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80062ec:	617b      	str	r3, [r7, #20]
      break;
 80062ee:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2b08      	cmp	r3, #8
 80062f4:	d113      	bne.n	800631e <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80062f6:	f7ff ff43 	bl	8006180 <LL_RCC_PLL_GetDivider>
 80062fa:	4602      	mov	r2, r0
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	fbb3 f4f2 	udiv	r4, r3, r2
 8006302:	f7ff ff21 	bl	8006148 <LL_RCC_PLL_GetN>
 8006306:	4603      	mov	r3, r0
 8006308:	fb03 f404 	mul.w	r4, r3, r4
 800630c:	f7ff ff2a 	bl	8006164 <LL_RCC_PLL_GetP>
 8006310:	4603      	mov	r3, r0
 8006312:	0c1b      	lsrs	r3, r3, #16
 8006314:	3301      	adds	r3, #1
 8006316:	005b      	lsls	r3, r3, #1
 8006318:	fbb4 f3f3 	udiv	r3, r4, r3
 800631c:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800631e:	693b      	ldr	r3, [r7, #16]
}
 8006320:	4618      	mov	r0, r3
 8006322:	371c      	adds	r7, #28
 8006324:	46bd      	mov	sp, r7
 8006326:	bd90      	pop	{r4, r7, pc}
 8006328:	00f42400 	.word	0x00f42400
 800632c:	017d7840 	.word	0x017d7840

08006330 <LL_USART_IsEnabled>:
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006340:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006344:	bf0c      	ite	eq
 8006346:	2301      	moveq	r3, #1
 8006348:	2300      	movne	r3, #0
 800634a:	b2db      	uxtb	r3, r3
}
 800634c:	4618      	mov	r0, r3
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <LL_USART_SetStopBitsLength>:
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	431a      	orrs	r2, r3
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	611a      	str	r2, [r3, #16]
}
 8006372:	bf00      	nop
 8006374:	370c      	adds	r7, #12
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr

0800637e <LL_USART_SetHWFlowCtrl>:
{
 800637e:	b480      	push	{r7}
 8006380:	b083      	sub	sp, #12
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
 8006386:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	695b      	ldr	r3, [r3, #20]
 800638c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	431a      	orrs	r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	615a      	str	r2, [r3, #20]
}
 8006398:	bf00      	nop
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <LL_USART_SetBaudRate>:
{
 80063a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063a8:	b0c0      	sub	sp, #256	@ 0x100
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80063b0:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 80063b4:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80063b8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80063bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063c4:	f040 810c 	bne.w	80065e0 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80063c8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80063cc:	2200      	movs	r2, #0
 80063ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80063d2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80063d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80063da:	4622      	mov	r2, r4
 80063dc:	462b      	mov	r3, r5
 80063de:	1891      	adds	r1, r2, r2
 80063e0:	6639      	str	r1, [r7, #96]	@ 0x60
 80063e2:	415b      	adcs	r3, r3
 80063e4:	667b      	str	r3, [r7, #100]	@ 0x64
 80063e6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80063ea:	4621      	mov	r1, r4
 80063ec:	eb12 0801 	adds.w	r8, r2, r1
 80063f0:	4629      	mov	r1, r5
 80063f2:	eb43 0901 	adc.w	r9, r3, r1
 80063f6:	f04f 0200 	mov.w	r2, #0
 80063fa:	f04f 0300 	mov.w	r3, #0
 80063fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006402:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006406:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800640a:	4690      	mov	r8, r2
 800640c:	4699      	mov	r9, r3
 800640e:	4623      	mov	r3, r4
 8006410:	eb18 0303 	adds.w	r3, r8, r3
 8006414:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006418:	462b      	mov	r3, r5
 800641a:	eb49 0303 	adc.w	r3, r9, r3
 800641e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006422:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006426:	2200      	movs	r2, #0
 8006428:	469a      	mov	sl, r3
 800642a:	4693      	mov	fp, r2
 800642c:	eb1a 030a 	adds.w	r3, sl, sl
 8006430:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006432:	eb4b 030b 	adc.w	r3, fp, fp
 8006436:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006438:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800643c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006440:	f7fa fc22 	bl	8000c88 <__aeabi_uldivmod>
 8006444:	4602      	mov	r2, r0
 8006446:	460b      	mov	r3, r1
 8006448:	4b64      	ldr	r3, [pc, #400]	@ (80065dc <LL_USART_SetBaudRate+0x238>)
 800644a:	fba3 2302 	umull	r2, r3, r3, r2
 800644e:	095b      	lsrs	r3, r3, #5
 8006450:	b29b      	uxth	r3, r3
 8006452:	011b      	lsls	r3, r3, #4
 8006454:	b29c      	uxth	r4, r3
 8006456:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800645a:	2200      	movs	r2, #0
 800645c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006460:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006464:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8006468:	4642      	mov	r2, r8
 800646a:	464b      	mov	r3, r9
 800646c:	1891      	adds	r1, r2, r2
 800646e:	6539      	str	r1, [r7, #80]	@ 0x50
 8006470:	415b      	adcs	r3, r3
 8006472:	657b      	str	r3, [r7, #84]	@ 0x54
 8006474:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006478:	4641      	mov	r1, r8
 800647a:	1851      	adds	r1, r2, r1
 800647c:	64b9      	str	r1, [r7, #72]	@ 0x48
 800647e:	4649      	mov	r1, r9
 8006480:	414b      	adcs	r3, r1
 8006482:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006484:	f04f 0200 	mov.w	r2, #0
 8006488:	f04f 0300 	mov.w	r3, #0
 800648c:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8006490:	4659      	mov	r1, fp
 8006492:	00cb      	lsls	r3, r1, #3
 8006494:	4651      	mov	r1, sl
 8006496:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800649a:	4651      	mov	r1, sl
 800649c:	00ca      	lsls	r2, r1, #3
 800649e:	4610      	mov	r0, r2
 80064a0:	4619      	mov	r1, r3
 80064a2:	4603      	mov	r3, r0
 80064a4:	4642      	mov	r2, r8
 80064a6:	189b      	adds	r3, r3, r2
 80064a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80064ac:	464b      	mov	r3, r9
 80064ae:	460a      	mov	r2, r1
 80064b0:	eb42 0303 	adc.w	r3, r2, r3
 80064b4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80064b8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80064bc:	2200      	movs	r2, #0
 80064be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80064c2:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80064c6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80064ca:	460b      	mov	r3, r1
 80064cc:	18db      	adds	r3, r3, r3
 80064ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80064d0:	4613      	mov	r3, r2
 80064d2:	eb42 0303 	adc.w	r3, r2, r3
 80064d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80064d8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80064dc:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 80064e0:	f7fa fbd2 	bl	8000c88 <__aeabi_uldivmod>
 80064e4:	4602      	mov	r2, r0
 80064e6:	460b      	mov	r3, r1
 80064e8:	4611      	mov	r1, r2
 80064ea:	4b3c      	ldr	r3, [pc, #240]	@ (80065dc <LL_USART_SetBaudRate+0x238>)
 80064ec:	fba3 2301 	umull	r2, r3, r3, r1
 80064f0:	095b      	lsrs	r3, r3, #5
 80064f2:	2264      	movs	r2, #100	@ 0x64
 80064f4:	fb02 f303 	mul.w	r3, r2, r3
 80064f8:	1acb      	subs	r3, r1, r3
 80064fa:	00db      	lsls	r3, r3, #3
 80064fc:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006500:	4b36      	ldr	r3, [pc, #216]	@ (80065dc <LL_USART_SetBaudRate+0x238>)
 8006502:	fba3 2302 	umull	r2, r3, r3, r2
 8006506:	095b      	lsrs	r3, r3, #5
 8006508:	b29b      	uxth	r3, r3
 800650a:	005b      	lsls	r3, r3, #1
 800650c:	b29b      	uxth	r3, r3
 800650e:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006512:	b29b      	uxth	r3, r3
 8006514:	4423      	add	r3, r4
 8006516:	b29c      	uxth	r4, r3
 8006518:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800651c:	2200      	movs	r2, #0
 800651e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006522:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006526:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 800652a:	4642      	mov	r2, r8
 800652c:	464b      	mov	r3, r9
 800652e:	1891      	adds	r1, r2, r2
 8006530:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006532:	415b      	adcs	r3, r3
 8006534:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006536:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800653a:	4641      	mov	r1, r8
 800653c:	1851      	adds	r1, r2, r1
 800653e:	6339      	str	r1, [r7, #48]	@ 0x30
 8006540:	4649      	mov	r1, r9
 8006542:	414b      	adcs	r3, r1
 8006544:	637b      	str	r3, [r7, #52]	@ 0x34
 8006546:	f04f 0200 	mov.w	r2, #0
 800654a:	f04f 0300 	mov.w	r3, #0
 800654e:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006552:	4659      	mov	r1, fp
 8006554:	00cb      	lsls	r3, r1, #3
 8006556:	4651      	mov	r1, sl
 8006558:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800655c:	4651      	mov	r1, sl
 800655e:	00ca      	lsls	r2, r1, #3
 8006560:	4610      	mov	r0, r2
 8006562:	4619      	mov	r1, r3
 8006564:	4603      	mov	r3, r0
 8006566:	4642      	mov	r2, r8
 8006568:	189b      	adds	r3, r3, r2
 800656a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800656e:	464b      	mov	r3, r9
 8006570:	460a      	mov	r2, r1
 8006572:	eb42 0303 	adc.w	r3, r2, r3
 8006576:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800657a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800657e:	2200      	movs	r2, #0
 8006580:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006584:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8006588:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800658c:	460b      	mov	r3, r1
 800658e:	18db      	adds	r3, r3, r3
 8006590:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006592:	4613      	mov	r3, r2
 8006594:	eb42 0303 	adc.w	r3, r2, r3
 8006598:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800659a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800659e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80065a2:	f7fa fb71 	bl	8000c88 <__aeabi_uldivmod>
 80065a6:	4602      	mov	r2, r0
 80065a8:	460b      	mov	r3, r1
 80065aa:	4b0c      	ldr	r3, [pc, #48]	@ (80065dc <LL_USART_SetBaudRate+0x238>)
 80065ac:	fba3 1302 	umull	r1, r3, r3, r2
 80065b0:	095b      	lsrs	r3, r3, #5
 80065b2:	2164      	movs	r1, #100	@ 0x64
 80065b4:	fb01 f303 	mul.w	r3, r1, r3
 80065b8:	1ad3      	subs	r3, r2, r3
 80065ba:	00db      	lsls	r3, r3, #3
 80065bc:	3332      	adds	r3, #50	@ 0x32
 80065be:	4a07      	ldr	r2, [pc, #28]	@ (80065dc <LL_USART_SetBaudRate+0x238>)
 80065c0:	fba2 2303 	umull	r2, r3, r2, r3
 80065c4:	095b      	lsrs	r3, r3, #5
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	f003 0307 	and.w	r3, r3, #7
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	4423      	add	r3, r4
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	461a      	mov	r2, r3
 80065d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065d8:	609a      	str	r2, [r3, #8]
}
 80065da:	e108      	b.n	80067ee <LL_USART_SetBaudRate+0x44a>
 80065dc:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80065e0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80065e4:	2200      	movs	r2, #0
 80065e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80065ea:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80065ee:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 80065f2:	4642      	mov	r2, r8
 80065f4:	464b      	mov	r3, r9
 80065f6:	1891      	adds	r1, r2, r2
 80065f8:	6239      	str	r1, [r7, #32]
 80065fa:	415b      	adcs	r3, r3
 80065fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80065fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006602:	4641      	mov	r1, r8
 8006604:	1854      	adds	r4, r2, r1
 8006606:	4649      	mov	r1, r9
 8006608:	eb43 0501 	adc.w	r5, r3, r1
 800660c:	f04f 0200 	mov.w	r2, #0
 8006610:	f04f 0300 	mov.w	r3, #0
 8006614:	00eb      	lsls	r3, r5, #3
 8006616:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800661a:	00e2      	lsls	r2, r4, #3
 800661c:	4614      	mov	r4, r2
 800661e:	461d      	mov	r5, r3
 8006620:	4643      	mov	r3, r8
 8006622:	18e3      	adds	r3, r4, r3
 8006624:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006628:	464b      	mov	r3, r9
 800662a:	eb45 0303 	adc.w	r3, r5, r3
 800662e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006632:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006636:	2200      	movs	r2, #0
 8006638:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800663c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8006640:	f04f 0200 	mov.w	r2, #0
 8006644:	f04f 0300 	mov.w	r3, #0
 8006648:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 800664c:	4629      	mov	r1, r5
 800664e:	008b      	lsls	r3, r1, #2
 8006650:	4621      	mov	r1, r4
 8006652:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006656:	4621      	mov	r1, r4
 8006658:	008a      	lsls	r2, r1, #2
 800665a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800665e:	f7fa fb13 	bl	8000c88 <__aeabi_uldivmod>
 8006662:	4602      	mov	r2, r0
 8006664:	460b      	mov	r3, r1
 8006666:	4b65      	ldr	r3, [pc, #404]	@ (80067fc <LL_USART_SetBaudRate+0x458>)
 8006668:	fba3 2302 	umull	r2, r3, r3, r2
 800666c:	095b      	lsrs	r3, r3, #5
 800666e:	b29b      	uxth	r3, r3
 8006670:	011b      	lsls	r3, r3, #4
 8006672:	b29c      	uxth	r4, r3
 8006674:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006678:	2200      	movs	r2, #0
 800667a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800667e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006682:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8006686:	4642      	mov	r2, r8
 8006688:	464b      	mov	r3, r9
 800668a:	1891      	adds	r1, r2, r2
 800668c:	61b9      	str	r1, [r7, #24]
 800668e:	415b      	adcs	r3, r3
 8006690:	61fb      	str	r3, [r7, #28]
 8006692:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006696:	4641      	mov	r1, r8
 8006698:	1851      	adds	r1, r2, r1
 800669a:	6139      	str	r1, [r7, #16]
 800669c:	4649      	mov	r1, r9
 800669e:	414b      	adcs	r3, r1
 80066a0:	617b      	str	r3, [r7, #20]
 80066a2:	f04f 0200 	mov.w	r2, #0
 80066a6:	f04f 0300 	mov.w	r3, #0
 80066aa:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80066ae:	4659      	mov	r1, fp
 80066b0:	00cb      	lsls	r3, r1, #3
 80066b2:	4651      	mov	r1, sl
 80066b4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066b8:	4651      	mov	r1, sl
 80066ba:	00ca      	lsls	r2, r1, #3
 80066bc:	4610      	mov	r0, r2
 80066be:	4619      	mov	r1, r3
 80066c0:	4603      	mov	r3, r0
 80066c2:	4642      	mov	r2, r8
 80066c4:	189b      	adds	r3, r3, r2
 80066c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80066ca:	464b      	mov	r3, r9
 80066cc:	460a      	mov	r2, r1
 80066ce:	eb42 0303 	adc.w	r3, r2, r3
 80066d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80066d6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80066da:	2200      	movs	r2, #0
 80066dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80066e0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80066e4:	f04f 0200 	mov.w	r2, #0
 80066e8:	f04f 0300 	mov.w	r3, #0
 80066ec:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 80066f0:	4649      	mov	r1, r9
 80066f2:	008b      	lsls	r3, r1, #2
 80066f4:	4641      	mov	r1, r8
 80066f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066fa:	4641      	mov	r1, r8
 80066fc:	008a      	lsls	r2, r1, #2
 80066fe:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8006702:	f7fa fac1 	bl	8000c88 <__aeabi_uldivmod>
 8006706:	4602      	mov	r2, r0
 8006708:	460b      	mov	r3, r1
 800670a:	4611      	mov	r1, r2
 800670c:	4b3b      	ldr	r3, [pc, #236]	@ (80067fc <LL_USART_SetBaudRate+0x458>)
 800670e:	fba3 2301 	umull	r2, r3, r3, r1
 8006712:	095b      	lsrs	r3, r3, #5
 8006714:	2264      	movs	r2, #100	@ 0x64
 8006716:	fb02 f303 	mul.w	r3, r2, r3
 800671a:	1acb      	subs	r3, r1, r3
 800671c:	011b      	lsls	r3, r3, #4
 800671e:	3332      	adds	r3, #50	@ 0x32
 8006720:	4a36      	ldr	r2, [pc, #216]	@ (80067fc <LL_USART_SetBaudRate+0x458>)
 8006722:	fba2 2303 	umull	r2, r3, r2, r3
 8006726:	095b      	lsrs	r3, r3, #5
 8006728:	b29b      	uxth	r3, r3
 800672a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800672e:	b29b      	uxth	r3, r3
 8006730:	4423      	add	r3, r4
 8006732:	b29c      	uxth	r4, r3
 8006734:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006738:	2200      	movs	r2, #0
 800673a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800673c:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800673e:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006742:	4642      	mov	r2, r8
 8006744:	464b      	mov	r3, r9
 8006746:	1891      	adds	r1, r2, r2
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	415b      	adcs	r3, r3
 800674c:	60fb      	str	r3, [r7, #12]
 800674e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006752:	4641      	mov	r1, r8
 8006754:	1851      	adds	r1, r2, r1
 8006756:	6039      	str	r1, [r7, #0]
 8006758:	4649      	mov	r1, r9
 800675a:	414b      	adcs	r3, r1
 800675c:	607b      	str	r3, [r7, #4]
 800675e:	f04f 0200 	mov.w	r2, #0
 8006762:	f04f 0300 	mov.w	r3, #0
 8006766:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800676a:	4659      	mov	r1, fp
 800676c:	00cb      	lsls	r3, r1, #3
 800676e:	4651      	mov	r1, sl
 8006770:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006774:	4651      	mov	r1, sl
 8006776:	00ca      	lsls	r2, r1, #3
 8006778:	4610      	mov	r0, r2
 800677a:	4619      	mov	r1, r3
 800677c:	4603      	mov	r3, r0
 800677e:	4642      	mov	r2, r8
 8006780:	189b      	adds	r3, r3, r2
 8006782:	673b      	str	r3, [r7, #112]	@ 0x70
 8006784:	464b      	mov	r3, r9
 8006786:	460a      	mov	r2, r1
 8006788:	eb42 0303 	adc.w	r3, r2, r3
 800678c:	677b      	str	r3, [r7, #116]	@ 0x74
 800678e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006792:	2200      	movs	r2, #0
 8006794:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006796:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006798:	f04f 0200 	mov.w	r2, #0
 800679c:	f04f 0300 	mov.w	r3, #0
 80067a0:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 80067a4:	4649      	mov	r1, r9
 80067a6:	008b      	lsls	r3, r1, #2
 80067a8:	4641      	mov	r1, r8
 80067aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067ae:	4641      	mov	r1, r8
 80067b0:	008a      	lsls	r2, r1, #2
 80067b2:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80067b6:	f7fa fa67 	bl	8000c88 <__aeabi_uldivmod>
 80067ba:	4602      	mov	r2, r0
 80067bc:	460b      	mov	r3, r1
 80067be:	4b0f      	ldr	r3, [pc, #60]	@ (80067fc <LL_USART_SetBaudRate+0x458>)
 80067c0:	fba3 1302 	umull	r1, r3, r3, r2
 80067c4:	095b      	lsrs	r3, r3, #5
 80067c6:	2164      	movs	r1, #100	@ 0x64
 80067c8:	fb01 f303 	mul.w	r3, r1, r3
 80067cc:	1ad3      	subs	r3, r2, r3
 80067ce:	011b      	lsls	r3, r3, #4
 80067d0:	3332      	adds	r3, #50	@ 0x32
 80067d2:	4a0a      	ldr	r2, [pc, #40]	@ (80067fc <LL_USART_SetBaudRate+0x458>)
 80067d4:	fba2 2303 	umull	r2, r3, r2, r3
 80067d8:	095b      	lsrs	r3, r3, #5
 80067da:	b29b      	uxth	r3, r3
 80067dc:	f003 030f 	and.w	r3, r3, #15
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	4423      	add	r3, r4
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	461a      	mov	r2, r3
 80067e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067ec:	609a      	str	r2, [r3, #8]
}
 80067ee:	bf00      	nop
 80067f0:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80067f4:	46bd      	mov	sp, r7
 80067f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067fa:	bf00      	nop
 80067fc:	51eb851f 	.word	0x51eb851f

08006800 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b088      	sub	sp, #32
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800680e:	2300      	movs	r3, #0
 8006810:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f7ff fd8c 	bl	8006330 <LL_USART_IsEnabled>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d15e      	bne.n	80068dc <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8006826:	f023 030c 	bic.w	r3, r3, #12
 800682a:	683a      	ldr	r2, [r7, #0]
 800682c:	6851      	ldr	r1, [r2, #4]
 800682e:	683a      	ldr	r2, [r7, #0]
 8006830:	68d2      	ldr	r2, [r2, #12]
 8006832:	4311      	orrs	r1, r2
 8006834:	683a      	ldr	r2, [r7, #0]
 8006836:	6912      	ldr	r2, [r2, #16]
 8006838:	4311      	orrs	r1, r2
 800683a:	683a      	ldr	r2, [r7, #0]
 800683c:	6992      	ldr	r2, [r2, #24]
 800683e:	430a      	orrs	r2, r1
 8006840:	431a      	orrs	r2, r3
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	4619      	mov	r1, r3
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f7ff fd83 	bl	8006358 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	695b      	ldr	r3, [r3, #20]
 8006856:	4619      	mov	r1, r3
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f7ff fd90 	bl	800637e <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800685e:	f107 0308 	add.w	r3, r7, #8
 8006862:	4618      	mov	r0, r3
 8006864:	f7ff fc9a 	bl	800619c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a1f      	ldr	r2, [pc, #124]	@ (80068e8 <LL_USART_Init+0xe8>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d102      	bne.n	8006876 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	61bb      	str	r3, [r7, #24]
 8006874:	e021      	b.n	80068ba <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4a1c      	ldr	r2, [pc, #112]	@ (80068ec <LL_USART_Init+0xec>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d102      	bne.n	8006884 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	61bb      	str	r3, [r7, #24]
 8006882:	e01a      	b.n	80068ba <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a1a      	ldr	r2, [pc, #104]	@ (80068f0 <LL_USART_Init+0xf0>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d102      	bne.n	8006892 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	61bb      	str	r3, [r7, #24]
 8006890:	e013      	b.n	80068ba <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4a17      	ldr	r2, [pc, #92]	@ (80068f4 <LL_USART_Init+0xf4>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d102      	bne.n	80068a0 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	61bb      	str	r3, [r7, #24]
 800689e:	e00c      	b.n	80068ba <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a15      	ldr	r2, [pc, #84]	@ (80068f8 <LL_USART_Init+0xf8>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d102      	bne.n	80068ae <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	61bb      	str	r3, [r7, #24]
 80068ac:	e005      	b.n	80068ba <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4a12      	ldr	r2, [pc, #72]	@ (80068fc <LL_USART_Init+0xfc>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d101      	bne.n	80068ba <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80068ba:	69bb      	ldr	r3, [r7, #24]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d00d      	beq.n	80068dc <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d009      	beq.n	80068dc <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 80068c8:	2300      	movs	r3, #0
 80068ca:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80068d4:	69b9      	ldr	r1, [r7, #24]
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f7ff fd64 	bl	80063a4 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80068dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3720      	adds	r7, #32
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	40011000 	.word	0x40011000
 80068ec:	40004400 	.word	0x40004400
 80068f0:	40004800 	.word	0x40004800
 80068f4:	40011400 	.word	0x40011400
 80068f8:	40004c00 	.word	0x40004c00
 80068fc:	40005000 	.word	0x40005000

08006900 <__NVIC_SetPriority>:
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	4603      	mov	r3, r0
 8006908:	6039      	str	r1, [r7, #0]
 800690a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800690c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006910:	2b00      	cmp	r3, #0
 8006912:	db0a      	blt.n	800692a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	b2da      	uxtb	r2, r3
 8006918:	490c      	ldr	r1, [pc, #48]	@ (800694c <__NVIC_SetPriority+0x4c>)
 800691a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800691e:	0112      	lsls	r2, r2, #4
 8006920:	b2d2      	uxtb	r2, r2
 8006922:	440b      	add	r3, r1
 8006924:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006928:	e00a      	b.n	8006940 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	b2da      	uxtb	r2, r3
 800692e:	4908      	ldr	r1, [pc, #32]	@ (8006950 <__NVIC_SetPriority+0x50>)
 8006930:	79fb      	ldrb	r3, [r7, #7]
 8006932:	f003 030f 	and.w	r3, r3, #15
 8006936:	3b04      	subs	r3, #4
 8006938:	0112      	lsls	r2, r2, #4
 800693a:	b2d2      	uxtb	r2, r2
 800693c:	440b      	add	r3, r1
 800693e:	761a      	strb	r2, [r3, #24]
}
 8006940:	bf00      	nop
 8006942:	370c      	adds	r7, #12
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr
 800694c:	e000e100 	.word	0xe000e100
 8006950:	e000ed00 	.word	0xe000ed00

08006954 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006954:	b580      	push	{r7, lr}
 8006956:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006958:	2100      	movs	r1, #0
 800695a:	f06f 0004 	mvn.w	r0, #4
 800695e:	f7ff ffcf 	bl	8006900 <__NVIC_SetPriority>
#endif
}
 8006962:	bf00      	nop
 8006964:	bd80      	pop	{r7, pc}
	...

08006968 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800696e:	f3ef 8305 	mrs	r3, IPSR
 8006972:	603b      	str	r3, [r7, #0]
  return(result);
 8006974:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006976:	2b00      	cmp	r3, #0
 8006978:	d003      	beq.n	8006982 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800697a:	f06f 0305 	mvn.w	r3, #5
 800697e:	607b      	str	r3, [r7, #4]
 8006980:	e00c      	b.n	800699c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006982:	4b0a      	ldr	r3, [pc, #40]	@ (80069ac <osKernelInitialize+0x44>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d105      	bne.n	8006996 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800698a:	4b08      	ldr	r3, [pc, #32]	@ (80069ac <osKernelInitialize+0x44>)
 800698c:	2201      	movs	r2, #1
 800698e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006990:	2300      	movs	r3, #0
 8006992:	607b      	str	r3, [r7, #4]
 8006994:	e002      	b.n	800699c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006996:	f04f 33ff 	mov.w	r3, #4294967295
 800699a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800699c:	687b      	ldr	r3, [r7, #4]
}
 800699e:	4618      	mov	r0, r3
 80069a0:	370c      	adds	r7, #12
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr
 80069aa:	bf00      	nop
 80069ac:	200005d8 	.word	0x200005d8

080069b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069b6:	f3ef 8305 	mrs	r3, IPSR
 80069ba:	603b      	str	r3, [r7, #0]
  return(result);
 80069bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d003      	beq.n	80069ca <osKernelStart+0x1a>
    stat = osErrorISR;
 80069c2:	f06f 0305 	mvn.w	r3, #5
 80069c6:	607b      	str	r3, [r7, #4]
 80069c8:	e010      	b.n	80069ec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80069ca:	4b0b      	ldr	r3, [pc, #44]	@ (80069f8 <osKernelStart+0x48>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d109      	bne.n	80069e6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80069d2:	f7ff ffbf 	bl	8006954 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80069d6:	4b08      	ldr	r3, [pc, #32]	@ (80069f8 <osKernelStart+0x48>)
 80069d8:	2202      	movs	r2, #2
 80069da:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80069dc:	f001 f896 	bl	8007b0c <vTaskStartScheduler>
      stat = osOK;
 80069e0:	2300      	movs	r3, #0
 80069e2:	607b      	str	r3, [r7, #4]
 80069e4:	e002      	b.n	80069ec <osKernelStart+0x3c>
    } else {
      stat = osError;
 80069e6:	f04f 33ff 	mov.w	r3, #4294967295
 80069ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80069ec:	687b      	ldr	r3, [r7, #4]
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3708      	adds	r7, #8
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	200005d8 	.word	0x200005d8

080069fc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b08e      	sub	sp, #56	@ 0x38
 8006a00:	af04      	add	r7, sp, #16
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	60b9      	str	r1, [r7, #8]
 8006a06:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a0c:	f3ef 8305 	mrs	r3, IPSR
 8006a10:	617b      	str	r3, [r7, #20]
  return(result);
 8006a12:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d17e      	bne.n	8006b16 <osThreadNew+0x11a>
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d07b      	beq.n	8006b16 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006a1e:	2380      	movs	r3, #128	@ 0x80
 8006a20:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006a22:	2318      	movs	r3, #24
 8006a24:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006a26:	2300      	movs	r3, #0
 8006a28:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a2e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d045      	beq.n	8006ac2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d002      	beq.n	8006a44 <osThreadNew+0x48>
        name = attr->name;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	699b      	ldr	r3, [r3, #24]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d002      	beq.n	8006a52 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	699b      	ldr	r3, [r3, #24]
 8006a50:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d008      	beq.n	8006a6a <osThreadNew+0x6e>
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	2b38      	cmp	r3, #56	@ 0x38
 8006a5c:	d805      	bhi.n	8006a6a <osThreadNew+0x6e>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	f003 0301 	and.w	r3, r3, #1
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d001      	beq.n	8006a6e <osThreadNew+0x72>
        return (NULL);
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	e054      	b.n	8006b18 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	695b      	ldr	r3, [r3, #20]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d003      	beq.n	8006a7e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	695b      	ldr	r3, [r3, #20]
 8006a7a:	089b      	lsrs	r3, r3, #2
 8006a7c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00e      	beq.n	8006aa4 <osThreadNew+0xa8>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	2ba7      	cmp	r3, #167	@ 0xa7
 8006a8c:	d90a      	bls.n	8006aa4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d006      	beq.n	8006aa4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	695b      	ldr	r3, [r3, #20]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d002      	beq.n	8006aa4 <osThreadNew+0xa8>
        mem = 1;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	61bb      	str	r3, [r7, #24]
 8006aa2:	e010      	b.n	8006ac6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d10c      	bne.n	8006ac6 <osThreadNew+0xca>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d108      	bne.n	8006ac6 <osThreadNew+0xca>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	691b      	ldr	r3, [r3, #16]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d104      	bne.n	8006ac6 <osThreadNew+0xca>
          mem = 0;
 8006abc:	2300      	movs	r3, #0
 8006abe:	61bb      	str	r3, [r7, #24]
 8006ac0:	e001      	b.n	8006ac6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d110      	bne.n	8006aee <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006ad4:	9202      	str	r2, [sp, #8]
 8006ad6:	9301      	str	r3, [sp, #4]
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	9300      	str	r3, [sp, #0]
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	6a3a      	ldr	r2, [r7, #32]
 8006ae0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006ae2:	68f8      	ldr	r0, [r7, #12]
 8006ae4:	f000 fe1e 	bl	8007724 <xTaskCreateStatic>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	613b      	str	r3, [r7, #16]
 8006aec:	e013      	b.n	8006b16 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d110      	bne.n	8006b16 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006af4:	6a3b      	ldr	r3, [r7, #32]
 8006af6:	b29a      	uxth	r2, r3
 8006af8:	f107 0310 	add.w	r3, r7, #16
 8006afc:	9301      	str	r3, [sp, #4]
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	9300      	str	r3, [sp, #0]
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006b06:	68f8      	ldr	r0, [r7, #12]
 8006b08:	f000 fe6c 	bl	80077e4 <xTaskCreate>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d001      	beq.n	8006b16 <osThreadNew+0x11a>
            hTask = NULL;
 8006b12:	2300      	movs	r3, #0
 8006b14:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006b16:	693b      	ldr	r3, [r7, #16]
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3728      	adds	r7, #40	@ 0x28
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006b20:	b480      	push	{r7}
 8006b22:	b085      	sub	sp, #20
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	4a07      	ldr	r2, [pc, #28]	@ (8006b4c <vApplicationGetIdleTaskMemory+0x2c>)
 8006b30:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	4a06      	ldr	r2, [pc, #24]	@ (8006b50 <vApplicationGetIdleTaskMemory+0x30>)
 8006b36:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2280      	movs	r2, #128	@ 0x80
 8006b3c:	601a      	str	r2, [r3, #0]
}
 8006b3e:	bf00      	nop
 8006b40:	3714      	adds	r7, #20
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr
 8006b4a:	bf00      	nop
 8006b4c:	200005dc 	.word	0x200005dc
 8006b50:	20000684 	.word	0x20000684

08006b54 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006b54:	b480      	push	{r7}
 8006b56:	b085      	sub	sp, #20
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	4a07      	ldr	r2, [pc, #28]	@ (8006b80 <vApplicationGetTimerTaskMemory+0x2c>)
 8006b64:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	4a06      	ldr	r2, [pc, #24]	@ (8006b84 <vApplicationGetTimerTaskMemory+0x30>)
 8006b6a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006b72:	601a      	str	r2, [r3, #0]
}
 8006b74:	bf00      	nop
 8006b76:	3714      	adds	r7, #20
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr
 8006b80:	20000884 	.word	0x20000884
 8006b84:	2000092c 	.word	0x2000092c

08006b88 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f103 0208 	add.w	r2, r3, #8
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8006ba0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f103 0208 	add.w	r2, r3, #8
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f103 0208 	add.w	r2, r3, #8
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006bbc:	bf00      	nop
 8006bbe:	370c      	adds	r7, #12
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr

08006bc8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b083      	sub	sp, #12
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006bd6:	bf00      	nop
 8006bd8:	370c      	adds	r7, #12
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr

08006be2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006be2:	b480      	push	{r7}
 8006be4:	b085      	sub	sp, #20
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
 8006bea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	689a      	ldr	r2, [r3, #8]
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	683a      	ldr	r2, [r7, #0]
 8006c06:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	683a      	ldr	r2, [r7, #0]
 8006c0c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	1c5a      	adds	r2, r3, #1
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	601a      	str	r2, [r3, #0]
}
 8006c1e:	bf00      	nop
 8006c20:	3714      	adds	r7, #20
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr

08006c2a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006c2a:	b480      	push	{r7}
 8006c2c:	b085      	sub	sp, #20
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
 8006c32:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c40:	d103      	bne.n	8006c4a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	60fb      	str	r3, [r7, #12]
 8006c48:	e00c      	b.n	8006c64 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	3308      	adds	r3, #8
 8006c4e:	60fb      	str	r3, [r7, #12]
 8006c50:	e002      	b.n	8006c58 <vListInsert+0x2e>
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	60fb      	str	r3, [r7, #12]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	68ba      	ldr	r2, [r7, #8]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d2f6      	bcs.n	8006c52 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	685a      	ldr	r2, [r3, #4]
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	683a      	ldr	r2, [r7, #0]
 8006c72:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	68fa      	ldr	r2, [r7, #12]
 8006c78:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	683a      	ldr	r2, [r7, #0]
 8006c7e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	1c5a      	adds	r2, r3, #1
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	601a      	str	r2, [r3, #0]
}
 8006c90:	bf00      	nop
 8006c92:	3714      	adds	r7, #20
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b085      	sub	sp, #20
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	691b      	ldr	r3, [r3, #16]
 8006ca8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	6892      	ldr	r2, [r2, #8]
 8006cb2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	6852      	ldr	r2, [r2, #4]
 8006cbc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d103      	bne.n	8006cd0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	689a      	ldr	r2, [r3, #8]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	1e5a      	subs	r2, r3, #1
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3714      	adds	r7, #20
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d10b      	bne.n	8006d1c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d08:	f383 8811 	msr	BASEPRI, r3
 8006d0c:	f3bf 8f6f 	isb	sy
 8006d10:	f3bf 8f4f 	dsb	sy
 8006d14:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006d16:	bf00      	nop
 8006d18:	bf00      	nop
 8006d1a:	e7fd      	b.n	8006d18 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006d1c:	f002 f8ec 	bl	8008ef8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d28:	68f9      	ldr	r1, [r7, #12]
 8006d2a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006d2c:	fb01 f303 	mul.w	r3, r1, r3
 8006d30:	441a      	add	r2, r3
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d4c:	3b01      	subs	r3, #1
 8006d4e:	68f9      	ldr	r1, [r7, #12]
 8006d50:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006d52:	fb01 f303 	mul.w	r3, r1, r3
 8006d56:	441a      	add	r2, r3
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	22ff      	movs	r2, #255	@ 0xff
 8006d60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	22ff      	movs	r2, #255	@ 0xff
 8006d68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d114      	bne.n	8006d9c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d01a      	beq.n	8006db0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	3310      	adds	r3, #16
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f001 f986 	bl	8008090 <xTaskRemoveFromEventList>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d012      	beq.n	8006db0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8006dc0 <xQueueGenericReset+0xd0>)
 8006d8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d90:	601a      	str	r2, [r3, #0]
 8006d92:	f3bf 8f4f 	dsb	sy
 8006d96:	f3bf 8f6f 	isb	sy
 8006d9a:	e009      	b.n	8006db0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	3310      	adds	r3, #16
 8006da0:	4618      	mov	r0, r3
 8006da2:	f7ff fef1 	bl	8006b88 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	3324      	adds	r3, #36	@ 0x24
 8006daa:	4618      	mov	r0, r3
 8006dac:	f7ff feec 	bl	8006b88 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006db0:	f002 f8d4 	bl	8008f5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006db4:	2301      	movs	r3, #1
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3710      	adds	r7, #16
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop
 8006dc0:	e000ed04 	.word	0xe000ed04

08006dc4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b08e      	sub	sp, #56	@ 0x38
 8006dc8:	af02      	add	r7, sp, #8
 8006dca:	60f8      	str	r0, [r7, #12]
 8006dcc:	60b9      	str	r1, [r7, #8]
 8006dce:	607a      	str	r2, [r7, #4]
 8006dd0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d10b      	bne.n	8006df0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ddc:	f383 8811 	msr	BASEPRI, r3
 8006de0:	f3bf 8f6f 	isb	sy
 8006de4:	f3bf 8f4f 	dsb	sy
 8006de8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006dea:	bf00      	nop
 8006dec:	bf00      	nop
 8006dee:	e7fd      	b.n	8006dec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d10b      	bne.n	8006e0e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dfa:	f383 8811 	msr	BASEPRI, r3
 8006dfe:	f3bf 8f6f 	isb	sy
 8006e02:	f3bf 8f4f 	dsb	sy
 8006e06:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006e08:	bf00      	nop
 8006e0a:	bf00      	nop
 8006e0c:	e7fd      	b.n	8006e0a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d002      	beq.n	8006e1a <xQueueGenericCreateStatic+0x56>
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d001      	beq.n	8006e1e <xQueueGenericCreateStatic+0x5a>
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e000      	b.n	8006e20 <xQueueGenericCreateStatic+0x5c>
 8006e1e:	2300      	movs	r3, #0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d10b      	bne.n	8006e3c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e28:	f383 8811 	msr	BASEPRI, r3
 8006e2c:	f3bf 8f6f 	isb	sy
 8006e30:	f3bf 8f4f 	dsb	sy
 8006e34:	623b      	str	r3, [r7, #32]
}
 8006e36:	bf00      	nop
 8006e38:	bf00      	nop
 8006e3a:	e7fd      	b.n	8006e38 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d102      	bne.n	8006e48 <xQueueGenericCreateStatic+0x84>
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d101      	bne.n	8006e4c <xQueueGenericCreateStatic+0x88>
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e000      	b.n	8006e4e <xQueueGenericCreateStatic+0x8a>
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d10b      	bne.n	8006e6a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e56:	f383 8811 	msr	BASEPRI, r3
 8006e5a:	f3bf 8f6f 	isb	sy
 8006e5e:	f3bf 8f4f 	dsb	sy
 8006e62:	61fb      	str	r3, [r7, #28]
}
 8006e64:	bf00      	nop
 8006e66:	bf00      	nop
 8006e68:	e7fd      	b.n	8006e66 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006e6a:	2350      	movs	r3, #80	@ 0x50
 8006e6c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	2b50      	cmp	r3, #80	@ 0x50
 8006e72:	d00b      	beq.n	8006e8c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e78:	f383 8811 	msr	BASEPRI, r3
 8006e7c:	f3bf 8f6f 	isb	sy
 8006e80:	f3bf 8f4f 	dsb	sy
 8006e84:	61bb      	str	r3, [r7, #24]
}
 8006e86:	bf00      	nop
 8006e88:	bf00      	nop
 8006e8a:	e7fd      	b.n	8006e88 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006e8c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006e92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d00d      	beq.n	8006eb4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006ea0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ea6:	9300      	str	r3, [sp, #0]
 8006ea8:	4613      	mov	r3, r2
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	68b9      	ldr	r1, [r7, #8]
 8006eae:	68f8      	ldr	r0, [r7, #12]
 8006eb0:	f000 f805 	bl	8006ebe <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3730      	adds	r7, #48	@ 0x30
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}

08006ebe <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006ebe:	b580      	push	{r7, lr}
 8006ec0:	b084      	sub	sp, #16
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	60f8      	str	r0, [r7, #12]
 8006ec6:	60b9      	str	r1, [r7, #8]
 8006ec8:	607a      	str	r2, [r7, #4]
 8006eca:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d103      	bne.n	8006eda <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	69ba      	ldr	r2, [r7, #24]
 8006ed6:	601a      	str	r2, [r3, #0]
 8006ed8:	e002      	b.n	8006ee0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	68fa      	ldr	r2, [r7, #12]
 8006ee4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	68ba      	ldr	r2, [r7, #8]
 8006eea:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006eec:	2101      	movs	r1, #1
 8006eee:	69b8      	ldr	r0, [r7, #24]
 8006ef0:	f7ff fefe 	bl	8006cf0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	78fa      	ldrb	r2, [r7, #3]
 8006ef8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006efc:	bf00      	nop
 8006efe:	3710      	adds	r7, #16
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b08e      	sub	sp, #56	@ 0x38
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	607a      	str	r2, [r7, #4]
 8006f10:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006f12:	2300      	movs	r3, #0
 8006f14:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d10b      	bne.n	8006f38 <xQueueGenericSend+0x34>
	__asm volatile
 8006f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f24:	f383 8811 	msr	BASEPRI, r3
 8006f28:	f3bf 8f6f 	isb	sy
 8006f2c:	f3bf 8f4f 	dsb	sy
 8006f30:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006f32:	bf00      	nop
 8006f34:	bf00      	nop
 8006f36:	e7fd      	b.n	8006f34 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d103      	bne.n	8006f46 <xQueueGenericSend+0x42>
 8006f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d101      	bne.n	8006f4a <xQueueGenericSend+0x46>
 8006f46:	2301      	movs	r3, #1
 8006f48:	e000      	b.n	8006f4c <xQueueGenericSend+0x48>
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d10b      	bne.n	8006f68 <xQueueGenericSend+0x64>
	__asm volatile
 8006f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f54:	f383 8811 	msr	BASEPRI, r3
 8006f58:	f3bf 8f6f 	isb	sy
 8006f5c:	f3bf 8f4f 	dsb	sy
 8006f60:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006f62:	bf00      	nop
 8006f64:	bf00      	nop
 8006f66:	e7fd      	b.n	8006f64 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	d103      	bne.n	8006f76 <xQueueGenericSend+0x72>
 8006f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d101      	bne.n	8006f7a <xQueueGenericSend+0x76>
 8006f76:	2301      	movs	r3, #1
 8006f78:	e000      	b.n	8006f7c <xQueueGenericSend+0x78>
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d10b      	bne.n	8006f98 <xQueueGenericSend+0x94>
	__asm volatile
 8006f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f84:	f383 8811 	msr	BASEPRI, r3
 8006f88:	f3bf 8f6f 	isb	sy
 8006f8c:	f3bf 8f4f 	dsb	sy
 8006f90:	623b      	str	r3, [r7, #32]
}
 8006f92:	bf00      	nop
 8006f94:	bf00      	nop
 8006f96:	e7fd      	b.n	8006f94 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f98:	f001 fa40 	bl	800841c <xTaskGetSchedulerState>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d102      	bne.n	8006fa8 <xQueueGenericSend+0xa4>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d101      	bne.n	8006fac <xQueueGenericSend+0xa8>
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e000      	b.n	8006fae <xQueueGenericSend+0xaa>
 8006fac:	2300      	movs	r3, #0
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d10b      	bne.n	8006fca <xQueueGenericSend+0xc6>
	__asm volatile
 8006fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fb6:	f383 8811 	msr	BASEPRI, r3
 8006fba:	f3bf 8f6f 	isb	sy
 8006fbe:	f3bf 8f4f 	dsb	sy
 8006fc2:	61fb      	str	r3, [r7, #28]
}
 8006fc4:	bf00      	nop
 8006fc6:	bf00      	nop
 8006fc8:	e7fd      	b.n	8006fc6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006fca:	f001 ff95 	bl	8008ef8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d302      	bcc.n	8006fe0 <xQueueGenericSend+0xdc>
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	2b02      	cmp	r3, #2
 8006fde:	d129      	bne.n	8007034 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006fe0:	683a      	ldr	r2, [r7, #0]
 8006fe2:	68b9      	ldr	r1, [r7, #8]
 8006fe4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006fe6:	f000 fa2e 	bl	8007446 <prvCopyDataToQueue>
 8006fea:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d010      	beq.n	8007016 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff6:	3324      	adds	r3, #36	@ 0x24
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f001 f849 	bl	8008090 <xTaskRemoveFromEventList>
 8006ffe:	4603      	mov	r3, r0
 8007000:	2b00      	cmp	r3, #0
 8007002:	d013      	beq.n	800702c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007004:	4b3f      	ldr	r3, [pc, #252]	@ (8007104 <xQueueGenericSend+0x200>)
 8007006:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800700a:	601a      	str	r2, [r3, #0]
 800700c:	f3bf 8f4f 	dsb	sy
 8007010:	f3bf 8f6f 	isb	sy
 8007014:	e00a      	b.n	800702c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007018:	2b00      	cmp	r3, #0
 800701a:	d007      	beq.n	800702c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800701c:	4b39      	ldr	r3, [pc, #228]	@ (8007104 <xQueueGenericSend+0x200>)
 800701e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007022:	601a      	str	r2, [r3, #0]
 8007024:	f3bf 8f4f 	dsb	sy
 8007028:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800702c:	f001 ff96 	bl	8008f5c <vPortExitCritical>
				return pdPASS;
 8007030:	2301      	movs	r3, #1
 8007032:	e063      	b.n	80070fc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d103      	bne.n	8007042 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800703a:	f001 ff8f 	bl	8008f5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800703e:	2300      	movs	r3, #0
 8007040:	e05c      	b.n	80070fc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007044:	2b00      	cmp	r3, #0
 8007046:	d106      	bne.n	8007056 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007048:	f107 0314 	add.w	r3, r7, #20
 800704c:	4618      	mov	r0, r3
 800704e:	f001 f883 	bl	8008158 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007052:	2301      	movs	r3, #1
 8007054:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007056:	f001 ff81 	bl	8008f5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800705a:	f000 fdc7 	bl	8007bec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800705e:	f001 ff4b 	bl	8008ef8 <vPortEnterCritical>
 8007062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007064:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007068:	b25b      	sxtb	r3, r3
 800706a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800706e:	d103      	bne.n	8007078 <xQueueGenericSend+0x174>
 8007070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007072:	2200      	movs	r2, #0
 8007074:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800707a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800707e:	b25b      	sxtb	r3, r3
 8007080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007084:	d103      	bne.n	800708e <xQueueGenericSend+0x18a>
 8007086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007088:	2200      	movs	r2, #0
 800708a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800708e:	f001 ff65 	bl	8008f5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007092:	1d3a      	adds	r2, r7, #4
 8007094:	f107 0314 	add.w	r3, r7, #20
 8007098:	4611      	mov	r1, r2
 800709a:	4618      	mov	r0, r3
 800709c:	f001 f872 	bl	8008184 <xTaskCheckForTimeOut>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d124      	bne.n	80070f0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80070a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80070a8:	f000 fac5 	bl	8007636 <prvIsQueueFull>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d018      	beq.n	80070e4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80070b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b4:	3310      	adds	r3, #16
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	4611      	mov	r1, r2
 80070ba:	4618      	mov	r0, r3
 80070bc:	f000 ff96 	bl	8007fec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80070c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80070c2:	f000 fa50 	bl	8007566 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80070c6:	f000 fd9f 	bl	8007c08 <xTaskResumeAll>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f47f af7c 	bne.w	8006fca <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80070d2:	4b0c      	ldr	r3, [pc, #48]	@ (8007104 <xQueueGenericSend+0x200>)
 80070d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070d8:	601a      	str	r2, [r3, #0]
 80070da:	f3bf 8f4f 	dsb	sy
 80070de:	f3bf 8f6f 	isb	sy
 80070e2:	e772      	b.n	8006fca <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80070e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80070e6:	f000 fa3e 	bl	8007566 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80070ea:	f000 fd8d 	bl	8007c08 <xTaskResumeAll>
 80070ee:	e76c      	b.n	8006fca <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80070f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80070f2:	f000 fa38 	bl	8007566 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80070f6:	f000 fd87 	bl	8007c08 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80070fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3738      	adds	r7, #56	@ 0x38
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	e000ed04 	.word	0xe000ed04

08007108 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b090      	sub	sp, #64	@ 0x40
 800710c:	af00      	add	r7, sp, #0
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	607a      	str	r2, [r7, #4]
 8007114:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800711a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800711c:	2b00      	cmp	r3, #0
 800711e:	d10b      	bne.n	8007138 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007124:	f383 8811 	msr	BASEPRI, r3
 8007128:	f3bf 8f6f 	isb	sy
 800712c:	f3bf 8f4f 	dsb	sy
 8007130:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007132:	bf00      	nop
 8007134:	bf00      	nop
 8007136:	e7fd      	b.n	8007134 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d103      	bne.n	8007146 <xQueueGenericSendFromISR+0x3e>
 800713e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007142:	2b00      	cmp	r3, #0
 8007144:	d101      	bne.n	800714a <xQueueGenericSendFromISR+0x42>
 8007146:	2301      	movs	r3, #1
 8007148:	e000      	b.n	800714c <xQueueGenericSendFromISR+0x44>
 800714a:	2300      	movs	r3, #0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d10b      	bne.n	8007168 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007154:	f383 8811 	msr	BASEPRI, r3
 8007158:	f3bf 8f6f 	isb	sy
 800715c:	f3bf 8f4f 	dsb	sy
 8007160:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007162:	bf00      	nop
 8007164:	bf00      	nop
 8007166:	e7fd      	b.n	8007164 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	2b02      	cmp	r3, #2
 800716c:	d103      	bne.n	8007176 <xQueueGenericSendFromISR+0x6e>
 800716e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007170:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007172:	2b01      	cmp	r3, #1
 8007174:	d101      	bne.n	800717a <xQueueGenericSendFromISR+0x72>
 8007176:	2301      	movs	r3, #1
 8007178:	e000      	b.n	800717c <xQueueGenericSendFromISR+0x74>
 800717a:	2300      	movs	r3, #0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d10b      	bne.n	8007198 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007184:	f383 8811 	msr	BASEPRI, r3
 8007188:	f3bf 8f6f 	isb	sy
 800718c:	f3bf 8f4f 	dsb	sy
 8007190:	623b      	str	r3, [r7, #32]
}
 8007192:	bf00      	nop
 8007194:	bf00      	nop
 8007196:	e7fd      	b.n	8007194 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007198:	f001 ff8e 	bl	80090b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800719c:	f3ef 8211 	mrs	r2, BASEPRI
 80071a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071a4:	f383 8811 	msr	BASEPRI, r3
 80071a8:	f3bf 8f6f 	isb	sy
 80071ac:	f3bf 8f4f 	dsb	sy
 80071b0:	61fa      	str	r2, [r7, #28]
 80071b2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80071b4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80071b6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80071b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80071bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d302      	bcc.n	80071ca <xQueueGenericSendFromISR+0xc2>
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	2b02      	cmp	r3, #2
 80071c8:	d12f      	bne.n	800722a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80071ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80071d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80071d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80071da:	683a      	ldr	r2, [r7, #0]
 80071dc:	68b9      	ldr	r1, [r7, #8]
 80071de:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80071e0:	f000 f931 	bl	8007446 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80071e4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80071e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ec:	d112      	bne.n	8007214 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80071ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d016      	beq.n	8007224 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80071f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071f8:	3324      	adds	r3, #36	@ 0x24
 80071fa:	4618      	mov	r0, r3
 80071fc:	f000 ff48 	bl	8008090 <xTaskRemoveFromEventList>
 8007200:	4603      	mov	r3, r0
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00e      	beq.n	8007224 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d00b      	beq.n	8007224 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2201      	movs	r2, #1
 8007210:	601a      	str	r2, [r3, #0]
 8007212:	e007      	b.n	8007224 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007214:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007218:	3301      	adds	r3, #1
 800721a:	b2db      	uxtb	r3, r3
 800721c:	b25a      	sxtb	r2, r3
 800721e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007220:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007224:	2301      	movs	r3, #1
 8007226:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007228:	e001      	b.n	800722e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800722a:	2300      	movs	r3, #0
 800722c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800722e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007230:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007238:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800723a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800723c:	4618      	mov	r0, r3
 800723e:	3740      	adds	r7, #64	@ 0x40
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b08c      	sub	sp, #48	@ 0x30
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007250:	2300      	movs	r3, #0
 8007252:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800725a:	2b00      	cmp	r3, #0
 800725c:	d10b      	bne.n	8007276 <xQueueReceive+0x32>
	__asm volatile
 800725e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007262:	f383 8811 	msr	BASEPRI, r3
 8007266:	f3bf 8f6f 	isb	sy
 800726a:	f3bf 8f4f 	dsb	sy
 800726e:	623b      	str	r3, [r7, #32]
}
 8007270:	bf00      	nop
 8007272:	bf00      	nop
 8007274:	e7fd      	b.n	8007272 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d103      	bne.n	8007284 <xQueueReceive+0x40>
 800727c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800727e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007280:	2b00      	cmp	r3, #0
 8007282:	d101      	bne.n	8007288 <xQueueReceive+0x44>
 8007284:	2301      	movs	r3, #1
 8007286:	e000      	b.n	800728a <xQueueReceive+0x46>
 8007288:	2300      	movs	r3, #0
 800728a:	2b00      	cmp	r3, #0
 800728c:	d10b      	bne.n	80072a6 <xQueueReceive+0x62>
	__asm volatile
 800728e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007292:	f383 8811 	msr	BASEPRI, r3
 8007296:	f3bf 8f6f 	isb	sy
 800729a:	f3bf 8f4f 	dsb	sy
 800729e:	61fb      	str	r3, [r7, #28]
}
 80072a0:	bf00      	nop
 80072a2:	bf00      	nop
 80072a4:	e7fd      	b.n	80072a2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80072a6:	f001 f8b9 	bl	800841c <xTaskGetSchedulerState>
 80072aa:	4603      	mov	r3, r0
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d102      	bne.n	80072b6 <xQueueReceive+0x72>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d101      	bne.n	80072ba <xQueueReceive+0x76>
 80072b6:	2301      	movs	r3, #1
 80072b8:	e000      	b.n	80072bc <xQueueReceive+0x78>
 80072ba:	2300      	movs	r3, #0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d10b      	bne.n	80072d8 <xQueueReceive+0x94>
	__asm volatile
 80072c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072c4:	f383 8811 	msr	BASEPRI, r3
 80072c8:	f3bf 8f6f 	isb	sy
 80072cc:	f3bf 8f4f 	dsb	sy
 80072d0:	61bb      	str	r3, [r7, #24]
}
 80072d2:	bf00      	nop
 80072d4:	bf00      	nop
 80072d6:	e7fd      	b.n	80072d4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80072d8:	f001 fe0e 	bl	8008ef8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80072dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072e0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80072e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d01f      	beq.n	8007328 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80072e8:	68b9      	ldr	r1, [r7, #8]
 80072ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80072ec:	f000 f915 	bl	800751a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80072f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f2:	1e5a      	subs	r2, r3, #1
 80072f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072f6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072fa:	691b      	ldr	r3, [r3, #16]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d00f      	beq.n	8007320 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007302:	3310      	adds	r3, #16
 8007304:	4618      	mov	r0, r3
 8007306:	f000 fec3 	bl	8008090 <xTaskRemoveFromEventList>
 800730a:	4603      	mov	r3, r0
 800730c:	2b00      	cmp	r3, #0
 800730e:	d007      	beq.n	8007320 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007310:	4b3c      	ldr	r3, [pc, #240]	@ (8007404 <xQueueReceive+0x1c0>)
 8007312:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007316:	601a      	str	r2, [r3, #0]
 8007318:	f3bf 8f4f 	dsb	sy
 800731c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007320:	f001 fe1c 	bl	8008f5c <vPortExitCritical>
				return pdPASS;
 8007324:	2301      	movs	r3, #1
 8007326:	e069      	b.n	80073fc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d103      	bne.n	8007336 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800732e:	f001 fe15 	bl	8008f5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007332:	2300      	movs	r3, #0
 8007334:	e062      	b.n	80073fc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007338:	2b00      	cmp	r3, #0
 800733a:	d106      	bne.n	800734a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800733c:	f107 0310 	add.w	r3, r7, #16
 8007340:	4618      	mov	r0, r3
 8007342:	f000 ff09 	bl	8008158 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007346:	2301      	movs	r3, #1
 8007348:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800734a:	f001 fe07 	bl	8008f5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800734e:	f000 fc4d 	bl	8007bec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007352:	f001 fdd1 	bl	8008ef8 <vPortEnterCritical>
 8007356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007358:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800735c:	b25b      	sxtb	r3, r3
 800735e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007362:	d103      	bne.n	800736c <xQueueReceive+0x128>
 8007364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007366:	2200      	movs	r2, #0
 8007368:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800736c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800736e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007372:	b25b      	sxtb	r3, r3
 8007374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007378:	d103      	bne.n	8007382 <xQueueReceive+0x13e>
 800737a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800737c:	2200      	movs	r2, #0
 800737e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007382:	f001 fdeb 	bl	8008f5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007386:	1d3a      	adds	r2, r7, #4
 8007388:	f107 0310 	add.w	r3, r7, #16
 800738c:	4611      	mov	r1, r2
 800738e:	4618      	mov	r0, r3
 8007390:	f000 fef8 	bl	8008184 <xTaskCheckForTimeOut>
 8007394:	4603      	mov	r3, r0
 8007396:	2b00      	cmp	r3, #0
 8007398:	d123      	bne.n	80073e2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800739a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800739c:	f000 f935 	bl	800760a <prvIsQueueEmpty>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d017      	beq.n	80073d6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80073a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073a8:	3324      	adds	r3, #36	@ 0x24
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	4611      	mov	r1, r2
 80073ae:	4618      	mov	r0, r3
 80073b0:	f000 fe1c 	bl	8007fec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80073b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80073b6:	f000 f8d6 	bl	8007566 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80073ba:	f000 fc25 	bl	8007c08 <xTaskResumeAll>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d189      	bne.n	80072d8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80073c4:	4b0f      	ldr	r3, [pc, #60]	@ (8007404 <xQueueReceive+0x1c0>)
 80073c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073ca:	601a      	str	r2, [r3, #0]
 80073cc:	f3bf 8f4f 	dsb	sy
 80073d0:	f3bf 8f6f 	isb	sy
 80073d4:	e780      	b.n	80072d8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80073d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80073d8:	f000 f8c5 	bl	8007566 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80073dc:	f000 fc14 	bl	8007c08 <xTaskResumeAll>
 80073e0:	e77a      	b.n	80072d8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80073e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80073e4:	f000 f8bf 	bl	8007566 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80073e8:	f000 fc0e 	bl	8007c08 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80073ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80073ee:	f000 f90c 	bl	800760a <prvIsQueueEmpty>
 80073f2:	4603      	mov	r3, r0
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	f43f af6f 	beq.w	80072d8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80073fa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3730      	adds	r7, #48	@ 0x30
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}
 8007404:	e000ed04 	.word	0xe000ed04

08007408 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d10b      	bne.n	800742e <uxQueueMessagesWaiting+0x26>
	__asm volatile
 8007416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800741a:	f383 8811 	msr	BASEPRI, r3
 800741e:	f3bf 8f6f 	isb	sy
 8007422:	f3bf 8f4f 	dsb	sy
 8007426:	60bb      	str	r3, [r7, #8]
}
 8007428:	bf00      	nop
 800742a:	bf00      	nop
 800742c:	e7fd      	b.n	800742a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800742e:	f001 fd63 	bl	8008ef8 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007436:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8007438:	f001 fd90 	bl	8008f5c <vPortExitCritical>

	return uxReturn;
 800743c:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800743e:	4618      	mov	r0, r3
 8007440:	3710      	adds	r7, #16
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}

08007446 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007446:	b580      	push	{r7, lr}
 8007448:	b086      	sub	sp, #24
 800744a:	af00      	add	r7, sp, #0
 800744c:	60f8      	str	r0, [r7, #12]
 800744e:	60b9      	str	r1, [r7, #8]
 8007450:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007452:	2300      	movs	r3, #0
 8007454:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800745a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007460:	2b00      	cmp	r3, #0
 8007462:	d10d      	bne.n	8007480 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d14d      	bne.n	8007508 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	4618      	mov	r0, r3
 8007472:	f000 fff1 	bl	8008458 <xTaskPriorityDisinherit>
 8007476:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2200      	movs	r2, #0
 800747c:	609a      	str	r2, [r3, #8]
 800747e:	e043      	b.n	8007508 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d119      	bne.n	80074ba <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	6858      	ldr	r0, [r3, #4]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800748e:	461a      	mov	r2, r3
 8007490:	68b9      	ldr	r1, [r7, #8]
 8007492:	f003 fd7c 	bl	800af8e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	685a      	ldr	r2, [r3, #4]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800749e:	441a      	add	r2, r3
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	685a      	ldr	r2, [r3, #4]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d32b      	bcc.n	8007508 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	605a      	str	r2, [r3, #4]
 80074b8:	e026      	b.n	8007508 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	68d8      	ldr	r0, [r3, #12]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074c2:	461a      	mov	r2, r3
 80074c4:	68b9      	ldr	r1, [r7, #8]
 80074c6:	f003 fd62 	bl	800af8e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	68da      	ldr	r2, [r3, #12]
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074d2:	425b      	negs	r3, r3
 80074d4:	441a      	add	r2, r3
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	68da      	ldr	r2, [r3, #12]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d207      	bcs.n	80074f6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	689a      	ldr	r2, [r3, #8]
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074ee:	425b      	negs	r3, r3
 80074f0:	441a      	add	r2, r3
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2b02      	cmp	r3, #2
 80074fa:	d105      	bne.n	8007508 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d002      	beq.n	8007508 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	3b01      	subs	r3, #1
 8007506:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	1c5a      	adds	r2, r3, #1
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007510:	697b      	ldr	r3, [r7, #20]
}
 8007512:	4618      	mov	r0, r3
 8007514:	3718      	adds	r7, #24
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}

0800751a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800751a:	b580      	push	{r7, lr}
 800751c:	b082      	sub	sp, #8
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
 8007522:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007528:	2b00      	cmp	r3, #0
 800752a:	d018      	beq.n	800755e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	68da      	ldr	r2, [r3, #12]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007534:	441a      	add	r2, r3
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	68da      	ldr	r2, [r3, #12]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	429a      	cmp	r2, r3
 8007544:	d303      	bcc.n	800754e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	68d9      	ldr	r1, [r3, #12]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007556:	461a      	mov	r2, r3
 8007558:	6838      	ldr	r0, [r7, #0]
 800755a:	f003 fd18 	bl	800af8e <memcpy>
	}
}
 800755e:	bf00      	nop
 8007560:	3708      	adds	r7, #8
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}

08007566 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007566:	b580      	push	{r7, lr}
 8007568:	b084      	sub	sp, #16
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800756e:	f001 fcc3 	bl	8008ef8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007578:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800757a:	e011      	b.n	80075a0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007580:	2b00      	cmp	r3, #0
 8007582:	d012      	beq.n	80075aa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	3324      	adds	r3, #36	@ 0x24
 8007588:	4618      	mov	r0, r3
 800758a:	f000 fd81 	bl	8008090 <xTaskRemoveFromEventList>
 800758e:	4603      	mov	r3, r0
 8007590:	2b00      	cmp	r3, #0
 8007592:	d001      	beq.n	8007598 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007594:	f000 fe5a 	bl	800824c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007598:	7bfb      	ldrb	r3, [r7, #15]
 800759a:	3b01      	subs	r3, #1
 800759c:	b2db      	uxtb	r3, r3
 800759e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80075a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	dce9      	bgt.n	800757c <prvUnlockQueue+0x16>
 80075a8:	e000      	b.n	80075ac <prvUnlockQueue+0x46>
					break;
 80075aa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	22ff      	movs	r2, #255	@ 0xff
 80075b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80075b4:	f001 fcd2 	bl	8008f5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80075b8:	f001 fc9e 	bl	8008ef8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80075c2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80075c4:	e011      	b.n	80075ea <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	691b      	ldr	r3, [r3, #16]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d012      	beq.n	80075f4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	3310      	adds	r3, #16
 80075d2:	4618      	mov	r0, r3
 80075d4:	f000 fd5c 	bl	8008090 <xTaskRemoveFromEventList>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d001      	beq.n	80075e2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80075de:	f000 fe35 	bl	800824c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80075e2:	7bbb      	ldrb	r3, [r7, #14]
 80075e4:	3b01      	subs	r3, #1
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80075ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	dce9      	bgt.n	80075c6 <prvUnlockQueue+0x60>
 80075f2:	e000      	b.n	80075f6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80075f4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	22ff      	movs	r2, #255	@ 0xff
 80075fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80075fe:	f001 fcad 	bl	8008f5c <vPortExitCritical>
}
 8007602:	bf00      	nop
 8007604:	3710      	adds	r7, #16
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}

0800760a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800760a:	b580      	push	{r7, lr}
 800760c:	b084      	sub	sp, #16
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007612:	f001 fc71 	bl	8008ef8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800761a:	2b00      	cmp	r3, #0
 800761c:	d102      	bne.n	8007624 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800761e:	2301      	movs	r3, #1
 8007620:	60fb      	str	r3, [r7, #12]
 8007622:	e001      	b.n	8007628 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007624:	2300      	movs	r3, #0
 8007626:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007628:	f001 fc98 	bl	8008f5c <vPortExitCritical>

	return xReturn;
 800762c:	68fb      	ldr	r3, [r7, #12]
}
 800762e:	4618      	mov	r0, r3
 8007630:	3710      	adds	r7, #16
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}

08007636 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007636:	b580      	push	{r7, lr}
 8007638:	b084      	sub	sp, #16
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800763e:	f001 fc5b 	bl	8008ef8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800764a:	429a      	cmp	r2, r3
 800764c:	d102      	bne.n	8007654 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800764e:	2301      	movs	r3, #1
 8007650:	60fb      	str	r3, [r7, #12]
 8007652:	e001      	b.n	8007658 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007654:	2300      	movs	r3, #0
 8007656:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007658:	f001 fc80 	bl	8008f5c <vPortExitCritical>

	return xReturn;
 800765c:	68fb      	ldr	r3, [r7, #12]
}
 800765e:	4618      	mov	r0, r3
 8007660:	3710      	adds	r7, #16
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
	...

08007668 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007668:	b480      	push	{r7}
 800766a:	b085      	sub	sp, #20
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007672:	2300      	movs	r3, #0
 8007674:	60fb      	str	r3, [r7, #12]
 8007676:	e014      	b.n	80076a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007678:	4a0f      	ldr	r2, [pc, #60]	@ (80076b8 <vQueueAddToRegistry+0x50>)
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d10b      	bne.n	800769c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007684:	490c      	ldr	r1, [pc, #48]	@ (80076b8 <vQueueAddToRegistry+0x50>)
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	683a      	ldr	r2, [r7, #0]
 800768a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800768e:	4a0a      	ldr	r2, [pc, #40]	@ (80076b8 <vQueueAddToRegistry+0x50>)
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	00db      	lsls	r3, r3, #3
 8007694:	4413      	add	r3, r2
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800769a:	e006      	b.n	80076aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	3301      	adds	r3, #1
 80076a0:	60fb      	str	r3, [r7, #12]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2b07      	cmp	r3, #7
 80076a6:	d9e7      	bls.n	8007678 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80076a8:	bf00      	nop
 80076aa:	bf00      	nop
 80076ac:	3714      	adds	r7, #20
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr
 80076b6:	bf00      	nop
 80076b8:	20000d2c 	.word	0x20000d2c

080076bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b086      	sub	sp, #24
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	60b9      	str	r1, [r7, #8]
 80076c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80076cc:	f001 fc14 	bl	8008ef8 <vPortEnterCritical>
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80076d6:	b25b      	sxtb	r3, r3
 80076d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076dc:	d103      	bne.n	80076e6 <vQueueWaitForMessageRestricted+0x2a>
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	2200      	movs	r2, #0
 80076e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80076ec:	b25b      	sxtb	r3, r3
 80076ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076f2:	d103      	bne.n	80076fc <vQueueWaitForMessageRestricted+0x40>
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80076fc:	f001 fc2e 	bl	8008f5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007704:	2b00      	cmp	r3, #0
 8007706:	d106      	bne.n	8007716 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	3324      	adds	r3, #36	@ 0x24
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	68b9      	ldr	r1, [r7, #8]
 8007710:	4618      	mov	r0, r3
 8007712:	f000 fc91 	bl	8008038 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007716:	6978      	ldr	r0, [r7, #20]
 8007718:	f7ff ff25 	bl	8007566 <prvUnlockQueue>
	}
 800771c:	bf00      	nop
 800771e:	3718      	adds	r7, #24
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007724:	b580      	push	{r7, lr}
 8007726:	b08e      	sub	sp, #56	@ 0x38
 8007728:	af04      	add	r7, sp, #16
 800772a:	60f8      	str	r0, [r7, #12]
 800772c:	60b9      	str	r1, [r7, #8]
 800772e:	607a      	str	r2, [r7, #4]
 8007730:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007734:	2b00      	cmp	r3, #0
 8007736:	d10b      	bne.n	8007750 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800773c:	f383 8811 	msr	BASEPRI, r3
 8007740:	f3bf 8f6f 	isb	sy
 8007744:	f3bf 8f4f 	dsb	sy
 8007748:	623b      	str	r3, [r7, #32]
}
 800774a:	bf00      	nop
 800774c:	bf00      	nop
 800774e:	e7fd      	b.n	800774c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007752:	2b00      	cmp	r3, #0
 8007754:	d10b      	bne.n	800776e <xTaskCreateStatic+0x4a>
	__asm volatile
 8007756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800775a:	f383 8811 	msr	BASEPRI, r3
 800775e:	f3bf 8f6f 	isb	sy
 8007762:	f3bf 8f4f 	dsb	sy
 8007766:	61fb      	str	r3, [r7, #28]
}
 8007768:	bf00      	nop
 800776a:	bf00      	nop
 800776c:	e7fd      	b.n	800776a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800776e:	23a8      	movs	r3, #168	@ 0xa8
 8007770:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	2ba8      	cmp	r3, #168	@ 0xa8
 8007776:	d00b      	beq.n	8007790 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800777c:	f383 8811 	msr	BASEPRI, r3
 8007780:	f3bf 8f6f 	isb	sy
 8007784:	f3bf 8f4f 	dsb	sy
 8007788:	61bb      	str	r3, [r7, #24]
}
 800778a:	bf00      	nop
 800778c:	bf00      	nop
 800778e:	e7fd      	b.n	800778c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007790:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007794:	2b00      	cmp	r3, #0
 8007796:	d01e      	beq.n	80077d6 <xTaskCreateStatic+0xb2>
 8007798:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800779a:	2b00      	cmp	r3, #0
 800779c:	d01b      	beq.n	80077d6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800779e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077a0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80077a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80077a6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80077a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077aa:	2202      	movs	r2, #2
 80077ac:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80077b0:	2300      	movs	r3, #0
 80077b2:	9303      	str	r3, [sp, #12]
 80077b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b6:	9302      	str	r3, [sp, #8]
 80077b8:	f107 0314 	add.w	r3, r7, #20
 80077bc:	9301      	str	r3, [sp, #4]
 80077be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077c0:	9300      	str	r3, [sp, #0]
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	68b9      	ldr	r1, [r7, #8]
 80077c8:	68f8      	ldr	r0, [r7, #12]
 80077ca:	f000 f851 	bl	8007870 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80077ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80077d0:	f000 f8f6 	bl	80079c0 <prvAddNewTaskToReadyList>
 80077d4:	e001      	b.n	80077da <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80077d6:	2300      	movs	r3, #0
 80077d8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80077da:	697b      	ldr	r3, [r7, #20]
	}
 80077dc:	4618      	mov	r0, r3
 80077de:	3728      	adds	r7, #40	@ 0x28
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b08c      	sub	sp, #48	@ 0x30
 80077e8:	af04      	add	r7, sp, #16
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	60b9      	str	r1, [r7, #8]
 80077ee:	603b      	str	r3, [r7, #0]
 80077f0:	4613      	mov	r3, r2
 80077f2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80077f4:	88fb      	ldrh	r3, [r7, #6]
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	4618      	mov	r0, r3
 80077fa:	f001 fc9f 	bl	800913c <pvPortMalloc>
 80077fe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d00e      	beq.n	8007824 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007806:	20a8      	movs	r0, #168	@ 0xa8
 8007808:	f001 fc98 	bl	800913c <pvPortMalloc>
 800780c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800780e:	69fb      	ldr	r3, [r7, #28]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d003      	beq.n	800781c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007814:	69fb      	ldr	r3, [r7, #28]
 8007816:	697a      	ldr	r2, [r7, #20]
 8007818:	631a      	str	r2, [r3, #48]	@ 0x30
 800781a:	e005      	b.n	8007828 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800781c:	6978      	ldr	r0, [r7, #20]
 800781e:	f001 fd5b 	bl	80092d8 <vPortFree>
 8007822:	e001      	b.n	8007828 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007824:	2300      	movs	r3, #0
 8007826:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007828:	69fb      	ldr	r3, [r7, #28]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d017      	beq.n	800785e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800782e:	69fb      	ldr	r3, [r7, #28]
 8007830:	2200      	movs	r2, #0
 8007832:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007836:	88fa      	ldrh	r2, [r7, #6]
 8007838:	2300      	movs	r3, #0
 800783a:	9303      	str	r3, [sp, #12]
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	9302      	str	r3, [sp, #8]
 8007840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007842:	9301      	str	r3, [sp, #4]
 8007844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007846:	9300      	str	r3, [sp, #0]
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	68b9      	ldr	r1, [r7, #8]
 800784c:	68f8      	ldr	r0, [r7, #12]
 800784e:	f000 f80f 	bl	8007870 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007852:	69f8      	ldr	r0, [r7, #28]
 8007854:	f000 f8b4 	bl	80079c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007858:	2301      	movs	r3, #1
 800785a:	61bb      	str	r3, [r7, #24]
 800785c:	e002      	b.n	8007864 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800785e:	f04f 33ff 	mov.w	r3, #4294967295
 8007862:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007864:	69bb      	ldr	r3, [r7, #24]
	}
 8007866:	4618      	mov	r0, r3
 8007868:	3720      	adds	r7, #32
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
	...

08007870 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b088      	sub	sp, #32
 8007874:	af00      	add	r7, sp, #0
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	60b9      	str	r1, [r7, #8]
 800787a:	607a      	str	r2, [r7, #4]
 800787c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800787e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007880:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	009b      	lsls	r3, r3, #2
 8007886:	461a      	mov	r2, r3
 8007888:	21a5      	movs	r1, #165	@ 0xa5
 800788a:	f003 fa6e 	bl	800ad6a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800788e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007890:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007898:	3b01      	subs	r3, #1
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	4413      	add	r3, r2
 800789e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80078a0:	69bb      	ldr	r3, [r7, #24]
 80078a2:	f023 0307 	bic.w	r3, r3, #7
 80078a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80078a8:	69bb      	ldr	r3, [r7, #24]
 80078aa:	f003 0307 	and.w	r3, r3, #7
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d00b      	beq.n	80078ca <prvInitialiseNewTask+0x5a>
	__asm volatile
 80078b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078b6:	f383 8811 	msr	BASEPRI, r3
 80078ba:	f3bf 8f6f 	isb	sy
 80078be:	f3bf 8f4f 	dsb	sy
 80078c2:	617b      	str	r3, [r7, #20]
}
 80078c4:	bf00      	nop
 80078c6:	bf00      	nop
 80078c8:	e7fd      	b.n	80078c6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d01f      	beq.n	8007910 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80078d0:	2300      	movs	r3, #0
 80078d2:	61fb      	str	r3, [r7, #28]
 80078d4:	e012      	b.n	80078fc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80078d6:	68ba      	ldr	r2, [r7, #8]
 80078d8:	69fb      	ldr	r3, [r7, #28]
 80078da:	4413      	add	r3, r2
 80078dc:	7819      	ldrb	r1, [r3, #0]
 80078de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078e0:	69fb      	ldr	r3, [r7, #28]
 80078e2:	4413      	add	r3, r2
 80078e4:	3334      	adds	r3, #52	@ 0x34
 80078e6:	460a      	mov	r2, r1
 80078e8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80078ea:	68ba      	ldr	r2, [r7, #8]
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	4413      	add	r3, r2
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d006      	beq.n	8007904 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80078f6:	69fb      	ldr	r3, [r7, #28]
 80078f8:	3301      	adds	r3, #1
 80078fa:	61fb      	str	r3, [r7, #28]
 80078fc:	69fb      	ldr	r3, [r7, #28]
 80078fe:	2b0f      	cmp	r3, #15
 8007900:	d9e9      	bls.n	80078d6 <prvInitialiseNewTask+0x66>
 8007902:	e000      	b.n	8007906 <prvInitialiseNewTask+0x96>
			{
				break;
 8007904:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007908:	2200      	movs	r2, #0
 800790a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800790e:	e003      	b.n	8007918 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007912:	2200      	movs	r2, #0
 8007914:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800791a:	2b37      	cmp	r3, #55	@ 0x37
 800791c:	d901      	bls.n	8007922 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800791e:	2337      	movs	r3, #55	@ 0x37
 8007920:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007924:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007926:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800792a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800792c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800792e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007930:	2200      	movs	r2, #0
 8007932:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007936:	3304      	adds	r3, #4
 8007938:	4618      	mov	r0, r3
 800793a:	f7ff f945 	bl	8006bc8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800793e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007940:	3318      	adds	r3, #24
 8007942:	4618      	mov	r0, r3
 8007944:	f7ff f940 	bl	8006bc8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800794a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800794c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800794e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007950:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007956:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800795a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800795c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800795e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007960:	2200      	movs	r2, #0
 8007962:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007968:	2200      	movs	r2, #0
 800796a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800796e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007970:	3354      	adds	r3, #84	@ 0x54
 8007972:	224c      	movs	r2, #76	@ 0x4c
 8007974:	2100      	movs	r1, #0
 8007976:	4618      	mov	r0, r3
 8007978:	f003 f9f7 	bl	800ad6a <memset>
 800797c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800797e:	4a0d      	ldr	r2, [pc, #52]	@ (80079b4 <prvInitialiseNewTask+0x144>)
 8007980:	659a      	str	r2, [r3, #88]	@ 0x58
 8007982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007984:	4a0c      	ldr	r2, [pc, #48]	@ (80079b8 <prvInitialiseNewTask+0x148>)
 8007986:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800798a:	4a0c      	ldr	r2, [pc, #48]	@ (80079bc <prvInitialiseNewTask+0x14c>)
 800798c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800798e:	683a      	ldr	r2, [r7, #0]
 8007990:	68f9      	ldr	r1, [r7, #12]
 8007992:	69b8      	ldr	r0, [r7, #24]
 8007994:	f001 f97e 	bl	8008c94 <pxPortInitialiseStack>
 8007998:	4602      	mov	r2, r0
 800799a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800799c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800799e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d002      	beq.n	80079aa <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80079a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80079aa:	bf00      	nop
 80079ac:	3720      	adds	r7, #32
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	2000de78 	.word	0x2000de78
 80079b8:	2000dee0 	.word	0x2000dee0
 80079bc:	2000df48 	.word	0x2000df48

080079c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b082      	sub	sp, #8
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80079c8:	f001 fa96 	bl	8008ef8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80079cc:	4b2d      	ldr	r3, [pc, #180]	@ (8007a84 <prvAddNewTaskToReadyList+0xc4>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	3301      	adds	r3, #1
 80079d2:	4a2c      	ldr	r2, [pc, #176]	@ (8007a84 <prvAddNewTaskToReadyList+0xc4>)
 80079d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80079d6:	4b2c      	ldr	r3, [pc, #176]	@ (8007a88 <prvAddNewTaskToReadyList+0xc8>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d109      	bne.n	80079f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80079de:	4a2a      	ldr	r2, [pc, #168]	@ (8007a88 <prvAddNewTaskToReadyList+0xc8>)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80079e4:	4b27      	ldr	r3, [pc, #156]	@ (8007a84 <prvAddNewTaskToReadyList+0xc4>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d110      	bne.n	8007a0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80079ec:	f000 fc52 	bl	8008294 <prvInitialiseTaskLists>
 80079f0:	e00d      	b.n	8007a0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80079f2:	4b26      	ldr	r3, [pc, #152]	@ (8007a8c <prvAddNewTaskToReadyList+0xcc>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d109      	bne.n	8007a0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80079fa:	4b23      	ldr	r3, [pc, #140]	@ (8007a88 <prvAddNewTaskToReadyList+0xc8>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d802      	bhi.n	8007a0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007a08:	4a1f      	ldr	r2, [pc, #124]	@ (8007a88 <prvAddNewTaskToReadyList+0xc8>)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007a0e:	4b20      	ldr	r3, [pc, #128]	@ (8007a90 <prvAddNewTaskToReadyList+0xd0>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	3301      	adds	r3, #1
 8007a14:	4a1e      	ldr	r2, [pc, #120]	@ (8007a90 <prvAddNewTaskToReadyList+0xd0>)
 8007a16:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007a18:	4b1d      	ldr	r3, [pc, #116]	@ (8007a90 <prvAddNewTaskToReadyList+0xd0>)
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a24:	4b1b      	ldr	r3, [pc, #108]	@ (8007a94 <prvAddNewTaskToReadyList+0xd4>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d903      	bls.n	8007a34 <prvAddNewTaskToReadyList+0x74>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a30:	4a18      	ldr	r2, [pc, #96]	@ (8007a94 <prvAddNewTaskToReadyList+0xd4>)
 8007a32:	6013      	str	r3, [r2, #0]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a38:	4613      	mov	r3, r2
 8007a3a:	009b      	lsls	r3, r3, #2
 8007a3c:	4413      	add	r3, r2
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	4a15      	ldr	r2, [pc, #84]	@ (8007a98 <prvAddNewTaskToReadyList+0xd8>)
 8007a42:	441a      	add	r2, r3
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	3304      	adds	r3, #4
 8007a48:	4619      	mov	r1, r3
 8007a4a:	4610      	mov	r0, r2
 8007a4c:	f7ff f8c9 	bl	8006be2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007a50:	f001 fa84 	bl	8008f5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007a54:	4b0d      	ldr	r3, [pc, #52]	@ (8007a8c <prvAddNewTaskToReadyList+0xcc>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d00e      	beq.n	8007a7a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8007a88 <prvAddNewTaskToReadyList+0xc8>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d207      	bcs.n	8007a7a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007a6a:	4b0c      	ldr	r3, [pc, #48]	@ (8007a9c <prvAddNewTaskToReadyList+0xdc>)
 8007a6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a70:	601a      	str	r2, [r3, #0]
 8007a72:	f3bf 8f4f 	dsb	sy
 8007a76:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a7a:	bf00      	nop
 8007a7c:	3708      	adds	r7, #8
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	20001240 	.word	0x20001240
 8007a88:	20000d6c 	.word	0x20000d6c
 8007a8c:	2000124c 	.word	0x2000124c
 8007a90:	2000125c 	.word	0x2000125c
 8007a94:	20001248 	.word	0x20001248
 8007a98:	20000d70 	.word	0x20000d70
 8007a9c:	e000ed04 	.word	0xe000ed04

08007aa0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d018      	beq.n	8007ae4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007ab2:	4b14      	ldr	r3, [pc, #80]	@ (8007b04 <vTaskDelay+0x64>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d00b      	beq.n	8007ad2 <vTaskDelay+0x32>
	__asm volatile
 8007aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007abe:	f383 8811 	msr	BASEPRI, r3
 8007ac2:	f3bf 8f6f 	isb	sy
 8007ac6:	f3bf 8f4f 	dsb	sy
 8007aca:	60bb      	str	r3, [r7, #8]
}
 8007acc:	bf00      	nop
 8007ace:	bf00      	nop
 8007ad0:	e7fd      	b.n	8007ace <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007ad2:	f000 f88b 	bl	8007bec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007ad6:	2100      	movs	r1, #0
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 fd2d 	bl	8008538 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007ade:	f000 f893 	bl	8007c08 <xTaskResumeAll>
 8007ae2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d107      	bne.n	8007afa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007aea:	4b07      	ldr	r3, [pc, #28]	@ (8007b08 <vTaskDelay+0x68>)
 8007aec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007af0:	601a      	str	r2, [r3, #0]
 8007af2:	f3bf 8f4f 	dsb	sy
 8007af6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007afa:	bf00      	nop
 8007afc:	3710      	adds	r7, #16
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
 8007b02:	bf00      	nop
 8007b04:	20001268 	.word	0x20001268
 8007b08:	e000ed04 	.word	0xe000ed04

08007b0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b08a      	sub	sp, #40	@ 0x28
 8007b10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007b12:	2300      	movs	r3, #0
 8007b14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007b16:	2300      	movs	r3, #0
 8007b18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007b1a:	463a      	mov	r2, r7
 8007b1c:	1d39      	adds	r1, r7, #4
 8007b1e:	f107 0308 	add.w	r3, r7, #8
 8007b22:	4618      	mov	r0, r3
 8007b24:	f7fe fffc 	bl	8006b20 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007b28:	6839      	ldr	r1, [r7, #0]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	68ba      	ldr	r2, [r7, #8]
 8007b2e:	9202      	str	r2, [sp, #8]
 8007b30:	9301      	str	r3, [sp, #4]
 8007b32:	2300      	movs	r3, #0
 8007b34:	9300      	str	r3, [sp, #0]
 8007b36:	2300      	movs	r3, #0
 8007b38:	460a      	mov	r2, r1
 8007b3a:	4924      	ldr	r1, [pc, #144]	@ (8007bcc <vTaskStartScheduler+0xc0>)
 8007b3c:	4824      	ldr	r0, [pc, #144]	@ (8007bd0 <vTaskStartScheduler+0xc4>)
 8007b3e:	f7ff fdf1 	bl	8007724 <xTaskCreateStatic>
 8007b42:	4603      	mov	r3, r0
 8007b44:	4a23      	ldr	r2, [pc, #140]	@ (8007bd4 <vTaskStartScheduler+0xc8>)
 8007b46:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007b48:	4b22      	ldr	r3, [pc, #136]	@ (8007bd4 <vTaskStartScheduler+0xc8>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d002      	beq.n	8007b56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007b50:	2301      	movs	r3, #1
 8007b52:	617b      	str	r3, [r7, #20]
 8007b54:	e001      	b.n	8007b5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007b56:	2300      	movs	r3, #0
 8007b58:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d102      	bne.n	8007b66 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007b60:	f000 fd3e 	bl	80085e0 <xTimerCreateTimerTask>
 8007b64:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	2b01      	cmp	r3, #1
 8007b6a:	d11b      	bne.n	8007ba4 <vTaskStartScheduler+0x98>
	__asm volatile
 8007b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b70:	f383 8811 	msr	BASEPRI, r3
 8007b74:	f3bf 8f6f 	isb	sy
 8007b78:	f3bf 8f4f 	dsb	sy
 8007b7c:	613b      	str	r3, [r7, #16]
}
 8007b7e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007b80:	4b15      	ldr	r3, [pc, #84]	@ (8007bd8 <vTaskStartScheduler+0xcc>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	3354      	adds	r3, #84	@ 0x54
 8007b86:	4a15      	ldr	r2, [pc, #84]	@ (8007bdc <vTaskStartScheduler+0xd0>)
 8007b88:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007b8a:	4b15      	ldr	r3, [pc, #84]	@ (8007be0 <vTaskStartScheduler+0xd4>)
 8007b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8007b90:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007b92:	4b14      	ldr	r3, [pc, #80]	@ (8007be4 <vTaskStartScheduler+0xd8>)
 8007b94:	2201      	movs	r2, #1
 8007b96:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007b98:	4b13      	ldr	r3, [pc, #76]	@ (8007be8 <vTaskStartScheduler+0xdc>)
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007b9e:	f001 f907 	bl	8008db0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007ba2:	e00f      	b.n	8007bc4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007baa:	d10b      	bne.n	8007bc4 <vTaskStartScheduler+0xb8>
	__asm volatile
 8007bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bb0:	f383 8811 	msr	BASEPRI, r3
 8007bb4:	f3bf 8f6f 	isb	sy
 8007bb8:	f3bf 8f4f 	dsb	sy
 8007bbc:	60fb      	str	r3, [r7, #12]
}
 8007bbe:	bf00      	nop
 8007bc0:	bf00      	nop
 8007bc2:	e7fd      	b.n	8007bc0 <vTaskStartScheduler+0xb4>
}
 8007bc4:	bf00      	nop
 8007bc6:	3718      	adds	r7, #24
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}
 8007bcc:	0800e5b8 	.word	0x0800e5b8
 8007bd0:	08008265 	.word	0x08008265
 8007bd4:	20001264 	.word	0x20001264
 8007bd8:	20000d6c 	.word	0x20000d6c
 8007bdc:	20000088 	.word	0x20000088
 8007be0:	20001260 	.word	0x20001260
 8007be4:	2000124c 	.word	0x2000124c
 8007be8:	20001244 	.word	0x20001244

08007bec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007bec:	b480      	push	{r7}
 8007bee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007bf0:	4b04      	ldr	r3, [pc, #16]	@ (8007c04 <vTaskSuspendAll+0x18>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	4a03      	ldr	r2, [pc, #12]	@ (8007c04 <vTaskSuspendAll+0x18>)
 8007bf8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007bfa:	bf00      	nop
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr
 8007c04:	20001268 	.word	0x20001268

08007c08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007c12:	2300      	movs	r3, #0
 8007c14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007c16:	4b42      	ldr	r3, [pc, #264]	@ (8007d20 <xTaskResumeAll+0x118>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d10b      	bne.n	8007c36 <xTaskResumeAll+0x2e>
	__asm volatile
 8007c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c22:	f383 8811 	msr	BASEPRI, r3
 8007c26:	f3bf 8f6f 	isb	sy
 8007c2a:	f3bf 8f4f 	dsb	sy
 8007c2e:	603b      	str	r3, [r7, #0]
}
 8007c30:	bf00      	nop
 8007c32:	bf00      	nop
 8007c34:	e7fd      	b.n	8007c32 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007c36:	f001 f95f 	bl	8008ef8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007c3a:	4b39      	ldr	r3, [pc, #228]	@ (8007d20 <xTaskResumeAll+0x118>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	3b01      	subs	r3, #1
 8007c40:	4a37      	ldr	r2, [pc, #220]	@ (8007d20 <xTaskResumeAll+0x118>)
 8007c42:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c44:	4b36      	ldr	r3, [pc, #216]	@ (8007d20 <xTaskResumeAll+0x118>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d162      	bne.n	8007d12 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007c4c:	4b35      	ldr	r3, [pc, #212]	@ (8007d24 <xTaskResumeAll+0x11c>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d05e      	beq.n	8007d12 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007c54:	e02f      	b.n	8007cb6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c56:	4b34      	ldr	r3, [pc, #208]	@ (8007d28 <xTaskResumeAll+0x120>)
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	3318      	adds	r3, #24
 8007c62:	4618      	mov	r0, r3
 8007c64:	f7ff f81a 	bl	8006c9c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	3304      	adds	r3, #4
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f7ff f815 	bl	8006c9c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c76:	4b2d      	ldr	r3, [pc, #180]	@ (8007d2c <xTaskResumeAll+0x124>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d903      	bls.n	8007c86 <xTaskResumeAll+0x7e>
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c82:	4a2a      	ldr	r2, [pc, #168]	@ (8007d2c <xTaskResumeAll+0x124>)
 8007c84:	6013      	str	r3, [r2, #0]
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c8a:	4613      	mov	r3, r2
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	4413      	add	r3, r2
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	4a27      	ldr	r2, [pc, #156]	@ (8007d30 <xTaskResumeAll+0x128>)
 8007c94:	441a      	add	r2, r3
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	3304      	adds	r3, #4
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	4610      	mov	r0, r2
 8007c9e:	f7fe ffa0 	bl	8006be2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ca6:	4b23      	ldr	r3, [pc, #140]	@ (8007d34 <xTaskResumeAll+0x12c>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d302      	bcc.n	8007cb6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007cb0:	4b21      	ldr	r3, [pc, #132]	@ (8007d38 <xTaskResumeAll+0x130>)
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007cb6:	4b1c      	ldr	r3, [pc, #112]	@ (8007d28 <xTaskResumeAll+0x120>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d1cb      	bne.n	8007c56 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d001      	beq.n	8007cc8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007cc4:	f000 fb8a 	bl	80083dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007cc8:	4b1c      	ldr	r3, [pc, #112]	@ (8007d3c <xTaskResumeAll+0x134>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d010      	beq.n	8007cf6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007cd4:	f000 f846 	bl	8007d64 <xTaskIncrementTick>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d002      	beq.n	8007ce4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007cde:	4b16      	ldr	r3, [pc, #88]	@ (8007d38 <xTaskResumeAll+0x130>)
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	3b01      	subs	r3, #1
 8007ce8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d1f1      	bne.n	8007cd4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007cf0:	4b12      	ldr	r3, [pc, #72]	@ (8007d3c <xTaskResumeAll+0x134>)
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007cf6:	4b10      	ldr	r3, [pc, #64]	@ (8007d38 <xTaskResumeAll+0x130>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d009      	beq.n	8007d12 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007d02:	4b0f      	ldr	r3, [pc, #60]	@ (8007d40 <xTaskResumeAll+0x138>)
 8007d04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d08:	601a      	str	r2, [r3, #0]
 8007d0a:	f3bf 8f4f 	dsb	sy
 8007d0e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007d12:	f001 f923 	bl	8008f5c <vPortExitCritical>

	return xAlreadyYielded;
 8007d16:	68bb      	ldr	r3, [r7, #8]
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3710      	adds	r7, #16
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}
 8007d20:	20001268 	.word	0x20001268
 8007d24:	20001240 	.word	0x20001240
 8007d28:	20001200 	.word	0x20001200
 8007d2c:	20001248 	.word	0x20001248
 8007d30:	20000d70 	.word	0x20000d70
 8007d34:	20000d6c 	.word	0x20000d6c
 8007d38:	20001254 	.word	0x20001254
 8007d3c:	20001250 	.word	0x20001250
 8007d40:	e000ed04 	.word	0xe000ed04

08007d44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007d44:	b480      	push	{r7}
 8007d46:	b083      	sub	sp, #12
 8007d48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007d4a:	4b05      	ldr	r3, [pc, #20]	@ (8007d60 <xTaskGetTickCount+0x1c>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007d50:	687b      	ldr	r3, [r7, #4]
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	370c      	adds	r7, #12
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr
 8007d5e:	bf00      	nop
 8007d60:	20001244 	.word	0x20001244

08007d64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b086      	sub	sp, #24
 8007d68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d6e:	4b4f      	ldr	r3, [pc, #316]	@ (8007eac <xTaskIncrementTick+0x148>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	f040 8090 	bne.w	8007e98 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007d78:	4b4d      	ldr	r3, [pc, #308]	@ (8007eb0 <xTaskIncrementTick+0x14c>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007d80:	4a4b      	ldr	r2, [pc, #300]	@ (8007eb0 <xTaskIncrementTick+0x14c>)
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d121      	bne.n	8007dd0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007d8c:	4b49      	ldr	r3, [pc, #292]	@ (8007eb4 <xTaskIncrementTick+0x150>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d00b      	beq.n	8007dae <xTaskIncrementTick+0x4a>
	__asm volatile
 8007d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d9a:	f383 8811 	msr	BASEPRI, r3
 8007d9e:	f3bf 8f6f 	isb	sy
 8007da2:	f3bf 8f4f 	dsb	sy
 8007da6:	603b      	str	r3, [r7, #0]
}
 8007da8:	bf00      	nop
 8007daa:	bf00      	nop
 8007dac:	e7fd      	b.n	8007daa <xTaskIncrementTick+0x46>
 8007dae:	4b41      	ldr	r3, [pc, #260]	@ (8007eb4 <xTaskIncrementTick+0x150>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	60fb      	str	r3, [r7, #12]
 8007db4:	4b40      	ldr	r3, [pc, #256]	@ (8007eb8 <xTaskIncrementTick+0x154>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a3e      	ldr	r2, [pc, #248]	@ (8007eb4 <xTaskIncrementTick+0x150>)
 8007dba:	6013      	str	r3, [r2, #0]
 8007dbc:	4a3e      	ldr	r2, [pc, #248]	@ (8007eb8 <xTaskIncrementTick+0x154>)
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	6013      	str	r3, [r2, #0]
 8007dc2:	4b3e      	ldr	r3, [pc, #248]	@ (8007ebc <xTaskIncrementTick+0x158>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	4a3c      	ldr	r2, [pc, #240]	@ (8007ebc <xTaskIncrementTick+0x158>)
 8007dca:	6013      	str	r3, [r2, #0]
 8007dcc:	f000 fb06 	bl	80083dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007dd0:	4b3b      	ldr	r3, [pc, #236]	@ (8007ec0 <xTaskIncrementTick+0x15c>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	693a      	ldr	r2, [r7, #16]
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d349      	bcc.n	8007e6e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007dda:	4b36      	ldr	r3, [pc, #216]	@ (8007eb4 <xTaskIncrementTick+0x150>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d104      	bne.n	8007dee <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007de4:	4b36      	ldr	r3, [pc, #216]	@ (8007ec0 <xTaskIncrementTick+0x15c>)
 8007de6:	f04f 32ff 	mov.w	r2, #4294967295
 8007dea:	601a      	str	r2, [r3, #0]
					break;
 8007dec:	e03f      	b.n	8007e6e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dee:	4b31      	ldr	r3, [pc, #196]	@ (8007eb4 <xTaskIncrementTick+0x150>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	68db      	ldr	r3, [r3, #12]
 8007df6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007dfe:	693a      	ldr	r2, [r7, #16]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d203      	bcs.n	8007e0e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007e06:	4a2e      	ldr	r2, [pc, #184]	@ (8007ec0 <xTaskIncrementTick+0x15c>)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007e0c:	e02f      	b.n	8007e6e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	3304      	adds	r3, #4
 8007e12:	4618      	mov	r0, r3
 8007e14:	f7fe ff42 	bl	8006c9c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d004      	beq.n	8007e2a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	3318      	adds	r3, #24
 8007e24:	4618      	mov	r0, r3
 8007e26:	f7fe ff39 	bl	8006c9c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e2e:	4b25      	ldr	r3, [pc, #148]	@ (8007ec4 <xTaskIncrementTick+0x160>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d903      	bls.n	8007e3e <xTaskIncrementTick+0xda>
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e3a:	4a22      	ldr	r2, [pc, #136]	@ (8007ec4 <xTaskIncrementTick+0x160>)
 8007e3c:	6013      	str	r3, [r2, #0]
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e42:	4613      	mov	r3, r2
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	4413      	add	r3, r2
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	4a1f      	ldr	r2, [pc, #124]	@ (8007ec8 <xTaskIncrementTick+0x164>)
 8007e4c:	441a      	add	r2, r3
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	3304      	adds	r3, #4
 8007e52:	4619      	mov	r1, r3
 8007e54:	4610      	mov	r0, r2
 8007e56:	f7fe fec4 	bl	8006be2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e5e:	4b1b      	ldr	r3, [pc, #108]	@ (8007ecc <xTaskIncrementTick+0x168>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d3b8      	bcc.n	8007dda <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e6c:	e7b5      	b.n	8007dda <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007e6e:	4b17      	ldr	r3, [pc, #92]	@ (8007ecc <xTaskIncrementTick+0x168>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e74:	4914      	ldr	r1, [pc, #80]	@ (8007ec8 <xTaskIncrementTick+0x164>)
 8007e76:	4613      	mov	r3, r2
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	4413      	add	r3, r2
 8007e7c:	009b      	lsls	r3, r3, #2
 8007e7e:	440b      	add	r3, r1
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d901      	bls.n	8007e8a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007e86:	2301      	movs	r3, #1
 8007e88:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007e8a:	4b11      	ldr	r3, [pc, #68]	@ (8007ed0 <xTaskIncrementTick+0x16c>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d007      	beq.n	8007ea2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007e92:	2301      	movs	r3, #1
 8007e94:	617b      	str	r3, [r7, #20]
 8007e96:	e004      	b.n	8007ea2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007e98:	4b0e      	ldr	r3, [pc, #56]	@ (8007ed4 <xTaskIncrementTick+0x170>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	3301      	adds	r3, #1
 8007e9e:	4a0d      	ldr	r2, [pc, #52]	@ (8007ed4 <xTaskIncrementTick+0x170>)
 8007ea0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007ea2:	697b      	ldr	r3, [r7, #20]
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3718      	adds	r7, #24
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}
 8007eac:	20001268 	.word	0x20001268
 8007eb0:	20001244 	.word	0x20001244
 8007eb4:	200011f8 	.word	0x200011f8
 8007eb8:	200011fc 	.word	0x200011fc
 8007ebc:	20001258 	.word	0x20001258
 8007ec0:	20001260 	.word	0x20001260
 8007ec4:	20001248 	.word	0x20001248
 8007ec8:	20000d70 	.word	0x20000d70
 8007ecc:	20000d6c 	.word	0x20000d6c
 8007ed0:	20001254 	.word	0x20001254
 8007ed4:	20001250 	.word	0x20001250

08007ed8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b086      	sub	sp, #24
 8007edc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007ede:	4b3d      	ldr	r3, [pc, #244]	@ (8007fd4 <vTaskSwitchContext+0xfc>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d003      	beq.n	8007eee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007ee6:	4b3c      	ldr	r3, [pc, #240]	@ (8007fd8 <vTaskSwitchContext+0x100>)
 8007ee8:	2201      	movs	r2, #1
 8007eea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007eec:	e06e      	b.n	8007fcc <vTaskSwitchContext+0xf4>
		xYieldPending = pdFALSE;
 8007eee:	4b3a      	ldr	r3, [pc, #232]	@ (8007fd8 <vTaskSwitchContext+0x100>)
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8007ef4:	4b39      	ldr	r3, [pc, #228]	@ (8007fdc <vTaskSwitchContext+0x104>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007efa:	613b      	str	r3, [r7, #16]
 8007efc:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8007f00:	60fb      	str	r3, [r7, #12]
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	68fa      	ldr	r2, [r7, #12]
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d111      	bne.n	8007f30 <vTaskSwitchContext+0x58>
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	3304      	adds	r3, #4
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	68fa      	ldr	r2, [r7, #12]
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d10b      	bne.n	8007f30 <vTaskSwitchContext+0x58>
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	3308      	adds	r3, #8
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	68fa      	ldr	r2, [r7, #12]
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d105      	bne.n	8007f30 <vTaskSwitchContext+0x58>
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	330c      	adds	r3, #12
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	68fa      	ldr	r2, [r7, #12]
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d008      	beq.n	8007f42 <vTaskSwitchContext+0x6a>
 8007f30:	4b2a      	ldr	r3, [pc, #168]	@ (8007fdc <vTaskSwitchContext+0x104>)
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	4b29      	ldr	r3, [pc, #164]	@ (8007fdc <vTaskSwitchContext+0x104>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	3334      	adds	r3, #52	@ 0x34
 8007f3a:	4619      	mov	r1, r3
 8007f3c:	4610      	mov	r0, r2
 8007f3e:	f7fb fe3d 	bl	8003bbc <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f42:	4b27      	ldr	r3, [pc, #156]	@ (8007fe0 <vTaskSwitchContext+0x108>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	617b      	str	r3, [r7, #20]
 8007f48:	e011      	b.n	8007f6e <vTaskSwitchContext+0x96>
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d10b      	bne.n	8007f68 <vTaskSwitchContext+0x90>
	__asm volatile
 8007f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f54:	f383 8811 	msr	BASEPRI, r3
 8007f58:	f3bf 8f6f 	isb	sy
 8007f5c:	f3bf 8f4f 	dsb	sy
 8007f60:	607b      	str	r3, [r7, #4]
}
 8007f62:	bf00      	nop
 8007f64:	bf00      	nop
 8007f66:	e7fd      	b.n	8007f64 <vTaskSwitchContext+0x8c>
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	3b01      	subs	r3, #1
 8007f6c:	617b      	str	r3, [r7, #20]
 8007f6e:	491d      	ldr	r1, [pc, #116]	@ (8007fe4 <vTaskSwitchContext+0x10c>)
 8007f70:	697a      	ldr	r2, [r7, #20]
 8007f72:	4613      	mov	r3, r2
 8007f74:	009b      	lsls	r3, r3, #2
 8007f76:	4413      	add	r3, r2
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	440b      	add	r3, r1
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d0e3      	beq.n	8007f4a <vTaskSwitchContext+0x72>
 8007f82:	697a      	ldr	r2, [r7, #20]
 8007f84:	4613      	mov	r3, r2
 8007f86:	009b      	lsls	r3, r3, #2
 8007f88:	4413      	add	r3, r2
 8007f8a:	009b      	lsls	r3, r3, #2
 8007f8c:	4a15      	ldr	r2, [pc, #84]	@ (8007fe4 <vTaskSwitchContext+0x10c>)
 8007f8e:	4413      	add	r3, r2
 8007f90:	60bb      	str	r3, [r7, #8]
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	685a      	ldr	r2, [r3, #4]
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	605a      	str	r2, [r3, #4]
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	685a      	ldr	r2, [r3, #4]
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	3308      	adds	r3, #8
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d104      	bne.n	8007fb2 <vTaskSwitchContext+0xda>
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	685a      	ldr	r2, [r3, #4]
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	605a      	str	r2, [r3, #4]
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	68db      	ldr	r3, [r3, #12]
 8007fb8:	4a08      	ldr	r2, [pc, #32]	@ (8007fdc <vTaskSwitchContext+0x104>)
 8007fba:	6013      	str	r3, [r2, #0]
 8007fbc:	4a08      	ldr	r2, [pc, #32]	@ (8007fe0 <vTaskSwitchContext+0x108>)
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007fc2:	4b06      	ldr	r3, [pc, #24]	@ (8007fdc <vTaskSwitchContext+0x104>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	3354      	adds	r3, #84	@ 0x54
 8007fc8:	4a07      	ldr	r2, [pc, #28]	@ (8007fe8 <vTaskSwitchContext+0x110>)
 8007fca:	6013      	str	r3, [r2, #0]
}
 8007fcc:	bf00      	nop
 8007fce:	3718      	adds	r7, #24
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}
 8007fd4:	20001268 	.word	0x20001268
 8007fd8:	20001254 	.word	0x20001254
 8007fdc:	20000d6c 	.word	0x20000d6c
 8007fe0:	20001248 	.word	0x20001248
 8007fe4:	20000d70 	.word	0x20000d70
 8007fe8:	20000088 	.word	0x20000088

08007fec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d10b      	bne.n	8008014 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008000:	f383 8811 	msr	BASEPRI, r3
 8008004:	f3bf 8f6f 	isb	sy
 8008008:	f3bf 8f4f 	dsb	sy
 800800c:	60fb      	str	r3, [r7, #12]
}
 800800e:	bf00      	nop
 8008010:	bf00      	nop
 8008012:	e7fd      	b.n	8008010 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008014:	4b07      	ldr	r3, [pc, #28]	@ (8008034 <vTaskPlaceOnEventList+0x48>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	3318      	adds	r3, #24
 800801a:	4619      	mov	r1, r3
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f7fe fe04 	bl	8006c2a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008022:	2101      	movs	r1, #1
 8008024:	6838      	ldr	r0, [r7, #0]
 8008026:	f000 fa87 	bl	8008538 <prvAddCurrentTaskToDelayedList>
}
 800802a:	bf00      	nop
 800802c:	3710      	adds	r7, #16
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop
 8008034:	20000d6c 	.word	0x20000d6c

08008038 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008038:	b580      	push	{r7, lr}
 800803a:	b086      	sub	sp, #24
 800803c:	af00      	add	r7, sp, #0
 800803e:	60f8      	str	r0, [r7, #12]
 8008040:	60b9      	str	r1, [r7, #8]
 8008042:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d10b      	bne.n	8008062 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800804a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800804e:	f383 8811 	msr	BASEPRI, r3
 8008052:	f3bf 8f6f 	isb	sy
 8008056:	f3bf 8f4f 	dsb	sy
 800805a:	617b      	str	r3, [r7, #20]
}
 800805c:	bf00      	nop
 800805e:	bf00      	nop
 8008060:	e7fd      	b.n	800805e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008062:	4b0a      	ldr	r3, [pc, #40]	@ (800808c <vTaskPlaceOnEventListRestricted+0x54>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	3318      	adds	r3, #24
 8008068:	4619      	mov	r1, r3
 800806a:	68f8      	ldr	r0, [r7, #12]
 800806c:	f7fe fdb9 	bl	8006be2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d002      	beq.n	800807c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008076:	f04f 33ff 	mov.w	r3, #4294967295
 800807a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800807c:	6879      	ldr	r1, [r7, #4]
 800807e:	68b8      	ldr	r0, [r7, #8]
 8008080:	f000 fa5a 	bl	8008538 <prvAddCurrentTaskToDelayedList>
	}
 8008084:	bf00      	nop
 8008086:	3718      	adds	r7, #24
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}
 800808c:	20000d6c 	.word	0x20000d6c

08008090 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b086      	sub	sp, #24
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	68db      	ldr	r3, [r3, #12]
 800809c:	68db      	ldr	r3, [r3, #12]
 800809e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d10b      	bne.n	80080be <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80080a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080aa:	f383 8811 	msr	BASEPRI, r3
 80080ae:	f3bf 8f6f 	isb	sy
 80080b2:	f3bf 8f4f 	dsb	sy
 80080b6:	60fb      	str	r3, [r7, #12]
}
 80080b8:	bf00      	nop
 80080ba:	bf00      	nop
 80080bc:	e7fd      	b.n	80080ba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	3318      	adds	r3, #24
 80080c2:	4618      	mov	r0, r3
 80080c4:	f7fe fdea 	bl	8006c9c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080c8:	4b1d      	ldr	r3, [pc, #116]	@ (8008140 <xTaskRemoveFromEventList+0xb0>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d11d      	bne.n	800810c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	3304      	adds	r3, #4
 80080d4:	4618      	mov	r0, r3
 80080d6:	f7fe fde1 	bl	8006c9c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080de:	4b19      	ldr	r3, [pc, #100]	@ (8008144 <xTaskRemoveFromEventList+0xb4>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d903      	bls.n	80080ee <xTaskRemoveFromEventList+0x5e>
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080ea:	4a16      	ldr	r2, [pc, #88]	@ (8008144 <xTaskRemoveFromEventList+0xb4>)
 80080ec:	6013      	str	r3, [r2, #0]
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080f2:	4613      	mov	r3, r2
 80080f4:	009b      	lsls	r3, r3, #2
 80080f6:	4413      	add	r3, r2
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	4a13      	ldr	r2, [pc, #76]	@ (8008148 <xTaskRemoveFromEventList+0xb8>)
 80080fc:	441a      	add	r2, r3
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	3304      	adds	r3, #4
 8008102:	4619      	mov	r1, r3
 8008104:	4610      	mov	r0, r2
 8008106:	f7fe fd6c 	bl	8006be2 <vListInsertEnd>
 800810a:	e005      	b.n	8008118 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	3318      	adds	r3, #24
 8008110:	4619      	mov	r1, r3
 8008112:	480e      	ldr	r0, [pc, #56]	@ (800814c <xTaskRemoveFromEventList+0xbc>)
 8008114:	f7fe fd65 	bl	8006be2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800811c:	4b0c      	ldr	r3, [pc, #48]	@ (8008150 <xTaskRemoveFromEventList+0xc0>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008122:	429a      	cmp	r2, r3
 8008124:	d905      	bls.n	8008132 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008126:	2301      	movs	r3, #1
 8008128:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800812a:	4b0a      	ldr	r3, [pc, #40]	@ (8008154 <xTaskRemoveFromEventList+0xc4>)
 800812c:	2201      	movs	r2, #1
 800812e:	601a      	str	r2, [r3, #0]
 8008130:	e001      	b.n	8008136 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008132:	2300      	movs	r3, #0
 8008134:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008136:	697b      	ldr	r3, [r7, #20]
}
 8008138:	4618      	mov	r0, r3
 800813a:	3718      	adds	r7, #24
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}
 8008140:	20001268 	.word	0x20001268
 8008144:	20001248 	.word	0x20001248
 8008148:	20000d70 	.word	0x20000d70
 800814c:	20001200 	.word	0x20001200
 8008150:	20000d6c 	.word	0x20000d6c
 8008154:	20001254 	.word	0x20001254

08008158 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008158:	b480      	push	{r7}
 800815a:	b083      	sub	sp, #12
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008160:	4b06      	ldr	r3, [pc, #24]	@ (800817c <vTaskInternalSetTimeOutState+0x24>)
 8008162:	681a      	ldr	r2, [r3, #0]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008168:	4b05      	ldr	r3, [pc, #20]	@ (8008180 <vTaskInternalSetTimeOutState+0x28>)
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	605a      	str	r2, [r3, #4]
}
 8008170:	bf00      	nop
 8008172:	370c      	adds	r7, #12
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr
 800817c:	20001258 	.word	0x20001258
 8008180:	20001244 	.word	0x20001244

08008184 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b088      	sub	sp, #32
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d10b      	bne.n	80081ac <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008198:	f383 8811 	msr	BASEPRI, r3
 800819c:	f3bf 8f6f 	isb	sy
 80081a0:	f3bf 8f4f 	dsb	sy
 80081a4:	613b      	str	r3, [r7, #16]
}
 80081a6:	bf00      	nop
 80081a8:	bf00      	nop
 80081aa:	e7fd      	b.n	80081a8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d10b      	bne.n	80081ca <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80081b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081b6:	f383 8811 	msr	BASEPRI, r3
 80081ba:	f3bf 8f6f 	isb	sy
 80081be:	f3bf 8f4f 	dsb	sy
 80081c2:	60fb      	str	r3, [r7, #12]
}
 80081c4:	bf00      	nop
 80081c6:	bf00      	nop
 80081c8:	e7fd      	b.n	80081c6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80081ca:	f000 fe95 	bl	8008ef8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80081ce:	4b1d      	ldr	r3, [pc, #116]	@ (8008244 <xTaskCheckForTimeOut+0xc0>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	69ba      	ldr	r2, [r7, #24]
 80081da:	1ad3      	subs	r3, r2, r3
 80081dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081e6:	d102      	bne.n	80081ee <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80081e8:	2300      	movs	r3, #0
 80081ea:	61fb      	str	r3, [r7, #28]
 80081ec:	e023      	b.n	8008236 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681a      	ldr	r2, [r3, #0]
 80081f2:	4b15      	ldr	r3, [pc, #84]	@ (8008248 <xTaskCheckForTimeOut+0xc4>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	429a      	cmp	r2, r3
 80081f8:	d007      	beq.n	800820a <xTaskCheckForTimeOut+0x86>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	69ba      	ldr	r2, [r7, #24]
 8008200:	429a      	cmp	r2, r3
 8008202:	d302      	bcc.n	800820a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008204:	2301      	movs	r3, #1
 8008206:	61fb      	str	r3, [r7, #28]
 8008208:	e015      	b.n	8008236 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	697a      	ldr	r2, [r7, #20]
 8008210:	429a      	cmp	r2, r3
 8008212:	d20b      	bcs.n	800822c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	681a      	ldr	r2, [r3, #0]
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	1ad2      	subs	r2, r2, r3
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f7ff ff99 	bl	8008158 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008226:	2300      	movs	r3, #0
 8008228:	61fb      	str	r3, [r7, #28]
 800822a:	e004      	b.n	8008236 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	2200      	movs	r2, #0
 8008230:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008232:	2301      	movs	r3, #1
 8008234:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008236:	f000 fe91 	bl	8008f5c <vPortExitCritical>

	return xReturn;
 800823a:	69fb      	ldr	r3, [r7, #28]
}
 800823c:	4618      	mov	r0, r3
 800823e:	3720      	adds	r7, #32
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}
 8008244:	20001244 	.word	0x20001244
 8008248:	20001258 	.word	0x20001258

0800824c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800824c:	b480      	push	{r7}
 800824e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008250:	4b03      	ldr	r3, [pc, #12]	@ (8008260 <vTaskMissedYield+0x14>)
 8008252:	2201      	movs	r2, #1
 8008254:	601a      	str	r2, [r3, #0]
}
 8008256:	bf00      	nop
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr
 8008260:	20001254 	.word	0x20001254

08008264 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b082      	sub	sp, #8
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800826c:	f000 f852 	bl	8008314 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008270:	4b06      	ldr	r3, [pc, #24]	@ (800828c <prvIdleTask+0x28>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	2b01      	cmp	r3, #1
 8008276:	d9f9      	bls.n	800826c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008278:	4b05      	ldr	r3, [pc, #20]	@ (8008290 <prvIdleTask+0x2c>)
 800827a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800827e:	601a      	str	r2, [r3, #0]
 8008280:	f3bf 8f4f 	dsb	sy
 8008284:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008288:	e7f0      	b.n	800826c <prvIdleTask+0x8>
 800828a:	bf00      	nop
 800828c:	20000d70 	.word	0x20000d70
 8008290:	e000ed04 	.word	0xe000ed04

08008294 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b082      	sub	sp, #8
 8008298:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800829a:	2300      	movs	r3, #0
 800829c:	607b      	str	r3, [r7, #4]
 800829e:	e00c      	b.n	80082ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80082a0:	687a      	ldr	r2, [r7, #4]
 80082a2:	4613      	mov	r3, r2
 80082a4:	009b      	lsls	r3, r3, #2
 80082a6:	4413      	add	r3, r2
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	4a12      	ldr	r2, [pc, #72]	@ (80082f4 <prvInitialiseTaskLists+0x60>)
 80082ac:	4413      	add	r3, r2
 80082ae:	4618      	mov	r0, r3
 80082b0:	f7fe fc6a 	bl	8006b88 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	3301      	adds	r3, #1
 80082b8:	607b      	str	r3, [r7, #4]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2b37      	cmp	r3, #55	@ 0x37
 80082be:	d9ef      	bls.n	80082a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80082c0:	480d      	ldr	r0, [pc, #52]	@ (80082f8 <prvInitialiseTaskLists+0x64>)
 80082c2:	f7fe fc61 	bl	8006b88 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80082c6:	480d      	ldr	r0, [pc, #52]	@ (80082fc <prvInitialiseTaskLists+0x68>)
 80082c8:	f7fe fc5e 	bl	8006b88 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80082cc:	480c      	ldr	r0, [pc, #48]	@ (8008300 <prvInitialiseTaskLists+0x6c>)
 80082ce:	f7fe fc5b 	bl	8006b88 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80082d2:	480c      	ldr	r0, [pc, #48]	@ (8008304 <prvInitialiseTaskLists+0x70>)
 80082d4:	f7fe fc58 	bl	8006b88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80082d8:	480b      	ldr	r0, [pc, #44]	@ (8008308 <prvInitialiseTaskLists+0x74>)
 80082da:	f7fe fc55 	bl	8006b88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80082de:	4b0b      	ldr	r3, [pc, #44]	@ (800830c <prvInitialiseTaskLists+0x78>)
 80082e0:	4a05      	ldr	r2, [pc, #20]	@ (80082f8 <prvInitialiseTaskLists+0x64>)
 80082e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80082e4:	4b0a      	ldr	r3, [pc, #40]	@ (8008310 <prvInitialiseTaskLists+0x7c>)
 80082e6:	4a05      	ldr	r2, [pc, #20]	@ (80082fc <prvInitialiseTaskLists+0x68>)
 80082e8:	601a      	str	r2, [r3, #0]
}
 80082ea:	bf00      	nop
 80082ec:	3708      	adds	r7, #8
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}
 80082f2:	bf00      	nop
 80082f4:	20000d70 	.word	0x20000d70
 80082f8:	200011d0 	.word	0x200011d0
 80082fc:	200011e4 	.word	0x200011e4
 8008300:	20001200 	.word	0x20001200
 8008304:	20001214 	.word	0x20001214
 8008308:	2000122c 	.word	0x2000122c
 800830c:	200011f8 	.word	0x200011f8
 8008310:	200011fc 	.word	0x200011fc

08008314 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b082      	sub	sp, #8
 8008318:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800831a:	e019      	b.n	8008350 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800831c:	f000 fdec 	bl	8008ef8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008320:	4b10      	ldr	r3, [pc, #64]	@ (8008364 <prvCheckTasksWaitingTermination+0x50>)
 8008322:	68db      	ldr	r3, [r3, #12]
 8008324:	68db      	ldr	r3, [r3, #12]
 8008326:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	3304      	adds	r3, #4
 800832c:	4618      	mov	r0, r3
 800832e:	f7fe fcb5 	bl	8006c9c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008332:	4b0d      	ldr	r3, [pc, #52]	@ (8008368 <prvCheckTasksWaitingTermination+0x54>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	3b01      	subs	r3, #1
 8008338:	4a0b      	ldr	r2, [pc, #44]	@ (8008368 <prvCheckTasksWaitingTermination+0x54>)
 800833a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800833c:	4b0b      	ldr	r3, [pc, #44]	@ (800836c <prvCheckTasksWaitingTermination+0x58>)
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	3b01      	subs	r3, #1
 8008342:	4a0a      	ldr	r2, [pc, #40]	@ (800836c <prvCheckTasksWaitingTermination+0x58>)
 8008344:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008346:	f000 fe09 	bl	8008f5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 f810 	bl	8008370 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008350:	4b06      	ldr	r3, [pc, #24]	@ (800836c <prvCheckTasksWaitingTermination+0x58>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d1e1      	bne.n	800831c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008358:	bf00      	nop
 800835a:	bf00      	nop
 800835c:	3708      	adds	r7, #8
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
 8008362:	bf00      	nop
 8008364:	20001214 	.word	0x20001214
 8008368:	20001240 	.word	0x20001240
 800836c:	20001228 	.word	0x20001228

08008370 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008370:	b580      	push	{r7, lr}
 8008372:	b084      	sub	sp, #16
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	3354      	adds	r3, #84	@ 0x54
 800837c:	4618      	mov	r0, r3
 800837e:	f002 fd35 	bl	800adec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008388:	2b00      	cmp	r3, #0
 800838a:	d108      	bne.n	800839e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008390:	4618      	mov	r0, r3
 8008392:	f000 ffa1 	bl	80092d8 <vPortFree>
				vPortFree( pxTCB );
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f000 ff9e 	bl	80092d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800839c:	e019      	b.n	80083d2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d103      	bne.n	80083b0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 ff95 	bl	80092d8 <vPortFree>
	}
 80083ae:	e010      	b.n	80083d2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80083b6:	2b02      	cmp	r3, #2
 80083b8:	d00b      	beq.n	80083d2 <prvDeleteTCB+0x62>
	__asm volatile
 80083ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083be:	f383 8811 	msr	BASEPRI, r3
 80083c2:	f3bf 8f6f 	isb	sy
 80083c6:	f3bf 8f4f 	dsb	sy
 80083ca:	60fb      	str	r3, [r7, #12]
}
 80083cc:	bf00      	nop
 80083ce:	bf00      	nop
 80083d0:	e7fd      	b.n	80083ce <prvDeleteTCB+0x5e>
	}
 80083d2:	bf00      	nop
 80083d4:	3710      	adds	r7, #16
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
	...

080083dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80083dc:	b480      	push	{r7}
 80083de:	b083      	sub	sp, #12
 80083e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80083e2:	4b0c      	ldr	r3, [pc, #48]	@ (8008414 <prvResetNextTaskUnblockTime+0x38>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d104      	bne.n	80083f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80083ec:	4b0a      	ldr	r3, [pc, #40]	@ (8008418 <prvResetNextTaskUnblockTime+0x3c>)
 80083ee:	f04f 32ff 	mov.w	r2, #4294967295
 80083f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80083f4:	e008      	b.n	8008408 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083f6:	4b07      	ldr	r3, [pc, #28]	@ (8008414 <prvResetNextTaskUnblockTime+0x38>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	68db      	ldr	r3, [r3, #12]
 80083fc:	68db      	ldr	r3, [r3, #12]
 80083fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	4a04      	ldr	r2, [pc, #16]	@ (8008418 <prvResetNextTaskUnblockTime+0x3c>)
 8008406:	6013      	str	r3, [r2, #0]
}
 8008408:	bf00      	nop
 800840a:	370c      	adds	r7, #12
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr
 8008414:	200011f8 	.word	0x200011f8
 8008418:	20001260 	.word	0x20001260

0800841c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800841c:	b480      	push	{r7}
 800841e:	b083      	sub	sp, #12
 8008420:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008422:	4b0b      	ldr	r3, [pc, #44]	@ (8008450 <xTaskGetSchedulerState+0x34>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d102      	bne.n	8008430 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800842a:	2301      	movs	r3, #1
 800842c:	607b      	str	r3, [r7, #4]
 800842e:	e008      	b.n	8008442 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008430:	4b08      	ldr	r3, [pc, #32]	@ (8008454 <xTaskGetSchedulerState+0x38>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d102      	bne.n	800843e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008438:	2302      	movs	r3, #2
 800843a:	607b      	str	r3, [r7, #4]
 800843c:	e001      	b.n	8008442 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800843e:	2300      	movs	r3, #0
 8008440:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008442:	687b      	ldr	r3, [r7, #4]
	}
 8008444:	4618      	mov	r0, r3
 8008446:	370c      	adds	r7, #12
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr
 8008450:	2000124c 	.word	0x2000124c
 8008454:	20001268 	.word	0x20001268

08008458 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008458:	b580      	push	{r7, lr}
 800845a:	b086      	sub	sp, #24
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008464:	2300      	movs	r3, #0
 8008466:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d058      	beq.n	8008520 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800846e:	4b2f      	ldr	r3, [pc, #188]	@ (800852c <xTaskPriorityDisinherit+0xd4>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	693a      	ldr	r2, [r7, #16]
 8008474:	429a      	cmp	r2, r3
 8008476:	d00b      	beq.n	8008490 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800847c:	f383 8811 	msr	BASEPRI, r3
 8008480:	f3bf 8f6f 	isb	sy
 8008484:	f3bf 8f4f 	dsb	sy
 8008488:	60fb      	str	r3, [r7, #12]
}
 800848a:	bf00      	nop
 800848c:	bf00      	nop
 800848e:	e7fd      	b.n	800848c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008494:	2b00      	cmp	r3, #0
 8008496:	d10b      	bne.n	80084b0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800849c:	f383 8811 	msr	BASEPRI, r3
 80084a0:	f3bf 8f6f 	isb	sy
 80084a4:	f3bf 8f4f 	dsb	sy
 80084a8:	60bb      	str	r3, [r7, #8]
}
 80084aa:	bf00      	nop
 80084ac:	bf00      	nop
 80084ae:	e7fd      	b.n	80084ac <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084b4:	1e5a      	subs	r2, r3, #1
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084c2:	429a      	cmp	r2, r3
 80084c4:	d02c      	beq.n	8008520 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d128      	bne.n	8008520 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	3304      	adds	r3, #4
 80084d2:	4618      	mov	r0, r3
 80084d4:	f7fe fbe2 	bl	8006c9c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084e4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084f0:	4b0f      	ldr	r3, [pc, #60]	@ (8008530 <xTaskPriorityDisinherit+0xd8>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d903      	bls.n	8008500 <xTaskPriorityDisinherit+0xa8>
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084fc:	4a0c      	ldr	r2, [pc, #48]	@ (8008530 <xTaskPriorityDisinherit+0xd8>)
 80084fe:	6013      	str	r3, [r2, #0]
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008504:	4613      	mov	r3, r2
 8008506:	009b      	lsls	r3, r3, #2
 8008508:	4413      	add	r3, r2
 800850a:	009b      	lsls	r3, r3, #2
 800850c:	4a09      	ldr	r2, [pc, #36]	@ (8008534 <xTaskPriorityDisinherit+0xdc>)
 800850e:	441a      	add	r2, r3
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	3304      	adds	r3, #4
 8008514:	4619      	mov	r1, r3
 8008516:	4610      	mov	r0, r2
 8008518:	f7fe fb63 	bl	8006be2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800851c:	2301      	movs	r3, #1
 800851e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008520:	697b      	ldr	r3, [r7, #20]
	}
 8008522:	4618      	mov	r0, r3
 8008524:	3718      	adds	r7, #24
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
 800852a:	bf00      	nop
 800852c:	20000d6c 	.word	0x20000d6c
 8008530:	20001248 	.word	0x20001248
 8008534:	20000d70 	.word	0x20000d70

08008538 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008542:	4b21      	ldr	r3, [pc, #132]	@ (80085c8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008548:	4b20      	ldr	r3, [pc, #128]	@ (80085cc <prvAddCurrentTaskToDelayedList+0x94>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	3304      	adds	r3, #4
 800854e:	4618      	mov	r0, r3
 8008550:	f7fe fba4 	bl	8006c9c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800855a:	d10a      	bne.n	8008572 <prvAddCurrentTaskToDelayedList+0x3a>
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d007      	beq.n	8008572 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008562:	4b1a      	ldr	r3, [pc, #104]	@ (80085cc <prvAddCurrentTaskToDelayedList+0x94>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	3304      	adds	r3, #4
 8008568:	4619      	mov	r1, r3
 800856a:	4819      	ldr	r0, [pc, #100]	@ (80085d0 <prvAddCurrentTaskToDelayedList+0x98>)
 800856c:	f7fe fb39 	bl	8006be2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008570:	e026      	b.n	80085c0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008572:	68fa      	ldr	r2, [r7, #12]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	4413      	add	r3, r2
 8008578:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800857a:	4b14      	ldr	r3, [pc, #80]	@ (80085cc <prvAddCurrentTaskToDelayedList+0x94>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	68ba      	ldr	r2, [r7, #8]
 8008580:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008582:	68ba      	ldr	r2, [r7, #8]
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	429a      	cmp	r2, r3
 8008588:	d209      	bcs.n	800859e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800858a:	4b12      	ldr	r3, [pc, #72]	@ (80085d4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800858c:	681a      	ldr	r2, [r3, #0]
 800858e:	4b0f      	ldr	r3, [pc, #60]	@ (80085cc <prvAddCurrentTaskToDelayedList+0x94>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	3304      	adds	r3, #4
 8008594:	4619      	mov	r1, r3
 8008596:	4610      	mov	r0, r2
 8008598:	f7fe fb47 	bl	8006c2a <vListInsert>
}
 800859c:	e010      	b.n	80085c0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800859e:	4b0e      	ldr	r3, [pc, #56]	@ (80085d8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	4b0a      	ldr	r3, [pc, #40]	@ (80085cc <prvAddCurrentTaskToDelayedList+0x94>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	3304      	adds	r3, #4
 80085a8:	4619      	mov	r1, r3
 80085aa:	4610      	mov	r0, r2
 80085ac:	f7fe fb3d 	bl	8006c2a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80085b0:	4b0a      	ldr	r3, [pc, #40]	@ (80085dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	68ba      	ldr	r2, [r7, #8]
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d202      	bcs.n	80085c0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80085ba:	4a08      	ldr	r2, [pc, #32]	@ (80085dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	6013      	str	r3, [r2, #0]
}
 80085c0:	bf00      	nop
 80085c2:	3710      	adds	r7, #16
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}
 80085c8:	20001244 	.word	0x20001244
 80085cc:	20000d6c 	.word	0x20000d6c
 80085d0:	2000122c 	.word	0x2000122c
 80085d4:	200011fc 	.word	0x200011fc
 80085d8:	200011f8 	.word	0x200011f8
 80085dc:	20001260 	.word	0x20001260

080085e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b08a      	sub	sp, #40	@ 0x28
 80085e4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80085e6:	2300      	movs	r3, #0
 80085e8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80085ea:	f000 fb13 	bl	8008c14 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80085ee:	4b1d      	ldr	r3, [pc, #116]	@ (8008664 <xTimerCreateTimerTask+0x84>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d021      	beq.n	800863a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80085f6:	2300      	movs	r3, #0
 80085f8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80085fa:	2300      	movs	r3, #0
 80085fc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80085fe:	1d3a      	adds	r2, r7, #4
 8008600:	f107 0108 	add.w	r1, r7, #8
 8008604:	f107 030c 	add.w	r3, r7, #12
 8008608:	4618      	mov	r0, r3
 800860a:	f7fe faa3 	bl	8006b54 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800860e:	6879      	ldr	r1, [r7, #4]
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	68fa      	ldr	r2, [r7, #12]
 8008614:	9202      	str	r2, [sp, #8]
 8008616:	9301      	str	r3, [sp, #4]
 8008618:	2302      	movs	r3, #2
 800861a:	9300      	str	r3, [sp, #0]
 800861c:	2300      	movs	r3, #0
 800861e:	460a      	mov	r2, r1
 8008620:	4911      	ldr	r1, [pc, #68]	@ (8008668 <xTimerCreateTimerTask+0x88>)
 8008622:	4812      	ldr	r0, [pc, #72]	@ (800866c <xTimerCreateTimerTask+0x8c>)
 8008624:	f7ff f87e 	bl	8007724 <xTaskCreateStatic>
 8008628:	4603      	mov	r3, r0
 800862a:	4a11      	ldr	r2, [pc, #68]	@ (8008670 <xTimerCreateTimerTask+0x90>)
 800862c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800862e:	4b10      	ldr	r3, [pc, #64]	@ (8008670 <xTimerCreateTimerTask+0x90>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d001      	beq.n	800863a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008636:	2301      	movs	r3, #1
 8008638:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d10b      	bne.n	8008658 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008644:	f383 8811 	msr	BASEPRI, r3
 8008648:	f3bf 8f6f 	isb	sy
 800864c:	f3bf 8f4f 	dsb	sy
 8008650:	613b      	str	r3, [r7, #16]
}
 8008652:	bf00      	nop
 8008654:	bf00      	nop
 8008656:	e7fd      	b.n	8008654 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008658:	697b      	ldr	r3, [r7, #20]
}
 800865a:	4618      	mov	r0, r3
 800865c:	3718      	adds	r7, #24
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
 8008662:	bf00      	nop
 8008664:	2000129c 	.word	0x2000129c
 8008668:	0800e5c0 	.word	0x0800e5c0
 800866c:	080087ad 	.word	0x080087ad
 8008670:	200012a0 	.word	0x200012a0

08008674 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b08a      	sub	sp, #40	@ 0x28
 8008678:	af00      	add	r7, sp, #0
 800867a:	60f8      	str	r0, [r7, #12]
 800867c:	60b9      	str	r1, [r7, #8]
 800867e:	607a      	str	r2, [r7, #4]
 8008680:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008682:	2300      	movs	r3, #0
 8008684:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d10b      	bne.n	80086a4 <xTimerGenericCommand+0x30>
	__asm volatile
 800868c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008690:	f383 8811 	msr	BASEPRI, r3
 8008694:	f3bf 8f6f 	isb	sy
 8008698:	f3bf 8f4f 	dsb	sy
 800869c:	623b      	str	r3, [r7, #32]
}
 800869e:	bf00      	nop
 80086a0:	bf00      	nop
 80086a2:	e7fd      	b.n	80086a0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80086a4:	4b19      	ldr	r3, [pc, #100]	@ (800870c <xTimerGenericCommand+0x98>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d02a      	beq.n	8008702 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	2b05      	cmp	r3, #5
 80086bc:	dc18      	bgt.n	80086f0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80086be:	f7ff fead 	bl	800841c <xTaskGetSchedulerState>
 80086c2:	4603      	mov	r3, r0
 80086c4:	2b02      	cmp	r3, #2
 80086c6:	d109      	bne.n	80086dc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80086c8:	4b10      	ldr	r3, [pc, #64]	@ (800870c <xTimerGenericCommand+0x98>)
 80086ca:	6818      	ldr	r0, [r3, #0]
 80086cc:	f107 0110 	add.w	r1, r7, #16
 80086d0:	2300      	movs	r3, #0
 80086d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086d4:	f7fe fc16 	bl	8006f04 <xQueueGenericSend>
 80086d8:	6278      	str	r0, [r7, #36]	@ 0x24
 80086da:	e012      	b.n	8008702 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80086dc:	4b0b      	ldr	r3, [pc, #44]	@ (800870c <xTimerGenericCommand+0x98>)
 80086de:	6818      	ldr	r0, [r3, #0]
 80086e0:	f107 0110 	add.w	r1, r7, #16
 80086e4:	2300      	movs	r3, #0
 80086e6:	2200      	movs	r2, #0
 80086e8:	f7fe fc0c 	bl	8006f04 <xQueueGenericSend>
 80086ec:	6278      	str	r0, [r7, #36]	@ 0x24
 80086ee:	e008      	b.n	8008702 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80086f0:	4b06      	ldr	r3, [pc, #24]	@ (800870c <xTimerGenericCommand+0x98>)
 80086f2:	6818      	ldr	r0, [r3, #0]
 80086f4:	f107 0110 	add.w	r1, r7, #16
 80086f8:	2300      	movs	r3, #0
 80086fa:	683a      	ldr	r2, [r7, #0]
 80086fc:	f7fe fd04 	bl	8007108 <xQueueGenericSendFromISR>
 8008700:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008704:	4618      	mov	r0, r3
 8008706:	3728      	adds	r7, #40	@ 0x28
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}
 800870c:	2000129c 	.word	0x2000129c

08008710 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b088      	sub	sp, #32
 8008714:	af02      	add	r7, sp, #8
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800871a:	4b23      	ldr	r3, [pc, #140]	@ (80087a8 <prvProcessExpiredTimer+0x98>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	68db      	ldr	r3, [r3, #12]
 8008720:	68db      	ldr	r3, [r3, #12]
 8008722:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	3304      	adds	r3, #4
 8008728:	4618      	mov	r0, r3
 800872a:	f7fe fab7 	bl	8006c9c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008734:	f003 0304 	and.w	r3, r3, #4
 8008738:	2b00      	cmp	r3, #0
 800873a:	d023      	beq.n	8008784 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	699a      	ldr	r2, [r3, #24]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	18d1      	adds	r1, r2, r3
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	683a      	ldr	r2, [r7, #0]
 8008748:	6978      	ldr	r0, [r7, #20]
 800874a:	f000 f8d5 	bl	80088f8 <prvInsertTimerInActiveList>
 800874e:	4603      	mov	r3, r0
 8008750:	2b00      	cmp	r3, #0
 8008752:	d020      	beq.n	8008796 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008754:	2300      	movs	r3, #0
 8008756:	9300      	str	r3, [sp, #0]
 8008758:	2300      	movs	r3, #0
 800875a:	687a      	ldr	r2, [r7, #4]
 800875c:	2100      	movs	r1, #0
 800875e:	6978      	ldr	r0, [r7, #20]
 8008760:	f7ff ff88 	bl	8008674 <xTimerGenericCommand>
 8008764:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d114      	bne.n	8008796 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800876c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008770:	f383 8811 	msr	BASEPRI, r3
 8008774:	f3bf 8f6f 	isb	sy
 8008778:	f3bf 8f4f 	dsb	sy
 800877c:	60fb      	str	r3, [r7, #12]
}
 800877e:	bf00      	nop
 8008780:	bf00      	nop
 8008782:	e7fd      	b.n	8008780 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800878a:	f023 0301 	bic.w	r3, r3, #1
 800878e:	b2da      	uxtb	r2, r3
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	6a1b      	ldr	r3, [r3, #32]
 800879a:	6978      	ldr	r0, [r7, #20]
 800879c:	4798      	blx	r3
}
 800879e:	bf00      	nop
 80087a0:	3718      	adds	r7, #24
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}
 80087a6:	bf00      	nop
 80087a8:	20001294 	.word	0x20001294

080087ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b084      	sub	sp, #16
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80087b4:	f107 0308 	add.w	r3, r7, #8
 80087b8:	4618      	mov	r0, r3
 80087ba:	f000 f859 	bl	8008870 <prvGetNextExpireTime>
 80087be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	4619      	mov	r1, r3
 80087c4:	68f8      	ldr	r0, [r7, #12]
 80087c6:	f000 f805 	bl	80087d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80087ca:	f000 f8d7 	bl	800897c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80087ce:	bf00      	nop
 80087d0:	e7f0      	b.n	80087b4 <prvTimerTask+0x8>
	...

080087d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b084      	sub	sp, #16
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80087de:	f7ff fa05 	bl	8007bec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80087e2:	f107 0308 	add.w	r3, r7, #8
 80087e6:	4618      	mov	r0, r3
 80087e8:	f000 f866 	bl	80088b8 <prvSampleTimeNow>
 80087ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d130      	bne.n	8008856 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d10a      	bne.n	8008810 <prvProcessTimerOrBlockTask+0x3c>
 80087fa:	687a      	ldr	r2, [r7, #4]
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	429a      	cmp	r2, r3
 8008800:	d806      	bhi.n	8008810 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008802:	f7ff fa01 	bl	8007c08 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008806:	68f9      	ldr	r1, [r7, #12]
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f7ff ff81 	bl	8008710 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800880e:	e024      	b.n	800885a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d008      	beq.n	8008828 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008816:	4b13      	ldr	r3, [pc, #76]	@ (8008864 <prvProcessTimerOrBlockTask+0x90>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d101      	bne.n	8008824 <prvProcessTimerOrBlockTask+0x50>
 8008820:	2301      	movs	r3, #1
 8008822:	e000      	b.n	8008826 <prvProcessTimerOrBlockTask+0x52>
 8008824:	2300      	movs	r3, #0
 8008826:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008828:	4b0f      	ldr	r3, [pc, #60]	@ (8008868 <prvProcessTimerOrBlockTask+0x94>)
 800882a:	6818      	ldr	r0, [r3, #0]
 800882c:	687a      	ldr	r2, [r7, #4]
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	1ad3      	subs	r3, r2, r3
 8008832:	683a      	ldr	r2, [r7, #0]
 8008834:	4619      	mov	r1, r3
 8008836:	f7fe ff41 	bl	80076bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800883a:	f7ff f9e5 	bl	8007c08 <xTaskResumeAll>
 800883e:	4603      	mov	r3, r0
 8008840:	2b00      	cmp	r3, #0
 8008842:	d10a      	bne.n	800885a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008844:	4b09      	ldr	r3, [pc, #36]	@ (800886c <prvProcessTimerOrBlockTask+0x98>)
 8008846:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800884a:	601a      	str	r2, [r3, #0]
 800884c:	f3bf 8f4f 	dsb	sy
 8008850:	f3bf 8f6f 	isb	sy
}
 8008854:	e001      	b.n	800885a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008856:	f7ff f9d7 	bl	8007c08 <xTaskResumeAll>
}
 800885a:	bf00      	nop
 800885c:	3710      	adds	r7, #16
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
 8008862:	bf00      	nop
 8008864:	20001298 	.word	0x20001298
 8008868:	2000129c 	.word	0x2000129c
 800886c:	e000ed04 	.word	0xe000ed04

08008870 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008870:	b480      	push	{r7}
 8008872:	b085      	sub	sp, #20
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008878:	4b0e      	ldr	r3, [pc, #56]	@ (80088b4 <prvGetNextExpireTime+0x44>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d101      	bne.n	8008886 <prvGetNextExpireTime+0x16>
 8008882:	2201      	movs	r2, #1
 8008884:	e000      	b.n	8008888 <prvGetNextExpireTime+0x18>
 8008886:	2200      	movs	r2, #0
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d105      	bne.n	80088a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008894:	4b07      	ldr	r3, [pc, #28]	@ (80088b4 <prvGetNextExpireTime+0x44>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	68db      	ldr	r3, [r3, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	60fb      	str	r3, [r7, #12]
 800889e:	e001      	b.n	80088a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80088a0:	2300      	movs	r3, #0
 80088a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80088a4:	68fb      	ldr	r3, [r7, #12]
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3714      	adds	r7, #20
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr
 80088b2:	bf00      	nop
 80088b4:	20001294 	.word	0x20001294

080088b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80088c0:	f7ff fa40 	bl	8007d44 <xTaskGetTickCount>
 80088c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80088c6:	4b0b      	ldr	r3, [pc, #44]	@ (80088f4 <prvSampleTimeNow+0x3c>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	68fa      	ldr	r2, [r7, #12]
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d205      	bcs.n	80088dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80088d0:	f000 f93a 	bl	8008b48 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2201      	movs	r2, #1
 80088d8:	601a      	str	r2, [r3, #0]
 80088da:	e002      	b.n	80088e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2200      	movs	r2, #0
 80088e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80088e2:	4a04      	ldr	r2, [pc, #16]	@ (80088f4 <prvSampleTimeNow+0x3c>)
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80088e8:	68fb      	ldr	r3, [r7, #12]
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3710      	adds	r7, #16
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}
 80088f2:	bf00      	nop
 80088f4:	200012a4 	.word	0x200012a4

080088f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b086      	sub	sp, #24
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	60f8      	str	r0, [r7, #12]
 8008900:	60b9      	str	r1, [r7, #8]
 8008902:	607a      	str	r2, [r7, #4]
 8008904:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008906:	2300      	movs	r3, #0
 8008908:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	68ba      	ldr	r2, [r7, #8]
 800890e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	68fa      	ldr	r2, [r7, #12]
 8008914:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008916:	68ba      	ldr	r2, [r7, #8]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	429a      	cmp	r2, r3
 800891c:	d812      	bhi.n	8008944 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	1ad2      	subs	r2, r2, r3
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	699b      	ldr	r3, [r3, #24]
 8008928:	429a      	cmp	r2, r3
 800892a:	d302      	bcc.n	8008932 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800892c:	2301      	movs	r3, #1
 800892e:	617b      	str	r3, [r7, #20]
 8008930:	e01b      	b.n	800896a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008932:	4b10      	ldr	r3, [pc, #64]	@ (8008974 <prvInsertTimerInActiveList+0x7c>)
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	3304      	adds	r3, #4
 800893a:	4619      	mov	r1, r3
 800893c:	4610      	mov	r0, r2
 800893e:	f7fe f974 	bl	8006c2a <vListInsert>
 8008942:	e012      	b.n	800896a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	429a      	cmp	r2, r3
 800894a:	d206      	bcs.n	800895a <prvInsertTimerInActiveList+0x62>
 800894c:	68ba      	ldr	r2, [r7, #8]
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	429a      	cmp	r2, r3
 8008952:	d302      	bcc.n	800895a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008954:	2301      	movs	r3, #1
 8008956:	617b      	str	r3, [r7, #20]
 8008958:	e007      	b.n	800896a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800895a:	4b07      	ldr	r3, [pc, #28]	@ (8008978 <prvInsertTimerInActiveList+0x80>)
 800895c:	681a      	ldr	r2, [r3, #0]
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	3304      	adds	r3, #4
 8008962:	4619      	mov	r1, r3
 8008964:	4610      	mov	r0, r2
 8008966:	f7fe f960 	bl	8006c2a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800896a:	697b      	ldr	r3, [r7, #20]
}
 800896c:	4618      	mov	r0, r3
 800896e:	3718      	adds	r7, #24
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}
 8008974:	20001298 	.word	0x20001298
 8008978:	20001294 	.word	0x20001294

0800897c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b08e      	sub	sp, #56	@ 0x38
 8008980:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008982:	e0ce      	b.n	8008b22 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2b00      	cmp	r3, #0
 8008988:	da19      	bge.n	80089be <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800898a:	1d3b      	adds	r3, r7, #4
 800898c:	3304      	adds	r3, #4
 800898e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008992:	2b00      	cmp	r3, #0
 8008994:	d10b      	bne.n	80089ae <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800899a:	f383 8811 	msr	BASEPRI, r3
 800899e:	f3bf 8f6f 	isb	sy
 80089a2:	f3bf 8f4f 	dsb	sy
 80089a6:	61fb      	str	r3, [r7, #28]
}
 80089a8:	bf00      	nop
 80089aa:	bf00      	nop
 80089ac:	e7fd      	b.n	80089aa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80089ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80089b4:	6850      	ldr	r0, [r2, #4]
 80089b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80089b8:	6892      	ldr	r2, [r2, #8]
 80089ba:	4611      	mov	r1, r2
 80089bc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	f2c0 80ae 	blt.w	8008b22 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80089ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089cc:	695b      	ldr	r3, [r3, #20]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d004      	beq.n	80089dc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80089d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089d4:	3304      	adds	r3, #4
 80089d6:	4618      	mov	r0, r3
 80089d8:	f7fe f960 	bl	8006c9c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80089dc:	463b      	mov	r3, r7
 80089de:	4618      	mov	r0, r3
 80089e0:	f7ff ff6a 	bl	80088b8 <prvSampleTimeNow>
 80089e4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2b09      	cmp	r3, #9
 80089ea:	f200 8097 	bhi.w	8008b1c <prvProcessReceivedCommands+0x1a0>
 80089ee:	a201      	add	r2, pc, #4	@ (adr r2, 80089f4 <prvProcessReceivedCommands+0x78>)
 80089f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089f4:	08008a1d 	.word	0x08008a1d
 80089f8:	08008a1d 	.word	0x08008a1d
 80089fc:	08008a1d 	.word	0x08008a1d
 8008a00:	08008a93 	.word	0x08008a93
 8008a04:	08008aa7 	.word	0x08008aa7
 8008a08:	08008af3 	.word	0x08008af3
 8008a0c:	08008a1d 	.word	0x08008a1d
 8008a10:	08008a1d 	.word	0x08008a1d
 8008a14:	08008a93 	.word	0x08008a93
 8008a18:	08008aa7 	.word	0x08008aa7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a1e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a22:	f043 0301 	orr.w	r3, r3, #1
 8008a26:	b2da      	uxtb	r2, r3
 8008a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a2a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008a2e:	68ba      	ldr	r2, [r7, #8]
 8008a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a32:	699b      	ldr	r3, [r3, #24]
 8008a34:	18d1      	adds	r1, r2, r3
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a3c:	f7ff ff5c 	bl	80088f8 <prvInsertTimerInActiveList>
 8008a40:	4603      	mov	r3, r0
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d06c      	beq.n	8008b20 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a48:	6a1b      	ldr	r3, [r3, #32]
 8008a4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a4c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a54:	f003 0304 	and.w	r3, r3, #4
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d061      	beq.n	8008b20 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008a5c:	68ba      	ldr	r2, [r7, #8]
 8008a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a60:	699b      	ldr	r3, [r3, #24]
 8008a62:	441a      	add	r2, r3
 8008a64:	2300      	movs	r3, #0
 8008a66:	9300      	str	r3, [sp, #0]
 8008a68:	2300      	movs	r3, #0
 8008a6a:	2100      	movs	r1, #0
 8008a6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a6e:	f7ff fe01 	bl	8008674 <xTimerGenericCommand>
 8008a72:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008a74:	6a3b      	ldr	r3, [r7, #32]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d152      	bne.n	8008b20 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a7e:	f383 8811 	msr	BASEPRI, r3
 8008a82:	f3bf 8f6f 	isb	sy
 8008a86:	f3bf 8f4f 	dsb	sy
 8008a8a:	61bb      	str	r3, [r7, #24]
}
 8008a8c:	bf00      	nop
 8008a8e:	bf00      	nop
 8008a90:	e7fd      	b.n	8008a8e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a98:	f023 0301 	bic.w	r3, r3, #1
 8008a9c:	b2da      	uxtb	r2, r3
 8008a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aa0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008aa4:	e03d      	b.n	8008b22 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aa8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008aac:	f043 0301 	orr.w	r3, r3, #1
 8008ab0:	b2da      	uxtb	r2, r3
 8008ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ab4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008ab8:	68ba      	ldr	r2, [r7, #8]
 8008aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008abc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ac0:	699b      	ldr	r3, [r3, #24]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d10b      	bne.n	8008ade <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aca:	f383 8811 	msr	BASEPRI, r3
 8008ace:	f3bf 8f6f 	isb	sy
 8008ad2:	f3bf 8f4f 	dsb	sy
 8008ad6:	617b      	str	r3, [r7, #20]
}
 8008ad8:	bf00      	nop
 8008ada:	bf00      	nop
 8008adc:	e7fd      	b.n	8008ada <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ae0:	699a      	ldr	r2, [r3, #24]
 8008ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ae4:	18d1      	adds	r1, r2, r3
 8008ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ae8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008aea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008aec:	f7ff ff04 	bl	80088f8 <prvInsertTimerInActiveList>
					break;
 8008af0:	e017      	b.n	8008b22 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008af4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008af8:	f003 0302 	and.w	r3, r3, #2
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d103      	bne.n	8008b08 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008b00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b02:	f000 fbe9 	bl	80092d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008b06:	e00c      	b.n	8008b22 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b0a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b0e:	f023 0301 	bic.w	r3, r3, #1
 8008b12:	b2da      	uxtb	r2, r3
 8008b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b16:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008b1a:	e002      	b.n	8008b22 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008b1c:	bf00      	nop
 8008b1e:	e000      	b.n	8008b22 <prvProcessReceivedCommands+0x1a6>
					break;
 8008b20:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008b22:	4b08      	ldr	r3, [pc, #32]	@ (8008b44 <prvProcessReceivedCommands+0x1c8>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	1d39      	adds	r1, r7, #4
 8008b28:	2200      	movs	r2, #0
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f7fe fb8a 	bl	8007244 <xQueueReceive>
 8008b30:	4603      	mov	r3, r0
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	f47f af26 	bne.w	8008984 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008b38:	bf00      	nop
 8008b3a:	bf00      	nop
 8008b3c:	3730      	adds	r7, #48	@ 0x30
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
 8008b42:	bf00      	nop
 8008b44:	2000129c 	.word	0x2000129c

08008b48 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b088      	sub	sp, #32
 8008b4c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008b4e:	e049      	b.n	8008be4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008b50:	4b2e      	ldr	r3, [pc, #184]	@ (8008c0c <prvSwitchTimerLists+0xc4>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	68db      	ldr	r3, [r3, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b5a:	4b2c      	ldr	r3, [pc, #176]	@ (8008c0c <prvSwitchTimerLists+0xc4>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	68db      	ldr	r3, [r3, #12]
 8008b60:	68db      	ldr	r3, [r3, #12]
 8008b62:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	3304      	adds	r3, #4
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f7fe f897 	bl	8006c9c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	6a1b      	ldr	r3, [r3, #32]
 8008b72:	68f8      	ldr	r0, [r7, #12]
 8008b74:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b7c:	f003 0304 	and.w	r3, r3, #4
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d02f      	beq.n	8008be4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	699b      	ldr	r3, [r3, #24]
 8008b88:	693a      	ldr	r2, [r7, #16]
 8008b8a:	4413      	add	r3, r2
 8008b8c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008b8e:	68ba      	ldr	r2, [r7, #8]
 8008b90:	693b      	ldr	r3, [r7, #16]
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d90e      	bls.n	8008bb4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	68ba      	ldr	r2, [r7, #8]
 8008b9a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	68fa      	ldr	r2, [r7, #12]
 8008ba0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008ba2:	4b1a      	ldr	r3, [pc, #104]	@ (8008c0c <prvSwitchTimerLists+0xc4>)
 8008ba4:	681a      	ldr	r2, [r3, #0]
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	3304      	adds	r3, #4
 8008baa:	4619      	mov	r1, r3
 8008bac:	4610      	mov	r0, r2
 8008bae:	f7fe f83c 	bl	8006c2a <vListInsert>
 8008bb2:	e017      	b.n	8008be4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	9300      	str	r3, [sp, #0]
 8008bb8:	2300      	movs	r3, #0
 8008bba:	693a      	ldr	r2, [r7, #16]
 8008bbc:	2100      	movs	r1, #0
 8008bbe:	68f8      	ldr	r0, [r7, #12]
 8008bc0:	f7ff fd58 	bl	8008674 <xTimerGenericCommand>
 8008bc4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d10b      	bne.n	8008be4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bd0:	f383 8811 	msr	BASEPRI, r3
 8008bd4:	f3bf 8f6f 	isb	sy
 8008bd8:	f3bf 8f4f 	dsb	sy
 8008bdc:	603b      	str	r3, [r7, #0]
}
 8008bde:	bf00      	nop
 8008be0:	bf00      	nop
 8008be2:	e7fd      	b.n	8008be0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008be4:	4b09      	ldr	r3, [pc, #36]	@ (8008c0c <prvSwitchTimerLists+0xc4>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d1b0      	bne.n	8008b50 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008bee:	4b07      	ldr	r3, [pc, #28]	@ (8008c0c <prvSwitchTimerLists+0xc4>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008bf4:	4b06      	ldr	r3, [pc, #24]	@ (8008c10 <prvSwitchTimerLists+0xc8>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4a04      	ldr	r2, [pc, #16]	@ (8008c0c <prvSwitchTimerLists+0xc4>)
 8008bfa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008bfc:	4a04      	ldr	r2, [pc, #16]	@ (8008c10 <prvSwitchTimerLists+0xc8>)
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	6013      	str	r3, [r2, #0]
}
 8008c02:	bf00      	nop
 8008c04:	3718      	adds	r7, #24
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}
 8008c0a:	bf00      	nop
 8008c0c:	20001294 	.word	0x20001294
 8008c10:	20001298 	.word	0x20001298

08008c14 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b082      	sub	sp, #8
 8008c18:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008c1a:	f000 f96d 	bl	8008ef8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008c1e:	4b15      	ldr	r3, [pc, #84]	@ (8008c74 <prvCheckForValidListAndQueue+0x60>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d120      	bne.n	8008c68 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008c26:	4814      	ldr	r0, [pc, #80]	@ (8008c78 <prvCheckForValidListAndQueue+0x64>)
 8008c28:	f7fd ffae 	bl	8006b88 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008c2c:	4813      	ldr	r0, [pc, #76]	@ (8008c7c <prvCheckForValidListAndQueue+0x68>)
 8008c2e:	f7fd ffab 	bl	8006b88 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008c32:	4b13      	ldr	r3, [pc, #76]	@ (8008c80 <prvCheckForValidListAndQueue+0x6c>)
 8008c34:	4a10      	ldr	r2, [pc, #64]	@ (8008c78 <prvCheckForValidListAndQueue+0x64>)
 8008c36:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008c38:	4b12      	ldr	r3, [pc, #72]	@ (8008c84 <prvCheckForValidListAndQueue+0x70>)
 8008c3a:	4a10      	ldr	r2, [pc, #64]	@ (8008c7c <prvCheckForValidListAndQueue+0x68>)
 8008c3c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008c3e:	2300      	movs	r3, #0
 8008c40:	9300      	str	r3, [sp, #0]
 8008c42:	4b11      	ldr	r3, [pc, #68]	@ (8008c88 <prvCheckForValidListAndQueue+0x74>)
 8008c44:	4a11      	ldr	r2, [pc, #68]	@ (8008c8c <prvCheckForValidListAndQueue+0x78>)
 8008c46:	2110      	movs	r1, #16
 8008c48:	200a      	movs	r0, #10
 8008c4a:	f7fe f8bb 	bl	8006dc4 <xQueueGenericCreateStatic>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	4a08      	ldr	r2, [pc, #32]	@ (8008c74 <prvCheckForValidListAndQueue+0x60>)
 8008c52:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008c54:	4b07      	ldr	r3, [pc, #28]	@ (8008c74 <prvCheckForValidListAndQueue+0x60>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d005      	beq.n	8008c68 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008c5c:	4b05      	ldr	r3, [pc, #20]	@ (8008c74 <prvCheckForValidListAndQueue+0x60>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	490b      	ldr	r1, [pc, #44]	@ (8008c90 <prvCheckForValidListAndQueue+0x7c>)
 8008c62:	4618      	mov	r0, r3
 8008c64:	f7fe fd00 	bl	8007668 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008c68:	f000 f978 	bl	8008f5c <vPortExitCritical>
}
 8008c6c:	bf00      	nop
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
 8008c72:	bf00      	nop
 8008c74:	2000129c 	.word	0x2000129c
 8008c78:	2000126c 	.word	0x2000126c
 8008c7c:	20001280 	.word	0x20001280
 8008c80:	20001294 	.word	0x20001294
 8008c84:	20001298 	.word	0x20001298
 8008c88:	20001348 	.word	0x20001348
 8008c8c:	200012a8 	.word	0x200012a8
 8008c90:	0800e5c8 	.word	0x0800e5c8

08008c94 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008c94:	b480      	push	{r7}
 8008c96:	b085      	sub	sp, #20
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	60f8      	str	r0, [r7, #12]
 8008c9c:	60b9      	str	r1, [r7, #8]
 8008c9e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	3b04      	subs	r3, #4
 8008ca4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008cac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	3b04      	subs	r3, #4
 8008cb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	f023 0201 	bic.w	r2, r3, #1
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	3b04      	subs	r3, #4
 8008cc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008cc4:	4a0c      	ldr	r2, [pc, #48]	@ (8008cf8 <pxPortInitialiseStack+0x64>)
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	3b14      	subs	r3, #20
 8008cce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	3b04      	subs	r3, #4
 8008cda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f06f 0202 	mvn.w	r2, #2
 8008ce2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	3b20      	subs	r3, #32
 8008ce8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008cea:	68fb      	ldr	r3, [r7, #12]
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3714      	adds	r7, #20
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr
 8008cf8:	08008cfd 	.word	0x08008cfd

08008cfc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b085      	sub	sp, #20
 8008d00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008d02:	2300      	movs	r3, #0
 8008d04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008d06:	4b13      	ldr	r3, [pc, #76]	@ (8008d54 <prvTaskExitError+0x58>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d0e:	d00b      	beq.n	8008d28 <prvTaskExitError+0x2c>
	__asm volatile
 8008d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d14:	f383 8811 	msr	BASEPRI, r3
 8008d18:	f3bf 8f6f 	isb	sy
 8008d1c:	f3bf 8f4f 	dsb	sy
 8008d20:	60fb      	str	r3, [r7, #12]
}
 8008d22:	bf00      	nop
 8008d24:	bf00      	nop
 8008d26:	e7fd      	b.n	8008d24 <prvTaskExitError+0x28>
	__asm volatile
 8008d28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d2c:	f383 8811 	msr	BASEPRI, r3
 8008d30:	f3bf 8f6f 	isb	sy
 8008d34:	f3bf 8f4f 	dsb	sy
 8008d38:	60bb      	str	r3, [r7, #8]
}
 8008d3a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008d3c:	bf00      	nop
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d0fc      	beq.n	8008d3e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008d44:	bf00      	nop
 8008d46:	bf00      	nop
 8008d48:	3714      	adds	r7, #20
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d50:	4770      	bx	lr
 8008d52:	bf00      	nop
 8008d54:	2000006c 	.word	0x2000006c
	...

08008d60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008d60:	4b07      	ldr	r3, [pc, #28]	@ (8008d80 <pxCurrentTCBConst2>)
 8008d62:	6819      	ldr	r1, [r3, #0]
 8008d64:	6808      	ldr	r0, [r1, #0]
 8008d66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d6a:	f380 8809 	msr	PSP, r0
 8008d6e:	f3bf 8f6f 	isb	sy
 8008d72:	f04f 0000 	mov.w	r0, #0
 8008d76:	f380 8811 	msr	BASEPRI, r0
 8008d7a:	4770      	bx	lr
 8008d7c:	f3af 8000 	nop.w

08008d80 <pxCurrentTCBConst2>:
 8008d80:	20000d6c 	.word	0x20000d6c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008d84:	bf00      	nop
 8008d86:	bf00      	nop

08008d88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008d88:	4808      	ldr	r0, [pc, #32]	@ (8008dac <prvPortStartFirstTask+0x24>)
 8008d8a:	6800      	ldr	r0, [r0, #0]
 8008d8c:	6800      	ldr	r0, [r0, #0]
 8008d8e:	f380 8808 	msr	MSP, r0
 8008d92:	f04f 0000 	mov.w	r0, #0
 8008d96:	f380 8814 	msr	CONTROL, r0
 8008d9a:	b662      	cpsie	i
 8008d9c:	b661      	cpsie	f
 8008d9e:	f3bf 8f4f 	dsb	sy
 8008da2:	f3bf 8f6f 	isb	sy
 8008da6:	df00      	svc	0
 8008da8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008daa:	bf00      	nop
 8008dac:	e000ed08 	.word	0xe000ed08

08008db0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b086      	sub	sp, #24
 8008db4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008db6:	4b47      	ldr	r3, [pc, #284]	@ (8008ed4 <xPortStartScheduler+0x124>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a47      	ldr	r2, [pc, #284]	@ (8008ed8 <xPortStartScheduler+0x128>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d10b      	bne.n	8008dd8 <xPortStartScheduler+0x28>
	__asm volatile
 8008dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dc4:	f383 8811 	msr	BASEPRI, r3
 8008dc8:	f3bf 8f6f 	isb	sy
 8008dcc:	f3bf 8f4f 	dsb	sy
 8008dd0:	60fb      	str	r3, [r7, #12]
}
 8008dd2:	bf00      	nop
 8008dd4:	bf00      	nop
 8008dd6:	e7fd      	b.n	8008dd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008dd8:	4b3e      	ldr	r3, [pc, #248]	@ (8008ed4 <xPortStartScheduler+0x124>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a3f      	ldr	r2, [pc, #252]	@ (8008edc <xPortStartScheduler+0x12c>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d10b      	bne.n	8008dfa <xPortStartScheduler+0x4a>
	__asm volatile
 8008de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008de6:	f383 8811 	msr	BASEPRI, r3
 8008dea:	f3bf 8f6f 	isb	sy
 8008dee:	f3bf 8f4f 	dsb	sy
 8008df2:	613b      	str	r3, [r7, #16]
}
 8008df4:	bf00      	nop
 8008df6:	bf00      	nop
 8008df8:	e7fd      	b.n	8008df6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008dfa:	4b39      	ldr	r3, [pc, #228]	@ (8008ee0 <xPortStartScheduler+0x130>)
 8008dfc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	b2db      	uxtb	r3, r3
 8008e04:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	22ff      	movs	r2, #255	@ 0xff
 8008e0a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	781b      	ldrb	r3, [r3, #0]
 8008e10:	b2db      	uxtb	r3, r3
 8008e12:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008e14:	78fb      	ldrb	r3, [r7, #3]
 8008e16:	b2db      	uxtb	r3, r3
 8008e18:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008e1c:	b2da      	uxtb	r2, r3
 8008e1e:	4b31      	ldr	r3, [pc, #196]	@ (8008ee4 <xPortStartScheduler+0x134>)
 8008e20:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008e22:	4b31      	ldr	r3, [pc, #196]	@ (8008ee8 <xPortStartScheduler+0x138>)
 8008e24:	2207      	movs	r2, #7
 8008e26:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e28:	e009      	b.n	8008e3e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008e2a:	4b2f      	ldr	r3, [pc, #188]	@ (8008ee8 <xPortStartScheduler+0x138>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	3b01      	subs	r3, #1
 8008e30:	4a2d      	ldr	r2, [pc, #180]	@ (8008ee8 <xPortStartScheduler+0x138>)
 8008e32:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008e34:	78fb      	ldrb	r3, [r7, #3]
 8008e36:	b2db      	uxtb	r3, r3
 8008e38:	005b      	lsls	r3, r3, #1
 8008e3a:	b2db      	uxtb	r3, r3
 8008e3c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e3e:	78fb      	ldrb	r3, [r7, #3]
 8008e40:	b2db      	uxtb	r3, r3
 8008e42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e46:	2b80      	cmp	r3, #128	@ 0x80
 8008e48:	d0ef      	beq.n	8008e2a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008e4a:	4b27      	ldr	r3, [pc, #156]	@ (8008ee8 <xPortStartScheduler+0x138>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f1c3 0307 	rsb	r3, r3, #7
 8008e52:	2b04      	cmp	r3, #4
 8008e54:	d00b      	beq.n	8008e6e <xPortStartScheduler+0xbe>
	__asm volatile
 8008e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e5a:	f383 8811 	msr	BASEPRI, r3
 8008e5e:	f3bf 8f6f 	isb	sy
 8008e62:	f3bf 8f4f 	dsb	sy
 8008e66:	60bb      	str	r3, [r7, #8]
}
 8008e68:	bf00      	nop
 8008e6a:	bf00      	nop
 8008e6c:	e7fd      	b.n	8008e6a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008e6e:	4b1e      	ldr	r3, [pc, #120]	@ (8008ee8 <xPortStartScheduler+0x138>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	021b      	lsls	r3, r3, #8
 8008e74:	4a1c      	ldr	r2, [pc, #112]	@ (8008ee8 <xPortStartScheduler+0x138>)
 8008e76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008e78:	4b1b      	ldr	r3, [pc, #108]	@ (8008ee8 <xPortStartScheduler+0x138>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008e80:	4a19      	ldr	r2, [pc, #100]	@ (8008ee8 <xPortStartScheduler+0x138>)
 8008e82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	b2da      	uxtb	r2, r3
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008e8c:	4b17      	ldr	r3, [pc, #92]	@ (8008eec <xPortStartScheduler+0x13c>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4a16      	ldr	r2, [pc, #88]	@ (8008eec <xPortStartScheduler+0x13c>)
 8008e92:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008e96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008e98:	4b14      	ldr	r3, [pc, #80]	@ (8008eec <xPortStartScheduler+0x13c>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a13      	ldr	r2, [pc, #76]	@ (8008eec <xPortStartScheduler+0x13c>)
 8008e9e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008ea2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008ea4:	f000 f8da 	bl	800905c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008ea8:	4b11      	ldr	r3, [pc, #68]	@ (8008ef0 <xPortStartScheduler+0x140>)
 8008eaa:	2200      	movs	r2, #0
 8008eac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008eae:	f000 f8f9 	bl	80090a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008eb2:	4b10      	ldr	r3, [pc, #64]	@ (8008ef4 <xPortStartScheduler+0x144>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4a0f      	ldr	r2, [pc, #60]	@ (8008ef4 <xPortStartScheduler+0x144>)
 8008eb8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008ebc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008ebe:	f7ff ff63 	bl	8008d88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008ec2:	f7ff f809 	bl	8007ed8 <vTaskSwitchContext>
	prvTaskExitError();
 8008ec6:	f7ff ff19 	bl	8008cfc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008eca:	2300      	movs	r3, #0
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3718      	adds	r7, #24
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}
 8008ed4:	e000ed00 	.word	0xe000ed00
 8008ed8:	410fc271 	.word	0x410fc271
 8008edc:	410fc270 	.word	0x410fc270
 8008ee0:	e000e400 	.word	0xe000e400
 8008ee4:	20001398 	.word	0x20001398
 8008ee8:	2000139c 	.word	0x2000139c
 8008eec:	e000ed20 	.word	0xe000ed20
 8008ef0:	2000006c 	.word	0x2000006c
 8008ef4:	e000ef34 	.word	0xe000ef34

08008ef8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b083      	sub	sp, #12
 8008efc:	af00      	add	r7, sp, #0
	__asm volatile
 8008efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f02:	f383 8811 	msr	BASEPRI, r3
 8008f06:	f3bf 8f6f 	isb	sy
 8008f0a:	f3bf 8f4f 	dsb	sy
 8008f0e:	607b      	str	r3, [r7, #4]
}
 8008f10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008f12:	4b10      	ldr	r3, [pc, #64]	@ (8008f54 <vPortEnterCritical+0x5c>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	3301      	adds	r3, #1
 8008f18:	4a0e      	ldr	r2, [pc, #56]	@ (8008f54 <vPortEnterCritical+0x5c>)
 8008f1a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008f1c:	4b0d      	ldr	r3, [pc, #52]	@ (8008f54 <vPortEnterCritical+0x5c>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d110      	bne.n	8008f46 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008f24:	4b0c      	ldr	r3, [pc, #48]	@ (8008f58 <vPortEnterCritical+0x60>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	b2db      	uxtb	r3, r3
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d00b      	beq.n	8008f46 <vPortEnterCritical+0x4e>
	__asm volatile
 8008f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f32:	f383 8811 	msr	BASEPRI, r3
 8008f36:	f3bf 8f6f 	isb	sy
 8008f3a:	f3bf 8f4f 	dsb	sy
 8008f3e:	603b      	str	r3, [r7, #0]
}
 8008f40:	bf00      	nop
 8008f42:	bf00      	nop
 8008f44:	e7fd      	b.n	8008f42 <vPortEnterCritical+0x4a>
	}
}
 8008f46:	bf00      	nop
 8008f48:	370c      	adds	r7, #12
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f50:	4770      	bx	lr
 8008f52:	bf00      	nop
 8008f54:	2000006c 	.word	0x2000006c
 8008f58:	e000ed04 	.word	0xe000ed04

08008f5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b083      	sub	sp, #12
 8008f60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008f62:	4b12      	ldr	r3, [pc, #72]	@ (8008fac <vPortExitCritical+0x50>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d10b      	bne.n	8008f82 <vPortExitCritical+0x26>
	__asm volatile
 8008f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f6e:	f383 8811 	msr	BASEPRI, r3
 8008f72:	f3bf 8f6f 	isb	sy
 8008f76:	f3bf 8f4f 	dsb	sy
 8008f7a:	607b      	str	r3, [r7, #4]
}
 8008f7c:	bf00      	nop
 8008f7e:	bf00      	nop
 8008f80:	e7fd      	b.n	8008f7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008f82:	4b0a      	ldr	r3, [pc, #40]	@ (8008fac <vPortExitCritical+0x50>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	3b01      	subs	r3, #1
 8008f88:	4a08      	ldr	r2, [pc, #32]	@ (8008fac <vPortExitCritical+0x50>)
 8008f8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008f8c:	4b07      	ldr	r3, [pc, #28]	@ (8008fac <vPortExitCritical+0x50>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d105      	bne.n	8008fa0 <vPortExitCritical+0x44>
 8008f94:	2300      	movs	r3, #0
 8008f96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	f383 8811 	msr	BASEPRI, r3
}
 8008f9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008fa0:	bf00      	nop
 8008fa2:	370c      	adds	r7, #12
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr
 8008fac:	2000006c 	.word	0x2000006c

08008fb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008fb0:	f3ef 8009 	mrs	r0, PSP
 8008fb4:	f3bf 8f6f 	isb	sy
 8008fb8:	4b15      	ldr	r3, [pc, #84]	@ (8009010 <pxCurrentTCBConst>)
 8008fba:	681a      	ldr	r2, [r3, #0]
 8008fbc:	f01e 0f10 	tst.w	lr, #16
 8008fc0:	bf08      	it	eq
 8008fc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008fc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fca:	6010      	str	r0, [r2, #0]
 8008fcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008fd0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008fd4:	f380 8811 	msr	BASEPRI, r0
 8008fd8:	f3bf 8f4f 	dsb	sy
 8008fdc:	f3bf 8f6f 	isb	sy
 8008fe0:	f7fe ff7a 	bl	8007ed8 <vTaskSwitchContext>
 8008fe4:	f04f 0000 	mov.w	r0, #0
 8008fe8:	f380 8811 	msr	BASEPRI, r0
 8008fec:	bc09      	pop	{r0, r3}
 8008fee:	6819      	ldr	r1, [r3, #0]
 8008ff0:	6808      	ldr	r0, [r1, #0]
 8008ff2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ff6:	f01e 0f10 	tst.w	lr, #16
 8008ffa:	bf08      	it	eq
 8008ffc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009000:	f380 8809 	msr	PSP, r0
 8009004:	f3bf 8f6f 	isb	sy
 8009008:	4770      	bx	lr
 800900a:	bf00      	nop
 800900c:	f3af 8000 	nop.w

08009010 <pxCurrentTCBConst>:
 8009010:	20000d6c 	.word	0x20000d6c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009014:	bf00      	nop
 8009016:	bf00      	nop

08009018 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b082      	sub	sp, #8
 800901c:	af00      	add	r7, sp, #0
	__asm volatile
 800901e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009022:	f383 8811 	msr	BASEPRI, r3
 8009026:	f3bf 8f6f 	isb	sy
 800902a:	f3bf 8f4f 	dsb	sy
 800902e:	607b      	str	r3, [r7, #4]
}
 8009030:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009032:	f7fe fe97 	bl	8007d64 <xTaskIncrementTick>
 8009036:	4603      	mov	r3, r0
 8009038:	2b00      	cmp	r3, #0
 800903a:	d003      	beq.n	8009044 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800903c:	4b06      	ldr	r3, [pc, #24]	@ (8009058 <xPortSysTickHandler+0x40>)
 800903e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009042:	601a      	str	r2, [r3, #0]
 8009044:	2300      	movs	r3, #0
 8009046:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	f383 8811 	msr	BASEPRI, r3
}
 800904e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009050:	bf00      	nop
 8009052:	3708      	adds	r7, #8
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}
 8009058:	e000ed04 	.word	0xe000ed04

0800905c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800905c:	b480      	push	{r7}
 800905e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009060:	4b0b      	ldr	r3, [pc, #44]	@ (8009090 <vPortSetupTimerInterrupt+0x34>)
 8009062:	2200      	movs	r2, #0
 8009064:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009066:	4b0b      	ldr	r3, [pc, #44]	@ (8009094 <vPortSetupTimerInterrupt+0x38>)
 8009068:	2200      	movs	r2, #0
 800906a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800906c:	4b0a      	ldr	r3, [pc, #40]	@ (8009098 <vPortSetupTimerInterrupt+0x3c>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a0a      	ldr	r2, [pc, #40]	@ (800909c <vPortSetupTimerInterrupt+0x40>)
 8009072:	fba2 2303 	umull	r2, r3, r2, r3
 8009076:	099b      	lsrs	r3, r3, #6
 8009078:	4a09      	ldr	r2, [pc, #36]	@ (80090a0 <vPortSetupTimerInterrupt+0x44>)
 800907a:	3b01      	subs	r3, #1
 800907c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800907e:	4b04      	ldr	r3, [pc, #16]	@ (8009090 <vPortSetupTimerInterrupt+0x34>)
 8009080:	2207      	movs	r2, #7
 8009082:	601a      	str	r2, [r3, #0]
}
 8009084:	bf00      	nop
 8009086:	46bd      	mov	sp, r7
 8009088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908c:	4770      	bx	lr
 800908e:	bf00      	nop
 8009090:	e000e010 	.word	0xe000e010
 8009094:	e000e018 	.word	0xe000e018
 8009098:	20000060 	.word	0x20000060
 800909c:	10624dd3 	.word	0x10624dd3
 80090a0:	e000e014 	.word	0xe000e014

080090a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80090a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80090b4 <vPortEnableVFP+0x10>
 80090a8:	6801      	ldr	r1, [r0, #0]
 80090aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80090ae:	6001      	str	r1, [r0, #0]
 80090b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80090b2:	bf00      	nop
 80090b4:	e000ed88 	.word	0xe000ed88

080090b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80090b8:	b480      	push	{r7}
 80090ba:	b085      	sub	sp, #20
 80090bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80090be:	f3ef 8305 	mrs	r3, IPSR
 80090c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	2b0f      	cmp	r3, #15
 80090c8:	d915      	bls.n	80090f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80090ca:	4a18      	ldr	r2, [pc, #96]	@ (800912c <vPortValidateInterruptPriority+0x74>)
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	4413      	add	r3, r2
 80090d0:	781b      	ldrb	r3, [r3, #0]
 80090d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80090d4:	4b16      	ldr	r3, [pc, #88]	@ (8009130 <vPortValidateInterruptPriority+0x78>)
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	7afa      	ldrb	r2, [r7, #11]
 80090da:	429a      	cmp	r2, r3
 80090dc:	d20b      	bcs.n	80090f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80090de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090e2:	f383 8811 	msr	BASEPRI, r3
 80090e6:	f3bf 8f6f 	isb	sy
 80090ea:	f3bf 8f4f 	dsb	sy
 80090ee:	607b      	str	r3, [r7, #4]
}
 80090f0:	bf00      	nop
 80090f2:	bf00      	nop
 80090f4:	e7fd      	b.n	80090f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80090f6:	4b0f      	ldr	r3, [pc, #60]	@ (8009134 <vPortValidateInterruptPriority+0x7c>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80090fe:	4b0e      	ldr	r3, [pc, #56]	@ (8009138 <vPortValidateInterruptPriority+0x80>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	429a      	cmp	r2, r3
 8009104:	d90b      	bls.n	800911e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800910a:	f383 8811 	msr	BASEPRI, r3
 800910e:	f3bf 8f6f 	isb	sy
 8009112:	f3bf 8f4f 	dsb	sy
 8009116:	603b      	str	r3, [r7, #0]
}
 8009118:	bf00      	nop
 800911a:	bf00      	nop
 800911c:	e7fd      	b.n	800911a <vPortValidateInterruptPriority+0x62>
	}
 800911e:	bf00      	nop
 8009120:	3714      	adds	r7, #20
 8009122:	46bd      	mov	sp, r7
 8009124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009128:	4770      	bx	lr
 800912a:	bf00      	nop
 800912c:	e000e3f0 	.word	0xe000e3f0
 8009130:	20001398 	.word	0x20001398
 8009134:	e000ed0c 	.word	0xe000ed0c
 8009138:	2000139c 	.word	0x2000139c

0800913c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b08a      	sub	sp, #40	@ 0x28
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009144:	2300      	movs	r3, #0
 8009146:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009148:	f7fe fd50 	bl	8007bec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800914c:	4b5c      	ldr	r3, [pc, #368]	@ (80092c0 <pvPortMalloc+0x184>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d101      	bne.n	8009158 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009154:	f000 f930 	bl	80093b8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009158:	4b5a      	ldr	r3, [pc, #360]	@ (80092c4 <pvPortMalloc+0x188>)
 800915a:	681a      	ldr	r2, [r3, #0]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	4013      	ands	r3, r2
 8009160:	2b00      	cmp	r3, #0
 8009162:	f040 8095 	bne.w	8009290 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d01e      	beq.n	80091aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800916c:	2208      	movs	r2, #8
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	4413      	add	r3, r2
 8009172:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f003 0307 	and.w	r3, r3, #7
 800917a:	2b00      	cmp	r3, #0
 800917c:	d015      	beq.n	80091aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f023 0307 	bic.w	r3, r3, #7
 8009184:	3308      	adds	r3, #8
 8009186:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f003 0307 	and.w	r3, r3, #7
 800918e:	2b00      	cmp	r3, #0
 8009190:	d00b      	beq.n	80091aa <pvPortMalloc+0x6e>
	__asm volatile
 8009192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009196:	f383 8811 	msr	BASEPRI, r3
 800919a:	f3bf 8f6f 	isb	sy
 800919e:	f3bf 8f4f 	dsb	sy
 80091a2:	617b      	str	r3, [r7, #20]
}
 80091a4:	bf00      	nop
 80091a6:	bf00      	nop
 80091a8:	e7fd      	b.n	80091a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d06f      	beq.n	8009290 <pvPortMalloc+0x154>
 80091b0:	4b45      	ldr	r3, [pc, #276]	@ (80092c8 <pvPortMalloc+0x18c>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	687a      	ldr	r2, [r7, #4]
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d86a      	bhi.n	8009290 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80091ba:	4b44      	ldr	r3, [pc, #272]	@ (80092cc <pvPortMalloc+0x190>)
 80091bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80091be:	4b43      	ldr	r3, [pc, #268]	@ (80092cc <pvPortMalloc+0x190>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80091c4:	e004      	b.n	80091d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80091c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80091ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80091d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091d2:	685b      	ldr	r3, [r3, #4]
 80091d4:	687a      	ldr	r2, [r7, #4]
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d903      	bls.n	80091e2 <pvPortMalloc+0xa6>
 80091da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d1f1      	bne.n	80091c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80091e2:	4b37      	ldr	r3, [pc, #220]	@ (80092c0 <pvPortMalloc+0x184>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d051      	beq.n	8009290 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80091ec:	6a3b      	ldr	r3, [r7, #32]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	2208      	movs	r2, #8
 80091f2:	4413      	add	r3, r2
 80091f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80091f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091f8:	681a      	ldr	r2, [r3, #0]
 80091fa:	6a3b      	ldr	r3, [r7, #32]
 80091fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80091fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009200:	685a      	ldr	r2, [r3, #4]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	1ad2      	subs	r2, r2, r3
 8009206:	2308      	movs	r3, #8
 8009208:	005b      	lsls	r3, r3, #1
 800920a:	429a      	cmp	r2, r3
 800920c:	d920      	bls.n	8009250 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800920e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	4413      	add	r3, r2
 8009214:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009216:	69bb      	ldr	r3, [r7, #24]
 8009218:	f003 0307 	and.w	r3, r3, #7
 800921c:	2b00      	cmp	r3, #0
 800921e:	d00b      	beq.n	8009238 <pvPortMalloc+0xfc>
	__asm volatile
 8009220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009224:	f383 8811 	msr	BASEPRI, r3
 8009228:	f3bf 8f6f 	isb	sy
 800922c:	f3bf 8f4f 	dsb	sy
 8009230:	613b      	str	r3, [r7, #16]
}
 8009232:	bf00      	nop
 8009234:	bf00      	nop
 8009236:	e7fd      	b.n	8009234 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800923a:	685a      	ldr	r2, [r3, #4]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	1ad2      	subs	r2, r2, r3
 8009240:	69bb      	ldr	r3, [r7, #24]
 8009242:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009246:	687a      	ldr	r2, [r7, #4]
 8009248:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800924a:	69b8      	ldr	r0, [r7, #24]
 800924c:	f000 f916 	bl	800947c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009250:	4b1d      	ldr	r3, [pc, #116]	@ (80092c8 <pvPortMalloc+0x18c>)
 8009252:	681a      	ldr	r2, [r3, #0]
 8009254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	1ad3      	subs	r3, r2, r3
 800925a:	4a1b      	ldr	r2, [pc, #108]	@ (80092c8 <pvPortMalloc+0x18c>)
 800925c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800925e:	4b1a      	ldr	r3, [pc, #104]	@ (80092c8 <pvPortMalloc+0x18c>)
 8009260:	681a      	ldr	r2, [r3, #0]
 8009262:	4b1b      	ldr	r3, [pc, #108]	@ (80092d0 <pvPortMalloc+0x194>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	429a      	cmp	r2, r3
 8009268:	d203      	bcs.n	8009272 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800926a:	4b17      	ldr	r3, [pc, #92]	@ (80092c8 <pvPortMalloc+0x18c>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	4a18      	ldr	r2, [pc, #96]	@ (80092d0 <pvPortMalloc+0x194>)
 8009270:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009274:	685a      	ldr	r2, [r3, #4]
 8009276:	4b13      	ldr	r3, [pc, #76]	@ (80092c4 <pvPortMalloc+0x188>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	431a      	orrs	r2, r3
 800927c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800927e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009282:	2200      	movs	r2, #0
 8009284:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009286:	4b13      	ldr	r3, [pc, #76]	@ (80092d4 <pvPortMalloc+0x198>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	3301      	adds	r3, #1
 800928c:	4a11      	ldr	r2, [pc, #68]	@ (80092d4 <pvPortMalloc+0x198>)
 800928e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009290:	f7fe fcba 	bl	8007c08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009294:	69fb      	ldr	r3, [r7, #28]
 8009296:	f003 0307 	and.w	r3, r3, #7
 800929a:	2b00      	cmp	r3, #0
 800929c:	d00b      	beq.n	80092b6 <pvPortMalloc+0x17a>
	__asm volatile
 800929e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092a2:	f383 8811 	msr	BASEPRI, r3
 80092a6:	f3bf 8f6f 	isb	sy
 80092aa:	f3bf 8f4f 	dsb	sy
 80092ae:	60fb      	str	r3, [r7, #12]
}
 80092b0:	bf00      	nop
 80092b2:	bf00      	nop
 80092b4:	e7fd      	b.n	80092b2 <pvPortMalloc+0x176>
	return pvReturn;
 80092b6:	69fb      	ldr	r3, [r7, #28]
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3728      	adds	r7, #40	@ 0x28
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}
 80092c0:	2000dba8 	.word	0x2000dba8
 80092c4:	2000dbbc 	.word	0x2000dbbc
 80092c8:	2000dbac 	.word	0x2000dbac
 80092cc:	2000dba0 	.word	0x2000dba0
 80092d0:	2000dbb0 	.word	0x2000dbb0
 80092d4:	2000dbb4 	.word	0x2000dbb4

080092d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b086      	sub	sp, #24
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d04f      	beq.n	800938a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80092ea:	2308      	movs	r3, #8
 80092ec:	425b      	negs	r3, r3
 80092ee:	697a      	ldr	r2, [r7, #20]
 80092f0:	4413      	add	r3, r2
 80092f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	685a      	ldr	r2, [r3, #4]
 80092fc:	4b25      	ldr	r3, [pc, #148]	@ (8009394 <vPortFree+0xbc>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4013      	ands	r3, r2
 8009302:	2b00      	cmp	r3, #0
 8009304:	d10b      	bne.n	800931e <vPortFree+0x46>
	__asm volatile
 8009306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800930a:	f383 8811 	msr	BASEPRI, r3
 800930e:	f3bf 8f6f 	isb	sy
 8009312:	f3bf 8f4f 	dsb	sy
 8009316:	60fb      	str	r3, [r7, #12]
}
 8009318:	bf00      	nop
 800931a:	bf00      	nop
 800931c:	e7fd      	b.n	800931a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d00b      	beq.n	800933e <vPortFree+0x66>
	__asm volatile
 8009326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800932a:	f383 8811 	msr	BASEPRI, r3
 800932e:	f3bf 8f6f 	isb	sy
 8009332:	f3bf 8f4f 	dsb	sy
 8009336:	60bb      	str	r3, [r7, #8]
}
 8009338:	bf00      	nop
 800933a:	bf00      	nop
 800933c:	e7fd      	b.n	800933a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	685a      	ldr	r2, [r3, #4]
 8009342:	4b14      	ldr	r3, [pc, #80]	@ (8009394 <vPortFree+0xbc>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4013      	ands	r3, r2
 8009348:	2b00      	cmp	r3, #0
 800934a:	d01e      	beq.n	800938a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d11a      	bne.n	800938a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	685a      	ldr	r2, [r3, #4]
 8009358:	4b0e      	ldr	r3, [pc, #56]	@ (8009394 <vPortFree+0xbc>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	43db      	mvns	r3, r3
 800935e:	401a      	ands	r2, r3
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009364:	f7fe fc42 	bl	8007bec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	685a      	ldr	r2, [r3, #4]
 800936c:	4b0a      	ldr	r3, [pc, #40]	@ (8009398 <vPortFree+0xc0>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	4413      	add	r3, r2
 8009372:	4a09      	ldr	r2, [pc, #36]	@ (8009398 <vPortFree+0xc0>)
 8009374:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009376:	6938      	ldr	r0, [r7, #16]
 8009378:	f000 f880 	bl	800947c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800937c:	4b07      	ldr	r3, [pc, #28]	@ (800939c <vPortFree+0xc4>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	3301      	adds	r3, #1
 8009382:	4a06      	ldr	r2, [pc, #24]	@ (800939c <vPortFree+0xc4>)
 8009384:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009386:	f7fe fc3f 	bl	8007c08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800938a:	bf00      	nop
 800938c:	3718      	adds	r7, #24
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}
 8009392:	bf00      	nop
 8009394:	2000dbbc 	.word	0x2000dbbc
 8009398:	2000dbac 	.word	0x2000dbac
 800939c:	2000dbb8 	.word	0x2000dbb8

080093a0 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 80093a0:	b480      	push	{r7}
 80093a2:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 80093a4:	4b03      	ldr	r3, [pc, #12]	@ (80093b4 <xPortGetFreeHeapSize+0x14>)
 80093a6:	681b      	ldr	r3, [r3, #0]
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	46bd      	mov	sp, r7
 80093ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b0:	4770      	bx	lr
 80093b2:	bf00      	nop
 80093b4:	2000dbac 	.word	0x2000dbac

080093b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80093b8:	b480      	push	{r7}
 80093ba:	b085      	sub	sp, #20
 80093bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80093be:	f44f 4348 	mov.w	r3, #51200	@ 0xc800
 80093c2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80093c4:	4b27      	ldr	r3, [pc, #156]	@ (8009464 <prvHeapInit+0xac>)
 80093c6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	f003 0307 	and.w	r3, r3, #7
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d00c      	beq.n	80093ec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	3307      	adds	r3, #7
 80093d6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f023 0307 	bic.w	r3, r3, #7
 80093de:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80093e0:	68ba      	ldr	r2, [r7, #8]
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	1ad3      	subs	r3, r2, r3
 80093e6:	4a1f      	ldr	r2, [pc, #124]	@ (8009464 <prvHeapInit+0xac>)
 80093e8:	4413      	add	r3, r2
 80093ea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80093f0:	4a1d      	ldr	r2, [pc, #116]	@ (8009468 <prvHeapInit+0xb0>)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80093f6:	4b1c      	ldr	r3, [pc, #112]	@ (8009468 <prvHeapInit+0xb0>)
 80093f8:	2200      	movs	r2, #0
 80093fa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	68ba      	ldr	r2, [r7, #8]
 8009400:	4413      	add	r3, r2
 8009402:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009404:	2208      	movs	r2, #8
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	1a9b      	subs	r3, r3, r2
 800940a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f023 0307 	bic.w	r3, r3, #7
 8009412:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	4a15      	ldr	r2, [pc, #84]	@ (800946c <prvHeapInit+0xb4>)
 8009418:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800941a:	4b14      	ldr	r3, [pc, #80]	@ (800946c <prvHeapInit+0xb4>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	2200      	movs	r2, #0
 8009420:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009422:	4b12      	ldr	r3, [pc, #72]	@ (800946c <prvHeapInit+0xb4>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	2200      	movs	r2, #0
 8009428:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	68fa      	ldr	r2, [r7, #12]
 8009432:	1ad2      	subs	r2, r2, r3
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009438:	4b0c      	ldr	r3, [pc, #48]	@ (800946c <prvHeapInit+0xb4>)
 800943a:	681a      	ldr	r2, [r3, #0]
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	4a0a      	ldr	r2, [pc, #40]	@ (8009470 <prvHeapInit+0xb8>)
 8009446:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	685b      	ldr	r3, [r3, #4]
 800944c:	4a09      	ldr	r2, [pc, #36]	@ (8009474 <prvHeapInit+0xbc>)
 800944e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009450:	4b09      	ldr	r3, [pc, #36]	@ (8009478 <prvHeapInit+0xc0>)
 8009452:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009456:	601a      	str	r2, [r3, #0]
}
 8009458:	bf00      	nop
 800945a:	3714      	adds	r7, #20
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr
 8009464:	200013a0 	.word	0x200013a0
 8009468:	2000dba0 	.word	0x2000dba0
 800946c:	2000dba8 	.word	0x2000dba8
 8009470:	2000dbb0 	.word	0x2000dbb0
 8009474:	2000dbac 	.word	0x2000dbac
 8009478:	2000dbbc 	.word	0x2000dbbc

0800947c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800947c:	b480      	push	{r7}
 800947e:	b085      	sub	sp, #20
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009484:	4b28      	ldr	r3, [pc, #160]	@ (8009528 <prvInsertBlockIntoFreeList+0xac>)
 8009486:	60fb      	str	r3, [r7, #12]
 8009488:	e002      	b.n	8009490 <prvInsertBlockIntoFreeList+0x14>
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	60fb      	str	r3, [r7, #12]
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	687a      	ldr	r2, [r7, #4]
 8009496:	429a      	cmp	r2, r3
 8009498:	d8f7      	bhi.n	800948a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	685b      	ldr	r3, [r3, #4]
 80094a2:	68ba      	ldr	r2, [r7, #8]
 80094a4:	4413      	add	r3, r2
 80094a6:	687a      	ldr	r2, [r7, #4]
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d108      	bne.n	80094be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	685a      	ldr	r2, [r3, #4]
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	441a      	add	r2, r3
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	68ba      	ldr	r2, [r7, #8]
 80094c8:	441a      	add	r2, r3
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	429a      	cmp	r2, r3
 80094d0:	d118      	bne.n	8009504 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681a      	ldr	r2, [r3, #0]
 80094d6:	4b15      	ldr	r3, [pc, #84]	@ (800952c <prvInsertBlockIntoFreeList+0xb0>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	429a      	cmp	r2, r3
 80094dc:	d00d      	beq.n	80094fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	685a      	ldr	r2, [r3, #4]
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	685b      	ldr	r3, [r3, #4]
 80094e8:	441a      	add	r2, r3
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	681a      	ldr	r2, [r3, #0]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	601a      	str	r2, [r3, #0]
 80094f8:	e008      	b.n	800950c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80094fa:	4b0c      	ldr	r3, [pc, #48]	@ (800952c <prvInsertBlockIntoFreeList+0xb0>)
 80094fc:	681a      	ldr	r2, [r3, #0]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	601a      	str	r2, [r3, #0]
 8009502:	e003      	b.n	800950c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681a      	ldr	r2, [r3, #0]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800950c:	68fa      	ldr	r2, [r7, #12]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	429a      	cmp	r2, r3
 8009512:	d002      	beq.n	800951a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	687a      	ldr	r2, [r7, #4]
 8009518:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800951a:	bf00      	nop
 800951c:	3714      	adds	r7, #20
 800951e:	46bd      	mov	sp, r7
 8009520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009524:	4770      	bx	lr
 8009526:	bf00      	nop
 8009528:	2000dba0 	.word	0x2000dba0
 800952c:	2000dba8 	.word	0x2000dba8

08009530 <__NVIC_EnableIRQ>:
{
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
 8009536:	4603      	mov	r3, r0
 8009538:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800953a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800953e:	2b00      	cmp	r3, #0
 8009540:	db0b      	blt.n	800955a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009542:	79fb      	ldrb	r3, [r7, #7]
 8009544:	f003 021f 	and.w	r2, r3, #31
 8009548:	4907      	ldr	r1, [pc, #28]	@ (8009568 <__NVIC_EnableIRQ+0x38>)
 800954a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800954e:	095b      	lsrs	r3, r3, #5
 8009550:	2001      	movs	r0, #1
 8009552:	fa00 f202 	lsl.w	r2, r0, r2
 8009556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800955a:	bf00      	nop
 800955c:	370c      	adds	r7, #12
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr
 8009566:	bf00      	nop
 8009568:	e000e100 	.word	0xe000e100

0800956c <__NVIC_SetPriority>:
{
 800956c:	b480      	push	{r7}
 800956e:	b083      	sub	sp, #12
 8009570:	af00      	add	r7, sp, #0
 8009572:	4603      	mov	r3, r0
 8009574:	6039      	str	r1, [r7, #0]
 8009576:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800957c:	2b00      	cmp	r3, #0
 800957e:	db0a      	blt.n	8009596 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	b2da      	uxtb	r2, r3
 8009584:	490c      	ldr	r1, [pc, #48]	@ (80095b8 <__NVIC_SetPriority+0x4c>)
 8009586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800958a:	0112      	lsls	r2, r2, #4
 800958c:	b2d2      	uxtb	r2, r2
 800958e:	440b      	add	r3, r1
 8009590:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009594:	e00a      	b.n	80095ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	b2da      	uxtb	r2, r3
 800959a:	4908      	ldr	r1, [pc, #32]	@ (80095bc <__NVIC_SetPriority+0x50>)
 800959c:	79fb      	ldrb	r3, [r7, #7]
 800959e:	f003 030f 	and.w	r3, r3, #15
 80095a2:	3b04      	subs	r3, #4
 80095a4:	0112      	lsls	r2, r2, #4
 80095a6:	b2d2      	uxtb	r2, r2
 80095a8:	440b      	add	r3, r1
 80095aa:	761a      	strb	r2, [r3, #24]
}
 80095ac:	bf00      	nop
 80095ae:	370c      	adds	r7, #12
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr
 80095b8:	e000e100 	.word	0xe000e100
 80095bc:	e000ed00 	.word	0xe000ed00

080095c0 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b083      	sub	sp, #12
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095d0:	2b40      	cmp	r3, #64	@ 0x40
 80095d2:	bf0c      	ite	eq
 80095d4:	2301      	moveq	r3, #1
 80095d6:	2300      	movne	r3, #0
 80095d8:	b2db      	uxtb	r3, r3
}
 80095da:	4618      	mov	r0, r3
 80095dc:	370c      	adds	r7, #12
 80095de:	46bd      	mov	sp, r7
 80095e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e4:	4770      	bx	lr

080095e6 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 80095e6:	b480      	push	{r7}
 80095e8:	b083      	sub	sp, #12
 80095ea:	af00      	add	r7, sp, #0
 80095ec:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095f6:	2b80      	cmp	r3, #128	@ 0x80
 80095f8:	bf0c      	ite	eq
 80095fa:	2301      	moveq	r3, #1
 80095fc:	2300      	movne	r3, #0
 80095fe:	b2db      	uxtb	r3, r3
}
 8009600:	4618      	mov	r0, r3
 8009602:	370c      	adds	r7, #12
 8009604:	46bd      	mov	sp, r7
 8009606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960a:	4770      	bx	lr

0800960c <LL_USART_ClearFlag_TC>:
  * @rmtoll SR           TC            LL_USART_ClearFlag_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
 800960c:	b480      	push	{r7}
 800960e:	b083      	sub	sp, #12
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800961a:	601a      	str	r2, [r3, #0]
}
 800961c:	bf00      	nop
 800961e:	370c      	adds	r7, #12
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr

08009628 <LL_USART_EnableIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_EnableIT_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TC(USART_TypeDef *USARTx)
{
 8009628:	b480      	push	{r7}
 800962a:	b089      	sub	sp, #36	@ 0x24
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	330c      	adds	r3, #12
 8009634:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	e853 3f00 	ldrex	r3, [r3]
 800963c:	60bb      	str	r3, [r7, #8]
   return(result);
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009644:	61fb      	str	r3, [r7, #28]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	330c      	adds	r3, #12
 800964a:	69fa      	ldr	r2, [r7, #28]
 800964c:	61ba      	str	r2, [r7, #24]
 800964e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009650:	6979      	ldr	r1, [r7, #20]
 8009652:	69ba      	ldr	r2, [r7, #24]
 8009654:	e841 2300 	strex	r3, r2, [r1]
 8009658:	613b      	str	r3, [r7, #16]
   return(result);
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d1e7      	bne.n	8009630 <LL_USART_EnableIT_TC+0x8>
}
 8009660:	bf00      	nop
 8009662:	bf00      	nop
 8009664:	3724      	adds	r7, #36	@ 0x24
 8009666:	46bd      	mov	sp, r7
 8009668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966c:	4770      	bx	lr

0800966e <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 800966e:	b480      	push	{r7}
 8009670:	b089      	sub	sp, #36	@ 0x24
 8009672:	af00      	add	r7, sp, #0
 8009674:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	330c      	adds	r3, #12
 800967a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	e853 3f00 	ldrex	r3, [r3]
 8009682:	60bb      	str	r3, [r7, #8]
   return(result);
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800968a:	61fb      	str	r3, [r7, #28]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	330c      	adds	r3, #12
 8009690:	69fa      	ldr	r2, [r7, #28]
 8009692:	61ba      	str	r2, [r7, #24]
 8009694:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009696:	6979      	ldr	r1, [r7, #20]
 8009698:	69ba      	ldr	r2, [r7, #24]
 800969a:	e841 2300 	strex	r3, r2, [r1]
 800969e:	613b      	str	r3, [r7, #16]
   return(result);
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d1e7      	bne.n	8009676 <LL_USART_EnableIT_TXE+0x8>
}
 80096a6:	bf00      	nop
 80096a8:	bf00      	nop
 80096aa:	3724      	adds	r7, #36	@ 0x24
 80096ac:	46bd      	mov	sp, r7
 80096ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b2:	4770      	bx	lr

080096b4 <LL_USART_DisableIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_DisableIT_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TC(USART_TypeDef *USARTx)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b089      	sub	sp, #36	@ 0x24
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	330c      	adds	r3, #12
 80096c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	e853 3f00 	ldrex	r3, [r3]
 80096c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80096d0:	61fb      	str	r3, [r7, #28]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	330c      	adds	r3, #12
 80096d6:	69fa      	ldr	r2, [r7, #28]
 80096d8:	61ba      	str	r2, [r7, #24]
 80096da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096dc:	6979      	ldr	r1, [r7, #20]
 80096de:	69ba      	ldr	r2, [r7, #24]
 80096e0:	e841 2300 	strex	r3, r2, [r1]
 80096e4:	613b      	str	r3, [r7, #16]
   return(result);
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d1e7      	bne.n	80096bc <LL_USART_DisableIT_TC+0x8>
}
 80096ec:	bf00      	nop
 80096ee:	bf00      	nop
 80096f0:	3724      	adds	r7, #36	@ 0x24
 80096f2:	46bd      	mov	sp, r7
 80096f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f8:	4770      	bx	lr

080096fa <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 80096fa:	b480      	push	{r7}
 80096fc:	b089      	sub	sp, #36	@ 0x24
 80096fe:	af00      	add	r7, sp, #0
 8009700:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	330c      	adds	r3, #12
 8009706:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	e853 3f00 	ldrex	r3, [r3]
 800970e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009716:	61fb      	str	r3, [r7, #28]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	330c      	adds	r3, #12
 800971c:	69fa      	ldr	r2, [r7, #28]
 800971e:	61ba      	str	r2, [r7, #24]
 8009720:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009722:	6979      	ldr	r1, [r7, #20]
 8009724:	69ba      	ldr	r2, [r7, #24]
 8009726:	e841 2300 	strex	r3, r2, [r1]
 800972a:	613b      	str	r3, [r7, #16]
   return(result);
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d1e7      	bne.n	8009702 <LL_USART_DisableIT_TXE+0x8>
}
 8009732:	bf00      	nop
 8009734:	bf00      	nop
 8009736:	3724      	adds	r7, #36	@ 0x24
 8009738:	46bd      	mov	sp, r7
 800973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973e:	4770      	bx	lr

08009740 <LL_USART_IsEnabledIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_IsEnabledIT_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TC(const USART_TypeDef *USARTx)
{
 8009740:	b480      	push	{r7}
 8009742:	b083      	sub	sp, #12
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE));
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	68db      	ldr	r3, [r3, #12]
 800974c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009750:	2b40      	cmp	r3, #64	@ 0x40
 8009752:	bf0c      	ite	eq
 8009754:	2301      	moveq	r3, #1
 8009756:	2300      	movne	r3, #0
 8009758:	b2db      	uxtb	r3, r3
}
 800975a:	4618      	mov	r0, r3
 800975c:	370c      	adds	r7, #12
 800975e:	46bd      	mov	sp, r7
 8009760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009764:	4770      	bx	lr

08009766 <LL_USART_IsEnabledIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_IsEnabledIT_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE(const USART_TypeDef *USARTx)
{
 8009766:	b480      	push	{r7}
 8009768:	b083      	sub	sp, #12
 800976a:	af00      	add	r7, sp, #0
 800976c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE));
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	68db      	ldr	r3, [r3, #12]
 8009772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009776:	2b80      	cmp	r3, #128	@ 0x80
 8009778:	bf0c      	ite	eq
 800977a:	2301      	moveq	r3, #1
 800977c:	2300      	movne	r3, #0
 800977e:	b2db      	uxtb	r3, r3
}
 8009780:	4618      	mov	r0, r3
 8009782:	370c      	adds	r7, #12
 8009784:	46bd      	mov	sp, r7
 8009786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978a:	4770      	bx	lr

0800978c <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800978c:	b480      	push	{r7}
 800978e:	b083      	sub	sp, #12
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
 8009794:	460b      	mov	r3, r1
 8009796:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8009798:	78fa      	ldrb	r2, [r7, #3]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	605a      	str	r2, [r3, #4]
}
 800979e:	bf00      	nop
 80097a0:	370c      	adds	r7, #12
 80097a2:	46bd      	mov	sp, r7
 80097a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a8:	4770      	bx	lr
	...

080097ac <uart_ring_buffer_init>:

/**
 * @brief Initialize ring buffer
 */
void uart_ring_buffer_init(void)
{
 80097ac:	b480      	push	{r7}
 80097ae:	af00      	add	r7, sp, #0
    uart_ring_buffer.head = 0;
 80097b0:	4b09      	ldr	r3, [pc, #36]	@ (80097d8 <uart_ring_buffer_init+0x2c>)
 80097b2:	2200      	movs	r2, #0
 80097b4:	f8a3 2200 	strh.w	r2, [r3, #512]	@ 0x200
    uart_ring_buffer.tail = 0;
 80097b8:	4b07      	ldr	r3, [pc, #28]	@ (80097d8 <uart_ring_buffer_init+0x2c>)
 80097ba:	2200      	movs	r2, #0
 80097bc:	f8a3 2202 	strh.w	r2, [r3, #514]	@ 0x202
    uart_ring_buffer.count = 0;
 80097c0:	4b05      	ldr	r3, [pc, #20]	@ (80097d8 <uart_ring_buffer_init+0x2c>)
 80097c2:	2200      	movs	r2, #0
 80097c4:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204
    uart_tx_busy = 0;
 80097c8:	4b04      	ldr	r3, [pc, #16]	@ (80097dc <uart_ring_buffer_init+0x30>)
 80097ca:	2200      	movs	r2, #0
 80097cc:	701a      	strb	r2, [r3, #0]
}
 80097ce:	bf00      	nop
 80097d0:	46bd      	mov	sp, r7
 80097d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d6:	4770      	bx	lr
 80097d8:	2000dbc0 	.word	0x2000dbc0
 80097dc:	2000ddc6 	.word	0x2000ddc6

080097e0 <uart_ring_buffer_put>:
 * @param data: Pointer to data
 * @param length: Length of data
 * @return Number of bytes actually written
 */
uint8_t uart_ring_buffer_put(uint8_t* data, uint16_t length)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b085      	sub	sp, #20
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	460b      	mov	r3, r1
 80097ea:	807b      	strh	r3, [r7, #2]
    uint16_t written = 0;
 80097ec:	2300      	movs	r3, #0
 80097ee:	81fb      	strh	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 80097f0:	b672      	cpsid	i
}
 80097f2:	bf00      	nop

    // Disable interrupts briefly for atomic operation
    __disable_irq();

    for (uint16_t i = 0; i < length; i++)
 80097f4:	2300      	movs	r3, #0
 80097f6:	81bb      	strh	r3, [r7, #12]
 80097f8:	e02f      	b.n	800985a <uart_ring_buffer_put+0x7a>
    {
        // Check if buffer full
        if (uart_ring_buffer.count >= RING_BUFFER_SIZE)
 80097fa:	4b20      	ldr	r3, [pc, #128]	@ (800987c <uart_ring_buffer_put+0x9c>)
 80097fc:	f8b3 3204 	ldrh.w	r3, [r3, #516]	@ 0x204
 8009800:	b29b      	uxth	r3, r3
 8009802:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009806:	d22d      	bcs.n	8009864 <uart_ring_buffer_put+0x84>
        {
            break; // Buffer full, stop writing
        }

        // Put byte into buffer
        uart_ring_buffer.data[uart_ring_buffer.head] = data[i];
 8009808:	89bb      	ldrh	r3, [r7, #12]
 800980a:	687a      	ldr	r2, [r7, #4]
 800980c:	4413      	add	r3, r2
 800980e:	4a1b      	ldr	r2, [pc, #108]	@ (800987c <uart_ring_buffer_put+0x9c>)
 8009810:	f8b2 2200 	ldrh.w	r2, [r2, #512]	@ 0x200
 8009814:	b292      	uxth	r2, r2
 8009816:	7819      	ldrb	r1, [r3, #0]
 8009818:	4b18      	ldr	r3, [pc, #96]	@ (800987c <uart_ring_buffer_put+0x9c>)
 800981a:	5499      	strb	r1, [r3, r2]
        uart_ring_buffer.head = (uart_ring_buffer.head + 1) % RING_BUFFER_SIZE;
 800981c:	4b17      	ldr	r3, [pc, #92]	@ (800987c <uart_ring_buffer_put+0x9c>)
 800981e:	f8b3 3200 	ldrh.w	r3, [r3, #512]	@ 0x200
 8009822:	b29b      	uxth	r3, r3
 8009824:	3301      	adds	r3, #1
 8009826:	425a      	negs	r2, r3
 8009828:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800982c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009830:	bf58      	it	pl
 8009832:	4253      	negpl	r3, r2
 8009834:	b29a      	uxth	r2, r3
 8009836:	4b11      	ldr	r3, [pc, #68]	@ (800987c <uart_ring_buffer_put+0x9c>)
 8009838:	f8a3 2200 	strh.w	r2, [r3, #512]	@ 0x200
        uart_ring_buffer.count++;
 800983c:	4b0f      	ldr	r3, [pc, #60]	@ (800987c <uart_ring_buffer_put+0x9c>)
 800983e:	f8b3 3204 	ldrh.w	r3, [r3, #516]	@ 0x204
 8009842:	b29b      	uxth	r3, r3
 8009844:	3301      	adds	r3, #1
 8009846:	b29a      	uxth	r2, r3
 8009848:	4b0c      	ldr	r3, [pc, #48]	@ (800987c <uart_ring_buffer_put+0x9c>)
 800984a:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204
        written++;
 800984e:	89fb      	ldrh	r3, [r7, #14]
 8009850:	3301      	adds	r3, #1
 8009852:	81fb      	strh	r3, [r7, #14]
    for (uint16_t i = 0; i < length; i++)
 8009854:	89bb      	ldrh	r3, [r7, #12]
 8009856:	3301      	adds	r3, #1
 8009858:	81bb      	strh	r3, [r7, #12]
 800985a:	89ba      	ldrh	r2, [r7, #12]
 800985c:	887b      	ldrh	r3, [r7, #2]
 800985e:	429a      	cmp	r2, r3
 8009860:	d3cb      	bcc.n	80097fa <uart_ring_buffer_put+0x1a>
 8009862:	e000      	b.n	8009866 <uart_ring_buffer_put+0x86>
            break; // Buffer full, stop writing
 8009864:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8009866:	b662      	cpsie	i
}
 8009868:	bf00      	nop
    }

    __enable_irq();

    return written;
 800986a:	89fb      	ldrh	r3, [r7, #14]
 800986c:	b2db      	uxtb	r3, r3
}
 800986e:	4618      	mov	r0, r3
 8009870:	3714      	adds	r7, #20
 8009872:	46bd      	mov	sp, r7
 8009874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009878:	4770      	bx	lr
 800987a:	bf00      	nop
 800987c:	2000dbc0 	.word	0x2000dbc0

08009880 <uart_ring_buffer_get>:
 * @brief Get one byte from ring buffer
 * @param byte: Pointer to store the byte
 * @return 1 if success, 0 if buffer empty
 */
uint8_t uart_ring_buffer_get(uint8_t* byte)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b082      	sub	sp, #8
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
    if (uart_ring_buffer_is_empty())
 8009888:	f000 f82e 	bl	80098e8 <uart_ring_buffer_is_empty>
 800988c:	4603      	mov	r3, r0
 800988e:	2b00      	cmp	r3, #0
 8009890:	d001      	beq.n	8009896 <uart_ring_buffer_get+0x16>
    {
        return 0;
 8009892:	2300      	movs	r3, #0
 8009894:	e022      	b.n	80098dc <uart_ring_buffer_get+0x5c>
    }

    *byte = uart_ring_buffer.data[uart_ring_buffer.tail];
 8009896:	4b13      	ldr	r3, [pc, #76]	@ (80098e4 <uart_ring_buffer_get+0x64>)
 8009898:	f8b3 3202 	ldrh.w	r3, [r3, #514]	@ 0x202
 800989c:	b29b      	uxth	r3, r3
 800989e:	461a      	mov	r2, r3
 80098a0:	4b10      	ldr	r3, [pc, #64]	@ (80098e4 <uart_ring_buffer_get+0x64>)
 80098a2:	5c9a      	ldrb	r2, [r3, r2]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	701a      	strb	r2, [r3, #0]
    uart_ring_buffer.tail = (uart_ring_buffer.tail + 1) % RING_BUFFER_SIZE;
 80098a8:	4b0e      	ldr	r3, [pc, #56]	@ (80098e4 <uart_ring_buffer_get+0x64>)
 80098aa:	f8b3 3202 	ldrh.w	r3, [r3, #514]	@ 0x202
 80098ae:	b29b      	uxth	r3, r3
 80098b0:	3301      	adds	r3, #1
 80098b2:	425a      	negs	r2, r3
 80098b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80098bc:	bf58      	it	pl
 80098be:	4253      	negpl	r3, r2
 80098c0:	b29a      	uxth	r2, r3
 80098c2:	4b08      	ldr	r3, [pc, #32]	@ (80098e4 <uart_ring_buffer_get+0x64>)
 80098c4:	f8a3 2202 	strh.w	r2, [r3, #514]	@ 0x202
    uart_ring_buffer.count--;
 80098c8:	4b06      	ldr	r3, [pc, #24]	@ (80098e4 <uart_ring_buffer_get+0x64>)
 80098ca:	f8b3 3204 	ldrh.w	r3, [r3, #516]	@ 0x204
 80098ce:	b29b      	uxth	r3, r3
 80098d0:	3b01      	subs	r3, #1
 80098d2:	b29a      	uxth	r2, r3
 80098d4:	4b03      	ldr	r3, [pc, #12]	@ (80098e4 <uart_ring_buffer_get+0x64>)
 80098d6:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204

    return 1;
 80098da:	2301      	movs	r3, #1
}
 80098dc:	4618      	mov	r0, r3
 80098de:	3708      	adds	r7, #8
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}
 80098e4:	2000dbc0 	.word	0x2000dbc0

080098e8 <uart_ring_buffer_is_empty>:

/**
 * @brief Check if ring buffer is empty
 */
uint8_t uart_ring_buffer_is_empty(void)
{
 80098e8:	b480      	push	{r7}
 80098ea:	af00      	add	r7, sp, #0
    return (uart_ring_buffer.count == 0);
 80098ec:	4b06      	ldr	r3, [pc, #24]	@ (8009908 <uart_ring_buffer_is_empty+0x20>)
 80098ee:	f8b3 3204 	ldrh.w	r3, [r3, #516]	@ 0x204
 80098f2:	b29b      	uxth	r3, r3
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	bf0c      	ite	eq
 80098f8:	2301      	moveq	r3, #1
 80098fa:	2300      	movne	r3, #0
 80098fc:	b2db      	uxtb	r3, r3
}
 80098fe:	4618      	mov	r0, r3
 8009900:	46bd      	mov	sp, r7
 8009902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009906:	4770      	bx	lr
 8009908:	2000dbc0 	.word	0x2000dbc0

0800990c <task_debug_logging>:
/**
 * @brief Task for processing debug logging
 * Call this in main loop
 */
void task_debug_logging(void)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	af00      	add	r7, sp, #0
    // If UART not busy and buffer has data, start transmission
    if (!uart_tx_busy && !uart_ring_buffer_is_empty())
 8009910:	4b06      	ldr	r3, [pc, #24]	@ (800992c <task_debug_logging+0x20>)
 8009912:	781b      	ldrb	r3, [r3, #0]
 8009914:	b2db      	uxtb	r3, r3
 8009916:	2b00      	cmp	r3, #0
 8009918:	d106      	bne.n	8009928 <task_debug_logging+0x1c>
 800991a:	f7ff ffe5 	bl	80098e8 <uart_ring_buffer_is_empty>
 800991e:	4603      	mov	r3, r0
 8009920:	2b00      	cmp	r3, #0
 8009922:	d101      	bne.n	8009928 <task_debug_logging+0x1c>
    {
        uart_transmit_IT_start();
 8009924:	f000 f804 	bl	8009930 <uart_transmit_IT_start>
    }
}
 8009928:	bf00      	nop
 800992a:	bd80      	pop	{r7, pc}
 800992c:	2000ddc6 	.word	0x2000ddc6

08009930 <uart_transmit_IT_start>:

/**
 * @brief Start UART transmission
 */
void uart_transmit_IT_start(void)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b082      	sub	sp, #8
 8009934:	af00      	add	r7, sp, #0
    uint8_t first_byte;

    if (uart_ring_buffer_get(&first_byte))
 8009936:	1dfb      	adds	r3, r7, #7
 8009938:	4618      	mov	r0, r3
 800993a:	f7ff ffa1 	bl	8009880 <uart_ring_buffer_get>
 800993e:	4603      	mov	r3, r0
 8009940:	2b00      	cmp	r3, #0
 8009942:	d00d      	beq.n	8009960 <uart_transmit_IT_start+0x30>
    {
        uart_tx_busy = 1;
 8009944:	4b08      	ldr	r3, [pc, #32]	@ (8009968 <uart_transmit_IT_start+0x38>)
 8009946:	2201      	movs	r2, #1
 8009948:	701a      	strb	r2, [r3, #0]
        current_tx_count = 1;
 800994a:	4b08      	ldr	r3, [pc, #32]	@ (800996c <uart_transmit_IT_start+0x3c>)
 800994c:	2201      	movs	r2, #1
 800994e:	801a      	strh	r2, [r3, #0]

        // Enable TXE interrupt and send first byte
        LL_USART_TransmitData8(USART6, first_byte);
 8009950:	79fb      	ldrb	r3, [r7, #7]
 8009952:	4619      	mov	r1, r3
 8009954:	4806      	ldr	r0, [pc, #24]	@ (8009970 <uart_transmit_IT_start+0x40>)
 8009956:	f7ff ff19 	bl	800978c <LL_USART_TransmitData8>
        LL_USART_EnableIT_TXE(USART6);
 800995a:	4805      	ldr	r0, [pc, #20]	@ (8009970 <uart_transmit_IT_start+0x40>)
 800995c:	f7ff fe87 	bl	800966e <LL_USART_EnableIT_TXE>

    }
}
 8009960:	bf00      	nop
 8009962:	3708      	adds	r7, #8
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}
 8009968:	2000ddc6 	.word	0x2000ddc6
 800996c:	2000ddc8 	.word	0x2000ddc8
 8009970:	40011400 	.word	0x40011400

08009974 <uart_IRQ_handler>:
/**
 * @brief UART interrupt handler
 * Call this in UART IRQ handler
 */
void uart_IRQ_handler(void)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b082      	sub	sp, #8
 8009978:	af00      	add	r7, sp, #0
    // TXE interrupt - ready to send next byte
    if (LL_USART_IsActiveFlag_TXE(USART6) && LL_USART_IsEnabledIT_TXE(USART6))
 800997a:	4821      	ldr	r0, [pc, #132]	@ (8009a00 <uart_IRQ_handler+0x8c>)
 800997c:	f7ff fe33 	bl	80095e6 <LL_USART_IsActiveFlag_TXE>
 8009980:	4603      	mov	r3, r0
 8009982:	2b00      	cmp	r3, #0
 8009984:	d01f      	beq.n	80099c6 <uart_IRQ_handler+0x52>
 8009986:	481e      	ldr	r0, [pc, #120]	@ (8009a00 <uart_IRQ_handler+0x8c>)
 8009988:	f7ff feed 	bl	8009766 <LL_USART_IsEnabledIT_TXE>
 800998c:	4603      	mov	r3, r0
 800998e:	2b00      	cmp	r3, #0
 8009990:	d019      	beq.n	80099c6 <uart_IRQ_handler+0x52>
    {
        uint8_t next_byte;

        if (uart_ring_buffer_get(&next_byte))
 8009992:	1dfb      	adds	r3, r7, #7
 8009994:	4618      	mov	r0, r3
 8009996:	f7ff ff73 	bl	8009880 <uart_ring_buffer_get>
 800999a:	4603      	mov	r3, r0
 800999c:	2b00      	cmp	r3, #0
 800999e:	d00c      	beq.n	80099ba <uart_IRQ_handler+0x46>
        {
            // Send next byte
            LL_USART_TransmitData8(USART6, next_byte);
 80099a0:	79fb      	ldrb	r3, [r7, #7]
 80099a2:	4619      	mov	r1, r3
 80099a4:	4816      	ldr	r0, [pc, #88]	@ (8009a00 <uart_IRQ_handler+0x8c>)
 80099a6:	f7ff fef1 	bl	800978c <LL_USART_TransmitData8>
            current_tx_count++;
 80099aa:	4b16      	ldr	r3, [pc, #88]	@ (8009a04 <uart_IRQ_handler+0x90>)
 80099ac:	881b      	ldrh	r3, [r3, #0]
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	3301      	adds	r3, #1
 80099b2:	b29a      	uxth	r2, r3
 80099b4:	4b13      	ldr	r3, [pc, #76]	@ (8009a04 <uart_IRQ_handler+0x90>)
 80099b6:	801a      	strh	r2, [r3, #0]
 80099b8:	e005      	b.n	80099c6 <uart_IRQ_handler+0x52>
        }
        else
        {
            // No more data, wait for transmission complete
            LL_USART_DisableIT_TXE(USART6);
 80099ba:	4811      	ldr	r0, [pc, #68]	@ (8009a00 <uart_IRQ_handler+0x8c>)
 80099bc:	f7ff fe9d 	bl	80096fa <LL_USART_DisableIT_TXE>
            LL_USART_EnableIT_TC(USART6);
 80099c0:	480f      	ldr	r0, [pc, #60]	@ (8009a00 <uart_IRQ_handler+0x8c>)
 80099c2:	f7ff fe31 	bl	8009628 <LL_USART_EnableIT_TC>
        }
    }

    // TC interrupt - transmission complete
    if (LL_USART_IsActiveFlag_TC(USART6) && LL_USART_IsEnabledIT_TC(USART6))
 80099c6:	480e      	ldr	r0, [pc, #56]	@ (8009a00 <uart_IRQ_handler+0x8c>)
 80099c8:	f7ff fdfa 	bl	80095c0 <LL_USART_IsActiveFlag_TC>
 80099cc:	4603      	mov	r3, r0
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d011      	beq.n	80099f6 <uart_IRQ_handler+0x82>
 80099d2:	480b      	ldr	r0, [pc, #44]	@ (8009a00 <uart_IRQ_handler+0x8c>)
 80099d4:	f7ff feb4 	bl	8009740 <LL_USART_IsEnabledIT_TC>
 80099d8:	4603      	mov	r3, r0
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d00b      	beq.n	80099f6 <uart_IRQ_handler+0x82>
    {
        LL_USART_ClearFlag_TC(USART6);
 80099de:	4808      	ldr	r0, [pc, #32]	@ (8009a00 <uart_IRQ_handler+0x8c>)
 80099e0:	f7ff fe14 	bl	800960c <LL_USART_ClearFlag_TC>
        LL_USART_DisableIT_TC(USART6);
 80099e4:	4806      	ldr	r0, [pc, #24]	@ (8009a00 <uart_IRQ_handler+0x8c>)
 80099e6:	f7ff fe65 	bl	80096b4 <LL_USART_DisableIT_TC>

        // Mark as not busy
        uart_tx_busy = 0;
 80099ea:	4b07      	ldr	r3, [pc, #28]	@ (8009a08 <uart_IRQ_handler+0x94>)
 80099ec:	2200      	movs	r2, #0
 80099ee:	701a      	strb	r2, [r3, #0]
        current_tx_count = 0;
 80099f0:	4b04      	ldr	r3, [pc, #16]	@ (8009a04 <uart_IRQ_handler+0x90>)
 80099f2:	2200      	movs	r2, #0
 80099f4:	801a      	strh	r2, [r3, #0]
    }
}
 80099f6:	bf00      	nop
 80099f8:	3708      	adds	r7, #8
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
 80099fe:	bf00      	nop
 8009a00:	40011400 	.word	0x40011400
 8009a04:	2000ddc8 	.word	0x2000ddc8
 8009a08:	2000ddc6 	.word	0x2000ddc6

08009a0c <uart_debug_init>:

/**
 * @brief Initialize debug system
 */
void uart_debug_init(void)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	af00      	add	r7, sp, #0
    uart_ring_buffer_init();
 8009a10:	f7ff fecc 	bl	80097ac <uart_ring_buffer_init>

    // Enable UART interrupt
    NVIC_SetPriority(USART6_IRQn, 0);
 8009a14:	2100      	movs	r1, #0
 8009a16:	2047      	movs	r0, #71	@ 0x47
 8009a18:	f7ff fda8 	bl	800956c <__NVIC_SetPriority>
    NVIC_EnableIRQ(USART6_IRQn);
 8009a1c:	2047      	movs	r0, #71	@ 0x47
 8009a1e:	f7ff fd87 	bl	8009530 <__NVIC_EnableIRQ>
}
 8009a22:	bf00      	nop
 8009a24:	bd80      	pop	{r7, pc}

08009a26 <csp_transaction>:
   @param[in] outlen length of data in \a outbuf (request)
   @param[out] inbuf user provided buffer for receiving data (reply)
   @param[in] inlen length of expected reply, -1 for unknown size (inbuf MUST be large enough), 0 for no reply.
   @return 1 or reply size on success, 0 on failure (error, incoming length does not match, timeout)
*/
static inline int csp_transaction(uint8_t prio, uint16_t dest, uint8_t port, uint32_t timeout, void * outbuf, int outlen, void * inbuf, int inlen) {
 8009a26:	b580      	push	{r7, lr}
 8009a28:	b088      	sub	sp, #32
 8009a2a:	af06      	add	r7, sp, #24
 8009a2c:	603b      	str	r3, [r7, #0]
 8009a2e:	4603      	mov	r3, r0
 8009a30:	71fb      	strb	r3, [r7, #7]
 8009a32:	460b      	mov	r3, r1
 8009a34:	80bb      	strh	r3, [r7, #4]
 8009a36:	4613      	mov	r3, r2
 8009a38:	71bb      	strb	r3, [r7, #6]
	return csp_transaction_w_opts(prio, dest, port, timeout, outbuf, outlen, inbuf, inlen, 0);
 8009a3a:	79ba      	ldrb	r2, [r7, #6]
 8009a3c:	88b9      	ldrh	r1, [r7, #4]
 8009a3e:	79f8      	ldrb	r0, [r7, #7]
 8009a40:	2300      	movs	r3, #0
 8009a42:	9304      	str	r3, [sp, #16]
 8009a44:	69fb      	ldr	r3, [r7, #28]
 8009a46:	9303      	str	r3, [sp, #12]
 8009a48:	69bb      	ldr	r3, [r7, #24]
 8009a4a:	9302      	str	r3, [sp, #8]
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	9301      	str	r3, [sp, #4]
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	9300      	str	r3, [sp, #0]
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	f7f8 fda1 	bl	800259c <csp_transaction_w_opts>
 8009a5a:	4603      	mov	r3, r0
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3708      	adds	r7, #8
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <CSP_Init>:

/* Add interface(s) */
volatile csp_iface_t csp_if_can = {0};

void CSP_Init(void)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b084      	sub	sp, #16
 8009a68:	af02      	add	r7, sp, #8

  /* Initialising CSP */
uart_ring_buffer_put("Initialising CSP 2.0\r\n", 22);
 8009a6a:	2116      	movs	r1, #22
 8009a6c:	4818      	ldr	r0, [pc, #96]	@ (8009ad0 <CSP_Init+0x6c>)
 8009a6e:	f7ff feb7 	bl	80097e0 <uart_ring_buffer_put>



csp_if_can.name = CSP_IF_CAN_DEFAULT_NAME,
 8009a72:	4b18      	ldr	r3, [pc, #96]	@ (8009ad4 <CSP_Init+0x70>)
 8009a74:	4a18      	ldr	r2, [pc, #96]	@ (8009ad8 <CSP_Init+0x74>)
 8009a76:	605a      	str	r2, [r3, #4]
csp_if_can.driver_data = &hcan1,
 8009a78:	4b16      	ldr	r3, [pc, #88]	@ (8009ad4 <CSP_Init+0x70>)
 8009a7a:	4a18      	ldr	r2, [pc, #96]	@ (8009adc <CSP_Init+0x78>)
 8009a7c:	60da      	str	r2, [r3, #12]
csp_if_can.netmask = (uint16_t)csp_id_get_host_bits(), //thiết lập netmask, giống với subnet mask của IP
 8009a7e:	f7f8 faa7 	bl	8001fd0 <csp_id_get_host_bits>
 8009a82:	4603      	mov	r3, r0
 8009a84:	b29a      	uxth	r2, r3
 8009a86:	4b13      	ldr	r3, [pc, #76]	@ (8009ad4 <CSP_Init+0x70>)
 8009a88:	805a      	strh	r2, [r3, #2]
//csp_if_can.nexthop = csp_can2_tx,
csp_if_can.interface_data = &can_interface_data_func;
 8009a8a:	4b12      	ldr	r3, [pc, #72]	@ (8009ad4 <CSP_Init+0x70>)
 8009a8c:	4a14      	ldr	r2, [pc, #80]	@ (8009ae0 <CSP_Init+0x7c>)
 8009a8e:	609a      	str	r2, [r3, #8]
csp_if_can.mtu = 64, ///?????????????????
 8009a90:	4b10      	ldr	r3, [pc, #64]	@ (8009ad4 <CSP_Init+0x70>)
 8009a92:	2240      	movs	r2, #64	@ 0x40
 8009a94:	829a      	strh	r2, [r3, #20]

  csp_init();
 8009a96:	f7f8 fb65 	bl	8002164 <csp_init>

  csp_can_add_interface(&csp_if_can);
 8009a9a:	480e      	ldr	r0, [pc, #56]	@ (8009ad4 <CSP_Init+0x70>)
 8009a9c:	f7f9 ff5a 	bl	8003954 <csp_can_add_interface>

  csp_iface_t *can_iface = &csp_if_can;
 8009aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8009ad4 <CSP_Init+0x70>)
 8009aa2:	607b      	str	r3, [r7, #4]
//  {
//	  csp_log_error("csp_can_stm32_open_and_add_interface() failed, error: %d", error);
//  }
  /* Setting route table */

	  csp_rtable_set(0, 0, can_iface, CSP_NO_VIA_ADDRESS);
 8009aa4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009aa8:	687a      	ldr	r2, [r7, #4]
 8009aaa:	2100      	movs	r1, #0
 8009aac:	2000      	movs	r0, #0
 8009aae:	f7f9 fa85 	bl	8002fbc <csp_rtable_set>
  /* Start router task with 1000 bytes of stack (priority is only supported on FreeRTOS) */
//  if(csp_route_start_task(1000, 1) != CSP_ERR_NONE)
//  {
//	  csp_log_warn("Failed to start router!");
//  }
	  xTaskCreate(vTaskCspRouter, "CSP_Router", 128 * 4, NULL, osPriorityNormal, &hCspRouter);
 8009ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8009ae4 <CSP_Init+0x80>)
 8009ab4:	9301      	str	r3, [sp, #4]
 8009ab6:	2318      	movs	r3, #24
 8009ab8:	9300      	str	r3, [sp, #0]
 8009aba:	2300      	movs	r3, #0
 8009abc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009ac0:	4909      	ldr	r1, [pc, #36]	@ (8009ae8 <CSP_Init+0x84>)
 8009ac2:	480a      	ldr	r0, [pc, #40]	@ (8009aec <CSP_Init+0x88>)
 8009ac4:	f7fd fe8e 	bl	80077e4 <xTaskCreate>
}
 8009ac8:	bf00      	nop
 8009aca:	3708      	adds	r7, #8
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}
 8009ad0:	0800e5d0 	.word	0x0800e5d0
 8009ad4:	2000de2c 	.word	0x2000de2c
 8009ad8:	0800e5e8 	.word	0x0800e5e8
 8009adc:	20000580 	.word	0x20000580
 8009ae0:	20000074 	.word	0x20000074
 8009ae4:	2000de24 	.word	0x2000de24
 8009ae8:	0800e5ec 	.word	0x0800e5ec
 8009aec:	08009af1 	.word	0x08009af1

08009af0 <vTaskCspRouter>:

void vTaskCspRouter(void *pvParameters)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b082      	sub	sp, #8
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
	uart_ring_buffer_put("Router: Router task started\r\n", 29);
 8009af8:	211d      	movs	r1, #29
 8009afa:	4805      	ldr	r0, [pc, #20]	@ (8009b10 <vTaskCspRouter+0x20>)
 8009afc:	f7ff fe70 	bl	80097e0 <uart_ring_buffer_put>
	while (1)
	{
		csp_route_work();
 8009b00:	f7f8 ffcc 	bl	8002a9c <csp_route_work>
		vTaskDelay(10);
 8009b04:	200a      	movs	r0, #10
 8009b06:	f7fd ffcb 	bl	8007aa0 <vTaskDelay>
		csp_route_work();
 8009b0a:	bf00      	nop
 8009b0c:	e7f8      	b.n	8009b00 <vTaskCspRouter+0x10>
 8009b0e:	bf00      	nop
 8009b10:	0800e5f8 	.word	0x0800e5f8

08009b14 <vTaskCspSend>:
	}
}


void vTaskCspSend(void *pvParameters)
{
 8009b14:	b590      	push	{r4, r7, lr}
 8009b16:	b091      	sub	sp, #68	@ 0x44
 8009b18:	af04      	add	r7, sp, #16
 8009b1a:	6078      	str	r0, [r7, #4]

	uart_ring_buffer_put("Client: Client task started\r\n", 33);
 8009b1c:	2121      	movs	r1, #33	@ 0x21
 8009b1e:	481f      	ldr	r0, [pc, #124]	@ (8009b9c <vTaskCspSend+0x88>)
 8009b20:	f7ff fe5e 	bl	80097e0 <uart_ring_buffer_put>
	vTaskDelay(10);
 8009b24:	200a      	movs	r0, #10
 8009b26:	f7fd ffbb 	bl	8007aa0 <vTaskDelay>

	// unsigned int count = 'A';

	for(;;) 
    {
		uart_ring_buffer_put((uint8_t*)"Client: csp_transaction start\r\n", 33);
 8009b2a:	2121      	movs	r1, #33	@ 0x21
 8009b2c:	481c      	ldr	r0, [pc, #112]	@ (8009ba0 <vTaskCspSend+0x8c>)
 8009b2e:	f7ff fe57 	bl	80097e0 <uart_ring_buffer_put>

        // uint8_t tx_data[4] = {1, 2, 3, 4};
        uint8_t tx_data[] = "Tran Hoang Kien";
 8009b32:	4b1c      	ldr	r3, [pc, #112]	@ (8009ba4 <vTaskCspSend+0x90>)
 8009b34:	f107 041c 	add.w	r4, r7, #28
 8009b38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009b3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        uint8_t rx_data[16];
        int len = csp_transaction(CSP_PRIO_NORM, server_address, MY_SERVER_PORT, 1000, tx_data, 18, rx_data, -1);
 8009b3e:	4b1a      	ldr	r3, [pc, #104]	@ (8009ba8 <vTaskCspSend+0x94>)
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	4619      	mov	r1, r3
 8009b44:	f04f 33ff 	mov.w	r3, #4294967295
 8009b48:	9303      	str	r3, [sp, #12]
 8009b4a:	f107 030c 	add.w	r3, r7, #12
 8009b4e:	9302      	str	r3, [sp, #8]
 8009b50:	2312      	movs	r3, #18
 8009b52:	9301      	str	r3, [sp, #4]
 8009b54:	f107 031c 	add.w	r3, r7, #28
 8009b58:	9300      	str	r3, [sp, #0]
 8009b5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009b5e:	220a      	movs	r2, #10
 8009b60:	2002      	movs	r0, #2
 8009b62:	f7ff ff60 	bl	8009a26 <csp_transaction>
 8009b66:	62f8      	str	r0, [r7, #44]	@ 0x2c
        if (len > 0) 
 8009b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	dd0c      	ble.n	8009b88 <vTaskCspSend+0x74>
        {
            sprintf((char *)string_debug, "Client: Received %d bytes!\n", len);
 8009b6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b70:	490e      	ldr	r1, [pc, #56]	@ (8009bac <vTaskCspSend+0x98>)
 8009b72:	480f      	ldr	r0, [pc, #60]	@ (8009bb0 <vTaskCspSend+0x9c>)
 8009b74:	f001 f884 	bl	800ac80 <siprintf>
            uart_ring_buffer_put(string_debug, strlen((char *)string_debug));
 8009b78:	480d      	ldr	r0, [pc, #52]	@ (8009bb0 <vTaskCspSend+0x9c>)
 8009b7a:	f7f6 fb79 	bl	8000270 <strlen>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	4619      	mov	r1, r3
 8009b82:	480b      	ldr	r0, [pc, #44]	@ (8009bb0 <vTaskCspSend+0x9c>)
 8009b84:	f7ff fe2c 	bl	80097e0 <uart_ring_buffer_put>
        }
		uart_ring_buffer_put((uint8_t*)"Client: csp_transaction end\r\n", 31);
 8009b88:	211f      	movs	r1, #31
 8009b8a:	480a      	ldr	r0, [pc, #40]	@ (8009bb4 <vTaskCspSend+0xa0>)
 8009b8c:	f7ff fe28 	bl	80097e0 <uart_ring_buffer_put>
		vTaskDelay(500);
 8009b90:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8009b94:	f7fd ff84 	bl	8007aa0 <vTaskDelay>
    {
 8009b98:	e7c7      	b.n	8009b2a <vTaskCspSend+0x16>
 8009b9a:	bf00      	nop
 8009b9c:	0800e618 	.word	0x0800e618
 8009ba0:	0800e638 	.word	0x0800e638
 8009ba4:	0800e694 	.word	0x0800e694
 8009ba8:	20000070 	.word	0x20000070
 8009bac:	0800e658 	.word	0x0800e658
 8009bb0:	2000ddcc 	.word	0x2000ddcc
 8009bb4:	0800e674 	.word	0x0800e674

08009bb8 <vTaskCspReceive>:
}



void vTaskCspReceive(void *pvParameters)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b0a4      	sub	sp, #144	@ 0x90
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]

	sprintf(string_debug, "server task started\n");
 8009bc0:	493c      	ldr	r1, [pc, #240]	@ (8009cb4 <vTaskCspReceive+0xfc>)
 8009bc2:	483d      	ldr	r0, [pc, #244]	@ (8009cb8 <vTaskCspReceive+0x100>)
 8009bc4:	f001 f85c 	bl	800ac80 <siprintf>
	uart_ring_buffer_put(string_debug, strlen((char *)string_debug));
 8009bc8:	483b      	ldr	r0, [pc, #236]	@ (8009cb8 <vTaskCspReceive+0x100>)
 8009bca:	f7f6 fb51 	bl	8000270 <strlen>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	4619      	mov	r1, r3
 8009bd2:	4839      	ldr	r0, [pc, #228]	@ (8009cb8 <vTaskCspReceive+0x100>)
 8009bd4:	f7ff fe04 	bl	80097e0 <uart_ring_buffer_put>

	/* Create socket with no specific socket options, e.g. accepts CRC32, HMAC, etc. if enabled during compilation */
	csp_socket_t sock = {0};
 8009bd8:	f107 0308 	add.w	r3, r7, #8
 8009bdc:	2280      	movs	r2, #128	@ 0x80
 8009bde:	2100      	movs	r1, #0
 8009be0:	4618      	mov	r0, r3
 8009be2:	f001 f8c2 	bl	800ad6a <memset>
    
	/* Bind socket to all ports, e.g. all incoming connections will be handled here */
	csp_bind(&sock, CSP_ANY);
 8009be6:	f107 0308 	add.w	r3, r7, #8
 8009bea:	21ff      	movs	r1, #255	@ 0xff
 8009bec:	4618      	mov	r0, r3
 8009bee:	f7f8 fdff 	bl	80027f0 <csp_bind>

	/* Create a backlog of 10 connections, i.e. up to 10 new connections can be queued */
	csp_listen(&sock, 10);
 8009bf2:	f107 0308 	add.w	r3, r7, #8
 8009bf6:	210a      	movs	r1, #10
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f7f8 fde3 	bl	80027c4 <csp_listen>
	for(;;) 
	{

		/* Wait for a new connection, 10000 mS timeout */
		csp_conn_t *conn;
		sprintf(string_debug, "Server: Wait for a new connection\n");
 8009bfe:	492f      	ldr	r1, [pc, #188]	@ (8009cbc <vTaskCspReceive+0x104>)
 8009c00:	482d      	ldr	r0, [pc, #180]	@ (8009cb8 <vTaskCspReceive+0x100>)
 8009c02:	f001 f83d 	bl	800ac80 <siprintf>
		uart_ring_buffer_put(string_debug, strlen((char *)string_debug));
 8009c06:	482c      	ldr	r0, [pc, #176]	@ (8009cb8 <vTaskCspReceive+0x100>)
 8009c08:	f7f6 fb32 	bl	8000270 <strlen>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	4619      	mov	r1, r3
 8009c10:	4829      	ldr	r0, [pc, #164]	@ (8009cb8 <vTaskCspReceive+0x100>)
 8009c12:	f7ff fde5 	bl	80097e0 <uart_ring_buffer_put>
		if ((conn = csp_accept(&sock, 10000)) == NULL) 
 8009c16:	f107 0308 	add.w	r3, r7, #8
 8009c1a:	f242 7110 	movw	r1, #10000	@ 0x2710
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f7f8 faaa 	bl	8002178 <csp_accept>
 8009c24:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 8009c28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d03e      	beq.n	8009cae <vTaskCspReceive+0xf6>
			continue;
		}

		/* Read packets on connection, timout is 100 mS */
		csp_packet_t *packet;
		while ((packet = csp_read(conn, 50)) != NULL) 
 8009c30:	e029      	b.n	8009c86 <vTaskCspReceive+0xce>
		{
			switch (csp_conn_dport(conn)) {
 8009c32:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8009c36:	f7f7 fe85 	bl	8001944 <csp_conn_dport>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	2b0a      	cmp	r3, #10
 8009c3e:	d11d      	bne.n	8009c7c <vTaskCspReceive+0xc4>
			case MY_SERVER_PORT:
				/* Process packet here */
				sprintf(string_debug, "Server: Packet received on MY_SERVER_PORT: %s\n", (const char *) packet->data);
 8009c40:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009c44:	332c      	adds	r3, #44	@ 0x2c
 8009c46:	461a      	mov	r2, r3
 8009c48:	491d      	ldr	r1, [pc, #116]	@ (8009cc0 <vTaskCspReceive+0x108>)
 8009c4a:	481b      	ldr	r0, [pc, #108]	@ (8009cb8 <vTaskCspReceive+0x100>)
 8009c4c:	f001 f818 	bl	800ac80 <siprintf>
				uart_ring_buffer_put(string_debug, strlen((char *)string_debug));
 8009c50:	4819      	ldr	r0, [pc, #100]	@ (8009cb8 <vTaskCspReceive+0x100>)
 8009c52:	f7f6 fb0d 	bl	8000270 <strlen>
 8009c56:	4603      	mov	r3, r0
 8009c58:	4619      	mov	r1, r3
 8009c5a:	4817      	ldr	r0, [pc, #92]	@ (8009cb8 <vTaskCspReceive+0x100>)
 8009c5c:	f7ff fdc0 	bl	80097e0 <uart_ring_buffer_put>
				csp_buffer_free(packet);
 8009c60:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8009c64:	f7f7 fb9a 	bl	800139c <csp_buffer_free>
				++server_received;
 8009c68:	4b16      	ldr	r3, [pc, #88]	@ (8009cc4 <vTaskCspReceive+0x10c>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	3301      	adds	r3, #1
 8009c6e:	4a15      	ldr	r2, [pc, #84]	@ (8009cc4 <vTaskCspReceive+0x10c>)
 8009c70:	6013      	str	r3, [r2, #0]
				vTaskDelay(500);
 8009c72:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8009c76:	f7fd ff13 	bl	8007aa0 <vTaskDelay>
				break;
 8009c7a:	e004      	b.n	8009c86 <vTaskCspReceive+0xce>

			default:
				/* Call the default CSP service handler, handle pings, buffer use, etc. */
				csp_service_handler(packet);
 8009c7c:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8009c80:	f7f9 fbe2 	bl	8003448 <csp_service_handler>
				break;
 8009c84:	bf00      	nop
		while ((packet = csp_read(conn, 50)) != NULL) 
 8009c86:	2132      	movs	r1, #50	@ 0x32
 8009c88:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8009c8c:	f7f8 fa9a 	bl	80021c4 <csp_read>
 8009c90:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
 8009c94:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d1ca      	bne.n	8009c32 <vTaskCspReceive+0x7a>
			}
		}

		/* Close current connection */
		csp_close(conn);
 8009c9c:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8009ca0:	f7f7 fd70 	bl	8001784 <csp_close>
		vTaskDelay(500);
 8009ca4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8009ca8:	f7fd fefa 	bl	8007aa0 <vTaskDelay>
 8009cac:	e7a7      	b.n	8009bfe <vTaskCspReceive+0x46>
			continue;
 8009cae:	bf00      	nop
	{
 8009cb0:	e7a5      	b.n	8009bfe <vTaskCspReceive+0x46>
 8009cb2:	bf00      	nop
 8009cb4:	0800e6a4 	.word	0x0800e6a4
 8009cb8:	2000ddcc 	.word	0x2000ddcc
 8009cbc:	0800e6bc 	.word	0x0800e6bc
 8009cc0:	0800e6e0 	.word	0x0800e6e0
 8009cc4:	2000de28 	.word	0x2000de28

08009cc8 <malloc>:
 8009cc8:	4b02      	ldr	r3, [pc, #8]	@ (8009cd4 <malloc+0xc>)
 8009cca:	4601      	mov	r1, r0
 8009ccc:	6818      	ldr	r0, [r3, #0]
 8009cce:	f000 b825 	b.w	8009d1c <_malloc_r>
 8009cd2:	bf00      	nop
 8009cd4:	20000088 	.word	0x20000088

08009cd8 <sbrk_aligned>:
 8009cd8:	b570      	push	{r4, r5, r6, lr}
 8009cda:	4e0f      	ldr	r6, [pc, #60]	@ (8009d18 <sbrk_aligned+0x40>)
 8009cdc:	460c      	mov	r4, r1
 8009cde:	6831      	ldr	r1, [r6, #0]
 8009ce0:	4605      	mov	r5, r0
 8009ce2:	b911      	cbnz	r1, 8009cea <sbrk_aligned+0x12>
 8009ce4:	f001 f904 	bl	800aef0 <_sbrk_r>
 8009ce8:	6030      	str	r0, [r6, #0]
 8009cea:	4621      	mov	r1, r4
 8009cec:	4628      	mov	r0, r5
 8009cee:	f001 f8ff 	bl	800aef0 <_sbrk_r>
 8009cf2:	1c43      	adds	r3, r0, #1
 8009cf4:	d103      	bne.n	8009cfe <sbrk_aligned+0x26>
 8009cf6:	f04f 34ff 	mov.w	r4, #4294967295
 8009cfa:	4620      	mov	r0, r4
 8009cfc:	bd70      	pop	{r4, r5, r6, pc}
 8009cfe:	1cc4      	adds	r4, r0, #3
 8009d00:	f024 0403 	bic.w	r4, r4, #3
 8009d04:	42a0      	cmp	r0, r4
 8009d06:	d0f8      	beq.n	8009cfa <sbrk_aligned+0x22>
 8009d08:	1a21      	subs	r1, r4, r0
 8009d0a:	4628      	mov	r0, r5
 8009d0c:	f001 f8f0 	bl	800aef0 <_sbrk_r>
 8009d10:	3001      	adds	r0, #1
 8009d12:	d1f2      	bne.n	8009cfa <sbrk_aligned+0x22>
 8009d14:	e7ef      	b.n	8009cf6 <sbrk_aligned+0x1e>
 8009d16:	bf00      	nop
 8009d18:	2000de70 	.word	0x2000de70

08009d1c <_malloc_r>:
 8009d1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d20:	1ccd      	adds	r5, r1, #3
 8009d22:	f025 0503 	bic.w	r5, r5, #3
 8009d26:	3508      	adds	r5, #8
 8009d28:	2d0c      	cmp	r5, #12
 8009d2a:	bf38      	it	cc
 8009d2c:	250c      	movcc	r5, #12
 8009d2e:	2d00      	cmp	r5, #0
 8009d30:	4606      	mov	r6, r0
 8009d32:	db01      	blt.n	8009d38 <_malloc_r+0x1c>
 8009d34:	42a9      	cmp	r1, r5
 8009d36:	d904      	bls.n	8009d42 <_malloc_r+0x26>
 8009d38:	230c      	movs	r3, #12
 8009d3a:	6033      	str	r3, [r6, #0]
 8009d3c:	2000      	movs	r0, #0
 8009d3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009e18 <_malloc_r+0xfc>
 8009d46:	f000 f869 	bl	8009e1c <__malloc_lock>
 8009d4a:	f8d8 3000 	ldr.w	r3, [r8]
 8009d4e:	461c      	mov	r4, r3
 8009d50:	bb44      	cbnz	r4, 8009da4 <_malloc_r+0x88>
 8009d52:	4629      	mov	r1, r5
 8009d54:	4630      	mov	r0, r6
 8009d56:	f7ff ffbf 	bl	8009cd8 <sbrk_aligned>
 8009d5a:	1c43      	adds	r3, r0, #1
 8009d5c:	4604      	mov	r4, r0
 8009d5e:	d158      	bne.n	8009e12 <_malloc_r+0xf6>
 8009d60:	f8d8 4000 	ldr.w	r4, [r8]
 8009d64:	4627      	mov	r7, r4
 8009d66:	2f00      	cmp	r7, #0
 8009d68:	d143      	bne.n	8009df2 <_malloc_r+0xd6>
 8009d6a:	2c00      	cmp	r4, #0
 8009d6c:	d04b      	beq.n	8009e06 <_malloc_r+0xea>
 8009d6e:	6823      	ldr	r3, [r4, #0]
 8009d70:	4639      	mov	r1, r7
 8009d72:	4630      	mov	r0, r6
 8009d74:	eb04 0903 	add.w	r9, r4, r3
 8009d78:	f001 f8ba 	bl	800aef0 <_sbrk_r>
 8009d7c:	4581      	cmp	r9, r0
 8009d7e:	d142      	bne.n	8009e06 <_malloc_r+0xea>
 8009d80:	6821      	ldr	r1, [r4, #0]
 8009d82:	1a6d      	subs	r5, r5, r1
 8009d84:	4629      	mov	r1, r5
 8009d86:	4630      	mov	r0, r6
 8009d88:	f7ff ffa6 	bl	8009cd8 <sbrk_aligned>
 8009d8c:	3001      	adds	r0, #1
 8009d8e:	d03a      	beq.n	8009e06 <_malloc_r+0xea>
 8009d90:	6823      	ldr	r3, [r4, #0]
 8009d92:	442b      	add	r3, r5
 8009d94:	6023      	str	r3, [r4, #0]
 8009d96:	f8d8 3000 	ldr.w	r3, [r8]
 8009d9a:	685a      	ldr	r2, [r3, #4]
 8009d9c:	bb62      	cbnz	r2, 8009df8 <_malloc_r+0xdc>
 8009d9e:	f8c8 7000 	str.w	r7, [r8]
 8009da2:	e00f      	b.n	8009dc4 <_malloc_r+0xa8>
 8009da4:	6822      	ldr	r2, [r4, #0]
 8009da6:	1b52      	subs	r2, r2, r5
 8009da8:	d420      	bmi.n	8009dec <_malloc_r+0xd0>
 8009daa:	2a0b      	cmp	r2, #11
 8009dac:	d917      	bls.n	8009dde <_malloc_r+0xc2>
 8009dae:	1961      	adds	r1, r4, r5
 8009db0:	42a3      	cmp	r3, r4
 8009db2:	6025      	str	r5, [r4, #0]
 8009db4:	bf18      	it	ne
 8009db6:	6059      	strne	r1, [r3, #4]
 8009db8:	6863      	ldr	r3, [r4, #4]
 8009dba:	bf08      	it	eq
 8009dbc:	f8c8 1000 	streq.w	r1, [r8]
 8009dc0:	5162      	str	r2, [r4, r5]
 8009dc2:	604b      	str	r3, [r1, #4]
 8009dc4:	4630      	mov	r0, r6
 8009dc6:	f000 f82f 	bl	8009e28 <__malloc_unlock>
 8009dca:	f104 000b 	add.w	r0, r4, #11
 8009dce:	1d23      	adds	r3, r4, #4
 8009dd0:	f020 0007 	bic.w	r0, r0, #7
 8009dd4:	1ac2      	subs	r2, r0, r3
 8009dd6:	bf1c      	itt	ne
 8009dd8:	1a1b      	subne	r3, r3, r0
 8009dda:	50a3      	strne	r3, [r4, r2]
 8009ddc:	e7af      	b.n	8009d3e <_malloc_r+0x22>
 8009dde:	6862      	ldr	r2, [r4, #4]
 8009de0:	42a3      	cmp	r3, r4
 8009de2:	bf0c      	ite	eq
 8009de4:	f8c8 2000 	streq.w	r2, [r8]
 8009de8:	605a      	strne	r2, [r3, #4]
 8009dea:	e7eb      	b.n	8009dc4 <_malloc_r+0xa8>
 8009dec:	4623      	mov	r3, r4
 8009dee:	6864      	ldr	r4, [r4, #4]
 8009df0:	e7ae      	b.n	8009d50 <_malloc_r+0x34>
 8009df2:	463c      	mov	r4, r7
 8009df4:	687f      	ldr	r7, [r7, #4]
 8009df6:	e7b6      	b.n	8009d66 <_malloc_r+0x4a>
 8009df8:	461a      	mov	r2, r3
 8009dfa:	685b      	ldr	r3, [r3, #4]
 8009dfc:	42a3      	cmp	r3, r4
 8009dfe:	d1fb      	bne.n	8009df8 <_malloc_r+0xdc>
 8009e00:	2300      	movs	r3, #0
 8009e02:	6053      	str	r3, [r2, #4]
 8009e04:	e7de      	b.n	8009dc4 <_malloc_r+0xa8>
 8009e06:	230c      	movs	r3, #12
 8009e08:	6033      	str	r3, [r6, #0]
 8009e0a:	4630      	mov	r0, r6
 8009e0c:	f000 f80c 	bl	8009e28 <__malloc_unlock>
 8009e10:	e794      	b.n	8009d3c <_malloc_r+0x20>
 8009e12:	6005      	str	r5, [r0, #0]
 8009e14:	e7d6      	b.n	8009dc4 <_malloc_r+0xa8>
 8009e16:	bf00      	nop
 8009e18:	2000de74 	.word	0x2000de74

08009e1c <__malloc_lock>:
 8009e1c:	4801      	ldr	r0, [pc, #4]	@ (8009e24 <__malloc_lock+0x8>)
 8009e1e:	f001 b8b4 	b.w	800af8a <__retarget_lock_acquire_recursive>
 8009e22:	bf00      	nop
 8009e24:	2000dfb8 	.word	0x2000dfb8

08009e28 <__malloc_unlock>:
 8009e28:	4801      	ldr	r0, [pc, #4]	@ (8009e30 <__malloc_unlock+0x8>)
 8009e2a:	f001 b8af 	b.w	800af8c <__retarget_lock_release_recursive>
 8009e2e:	bf00      	nop
 8009e30:	2000dfb8 	.word	0x2000dfb8

08009e34 <__cvt>:
 8009e34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e38:	ec57 6b10 	vmov	r6, r7, d0
 8009e3c:	2f00      	cmp	r7, #0
 8009e3e:	460c      	mov	r4, r1
 8009e40:	4619      	mov	r1, r3
 8009e42:	463b      	mov	r3, r7
 8009e44:	bfbb      	ittet	lt
 8009e46:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009e4a:	461f      	movlt	r7, r3
 8009e4c:	2300      	movge	r3, #0
 8009e4e:	232d      	movlt	r3, #45	@ 0x2d
 8009e50:	700b      	strb	r3, [r1, #0]
 8009e52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009e54:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009e58:	4691      	mov	r9, r2
 8009e5a:	f023 0820 	bic.w	r8, r3, #32
 8009e5e:	bfbc      	itt	lt
 8009e60:	4632      	movlt	r2, r6
 8009e62:	4616      	movlt	r6, r2
 8009e64:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009e68:	d005      	beq.n	8009e76 <__cvt+0x42>
 8009e6a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009e6e:	d100      	bne.n	8009e72 <__cvt+0x3e>
 8009e70:	3401      	adds	r4, #1
 8009e72:	2102      	movs	r1, #2
 8009e74:	e000      	b.n	8009e78 <__cvt+0x44>
 8009e76:	2103      	movs	r1, #3
 8009e78:	ab03      	add	r3, sp, #12
 8009e7a:	9301      	str	r3, [sp, #4]
 8009e7c:	ab02      	add	r3, sp, #8
 8009e7e:	9300      	str	r3, [sp, #0]
 8009e80:	ec47 6b10 	vmov	d0, r6, r7
 8009e84:	4653      	mov	r3, sl
 8009e86:	4622      	mov	r2, r4
 8009e88:	f001 f91e 	bl	800b0c8 <_dtoa_r>
 8009e8c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009e90:	4605      	mov	r5, r0
 8009e92:	d119      	bne.n	8009ec8 <__cvt+0x94>
 8009e94:	f019 0f01 	tst.w	r9, #1
 8009e98:	d00e      	beq.n	8009eb8 <__cvt+0x84>
 8009e9a:	eb00 0904 	add.w	r9, r0, r4
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	4630      	mov	r0, r6
 8009ea4:	4639      	mov	r1, r7
 8009ea6:	f7f6 fe0f 	bl	8000ac8 <__aeabi_dcmpeq>
 8009eaa:	b108      	cbz	r0, 8009eb0 <__cvt+0x7c>
 8009eac:	f8cd 900c 	str.w	r9, [sp, #12]
 8009eb0:	2230      	movs	r2, #48	@ 0x30
 8009eb2:	9b03      	ldr	r3, [sp, #12]
 8009eb4:	454b      	cmp	r3, r9
 8009eb6:	d31e      	bcc.n	8009ef6 <__cvt+0xc2>
 8009eb8:	9b03      	ldr	r3, [sp, #12]
 8009eba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ebc:	1b5b      	subs	r3, r3, r5
 8009ebe:	4628      	mov	r0, r5
 8009ec0:	6013      	str	r3, [r2, #0]
 8009ec2:	b004      	add	sp, #16
 8009ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ec8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009ecc:	eb00 0904 	add.w	r9, r0, r4
 8009ed0:	d1e5      	bne.n	8009e9e <__cvt+0x6a>
 8009ed2:	7803      	ldrb	r3, [r0, #0]
 8009ed4:	2b30      	cmp	r3, #48	@ 0x30
 8009ed6:	d10a      	bne.n	8009eee <__cvt+0xba>
 8009ed8:	2200      	movs	r2, #0
 8009eda:	2300      	movs	r3, #0
 8009edc:	4630      	mov	r0, r6
 8009ede:	4639      	mov	r1, r7
 8009ee0:	f7f6 fdf2 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ee4:	b918      	cbnz	r0, 8009eee <__cvt+0xba>
 8009ee6:	f1c4 0401 	rsb	r4, r4, #1
 8009eea:	f8ca 4000 	str.w	r4, [sl]
 8009eee:	f8da 3000 	ldr.w	r3, [sl]
 8009ef2:	4499      	add	r9, r3
 8009ef4:	e7d3      	b.n	8009e9e <__cvt+0x6a>
 8009ef6:	1c59      	adds	r1, r3, #1
 8009ef8:	9103      	str	r1, [sp, #12]
 8009efa:	701a      	strb	r2, [r3, #0]
 8009efc:	e7d9      	b.n	8009eb2 <__cvt+0x7e>

08009efe <__exponent>:
 8009efe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f00:	2900      	cmp	r1, #0
 8009f02:	bfba      	itte	lt
 8009f04:	4249      	neglt	r1, r1
 8009f06:	232d      	movlt	r3, #45	@ 0x2d
 8009f08:	232b      	movge	r3, #43	@ 0x2b
 8009f0a:	2909      	cmp	r1, #9
 8009f0c:	7002      	strb	r2, [r0, #0]
 8009f0e:	7043      	strb	r3, [r0, #1]
 8009f10:	dd29      	ble.n	8009f66 <__exponent+0x68>
 8009f12:	f10d 0307 	add.w	r3, sp, #7
 8009f16:	461d      	mov	r5, r3
 8009f18:	270a      	movs	r7, #10
 8009f1a:	461a      	mov	r2, r3
 8009f1c:	fbb1 f6f7 	udiv	r6, r1, r7
 8009f20:	fb07 1416 	mls	r4, r7, r6, r1
 8009f24:	3430      	adds	r4, #48	@ 0x30
 8009f26:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009f2a:	460c      	mov	r4, r1
 8009f2c:	2c63      	cmp	r4, #99	@ 0x63
 8009f2e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009f32:	4631      	mov	r1, r6
 8009f34:	dcf1      	bgt.n	8009f1a <__exponent+0x1c>
 8009f36:	3130      	adds	r1, #48	@ 0x30
 8009f38:	1e94      	subs	r4, r2, #2
 8009f3a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009f3e:	1c41      	adds	r1, r0, #1
 8009f40:	4623      	mov	r3, r4
 8009f42:	42ab      	cmp	r3, r5
 8009f44:	d30a      	bcc.n	8009f5c <__exponent+0x5e>
 8009f46:	f10d 0309 	add.w	r3, sp, #9
 8009f4a:	1a9b      	subs	r3, r3, r2
 8009f4c:	42ac      	cmp	r4, r5
 8009f4e:	bf88      	it	hi
 8009f50:	2300      	movhi	r3, #0
 8009f52:	3302      	adds	r3, #2
 8009f54:	4403      	add	r3, r0
 8009f56:	1a18      	subs	r0, r3, r0
 8009f58:	b003      	add	sp, #12
 8009f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f5c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009f60:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009f64:	e7ed      	b.n	8009f42 <__exponent+0x44>
 8009f66:	2330      	movs	r3, #48	@ 0x30
 8009f68:	3130      	adds	r1, #48	@ 0x30
 8009f6a:	7083      	strb	r3, [r0, #2]
 8009f6c:	70c1      	strb	r1, [r0, #3]
 8009f6e:	1d03      	adds	r3, r0, #4
 8009f70:	e7f1      	b.n	8009f56 <__exponent+0x58>
	...

08009f74 <_printf_float>:
 8009f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f78:	b08d      	sub	sp, #52	@ 0x34
 8009f7a:	460c      	mov	r4, r1
 8009f7c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009f80:	4616      	mov	r6, r2
 8009f82:	461f      	mov	r7, r3
 8009f84:	4605      	mov	r5, r0
 8009f86:	f000 ff1d 	bl	800adc4 <_localeconv_r>
 8009f8a:	6803      	ldr	r3, [r0, #0]
 8009f8c:	9304      	str	r3, [sp, #16]
 8009f8e:	4618      	mov	r0, r3
 8009f90:	f7f6 f96e 	bl	8000270 <strlen>
 8009f94:	2300      	movs	r3, #0
 8009f96:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f98:	f8d8 3000 	ldr.w	r3, [r8]
 8009f9c:	9005      	str	r0, [sp, #20]
 8009f9e:	3307      	adds	r3, #7
 8009fa0:	f023 0307 	bic.w	r3, r3, #7
 8009fa4:	f103 0208 	add.w	r2, r3, #8
 8009fa8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009fac:	f8d4 b000 	ldr.w	fp, [r4]
 8009fb0:	f8c8 2000 	str.w	r2, [r8]
 8009fb4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009fb8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009fbc:	9307      	str	r3, [sp, #28]
 8009fbe:	f8cd 8018 	str.w	r8, [sp, #24]
 8009fc2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009fc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009fca:	4b9c      	ldr	r3, [pc, #624]	@ (800a23c <_printf_float+0x2c8>)
 8009fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8009fd0:	f7f6 fdac 	bl	8000b2c <__aeabi_dcmpun>
 8009fd4:	bb70      	cbnz	r0, 800a034 <_printf_float+0xc0>
 8009fd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009fda:	4b98      	ldr	r3, [pc, #608]	@ (800a23c <_printf_float+0x2c8>)
 8009fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8009fe0:	f7f6 fd86 	bl	8000af0 <__aeabi_dcmple>
 8009fe4:	bb30      	cbnz	r0, 800a034 <_printf_float+0xc0>
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	2300      	movs	r3, #0
 8009fea:	4640      	mov	r0, r8
 8009fec:	4649      	mov	r1, r9
 8009fee:	f7f6 fd75 	bl	8000adc <__aeabi_dcmplt>
 8009ff2:	b110      	cbz	r0, 8009ffa <_printf_float+0x86>
 8009ff4:	232d      	movs	r3, #45	@ 0x2d
 8009ff6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ffa:	4a91      	ldr	r2, [pc, #580]	@ (800a240 <_printf_float+0x2cc>)
 8009ffc:	4b91      	ldr	r3, [pc, #580]	@ (800a244 <_printf_float+0x2d0>)
 8009ffe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a002:	bf8c      	ite	hi
 800a004:	4690      	movhi	r8, r2
 800a006:	4698      	movls	r8, r3
 800a008:	2303      	movs	r3, #3
 800a00a:	6123      	str	r3, [r4, #16]
 800a00c:	f02b 0304 	bic.w	r3, fp, #4
 800a010:	6023      	str	r3, [r4, #0]
 800a012:	f04f 0900 	mov.w	r9, #0
 800a016:	9700      	str	r7, [sp, #0]
 800a018:	4633      	mov	r3, r6
 800a01a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a01c:	4621      	mov	r1, r4
 800a01e:	4628      	mov	r0, r5
 800a020:	f000 f9d2 	bl	800a3c8 <_printf_common>
 800a024:	3001      	adds	r0, #1
 800a026:	f040 808d 	bne.w	800a144 <_printf_float+0x1d0>
 800a02a:	f04f 30ff 	mov.w	r0, #4294967295
 800a02e:	b00d      	add	sp, #52	@ 0x34
 800a030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a034:	4642      	mov	r2, r8
 800a036:	464b      	mov	r3, r9
 800a038:	4640      	mov	r0, r8
 800a03a:	4649      	mov	r1, r9
 800a03c:	f7f6 fd76 	bl	8000b2c <__aeabi_dcmpun>
 800a040:	b140      	cbz	r0, 800a054 <_printf_float+0xe0>
 800a042:	464b      	mov	r3, r9
 800a044:	2b00      	cmp	r3, #0
 800a046:	bfbc      	itt	lt
 800a048:	232d      	movlt	r3, #45	@ 0x2d
 800a04a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a04e:	4a7e      	ldr	r2, [pc, #504]	@ (800a248 <_printf_float+0x2d4>)
 800a050:	4b7e      	ldr	r3, [pc, #504]	@ (800a24c <_printf_float+0x2d8>)
 800a052:	e7d4      	b.n	8009ffe <_printf_float+0x8a>
 800a054:	6863      	ldr	r3, [r4, #4]
 800a056:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a05a:	9206      	str	r2, [sp, #24]
 800a05c:	1c5a      	adds	r2, r3, #1
 800a05e:	d13b      	bne.n	800a0d8 <_printf_float+0x164>
 800a060:	2306      	movs	r3, #6
 800a062:	6063      	str	r3, [r4, #4]
 800a064:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a068:	2300      	movs	r3, #0
 800a06a:	6022      	str	r2, [r4, #0]
 800a06c:	9303      	str	r3, [sp, #12]
 800a06e:	ab0a      	add	r3, sp, #40	@ 0x28
 800a070:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a074:	ab09      	add	r3, sp, #36	@ 0x24
 800a076:	9300      	str	r3, [sp, #0]
 800a078:	6861      	ldr	r1, [r4, #4]
 800a07a:	ec49 8b10 	vmov	d0, r8, r9
 800a07e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a082:	4628      	mov	r0, r5
 800a084:	f7ff fed6 	bl	8009e34 <__cvt>
 800a088:	9b06      	ldr	r3, [sp, #24]
 800a08a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a08c:	2b47      	cmp	r3, #71	@ 0x47
 800a08e:	4680      	mov	r8, r0
 800a090:	d129      	bne.n	800a0e6 <_printf_float+0x172>
 800a092:	1cc8      	adds	r0, r1, #3
 800a094:	db02      	blt.n	800a09c <_printf_float+0x128>
 800a096:	6863      	ldr	r3, [r4, #4]
 800a098:	4299      	cmp	r1, r3
 800a09a:	dd41      	ble.n	800a120 <_printf_float+0x1ac>
 800a09c:	f1aa 0a02 	sub.w	sl, sl, #2
 800a0a0:	fa5f fa8a 	uxtb.w	sl, sl
 800a0a4:	3901      	subs	r1, #1
 800a0a6:	4652      	mov	r2, sl
 800a0a8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a0ac:	9109      	str	r1, [sp, #36]	@ 0x24
 800a0ae:	f7ff ff26 	bl	8009efe <__exponent>
 800a0b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a0b4:	1813      	adds	r3, r2, r0
 800a0b6:	2a01      	cmp	r2, #1
 800a0b8:	4681      	mov	r9, r0
 800a0ba:	6123      	str	r3, [r4, #16]
 800a0bc:	dc02      	bgt.n	800a0c4 <_printf_float+0x150>
 800a0be:	6822      	ldr	r2, [r4, #0]
 800a0c0:	07d2      	lsls	r2, r2, #31
 800a0c2:	d501      	bpl.n	800a0c8 <_printf_float+0x154>
 800a0c4:	3301      	adds	r3, #1
 800a0c6:	6123      	str	r3, [r4, #16]
 800a0c8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d0a2      	beq.n	800a016 <_printf_float+0xa2>
 800a0d0:	232d      	movs	r3, #45	@ 0x2d
 800a0d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a0d6:	e79e      	b.n	800a016 <_printf_float+0xa2>
 800a0d8:	9a06      	ldr	r2, [sp, #24]
 800a0da:	2a47      	cmp	r2, #71	@ 0x47
 800a0dc:	d1c2      	bne.n	800a064 <_printf_float+0xf0>
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d1c0      	bne.n	800a064 <_printf_float+0xf0>
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	e7bd      	b.n	800a062 <_printf_float+0xee>
 800a0e6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a0ea:	d9db      	bls.n	800a0a4 <_printf_float+0x130>
 800a0ec:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a0f0:	d118      	bne.n	800a124 <_printf_float+0x1b0>
 800a0f2:	2900      	cmp	r1, #0
 800a0f4:	6863      	ldr	r3, [r4, #4]
 800a0f6:	dd0b      	ble.n	800a110 <_printf_float+0x19c>
 800a0f8:	6121      	str	r1, [r4, #16]
 800a0fa:	b913      	cbnz	r3, 800a102 <_printf_float+0x18e>
 800a0fc:	6822      	ldr	r2, [r4, #0]
 800a0fe:	07d0      	lsls	r0, r2, #31
 800a100:	d502      	bpl.n	800a108 <_printf_float+0x194>
 800a102:	3301      	adds	r3, #1
 800a104:	440b      	add	r3, r1
 800a106:	6123      	str	r3, [r4, #16]
 800a108:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a10a:	f04f 0900 	mov.w	r9, #0
 800a10e:	e7db      	b.n	800a0c8 <_printf_float+0x154>
 800a110:	b913      	cbnz	r3, 800a118 <_printf_float+0x1a4>
 800a112:	6822      	ldr	r2, [r4, #0]
 800a114:	07d2      	lsls	r2, r2, #31
 800a116:	d501      	bpl.n	800a11c <_printf_float+0x1a8>
 800a118:	3302      	adds	r3, #2
 800a11a:	e7f4      	b.n	800a106 <_printf_float+0x192>
 800a11c:	2301      	movs	r3, #1
 800a11e:	e7f2      	b.n	800a106 <_printf_float+0x192>
 800a120:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a124:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a126:	4299      	cmp	r1, r3
 800a128:	db05      	blt.n	800a136 <_printf_float+0x1c2>
 800a12a:	6823      	ldr	r3, [r4, #0]
 800a12c:	6121      	str	r1, [r4, #16]
 800a12e:	07d8      	lsls	r0, r3, #31
 800a130:	d5ea      	bpl.n	800a108 <_printf_float+0x194>
 800a132:	1c4b      	adds	r3, r1, #1
 800a134:	e7e7      	b.n	800a106 <_printf_float+0x192>
 800a136:	2900      	cmp	r1, #0
 800a138:	bfd4      	ite	le
 800a13a:	f1c1 0202 	rsble	r2, r1, #2
 800a13e:	2201      	movgt	r2, #1
 800a140:	4413      	add	r3, r2
 800a142:	e7e0      	b.n	800a106 <_printf_float+0x192>
 800a144:	6823      	ldr	r3, [r4, #0]
 800a146:	055a      	lsls	r2, r3, #21
 800a148:	d407      	bmi.n	800a15a <_printf_float+0x1e6>
 800a14a:	6923      	ldr	r3, [r4, #16]
 800a14c:	4642      	mov	r2, r8
 800a14e:	4631      	mov	r1, r6
 800a150:	4628      	mov	r0, r5
 800a152:	47b8      	blx	r7
 800a154:	3001      	adds	r0, #1
 800a156:	d12b      	bne.n	800a1b0 <_printf_float+0x23c>
 800a158:	e767      	b.n	800a02a <_printf_float+0xb6>
 800a15a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a15e:	f240 80dd 	bls.w	800a31c <_printf_float+0x3a8>
 800a162:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a166:	2200      	movs	r2, #0
 800a168:	2300      	movs	r3, #0
 800a16a:	f7f6 fcad 	bl	8000ac8 <__aeabi_dcmpeq>
 800a16e:	2800      	cmp	r0, #0
 800a170:	d033      	beq.n	800a1da <_printf_float+0x266>
 800a172:	4a37      	ldr	r2, [pc, #220]	@ (800a250 <_printf_float+0x2dc>)
 800a174:	2301      	movs	r3, #1
 800a176:	4631      	mov	r1, r6
 800a178:	4628      	mov	r0, r5
 800a17a:	47b8      	blx	r7
 800a17c:	3001      	adds	r0, #1
 800a17e:	f43f af54 	beq.w	800a02a <_printf_float+0xb6>
 800a182:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a186:	4543      	cmp	r3, r8
 800a188:	db02      	blt.n	800a190 <_printf_float+0x21c>
 800a18a:	6823      	ldr	r3, [r4, #0]
 800a18c:	07d8      	lsls	r0, r3, #31
 800a18e:	d50f      	bpl.n	800a1b0 <_printf_float+0x23c>
 800a190:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a194:	4631      	mov	r1, r6
 800a196:	4628      	mov	r0, r5
 800a198:	47b8      	blx	r7
 800a19a:	3001      	adds	r0, #1
 800a19c:	f43f af45 	beq.w	800a02a <_printf_float+0xb6>
 800a1a0:	f04f 0900 	mov.w	r9, #0
 800a1a4:	f108 38ff 	add.w	r8, r8, #4294967295
 800a1a8:	f104 0a1a 	add.w	sl, r4, #26
 800a1ac:	45c8      	cmp	r8, r9
 800a1ae:	dc09      	bgt.n	800a1c4 <_printf_float+0x250>
 800a1b0:	6823      	ldr	r3, [r4, #0]
 800a1b2:	079b      	lsls	r3, r3, #30
 800a1b4:	f100 8103 	bmi.w	800a3be <_printf_float+0x44a>
 800a1b8:	68e0      	ldr	r0, [r4, #12]
 800a1ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a1bc:	4298      	cmp	r0, r3
 800a1be:	bfb8      	it	lt
 800a1c0:	4618      	movlt	r0, r3
 800a1c2:	e734      	b.n	800a02e <_printf_float+0xba>
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	4652      	mov	r2, sl
 800a1c8:	4631      	mov	r1, r6
 800a1ca:	4628      	mov	r0, r5
 800a1cc:	47b8      	blx	r7
 800a1ce:	3001      	adds	r0, #1
 800a1d0:	f43f af2b 	beq.w	800a02a <_printf_float+0xb6>
 800a1d4:	f109 0901 	add.w	r9, r9, #1
 800a1d8:	e7e8      	b.n	800a1ac <_printf_float+0x238>
 800a1da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	dc39      	bgt.n	800a254 <_printf_float+0x2e0>
 800a1e0:	4a1b      	ldr	r2, [pc, #108]	@ (800a250 <_printf_float+0x2dc>)
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	4631      	mov	r1, r6
 800a1e6:	4628      	mov	r0, r5
 800a1e8:	47b8      	blx	r7
 800a1ea:	3001      	adds	r0, #1
 800a1ec:	f43f af1d 	beq.w	800a02a <_printf_float+0xb6>
 800a1f0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a1f4:	ea59 0303 	orrs.w	r3, r9, r3
 800a1f8:	d102      	bne.n	800a200 <_printf_float+0x28c>
 800a1fa:	6823      	ldr	r3, [r4, #0]
 800a1fc:	07d9      	lsls	r1, r3, #31
 800a1fe:	d5d7      	bpl.n	800a1b0 <_printf_float+0x23c>
 800a200:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a204:	4631      	mov	r1, r6
 800a206:	4628      	mov	r0, r5
 800a208:	47b8      	blx	r7
 800a20a:	3001      	adds	r0, #1
 800a20c:	f43f af0d 	beq.w	800a02a <_printf_float+0xb6>
 800a210:	f04f 0a00 	mov.w	sl, #0
 800a214:	f104 0b1a 	add.w	fp, r4, #26
 800a218:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a21a:	425b      	negs	r3, r3
 800a21c:	4553      	cmp	r3, sl
 800a21e:	dc01      	bgt.n	800a224 <_printf_float+0x2b0>
 800a220:	464b      	mov	r3, r9
 800a222:	e793      	b.n	800a14c <_printf_float+0x1d8>
 800a224:	2301      	movs	r3, #1
 800a226:	465a      	mov	r2, fp
 800a228:	4631      	mov	r1, r6
 800a22a:	4628      	mov	r0, r5
 800a22c:	47b8      	blx	r7
 800a22e:	3001      	adds	r0, #1
 800a230:	f43f aefb 	beq.w	800a02a <_printf_float+0xb6>
 800a234:	f10a 0a01 	add.w	sl, sl, #1
 800a238:	e7ee      	b.n	800a218 <_printf_float+0x2a4>
 800a23a:	bf00      	nop
 800a23c:	7fefffff 	.word	0x7fefffff
 800a240:	0800eb50 	.word	0x0800eb50
 800a244:	0800eb4c 	.word	0x0800eb4c
 800a248:	0800eb58 	.word	0x0800eb58
 800a24c:	0800eb54 	.word	0x0800eb54
 800a250:	0800eb5c 	.word	0x0800eb5c
 800a254:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a256:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a25a:	4553      	cmp	r3, sl
 800a25c:	bfa8      	it	ge
 800a25e:	4653      	movge	r3, sl
 800a260:	2b00      	cmp	r3, #0
 800a262:	4699      	mov	r9, r3
 800a264:	dc36      	bgt.n	800a2d4 <_printf_float+0x360>
 800a266:	f04f 0b00 	mov.w	fp, #0
 800a26a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a26e:	f104 021a 	add.w	r2, r4, #26
 800a272:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a274:	9306      	str	r3, [sp, #24]
 800a276:	eba3 0309 	sub.w	r3, r3, r9
 800a27a:	455b      	cmp	r3, fp
 800a27c:	dc31      	bgt.n	800a2e2 <_printf_float+0x36e>
 800a27e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a280:	459a      	cmp	sl, r3
 800a282:	dc3a      	bgt.n	800a2fa <_printf_float+0x386>
 800a284:	6823      	ldr	r3, [r4, #0]
 800a286:	07da      	lsls	r2, r3, #31
 800a288:	d437      	bmi.n	800a2fa <_printf_float+0x386>
 800a28a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a28c:	ebaa 0903 	sub.w	r9, sl, r3
 800a290:	9b06      	ldr	r3, [sp, #24]
 800a292:	ebaa 0303 	sub.w	r3, sl, r3
 800a296:	4599      	cmp	r9, r3
 800a298:	bfa8      	it	ge
 800a29a:	4699      	movge	r9, r3
 800a29c:	f1b9 0f00 	cmp.w	r9, #0
 800a2a0:	dc33      	bgt.n	800a30a <_printf_float+0x396>
 800a2a2:	f04f 0800 	mov.w	r8, #0
 800a2a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a2aa:	f104 0b1a 	add.w	fp, r4, #26
 800a2ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2b0:	ebaa 0303 	sub.w	r3, sl, r3
 800a2b4:	eba3 0309 	sub.w	r3, r3, r9
 800a2b8:	4543      	cmp	r3, r8
 800a2ba:	f77f af79 	ble.w	800a1b0 <_printf_float+0x23c>
 800a2be:	2301      	movs	r3, #1
 800a2c0:	465a      	mov	r2, fp
 800a2c2:	4631      	mov	r1, r6
 800a2c4:	4628      	mov	r0, r5
 800a2c6:	47b8      	blx	r7
 800a2c8:	3001      	adds	r0, #1
 800a2ca:	f43f aeae 	beq.w	800a02a <_printf_float+0xb6>
 800a2ce:	f108 0801 	add.w	r8, r8, #1
 800a2d2:	e7ec      	b.n	800a2ae <_printf_float+0x33a>
 800a2d4:	4642      	mov	r2, r8
 800a2d6:	4631      	mov	r1, r6
 800a2d8:	4628      	mov	r0, r5
 800a2da:	47b8      	blx	r7
 800a2dc:	3001      	adds	r0, #1
 800a2de:	d1c2      	bne.n	800a266 <_printf_float+0x2f2>
 800a2e0:	e6a3      	b.n	800a02a <_printf_float+0xb6>
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	4631      	mov	r1, r6
 800a2e6:	4628      	mov	r0, r5
 800a2e8:	9206      	str	r2, [sp, #24]
 800a2ea:	47b8      	blx	r7
 800a2ec:	3001      	adds	r0, #1
 800a2ee:	f43f ae9c 	beq.w	800a02a <_printf_float+0xb6>
 800a2f2:	9a06      	ldr	r2, [sp, #24]
 800a2f4:	f10b 0b01 	add.w	fp, fp, #1
 800a2f8:	e7bb      	b.n	800a272 <_printf_float+0x2fe>
 800a2fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2fe:	4631      	mov	r1, r6
 800a300:	4628      	mov	r0, r5
 800a302:	47b8      	blx	r7
 800a304:	3001      	adds	r0, #1
 800a306:	d1c0      	bne.n	800a28a <_printf_float+0x316>
 800a308:	e68f      	b.n	800a02a <_printf_float+0xb6>
 800a30a:	9a06      	ldr	r2, [sp, #24]
 800a30c:	464b      	mov	r3, r9
 800a30e:	4442      	add	r2, r8
 800a310:	4631      	mov	r1, r6
 800a312:	4628      	mov	r0, r5
 800a314:	47b8      	blx	r7
 800a316:	3001      	adds	r0, #1
 800a318:	d1c3      	bne.n	800a2a2 <_printf_float+0x32e>
 800a31a:	e686      	b.n	800a02a <_printf_float+0xb6>
 800a31c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a320:	f1ba 0f01 	cmp.w	sl, #1
 800a324:	dc01      	bgt.n	800a32a <_printf_float+0x3b6>
 800a326:	07db      	lsls	r3, r3, #31
 800a328:	d536      	bpl.n	800a398 <_printf_float+0x424>
 800a32a:	2301      	movs	r3, #1
 800a32c:	4642      	mov	r2, r8
 800a32e:	4631      	mov	r1, r6
 800a330:	4628      	mov	r0, r5
 800a332:	47b8      	blx	r7
 800a334:	3001      	adds	r0, #1
 800a336:	f43f ae78 	beq.w	800a02a <_printf_float+0xb6>
 800a33a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a33e:	4631      	mov	r1, r6
 800a340:	4628      	mov	r0, r5
 800a342:	47b8      	blx	r7
 800a344:	3001      	adds	r0, #1
 800a346:	f43f ae70 	beq.w	800a02a <_printf_float+0xb6>
 800a34a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a34e:	2200      	movs	r2, #0
 800a350:	2300      	movs	r3, #0
 800a352:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a356:	f7f6 fbb7 	bl	8000ac8 <__aeabi_dcmpeq>
 800a35a:	b9c0      	cbnz	r0, 800a38e <_printf_float+0x41a>
 800a35c:	4653      	mov	r3, sl
 800a35e:	f108 0201 	add.w	r2, r8, #1
 800a362:	4631      	mov	r1, r6
 800a364:	4628      	mov	r0, r5
 800a366:	47b8      	blx	r7
 800a368:	3001      	adds	r0, #1
 800a36a:	d10c      	bne.n	800a386 <_printf_float+0x412>
 800a36c:	e65d      	b.n	800a02a <_printf_float+0xb6>
 800a36e:	2301      	movs	r3, #1
 800a370:	465a      	mov	r2, fp
 800a372:	4631      	mov	r1, r6
 800a374:	4628      	mov	r0, r5
 800a376:	47b8      	blx	r7
 800a378:	3001      	adds	r0, #1
 800a37a:	f43f ae56 	beq.w	800a02a <_printf_float+0xb6>
 800a37e:	f108 0801 	add.w	r8, r8, #1
 800a382:	45d0      	cmp	r8, sl
 800a384:	dbf3      	blt.n	800a36e <_printf_float+0x3fa>
 800a386:	464b      	mov	r3, r9
 800a388:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a38c:	e6df      	b.n	800a14e <_printf_float+0x1da>
 800a38e:	f04f 0800 	mov.w	r8, #0
 800a392:	f104 0b1a 	add.w	fp, r4, #26
 800a396:	e7f4      	b.n	800a382 <_printf_float+0x40e>
 800a398:	2301      	movs	r3, #1
 800a39a:	4642      	mov	r2, r8
 800a39c:	e7e1      	b.n	800a362 <_printf_float+0x3ee>
 800a39e:	2301      	movs	r3, #1
 800a3a0:	464a      	mov	r2, r9
 800a3a2:	4631      	mov	r1, r6
 800a3a4:	4628      	mov	r0, r5
 800a3a6:	47b8      	blx	r7
 800a3a8:	3001      	adds	r0, #1
 800a3aa:	f43f ae3e 	beq.w	800a02a <_printf_float+0xb6>
 800a3ae:	f108 0801 	add.w	r8, r8, #1
 800a3b2:	68e3      	ldr	r3, [r4, #12]
 800a3b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a3b6:	1a5b      	subs	r3, r3, r1
 800a3b8:	4543      	cmp	r3, r8
 800a3ba:	dcf0      	bgt.n	800a39e <_printf_float+0x42a>
 800a3bc:	e6fc      	b.n	800a1b8 <_printf_float+0x244>
 800a3be:	f04f 0800 	mov.w	r8, #0
 800a3c2:	f104 0919 	add.w	r9, r4, #25
 800a3c6:	e7f4      	b.n	800a3b2 <_printf_float+0x43e>

0800a3c8 <_printf_common>:
 800a3c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3cc:	4616      	mov	r6, r2
 800a3ce:	4698      	mov	r8, r3
 800a3d0:	688a      	ldr	r2, [r1, #8]
 800a3d2:	690b      	ldr	r3, [r1, #16]
 800a3d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a3d8:	4293      	cmp	r3, r2
 800a3da:	bfb8      	it	lt
 800a3dc:	4613      	movlt	r3, r2
 800a3de:	6033      	str	r3, [r6, #0]
 800a3e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a3e4:	4607      	mov	r7, r0
 800a3e6:	460c      	mov	r4, r1
 800a3e8:	b10a      	cbz	r2, 800a3ee <_printf_common+0x26>
 800a3ea:	3301      	adds	r3, #1
 800a3ec:	6033      	str	r3, [r6, #0]
 800a3ee:	6823      	ldr	r3, [r4, #0]
 800a3f0:	0699      	lsls	r1, r3, #26
 800a3f2:	bf42      	ittt	mi
 800a3f4:	6833      	ldrmi	r3, [r6, #0]
 800a3f6:	3302      	addmi	r3, #2
 800a3f8:	6033      	strmi	r3, [r6, #0]
 800a3fa:	6825      	ldr	r5, [r4, #0]
 800a3fc:	f015 0506 	ands.w	r5, r5, #6
 800a400:	d106      	bne.n	800a410 <_printf_common+0x48>
 800a402:	f104 0a19 	add.w	sl, r4, #25
 800a406:	68e3      	ldr	r3, [r4, #12]
 800a408:	6832      	ldr	r2, [r6, #0]
 800a40a:	1a9b      	subs	r3, r3, r2
 800a40c:	42ab      	cmp	r3, r5
 800a40e:	dc26      	bgt.n	800a45e <_printf_common+0x96>
 800a410:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a414:	6822      	ldr	r2, [r4, #0]
 800a416:	3b00      	subs	r3, #0
 800a418:	bf18      	it	ne
 800a41a:	2301      	movne	r3, #1
 800a41c:	0692      	lsls	r2, r2, #26
 800a41e:	d42b      	bmi.n	800a478 <_printf_common+0xb0>
 800a420:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a424:	4641      	mov	r1, r8
 800a426:	4638      	mov	r0, r7
 800a428:	47c8      	blx	r9
 800a42a:	3001      	adds	r0, #1
 800a42c:	d01e      	beq.n	800a46c <_printf_common+0xa4>
 800a42e:	6823      	ldr	r3, [r4, #0]
 800a430:	6922      	ldr	r2, [r4, #16]
 800a432:	f003 0306 	and.w	r3, r3, #6
 800a436:	2b04      	cmp	r3, #4
 800a438:	bf02      	ittt	eq
 800a43a:	68e5      	ldreq	r5, [r4, #12]
 800a43c:	6833      	ldreq	r3, [r6, #0]
 800a43e:	1aed      	subeq	r5, r5, r3
 800a440:	68a3      	ldr	r3, [r4, #8]
 800a442:	bf0c      	ite	eq
 800a444:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a448:	2500      	movne	r5, #0
 800a44a:	4293      	cmp	r3, r2
 800a44c:	bfc4      	itt	gt
 800a44e:	1a9b      	subgt	r3, r3, r2
 800a450:	18ed      	addgt	r5, r5, r3
 800a452:	2600      	movs	r6, #0
 800a454:	341a      	adds	r4, #26
 800a456:	42b5      	cmp	r5, r6
 800a458:	d11a      	bne.n	800a490 <_printf_common+0xc8>
 800a45a:	2000      	movs	r0, #0
 800a45c:	e008      	b.n	800a470 <_printf_common+0xa8>
 800a45e:	2301      	movs	r3, #1
 800a460:	4652      	mov	r2, sl
 800a462:	4641      	mov	r1, r8
 800a464:	4638      	mov	r0, r7
 800a466:	47c8      	blx	r9
 800a468:	3001      	adds	r0, #1
 800a46a:	d103      	bne.n	800a474 <_printf_common+0xac>
 800a46c:	f04f 30ff 	mov.w	r0, #4294967295
 800a470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a474:	3501      	adds	r5, #1
 800a476:	e7c6      	b.n	800a406 <_printf_common+0x3e>
 800a478:	18e1      	adds	r1, r4, r3
 800a47a:	1c5a      	adds	r2, r3, #1
 800a47c:	2030      	movs	r0, #48	@ 0x30
 800a47e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a482:	4422      	add	r2, r4
 800a484:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a488:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a48c:	3302      	adds	r3, #2
 800a48e:	e7c7      	b.n	800a420 <_printf_common+0x58>
 800a490:	2301      	movs	r3, #1
 800a492:	4622      	mov	r2, r4
 800a494:	4641      	mov	r1, r8
 800a496:	4638      	mov	r0, r7
 800a498:	47c8      	blx	r9
 800a49a:	3001      	adds	r0, #1
 800a49c:	d0e6      	beq.n	800a46c <_printf_common+0xa4>
 800a49e:	3601      	adds	r6, #1
 800a4a0:	e7d9      	b.n	800a456 <_printf_common+0x8e>
	...

0800a4a4 <_printf_i>:
 800a4a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a4a8:	7e0f      	ldrb	r7, [r1, #24]
 800a4aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a4ac:	2f78      	cmp	r7, #120	@ 0x78
 800a4ae:	4691      	mov	r9, r2
 800a4b0:	4680      	mov	r8, r0
 800a4b2:	460c      	mov	r4, r1
 800a4b4:	469a      	mov	sl, r3
 800a4b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a4ba:	d807      	bhi.n	800a4cc <_printf_i+0x28>
 800a4bc:	2f62      	cmp	r7, #98	@ 0x62
 800a4be:	d80a      	bhi.n	800a4d6 <_printf_i+0x32>
 800a4c0:	2f00      	cmp	r7, #0
 800a4c2:	f000 80d1 	beq.w	800a668 <_printf_i+0x1c4>
 800a4c6:	2f58      	cmp	r7, #88	@ 0x58
 800a4c8:	f000 80b8 	beq.w	800a63c <_printf_i+0x198>
 800a4cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a4d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a4d4:	e03a      	b.n	800a54c <_printf_i+0xa8>
 800a4d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a4da:	2b15      	cmp	r3, #21
 800a4dc:	d8f6      	bhi.n	800a4cc <_printf_i+0x28>
 800a4de:	a101      	add	r1, pc, #4	@ (adr r1, 800a4e4 <_printf_i+0x40>)
 800a4e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a4e4:	0800a53d 	.word	0x0800a53d
 800a4e8:	0800a551 	.word	0x0800a551
 800a4ec:	0800a4cd 	.word	0x0800a4cd
 800a4f0:	0800a4cd 	.word	0x0800a4cd
 800a4f4:	0800a4cd 	.word	0x0800a4cd
 800a4f8:	0800a4cd 	.word	0x0800a4cd
 800a4fc:	0800a551 	.word	0x0800a551
 800a500:	0800a4cd 	.word	0x0800a4cd
 800a504:	0800a4cd 	.word	0x0800a4cd
 800a508:	0800a4cd 	.word	0x0800a4cd
 800a50c:	0800a4cd 	.word	0x0800a4cd
 800a510:	0800a64f 	.word	0x0800a64f
 800a514:	0800a57b 	.word	0x0800a57b
 800a518:	0800a609 	.word	0x0800a609
 800a51c:	0800a4cd 	.word	0x0800a4cd
 800a520:	0800a4cd 	.word	0x0800a4cd
 800a524:	0800a671 	.word	0x0800a671
 800a528:	0800a4cd 	.word	0x0800a4cd
 800a52c:	0800a57b 	.word	0x0800a57b
 800a530:	0800a4cd 	.word	0x0800a4cd
 800a534:	0800a4cd 	.word	0x0800a4cd
 800a538:	0800a611 	.word	0x0800a611
 800a53c:	6833      	ldr	r3, [r6, #0]
 800a53e:	1d1a      	adds	r2, r3, #4
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	6032      	str	r2, [r6, #0]
 800a544:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a548:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a54c:	2301      	movs	r3, #1
 800a54e:	e09c      	b.n	800a68a <_printf_i+0x1e6>
 800a550:	6833      	ldr	r3, [r6, #0]
 800a552:	6820      	ldr	r0, [r4, #0]
 800a554:	1d19      	adds	r1, r3, #4
 800a556:	6031      	str	r1, [r6, #0]
 800a558:	0606      	lsls	r6, r0, #24
 800a55a:	d501      	bpl.n	800a560 <_printf_i+0xbc>
 800a55c:	681d      	ldr	r5, [r3, #0]
 800a55e:	e003      	b.n	800a568 <_printf_i+0xc4>
 800a560:	0645      	lsls	r5, r0, #25
 800a562:	d5fb      	bpl.n	800a55c <_printf_i+0xb8>
 800a564:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a568:	2d00      	cmp	r5, #0
 800a56a:	da03      	bge.n	800a574 <_printf_i+0xd0>
 800a56c:	232d      	movs	r3, #45	@ 0x2d
 800a56e:	426d      	negs	r5, r5
 800a570:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a574:	4858      	ldr	r0, [pc, #352]	@ (800a6d8 <_printf_i+0x234>)
 800a576:	230a      	movs	r3, #10
 800a578:	e011      	b.n	800a59e <_printf_i+0xfa>
 800a57a:	6821      	ldr	r1, [r4, #0]
 800a57c:	6833      	ldr	r3, [r6, #0]
 800a57e:	0608      	lsls	r0, r1, #24
 800a580:	f853 5b04 	ldr.w	r5, [r3], #4
 800a584:	d402      	bmi.n	800a58c <_printf_i+0xe8>
 800a586:	0649      	lsls	r1, r1, #25
 800a588:	bf48      	it	mi
 800a58a:	b2ad      	uxthmi	r5, r5
 800a58c:	2f6f      	cmp	r7, #111	@ 0x6f
 800a58e:	4852      	ldr	r0, [pc, #328]	@ (800a6d8 <_printf_i+0x234>)
 800a590:	6033      	str	r3, [r6, #0]
 800a592:	bf14      	ite	ne
 800a594:	230a      	movne	r3, #10
 800a596:	2308      	moveq	r3, #8
 800a598:	2100      	movs	r1, #0
 800a59a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a59e:	6866      	ldr	r6, [r4, #4]
 800a5a0:	60a6      	str	r6, [r4, #8]
 800a5a2:	2e00      	cmp	r6, #0
 800a5a4:	db05      	blt.n	800a5b2 <_printf_i+0x10e>
 800a5a6:	6821      	ldr	r1, [r4, #0]
 800a5a8:	432e      	orrs	r6, r5
 800a5aa:	f021 0104 	bic.w	r1, r1, #4
 800a5ae:	6021      	str	r1, [r4, #0]
 800a5b0:	d04b      	beq.n	800a64a <_printf_i+0x1a6>
 800a5b2:	4616      	mov	r6, r2
 800a5b4:	fbb5 f1f3 	udiv	r1, r5, r3
 800a5b8:	fb03 5711 	mls	r7, r3, r1, r5
 800a5bc:	5dc7      	ldrb	r7, [r0, r7]
 800a5be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a5c2:	462f      	mov	r7, r5
 800a5c4:	42bb      	cmp	r3, r7
 800a5c6:	460d      	mov	r5, r1
 800a5c8:	d9f4      	bls.n	800a5b4 <_printf_i+0x110>
 800a5ca:	2b08      	cmp	r3, #8
 800a5cc:	d10b      	bne.n	800a5e6 <_printf_i+0x142>
 800a5ce:	6823      	ldr	r3, [r4, #0]
 800a5d0:	07df      	lsls	r7, r3, #31
 800a5d2:	d508      	bpl.n	800a5e6 <_printf_i+0x142>
 800a5d4:	6923      	ldr	r3, [r4, #16]
 800a5d6:	6861      	ldr	r1, [r4, #4]
 800a5d8:	4299      	cmp	r1, r3
 800a5da:	bfde      	ittt	le
 800a5dc:	2330      	movle	r3, #48	@ 0x30
 800a5de:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a5e2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a5e6:	1b92      	subs	r2, r2, r6
 800a5e8:	6122      	str	r2, [r4, #16]
 800a5ea:	f8cd a000 	str.w	sl, [sp]
 800a5ee:	464b      	mov	r3, r9
 800a5f0:	aa03      	add	r2, sp, #12
 800a5f2:	4621      	mov	r1, r4
 800a5f4:	4640      	mov	r0, r8
 800a5f6:	f7ff fee7 	bl	800a3c8 <_printf_common>
 800a5fa:	3001      	adds	r0, #1
 800a5fc:	d14a      	bne.n	800a694 <_printf_i+0x1f0>
 800a5fe:	f04f 30ff 	mov.w	r0, #4294967295
 800a602:	b004      	add	sp, #16
 800a604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a608:	6823      	ldr	r3, [r4, #0]
 800a60a:	f043 0320 	orr.w	r3, r3, #32
 800a60e:	6023      	str	r3, [r4, #0]
 800a610:	4832      	ldr	r0, [pc, #200]	@ (800a6dc <_printf_i+0x238>)
 800a612:	2778      	movs	r7, #120	@ 0x78
 800a614:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a618:	6823      	ldr	r3, [r4, #0]
 800a61a:	6831      	ldr	r1, [r6, #0]
 800a61c:	061f      	lsls	r7, r3, #24
 800a61e:	f851 5b04 	ldr.w	r5, [r1], #4
 800a622:	d402      	bmi.n	800a62a <_printf_i+0x186>
 800a624:	065f      	lsls	r7, r3, #25
 800a626:	bf48      	it	mi
 800a628:	b2ad      	uxthmi	r5, r5
 800a62a:	6031      	str	r1, [r6, #0]
 800a62c:	07d9      	lsls	r1, r3, #31
 800a62e:	bf44      	itt	mi
 800a630:	f043 0320 	orrmi.w	r3, r3, #32
 800a634:	6023      	strmi	r3, [r4, #0]
 800a636:	b11d      	cbz	r5, 800a640 <_printf_i+0x19c>
 800a638:	2310      	movs	r3, #16
 800a63a:	e7ad      	b.n	800a598 <_printf_i+0xf4>
 800a63c:	4826      	ldr	r0, [pc, #152]	@ (800a6d8 <_printf_i+0x234>)
 800a63e:	e7e9      	b.n	800a614 <_printf_i+0x170>
 800a640:	6823      	ldr	r3, [r4, #0]
 800a642:	f023 0320 	bic.w	r3, r3, #32
 800a646:	6023      	str	r3, [r4, #0]
 800a648:	e7f6      	b.n	800a638 <_printf_i+0x194>
 800a64a:	4616      	mov	r6, r2
 800a64c:	e7bd      	b.n	800a5ca <_printf_i+0x126>
 800a64e:	6833      	ldr	r3, [r6, #0]
 800a650:	6825      	ldr	r5, [r4, #0]
 800a652:	6961      	ldr	r1, [r4, #20]
 800a654:	1d18      	adds	r0, r3, #4
 800a656:	6030      	str	r0, [r6, #0]
 800a658:	062e      	lsls	r6, r5, #24
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	d501      	bpl.n	800a662 <_printf_i+0x1be>
 800a65e:	6019      	str	r1, [r3, #0]
 800a660:	e002      	b.n	800a668 <_printf_i+0x1c4>
 800a662:	0668      	lsls	r0, r5, #25
 800a664:	d5fb      	bpl.n	800a65e <_printf_i+0x1ba>
 800a666:	8019      	strh	r1, [r3, #0]
 800a668:	2300      	movs	r3, #0
 800a66a:	6123      	str	r3, [r4, #16]
 800a66c:	4616      	mov	r6, r2
 800a66e:	e7bc      	b.n	800a5ea <_printf_i+0x146>
 800a670:	6833      	ldr	r3, [r6, #0]
 800a672:	1d1a      	adds	r2, r3, #4
 800a674:	6032      	str	r2, [r6, #0]
 800a676:	681e      	ldr	r6, [r3, #0]
 800a678:	6862      	ldr	r2, [r4, #4]
 800a67a:	2100      	movs	r1, #0
 800a67c:	4630      	mov	r0, r6
 800a67e:	f7f5 fda7 	bl	80001d0 <memchr>
 800a682:	b108      	cbz	r0, 800a688 <_printf_i+0x1e4>
 800a684:	1b80      	subs	r0, r0, r6
 800a686:	6060      	str	r0, [r4, #4]
 800a688:	6863      	ldr	r3, [r4, #4]
 800a68a:	6123      	str	r3, [r4, #16]
 800a68c:	2300      	movs	r3, #0
 800a68e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a692:	e7aa      	b.n	800a5ea <_printf_i+0x146>
 800a694:	6923      	ldr	r3, [r4, #16]
 800a696:	4632      	mov	r2, r6
 800a698:	4649      	mov	r1, r9
 800a69a:	4640      	mov	r0, r8
 800a69c:	47d0      	blx	sl
 800a69e:	3001      	adds	r0, #1
 800a6a0:	d0ad      	beq.n	800a5fe <_printf_i+0x15a>
 800a6a2:	6823      	ldr	r3, [r4, #0]
 800a6a4:	079b      	lsls	r3, r3, #30
 800a6a6:	d413      	bmi.n	800a6d0 <_printf_i+0x22c>
 800a6a8:	68e0      	ldr	r0, [r4, #12]
 800a6aa:	9b03      	ldr	r3, [sp, #12]
 800a6ac:	4298      	cmp	r0, r3
 800a6ae:	bfb8      	it	lt
 800a6b0:	4618      	movlt	r0, r3
 800a6b2:	e7a6      	b.n	800a602 <_printf_i+0x15e>
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	4632      	mov	r2, r6
 800a6b8:	4649      	mov	r1, r9
 800a6ba:	4640      	mov	r0, r8
 800a6bc:	47d0      	blx	sl
 800a6be:	3001      	adds	r0, #1
 800a6c0:	d09d      	beq.n	800a5fe <_printf_i+0x15a>
 800a6c2:	3501      	adds	r5, #1
 800a6c4:	68e3      	ldr	r3, [r4, #12]
 800a6c6:	9903      	ldr	r1, [sp, #12]
 800a6c8:	1a5b      	subs	r3, r3, r1
 800a6ca:	42ab      	cmp	r3, r5
 800a6cc:	dcf2      	bgt.n	800a6b4 <_printf_i+0x210>
 800a6ce:	e7eb      	b.n	800a6a8 <_printf_i+0x204>
 800a6d0:	2500      	movs	r5, #0
 800a6d2:	f104 0619 	add.w	r6, r4, #25
 800a6d6:	e7f5      	b.n	800a6c4 <_printf_i+0x220>
 800a6d8:	0800eb5e 	.word	0x0800eb5e
 800a6dc:	0800eb6f 	.word	0x0800eb6f

0800a6e0 <_scanf_float>:
 800a6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6e4:	b087      	sub	sp, #28
 800a6e6:	4691      	mov	r9, r2
 800a6e8:	9303      	str	r3, [sp, #12]
 800a6ea:	688b      	ldr	r3, [r1, #8]
 800a6ec:	1e5a      	subs	r2, r3, #1
 800a6ee:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a6f2:	bf81      	itttt	hi
 800a6f4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a6f8:	eb03 0b05 	addhi.w	fp, r3, r5
 800a6fc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a700:	608b      	strhi	r3, [r1, #8]
 800a702:	680b      	ldr	r3, [r1, #0]
 800a704:	460a      	mov	r2, r1
 800a706:	f04f 0500 	mov.w	r5, #0
 800a70a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a70e:	f842 3b1c 	str.w	r3, [r2], #28
 800a712:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a716:	4680      	mov	r8, r0
 800a718:	460c      	mov	r4, r1
 800a71a:	bf98      	it	ls
 800a71c:	f04f 0b00 	movls.w	fp, #0
 800a720:	9201      	str	r2, [sp, #4]
 800a722:	4616      	mov	r6, r2
 800a724:	46aa      	mov	sl, r5
 800a726:	462f      	mov	r7, r5
 800a728:	9502      	str	r5, [sp, #8]
 800a72a:	68a2      	ldr	r2, [r4, #8]
 800a72c:	b15a      	cbz	r2, 800a746 <_scanf_float+0x66>
 800a72e:	f8d9 3000 	ldr.w	r3, [r9]
 800a732:	781b      	ldrb	r3, [r3, #0]
 800a734:	2b4e      	cmp	r3, #78	@ 0x4e
 800a736:	d863      	bhi.n	800a800 <_scanf_float+0x120>
 800a738:	2b40      	cmp	r3, #64	@ 0x40
 800a73a:	d83b      	bhi.n	800a7b4 <_scanf_float+0xd4>
 800a73c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a740:	b2c8      	uxtb	r0, r1
 800a742:	280e      	cmp	r0, #14
 800a744:	d939      	bls.n	800a7ba <_scanf_float+0xda>
 800a746:	b11f      	cbz	r7, 800a750 <_scanf_float+0x70>
 800a748:	6823      	ldr	r3, [r4, #0]
 800a74a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a74e:	6023      	str	r3, [r4, #0]
 800a750:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a754:	f1ba 0f01 	cmp.w	sl, #1
 800a758:	f200 8114 	bhi.w	800a984 <_scanf_float+0x2a4>
 800a75c:	9b01      	ldr	r3, [sp, #4]
 800a75e:	429e      	cmp	r6, r3
 800a760:	f200 8105 	bhi.w	800a96e <_scanf_float+0x28e>
 800a764:	2001      	movs	r0, #1
 800a766:	b007      	add	sp, #28
 800a768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a76c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a770:	2a0d      	cmp	r2, #13
 800a772:	d8e8      	bhi.n	800a746 <_scanf_float+0x66>
 800a774:	a101      	add	r1, pc, #4	@ (adr r1, 800a77c <_scanf_float+0x9c>)
 800a776:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a77a:	bf00      	nop
 800a77c:	0800a8c5 	.word	0x0800a8c5
 800a780:	0800a747 	.word	0x0800a747
 800a784:	0800a747 	.word	0x0800a747
 800a788:	0800a747 	.word	0x0800a747
 800a78c:	0800a921 	.word	0x0800a921
 800a790:	0800a8fb 	.word	0x0800a8fb
 800a794:	0800a747 	.word	0x0800a747
 800a798:	0800a747 	.word	0x0800a747
 800a79c:	0800a8d3 	.word	0x0800a8d3
 800a7a0:	0800a747 	.word	0x0800a747
 800a7a4:	0800a747 	.word	0x0800a747
 800a7a8:	0800a747 	.word	0x0800a747
 800a7ac:	0800a747 	.word	0x0800a747
 800a7b0:	0800a88f 	.word	0x0800a88f
 800a7b4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a7b8:	e7da      	b.n	800a770 <_scanf_float+0x90>
 800a7ba:	290e      	cmp	r1, #14
 800a7bc:	d8c3      	bhi.n	800a746 <_scanf_float+0x66>
 800a7be:	a001      	add	r0, pc, #4	@ (adr r0, 800a7c4 <_scanf_float+0xe4>)
 800a7c0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a7c4:	0800a87f 	.word	0x0800a87f
 800a7c8:	0800a747 	.word	0x0800a747
 800a7cc:	0800a87f 	.word	0x0800a87f
 800a7d0:	0800a90f 	.word	0x0800a90f
 800a7d4:	0800a747 	.word	0x0800a747
 800a7d8:	0800a821 	.word	0x0800a821
 800a7dc:	0800a865 	.word	0x0800a865
 800a7e0:	0800a865 	.word	0x0800a865
 800a7e4:	0800a865 	.word	0x0800a865
 800a7e8:	0800a865 	.word	0x0800a865
 800a7ec:	0800a865 	.word	0x0800a865
 800a7f0:	0800a865 	.word	0x0800a865
 800a7f4:	0800a865 	.word	0x0800a865
 800a7f8:	0800a865 	.word	0x0800a865
 800a7fc:	0800a865 	.word	0x0800a865
 800a800:	2b6e      	cmp	r3, #110	@ 0x6e
 800a802:	d809      	bhi.n	800a818 <_scanf_float+0x138>
 800a804:	2b60      	cmp	r3, #96	@ 0x60
 800a806:	d8b1      	bhi.n	800a76c <_scanf_float+0x8c>
 800a808:	2b54      	cmp	r3, #84	@ 0x54
 800a80a:	d07b      	beq.n	800a904 <_scanf_float+0x224>
 800a80c:	2b59      	cmp	r3, #89	@ 0x59
 800a80e:	d19a      	bne.n	800a746 <_scanf_float+0x66>
 800a810:	2d07      	cmp	r5, #7
 800a812:	d198      	bne.n	800a746 <_scanf_float+0x66>
 800a814:	2508      	movs	r5, #8
 800a816:	e02f      	b.n	800a878 <_scanf_float+0x198>
 800a818:	2b74      	cmp	r3, #116	@ 0x74
 800a81a:	d073      	beq.n	800a904 <_scanf_float+0x224>
 800a81c:	2b79      	cmp	r3, #121	@ 0x79
 800a81e:	e7f6      	b.n	800a80e <_scanf_float+0x12e>
 800a820:	6821      	ldr	r1, [r4, #0]
 800a822:	05c8      	lsls	r0, r1, #23
 800a824:	d51e      	bpl.n	800a864 <_scanf_float+0x184>
 800a826:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a82a:	6021      	str	r1, [r4, #0]
 800a82c:	3701      	adds	r7, #1
 800a82e:	f1bb 0f00 	cmp.w	fp, #0
 800a832:	d003      	beq.n	800a83c <_scanf_float+0x15c>
 800a834:	3201      	adds	r2, #1
 800a836:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a83a:	60a2      	str	r2, [r4, #8]
 800a83c:	68a3      	ldr	r3, [r4, #8]
 800a83e:	3b01      	subs	r3, #1
 800a840:	60a3      	str	r3, [r4, #8]
 800a842:	6923      	ldr	r3, [r4, #16]
 800a844:	3301      	adds	r3, #1
 800a846:	6123      	str	r3, [r4, #16]
 800a848:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800a84c:	3b01      	subs	r3, #1
 800a84e:	2b00      	cmp	r3, #0
 800a850:	f8c9 3004 	str.w	r3, [r9, #4]
 800a854:	f340 8082 	ble.w	800a95c <_scanf_float+0x27c>
 800a858:	f8d9 3000 	ldr.w	r3, [r9]
 800a85c:	3301      	adds	r3, #1
 800a85e:	f8c9 3000 	str.w	r3, [r9]
 800a862:	e762      	b.n	800a72a <_scanf_float+0x4a>
 800a864:	eb1a 0105 	adds.w	r1, sl, r5
 800a868:	f47f af6d 	bne.w	800a746 <_scanf_float+0x66>
 800a86c:	6822      	ldr	r2, [r4, #0]
 800a86e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a872:	6022      	str	r2, [r4, #0]
 800a874:	460d      	mov	r5, r1
 800a876:	468a      	mov	sl, r1
 800a878:	f806 3b01 	strb.w	r3, [r6], #1
 800a87c:	e7de      	b.n	800a83c <_scanf_float+0x15c>
 800a87e:	6822      	ldr	r2, [r4, #0]
 800a880:	0610      	lsls	r0, r2, #24
 800a882:	f57f af60 	bpl.w	800a746 <_scanf_float+0x66>
 800a886:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a88a:	6022      	str	r2, [r4, #0]
 800a88c:	e7f4      	b.n	800a878 <_scanf_float+0x198>
 800a88e:	f1ba 0f00 	cmp.w	sl, #0
 800a892:	d10c      	bne.n	800a8ae <_scanf_float+0x1ce>
 800a894:	b977      	cbnz	r7, 800a8b4 <_scanf_float+0x1d4>
 800a896:	6822      	ldr	r2, [r4, #0]
 800a898:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a89c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a8a0:	d108      	bne.n	800a8b4 <_scanf_float+0x1d4>
 800a8a2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a8a6:	6022      	str	r2, [r4, #0]
 800a8a8:	f04f 0a01 	mov.w	sl, #1
 800a8ac:	e7e4      	b.n	800a878 <_scanf_float+0x198>
 800a8ae:	f1ba 0f02 	cmp.w	sl, #2
 800a8b2:	d050      	beq.n	800a956 <_scanf_float+0x276>
 800a8b4:	2d01      	cmp	r5, #1
 800a8b6:	d002      	beq.n	800a8be <_scanf_float+0x1de>
 800a8b8:	2d04      	cmp	r5, #4
 800a8ba:	f47f af44 	bne.w	800a746 <_scanf_float+0x66>
 800a8be:	3501      	adds	r5, #1
 800a8c0:	b2ed      	uxtb	r5, r5
 800a8c2:	e7d9      	b.n	800a878 <_scanf_float+0x198>
 800a8c4:	f1ba 0f01 	cmp.w	sl, #1
 800a8c8:	f47f af3d 	bne.w	800a746 <_scanf_float+0x66>
 800a8cc:	f04f 0a02 	mov.w	sl, #2
 800a8d0:	e7d2      	b.n	800a878 <_scanf_float+0x198>
 800a8d2:	b975      	cbnz	r5, 800a8f2 <_scanf_float+0x212>
 800a8d4:	2f00      	cmp	r7, #0
 800a8d6:	f47f af37 	bne.w	800a748 <_scanf_float+0x68>
 800a8da:	6822      	ldr	r2, [r4, #0]
 800a8dc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a8e0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a8e4:	f040 8103 	bne.w	800aaee <_scanf_float+0x40e>
 800a8e8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a8ec:	6022      	str	r2, [r4, #0]
 800a8ee:	2501      	movs	r5, #1
 800a8f0:	e7c2      	b.n	800a878 <_scanf_float+0x198>
 800a8f2:	2d03      	cmp	r5, #3
 800a8f4:	d0e3      	beq.n	800a8be <_scanf_float+0x1de>
 800a8f6:	2d05      	cmp	r5, #5
 800a8f8:	e7df      	b.n	800a8ba <_scanf_float+0x1da>
 800a8fa:	2d02      	cmp	r5, #2
 800a8fc:	f47f af23 	bne.w	800a746 <_scanf_float+0x66>
 800a900:	2503      	movs	r5, #3
 800a902:	e7b9      	b.n	800a878 <_scanf_float+0x198>
 800a904:	2d06      	cmp	r5, #6
 800a906:	f47f af1e 	bne.w	800a746 <_scanf_float+0x66>
 800a90a:	2507      	movs	r5, #7
 800a90c:	e7b4      	b.n	800a878 <_scanf_float+0x198>
 800a90e:	6822      	ldr	r2, [r4, #0]
 800a910:	0591      	lsls	r1, r2, #22
 800a912:	f57f af18 	bpl.w	800a746 <_scanf_float+0x66>
 800a916:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a91a:	6022      	str	r2, [r4, #0]
 800a91c:	9702      	str	r7, [sp, #8]
 800a91e:	e7ab      	b.n	800a878 <_scanf_float+0x198>
 800a920:	6822      	ldr	r2, [r4, #0]
 800a922:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a926:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a92a:	d005      	beq.n	800a938 <_scanf_float+0x258>
 800a92c:	0550      	lsls	r0, r2, #21
 800a92e:	f57f af0a 	bpl.w	800a746 <_scanf_float+0x66>
 800a932:	2f00      	cmp	r7, #0
 800a934:	f000 80db 	beq.w	800aaee <_scanf_float+0x40e>
 800a938:	0591      	lsls	r1, r2, #22
 800a93a:	bf58      	it	pl
 800a93c:	9902      	ldrpl	r1, [sp, #8]
 800a93e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a942:	bf58      	it	pl
 800a944:	1a79      	subpl	r1, r7, r1
 800a946:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a94a:	bf58      	it	pl
 800a94c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a950:	6022      	str	r2, [r4, #0]
 800a952:	2700      	movs	r7, #0
 800a954:	e790      	b.n	800a878 <_scanf_float+0x198>
 800a956:	f04f 0a03 	mov.w	sl, #3
 800a95a:	e78d      	b.n	800a878 <_scanf_float+0x198>
 800a95c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a960:	4649      	mov	r1, r9
 800a962:	4640      	mov	r0, r8
 800a964:	4798      	blx	r3
 800a966:	2800      	cmp	r0, #0
 800a968:	f43f aedf 	beq.w	800a72a <_scanf_float+0x4a>
 800a96c:	e6eb      	b.n	800a746 <_scanf_float+0x66>
 800a96e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a972:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a976:	464a      	mov	r2, r9
 800a978:	4640      	mov	r0, r8
 800a97a:	4798      	blx	r3
 800a97c:	6923      	ldr	r3, [r4, #16]
 800a97e:	3b01      	subs	r3, #1
 800a980:	6123      	str	r3, [r4, #16]
 800a982:	e6eb      	b.n	800a75c <_scanf_float+0x7c>
 800a984:	1e6b      	subs	r3, r5, #1
 800a986:	2b06      	cmp	r3, #6
 800a988:	d824      	bhi.n	800a9d4 <_scanf_float+0x2f4>
 800a98a:	2d02      	cmp	r5, #2
 800a98c:	d836      	bhi.n	800a9fc <_scanf_float+0x31c>
 800a98e:	9b01      	ldr	r3, [sp, #4]
 800a990:	429e      	cmp	r6, r3
 800a992:	f67f aee7 	bls.w	800a764 <_scanf_float+0x84>
 800a996:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a99a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a99e:	464a      	mov	r2, r9
 800a9a0:	4640      	mov	r0, r8
 800a9a2:	4798      	blx	r3
 800a9a4:	6923      	ldr	r3, [r4, #16]
 800a9a6:	3b01      	subs	r3, #1
 800a9a8:	6123      	str	r3, [r4, #16]
 800a9aa:	e7f0      	b.n	800a98e <_scanf_float+0x2ae>
 800a9ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a9b0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a9b4:	464a      	mov	r2, r9
 800a9b6:	4640      	mov	r0, r8
 800a9b8:	4798      	blx	r3
 800a9ba:	6923      	ldr	r3, [r4, #16]
 800a9bc:	3b01      	subs	r3, #1
 800a9be:	6123      	str	r3, [r4, #16]
 800a9c0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a9c4:	fa5f fa8a 	uxtb.w	sl, sl
 800a9c8:	f1ba 0f02 	cmp.w	sl, #2
 800a9cc:	d1ee      	bne.n	800a9ac <_scanf_float+0x2cc>
 800a9ce:	3d03      	subs	r5, #3
 800a9d0:	b2ed      	uxtb	r5, r5
 800a9d2:	1b76      	subs	r6, r6, r5
 800a9d4:	6823      	ldr	r3, [r4, #0]
 800a9d6:	05da      	lsls	r2, r3, #23
 800a9d8:	d530      	bpl.n	800aa3c <_scanf_float+0x35c>
 800a9da:	055b      	lsls	r3, r3, #21
 800a9dc:	d511      	bpl.n	800aa02 <_scanf_float+0x322>
 800a9de:	9b01      	ldr	r3, [sp, #4]
 800a9e0:	429e      	cmp	r6, r3
 800a9e2:	f67f aebf 	bls.w	800a764 <_scanf_float+0x84>
 800a9e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a9ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a9ee:	464a      	mov	r2, r9
 800a9f0:	4640      	mov	r0, r8
 800a9f2:	4798      	blx	r3
 800a9f4:	6923      	ldr	r3, [r4, #16]
 800a9f6:	3b01      	subs	r3, #1
 800a9f8:	6123      	str	r3, [r4, #16]
 800a9fa:	e7f0      	b.n	800a9de <_scanf_float+0x2fe>
 800a9fc:	46aa      	mov	sl, r5
 800a9fe:	46b3      	mov	fp, r6
 800aa00:	e7de      	b.n	800a9c0 <_scanf_float+0x2e0>
 800aa02:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800aa06:	6923      	ldr	r3, [r4, #16]
 800aa08:	2965      	cmp	r1, #101	@ 0x65
 800aa0a:	f103 33ff 	add.w	r3, r3, #4294967295
 800aa0e:	f106 35ff 	add.w	r5, r6, #4294967295
 800aa12:	6123      	str	r3, [r4, #16]
 800aa14:	d00c      	beq.n	800aa30 <_scanf_float+0x350>
 800aa16:	2945      	cmp	r1, #69	@ 0x45
 800aa18:	d00a      	beq.n	800aa30 <_scanf_float+0x350>
 800aa1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aa1e:	464a      	mov	r2, r9
 800aa20:	4640      	mov	r0, r8
 800aa22:	4798      	blx	r3
 800aa24:	6923      	ldr	r3, [r4, #16]
 800aa26:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800aa2a:	3b01      	subs	r3, #1
 800aa2c:	1eb5      	subs	r5, r6, #2
 800aa2e:	6123      	str	r3, [r4, #16]
 800aa30:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aa34:	464a      	mov	r2, r9
 800aa36:	4640      	mov	r0, r8
 800aa38:	4798      	blx	r3
 800aa3a:	462e      	mov	r6, r5
 800aa3c:	6822      	ldr	r2, [r4, #0]
 800aa3e:	f012 0210 	ands.w	r2, r2, #16
 800aa42:	d001      	beq.n	800aa48 <_scanf_float+0x368>
 800aa44:	2000      	movs	r0, #0
 800aa46:	e68e      	b.n	800a766 <_scanf_float+0x86>
 800aa48:	7032      	strb	r2, [r6, #0]
 800aa4a:	6823      	ldr	r3, [r4, #0]
 800aa4c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800aa50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa54:	d125      	bne.n	800aaa2 <_scanf_float+0x3c2>
 800aa56:	9b02      	ldr	r3, [sp, #8]
 800aa58:	429f      	cmp	r7, r3
 800aa5a:	d00a      	beq.n	800aa72 <_scanf_float+0x392>
 800aa5c:	1bda      	subs	r2, r3, r7
 800aa5e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800aa62:	429e      	cmp	r6, r3
 800aa64:	bf28      	it	cs
 800aa66:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800aa6a:	4922      	ldr	r1, [pc, #136]	@ (800aaf4 <_scanf_float+0x414>)
 800aa6c:	4630      	mov	r0, r6
 800aa6e:	f000 f907 	bl	800ac80 <siprintf>
 800aa72:	9901      	ldr	r1, [sp, #4]
 800aa74:	2200      	movs	r2, #0
 800aa76:	4640      	mov	r0, r8
 800aa78:	f002 fbee 	bl	800d258 <_strtod_r>
 800aa7c:	9b03      	ldr	r3, [sp, #12]
 800aa7e:	6821      	ldr	r1, [r4, #0]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f011 0f02 	tst.w	r1, #2
 800aa86:	ec57 6b10 	vmov	r6, r7, d0
 800aa8a:	f103 0204 	add.w	r2, r3, #4
 800aa8e:	d015      	beq.n	800aabc <_scanf_float+0x3dc>
 800aa90:	9903      	ldr	r1, [sp, #12]
 800aa92:	600a      	str	r2, [r1, #0]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	e9c3 6700 	strd	r6, r7, [r3]
 800aa9a:	68e3      	ldr	r3, [r4, #12]
 800aa9c:	3301      	adds	r3, #1
 800aa9e:	60e3      	str	r3, [r4, #12]
 800aaa0:	e7d0      	b.n	800aa44 <_scanf_float+0x364>
 800aaa2:	9b04      	ldr	r3, [sp, #16]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d0e4      	beq.n	800aa72 <_scanf_float+0x392>
 800aaa8:	9905      	ldr	r1, [sp, #20]
 800aaaa:	230a      	movs	r3, #10
 800aaac:	3101      	adds	r1, #1
 800aaae:	4640      	mov	r0, r8
 800aab0:	f002 fc52 	bl	800d358 <_strtol_r>
 800aab4:	9b04      	ldr	r3, [sp, #16]
 800aab6:	9e05      	ldr	r6, [sp, #20]
 800aab8:	1ac2      	subs	r2, r0, r3
 800aaba:	e7d0      	b.n	800aa5e <_scanf_float+0x37e>
 800aabc:	f011 0f04 	tst.w	r1, #4
 800aac0:	9903      	ldr	r1, [sp, #12]
 800aac2:	600a      	str	r2, [r1, #0]
 800aac4:	d1e6      	bne.n	800aa94 <_scanf_float+0x3b4>
 800aac6:	681d      	ldr	r5, [r3, #0]
 800aac8:	4632      	mov	r2, r6
 800aaca:	463b      	mov	r3, r7
 800aacc:	4630      	mov	r0, r6
 800aace:	4639      	mov	r1, r7
 800aad0:	f7f6 f82c 	bl	8000b2c <__aeabi_dcmpun>
 800aad4:	b128      	cbz	r0, 800aae2 <_scanf_float+0x402>
 800aad6:	4808      	ldr	r0, [pc, #32]	@ (800aaf8 <_scanf_float+0x418>)
 800aad8:	f000 fa68 	bl	800afac <nanf>
 800aadc:	ed85 0a00 	vstr	s0, [r5]
 800aae0:	e7db      	b.n	800aa9a <_scanf_float+0x3ba>
 800aae2:	4630      	mov	r0, r6
 800aae4:	4639      	mov	r1, r7
 800aae6:	f7f6 f87f 	bl	8000be8 <__aeabi_d2f>
 800aaea:	6028      	str	r0, [r5, #0]
 800aaec:	e7d5      	b.n	800aa9a <_scanf_float+0x3ba>
 800aaee:	2700      	movs	r7, #0
 800aaf0:	e62e      	b.n	800a750 <_scanf_float+0x70>
 800aaf2:	bf00      	nop
 800aaf4:	0800eb80 	.word	0x0800eb80
 800aaf8:	0800ecc1 	.word	0x0800ecc1

0800aafc <std>:
 800aafc:	2300      	movs	r3, #0
 800aafe:	b510      	push	{r4, lr}
 800ab00:	4604      	mov	r4, r0
 800ab02:	e9c0 3300 	strd	r3, r3, [r0]
 800ab06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab0a:	6083      	str	r3, [r0, #8]
 800ab0c:	8181      	strh	r1, [r0, #12]
 800ab0e:	6643      	str	r3, [r0, #100]	@ 0x64
 800ab10:	81c2      	strh	r2, [r0, #14]
 800ab12:	6183      	str	r3, [r0, #24]
 800ab14:	4619      	mov	r1, r3
 800ab16:	2208      	movs	r2, #8
 800ab18:	305c      	adds	r0, #92	@ 0x5c
 800ab1a:	f000 f926 	bl	800ad6a <memset>
 800ab1e:	4b0d      	ldr	r3, [pc, #52]	@ (800ab54 <std+0x58>)
 800ab20:	6263      	str	r3, [r4, #36]	@ 0x24
 800ab22:	4b0d      	ldr	r3, [pc, #52]	@ (800ab58 <std+0x5c>)
 800ab24:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ab26:	4b0d      	ldr	r3, [pc, #52]	@ (800ab5c <std+0x60>)
 800ab28:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ab2a:	4b0d      	ldr	r3, [pc, #52]	@ (800ab60 <std+0x64>)
 800ab2c:	6323      	str	r3, [r4, #48]	@ 0x30
 800ab2e:	4b0d      	ldr	r3, [pc, #52]	@ (800ab64 <std+0x68>)
 800ab30:	6224      	str	r4, [r4, #32]
 800ab32:	429c      	cmp	r4, r3
 800ab34:	d006      	beq.n	800ab44 <std+0x48>
 800ab36:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ab3a:	4294      	cmp	r4, r2
 800ab3c:	d002      	beq.n	800ab44 <std+0x48>
 800ab3e:	33d0      	adds	r3, #208	@ 0xd0
 800ab40:	429c      	cmp	r4, r3
 800ab42:	d105      	bne.n	800ab50 <std+0x54>
 800ab44:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ab48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab4c:	f000 ba1c 	b.w	800af88 <__retarget_lock_init_recursive>
 800ab50:	bd10      	pop	{r4, pc}
 800ab52:	bf00      	nop
 800ab54:	0800acc5 	.word	0x0800acc5
 800ab58:	0800ace7 	.word	0x0800ace7
 800ab5c:	0800ad1f 	.word	0x0800ad1f
 800ab60:	0800ad43 	.word	0x0800ad43
 800ab64:	2000de78 	.word	0x2000de78

0800ab68 <stdio_exit_handler>:
 800ab68:	4a02      	ldr	r2, [pc, #8]	@ (800ab74 <stdio_exit_handler+0xc>)
 800ab6a:	4903      	ldr	r1, [pc, #12]	@ (800ab78 <stdio_exit_handler+0x10>)
 800ab6c:	4803      	ldr	r0, [pc, #12]	@ (800ab7c <stdio_exit_handler+0x14>)
 800ab6e:	f000 b869 	b.w	800ac44 <_fwalk_sglue>
 800ab72:	bf00      	nop
 800ab74:	2000007c 	.word	0x2000007c
 800ab78:	0800d715 	.word	0x0800d715
 800ab7c:	2000008c 	.word	0x2000008c

0800ab80 <cleanup_stdio>:
 800ab80:	6841      	ldr	r1, [r0, #4]
 800ab82:	4b0c      	ldr	r3, [pc, #48]	@ (800abb4 <cleanup_stdio+0x34>)
 800ab84:	4299      	cmp	r1, r3
 800ab86:	b510      	push	{r4, lr}
 800ab88:	4604      	mov	r4, r0
 800ab8a:	d001      	beq.n	800ab90 <cleanup_stdio+0x10>
 800ab8c:	f002 fdc2 	bl	800d714 <_fflush_r>
 800ab90:	68a1      	ldr	r1, [r4, #8]
 800ab92:	4b09      	ldr	r3, [pc, #36]	@ (800abb8 <cleanup_stdio+0x38>)
 800ab94:	4299      	cmp	r1, r3
 800ab96:	d002      	beq.n	800ab9e <cleanup_stdio+0x1e>
 800ab98:	4620      	mov	r0, r4
 800ab9a:	f002 fdbb 	bl	800d714 <_fflush_r>
 800ab9e:	68e1      	ldr	r1, [r4, #12]
 800aba0:	4b06      	ldr	r3, [pc, #24]	@ (800abbc <cleanup_stdio+0x3c>)
 800aba2:	4299      	cmp	r1, r3
 800aba4:	d004      	beq.n	800abb0 <cleanup_stdio+0x30>
 800aba6:	4620      	mov	r0, r4
 800aba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abac:	f002 bdb2 	b.w	800d714 <_fflush_r>
 800abb0:	bd10      	pop	{r4, pc}
 800abb2:	bf00      	nop
 800abb4:	2000de78 	.word	0x2000de78
 800abb8:	2000dee0 	.word	0x2000dee0
 800abbc:	2000df48 	.word	0x2000df48

0800abc0 <global_stdio_init.part.0>:
 800abc0:	b510      	push	{r4, lr}
 800abc2:	4b0b      	ldr	r3, [pc, #44]	@ (800abf0 <global_stdio_init.part.0+0x30>)
 800abc4:	4c0b      	ldr	r4, [pc, #44]	@ (800abf4 <global_stdio_init.part.0+0x34>)
 800abc6:	4a0c      	ldr	r2, [pc, #48]	@ (800abf8 <global_stdio_init.part.0+0x38>)
 800abc8:	601a      	str	r2, [r3, #0]
 800abca:	4620      	mov	r0, r4
 800abcc:	2200      	movs	r2, #0
 800abce:	2104      	movs	r1, #4
 800abd0:	f7ff ff94 	bl	800aafc <std>
 800abd4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800abd8:	2201      	movs	r2, #1
 800abda:	2109      	movs	r1, #9
 800abdc:	f7ff ff8e 	bl	800aafc <std>
 800abe0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800abe4:	2202      	movs	r2, #2
 800abe6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abea:	2112      	movs	r1, #18
 800abec:	f7ff bf86 	b.w	800aafc <std>
 800abf0:	2000dfb0 	.word	0x2000dfb0
 800abf4:	2000de78 	.word	0x2000de78
 800abf8:	0800ab69 	.word	0x0800ab69

0800abfc <__sfp_lock_acquire>:
 800abfc:	4801      	ldr	r0, [pc, #4]	@ (800ac04 <__sfp_lock_acquire+0x8>)
 800abfe:	f000 b9c4 	b.w	800af8a <__retarget_lock_acquire_recursive>
 800ac02:	bf00      	nop
 800ac04:	2000dfb9 	.word	0x2000dfb9

0800ac08 <__sfp_lock_release>:
 800ac08:	4801      	ldr	r0, [pc, #4]	@ (800ac10 <__sfp_lock_release+0x8>)
 800ac0a:	f000 b9bf 	b.w	800af8c <__retarget_lock_release_recursive>
 800ac0e:	bf00      	nop
 800ac10:	2000dfb9 	.word	0x2000dfb9

0800ac14 <__sinit>:
 800ac14:	b510      	push	{r4, lr}
 800ac16:	4604      	mov	r4, r0
 800ac18:	f7ff fff0 	bl	800abfc <__sfp_lock_acquire>
 800ac1c:	6a23      	ldr	r3, [r4, #32]
 800ac1e:	b11b      	cbz	r3, 800ac28 <__sinit+0x14>
 800ac20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac24:	f7ff bff0 	b.w	800ac08 <__sfp_lock_release>
 800ac28:	4b04      	ldr	r3, [pc, #16]	@ (800ac3c <__sinit+0x28>)
 800ac2a:	6223      	str	r3, [r4, #32]
 800ac2c:	4b04      	ldr	r3, [pc, #16]	@ (800ac40 <__sinit+0x2c>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d1f5      	bne.n	800ac20 <__sinit+0xc>
 800ac34:	f7ff ffc4 	bl	800abc0 <global_stdio_init.part.0>
 800ac38:	e7f2      	b.n	800ac20 <__sinit+0xc>
 800ac3a:	bf00      	nop
 800ac3c:	0800ab81 	.word	0x0800ab81
 800ac40:	2000dfb0 	.word	0x2000dfb0

0800ac44 <_fwalk_sglue>:
 800ac44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac48:	4607      	mov	r7, r0
 800ac4a:	4688      	mov	r8, r1
 800ac4c:	4614      	mov	r4, r2
 800ac4e:	2600      	movs	r6, #0
 800ac50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac54:	f1b9 0901 	subs.w	r9, r9, #1
 800ac58:	d505      	bpl.n	800ac66 <_fwalk_sglue+0x22>
 800ac5a:	6824      	ldr	r4, [r4, #0]
 800ac5c:	2c00      	cmp	r4, #0
 800ac5e:	d1f7      	bne.n	800ac50 <_fwalk_sglue+0xc>
 800ac60:	4630      	mov	r0, r6
 800ac62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac66:	89ab      	ldrh	r3, [r5, #12]
 800ac68:	2b01      	cmp	r3, #1
 800ac6a:	d907      	bls.n	800ac7c <_fwalk_sglue+0x38>
 800ac6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac70:	3301      	adds	r3, #1
 800ac72:	d003      	beq.n	800ac7c <_fwalk_sglue+0x38>
 800ac74:	4629      	mov	r1, r5
 800ac76:	4638      	mov	r0, r7
 800ac78:	47c0      	blx	r8
 800ac7a:	4306      	orrs	r6, r0
 800ac7c:	3568      	adds	r5, #104	@ 0x68
 800ac7e:	e7e9      	b.n	800ac54 <_fwalk_sglue+0x10>

0800ac80 <siprintf>:
 800ac80:	b40e      	push	{r1, r2, r3}
 800ac82:	b510      	push	{r4, lr}
 800ac84:	b09d      	sub	sp, #116	@ 0x74
 800ac86:	ab1f      	add	r3, sp, #124	@ 0x7c
 800ac88:	9002      	str	r0, [sp, #8]
 800ac8a:	9006      	str	r0, [sp, #24]
 800ac8c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ac90:	480a      	ldr	r0, [pc, #40]	@ (800acbc <siprintf+0x3c>)
 800ac92:	9107      	str	r1, [sp, #28]
 800ac94:	9104      	str	r1, [sp, #16]
 800ac96:	490a      	ldr	r1, [pc, #40]	@ (800acc0 <siprintf+0x40>)
 800ac98:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac9c:	9105      	str	r1, [sp, #20]
 800ac9e:	2400      	movs	r4, #0
 800aca0:	a902      	add	r1, sp, #8
 800aca2:	6800      	ldr	r0, [r0, #0]
 800aca4:	9301      	str	r3, [sp, #4]
 800aca6:	941b      	str	r4, [sp, #108]	@ 0x6c
 800aca8:	f002 fbb4 	bl	800d414 <_svfiprintf_r>
 800acac:	9b02      	ldr	r3, [sp, #8]
 800acae:	701c      	strb	r4, [r3, #0]
 800acb0:	b01d      	add	sp, #116	@ 0x74
 800acb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acb6:	b003      	add	sp, #12
 800acb8:	4770      	bx	lr
 800acba:	bf00      	nop
 800acbc:	20000088 	.word	0x20000088
 800acc0:	ffff0208 	.word	0xffff0208

0800acc4 <__sread>:
 800acc4:	b510      	push	{r4, lr}
 800acc6:	460c      	mov	r4, r1
 800acc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800accc:	f000 f8fe 	bl	800aecc <_read_r>
 800acd0:	2800      	cmp	r0, #0
 800acd2:	bfab      	itete	ge
 800acd4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800acd6:	89a3      	ldrhlt	r3, [r4, #12]
 800acd8:	181b      	addge	r3, r3, r0
 800acda:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800acde:	bfac      	ite	ge
 800ace0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ace2:	81a3      	strhlt	r3, [r4, #12]
 800ace4:	bd10      	pop	{r4, pc}

0800ace6 <__swrite>:
 800ace6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acea:	461f      	mov	r7, r3
 800acec:	898b      	ldrh	r3, [r1, #12]
 800acee:	05db      	lsls	r3, r3, #23
 800acf0:	4605      	mov	r5, r0
 800acf2:	460c      	mov	r4, r1
 800acf4:	4616      	mov	r6, r2
 800acf6:	d505      	bpl.n	800ad04 <__swrite+0x1e>
 800acf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acfc:	2302      	movs	r3, #2
 800acfe:	2200      	movs	r2, #0
 800ad00:	f000 f8d2 	bl	800aea8 <_lseek_r>
 800ad04:	89a3      	ldrh	r3, [r4, #12]
 800ad06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ad0e:	81a3      	strh	r3, [r4, #12]
 800ad10:	4632      	mov	r2, r6
 800ad12:	463b      	mov	r3, r7
 800ad14:	4628      	mov	r0, r5
 800ad16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad1a:	f000 b8f9 	b.w	800af10 <_write_r>

0800ad1e <__sseek>:
 800ad1e:	b510      	push	{r4, lr}
 800ad20:	460c      	mov	r4, r1
 800ad22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad26:	f000 f8bf 	bl	800aea8 <_lseek_r>
 800ad2a:	1c43      	adds	r3, r0, #1
 800ad2c:	89a3      	ldrh	r3, [r4, #12]
 800ad2e:	bf15      	itete	ne
 800ad30:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ad32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ad36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ad3a:	81a3      	strheq	r3, [r4, #12]
 800ad3c:	bf18      	it	ne
 800ad3e:	81a3      	strhne	r3, [r4, #12]
 800ad40:	bd10      	pop	{r4, pc}

0800ad42 <__sclose>:
 800ad42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad46:	f000 b841 	b.w	800adcc <_close_r>

0800ad4a <memcmp>:
 800ad4a:	b510      	push	{r4, lr}
 800ad4c:	3901      	subs	r1, #1
 800ad4e:	4402      	add	r2, r0
 800ad50:	4290      	cmp	r0, r2
 800ad52:	d101      	bne.n	800ad58 <memcmp+0xe>
 800ad54:	2000      	movs	r0, #0
 800ad56:	e005      	b.n	800ad64 <memcmp+0x1a>
 800ad58:	7803      	ldrb	r3, [r0, #0]
 800ad5a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ad5e:	42a3      	cmp	r3, r4
 800ad60:	d001      	beq.n	800ad66 <memcmp+0x1c>
 800ad62:	1b18      	subs	r0, r3, r4
 800ad64:	bd10      	pop	{r4, pc}
 800ad66:	3001      	adds	r0, #1
 800ad68:	e7f2      	b.n	800ad50 <memcmp+0x6>

0800ad6a <memset>:
 800ad6a:	4402      	add	r2, r0
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d100      	bne.n	800ad74 <memset+0xa>
 800ad72:	4770      	bx	lr
 800ad74:	f803 1b01 	strb.w	r1, [r3], #1
 800ad78:	e7f9      	b.n	800ad6e <memset+0x4>

0800ad7a <strncmp>:
 800ad7a:	b510      	push	{r4, lr}
 800ad7c:	b16a      	cbz	r2, 800ad9a <strncmp+0x20>
 800ad7e:	3901      	subs	r1, #1
 800ad80:	1884      	adds	r4, r0, r2
 800ad82:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad86:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ad8a:	429a      	cmp	r2, r3
 800ad8c:	d103      	bne.n	800ad96 <strncmp+0x1c>
 800ad8e:	42a0      	cmp	r0, r4
 800ad90:	d001      	beq.n	800ad96 <strncmp+0x1c>
 800ad92:	2a00      	cmp	r2, #0
 800ad94:	d1f5      	bne.n	800ad82 <strncmp+0x8>
 800ad96:	1ad0      	subs	r0, r2, r3
 800ad98:	bd10      	pop	{r4, pc}
 800ad9a:	4610      	mov	r0, r2
 800ad9c:	e7fc      	b.n	800ad98 <strncmp+0x1e>

0800ad9e <strncpy>:
 800ad9e:	b510      	push	{r4, lr}
 800ada0:	3901      	subs	r1, #1
 800ada2:	4603      	mov	r3, r0
 800ada4:	b132      	cbz	r2, 800adb4 <strncpy+0x16>
 800ada6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800adaa:	f803 4b01 	strb.w	r4, [r3], #1
 800adae:	3a01      	subs	r2, #1
 800adb0:	2c00      	cmp	r4, #0
 800adb2:	d1f7      	bne.n	800ada4 <strncpy+0x6>
 800adb4:	441a      	add	r2, r3
 800adb6:	2100      	movs	r1, #0
 800adb8:	4293      	cmp	r3, r2
 800adba:	d100      	bne.n	800adbe <strncpy+0x20>
 800adbc:	bd10      	pop	{r4, pc}
 800adbe:	f803 1b01 	strb.w	r1, [r3], #1
 800adc2:	e7f9      	b.n	800adb8 <strncpy+0x1a>

0800adc4 <_localeconv_r>:
 800adc4:	4800      	ldr	r0, [pc, #0]	@ (800adc8 <_localeconv_r+0x4>)
 800adc6:	4770      	bx	lr
 800adc8:	200001c8 	.word	0x200001c8

0800adcc <_close_r>:
 800adcc:	b538      	push	{r3, r4, r5, lr}
 800adce:	4d06      	ldr	r5, [pc, #24]	@ (800ade8 <_close_r+0x1c>)
 800add0:	2300      	movs	r3, #0
 800add2:	4604      	mov	r4, r0
 800add4:	4608      	mov	r0, r1
 800add6:	602b      	str	r3, [r5, #0]
 800add8:	f7f9 fa14 	bl	8004204 <_close>
 800addc:	1c43      	adds	r3, r0, #1
 800adde:	d102      	bne.n	800ade6 <_close_r+0x1a>
 800ade0:	682b      	ldr	r3, [r5, #0]
 800ade2:	b103      	cbz	r3, 800ade6 <_close_r+0x1a>
 800ade4:	6023      	str	r3, [r4, #0]
 800ade6:	bd38      	pop	{r3, r4, r5, pc}
 800ade8:	2000dfb4 	.word	0x2000dfb4

0800adec <_reclaim_reent>:
 800adec:	4b2d      	ldr	r3, [pc, #180]	@ (800aea4 <_reclaim_reent+0xb8>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	4283      	cmp	r3, r0
 800adf2:	b570      	push	{r4, r5, r6, lr}
 800adf4:	4604      	mov	r4, r0
 800adf6:	d053      	beq.n	800aea0 <_reclaim_reent+0xb4>
 800adf8:	69c3      	ldr	r3, [r0, #28]
 800adfa:	b31b      	cbz	r3, 800ae44 <_reclaim_reent+0x58>
 800adfc:	68db      	ldr	r3, [r3, #12]
 800adfe:	b163      	cbz	r3, 800ae1a <_reclaim_reent+0x2e>
 800ae00:	2500      	movs	r5, #0
 800ae02:	69e3      	ldr	r3, [r4, #28]
 800ae04:	68db      	ldr	r3, [r3, #12]
 800ae06:	5959      	ldr	r1, [r3, r5]
 800ae08:	b9b1      	cbnz	r1, 800ae38 <_reclaim_reent+0x4c>
 800ae0a:	3504      	adds	r5, #4
 800ae0c:	2d80      	cmp	r5, #128	@ 0x80
 800ae0e:	d1f8      	bne.n	800ae02 <_reclaim_reent+0x16>
 800ae10:	69e3      	ldr	r3, [r4, #28]
 800ae12:	4620      	mov	r0, r4
 800ae14:	68d9      	ldr	r1, [r3, #12]
 800ae16:	f000 ff27 	bl	800bc68 <_free_r>
 800ae1a:	69e3      	ldr	r3, [r4, #28]
 800ae1c:	6819      	ldr	r1, [r3, #0]
 800ae1e:	b111      	cbz	r1, 800ae26 <_reclaim_reent+0x3a>
 800ae20:	4620      	mov	r0, r4
 800ae22:	f000 ff21 	bl	800bc68 <_free_r>
 800ae26:	69e3      	ldr	r3, [r4, #28]
 800ae28:	689d      	ldr	r5, [r3, #8]
 800ae2a:	b15d      	cbz	r5, 800ae44 <_reclaim_reent+0x58>
 800ae2c:	4629      	mov	r1, r5
 800ae2e:	4620      	mov	r0, r4
 800ae30:	682d      	ldr	r5, [r5, #0]
 800ae32:	f000 ff19 	bl	800bc68 <_free_r>
 800ae36:	e7f8      	b.n	800ae2a <_reclaim_reent+0x3e>
 800ae38:	680e      	ldr	r6, [r1, #0]
 800ae3a:	4620      	mov	r0, r4
 800ae3c:	f000 ff14 	bl	800bc68 <_free_r>
 800ae40:	4631      	mov	r1, r6
 800ae42:	e7e1      	b.n	800ae08 <_reclaim_reent+0x1c>
 800ae44:	6961      	ldr	r1, [r4, #20]
 800ae46:	b111      	cbz	r1, 800ae4e <_reclaim_reent+0x62>
 800ae48:	4620      	mov	r0, r4
 800ae4a:	f000 ff0d 	bl	800bc68 <_free_r>
 800ae4e:	69e1      	ldr	r1, [r4, #28]
 800ae50:	b111      	cbz	r1, 800ae58 <_reclaim_reent+0x6c>
 800ae52:	4620      	mov	r0, r4
 800ae54:	f000 ff08 	bl	800bc68 <_free_r>
 800ae58:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ae5a:	b111      	cbz	r1, 800ae62 <_reclaim_reent+0x76>
 800ae5c:	4620      	mov	r0, r4
 800ae5e:	f000 ff03 	bl	800bc68 <_free_r>
 800ae62:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ae64:	b111      	cbz	r1, 800ae6c <_reclaim_reent+0x80>
 800ae66:	4620      	mov	r0, r4
 800ae68:	f000 fefe 	bl	800bc68 <_free_r>
 800ae6c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800ae6e:	b111      	cbz	r1, 800ae76 <_reclaim_reent+0x8a>
 800ae70:	4620      	mov	r0, r4
 800ae72:	f000 fef9 	bl	800bc68 <_free_r>
 800ae76:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ae78:	b111      	cbz	r1, 800ae80 <_reclaim_reent+0x94>
 800ae7a:	4620      	mov	r0, r4
 800ae7c:	f000 fef4 	bl	800bc68 <_free_r>
 800ae80:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800ae82:	b111      	cbz	r1, 800ae8a <_reclaim_reent+0x9e>
 800ae84:	4620      	mov	r0, r4
 800ae86:	f000 feef 	bl	800bc68 <_free_r>
 800ae8a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ae8c:	b111      	cbz	r1, 800ae94 <_reclaim_reent+0xa8>
 800ae8e:	4620      	mov	r0, r4
 800ae90:	f000 feea 	bl	800bc68 <_free_r>
 800ae94:	6a23      	ldr	r3, [r4, #32]
 800ae96:	b11b      	cbz	r3, 800aea0 <_reclaim_reent+0xb4>
 800ae98:	4620      	mov	r0, r4
 800ae9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ae9e:	4718      	bx	r3
 800aea0:	bd70      	pop	{r4, r5, r6, pc}
 800aea2:	bf00      	nop
 800aea4:	20000088 	.word	0x20000088

0800aea8 <_lseek_r>:
 800aea8:	b538      	push	{r3, r4, r5, lr}
 800aeaa:	4d07      	ldr	r5, [pc, #28]	@ (800aec8 <_lseek_r+0x20>)
 800aeac:	4604      	mov	r4, r0
 800aeae:	4608      	mov	r0, r1
 800aeb0:	4611      	mov	r1, r2
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	602a      	str	r2, [r5, #0]
 800aeb6:	461a      	mov	r2, r3
 800aeb8:	f7f9 f9cb 	bl	8004252 <_lseek>
 800aebc:	1c43      	adds	r3, r0, #1
 800aebe:	d102      	bne.n	800aec6 <_lseek_r+0x1e>
 800aec0:	682b      	ldr	r3, [r5, #0]
 800aec2:	b103      	cbz	r3, 800aec6 <_lseek_r+0x1e>
 800aec4:	6023      	str	r3, [r4, #0]
 800aec6:	bd38      	pop	{r3, r4, r5, pc}
 800aec8:	2000dfb4 	.word	0x2000dfb4

0800aecc <_read_r>:
 800aecc:	b538      	push	{r3, r4, r5, lr}
 800aece:	4d07      	ldr	r5, [pc, #28]	@ (800aeec <_read_r+0x20>)
 800aed0:	4604      	mov	r4, r0
 800aed2:	4608      	mov	r0, r1
 800aed4:	4611      	mov	r1, r2
 800aed6:	2200      	movs	r2, #0
 800aed8:	602a      	str	r2, [r5, #0]
 800aeda:	461a      	mov	r2, r3
 800aedc:	f7f9 f959 	bl	8004192 <_read>
 800aee0:	1c43      	adds	r3, r0, #1
 800aee2:	d102      	bne.n	800aeea <_read_r+0x1e>
 800aee4:	682b      	ldr	r3, [r5, #0]
 800aee6:	b103      	cbz	r3, 800aeea <_read_r+0x1e>
 800aee8:	6023      	str	r3, [r4, #0]
 800aeea:	bd38      	pop	{r3, r4, r5, pc}
 800aeec:	2000dfb4 	.word	0x2000dfb4

0800aef0 <_sbrk_r>:
 800aef0:	b538      	push	{r3, r4, r5, lr}
 800aef2:	4d06      	ldr	r5, [pc, #24]	@ (800af0c <_sbrk_r+0x1c>)
 800aef4:	2300      	movs	r3, #0
 800aef6:	4604      	mov	r4, r0
 800aef8:	4608      	mov	r0, r1
 800aefa:	602b      	str	r3, [r5, #0]
 800aefc:	f7f9 f9b6 	bl	800426c <_sbrk>
 800af00:	1c43      	adds	r3, r0, #1
 800af02:	d102      	bne.n	800af0a <_sbrk_r+0x1a>
 800af04:	682b      	ldr	r3, [r5, #0]
 800af06:	b103      	cbz	r3, 800af0a <_sbrk_r+0x1a>
 800af08:	6023      	str	r3, [r4, #0]
 800af0a:	bd38      	pop	{r3, r4, r5, pc}
 800af0c:	2000dfb4 	.word	0x2000dfb4

0800af10 <_write_r>:
 800af10:	b538      	push	{r3, r4, r5, lr}
 800af12:	4d07      	ldr	r5, [pc, #28]	@ (800af30 <_write_r+0x20>)
 800af14:	4604      	mov	r4, r0
 800af16:	4608      	mov	r0, r1
 800af18:	4611      	mov	r1, r2
 800af1a:	2200      	movs	r2, #0
 800af1c:	602a      	str	r2, [r5, #0]
 800af1e:	461a      	mov	r2, r3
 800af20:	f7f9 f954 	bl	80041cc <_write>
 800af24:	1c43      	adds	r3, r0, #1
 800af26:	d102      	bne.n	800af2e <_write_r+0x1e>
 800af28:	682b      	ldr	r3, [r5, #0]
 800af2a:	b103      	cbz	r3, 800af2e <_write_r+0x1e>
 800af2c:	6023      	str	r3, [r4, #0]
 800af2e:	bd38      	pop	{r3, r4, r5, pc}
 800af30:	2000dfb4 	.word	0x2000dfb4

0800af34 <__errno>:
 800af34:	4b01      	ldr	r3, [pc, #4]	@ (800af3c <__errno+0x8>)
 800af36:	6818      	ldr	r0, [r3, #0]
 800af38:	4770      	bx	lr
 800af3a:	bf00      	nop
 800af3c:	20000088 	.word	0x20000088

0800af40 <__libc_init_array>:
 800af40:	b570      	push	{r4, r5, r6, lr}
 800af42:	4d0d      	ldr	r5, [pc, #52]	@ (800af78 <__libc_init_array+0x38>)
 800af44:	4c0d      	ldr	r4, [pc, #52]	@ (800af7c <__libc_init_array+0x3c>)
 800af46:	1b64      	subs	r4, r4, r5
 800af48:	10a4      	asrs	r4, r4, #2
 800af4a:	2600      	movs	r6, #0
 800af4c:	42a6      	cmp	r6, r4
 800af4e:	d109      	bne.n	800af64 <__libc_init_array+0x24>
 800af50:	4d0b      	ldr	r5, [pc, #44]	@ (800af80 <__libc_init_array+0x40>)
 800af52:	4c0c      	ldr	r4, [pc, #48]	@ (800af84 <__libc_init_array+0x44>)
 800af54:	f003 fa9e 	bl	800e494 <_init>
 800af58:	1b64      	subs	r4, r4, r5
 800af5a:	10a4      	asrs	r4, r4, #2
 800af5c:	2600      	movs	r6, #0
 800af5e:	42a6      	cmp	r6, r4
 800af60:	d105      	bne.n	800af6e <__libc_init_array+0x2e>
 800af62:	bd70      	pop	{r4, r5, r6, pc}
 800af64:	f855 3b04 	ldr.w	r3, [r5], #4
 800af68:	4798      	blx	r3
 800af6a:	3601      	adds	r6, #1
 800af6c:	e7ee      	b.n	800af4c <__libc_init_array+0xc>
 800af6e:	f855 3b04 	ldr.w	r3, [r5], #4
 800af72:	4798      	blx	r3
 800af74:	3601      	adds	r6, #1
 800af76:	e7f2      	b.n	800af5e <__libc_init_array+0x1e>
 800af78:	0800ef7c 	.word	0x0800ef7c
 800af7c:	0800ef7c 	.word	0x0800ef7c
 800af80:	0800ef7c 	.word	0x0800ef7c
 800af84:	0800ef80 	.word	0x0800ef80

0800af88 <__retarget_lock_init_recursive>:
 800af88:	4770      	bx	lr

0800af8a <__retarget_lock_acquire_recursive>:
 800af8a:	4770      	bx	lr

0800af8c <__retarget_lock_release_recursive>:
 800af8c:	4770      	bx	lr

0800af8e <memcpy>:
 800af8e:	440a      	add	r2, r1
 800af90:	4291      	cmp	r1, r2
 800af92:	f100 33ff 	add.w	r3, r0, #4294967295
 800af96:	d100      	bne.n	800af9a <memcpy+0xc>
 800af98:	4770      	bx	lr
 800af9a:	b510      	push	{r4, lr}
 800af9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800afa0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800afa4:	4291      	cmp	r1, r2
 800afa6:	d1f9      	bne.n	800af9c <memcpy+0xe>
 800afa8:	bd10      	pop	{r4, pc}
	...

0800afac <nanf>:
 800afac:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800afb4 <nanf+0x8>
 800afb0:	4770      	bx	lr
 800afb2:	bf00      	nop
 800afb4:	7fc00000 	.word	0x7fc00000

0800afb8 <quorem>:
 800afb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afbc:	6903      	ldr	r3, [r0, #16]
 800afbe:	690c      	ldr	r4, [r1, #16]
 800afc0:	42a3      	cmp	r3, r4
 800afc2:	4607      	mov	r7, r0
 800afc4:	db7e      	blt.n	800b0c4 <quorem+0x10c>
 800afc6:	3c01      	subs	r4, #1
 800afc8:	f101 0814 	add.w	r8, r1, #20
 800afcc:	00a3      	lsls	r3, r4, #2
 800afce:	f100 0514 	add.w	r5, r0, #20
 800afd2:	9300      	str	r3, [sp, #0]
 800afd4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800afd8:	9301      	str	r3, [sp, #4]
 800afda:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800afde:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800afe2:	3301      	adds	r3, #1
 800afe4:	429a      	cmp	r2, r3
 800afe6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800afea:	fbb2 f6f3 	udiv	r6, r2, r3
 800afee:	d32e      	bcc.n	800b04e <quorem+0x96>
 800aff0:	f04f 0a00 	mov.w	sl, #0
 800aff4:	46c4      	mov	ip, r8
 800aff6:	46ae      	mov	lr, r5
 800aff8:	46d3      	mov	fp, sl
 800affa:	f85c 3b04 	ldr.w	r3, [ip], #4
 800affe:	b298      	uxth	r0, r3
 800b000:	fb06 a000 	mla	r0, r6, r0, sl
 800b004:	0c02      	lsrs	r2, r0, #16
 800b006:	0c1b      	lsrs	r3, r3, #16
 800b008:	fb06 2303 	mla	r3, r6, r3, r2
 800b00c:	f8de 2000 	ldr.w	r2, [lr]
 800b010:	b280      	uxth	r0, r0
 800b012:	b292      	uxth	r2, r2
 800b014:	1a12      	subs	r2, r2, r0
 800b016:	445a      	add	r2, fp
 800b018:	f8de 0000 	ldr.w	r0, [lr]
 800b01c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b020:	b29b      	uxth	r3, r3
 800b022:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b026:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b02a:	b292      	uxth	r2, r2
 800b02c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b030:	45e1      	cmp	r9, ip
 800b032:	f84e 2b04 	str.w	r2, [lr], #4
 800b036:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b03a:	d2de      	bcs.n	800affa <quorem+0x42>
 800b03c:	9b00      	ldr	r3, [sp, #0]
 800b03e:	58eb      	ldr	r3, [r5, r3]
 800b040:	b92b      	cbnz	r3, 800b04e <quorem+0x96>
 800b042:	9b01      	ldr	r3, [sp, #4]
 800b044:	3b04      	subs	r3, #4
 800b046:	429d      	cmp	r5, r3
 800b048:	461a      	mov	r2, r3
 800b04a:	d32f      	bcc.n	800b0ac <quorem+0xf4>
 800b04c:	613c      	str	r4, [r7, #16]
 800b04e:	4638      	mov	r0, r7
 800b050:	f001 f910 	bl	800c274 <__mcmp>
 800b054:	2800      	cmp	r0, #0
 800b056:	db25      	blt.n	800b0a4 <quorem+0xec>
 800b058:	4629      	mov	r1, r5
 800b05a:	2000      	movs	r0, #0
 800b05c:	f858 2b04 	ldr.w	r2, [r8], #4
 800b060:	f8d1 c000 	ldr.w	ip, [r1]
 800b064:	fa1f fe82 	uxth.w	lr, r2
 800b068:	fa1f f38c 	uxth.w	r3, ip
 800b06c:	eba3 030e 	sub.w	r3, r3, lr
 800b070:	4403      	add	r3, r0
 800b072:	0c12      	lsrs	r2, r2, #16
 800b074:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b078:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b07c:	b29b      	uxth	r3, r3
 800b07e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b082:	45c1      	cmp	r9, r8
 800b084:	f841 3b04 	str.w	r3, [r1], #4
 800b088:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b08c:	d2e6      	bcs.n	800b05c <quorem+0xa4>
 800b08e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b092:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b096:	b922      	cbnz	r2, 800b0a2 <quorem+0xea>
 800b098:	3b04      	subs	r3, #4
 800b09a:	429d      	cmp	r5, r3
 800b09c:	461a      	mov	r2, r3
 800b09e:	d30b      	bcc.n	800b0b8 <quorem+0x100>
 800b0a0:	613c      	str	r4, [r7, #16]
 800b0a2:	3601      	adds	r6, #1
 800b0a4:	4630      	mov	r0, r6
 800b0a6:	b003      	add	sp, #12
 800b0a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0ac:	6812      	ldr	r2, [r2, #0]
 800b0ae:	3b04      	subs	r3, #4
 800b0b0:	2a00      	cmp	r2, #0
 800b0b2:	d1cb      	bne.n	800b04c <quorem+0x94>
 800b0b4:	3c01      	subs	r4, #1
 800b0b6:	e7c6      	b.n	800b046 <quorem+0x8e>
 800b0b8:	6812      	ldr	r2, [r2, #0]
 800b0ba:	3b04      	subs	r3, #4
 800b0bc:	2a00      	cmp	r2, #0
 800b0be:	d1ef      	bne.n	800b0a0 <quorem+0xe8>
 800b0c0:	3c01      	subs	r4, #1
 800b0c2:	e7ea      	b.n	800b09a <quorem+0xe2>
 800b0c4:	2000      	movs	r0, #0
 800b0c6:	e7ee      	b.n	800b0a6 <quorem+0xee>

0800b0c8 <_dtoa_r>:
 800b0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0cc:	69c7      	ldr	r7, [r0, #28]
 800b0ce:	b097      	sub	sp, #92	@ 0x5c
 800b0d0:	ed8d 0b04 	vstr	d0, [sp, #16]
 800b0d4:	ec55 4b10 	vmov	r4, r5, d0
 800b0d8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800b0da:	9107      	str	r1, [sp, #28]
 800b0dc:	4681      	mov	r9, r0
 800b0de:	920c      	str	r2, [sp, #48]	@ 0x30
 800b0e0:	9311      	str	r3, [sp, #68]	@ 0x44
 800b0e2:	b97f      	cbnz	r7, 800b104 <_dtoa_r+0x3c>
 800b0e4:	2010      	movs	r0, #16
 800b0e6:	f7fe fdef 	bl	8009cc8 <malloc>
 800b0ea:	4602      	mov	r2, r0
 800b0ec:	f8c9 001c 	str.w	r0, [r9, #28]
 800b0f0:	b920      	cbnz	r0, 800b0fc <_dtoa_r+0x34>
 800b0f2:	4ba9      	ldr	r3, [pc, #676]	@ (800b398 <_dtoa_r+0x2d0>)
 800b0f4:	21ef      	movs	r1, #239	@ 0xef
 800b0f6:	48a9      	ldr	r0, [pc, #676]	@ (800b39c <_dtoa_r+0x2d4>)
 800b0f8:	f002 fb56 	bl	800d7a8 <__assert_func>
 800b0fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b100:	6007      	str	r7, [r0, #0]
 800b102:	60c7      	str	r7, [r0, #12]
 800b104:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b108:	6819      	ldr	r1, [r3, #0]
 800b10a:	b159      	cbz	r1, 800b124 <_dtoa_r+0x5c>
 800b10c:	685a      	ldr	r2, [r3, #4]
 800b10e:	604a      	str	r2, [r1, #4]
 800b110:	2301      	movs	r3, #1
 800b112:	4093      	lsls	r3, r2
 800b114:	608b      	str	r3, [r1, #8]
 800b116:	4648      	mov	r0, r9
 800b118:	f000 fe30 	bl	800bd7c <_Bfree>
 800b11c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b120:	2200      	movs	r2, #0
 800b122:	601a      	str	r2, [r3, #0]
 800b124:	1e2b      	subs	r3, r5, #0
 800b126:	bfb9      	ittee	lt
 800b128:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b12c:	9305      	strlt	r3, [sp, #20]
 800b12e:	2300      	movge	r3, #0
 800b130:	6033      	strge	r3, [r6, #0]
 800b132:	9f05      	ldr	r7, [sp, #20]
 800b134:	4b9a      	ldr	r3, [pc, #616]	@ (800b3a0 <_dtoa_r+0x2d8>)
 800b136:	bfbc      	itt	lt
 800b138:	2201      	movlt	r2, #1
 800b13a:	6032      	strlt	r2, [r6, #0]
 800b13c:	43bb      	bics	r3, r7
 800b13e:	d112      	bne.n	800b166 <_dtoa_r+0x9e>
 800b140:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b142:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b146:	6013      	str	r3, [r2, #0]
 800b148:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b14c:	4323      	orrs	r3, r4
 800b14e:	f000 855a 	beq.w	800bc06 <_dtoa_r+0xb3e>
 800b152:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b154:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800b3b4 <_dtoa_r+0x2ec>
 800b158:	2b00      	cmp	r3, #0
 800b15a:	f000 855c 	beq.w	800bc16 <_dtoa_r+0xb4e>
 800b15e:	f10a 0303 	add.w	r3, sl, #3
 800b162:	f000 bd56 	b.w	800bc12 <_dtoa_r+0xb4a>
 800b166:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b16a:	2200      	movs	r2, #0
 800b16c:	ec51 0b17 	vmov	r0, r1, d7
 800b170:	2300      	movs	r3, #0
 800b172:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800b176:	f7f5 fca7 	bl	8000ac8 <__aeabi_dcmpeq>
 800b17a:	4680      	mov	r8, r0
 800b17c:	b158      	cbz	r0, 800b196 <_dtoa_r+0xce>
 800b17e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b180:	2301      	movs	r3, #1
 800b182:	6013      	str	r3, [r2, #0]
 800b184:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b186:	b113      	cbz	r3, 800b18e <_dtoa_r+0xc6>
 800b188:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b18a:	4b86      	ldr	r3, [pc, #536]	@ (800b3a4 <_dtoa_r+0x2dc>)
 800b18c:	6013      	str	r3, [r2, #0]
 800b18e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800b3b8 <_dtoa_r+0x2f0>
 800b192:	f000 bd40 	b.w	800bc16 <_dtoa_r+0xb4e>
 800b196:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800b19a:	aa14      	add	r2, sp, #80	@ 0x50
 800b19c:	a915      	add	r1, sp, #84	@ 0x54
 800b19e:	4648      	mov	r0, r9
 800b1a0:	f001 f988 	bl	800c4b4 <__d2b>
 800b1a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b1a8:	9002      	str	r0, [sp, #8]
 800b1aa:	2e00      	cmp	r6, #0
 800b1ac:	d078      	beq.n	800b2a0 <_dtoa_r+0x1d8>
 800b1ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b1b0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800b1b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b1b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b1bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b1c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b1c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b1c8:	4619      	mov	r1, r3
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	4b76      	ldr	r3, [pc, #472]	@ (800b3a8 <_dtoa_r+0x2e0>)
 800b1ce:	f7f5 f85b 	bl	8000288 <__aeabi_dsub>
 800b1d2:	a36b      	add	r3, pc, #428	@ (adr r3, 800b380 <_dtoa_r+0x2b8>)
 800b1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1d8:	f7f5 fa0e 	bl	80005f8 <__aeabi_dmul>
 800b1dc:	a36a      	add	r3, pc, #424	@ (adr r3, 800b388 <_dtoa_r+0x2c0>)
 800b1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1e2:	f7f5 f853 	bl	800028c <__adddf3>
 800b1e6:	4604      	mov	r4, r0
 800b1e8:	4630      	mov	r0, r6
 800b1ea:	460d      	mov	r5, r1
 800b1ec:	f7f5 f99a 	bl	8000524 <__aeabi_i2d>
 800b1f0:	a367      	add	r3, pc, #412	@ (adr r3, 800b390 <_dtoa_r+0x2c8>)
 800b1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1f6:	f7f5 f9ff 	bl	80005f8 <__aeabi_dmul>
 800b1fa:	4602      	mov	r2, r0
 800b1fc:	460b      	mov	r3, r1
 800b1fe:	4620      	mov	r0, r4
 800b200:	4629      	mov	r1, r5
 800b202:	f7f5 f843 	bl	800028c <__adddf3>
 800b206:	4604      	mov	r4, r0
 800b208:	460d      	mov	r5, r1
 800b20a:	f7f5 fca5 	bl	8000b58 <__aeabi_d2iz>
 800b20e:	2200      	movs	r2, #0
 800b210:	4607      	mov	r7, r0
 800b212:	2300      	movs	r3, #0
 800b214:	4620      	mov	r0, r4
 800b216:	4629      	mov	r1, r5
 800b218:	f7f5 fc60 	bl	8000adc <__aeabi_dcmplt>
 800b21c:	b140      	cbz	r0, 800b230 <_dtoa_r+0x168>
 800b21e:	4638      	mov	r0, r7
 800b220:	f7f5 f980 	bl	8000524 <__aeabi_i2d>
 800b224:	4622      	mov	r2, r4
 800b226:	462b      	mov	r3, r5
 800b228:	f7f5 fc4e 	bl	8000ac8 <__aeabi_dcmpeq>
 800b22c:	b900      	cbnz	r0, 800b230 <_dtoa_r+0x168>
 800b22e:	3f01      	subs	r7, #1
 800b230:	2f16      	cmp	r7, #22
 800b232:	d852      	bhi.n	800b2da <_dtoa_r+0x212>
 800b234:	4b5d      	ldr	r3, [pc, #372]	@ (800b3ac <_dtoa_r+0x2e4>)
 800b236:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b23e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b242:	f7f5 fc4b 	bl	8000adc <__aeabi_dcmplt>
 800b246:	2800      	cmp	r0, #0
 800b248:	d049      	beq.n	800b2de <_dtoa_r+0x216>
 800b24a:	3f01      	subs	r7, #1
 800b24c:	2300      	movs	r3, #0
 800b24e:	9310      	str	r3, [sp, #64]	@ 0x40
 800b250:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b252:	1b9b      	subs	r3, r3, r6
 800b254:	1e5a      	subs	r2, r3, #1
 800b256:	bf45      	ittet	mi
 800b258:	f1c3 0301 	rsbmi	r3, r3, #1
 800b25c:	9300      	strmi	r3, [sp, #0]
 800b25e:	2300      	movpl	r3, #0
 800b260:	2300      	movmi	r3, #0
 800b262:	9206      	str	r2, [sp, #24]
 800b264:	bf54      	ite	pl
 800b266:	9300      	strpl	r3, [sp, #0]
 800b268:	9306      	strmi	r3, [sp, #24]
 800b26a:	2f00      	cmp	r7, #0
 800b26c:	db39      	blt.n	800b2e2 <_dtoa_r+0x21a>
 800b26e:	9b06      	ldr	r3, [sp, #24]
 800b270:	970d      	str	r7, [sp, #52]	@ 0x34
 800b272:	443b      	add	r3, r7
 800b274:	9306      	str	r3, [sp, #24]
 800b276:	2300      	movs	r3, #0
 800b278:	9308      	str	r3, [sp, #32]
 800b27a:	9b07      	ldr	r3, [sp, #28]
 800b27c:	2b09      	cmp	r3, #9
 800b27e:	d863      	bhi.n	800b348 <_dtoa_r+0x280>
 800b280:	2b05      	cmp	r3, #5
 800b282:	bfc4      	itt	gt
 800b284:	3b04      	subgt	r3, #4
 800b286:	9307      	strgt	r3, [sp, #28]
 800b288:	9b07      	ldr	r3, [sp, #28]
 800b28a:	f1a3 0302 	sub.w	r3, r3, #2
 800b28e:	bfcc      	ite	gt
 800b290:	2400      	movgt	r4, #0
 800b292:	2401      	movle	r4, #1
 800b294:	2b03      	cmp	r3, #3
 800b296:	d863      	bhi.n	800b360 <_dtoa_r+0x298>
 800b298:	e8df f003 	tbb	[pc, r3]
 800b29c:	2b375452 	.word	0x2b375452
 800b2a0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800b2a4:	441e      	add	r6, r3
 800b2a6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b2aa:	2b20      	cmp	r3, #32
 800b2ac:	bfc1      	itttt	gt
 800b2ae:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b2b2:	409f      	lslgt	r7, r3
 800b2b4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b2b8:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b2bc:	bfd6      	itet	le
 800b2be:	f1c3 0320 	rsble	r3, r3, #32
 800b2c2:	ea47 0003 	orrgt.w	r0, r7, r3
 800b2c6:	fa04 f003 	lslle.w	r0, r4, r3
 800b2ca:	f7f5 f91b 	bl	8000504 <__aeabi_ui2d>
 800b2ce:	2201      	movs	r2, #1
 800b2d0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b2d4:	3e01      	subs	r6, #1
 800b2d6:	9212      	str	r2, [sp, #72]	@ 0x48
 800b2d8:	e776      	b.n	800b1c8 <_dtoa_r+0x100>
 800b2da:	2301      	movs	r3, #1
 800b2dc:	e7b7      	b.n	800b24e <_dtoa_r+0x186>
 800b2de:	9010      	str	r0, [sp, #64]	@ 0x40
 800b2e0:	e7b6      	b.n	800b250 <_dtoa_r+0x188>
 800b2e2:	9b00      	ldr	r3, [sp, #0]
 800b2e4:	1bdb      	subs	r3, r3, r7
 800b2e6:	9300      	str	r3, [sp, #0]
 800b2e8:	427b      	negs	r3, r7
 800b2ea:	9308      	str	r3, [sp, #32]
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	930d      	str	r3, [sp, #52]	@ 0x34
 800b2f0:	e7c3      	b.n	800b27a <_dtoa_r+0x1b2>
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b2f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b2f8:	eb07 0b03 	add.w	fp, r7, r3
 800b2fc:	f10b 0301 	add.w	r3, fp, #1
 800b300:	2b01      	cmp	r3, #1
 800b302:	9303      	str	r3, [sp, #12]
 800b304:	bfb8      	it	lt
 800b306:	2301      	movlt	r3, #1
 800b308:	e006      	b.n	800b318 <_dtoa_r+0x250>
 800b30a:	2301      	movs	r3, #1
 800b30c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b30e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b310:	2b00      	cmp	r3, #0
 800b312:	dd28      	ble.n	800b366 <_dtoa_r+0x29e>
 800b314:	469b      	mov	fp, r3
 800b316:	9303      	str	r3, [sp, #12]
 800b318:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800b31c:	2100      	movs	r1, #0
 800b31e:	2204      	movs	r2, #4
 800b320:	f102 0514 	add.w	r5, r2, #20
 800b324:	429d      	cmp	r5, r3
 800b326:	d926      	bls.n	800b376 <_dtoa_r+0x2ae>
 800b328:	6041      	str	r1, [r0, #4]
 800b32a:	4648      	mov	r0, r9
 800b32c:	f000 fce6 	bl	800bcfc <_Balloc>
 800b330:	4682      	mov	sl, r0
 800b332:	2800      	cmp	r0, #0
 800b334:	d142      	bne.n	800b3bc <_dtoa_r+0x2f4>
 800b336:	4b1e      	ldr	r3, [pc, #120]	@ (800b3b0 <_dtoa_r+0x2e8>)
 800b338:	4602      	mov	r2, r0
 800b33a:	f240 11af 	movw	r1, #431	@ 0x1af
 800b33e:	e6da      	b.n	800b0f6 <_dtoa_r+0x2e>
 800b340:	2300      	movs	r3, #0
 800b342:	e7e3      	b.n	800b30c <_dtoa_r+0x244>
 800b344:	2300      	movs	r3, #0
 800b346:	e7d5      	b.n	800b2f4 <_dtoa_r+0x22c>
 800b348:	2401      	movs	r4, #1
 800b34a:	2300      	movs	r3, #0
 800b34c:	9307      	str	r3, [sp, #28]
 800b34e:	9409      	str	r4, [sp, #36]	@ 0x24
 800b350:	f04f 3bff 	mov.w	fp, #4294967295
 800b354:	2200      	movs	r2, #0
 800b356:	f8cd b00c 	str.w	fp, [sp, #12]
 800b35a:	2312      	movs	r3, #18
 800b35c:	920c      	str	r2, [sp, #48]	@ 0x30
 800b35e:	e7db      	b.n	800b318 <_dtoa_r+0x250>
 800b360:	2301      	movs	r3, #1
 800b362:	9309      	str	r3, [sp, #36]	@ 0x24
 800b364:	e7f4      	b.n	800b350 <_dtoa_r+0x288>
 800b366:	f04f 0b01 	mov.w	fp, #1
 800b36a:	f8cd b00c 	str.w	fp, [sp, #12]
 800b36e:	465b      	mov	r3, fp
 800b370:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800b374:	e7d0      	b.n	800b318 <_dtoa_r+0x250>
 800b376:	3101      	adds	r1, #1
 800b378:	0052      	lsls	r2, r2, #1
 800b37a:	e7d1      	b.n	800b320 <_dtoa_r+0x258>
 800b37c:	f3af 8000 	nop.w
 800b380:	636f4361 	.word	0x636f4361
 800b384:	3fd287a7 	.word	0x3fd287a7
 800b388:	8b60c8b3 	.word	0x8b60c8b3
 800b38c:	3fc68a28 	.word	0x3fc68a28
 800b390:	509f79fb 	.word	0x509f79fb
 800b394:	3fd34413 	.word	0x3fd34413
 800b398:	0800eb92 	.word	0x0800eb92
 800b39c:	0800eba9 	.word	0x0800eba9
 800b3a0:	7ff00000 	.word	0x7ff00000
 800b3a4:	0800eb5d 	.word	0x0800eb5d
 800b3a8:	3ff80000 	.word	0x3ff80000
 800b3ac:	0800ed58 	.word	0x0800ed58
 800b3b0:	0800ec01 	.word	0x0800ec01
 800b3b4:	0800eb8e 	.word	0x0800eb8e
 800b3b8:	0800eb5c 	.word	0x0800eb5c
 800b3bc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b3c0:	6018      	str	r0, [r3, #0]
 800b3c2:	9b03      	ldr	r3, [sp, #12]
 800b3c4:	2b0e      	cmp	r3, #14
 800b3c6:	f200 80a1 	bhi.w	800b50c <_dtoa_r+0x444>
 800b3ca:	2c00      	cmp	r4, #0
 800b3cc:	f000 809e 	beq.w	800b50c <_dtoa_r+0x444>
 800b3d0:	2f00      	cmp	r7, #0
 800b3d2:	dd33      	ble.n	800b43c <_dtoa_r+0x374>
 800b3d4:	4b9c      	ldr	r3, [pc, #624]	@ (800b648 <_dtoa_r+0x580>)
 800b3d6:	f007 020f 	and.w	r2, r7, #15
 800b3da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b3de:	ed93 7b00 	vldr	d7, [r3]
 800b3e2:	05f8      	lsls	r0, r7, #23
 800b3e4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800b3e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b3ec:	d516      	bpl.n	800b41c <_dtoa_r+0x354>
 800b3ee:	4b97      	ldr	r3, [pc, #604]	@ (800b64c <_dtoa_r+0x584>)
 800b3f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b3f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b3f8:	f7f5 fa28 	bl	800084c <__aeabi_ddiv>
 800b3fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b400:	f004 040f 	and.w	r4, r4, #15
 800b404:	2603      	movs	r6, #3
 800b406:	4d91      	ldr	r5, [pc, #580]	@ (800b64c <_dtoa_r+0x584>)
 800b408:	b954      	cbnz	r4, 800b420 <_dtoa_r+0x358>
 800b40a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b40e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b412:	f7f5 fa1b 	bl	800084c <__aeabi_ddiv>
 800b416:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b41a:	e028      	b.n	800b46e <_dtoa_r+0x3a6>
 800b41c:	2602      	movs	r6, #2
 800b41e:	e7f2      	b.n	800b406 <_dtoa_r+0x33e>
 800b420:	07e1      	lsls	r1, r4, #31
 800b422:	d508      	bpl.n	800b436 <_dtoa_r+0x36e>
 800b424:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b428:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b42c:	f7f5 f8e4 	bl	80005f8 <__aeabi_dmul>
 800b430:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b434:	3601      	adds	r6, #1
 800b436:	1064      	asrs	r4, r4, #1
 800b438:	3508      	adds	r5, #8
 800b43a:	e7e5      	b.n	800b408 <_dtoa_r+0x340>
 800b43c:	f000 80af 	beq.w	800b59e <_dtoa_r+0x4d6>
 800b440:	427c      	negs	r4, r7
 800b442:	4b81      	ldr	r3, [pc, #516]	@ (800b648 <_dtoa_r+0x580>)
 800b444:	4d81      	ldr	r5, [pc, #516]	@ (800b64c <_dtoa_r+0x584>)
 800b446:	f004 020f 	and.w	r2, r4, #15
 800b44a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b452:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b456:	f7f5 f8cf 	bl	80005f8 <__aeabi_dmul>
 800b45a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b45e:	1124      	asrs	r4, r4, #4
 800b460:	2300      	movs	r3, #0
 800b462:	2602      	movs	r6, #2
 800b464:	2c00      	cmp	r4, #0
 800b466:	f040 808f 	bne.w	800b588 <_dtoa_r+0x4c0>
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d1d3      	bne.n	800b416 <_dtoa_r+0x34e>
 800b46e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b470:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b474:	2b00      	cmp	r3, #0
 800b476:	f000 8094 	beq.w	800b5a2 <_dtoa_r+0x4da>
 800b47a:	4b75      	ldr	r3, [pc, #468]	@ (800b650 <_dtoa_r+0x588>)
 800b47c:	2200      	movs	r2, #0
 800b47e:	4620      	mov	r0, r4
 800b480:	4629      	mov	r1, r5
 800b482:	f7f5 fb2b 	bl	8000adc <__aeabi_dcmplt>
 800b486:	2800      	cmp	r0, #0
 800b488:	f000 808b 	beq.w	800b5a2 <_dtoa_r+0x4da>
 800b48c:	9b03      	ldr	r3, [sp, #12]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	f000 8087 	beq.w	800b5a2 <_dtoa_r+0x4da>
 800b494:	f1bb 0f00 	cmp.w	fp, #0
 800b498:	dd34      	ble.n	800b504 <_dtoa_r+0x43c>
 800b49a:	4620      	mov	r0, r4
 800b49c:	4b6d      	ldr	r3, [pc, #436]	@ (800b654 <_dtoa_r+0x58c>)
 800b49e:	2200      	movs	r2, #0
 800b4a0:	4629      	mov	r1, r5
 800b4a2:	f7f5 f8a9 	bl	80005f8 <__aeabi_dmul>
 800b4a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b4aa:	f107 38ff 	add.w	r8, r7, #4294967295
 800b4ae:	3601      	adds	r6, #1
 800b4b0:	465c      	mov	r4, fp
 800b4b2:	4630      	mov	r0, r6
 800b4b4:	f7f5 f836 	bl	8000524 <__aeabi_i2d>
 800b4b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b4bc:	f7f5 f89c 	bl	80005f8 <__aeabi_dmul>
 800b4c0:	4b65      	ldr	r3, [pc, #404]	@ (800b658 <_dtoa_r+0x590>)
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	f7f4 fee2 	bl	800028c <__adddf3>
 800b4c8:	4605      	mov	r5, r0
 800b4ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b4ce:	2c00      	cmp	r4, #0
 800b4d0:	d16a      	bne.n	800b5a8 <_dtoa_r+0x4e0>
 800b4d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b4d6:	4b61      	ldr	r3, [pc, #388]	@ (800b65c <_dtoa_r+0x594>)
 800b4d8:	2200      	movs	r2, #0
 800b4da:	f7f4 fed5 	bl	8000288 <__aeabi_dsub>
 800b4de:	4602      	mov	r2, r0
 800b4e0:	460b      	mov	r3, r1
 800b4e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b4e6:	462a      	mov	r2, r5
 800b4e8:	4633      	mov	r3, r6
 800b4ea:	f7f5 fb15 	bl	8000b18 <__aeabi_dcmpgt>
 800b4ee:	2800      	cmp	r0, #0
 800b4f0:	f040 8298 	bne.w	800ba24 <_dtoa_r+0x95c>
 800b4f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b4f8:	462a      	mov	r2, r5
 800b4fa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b4fe:	f7f5 faed 	bl	8000adc <__aeabi_dcmplt>
 800b502:	bb38      	cbnz	r0, 800b554 <_dtoa_r+0x48c>
 800b504:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800b508:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b50c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b50e:	2b00      	cmp	r3, #0
 800b510:	f2c0 8157 	blt.w	800b7c2 <_dtoa_r+0x6fa>
 800b514:	2f0e      	cmp	r7, #14
 800b516:	f300 8154 	bgt.w	800b7c2 <_dtoa_r+0x6fa>
 800b51a:	4b4b      	ldr	r3, [pc, #300]	@ (800b648 <_dtoa_r+0x580>)
 800b51c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b520:	ed93 7b00 	vldr	d7, [r3]
 800b524:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b526:	2b00      	cmp	r3, #0
 800b528:	ed8d 7b00 	vstr	d7, [sp]
 800b52c:	f280 80e5 	bge.w	800b6fa <_dtoa_r+0x632>
 800b530:	9b03      	ldr	r3, [sp, #12]
 800b532:	2b00      	cmp	r3, #0
 800b534:	f300 80e1 	bgt.w	800b6fa <_dtoa_r+0x632>
 800b538:	d10c      	bne.n	800b554 <_dtoa_r+0x48c>
 800b53a:	4b48      	ldr	r3, [pc, #288]	@ (800b65c <_dtoa_r+0x594>)
 800b53c:	2200      	movs	r2, #0
 800b53e:	ec51 0b17 	vmov	r0, r1, d7
 800b542:	f7f5 f859 	bl	80005f8 <__aeabi_dmul>
 800b546:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b54a:	f7f5 fadb 	bl	8000b04 <__aeabi_dcmpge>
 800b54e:	2800      	cmp	r0, #0
 800b550:	f000 8266 	beq.w	800ba20 <_dtoa_r+0x958>
 800b554:	2400      	movs	r4, #0
 800b556:	4625      	mov	r5, r4
 800b558:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b55a:	4656      	mov	r6, sl
 800b55c:	ea6f 0803 	mvn.w	r8, r3
 800b560:	2700      	movs	r7, #0
 800b562:	4621      	mov	r1, r4
 800b564:	4648      	mov	r0, r9
 800b566:	f000 fc09 	bl	800bd7c <_Bfree>
 800b56a:	2d00      	cmp	r5, #0
 800b56c:	f000 80bd 	beq.w	800b6ea <_dtoa_r+0x622>
 800b570:	b12f      	cbz	r7, 800b57e <_dtoa_r+0x4b6>
 800b572:	42af      	cmp	r7, r5
 800b574:	d003      	beq.n	800b57e <_dtoa_r+0x4b6>
 800b576:	4639      	mov	r1, r7
 800b578:	4648      	mov	r0, r9
 800b57a:	f000 fbff 	bl	800bd7c <_Bfree>
 800b57e:	4629      	mov	r1, r5
 800b580:	4648      	mov	r0, r9
 800b582:	f000 fbfb 	bl	800bd7c <_Bfree>
 800b586:	e0b0      	b.n	800b6ea <_dtoa_r+0x622>
 800b588:	07e2      	lsls	r2, r4, #31
 800b58a:	d505      	bpl.n	800b598 <_dtoa_r+0x4d0>
 800b58c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b590:	f7f5 f832 	bl	80005f8 <__aeabi_dmul>
 800b594:	3601      	adds	r6, #1
 800b596:	2301      	movs	r3, #1
 800b598:	1064      	asrs	r4, r4, #1
 800b59a:	3508      	adds	r5, #8
 800b59c:	e762      	b.n	800b464 <_dtoa_r+0x39c>
 800b59e:	2602      	movs	r6, #2
 800b5a0:	e765      	b.n	800b46e <_dtoa_r+0x3a6>
 800b5a2:	9c03      	ldr	r4, [sp, #12]
 800b5a4:	46b8      	mov	r8, r7
 800b5a6:	e784      	b.n	800b4b2 <_dtoa_r+0x3ea>
 800b5a8:	4b27      	ldr	r3, [pc, #156]	@ (800b648 <_dtoa_r+0x580>)
 800b5aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b5ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b5b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b5b4:	4454      	add	r4, sl
 800b5b6:	2900      	cmp	r1, #0
 800b5b8:	d054      	beq.n	800b664 <_dtoa_r+0x59c>
 800b5ba:	4929      	ldr	r1, [pc, #164]	@ (800b660 <_dtoa_r+0x598>)
 800b5bc:	2000      	movs	r0, #0
 800b5be:	f7f5 f945 	bl	800084c <__aeabi_ddiv>
 800b5c2:	4633      	mov	r3, r6
 800b5c4:	462a      	mov	r2, r5
 800b5c6:	f7f4 fe5f 	bl	8000288 <__aeabi_dsub>
 800b5ca:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b5ce:	4656      	mov	r6, sl
 800b5d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b5d4:	f7f5 fac0 	bl	8000b58 <__aeabi_d2iz>
 800b5d8:	4605      	mov	r5, r0
 800b5da:	f7f4 ffa3 	bl	8000524 <__aeabi_i2d>
 800b5de:	4602      	mov	r2, r0
 800b5e0:	460b      	mov	r3, r1
 800b5e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b5e6:	f7f4 fe4f 	bl	8000288 <__aeabi_dsub>
 800b5ea:	3530      	adds	r5, #48	@ 0x30
 800b5ec:	4602      	mov	r2, r0
 800b5ee:	460b      	mov	r3, r1
 800b5f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b5f4:	f806 5b01 	strb.w	r5, [r6], #1
 800b5f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b5fc:	f7f5 fa6e 	bl	8000adc <__aeabi_dcmplt>
 800b600:	2800      	cmp	r0, #0
 800b602:	d172      	bne.n	800b6ea <_dtoa_r+0x622>
 800b604:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b608:	4911      	ldr	r1, [pc, #68]	@ (800b650 <_dtoa_r+0x588>)
 800b60a:	2000      	movs	r0, #0
 800b60c:	f7f4 fe3c 	bl	8000288 <__aeabi_dsub>
 800b610:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b614:	f7f5 fa62 	bl	8000adc <__aeabi_dcmplt>
 800b618:	2800      	cmp	r0, #0
 800b61a:	f040 80b4 	bne.w	800b786 <_dtoa_r+0x6be>
 800b61e:	42a6      	cmp	r6, r4
 800b620:	f43f af70 	beq.w	800b504 <_dtoa_r+0x43c>
 800b624:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b628:	4b0a      	ldr	r3, [pc, #40]	@ (800b654 <_dtoa_r+0x58c>)
 800b62a:	2200      	movs	r2, #0
 800b62c:	f7f4 ffe4 	bl	80005f8 <__aeabi_dmul>
 800b630:	4b08      	ldr	r3, [pc, #32]	@ (800b654 <_dtoa_r+0x58c>)
 800b632:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b636:	2200      	movs	r2, #0
 800b638:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b63c:	f7f4 ffdc 	bl	80005f8 <__aeabi_dmul>
 800b640:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b644:	e7c4      	b.n	800b5d0 <_dtoa_r+0x508>
 800b646:	bf00      	nop
 800b648:	0800ed58 	.word	0x0800ed58
 800b64c:	0800ed30 	.word	0x0800ed30
 800b650:	3ff00000 	.word	0x3ff00000
 800b654:	40240000 	.word	0x40240000
 800b658:	401c0000 	.word	0x401c0000
 800b65c:	40140000 	.word	0x40140000
 800b660:	3fe00000 	.word	0x3fe00000
 800b664:	4631      	mov	r1, r6
 800b666:	4628      	mov	r0, r5
 800b668:	f7f4 ffc6 	bl	80005f8 <__aeabi_dmul>
 800b66c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b670:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b672:	4656      	mov	r6, sl
 800b674:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b678:	f7f5 fa6e 	bl	8000b58 <__aeabi_d2iz>
 800b67c:	4605      	mov	r5, r0
 800b67e:	f7f4 ff51 	bl	8000524 <__aeabi_i2d>
 800b682:	4602      	mov	r2, r0
 800b684:	460b      	mov	r3, r1
 800b686:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b68a:	f7f4 fdfd 	bl	8000288 <__aeabi_dsub>
 800b68e:	3530      	adds	r5, #48	@ 0x30
 800b690:	f806 5b01 	strb.w	r5, [r6], #1
 800b694:	4602      	mov	r2, r0
 800b696:	460b      	mov	r3, r1
 800b698:	42a6      	cmp	r6, r4
 800b69a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b69e:	f04f 0200 	mov.w	r2, #0
 800b6a2:	d124      	bne.n	800b6ee <_dtoa_r+0x626>
 800b6a4:	4baf      	ldr	r3, [pc, #700]	@ (800b964 <_dtoa_r+0x89c>)
 800b6a6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b6aa:	f7f4 fdef 	bl	800028c <__adddf3>
 800b6ae:	4602      	mov	r2, r0
 800b6b0:	460b      	mov	r3, r1
 800b6b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b6b6:	f7f5 fa2f 	bl	8000b18 <__aeabi_dcmpgt>
 800b6ba:	2800      	cmp	r0, #0
 800b6bc:	d163      	bne.n	800b786 <_dtoa_r+0x6be>
 800b6be:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b6c2:	49a8      	ldr	r1, [pc, #672]	@ (800b964 <_dtoa_r+0x89c>)
 800b6c4:	2000      	movs	r0, #0
 800b6c6:	f7f4 fddf 	bl	8000288 <__aeabi_dsub>
 800b6ca:	4602      	mov	r2, r0
 800b6cc:	460b      	mov	r3, r1
 800b6ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b6d2:	f7f5 fa03 	bl	8000adc <__aeabi_dcmplt>
 800b6d6:	2800      	cmp	r0, #0
 800b6d8:	f43f af14 	beq.w	800b504 <_dtoa_r+0x43c>
 800b6dc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b6de:	1e73      	subs	r3, r6, #1
 800b6e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b6e2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b6e6:	2b30      	cmp	r3, #48	@ 0x30
 800b6e8:	d0f8      	beq.n	800b6dc <_dtoa_r+0x614>
 800b6ea:	4647      	mov	r7, r8
 800b6ec:	e03b      	b.n	800b766 <_dtoa_r+0x69e>
 800b6ee:	4b9e      	ldr	r3, [pc, #632]	@ (800b968 <_dtoa_r+0x8a0>)
 800b6f0:	f7f4 ff82 	bl	80005f8 <__aeabi_dmul>
 800b6f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b6f8:	e7bc      	b.n	800b674 <_dtoa_r+0x5ac>
 800b6fa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b6fe:	4656      	mov	r6, sl
 800b700:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b704:	4620      	mov	r0, r4
 800b706:	4629      	mov	r1, r5
 800b708:	f7f5 f8a0 	bl	800084c <__aeabi_ddiv>
 800b70c:	f7f5 fa24 	bl	8000b58 <__aeabi_d2iz>
 800b710:	4680      	mov	r8, r0
 800b712:	f7f4 ff07 	bl	8000524 <__aeabi_i2d>
 800b716:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b71a:	f7f4 ff6d 	bl	80005f8 <__aeabi_dmul>
 800b71e:	4602      	mov	r2, r0
 800b720:	460b      	mov	r3, r1
 800b722:	4620      	mov	r0, r4
 800b724:	4629      	mov	r1, r5
 800b726:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b72a:	f7f4 fdad 	bl	8000288 <__aeabi_dsub>
 800b72e:	f806 4b01 	strb.w	r4, [r6], #1
 800b732:	9d03      	ldr	r5, [sp, #12]
 800b734:	eba6 040a 	sub.w	r4, r6, sl
 800b738:	42a5      	cmp	r5, r4
 800b73a:	4602      	mov	r2, r0
 800b73c:	460b      	mov	r3, r1
 800b73e:	d133      	bne.n	800b7a8 <_dtoa_r+0x6e0>
 800b740:	f7f4 fda4 	bl	800028c <__adddf3>
 800b744:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b748:	4604      	mov	r4, r0
 800b74a:	460d      	mov	r5, r1
 800b74c:	f7f5 f9e4 	bl	8000b18 <__aeabi_dcmpgt>
 800b750:	b9c0      	cbnz	r0, 800b784 <_dtoa_r+0x6bc>
 800b752:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b756:	4620      	mov	r0, r4
 800b758:	4629      	mov	r1, r5
 800b75a:	f7f5 f9b5 	bl	8000ac8 <__aeabi_dcmpeq>
 800b75e:	b110      	cbz	r0, 800b766 <_dtoa_r+0x69e>
 800b760:	f018 0f01 	tst.w	r8, #1
 800b764:	d10e      	bne.n	800b784 <_dtoa_r+0x6bc>
 800b766:	9902      	ldr	r1, [sp, #8]
 800b768:	4648      	mov	r0, r9
 800b76a:	f000 fb07 	bl	800bd7c <_Bfree>
 800b76e:	2300      	movs	r3, #0
 800b770:	7033      	strb	r3, [r6, #0]
 800b772:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b774:	3701      	adds	r7, #1
 800b776:	601f      	str	r7, [r3, #0]
 800b778:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	f000 824b 	beq.w	800bc16 <_dtoa_r+0xb4e>
 800b780:	601e      	str	r6, [r3, #0]
 800b782:	e248      	b.n	800bc16 <_dtoa_r+0xb4e>
 800b784:	46b8      	mov	r8, r7
 800b786:	4633      	mov	r3, r6
 800b788:	461e      	mov	r6, r3
 800b78a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b78e:	2a39      	cmp	r2, #57	@ 0x39
 800b790:	d106      	bne.n	800b7a0 <_dtoa_r+0x6d8>
 800b792:	459a      	cmp	sl, r3
 800b794:	d1f8      	bne.n	800b788 <_dtoa_r+0x6c0>
 800b796:	2230      	movs	r2, #48	@ 0x30
 800b798:	f108 0801 	add.w	r8, r8, #1
 800b79c:	f88a 2000 	strb.w	r2, [sl]
 800b7a0:	781a      	ldrb	r2, [r3, #0]
 800b7a2:	3201      	adds	r2, #1
 800b7a4:	701a      	strb	r2, [r3, #0]
 800b7a6:	e7a0      	b.n	800b6ea <_dtoa_r+0x622>
 800b7a8:	4b6f      	ldr	r3, [pc, #444]	@ (800b968 <_dtoa_r+0x8a0>)
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	f7f4 ff24 	bl	80005f8 <__aeabi_dmul>
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	4604      	mov	r4, r0
 800b7b6:	460d      	mov	r5, r1
 800b7b8:	f7f5 f986 	bl	8000ac8 <__aeabi_dcmpeq>
 800b7bc:	2800      	cmp	r0, #0
 800b7be:	d09f      	beq.n	800b700 <_dtoa_r+0x638>
 800b7c0:	e7d1      	b.n	800b766 <_dtoa_r+0x69e>
 800b7c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b7c4:	2a00      	cmp	r2, #0
 800b7c6:	f000 80ea 	beq.w	800b99e <_dtoa_r+0x8d6>
 800b7ca:	9a07      	ldr	r2, [sp, #28]
 800b7cc:	2a01      	cmp	r2, #1
 800b7ce:	f300 80cd 	bgt.w	800b96c <_dtoa_r+0x8a4>
 800b7d2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b7d4:	2a00      	cmp	r2, #0
 800b7d6:	f000 80c1 	beq.w	800b95c <_dtoa_r+0x894>
 800b7da:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b7de:	9c08      	ldr	r4, [sp, #32]
 800b7e0:	9e00      	ldr	r6, [sp, #0]
 800b7e2:	9a00      	ldr	r2, [sp, #0]
 800b7e4:	441a      	add	r2, r3
 800b7e6:	9200      	str	r2, [sp, #0]
 800b7e8:	9a06      	ldr	r2, [sp, #24]
 800b7ea:	2101      	movs	r1, #1
 800b7ec:	441a      	add	r2, r3
 800b7ee:	4648      	mov	r0, r9
 800b7f0:	9206      	str	r2, [sp, #24]
 800b7f2:	f000 fbc1 	bl	800bf78 <__i2b>
 800b7f6:	4605      	mov	r5, r0
 800b7f8:	b166      	cbz	r6, 800b814 <_dtoa_r+0x74c>
 800b7fa:	9b06      	ldr	r3, [sp, #24]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	dd09      	ble.n	800b814 <_dtoa_r+0x74c>
 800b800:	42b3      	cmp	r3, r6
 800b802:	9a00      	ldr	r2, [sp, #0]
 800b804:	bfa8      	it	ge
 800b806:	4633      	movge	r3, r6
 800b808:	1ad2      	subs	r2, r2, r3
 800b80a:	9200      	str	r2, [sp, #0]
 800b80c:	9a06      	ldr	r2, [sp, #24]
 800b80e:	1af6      	subs	r6, r6, r3
 800b810:	1ad3      	subs	r3, r2, r3
 800b812:	9306      	str	r3, [sp, #24]
 800b814:	9b08      	ldr	r3, [sp, #32]
 800b816:	b30b      	cbz	r3, 800b85c <_dtoa_r+0x794>
 800b818:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	f000 80c6 	beq.w	800b9ac <_dtoa_r+0x8e4>
 800b820:	2c00      	cmp	r4, #0
 800b822:	f000 80c0 	beq.w	800b9a6 <_dtoa_r+0x8de>
 800b826:	4629      	mov	r1, r5
 800b828:	4622      	mov	r2, r4
 800b82a:	4648      	mov	r0, r9
 800b82c:	f000 fc5c 	bl	800c0e8 <__pow5mult>
 800b830:	9a02      	ldr	r2, [sp, #8]
 800b832:	4601      	mov	r1, r0
 800b834:	4605      	mov	r5, r0
 800b836:	4648      	mov	r0, r9
 800b838:	f000 fbb4 	bl	800bfa4 <__multiply>
 800b83c:	9902      	ldr	r1, [sp, #8]
 800b83e:	4680      	mov	r8, r0
 800b840:	4648      	mov	r0, r9
 800b842:	f000 fa9b 	bl	800bd7c <_Bfree>
 800b846:	9b08      	ldr	r3, [sp, #32]
 800b848:	1b1b      	subs	r3, r3, r4
 800b84a:	9308      	str	r3, [sp, #32]
 800b84c:	f000 80b1 	beq.w	800b9b2 <_dtoa_r+0x8ea>
 800b850:	9a08      	ldr	r2, [sp, #32]
 800b852:	4641      	mov	r1, r8
 800b854:	4648      	mov	r0, r9
 800b856:	f000 fc47 	bl	800c0e8 <__pow5mult>
 800b85a:	9002      	str	r0, [sp, #8]
 800b85c:	2101      	movs	r1, #1
 800b85e:	4648      	mov	r0, r9
 800b860:	f000 fb8a 	bl	800bf78 <__i2b>
 800b864:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b866:	4604      	mov	r4, r0
 800b868:	2b00      	cmp	r3, #0
 800b86a:	f000 81d8 	beq.w	800bc1e <_dtoa_r+0xb56>
 800b86e:	461a      	mov	r2, r3
 800b870:	4601      	mov	r1, r0
 800b872:	4648      	mov	r0, r9
 800b874:	f000 fc38 	bl	800c0e8 <__pow5mult>
 800b878:	9b07      	ldr	r3, [sp, #28]
 800b87a:	2b01      	cmp	r3, #1
 800b87c:	4604      	mov	r4, r0
 800b87e:	f300 809f 	bgt.w	800b9c0 <_dtoa_r+0x8f8>
 800b882:	9b04      	ldr	r3, [sp, #16]
 800b884:	2b00      	cmp	r3, #0
 800b886:	f040 8097 	bne.w	800b9b8 <_dtoa_r+0x8f0>
 800b88a:	9b05      	ldr	r3, [sp, #20]
 800b88c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b890:	2b00      	cmp	r3, #0
 800b892:	f040 8093 	bne.w	800b9bc <_dtoa_r+0x8f4>
 800b896:	9b05      	ldr	r3, [sp, #20]
 800b898:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b89c:	0d1b      	lsrs	r3, r3, #20
 800b89e:	051b      	lsls	r3, r3, #20
 800b8a0:	b133      	cbz	r3, 800b8b0 <_dtoa_r+0x7e8>
 800b8a2:	9b00      	ldr	r3, [sp, #0]
 800b8a4:	3301      	adds	r3, #1
 800b8a6:	9300      	str	r3, [sp, #0]
 800b8a8:	9b06      	ldr	r3, [sp, #24]
 800b8aa:	3301      	adds	r3, #1
 800b8ac:	9306      	str	r3, [sp, #24]
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	9308      	str	r3, [sp, #32]
 800b8b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	f000 81b8 	beq.w	800bc2a <_dtoa_r+0xb62>
 800b8ba:	6923      	ldr	r3, [r4, #16]
 800b8bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b8c0:	6918      	ldr	r0, [r3, #16]
 800b8c2:	f000 fb0d 	bl	800bee0 <__hi0bits>
 800b8c6:	f1c0 0020 	rsb	r0, r0, #32
 800b8ca:	9b06      	ldr	r3, [sp, #24]
 800b8cc:	4418      	add	r0, r3
 800b8ce:	f010 001f 	ands.w	r0, r0, #31
 800b8d2:	f000 8082 	beq.w	800b9da <_dtoa_r+0x912>
 800b8d6:	f1c0 0320 	rsb	r3, r0, #32
 800b8da:	2b04      	cmp	r3, #4
 800b8dc:	dd73      	ble.n	800b9c6 <_dtoa_r+0x8fe>
 800b8de:	9b00      	ldr	r3, [sp, #0]
 800b8e0:	f1c0 001c 	rsb	r0, r0, #28
 800b8e4:	4403      	add	r3, r0
 800b8e6:	9300      	str	r3, [sp, #0]
 800b8e8:	9b06      	ldr	r3, [sp, #24]
 800b8ea:	4403      	add	r3, r0
 800b8ec:	4406      	add	r6, r0
 800b8ee:	9306      	str	r3, [sp, #24]
 800b8f0:	9b00      	ldr	r3, [sp, #0]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	dd05      	ble.n	800b902 <_dtoa_r+0x83a>
 800b8f6:	9902      	ldr	r1, [sp, #8]
 800b8f8:	461a      	mov	r2, r3
 800b8fa:	4648      	mov	r0, r9
 800b8fc:	f000 fc4e 	bl	800c19c <__lshift>
 800b900:	9002      	str	r0, [sp, #8]
 800b902:	9b06      	ldr	r3, [sp, #24]
 800b904:	2b00      	cmp	r3, #0
 800b906:	dd05      	ble.n	800b914 <_dtoa_r+0x84c>
 800b908:	4621      	mov	r1, r4
 800b90a:	461a      	mov	r2, r3
 800b90c:	4648      	mov	r0, r9
 800b90e:	f000 fc45 	bl	800c19c <__lshift>
 800b912:	4604      	mov	r4, r0
 800b914:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b916:	2b00      	cmp	r3, #0
 800b918:	d061      	beq.n	800b9de <_dtoa_r+0x916>
 800b91a:	9802      	ldr	r0, [sp, #8]
 800b91c:	4621      	mov	r1, r4
 800b91e:	f000 fca9 	bl	800c274 <__mcmp>
 800b922:	2800      	cmp	r0, #0
 800b924:	da5b      	bge.n	800b9de <_dtoa_r+0x916>
 800b926:	2300      	movs	r3, #0
 800b928:	9902      	ldr	r1, [sp, #8]
 800b92a:	220a      	movs	r2, #10
 800b92c:	4648      	mov	r0, r9
 800b92e:	f000 fa47 	bl	800bdc0 <__multadd>
 800b932:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b934:	9002      	str	r0, [sp, #8]
 800b936:	f107 38ff 	add.w	r8, r7, #4294967295
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	f000 8177 	beq.w	800bc2e <_dtoa_r+0xb66>
 800b940:	4629      	mov	r1, r5
 800b942:	2300      	movs	r3, #0
 800b944:	220a      	movs	r2, #10
 800b946:	4648      	mov	r0, r9
 800b948:	f000 fa3a 	bl	800bdc0 <__multadd>
 800b94c:	f1bb 0f00 	cmp.w	fp, #0
 800b950:	4605      	mov	r5, r0
 800b952:	dc6f      	bgt.n	800ba34 <_dtoa_r+0x96c>
 800b954:	9b07      	ldr	r3, [sp, #28]
 800b956:	2b02      	cmp	r3, #2
 800b958:	dc49      	bgt.n	800b9ee <_dtoa_r+0x926>
 800b95a:	e06b      	b.n	800ba34 <_dtoa_r+0x96c>
 800b95c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b95e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b962:	e73c      	b.n	800b7de <_dtoa_r+0x716>
 800b964:	3fe00000 	.word	0x3fe00000
 800b968:	40240000 	.word	0x40240000
 800b96c:	9b03      	ldr	r3, [sp, #12]
 800b96e:	1e5c      	subs	r4, r3, #1
 800b970:	9b08      	ldr	r3, [sp, #32]
 800b972:	42a3      	cmp	r3, r4
 800b974:	db09      	blt.n	800b98a <_dtoa_r+0x8c2>
 800b976:	1b1c      	subs	r4, r3, r4
 800b978:	9b03      	ldr	r3, [sp, #12]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	f6bf af30 	bge.w	800b7e0 <_dtoa_r+0x718>
 800b980:	9b00      	ldr	r3, [sp, #0]
 800b982:	9a03      	ldr	r2, [sp, #12]
 800b984:	1a9e      	subs	r6, r3, r2
 800b986:	2300      	movs	r3, #0
 800b988:	e72b      	b.n	800b7e2 <_dtoa_r+0x71a>
 800b98a:	9b08      	ldr	r3, [sp, #32]
 800b98c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b98e:	9408      	str	r4, [sp, #32]
 800b990:	1ae3      	subs	r3, r4, r3
 800b992:	441a      	add	r2, r3
 800b994:	9e00      	ldr	r6, [sp, #0]
 800b996:	9b03      	ldr	r3, [sp, #12]
 800b998:	920d      	str	r2, [sp, #52]	@ 0x34
 800b99a:	2400      	movs	r4, #0
 800b99c:	e721      	b.n	800b7e2 <_dtoa_r+0x71a>
 800b99e:	9c08      	ldr	r4, [sp, #32]
 800b9a0:	9e00      	ldr	r6, [sp, #0]
 800b9a2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800b9a4:	e728      	b.n	800b7f8 <_dtoa_r+0x730>
 800b9a6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800b9aa:	e751      	b.n	800b850 <_dtoa_r+0x788>
 800b9ac:	9a08      	ldr	r2, [sp, #32]
 800b9ae:	9902      	ldr	r1, [sp, #8]
 800b9b0:	e750      	b.n	800b854 <_dtoa_r+0x78c>
 800b9b2:	f8cd 8008 	str.w	r8, [sp, #8]
 800b9b6:	e751      	b.n	800b85c <_dtoa_r+0x794>
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	e779      	b.n	800b8b0 <_dtoa_r+0x7e8>
 800b9bc:	9b04      	ldr	r3, [sp, #16]
 800b9be:	e777      	b.n	800b8b0 <_dtoa_r+0x7e8>
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	9308      	str	r3, [sp, #32]
 800b9c4:	e779      	b.n	800b8ba <_dtoa_r+0x7f2>
 800b9c6:	d093      	beq.n	800b8f0 <_dtoa_r+0x828>
 800b9c8:	9a00      	ldr	r2, [sp, #0]
 800b9ca:	331c      	adds	r3, #28
 800b9cc:	441a      	add	r2, r3
 800b9ce:	9200      	str	r2, [sp, #0]
 800b9d0:	9a06      	ldr	r2, [sp, #24]
 800b9d2:	441a      	add	r2, r3
 800b9d4:	441e      	add	r6, r3
 800b9d6:	9206      	str	r2, [sp, #24]
 800b9d8:	e78a      	b.n	800b8f0 <_dtoa_r+0x828>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	e7f4      	b.n	800b9c8 <_dtoa_r+0x900>
 800b9de:	9b03      	ldr	r3, [sp, #12]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	46b8      	mov	r8, r7
 800b9e4:	dc20      	bgt.n	800ba28 <_dtoa_r+0x960>
 800b9e6:	469b      	mov	fp, r3
 800b9e8:	9b07      	ldr	r3, [sp, #28]
 800b9ea:	2b02      	cmp	r3, #2
 800b9ec:	dd1e      	ble.n	800ba2c <_dtoa_r+0x964>
 800b9ee:	f1bb 0f00 	cmp.w	fp, #0
 800b9f2:	f47f adb1 	bne.w	800b558 <_dtoa_r+0x490>
 800b9f6:	4621      	mov	r1, r4
 800b9f8:	465b      	mov	r3, fp
 800b9fa:	2205      	movs	r2, #5
 800b9fc:	4648      	mov	r0, r9
 800b9fe:	f000 f9df 	bl	800bdc0 <__multadd>
 800ba02:	4601      	mov	r1, r0
 800ba04:	4604      	mov	r4, r0
 800ba06:	9802      	ldr	r0, [sp, #8]
 800ba08:	f000 fc34 	bl	800c274 <__mcmp>
 800ba0c:	2800      	cmp	r0, #0
 800ba0e:	f77f ada3 	ble.w	800b558 <_dtoa_r+0x490>
 800ba12:	4656      	mov	r6, sl
 800ba14:	2331      	movs	r3, #49	@ 0x31
 800ba16:	f806 3b01 	strb.w	r3, [r6], #1
 800ba1a:	f108 0801 	add.w	r8, r8, #1
 800ba1e:	e59f      	b.n	800b560 <_dtoa_r+0x498>
 800ba20:	9c03      	ldr	r4, [sp, #12]
 800ba22:	46b8      	mov	r8, r7
 800ba24:	4625      	mov	r5, r4
 800ba26:	e7f4      	b.n	800ba12 <_dtoa_r+0x94a>
 800ba28:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800ba2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	f000 8101 	beq.w	800bc36 <_dtoa_r+0xb6e>
 800ba34:	2e00      	cmp	r6, #0
 800ba36:	dd05      	ble.n	800ba44 <_dtoa_r+0x97c>
 800ba38:	4629      	mov	r1, r5
 800ba3a:	4632      	mov	r2, r6
 800ba3c:	4648      	mov	r0, r9
 800ba3e:	f000 fbad 	bl	800c19c <__lshift>
 800ba42:	4605      	mov	r5, r0
 800ba44:	9b08      	ldr	r3, [sp, #32]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d05c      	beq.n	800bb04 <_dtoa_r+0xa3c>
 800ba4a:	6869      	ldr	r1, [r5, #4]
 800ba4c:	4648      	mov	r0, r9
 800ba4e:	f000 f955 	bl	800bcfc <_Balloc>
 800ba52:	4606      	mov	r6, r0
 800ba54:	b928      	cbnz	r0, 800ba62 <_dtoa_r+0x99a>
 800ba56:	4b82      	ldr	r3, [pc, #520]	@ (800bc60 <_dtoa_r+0xb98>)
 800ba58:	4602      	mov	r2, r0
 800ba5a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ba5e:	f7ff bb4a 	b.w	800b0f6 <_dtoa_r+0x2e>
 800ba62:	692a      	ldr	r2, [r5, #16]
 800ba64:	3202      	adds	r2, #2
 800ba66:	0092      	lsls	r2, r2, #2
 800ba68:	f105 010c 	add.w	r1, r5, #12
 800ba6c:	300c      	adds	r0, #12
 800ba6e:	f7ff fa8e 	bl	800af8e <memcpy>
 800ba72:	2201      	movs	r2, #1
 800ba74:	4631      	mov	r1, r6
 800ba76:	4648      	mov	r0, r9
 800ba78:	f000 fb90 	bl	800c19c <__lshift>
 800ba7c:	f10a 0301 	add.w	r3, sl, #1
 800ba80:	9300      	str	r3, [sp, #0]
 800ba82:	eb0a 030b 	add.w	r3, sl, fp
 800ba86:	9308      	str	r3, [sp, #32]
 800ba88:	9b04      	ldr	r3, [sp, #16]
 800ba8a:	f003 0301 	and.w	r3, r3, #1
 800ba8e:	462f      	mov	r7, r5
 800ba90:	9306      	str	r3, [sp, #24]
 800ba92:	4605      	mov	r5, r0
 800ba94:	9b00      	ldr	r3, [sp, #0]
 800ba96:	9802      	ldr	r0, [sp, #8]
 800ba98:	4621      	mov	r1, r4
 800ba9a:	f103 3bff 	add.w	fp, r3, #4294967295
 800ba9e:	f7ff fa8b 	bl	800afb8 <quorem>
 800baa2:	4603      	mov	r3, r0
 800baa4:	3330      	adds	r3, #48	@ 0x30
 800baa6:	9003      	str	r0, [sp, #12]
 800baa8:	4639      	mov	r1, r7
 800baaa:	9802      	ldr	r0, [sp, #8]
 800baac:	9309      	str	r3, [sp, #36]	@ 0x24
 800baae:	f000 fbe1 	bl	800c274 <__mcmp>
 800bab2:	462a      	mov	r2, r5
 800bab4:	9004      	str	r0, [sp, #16]
 800bab6:	4621      	mov	r1, r4
 800bab8:	4648      	mov	r0, r9
 800baba:	f000 fbf7 	bl	800c2ac <__mdiff>
 800babe:	68c2      	ldr	r2, [r0, #12]
 800bac0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bac2:	4606      	mov	r6, r0
 800bac4:	bb02      	cbnz	r2, 800bb08 <_dtoa_r+0xa40>
 800bac6:	4601      	mov	r1, r0
 800bac8:	9802      	ldr	r0, [sp, #8]
 800baca:	f000 fbd3 	bl	800c274 <__mcmp>
 800bace:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bad0:	4602      	mov	r2, r0
 800bad2:	4631      	mov	r1, r6
 800bad4:	4648      	mov	r0, r9
 800bad6:	920c      	str	r2, [sp, #48]	@ 0x30
 800bad8:	9309      	str	r3, [sp, #36]	@ 0x24
 800bada:	f000 f94f 	bl	800bd7c <_Bfree>
 800bade:	9b07      	ldr	r3, [sp, #28]
 800bae0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bae2:	9e00      	ldr	r6, [sp, #0]
 800bae4:	ea42 0103 	orr.w	r1, r2, r3
 800bae8:	9b06      	ldr	r3, [sp, #24]
 800baea:	4319      	orrs	r1, r3
 800baec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800baee:	d10d      	bne.n	800bb0c <_dtoa_r+0xa44>
 800baf0:	2b39      	cmp	r3, #57	@ 0x39
 800baf2:	d027      	beq.n	800bb44 <_dtoa_r+0xa7c>
 800baf4:	9a04      	ldr	r2, [sp, #16]
 800baf6:	2a00      	cmp	r2, #0
 800baf8:	dd01      	ble.n	800bafe <_dtoa_r+0xa36>
 800bafa:	9b03      	ldr	r3, [sp, #12]
 800bafc:	3331      	adds	r3, #49	@ 0x31
 800bafe:	f88b 3000 	strb.w	r3, [fp]
 800bb02:	e52e      	b.n	800b562 <_dtoa_r+0x49a>
 800bb04:	4628      	mov	r0, r5
 800bb06:	e7b9      	b.n	800ba7c <_dtoa_r+0x9b4>
 800bb08:	2201      	movs	r2, #1
 800bb0a:	e7e2      	b.n	800bad2 <_dtoa_r+0xa0a>
 800bb0c:	9904      	ldr	r1, [sp, #16]
 800bb0e:	2900      	cmp	r1, #0
 800bb10:	db04      	blt.n	800bb1c <_dtoa_r+0xa54>
 800bb12:	9807      	ldr	r0, [sp, #28]
 800bb14:	4301      	orrs	r1, r0
 800bb16:	9806      	ldr	r0, [sp, #24]
 800bb18:	4301      	orrs	r1, r0
 800bb1a:	d120      	bne.n	800bb5e <_dtoa_r+0xa96>
 800bb1c:	2a00      	cmp	r2, #0
 800bb1e:	ddee      	ble.n	800bafe <_dtoa_r+0xa36>
 800bb20:	9902      	ldr	r1, [sp, #8]
 800bb22:	9300      	str	r3, [sp, #0]
 800bb24:	2201      	movs	r2, #1
 800bb26:	4648      	mov	r0, r9
 800bb28:	f000 fb38 	bl	800c19c <__lshift>
 800bb2c:	4621      	mov	r1, r4
 800bb2e:	9002      	str	r0, [sp, #8]
 800bb30:	f000 fba0 	bl	800c274 <__mcmp>
 800bb34:	2800      	cmp	r0, #0
 800bb36:	9b00      	ldr	r3, [sp, #0]
 800bb38:	dc02      	bgt.n	800bb40 <_dtoa_r+0xa78>
 800bb3a:	d1e0      	bne.n	800bafe <_dtoa_r+0xa36>
 800bb3c:	07da      	lsls	r2, r3, #31
 800bb3e:	d5de      	bpl.n	800bafe <_dtoa_r+0xa36>
 800bb40:	2b39      	cmp	r3, #57	@ 0x39
 800bb42:	d1da      	bne.n	800bafa <_dtoa_r+0xa32>
 800bb44:	2339      	movs	r3, #57	@ 0x39
 800bb46:	f88b 3000 	strb.w	r3, [fp]
 800bb4a:	4633      	mov	r3, r6
 800bb4c:	461e      	mov	r6, r3
 800bb4e:	3b01      	subs	r3, #1
 800bb50:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bb54:	2a39      	cmp	r2, #57	@ 0x39
 800bb56:	d04e      	beq.n	800bbf6 <_dtoa_r+0xb2e>
 800bb58:	3201      	adds	r2, #1
 800bb5a:	701a      	strb	r2, [r3, #0]
 800bb5c:	e501      	b.n	800b562 <_dtoa_r+0x49a>
 800bb5e:	2a00      	cmp	r2, #0
 800bb60:	dd03      	ble.n	800bb6a <_dtoa_r+0xaa2>
 800bb62:	2b39      	cmp	r3, #57	@ 0x39
 800bb64:	d0ee      	beq.n	800bb44 <_dtoa_r+0xa7c>
 800bb66:	3301      	adds	r3, #1
 800bb68:	e7c9      	b.n	800bafe <_dtoa_r+0xa36>
 800bb6a:	9a00      	ldr	r2, [sp, #0]
 800bb6c:	9908      	ldr	r1, [sp, #32]
 800bb6e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bb72:	428a      	cmp	r2, r1
 800bb74:	d028      	beq.n	800bbc8 <_dtoa_r+0xb00>
 800bb76:	9902      	ldr	r1, [sp, #8]
 800bb78:	2300      	movs	r3, #0
 800bb7a:	220a      	movs	r2, #10
 800bb7c:	4648      	mov	r0, r9
 800bb7e:	f000 f91f 	bl	800bdc0 <__multadd>
 800bb82:	42af      	cmp	r7, r5
 800bb84:	9002      	str	r0, [sp, #8]
 800bb86:	f04f 0300 	mov.w	r3, #0
 800bb8a:	f04f 020a 	mov.w	r2, #10
 800bb8e:	4639      	mov	r1, r7
 800bb90:	4648      	mov	r0, r9
 800bb92:	d107      	bne.n	800bba4 <_dtoa_r+0xadc>
 800bb94:	f000 f914 	bl	800bdc0 <__multadd>
 800bb98:	4607      	mov	r7, r0
 800bb9a:	4605      	mov	r5, r0
 800bb9c:	9b00      	ldr	r3, [sp, #0]
 800bb9e:	3301      	adds	r3, #1
 800bba0:	9300      	str	r3, [sp, #0]
 800bba2:	e777      	b.n	800ba94 <_dtoa_r+0x9cc>
 800bba4:	f000 f90c 	bl	800bdc0 <__multadd>
 800bba8:	4629      	mov	r1, r5
 800bbaa:	4607      	mov	r7, r0
 800bbac:	2300      	movs	r3, #0
 800bbae:	220a      	movs	r2, #10
 800bbb0:	4648      	mov	r0, r9
 800bbb2:	f000 f905 	bl	800bdc0 <__multadd>
 800bbb6:	4605      	mov	r5, r0
 800bbb8:	e7f0      	b.n	800bb9c <_dtoa_r+0xad4>
 800bbba:	f1bb 0f00 	cmp.w	fp, #0
 800bbbe:	bfcc      	ite	gt
 800bbc0:	465e      	movgt	r6, fp
 800bbc2:	2601      	movle	r6, #1
 800bbc4:	4456      	add	r6, sl
 800bbc6:	2700      	movs	r7, #0
 800bbc8:	9902      	ldr	r1, [sp, #8]
 800bbca:	9300      	str	r3, [sp, #0]
 800bbcc:	2201      	movs	r2, #1
 800bbce:	4648      	mov	r0, r9
 800bbd0:	f000 fae4 	bl	800c19c <__lshift>
 800bbd4:	4621      	mov	r1, r4
 800bbd6:	9002      	str	r0, [sp, #8]
 800bbd8:	f000 fb4c 	bl	800c274 <__mcmp>
 800bbdc:	2800      	cmp	r0, #0
 800bbde:	dcb4      	bgt.n	800bb4a <_dtoa_r+0xa82>
 800bbe0:	d102      	bne.n	800bbe8 <_dtoa_r+0xb20>
 800bbe2:	9b00      	ldr	r3, [sp, #0]
 800bbe4:	07db      	lsls	r3, r3, #31
 800bbe6:	d4b0      	bmi.n	800bb4a <_dtoa_r+0xa82>
 800bbe8:	4633      	mov	r3, r6
 800bbea:	461e      	mov	r6, r3
 800bbec:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bbf0:	2a30      	cmp	r2, #48	@ 0x30
 800bbf2:	d0fa      	beq.n	800bbea <_dtoa_r+0xb22>
 800bbf4:	e4b5      	b.n	800b562 <_dtoa_r+0x49a>
 800bbf6:	459a      	cmp	sl, r3
 800bbf8:	d1a8      	bne.n	800bb4c <_dtoa_r+0xa84>
 800bbfa:	2331      	movs	r3, #49	@ 0x31
 800bbfc:	f108 0801 	add.w	r8, r8, #1
 800bc00:	f88a 3000 	strb.w	r3, [sl]
 800bc04:	e4ad      	b.n	800b562 <_dtoa_r+0x49a>
 800bc06:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bc08:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800bc64 <_dtoa_r+0xb9c>
 800bc0c:	b11b      	cbz	r3, 800bc16 <_dtoa_r+0xb4e>
 800bc0e:	f10a 0308 	add.w	r3, sl, #8
 800bc12:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800bc14:	6013      	str	r3, [r2, #0]
 800bc16:	4650      	mov	r0, sl
 800bc18:	b017      	add	sp, #92	@ 0x5c
 800bc1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc1e:	9b07      	ldr	r3, [sp, #28]
 800bc20:	2b01      	cmp	r3, #1
 800bc22:	f77f ae2e 	ble.w	800b882 <_dtoa_r+0x7ba>
 800bc26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bc28:	9308      	str	r3, [sp, #32]
 800bc2a:	2001      	movs	r0, #1
 800bc2c:	e64d      	b.n	800b8ca <_dtoa_r+0x802>
 800bc2e:	f1bb 0f00 	cmp.w	fp, #0
 800bc32:	f77f aed9 	ble.w	800b9e8 <_dtoa_r+0x920>
 800bc36:	4656      	mov	r6, sl
 800bc38:	9802      	ldr	r0, [sp, #8]
 800bc3a:	4621      	mov	r1, r4
 800bc3c:	f7ff f9bc 	bl	800afb8 <quorem>
 800bc40:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800bc44:	f806 3b01 	strb.w	r3, [r6], #1
 800bc48:	eba6 020a 	sub.w	r2, r6, sl
 800bc4c:	4593      	cmp	fp, r2
 800bc4e:	ddb4      	ble.n	800bbba <_dtoa_r+0xaf2>
 800bc50:	9902      	ldr	r1, [sp, #8]
 800bc52:	2300      	movs	r3, #0
 800bc54:	220a      	movs	r2, #10
 800bc56:	4648      	mov	r0, r9
 800bc58:	f000 f8b2 	bl	800bdc0 <__multadd>
 800bc5c:	9002      	str	r0, [sp, #8]
 800bc5e:	e7eb      	b.n	800bc38 <_dtoa_r+0xb70>
 800bc60:	0800ec01 	.word	0x0800ec01
 800bc64:	0800eb85 	.word	0x0800eb85

0800bc68 <_free_r>:
 800bc68:	b538      	push	{r3, r4, r5, lr}
 800bc6a:	4605      	mov	r5, r0
 800bc6c:	2900      	cmp	r1, #0
 800bc6e:	d041      	beq.n	800bcf4 <_free_r+0x8c>
 800bc70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc74:	1f0c      	subs	r4, r1, #4
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	bfb8      	it	lt
 800bc7a:	18e4      	addlt	r4, r4, r3
 800bc7c:	f7fe f8ce 	bl	8009e1c <__malloc_lock>
 800bc80:	4a1d      	ldr	r2, [pc, #116]	@ (800bcf8 <_free_r+0x90>)
 800bc82:	6813      	ldr	r3, [r2, #0]
 800bc84:	b933      	cbnz	r3, 800bc94 <_free_r+0x2c>
 800bc86:	6063      	str	r3, [r4, #4]
 800bc88:	6014      	str	r4, [r2, #0]
 800bc8a:	4628      	mov	r0, r5
 800bc8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc90:	f7fe b8ca 	b.w	8009e28 <__malloc_unlock>
 800bc94:	42a3      	cmp	r3, r4
 800bc96:	d908      	bls.n	800bcaa <_free_r+0x42>
 800bc98:	6820      	ldr	r0, [r4, #0]
 800bc9a:	1821      	adds	r1, r4, r0
 800bc9c:	428b      	cmp	r3, r1
 800bc9e:	bf01      	itttt	eq
 800bca0:	6819      	ldreq	r1, [r3, #0]
 800bca2:	685b      	ldreq	r3, [r3, #4]
 800bca4:	1809      	addeq	r1, r1, r0
 800bca6:	6021      	streq	r1, [r4, #0]
 800bca8:	e7ed      	b.n	800bc86 <_free_r+0x1e>
 800bcaa:	461a      	mov	r2, r3
 800bcac:	685b      	ldr	r3, [r3, #4]
 800bcae:	b10b      	cbz	r3, 800bcb4 <_free_r+0x4c>
 800bcb0:	42a3      	cmp	r3, r4
 800bcb2:	d9fa      	bls.n	800bcaa <_free_r+0x42>
 800bcb4:	6811      	ldr	r1, [r2, #0]
 800bcb6:	1850      	adds	r0, r2, r1
 800bcb8:	42a0      	cmp	r0, r4
 800bcba:	d10b      	bne.n	800bcd4 <_free_r+0x6c>
 800bcbc:	6820      	ldr	r0, [r4, #0]
 800bcbe:	4401      	add	r1, r0
 800bcc0:	1850      	adds	r0, r2, r1
 800bcc2:	4283      	cmp	r3, r0
 800bcc4:	6011      	str	r1, [r2, #0]
 800bcc6:	d1e0      	bne.n	800bc8a <_free_r+0x22>
 800bcc8:	6818      	ldr	r0, [r3, #0]
 800bcca:	685b      	ldr	r3, [r3, #4]
 800bccc:	6053      	str	r3, [r2, #4]
 800bcce:	4408      	add	r0, r1
 800bcd0:	6010      	str	r0, [r2, #0]
 800bcd2:	e7da      	b.n	800bc8a <_free_r+0x22>
 800bcd4:	d902      	bls.n	800bcdc <_free_r+0x74>
 800bcd6:	230c      	movs	r3, #12
 800bcd8:	602b      	str	r3, [r5, #0]
 800bcda:	e7d6      	b.n	800bc8a <_free_r+0x22>
 800bcdc:	6820      	ldr	r0, [r4, #0]
 800bcde:	1821      	adds	r1, r4, r0
 800bce0:	428b      	cmp	r3, r1
 800bce2:	bf04      	itt	eq
 800bce4:	6819      	ldreq	r1, [r3, #0]
 800bce6:	685b      	ldreq	r3, [r3, #4]
 800bce8:	6063      	str	r3, [r4, #4]
 800bcea:	bf04      	itt	eq
 800bcec:	1809      	addeq	r1, r1, r0
 800bcee:	6021      	streq	r1, [r4, #0]
 800bcf0:	6054      	str	r4, [r2, #4]
 800bcf2:	e7ca      	b.n	800bc8a <_free_r+0x22>
 800bcf4:	bd38      	pop	{r3, r4, r5, pc}
 800bcf6:	bf00      	nop
 800bcf8:	2000de74 	.word	0x2000de74

0800bcfc <_Balloc>:
 800bcfc:	b570      	push	{r4, r5, r6, lr}
 800bcfe:	69c6      	ldr	r6, [r0, #28]
 800bd00:	4604      	mov	r4, r0
 800bd02:	460d      	mov	r5, r1
 800bd04:	b976      	cbnz	r6, 800bd24 <_Balloc+0x28>
 800bd06:	2010      	movs	r0, #16
 800bd08:	f7fd ffde 	bl	8009cc8 <malloc>
 800bd0c:	4602      	mov	r2, r0
 800bd0e:	61e0      	str	r0, [r4, #28]
 800bd10:	b920      	cbnz	r0, 800bd1c <_Balloc+0x20>
 800bd12:	4b18      	ldr	r3, [pc, #96]	@ (800bd74 <_Balloc+0x78>)
 800bd14:	4818      	ldr	r0, [pc, #96]	@ (800bd78 <_Balloc+0x7c>)
 800bd16:	216b      	movs	r1, #107	@ 0x6b
 800bd18:	f001 fd46 	bl	800d7a8 <__assert_func>
 800bd1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd20:	6006      	str	r6, [r0, #0]
 800bd22:	60c6      	str	r6, [r0, #12]
 800bd24:	69e6      	ldr	r6, [r4, #28]
 800bd26:	68f3      	ldr	r3, [r6, #12]
 800bd28:	b183      	cbz	r3, 800bd4c <_Balloc+0x50>
 800bd2a:	69e3      	ldr	r3, [r4, #28]
 800bd2c:	68db      	ldr	r3, [r3, #12]
 800bd2e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bd32:	b9b8      	cbnz	r0, 800bd64 <_Balloc+0x68>
 800bd34:	2101      	movs	r1, #1
 800bd36:	fa01 f605 	lsl.w	r6, r1, r5
 800bd3a:	1d72      	adds	r2, r6, #5
 800bd3c:	0092      	lsls	r2, r2, #2
 800bd3e:	4620      	mov	r0, r4
 800bd40:	f001 fd50 	bl	800d7e4 <_calloc_r>
 800bd44:	b160      	cbz	r0, 800bd60 <_Balloc+0x64>
 800bd46:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bd4a:	e00e      	b.n	800bd6a <_Balloc+0x6e>
 800bd4c:	2221      	movs	r2, #33	@ 0x21
 800bd4e:	2104      	movs	r1, #4
 800bd50:	4620      	mov	r0, r4
 800bd52:	f001 fd47 	bl	800d7e4 <_calloc_r>
 800bd56:	69e3      	ldr	r3, [r4, #28]
 800bd58:	60f0      	str	r0, [r6, #12]
 800bd5a:	68db      	ldr	r3, [r3, #12]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d1e4      	bne.n	800bd2a <_Balloc+0x2e>
 800bd60:	2000      	movs	r0, #0
 800bd62:	bd70      	pop	{r4, r5, r6, pc}
 800bd64:	6802      	ldr	r2, [r0, #0]
 800bd66:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bd70:	e7f7      	b.n	800bd62 <_Balloc+0x66>
 800bd72:	bf00      	nop
 800bd74:	0800eb92 	.word	0x0800eb92
 800bd78:	0800ec12 	.word	0x0800ec12

0800bd7c <_Bfree>:
 800bd7c:	b570      	push	{r4, r5, r6, lr}
 800bd7e:	69c6      	ldr	r6, [r0, #28]
 800bd80:	4605      	mov	r5, r0
 800bd82:	460c      	mov	r4, r1
 800bd84:	b976      	cbnz	r6, 800bda4 <_Bfree+0x28>
 800bd86:	2010      	movs	r0, #16
 800bd88:	f7fd ff9e 	bl	8009cc8 <malloc>
 800bd8c:	4602      	mov	r2, r0
 800bd8e:	61e8      	str	r0, [r5, #28]
 800bd90:	b920      	cbnz	r0, 800bd9c <_Bfree+0x20>
 800bd92:	4b09      	ldr	r3, [pc, #36]	@ (800bdb8 <_Bfree+0x3c>)
 800bd94:	4809      	ldr	r0, [pc, #36]	@ (800bdbc <_Bfree+0x40>)
 800bd96:	218f      	movs	r1, #143	@ 0x8f
 800bd98:	f001 fd06 	bl	800d7a8 <__assert_func>
 800bd9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bda0:	6006      	str	r6, [r0, #0]
 800bda2:	60c6      	str	r6, [r0, #12]
 800bda4:	b13c      	cbz	r4, 800bdb6 <_Bfree+0x3a>
 800bda6:	69eb      	ldr	r3, [r5, #28]
 800bda8:	6862      	ldr	r2, [r4, #4]
 800bdaa:	68db      	ldr	r3, [r3, #12]
 800bdac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bdb0:	6021      	str	r1, [r4, #0]
 800bdb2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bdb6:	bd70      	pop	{r4, r5, r6, pc}
 800bdb8:	0800eb92 	.word	0x0800eb92
 800bdbc:	0800ec12 	.word	0x0800ec12

0800bdc0 <__multadd>:
 800bdc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdc4:	690d      	ldr	r5, [r1, #16]
 800bdc6:	4607      	mov	r7, r0
 800bdc8:	460c      	mov	r4, r1
 800bdca:	461e      	mov	r6, r3
 800bdcc:	f101 0c14 	add.w	ip, r1, #20
 800bdd0:	2000      	movs	r0, #0
 800bdd2:	f8dc 3000 	ldr.w	r3, [ip]
 800bdd6:	b299      	uxth	r1, r3
 800bdd8:	fb02 6101 	mla	r1, r2, r1, r6
 800bddc:	0c1e      	lsrs	r6, r3, #16
 800bdde:	0c0b      	lsrs	r3, r1, #16
 800bde0:	fb02 3306 	mla	r3, r2, r6, r3
 800bde4:	b289      	uxth	r1, r1
 800bde6:	3001      	adds	r0, #1
 800bde8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bdec:	4285      	cmp	r5, r0
 800bdee:	f84c 1b04 	str.w	r1, [ip], #4
 800bdf2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bdf6:	dcec      	bgt.n	800bdd2 <__multadd+0x12>
 800bdf8:	b30e      	cbz	r6, 800be3e <__multadd+0x7e>
 800bdfa:	68a3      	ldr	r3, [r4, #8]
 800bdfc:	42ab      	cmp	r3, r5
 800bdfe:	dc19      	bgt.n	800be34 <__multadd+0x74>
 800be00:	6861      	ldr	r1, [r4, #4]
 800be02:	4638      	mov	r0, r7
 800be04:	3101      	adds	r1, #1
 800be06:	f7ff ff79 	bl	800bcfc <_Balloc>
 800be0a:	4680      	mov	r8, r0
 800be0c:	b928      	cbnz	r0, 800be1a <__multadd+0x5a>
 800be0e:	4602      	mov	r2, r0
 800be10:	4b0c      	ldr	r3, [pc, #48]	@ (800be44 <__multadd+0x84>)
 800be12:	480d      	ldr	r0, [pc, #52]	@ (800be48 <__multadd+0x88>)
 800be14:	21ba      	movs	r1, #186	@ 0xba
 800be16:	f001 fcc7 	bl	800d7a8 <__assert_func>
 800be1a:	6922      	ldr	r2, [r4, #16]
 800be1c:	3202      	adds	r2, #2
 800be1e:	f104 010c 	add.w	r1, r4, #12
 800be22:	0092      	lsls	r2, r2, #2
 800be24:	300c      	adds	r0, #12
 800be26:	f7ff f8b2 	bl	800af8e <memcpy>
 800be2a:	4621      	mov	r1, r4
 800be2c:	4638      	mov	r0, r7
 800be2e:	f7ff ffa5 	bl	800bd7c <_Bfree>
 800be32:	4644      	mov	r4, r8
 800be34:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800be38:	3501      	adds	r5, #1
 800be3a:	615e      	str	r6, [r3, #20]
 800be3c:	6125      	str	r5, [r4, #16]
 800be3e:	4620      	mov	r0, r4
 800be40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be44:	0800ec01 	.word	0x0800ec01
 800be48:	0800ec12 	.word	0x0800ec12

0800be4c <__s2b>:
 800be4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be50:	460c      	mov	r4, r1
 800be52:	4615      	mov	r5, r2
 800be54:	461f      	mov	r7, r3
 800be56:	2209      	movs	r2, #9
 800be58:	3308      	adds	r3, #8
 800be5a:	4606      	mov	r6, r0
 800be5c:	fb93 f3f2 	sdiv	r3, r3, r2
 800be60:	2100      	movs	r1, #0
 800be62:	2201      	movs	r2, #1
 800be64:	429a      	cmp	r2, r3
 800be66:	db09      	blt.n	800be7c <__s2b+0x30>
 800be68:	4630      	mov	r0, r6
 800be6a:	f7ff ff47 	bl	800bcfc <_Balloc>
 800be6e:	b940      	cbnz	r0, 800be82 <__s2b+0x36>
 800be70:	4602      	mov	r2, r0
 800be72:	4b19      	ldr	r3, [pc, #100]	@ (800bed8 <__s2b+0x8c>)
 800be74:	4819      	ldr	r0, [pc, #100]	@ (800bedc <__s2b+0x90>)
 800be76:	21d3      	movs	r1, #211	@ 0xd3
 800be78:	f001 fc96 	bl	800d7a8 <__assert_func>
 800be7c:	0052      	lsls	r2, r2, #1
 800be7e:	3101      	adds	r1, #1
 800be80:	e7f0      	b.n	800be64 <__s2b+0x18>
 800be82:	9b08      	ldr	r3, [sp, #32]
 800be84:	6143      	str	r3, [r0, #20]
 800be86:	2d09      	cmp	r5, #9
 800be88:	f04f 0301 	mov.w	r3, #1
 800be8c:	6103      	str	r3, [r0, #16]
 800be8e:	dd16      	ble.n	800bebe <__s2b+0x72>
 800be90:	f104 0909 	add.w	r9, r4, #9
 800be94:	46c8      	mov	r8, r9
 800be96:	442c      	add	r4, r5
 800be98:	f818 3b01 	ldrb.w	r3, [r8], #1
 800be9c:	4601      	mov	r1, r0
 800be9e:	3b30      	subs	r3, #48	@ 0x30
 800bea0:	220a      	movs	r2, #10
 800bea2:	4630      	mov	r0, r6
 800bea4:	f7ff ff8c 	bl	800bdc0 <__multadd>
 800bea8:	45a0      	cmp	r8, r4
 800beaa:	d1f5      	bne.n	800be98 <__s2b+0x4c>
 800beac:	f1a5 0408 	sub.w	r4, r5, #8
 800beb0:	444c      	add	r4, r9
 800beb2:	1b2d      	subs	r5, r5, r4
 800beb4:	1963      	adds	r3, r4, r5
 800beb6:	42bb      	cmp	r3, r7
 800beb8:	db04      	blt.n	800bec4 <__s2b+0x78>
 800beba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bebe:	340a      	adds	r4, #10
 800bec0:	2509      	movs	r5, #9
 800bec2:	e7f6      	b.n	800beb2 <__s2b+0x66>
 800bec4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bec8:	4601      	mov	r1, r0
 800beca:	3b30      	subs	r3, #48	@ 0x30
 800becc:	220a      	movs	r2, #10
 800bece:	4630      	mov	r0, r6
 800bed0:	f7ff ff76 	bl	800bdc0 <__multadd>
 800bed4:	e7ee      	b.n	800beb4 <__s2b+0x68>
 800bed6:	bf00      	nop
 800bed8:	0800ec01 	.word	0x0800ec01
 800bedc:	0800ec12 	.word	0x0800ec12

0800bee0 <__hi0bits>:
 800bee0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bee4:	4603      	mov	r3, r0
 800bee6:	bf36      	itet	cc
 800bee8:	0403      	lslcc	r3, r0, #16
 800beea:	2000      	movcs	r0, #0
 800beec:	2010      	movcc	r0, #16
 800beee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bef2:	bf3c      	itt	cc
 800bef4:	021b      	lslcc	r3, r3, #8
 800bef6:	3008      	addcc	r0, #8
 800bef8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800befc:	bf3c      	itt	cc
 800befe:	011b      	lslcc	r3, r3, #4
 800bf00:	3004      	addcc	r0, #4
 800bf02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf06:	bf3c      	itt	cc
 800bf08:	009b      	lslcc	r3, r3, #2
 800bf0a:	3002      	addcc	r0, #2
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	db05      	blt.n	800bf1c <__hi0bits+0x3c>
 800bf10:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bf14:	f100 0001 	add.w	r0, r0, #1
 800bf18:	bf08      	it	eq
 800bf1a:	2020      	moveq	r0, #32
 800bf1c:	4770      	bx	lr

0800bf1e <__lo0bits>:
 800bf1e:	6803      	ldr	r3, [r0, #0]
 800bf20:	4602      	mov	r2, r0
 800bf22:	f013 0007 	ands.w	r0, r3, #7
 800bf26:	d00b      	beq.n	800bf40 <__lo0bits+0x22>
 800bf28:	07d9      	lsls	r1, r3, #31
 800bf2a:	d421      	bmi.n	800bf70 <__lo0bits+0x52>
 800bf2c:	0798      	lsls	r0, r3, #30
 800bf2e:	bf49      	itett	mi
 800bf30:	085b      	lsrmi	r3, r3, #1
 800bf32:	089b      	lsrpl	r3, r3, #2
 800bf34:	2001      	movmi	r0, #1
 800bf36:	6013      	strmi	r3, [r2, #0]
 800bf38:	bf5c      	itt	pl
 800bf3a:	6013      	strpl	r3, [r2, #0]
 800bf3c:	2002      	movpl	r0, #2
 800bf3e:	4770      	bx	lr
 800bf40:	b299      	uxth	r1, r3
 800bf42:	b909      	cbnz	r1, 800bf48 <__lo0bits+0x2a>
 800bf44:	0c1b      	lsrs	r3, r3, #16
 800bf46:	2010      	movs	r0, #16
 800bf48:	b2d9      	uxtb	r1, r3
 800bf4a:	b909      	cbnz	r1, 800bf50 <__lo0bits+0x32>
 800bf4c:	3008      	adds	r0, #8
 800bf4e:	0a1b      	lsrs	r3, r3, #8
 800bf50:	0719      	lsls	r1, r3, #28
 800bf52:	bf04      	itt	eq
 800bf54:	091b      	lsreq	r3, r3, #4
 800bf56:	3004      	addeq	r0, #4
 800bf58:	0799      	lsls	r1, r3, #30
 800bf5a:	bf04      	itt	eq
 800bf5c:	089b      	lsreq	r3, r3, #2
 800bf5e:	3002      	addeq	r0, #2
 800bf60:	07d9      	lsls	r1, r3, #31
 800bf62:	d403      	bmi.n	800bf6c <__lo0bits+0x4e>
 800bf64:	085b      	lsrs	r3, r3, #1
 800bf66:	f100 0001 	add.w	r0, r0, #1
 800bf6a:	d003      	beq.n	800bf74 <__lo0bits+0x56>
 800bf6c:	6013      	str	r3, [r2, #0]
 800bf6e:	4770      	bx	lr
 800bf70:	2000      	movs	r0, #0
 800bf72:	4770      	bx	lr
 800bf74:	2020      	movs	r0, #32
 800bf76:	4770      	bx	lr

0800bf78 <__i2b>:
 800bf78:	b510      	push	{r4, lr}
 800bf7a:	460c      	mov	r4, r1
 800bf7c:	2101      	movs	r1, #1
 800bf7e:	f7ff febd 	bl	800bcfc <_Balloc>
 800bf82:	4602      	mov	r2, r0
 800bf84:	b928      	cbnz	r0, 800bf92 <__i2b+0x1a>
 800bf86:	4b05      	ldr	r3, [pc, #20]	@ (800bf9c <__i2b+0x24>)
 800bf88:	4805      	ldr	r0, [pc, #20]	@ (800bfa0 <__i2b+0x28>)
 800bf8a:	f240 1145 	movw	r1, #325	@ 0x145
 800bf8e:	f001 fc0b 	bl	800d7a8 <__assert_func>
 800bf92:	2301      	movs	r3, #1
 800bf94:	6144      	str	r4, [r0, #20]
 800bf96:	6103      	str	r3, [r0, #16]
 800bf98:	bd10      	pop	{r4, pc}
 800bf9a:	bf00      	nop
 800bf9c:	0800ec01 	.word	0x0800ec01
 800bfa0:	0800ec12 	.word	0x0800ec12

0800bfa4 <__multiply>:
 800bfa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfa8:	4617      	mov	r7, r2
 800bfaa:	690a      	ldr	r2, [r1, #16]
 800bfac:	693b      	ldr	r3, [r7, #16]
 800bfae:	429a      	cmp	r2, r3
 800bfb0:	bfa8      	it	ge
 800bfb2:	463b      	movge	r3, r7
 800bfb4:	4689      	mov	r9, r1
 800bfb6:	bfa4      	itt	ge
 800bfb8:	460f      	movge	r7, r1
 800bfba:	4699      	movge	r9, r3
 800bfbc:	693d      	ldr	r5, [r7, #16]
 800bfbe:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bfc2:	68bb      	ldr	r3, [r7, #8]
 800bfc4:	6879      	ldr	r1, [r7, #4]
 800bfc6:	eb05 060a 	add.w	r6, r5, sl
 800bfca:	42b3      	cmp	r3, r6
 800bfcc:	b085      	sub	sp, #20
 800bfce:	bfb8      	it	lt
 800bfd0:	3101      	addlt	r1, #1
 800bfd2:	f7ff fe93 	bl	800bcfc <_Balloc>
 800bfd6:	b930      	cbnz	r0, 800bfe6 <__multiply+0x42>
 800bfd8:	4602      	mov	r2, r0
 800bfda:	4b41      	ldr	r3, [pc, #260]	@ (800c0e0 <__multiply+0x13c>)
 800bfdc:	4841      	ldr	r0, [pc, #260]	@ (800c0e4 <__multiply+0x140>)
 800bfde:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bfe2:	f001 fbe1 	bl	800d7a8 <__assert_func>
 800bfe6:	f100 0414 	add.w	r4, r0, #20
 800bfea:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800bfee:	4623      	mov	r3, r4
 800bff0:	2200      	movs	r2, #0
 800bff2:	4573      	cmp	r3, lr
 800bff4:	d320      	bcc.n	800c038 <__multiply+0x94>
 800bff6:	f107 0814 	add.w	r8, r7, #20
 800bffa:	f109 0114 	add.w	r1, r9, #20
 800bffe:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800c002:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800c006:	9302      	str	r3, [sp, #8]
 800c008:	1beb      	subs	r3, r5, r7
 800c00a:	3b15      	subs	r3, #21
 800c00c:	f023 0303 	bic.w	r3, r3, #3
 800c010:	3304      	adds	r3, #4
 800c012:	3715      	adds	r7, #21
 800c014:	42bd      	cmp	r5, r7
 800c016:	bf38      	it	cc
 800c018:	2304      	movcc	r3, #4
 800c01a:	9301      	str	r3, [sp, #4]
 800c01c:	9b02      	ldr	r3, [sp, #8]
 800c01e:	9103      	str	r1, [sp, #12]
 800c020:	428b      	cmp	r3, r1
 800c022:	d80c      	bhi.n	800c03e <__multiply+0x9a>
 800c024:	2e00      	cmp	r6, #0
 800c026:	dd03      	ble.n	800c030 <__multiply+0x8c>
 800c028:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d055      	beq.n	800c0dc <__multiply+0x138>
 800c030:	6106      	str	r6, [r0, #16]
 800c032:	b005      	add	sp, #20
 800c034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c038:	f843 2b04 	str.w	r2, [r3], #4
 800c03c:	e7d9      	b.n	800bff2 <__multiply+0x4e>
 800c03e:	f8b1 a000 	ldrh.w	sl, [r1]
 800c042:	f1ba 0f00 	cmp.w	sl, #0
 800c046:	d01f      	beq.n	800c088 <__multiply+0xe4>
 800c048:	46c4      	mov	ip, r8
 800c04a:	46a1      	mov	r9, r4
 800c04c:	2700      	movs	r7, #0
 800c04e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c052:	f8d9 3000 	ldr.w	r3, [r9]
 800c056:	fa1f fb82 	uxth.w	fp, r2
 800c05a:	b29b      	uxth	r3, r3
 800c05c:	fb0a 330b 	mla	r3, sl, fp, r3
 800c060:	443b      	add	r3, r7
 800c062:	f8d9 7000 	ldr.w	r7, [r9]
 800c066:	0c12      	lsrs	r2, r2, #16
 800c068:	0c3f      	lsrs	r7, r7, #16
 800c06a:	fb0a 7202 	mla	r2, sl, r2, r7
 800c06e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800c072:	b29b      	uxth	r3, r3
 800c074:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c078:	4565      	cmp	r5, ip
 800c07a:	f849 3b04 	str.w	r3, [r9], #4
 800c07e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800c082:	d8e4      	bhi.n	800c04e <__multiply+0xaa>
 800c084:	9b01      	ldr	r3, [sp, #4]
 800c086:	50e7      	str	r7, [r4, r3]
 800c088:	9b03      	ldr	r3, [sp, #12]
 800c08a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c08e:	3104      	adds	r1, #4
 800c090:	f1b9 0f00 	cmp.w	r9, #0
 800c094:	d020      	beq.n	800c0d8 <__multiply+0x134>
 800c096:	6823      	ldr	r3, [r4, #0]
 800c098:	4647      	mov	r7, r8
 800c09a:	46a4      	mov	ip, r4
 800c09c:	f04f 0a00 	mov.w	sl, #0
 800c0a0:	f8b7 b000 	ldrh.w	fp, [r7]
 800c0a4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800c0a8:	fb09 220b 	mla	r2, r9, fp, r2
 800c0ac:	4452      	add	r2, sl
 800c0ae:	b29b      	uxth	r3, r3
 800c0b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c0b4:	f84c 3b04 	str.w	r3, [ip], #4
 800c0b8:	f857 3b04 	ldr.w	r3, [r7], #4
 800c0bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c0c0:	f8bc 3000 	ldrh.w	r3, [ip]
 800c0c4:	fb09 330a 	mla	r3, r9, sl, r3
 800c0c8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800c0cc:	42bd      	cmp	r5, r7
 800c0ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c0d2:	d8e5      	bhi.n	800c0a0 <__multiply+0xfc>
 800c0d4:	9a01      	ldr	r2, [sp, #4]
 800c0d6:	50a3      	str	r3, [r4, r2]
 800c0d8:	3404      	adds	r4, #4
 800c0da:	e79f      	b.n	800c01c <__multiply+0x78>
 800c0dc:	3e01      	subs	r6, #1
 800c0de:	e7a1      	b.n	800c024 <__multiply+0x80>
 800c0e0:	0800ec01 	.word	0x0800ec01
 800c0e4:	0800ec12 	.word	0x0800ec12

0800c0e8 <__pow5mult>:
 800c0e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0ec:	4615      	mov	r5, r2
 800c0ee:	f012 0203 	ands.w	r2, r2, #3
 800c0f2:	4607      	mov	r7, r0
 800c0f4:	460e      	mov	r6, r1
 800c0f6:	d007      	beq.n	800c108 <__pow5mult+0x20>
 800c0f8:	4c25      	ldr	r4, [pc, #148]	@ (800c190 <__pow5mult+0xa8>)
 800c0fa:	3a01      	subs	r2, #1
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c102:	f7ff fe5d 	bl	800bdc0 <__multadd>
 800c106:	4606      	mov	r6, r0
 800c108:	10ad      	asrs	r5, r5, #2
 800c10a:	d03d      	beq.n	800c188 <__pow5mult+0xa0>
 800c10c:	69fc      	ldr	r4, [r7, #28]
 800c10e:	b97c      	cbnz	r4, 800c130 <__pow5mult+0x48>
 800c110:	2010      	movs	r0, #16
 800c112:	f7fd fdd9 	bl	8009cc8 <malloc>
 800c116:	4602      	mov	r2, r0
 800c118:	61f8      	str	r0, [r7, #28]
 800c11a:	b928      	cbnz	r0, 800c128 <__pow5mult+0x40>
 800c11c:	4b1d      	ldr	r3, [pc, #116]	@ (800c194 <__pow5mult+0xac>)
 800c11e:	481e      	ldr	r0, [pc, #120]	@ (800c198 <__pow5mult+0xb0>)
 800c120:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c124:	f001 fb40 	bl	800d7a8 <__assert_func>
 800c128:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c12c:	6004      	str	r4, [r0, #0]
 800c12e:	60c4      	str	r4, [r0, #12]
 800c130:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c134:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c138:	b94c      	cbnz	r4, 800c14e <__pow5mult+0x66>
 800c13a:	f240 2171 	movw	r1, #625	@ 0x271
 800c13e:	4638      	mov	r0, r7
 800c140:	f7ff ff1a 	bl	800bf78 <__i2b>
 800c144:	2300      	movs	r3, #0
 800c146:	f8c8 0008 	str.w	r0, [r8, #8]
 800c14a:	4604      	mov	r4, r0
 800c14c:	6003      	str	r3, [r0, #0]
 800c14e:	f04f 0900 	mov.w	r9, #0
 800c152:	07eb      	lsls	r3, r5, #31
 800c154:	d50a      	bpl.n	800c16c <__pow5mult+0x84>
 800c156:	4631      	mov	r1, r6
 800c158:	4622      	mov	r2, r4
 800c15a:	4638      	mov	r0, r7
 800c15c:	f7ff ff22 	bl	800bfa4 <__multiply>
 800c160:	4631      	mov	r1, r6
 800c162:	4680      	mov	r8, r0
 800c164:	4638      	mov	r0, r7
 800c166:	f7ff fe09 	bl	800bd7c <_Bfree>
 800c16a:	4646      	mov	r6, r8
 800c16c:	106d      	asrs	r5, r5, #1
 800c16e:	d00b      	beq.n	800c188 <__pow5mult+0xa0>
 800c170:	6820      	ldr	r0, [r4, #0]
 800c172:	b938      	cbnz	r0, 800c184 <__pow5mult+0x9c>
 800c174:	4622      	mov	r2, r4
 800c176:	4621      	mov	r1, r4
 800c178:	4638      	mov	r0, r7
 800c17a:	f7ff ff13 	bl	800bfa4 <__multiply>
 800c17e:	6020      	str	r0, [r4, #0]
 800c180:	f8c0 9000 	str.w	r9, [r0]
 800c184:	4604      	mov	r4, r0
 800c186:	e7e4      	b.n	800c152 <__pow5mult+0x6a>
 800c188:	4630      	mov	r0, r6
 800c18a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c18e:	bf00      	nop
 800c190:	0800ed24 	.word	0x0800ed24
 800c194:	0800eb92 	.word	0x0800eb92
 800c198:	0800ec12 	.word	0x0800ec12

0800c19c <__lshift>:
 800c19c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1a0:	460c      	mov	r4, r1
 800c1a2:	6849      	ldr	r1, [r1, #4]
 800c1a4:	6923      	ldr	r3, [r4, #16]
 800c1a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c1aa:	68a3      	ldr	r3, [r4, #8]
 800c1ac:	4607      	mov	r7, r0
 800c1ae:	4691      	mov	r9, r2
 800c1b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c1b4:	f108 0601 	add.w	r6, r8, #1
 800c1b8:	42b3      	cmp	r3, r6
 800c1ba:	db0b      	blt.n	800c1d4 <__lshift+0x38>
 800c1bc:	4638      	mov	r0, r7
 800c1be:	f7ff fd9d 	bl	800bcfc <_Balloc>
 800c1c2:	4605      	mov	r5, r0
 800c1c4:	b948      	cbnz	r0, 800c1da <__lshift+0x3e>
 800c1c6:	4602      	mov	r2, r0
 800c1c8:	4b28      	ldr	r3, [pc, #160]	@ (800c26c <__lshift+0xd0>)
 800c1ca:	4829      	ldr	r0, [pc, #164]	@ (800c270 <__lshift+0xd4>)
 800c1cc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c1d0:	f001 faea 	bl	800d7a8 <__assert_func>
 800c1d4:	3101      	adds	r1, #1
 800c1d6:	005b      	lsls	r3, r3, #1
 800c1d8:	e7ee      	b.n	800c1b8 <__lshift+0x1c>
 800c1da:	2300      	movs	r3, #0
 800c1dc:	f100 0114 	add.w	r1, r0, #20
 800c1e0:	f100 0210 	add.w	r2, r0, #16
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	4553      	cmp	r3, sl
 800c1e8:	db33      	blt.n	800c252 <__lshift+0xb6>
 800c1ea:	6920      	ldr	r0, [r4, #16]
 800c1ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c1f0:	f104 0314 	add.w	r3, r4, #20
 800c1f4:	f019 091f 	ands.w	r9, r9, #31
 800c1f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c1fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c200:	d02b      	beq.n	800c25a <__lshift+0xbe>
 800c202:	f1c9 0e20 	rsb	lr, r9, #32
 800c206:	468a      	mov	sl, r1
 800c208:	2200      	movs	r2, #0
 800c20a:	6818      	ldr	r0, [r3, #0]
 800c20c:	fa00 f009 	lsl.w	r0, r0, r9
 800c210:	4310      	orrs	r0, r2
 800c212:	f84a 0b04 	str.w	r0, [sl], #4
 800c216:	f853 2b04 	ldr.w	r2, [r3], #4
 800c21a:	459c      	cmp	ip, r3
 800c21c:	fa22 f20e 	lsr.w	r2, r2, lr
 800c220:	d8f3      	bhi.n	800c20a <__lshift+0x6e>
 800c222:	ebac 0304 	sub.w	r3, ip, r4
 800c226:	3b15      	subs	r3, #21
 800c228:	f023 0303 	bic.w	r3, r3, #3
 800c22c:	3304      	adds	r3, #4
 800c22e:	f104 0015 	add.w	r0, r4, #21
 800c232:	4560      	cmp	r0, ip
 800c234:	bf88      	it	hi
 800c236:	2304      	movhi	r3, #4
 800c238:	50ca      	str	r2, [r1, r3]
 800c23a:	b10a      	cbz	r2, 800c240 <__lshift+0xa4>
 800c23c:	f108 0602 	add.w	r6, r8, #2
 800c240:	3e01      	subs	r6, #1
 800c242:	4638      	mov	r0, r7
 800c244:	612e      	str	r6, [r5, #16]
 800c246:	4621      	mov	r1, r4
 800c248:	f7ff fd98 	bl	800bd7c <_Bfree>
 800c24c:	4628      	mov	r0, r5
 800c24e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c252:	f842 0f04 	str.w	r0, [r2, #4]!
 800c256:	3301      	adds	r3, #1
 800c258:	e7c5      	b.n	800c1e6 <__lshift+0x4a>
 800c25a:	3904      	subs	r1, #4
 800c25c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c260:	f841 2f04 	str.w	r2, [r1, #4]!
 800c264:	459c      	cmp	ip, r3
 800c266:	d8f9      	bhi.n	800c25c <__lshift+0xc0>
 800c268:	e7ea      	b.n	800c240 <__lshift+0xa4>
 800c26a:	bf00      	nop
 800c26c:	0800ec01 	.word	0x0800ec01
 800c270:	0800ec12 	.word	0x0800ec12

0800c274 <__mcmp>:
 800c274:	690a      	ldr	r2, [r1, #16]
 800c276:	4603      	mov	r3, r0
 800c278:	6900      	ldr	r0, [r0, #16]
 800c27a:	1a80      	subs	r0, r0, r2
 800c27c:	b530      	push	{r4, r5, lr}
 800c27e:	d10e      	bne.n	800c29e <__mcmp+0x2a>
 800c280:	3314      	adds	r3, #20
 800c282:	3114      	adds	r1, #20
 800c284:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c288:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c28c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c290:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c294:	4295      	cmp	r5, r2
 800c296:	d003      	beq.n	800c2a0 <__mcmp+0x2c>
 800c298:	d205      	bcs.n	800c2a6 <__mcmp+0x32>
 800c29a:	f04f 30ff 	mov.w	r0, #4294967295
 800c29e:	bd30      	pop	{r4, r5, pc}
 800c2a0:	42a3      	cmp	r3, r4
 800c2a2:	d3f3      	bcc.n	800c28c <__mcmp+0x18>
 800c2a4:	e7fb      	b.n	800c29e <__mcmp+0x2a>
 800c2a6:	2001      	movs	r0, #1
 800c2a8:	e7f9      	b.n	800c29e <__mcmp+0x2a>
	...

0800c2ac <__mdiff>:
 800c2ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2b0:	4689      	mov	r9, r1
 800c2b2:	4606      	mov	r6, r0
 800c2b4:	4611      	mov	r1, r2
 800c2b6:	4648      	mov	r0, r9
 800c2b8:	4614      	mov	r4, r2
 800c2ba:	f7ff ffdb 	bl	800c274 <__mcmp>
 800c2be:	1e05      	subs	r5, r0, #0
 800c2c0:	d112      	bne.n	800c2e8 <__mdiff+0x3c>
 800c2c2:	4629      	mov	r1, r5
 800c2c4:	4630      	mov	r0, r6
 800c2c6:	f7ff fd19 	bl	800bcfc <_Balloc>
 800c2ca:	4602      	mov	r2, r0
 800c2cc:	b928      	cbnz	r0, 800c2da <__mdiff+0x2e>
 800c2ce:	4b3f      	ldr	r3, [pc, #252]	@ (800c3cc <__mdiff+0x120>)
 800c2d0:	f240 2137 	movw	r1, #567	@ 0x237
 800c2d4:	483e      	ldr	r0, [pc, #248]	@ (800c3d0 <__mdiff+0x124>)
 800c2d6:	f001 fa67 	bl	800d7a8 <__assert_func>
 800c2da:	2301      	movs	r3, #1
 800c2dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c2e0:	4610      	mov	r0, r2
 800c2e2:	b003      	add	sp, #12
 800c2e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2e8:	bfbc      	itt	lt
 800c2ea:	464b      	movlt	r3, r9
 800c2ec:	46a1      	movlt	r9, r4
 800c2ee:	4630      	mov	r0, r6
 800c2f0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c2f4:	bfba      	itte	lt
 800c2f6:	461c      	movlt	r4, r3
 800c2f8:	2501      	movlt	r5, #1
 800c2fa:	2500      	movge	r5, #0
 800c2fc:	f7ff fcfe 	bl	800bcfc <_Balloc>
 800c300:	4602      	mov	r2, r0
 800c302:	b918      	cbnz	r0, 800c30c <__mdiff+0x60>
 800c304:	4b31      	ldr	r3, [pc, #196]	@ (800c3cc <__mdiff+0x120>)
 800c306:	f240 2145 	movw	r1, #581	@ 0x245
 800c30a:	e7e3      	b.n	800c2d4 <__mdiff+0x28>
 800c30c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c310:	6926      	ldr	r6, [r4, #16]
 800c312:	60c5      	str	r5, [r0, #12]
 800c314:	f109 0310 	add.w	r3, r9, #16
 800c318:	f109 0514 	add.w	r5, r9, #20
 800c31c:	f104 0e14 	add.w	lr, r4, #20
 800c320:	f100 0b14 	add.w	fp, r0, #20
 800c324:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c328:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c32c:	9301      	str	r3, [sp, #4]
 800c32e:	46d9      	mov	r9, fp
 800c330:	f04f 0c00 	mov.w	ip, #0
 800c334:	9b01      	ldr	r3, [sp, #4]
 800c336:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c33a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c33e:	9301      	str	r3, [sp, #4]
 800c340:	fa1f f38a 	uxth.w	r3, sl
 800c344:	4619      	mov	r1, r3
 800c346:	b283      	uxth	r3, r0
 800c348:	1acb      	subs	r3, r1, r3
 800c34a:	0c00      	lsrs	r0, r0, #16
 800c34c:	4463      	add	r3, ip
 800c34e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c352:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c356:	b29b      	uxth	r3, r3
 800c358:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c35c:	4576      	cmp	r6, lr
 800c35e:	f849 3b04 	str.w	r3, [r9], #4
 800c362:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c366:	d8e5      	bhi.n	800c334 <__mdiff+0x88>
 800c368:	1b33      	subs	r3, r6, r4
 800c36a:	3b15      	subs	r3, #21
 800c36c:	f023 0303 	bic.w	r3, r3, #3
 800c370:	3415      	adds	r4, #21
 800c372:	3304      	adds	r3, #4
 800c374:	42a6      	cmp	r6, r4
 800c376:	bf38      	it	cc
 800c378:	2304      	movcc	r3, #4
 800c37a:	441d      	add	r5, r3
 800c37c:	445b      	add	r3, fp
 800c37e:	461e      	mov	r6, r3
 800c380:	462c      	mov	r4, r5
 800c382:	4544      	cmp	r4, r8
 800c384:	d30e      	bcc.n	800c3a4 <__mdiff+0xf8>
 800c386:	f108 0103 	add.w	r1, r8, #3
 800c38a:	1b49      	subs	r1, r1, r5
 800c38c:	f021 0103 	bic.w	r1, r1, #3
 800c390:	3d03      	subs	r5, #3
 800c392:	45a8      	cmp	r8, r5
 800c394:	bf38      	it	cc
 800c396:	2100      	movcc	r1, #0
 800c398:	440b      	add	r3, r1
 800c39a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c39e:	b191      	cbz	r1, 800c3c6 <__mdiff+0x11a>
 800c3a0:	6117      	str	r7, [r2, #16]
 800c3a2:	e79d      	b.n	800c2e0 <__mdiff+0x34>
 800c3a4:	f854 1b04 	ldr.w	r1, [r4], #4
 800c3a8:	46e6      	mov	lr, ip
 800c3aa:	0c08      	lsrs	r0, r1, #16
 800c3ac:	fa1c fc81 	uxtah	ip, ip, r1
 800c3b0:	4471      	add	r1, lr
 800c3b2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c3b6:	b289      	uxth	r1, r1
 800c3b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c3bc:	f846 1b04 	str.w	r1, [r6], #4
 800c3c0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c3c4:	e7dd      	b.n	800c382 <__mdiff+0xd6>
 800c3c6:	3f01      	subs	r7, #1
 800c3c8:	e7e7      	b.n	800c39a <__mdiff+0xee>
 800c3ca:	bf00      	nop
 800c3cc:	0800ec01 	.word	0x0800ec01
 800c3d0:	0800ec12 	.word	0x0800ec12

0800c3d4 <__ulp>:
 800c3d4:	b082      	sub	sp, #8
 800c3d6:	ed8d 0b00 	vstr	d0, [sp]
 800c3da:	9a01      	ldr	r2, [sp, #4]
 800c3dc:	4b0f      	ldr	r3, [pc, #60]	@ (800c41c <__ulp+0x48>)
 800c3de:	4013      	ands	r3, r2
 800c3e0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	dc08      	bgt.n	800c3fa <__ulp+0x26>
 800c3e8:	425b      	negs	r3, r3
 800c3ea:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c3ee:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c3f2:	da04      	bge.n	800c3fe <__ulp+0x2a>
 800c3f4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c3f8:	4113      	asrs	r3, r2
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	e008      	b.n	800c410 <__ulp+0x3c>
 800c3fe:	f1a2 0314 	sub.w	r3, r2, #20
 800c402:	2b1e      	cmp	r3, #30
 800c404:	bfda      	itte	le
 800c406:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c40a:	40da      	lsrle	r2, r3
 800c40c:	2201      	movgt	r2, #1
 800c40e:	2300      	movs	r3, #0
 800c410:	4619      	mov	r1, r3
 800c412:	4610      	mov	r0, r2
 800c414:	ec41 0b10 	vmov	d0, r0, r1
 800c418:	b002      	add	sp, #8
 800c41a:	4770      	bx	lr
 800c41c:	7ff00000 	.word	0x7ff00000

0800c420 <__b2d>:
 800c420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c424:	6906      	ldr	r6, [r0, #16]
 800c426:	f100 0814 	add.w	r8, r0, #20
 800c42a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c42e:	1f37      	subs	r7, r6, #4
 800c430:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c434:	4610      	mov	r0, r2
 800c436:	f7ff fd53 	bl	800bee0 <__hi0bits>
 800c43a:	f1c0 0320 	rsb	r3, r0, #32
 800c43e:	280a      	cmp	r0, #10
 800c440:	600b      	str	r3, [r1, #0]
 800c442:	491b      	ldr	r1, [pc, #108]	@ (800c4b0 <__b2d+0x90>)
 800c444:	dc15      	bgt.n	800c472 <__b2d+0x52>
 800c446:	f1c0 0c0b 	rsb	ip, r0, #11
 800c44a:	fa22 f30c 	lsr.w	r3, r2, ip
 800c44e:	45b8      	cmp	r8, r7
 800c450:	ea43 0501 	orr.w	r5, r3, r1
 800c454:	bf34      	ite	cc
 800c456:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c45a:	2300      	movcs	r3, #0
 800c45c:	3015      	adds	r0, #21
 800c45e:	fa02 f000 	lsl.w	r0, r2, r0
 800c462:	fa23 f30c 	lsr.w	r3, r3, ip
 800c466:	4303      	orrs	r3, r0
 800c468:	461c      	mov	r4, r3
 800c46a:	ec45 4b10 	vmov	d0, r4, r5
 800c46e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c472:	45b8      	cmp	r8, r7
 800c474:	bf3a      	itte	cc
 800c476:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c47a:	f1a6 0708 	subcc.w	r7, r6, #8
 800c47e:	2300      	movcs	r3, #0
 800c480:	380b      	subs	r0, #11
 800c482:	d012      	beq.n	800c4aa <__b2d+0x8a>
 800c484:	f1c0 0120 	rsb	r1, r0, #32
 800c488:	fa23 f401 	lsr.w	r4, r3, r1
 800c48c:	4082      	lsls	r2, r0
 800c48e:	4322      	orrs	r2, r4
 800c490:	4547      	cmp	r7, r8
 800c492:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c496:	bf8c      	ite	hi
 800c498:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c49c:	2200      	movls	r2, #0
 800c49e:	4083      	lsls	r3, r0
 800c4a0:	40ca      	lsrs	r2, r1
 800c4a2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c4a6:	4313      	orrs	r3, r2
 800c4a8:	e7de      	b.n	800c468 <__b2d+0x48>
 800c4aa:	ea42 0501 	orr.w	r5, r2, r1
 800c4ae:	e7db      	b.n	800c468 <__b2d+0x48>
 800c4b0:	3ff00000 	.word	0x3ff00000

0800c4b4 <__d2b>:
 800c4b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c4b8:	460f      	mov	r7, r1
 800c4ba:	2101      	movs	r1, #1
 800c4bc:	ec59 8b10 	vmov	r8, r9, d0
 800c4c0:	4616      	mov	r6, r2
 800c4c2:	f7ff fc1b 	bl	800bcfc <_Balloc>
 800c4c6:	4604      	mov	r4, r0
 800c4c8:	b930      	cbnz	r0, 800c4d8 <__d2b+0x24>
 800c4ca:	4602      	mov	r2, r0
 800c4cc:	4b23      	ldr	r3, [pc, #140]	@ (800c55c <__d2b+0xa8>)
 800c4ce:	4824      	ldr	r0, [pc, #144]	@ (800c560 <__d2b+0xac>)
 800c4d0:	f240 310f 	movw	r1, #783	@ 0x30f
 800c4d4:	f001 f968 	bl	800d7a8 <__assert_func>
 800c4d8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c4dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c4e0:	b10d      	cbz	r5, 800c4e6 <__d2b+0x32>
 800c4e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c4e6:	9301      	str	r3, [sp, #4]
 800c4e8:	f1b8 0300 	subs.w	r3, r8, #0
 800c4ec:	d023      	beq.n	800c536 <__d2b+0x82>
 800c4ee:	4668      	mov	r0, sp
 800c4f0:	9300      	str	r3, [sp, #0]
 800c4f2:	f7ff fd14 	bl	800bf1e <__lo0bits>
 800c4f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c4fa:	b1d0      	cbz	r0, 800c532 <__d2b+0x7e>
 800c4fc:	f1c0 0320 	rsb	r3, r0, #32
 800c500:	fa02 f303 	lsl.w	r3, r2, r3
 800c504:	430b      	orrs	r3, r1
 800c506:	40c2      	lsrs	r2, r0
 800c508:	6163      	str	r3, [r4, #20]
 800c50a:	9201      	str	r2, [sp, #4]
 800c50c:	9b01      	ldr	r3, [sp, #4]
 800c50e:	61a3      	str	r3, [r4, #24]
 800c510:	2b00      	cmp	r3, #0
 800c512:	bf0c      	ite	eq
 800c514:	2201      	moveq	r2, #1
 800c516:	2202      	movne	r2, #2
 800c518:	6122      	str	r2, [r4, #16]
 800c51a:	b1a5      	cbz	r5, 800c546 <__d2b+0x92>
 800c51c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c520:	4405      	add	r5, r0
 800c522:	603d      	str	r5, [r7, #0]
 800c524:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c528:	6030      	str	r0, [r6, #0]
 800c52a:	4620      	mov	r0, r4
 800c52c:	b003      	add	sp, #12
 800c52e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c532:	6161      	str	r1, [r4, #20]
 800c534:	e7ea      	b.n	800c50c <__d2b+0x58>
 800c536:	a801      	add	r0, sp, #4
 800c538:	f7ff fcf1 	bl	800bf1e <__lo0bits>
 800c53c:	9b01      	ldr	r3, [sp, #4]
 800c53e:	6163      	str	r3, [r4, #20]
 800c540:	3020      	adds	r0, #32
 800c542:	2201      	movs	r2, #1
 800c544:	e7e8      	b.n	800c518 <__d2b+0x64>
 800c546:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c54a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c54e:	6038      	str	r0, [r7, #0]
 800c550:	6918      	ldr	r0, [r3, #16]
 800c552:	f7ff fcc5 	bl	800bee0 <__hi0bits>
 800c556:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c55a:	e7e5      	b.n	800c528 <__d2b+0x74>
 800c55c:	0800ec01 	.word	0x0800ec01
 800c560:	0800ec12 	.word	0x0800ec12

0800c564 <__ratio>:
 800c564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c568:	b085      	sub	sp, #20
 800c56a:	e9cd 1000 	strd	r1, r0, [sp]
 800c56e:	a902      	add	r1, sp, #8
 800c570:	f7ff ff56 	bl	800c420 <__b2d>
 800c574:	9800      	ldr	r0, [sp, #0]
 800c576:	a903      	add	r1, sp, #12
 800c578:	ec55 4b10 	vmov	r4, r5, d0
 800c57c:	f7ff ff50 	bl	800c420 <__b2d>
 800c580:	9b01      	ldr	r3, [sp, #4]
 800c582:	6919      	ldr	r1, [r3, #16]
 800c584:	9b00      	ldr	r3, [sp, #0]
 800c586:	691b      	ldr	r3, [r3, #16]
 800c588:	1ac9      	subs	r1, r1, r3
 800c58a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c58e:	1a9b      	subs	r3, r3, r2
 800c590:	ec5b ab10 	vmov	sl, fp, d0
 800c594:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c598:	2b00      	cmp	r3, #0
 800c59a:	bfce      	itee	gt
 800c59c:	462a      	movgt	r2, r5
 800c59e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c5a2:	465a      	movle	r2, fp
 800c5a4:	462f      	mov	r7, r5
 800c5a6:	46d9      	mov	r9, fp
 800c5a8:	bfcc      	ite	gt
 800c5aa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c5ae:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c5b2:	464b      	mov	r3, r9
 800c5b4:	4652      	mov	r2, sl
 800c5b6:	4620      	mov	r0, r4
 800c5b8:	4639      	mov	r1, r7
 800c5ba:	f7f4 f947 	bl	800084c <__aeabi_ddiv>
 800c5be:	ec41 0b10 	vmov	d0, r0, r1
 800c5c2:	b005      	add	sp, #20
 800c5c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c5c8 <__copybits>:
 800c5c8:	3901      	subs	r1, #1
 800c5ca:	b570      	push	{r4, r5, r6, lr}
 800c5cc:	1149      	asrs	r1, r1, #5
 800c5ce:	6914      	ldr	r4, [r2, #16]
 800c5d0:	3101      	adds	r1, #1
 800c5d2:	f102 0314 	add.w	r3, r2, #20
 800c5d6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c5da:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c5de:	1f05      	subs	r5, r0, #4
 800c5e0:	42a3      	cmp	r3, r4
 800c5e2:	d30c      	bcc.n	800c5fe <__copybits+0x36>
 800c5e4:	1aa3      	subs	r3, r4, r2
 800c5e6:	3b11      	subs	r3, #17
 800c5e8:	f023 0303 	bic.w	r3, r3, #3
 800c5ec:	3211      	adds	r2, #17
 800c5ee:	42a2      	cmp	r2, r4
 800c5f0:	bf88      	it	hi
 800c5f2:	2300      	movhi	r3, #0
 800c5f4:	4418      	add	r0, r3
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	4288      	cmp	r0, r1
 800c5fa:	d305      	bcc.n	800c608 <__copybits+0x40>
 800c5fc:	bd70      	pop	{r4, r5, r6, pc}
 800c5fe:	f853 6b04 	ldr.w	r6, [r3], #4
 800c602:	f845 6f04 	str.w	r6, [r5, #4]!
 800c606:	e7eb      	b.n	800c5e0 <__copybits+0x18>
 800c608:	f840 3b04 	str.w	r3, [r0], #4
 800c60c:	e7f4      	b.n	800c5f8 <__copybits+0x30>

0800c60e <__any_on>:
 800c60e:	f100 0214 	add.w	r2, r0, #20
 800c612:	6900      	ldr	r0, [r0, #16]
 800c614:	114b      	asrs	r3, r1, #5
 800c616:	4298      	cmp	r0, r3
 800c618:	b510      	push	{r4, lr}
 800c61a:	db11      	blt.n	800c640 <__any_on+0x32>
 800c61c:	dd0a      	ble.n	800c634 <__any_on+0x26>
 800c61e:	f011 011f 	ands.w	r1, r1, #31
 800c622:	d007      	beq.n	800c634 <__any_on+0x26>
 800c624:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c628:	fa24 f001 	lsr.w	r0, r4, r1
 800c62c:	fa00 f101 	lsl.w	r1, r0, r1
 800c630:	428c      	cmp	r4, r1
 800c632:	d10b      	bne.n	800c64c <__any_on+0x3e>
 800c634:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c638:	4293      	cmp	r3, r2
 800c63a:	d803      	bhi.n	800c644 <__any_on+0x36>
 800c63c:	2000      	movs	r0, #0
 800c63e:	bd10      	pop	{r4, pc}
 800c640:	4603      	mov	r3, r0
 800c642:	e7f7      	b.n	800c634 <__any_on+0x26>
 800c644:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c648:	2900      	cmp	r1, #0
 800c64a:	d0f5      	beq.n	800c638 <__any_on+0x2a>
 800c64c:	2001      	movs	r0, #1
 800c64e:	e7f6      	b.n	800c63e <__any_on+0x30>

0800c650 <sulp>:
 800c650:	b570      	push	{r4, r5, r6, lr}
 800c652:	4604      	mov	r4, r0
 800c654:	460d      	mov	r5, r1
 800c656:	ec45 4b10 	vmov	d0, r4, r5
 800c65a:	4616      	mov	r6, r2
 800c65c:	f7ff feba 	bl	800c3d4 <__ulp>
 800c660:	ec51 0b10 	vmov	r0, r1, d0
 800c664:	b17e      	cbz	r6, 800c686 <sulp+0x36>
 800c666:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c66a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c66e:	2b00      	cmp	r3, #0
 800c670:	dd09      	ble.n	800c686 <sulp+0x36>
 800c672:	051b      	lsls	r3, r3, #20
 800c674:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c678:	2400      	movs	r4, #0
 800c67a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c67e:	4622      	mov	r2, r4
 800c680:	462b      	mov	r3, r5
 800c682:	f7f3 ffb9 	bl	80005f8 <__aeabi_dmul>
 800c686:	ec41 0b10 	vmov	d0, r0, r1
 800c68a:	bd70      	pop	{r4, r5, r6, pc}
 800c68c:	0000      	movs	r0, r0
	...

0800c690 <_strtod_l>:
 800c690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c694:	b09f      	sub	sp, #124	@ 0x7c
 800c696:	460c      	mov	r4, r1
 800c698:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c69a:	2200      	movs	r2, #0
 800c69c:	921a      	str	r2, [sp, #104]	@ 0x68
 800c69e:	9005      	str	r0, [sp, #20]
 800c6a0:	f04f 0a00 	mov.w	sl, #0
 800c6a4:	f04f 0b00 	mov.w	fp, #0
 800c6a8:	460a      	mov	r2, r1
 800c6aa:	9219      	str	r2, [sp, #100]	@ 0x64
 800c6ac:	7811      	ldrb	r1, [r2, #0]
 800c6ae:	292b      	cmp	r1, #43	@ 0x2b
 800c6b0:	d04a      	beq.n	800c748 <_strtod_l+0xb8>
 800c6b2:	d838      	bhi.n	800c726 <_strtod_l+0x96>
 800c6b4:	290d      	cmp	r1, #13
 800c6b6:	d832      	bhi.n	800c71e <_strtod_l+0x8e>
 800c6b8:	2908      	cmp	r1, #8
 800c6ba:	d832      	bhi.n	800c722 <_strtod_l+0x92>
 800c6bc:	2900      	cmp	r1, #0
 800c6be:	d03b      	beq.n	800c738 <_strtod_l+0xa8>
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	920e      	str	r2, [sp, #56]	@ 0x38
 800c6c4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c6c6:	782a      	ldrb	r2, [r5, #0]
 800c6c8:	2a30      	cmp	r2, #48	@ 0x30
 800c6ca:	f040 80b2 	bne.w	800c832 <_strtod_l+0x1a2>
 800c6ce:	786a      	ldrb	r2, [r5, #1]
 800c6d0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c6d4:	2a58      	cmp	r2, #88	@ 0x58
 800c6d6:	d16e      	bne.n	800c7b6 <_strtod_l+0x126>
 800c6d8:	9302      	str	r3, [sp, #8]
 800c6da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c6dc:	9301      	str	r3, [sp, #4]
 800c6de:	ab1a      	add	r3, sp, #104	@ 0x68
 800c6e0:	9300      	str	r3, [sp, #0]
 800c6e2:	4a8f      	ldr	r2, [pc, #572]	@ (800c920 <_strtod_l+0x290>)
 800c6e4:	9805      	ldr	r0, [sp, #20]
 800c6e6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c6e8:	a919      	add	r1, sp, #100	@ 0x64
 800c6ea:	f001 f8f7 	bl	800d8dc <__gethex>
 800c6ee:	f010 060f 	ands.w	r6, r0, #15
 800c6f2:	4604      	mov	r4, r0
 800c6f4:	d005      	beq.n	800c702 <_strtod_l+0x72>
 800c6f6:	2e06      	cmp	r6, #6
 800c6f8:	d128      	bne.n	800c74c <_strtod_l+0xbc>
 800c6fa:	3501      	adds	r5, #1
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	9519      	str	r5, [sp, #100]	@ 0x64
 800c700:	930e      	str	r3, [sp, #56]	@ 0x38
 800c702:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c704:	2b00      	cmp	r3, #0
 800c706:	f040 858e 	bne.w	800d226 <_strtod_l+0xb96>
 800c70a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c70c:	b1cb      	cbz	r3, 800c742 <_strtod_l+0xb2>
 800c70e:	4652      	mov	r2, sl
 800c710:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c714:	ec43 2b10 	vmov	d0, r2, r3
 800c718:	b01f      	add	sp, #124	@ 0x7c
 800c71a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c71e:	2920      	cmp	r1, #32
 800c720:	d1ce      	bne.n	800c6c0 <_strtod_l+0x30>
 800c722:	3201      	adds	r2, #1
 800c724:	e7c1      	b.n	800c6aa <_strtod_l+0x1a>
 800c726:	292d      	cmp	r1, #45	@ 0x2d
 800c728:	d1ca      	bne.n	800c6c0 <_strtod_l+0x30>
 800c72a:	2101      	movs	r1, #1
 800c72c:	910e      	str	r1, [sp, #56]	@ 0x38
 800c72e:	1c51      	adds	r1, r2, #1
 800c730:	9119      	str	r1, [sp, #100]	@ 0x64
 800c732:	7852      	ldrb	r2, [r2, #1]
 800c734:	2a00      	cmp	r2, #0
 800c736:	d1c5      	bne.n	800c6c4 <_strtod_l+0x34>
 800c738:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c73a:	9419      	str	r4, [sp, #100]	@ 0x64
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	f040 8570 	bne.w	800d222 <_strtod_l+0xb92>
 800c742:	4652      	mov	r2, sl
 800c744:	465b      	mov	r3, fp
 800c746:	e7e5      	b.n	800c714 <_strtod_l+0x84>
 800c748:	2100      	movs	r1, #0
 800c74a:	e7ef      	b.n	800c72c <_strtod_l+0x9c>
 800c74c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c74e:	b13a      	cbz	r2, 800c760 <_strtod_l+0xd0>
 800c750:	2135      	movs	r1, #53	@ 0x35
 800c752:	a81c      	add	r0, sp, #112	@ 0x70
 800c754:	f7ff ff38 	bl	800c5c8 <__copybits>
 800c758:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c75a:	9805      	ldr	r0, [sp, #20]
 800c75c:	f7ff fb0e 	bl	800bd7c <_Bfree>
 800c760:	3e01      	subs	r6, #1
 800c762:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c764:	2e04      	cmp	r6, #4
 800c766:	d806      	bhi.n	800c776 <_strtod_l+0xe6>
 800c768:	e8df f006 	tbb	[pc, r6]
 800c76c:	201d0314 	.word	0x201d0314
 800c770:	14          	.byte	0x14
 800c771:	00          	.byte	0x00
 800c772:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c776:	05e1      	lsls	r1, r4, #23
 800c778:	bf48      	it	mi
 800c77a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c77e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c782:	0d1b      	lsrs	r3, r3, #20
 800c784:	051b      	lsls	r3, r3, #20
 800c786:	2b00      	cmp	r3, #0
 800c788:	d1bb      	bne.n	800c702 <_strtod_l+0x72>
 800c78a:	f7fe fbd3 	bl	800af34 <__errno>
 800c78e:	2322      	movs	r3, #34	@ 0x22
 800c790:	6003      	str	r3, [r0, #0]
 800c792:	e7b6      	b.n	800c702 <_strtod_l+0x72>
 800c794:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c798:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c79c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c7a0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c7a4:	e7e7      	b.n	800c776 <_strtod_l+0xe6>
 800c7a6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800c928 <_strtod_l+0x298>
 800c7aa:	e7e4      	b.n	800c776 <_strtod_l+0xe6>
 800c7ac:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c7b0:	f04f 3aff 	mov.w	sl, #4294967295
 800c7b4:	e7df      	b.n	800c776 <_strtod_l+0xe6>
 800c7b6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c7b8:	1c5a      	adds	r2, r3, #1
 800c7ba:	9219      	str	r2, [sp, #100]	@ 0x64
 800c7bc:	785b      	ldrb	r3, [r3, #1]
 800c7be:	2b30      	cmp	r3, #48	@ 0x30
 800c7c0:	d0f9      	beq.n	800c7b6 <_strtod_l+0x126>
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d09d      	beq.n	800c702 <_strtod_l+0x72>
 800c7c6:	2301      	movs	r3, #1
 800c7c8:	2700      	movs	r7, #0
 800c7ca:	9308      	str	r3, [sp, #32]
 800c7cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c7ce:	930c      	str	r3, [sp, #48]	@ 0x30
 800c7d0:	970b      	str	r7, [sp, #44]	@ 0x2c
 800c7d2:	46b9      	mov	r9, r7
 800c7d4:	220a      	movs	r2, #10
 800c7d6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c7d8:	7805      	ldrb	r5, [r0, #0]
 800c7da:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c7de:	b2d9      	uxtb	r1, r3
 800c7e0:	2909      	cmp	r1, #9
 800c7e2:	d928      	bls.n	800c836 <_strtod_l+0x1a6>
 800c7e4:	494f      	ldr	r1, [pc, #316]	@ (800c924 <_strtod_l+0x294>)
 800c7e6:	2201      	movs	r2, #1
 800c7e8:	f7fe fac7 	bl	800ad7a <strncmp>
 800c7ec:	2800      	cmp	r0, #0
 800c7ee:	d032      	beq.n	800c856 <_strtod_l+0x1c6>
 800c7f0:	2000      	movs	r0, #0
 800c7f2:	462a      	mov	r2, r5
 800c7f4:	900a      	str	r0, [sp, #40]	@ 0x28
 800c7f6:	464d      	mov	r5, r9
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	2a65      	cmp	r2, #101	@ 0x65
 800c7fc:	d001      	beq.n	800c802 <_strtod_l+0x172>
 800c7fe:	2a45      	cmp	r2, #69	@ 0x45
 800c800:	d114      	bne.n	800c82c <_strtod_l+0x19c>
 800c802:	b91d      	cbnz	r5, 800c80c <_strtod_l+0x17c>
 800c804:	9a08      	ldr	r2, [sp, #32]
 800c806:	4302      	orrs	r2, r0
 800c808:	d096      	beq.n	800c738 <_strtod_l+0xa8>
 800c80a:	2500      	movs	r5, #0
 800c80c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c80e:	1c62      	adds	r2, r4, #1
 800c810:	9219      	str	r2, [sp, #100]	@ 0x64
 800c812:	7862      	ldrb	r2, [r4, #1]
 800c814:	2a2b      	cmp	r2, #43	@ 0x2b
 800c816:	d07a      	beq.n	800c90e <_strtod_l+0x27e>
 800c818:	2a2d      	cmp	r2, #45	@ 0x2d
 800c81a:	d07e      	beq.n	800c91a <_strtod_l+0x28a>
 800c81c:	f04f 0c00 	mov.w	ip, #0
 800c820:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c824:	2909      	cmp	r1, #9
 800c826:	f240 8085 	bls.w	800c934 <_strtod_l+0x2a4>
 800c82a:	9419      	str	r4, [sp, #100]	@ 0x64
 800c82c:	f04f 0800 	mov.w	r8, #0
 800c830:	e0a5      	b.n	800c97e <_strtod_l+0x2ee>
 800c832:	2300      	movs	r3, #0
 800c834:	e7c8      	b.n	800c7c8 <_strtod_l+0x138>
 800c836:	f1b9 0f08 	cmp.w	r9, #8
 800c83a:	bfd8      	it	le
 800c83c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800c83e:	f100 0001 	add.w	r0, r0, #1
 800c842:	bfda      	itte	le
 800c844:	fb02 3301 	mlale	r3, r2, r1, r3
 800c848:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800c84a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800c84e:	f109 0901 	add.w	r9, r9, #1
 800c852:	9019      	str	r0, [sp, #100]	@ 0x64
 800c854:	e7bf      	b.n	800c7d6 <_strtod_l+0x146>
 800c856:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c858:	1c5a      	adds	r2, r3, #1
 800c85a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c85c:	785a      	ldrb	r2, [r3, #1]
 800c85e:	f1b9 0f00 	cmp.w	r9, #0
 800c862:	d03b      	beq.n	800c8dc <_strtod_l+0x24c>
 800c864:	900a      	str	r0, [sp, #40]	@ 0x28
 800c866:	464d      	mov	r5, r9
 800c868:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c86c:	2b09      	cmp	r3, #9
 800c86e:	d912      	bls.n	800c896 <_strtod_l+0x206>
 800c870:	2301      	movs	r3, #1
 800c872:	e7c2      	b.n	800c7fa <_strtod_l+0x16a>
 800c874:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c876:	1c5a      	adds	r2, r3, #1
 800c878:	9219      	str	r2, [sp, #100]	@ 0x64
 800c87a:	785a      	ldrb	r2, [r3, #1]
 800c87c:	3001      	adds	r0, #1
 800c87e:	2a30      	cmp	r2, #48	@ 0x30
 800c880:	d0f8      	beq.n	800c874 <_strtod_l+0x1e4>
 800c882:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c886:	2b08      	cmp	r3, #8
 800c888:	f200 84d2 	bhi.w	800d230 <_strtod_l+0xba0>
 800c88c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c88e:	900a      	str	r0, [sp, #40]	@ 0x28
 800c890:	2000      	movs	r0, #0
 800c892:	930c      	str	r3, [sp, #48]	@ 0x30
 800c894:	4605      	mov	r5, r0
 800c896:	3a30      	subs	r2, #48	@ 0x30
 800c898:	f100 0301 	add.w	r3, r0, #1
 800c89c:	d018      	beq.n	800c8d0 <_strtod_l+0x240>
 800c89e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c8a0:	4419      	add	r1, r3
 800c8a2:	910a      	str	r1, [sp, #40]	@ 0x28
 800c8a4:	462e      	mov	r6, r5
 800c8a6:	f04f 0e0a 	mov.w	lr, #10
 800c8aa:	1c71      	adds	r1, r6, #1
 800c8ac:	eba1 0c05 	sub.w	ip, r1, r5
 800c8b0:	4563      	cmp	r3, ip
 800c8b2:	dc15      	bgt.n	800c8e0 <_strtod_l+0x250>
 800c8b4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800c8b8:	182b      	adds	r3, r5, r0
 800c8ba:	2b08      	cmp	r3, #8
 800c8bc:	f105 0501 	add.w	r5, r5, #1
 800c8c0:	4405      	add	r5, r0
 800c8c2:	dc1a      	bgt.n	800c8fa <_strtod_l+0x26a>
 800c8c4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c8c6:	230a      	movs	r3, #10
 800c8c8:	fb03 2301 	mla	r3, r3, r1, r2
 800c8cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c8d2:	1c51      	adds	r1, r2, #1
 800c8d4:	9119      	str	r1, [sp, #100]	@ 0x64
 800c8d6:	7852      	ldrb	r2, [r2, #1]
 800c8d8:	4618      	mov	r0, r3
 800c8da:	e7c5      	b.n	800c868 <_strtod_l+0x1d8>
 800c8dc:	4648      	mov	r0, r9
 800c8de:	e7ce      	b.n	800c87e <_strtod_l+0x1ee>
 800c8e0:	2e08      	cmp	r6, #8
 800c8e2:	dc05      	bgt.n	800c8f0 <_strtod_l+0x260>
 800c8e4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800c8e6:	fb0e f606 	mul.w	r6, lr, r6
 800c8ea:	960b      	str	r6, [sp, #44]	@ 0x2c
 800c8ec:	460e      	mov	r6, r1
 800c8ee:	e7dc      	b.n	800c8aa <_strtod_l+0x21a>
 800c8f0:	2910      	cmp	r1, #16
 800c8f2:	bfd8      	it	le
 800c8f4:	fb0e f707 	mulle.w	r7, lr, r7
 800c8f8:	e7f8      	b.n	800c8ec <_strtod_l+0x25c>
 800c8fa:	2b0f      	cmp	r3, #15
 800c8fc:	bfdc      	itt	le
 800c8fe:	230a      	movle	r3, #10
 800c900:	fb03 2707 	mlale	r7, r3, r7, r2
 800c904:	e7e3      	b.n	800c8ce <_strtod_l+0x23e>
 800c906:	2300      	movs	r3, #0
 800c908:	930a      	str	r3, [sp, #40]	@ 0x28
 800c90a:	2301      	movs	r3, #1
 800c90c:	e77a      	b.n	800c804 <_strtod_l+0x174>
 800c90e:	f04f 0c00 	mov.w	ip, #0
 800c912:	1ca2      	adds	r2, r4, #2
 800c914:	9219      	str	r2, [sp, #100]	@ 0x64
 800c916:	78a2      	ldrb	r2, [r4, #2]
 800c918:	e782      	b.n	800c820 <_strtod_l+0x190>
 800c91a:	f04f 0c01 	mov.w	ip, #1
 800c91e:	e7f8      	b.n	800c912 <_strtod_l+0x282>
 800c920:	0800ee34 	.word	0x0800ee34
 800c924:	0800ec6b 	.word	0x0800ec6b
 800c928:	7ff00000 	.word	0x7ff00000
 800c92c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c92e:	1c51      	adds	r1, r2, #1
 800c930:	9119      	str	r1, [sp, #100]	@ 0x64
 800c932:	7852      	ldrb	r2, [r2, #1]
 800c934:	2a30      	cmp	r2, #48	@ 0x30
 800c936:	d0f9      	beq.n	800c92c <_strtod_l+0x29c>
 800c938:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c93c:	2908      	cmp	r1, #8
 800c93e:	f63f af75 	bhi.w	800c82c <_strtod_l+0x19c>
 800c942:	3a30      	subs	r2, #48	@ 0x30
 800c944:	9209      	str	r2, [sp, #36]	@ 0x24
 800c946:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c948:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c94a:	f04f 080a 	mov.w	r8, #10
 800c94e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c950:	1c56      	adds	r6, r2, #1
 800c952:	9619      	str	r6, [sp, #100]	@ 0x64
 800c954:	7852      	ldrb	r2, [r2, #1]
 800c956:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c95a:	f1be 0f09 	cmp.w	lr, #9
 800c95e:	d939      	bls.n	800c9d4 <_strtod_l+0x344>
 800c960:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c962:	1a76      	subs	r6, r6, r1
 800c964:	2e08      	cmp	r6, #8
 800c966:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c96a:	dc03      	bgt.n	800c974 <_strtod_l+0x2e4>
 800c96c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c96e:	4588      	cmp	r8, r1
 800c970:	bfa8      	it	ge
 800c972:	4688      	movge	r8, r1
 800c974:	f1bc 0f00 	cmp.w	ip, #0
 800c978:	d001      	beq.n	800c97e <_strtod_l+0x2ee>
 800c97a:	f1c8 0800 	rsb	r8, r8, #0
 800c97e:	2d00      	cmp	r5, #0
 800c980:	d14e      	bne.n	800ca20 <_strtod_l+0x390>
 800c982:	9908      	ldr	r1, [sp, #32]
 800c984:	4308      	orrs	r0, r1
 800c986:	f47f aebc 	bne.w	800c702 <_strtod_l+0x72>
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	f47f aed4 	bne.w	800c738 <_strtod_l+0xa8>
 800c990:	2a69      	cmp	r2, #105	@ 0x69
 800c992:	d028      	beq.n	800c9e6 <_strtod_l+0x356>
 800c994:	dc25      	bgt.n	800c9e2 <_strtod_l+0x352>
 800c996:	2a49      	cmp	r2, #73	@ 0x49
 800c998:	d025      	beq.n	800c9e6 <_strtod_l+0x356>
 800c99a:	2a4e      	cmp	r2, #78	@ 0x4e
 800c99c:	f47f aecc 	bne.w	800c738 <_strtod_l+0xa8>
 800c9a0:	499a      	ldr	r1, [pc, #616]	@ (800cc0c <_strtod_l+0x57c>)
 800c9a2:	a819      	add	r0, sp, #100	@ 0x64
 800c9a4:	f001 f9bc 	bl	800dd20 <__match>
 800c9a8:	2800      	cmp	r0, #0
 800c9aa:	f43f aec5 	beq.w	800c738 <_strtod_l+0xa8>
 800c9ae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c9b0:	781b      	ldrb	r3, [r3, #0]
 800c9b2:	2b28      	cmp	r3, #40	@ 0x28
 800c9b4:	d12e      	bne.n	800ca14 <_strtod_l+0x384>
 800c9b6:	4996      	ldr	r1, [pc, #600]	@ (800cc10 <_strtod_l+0x580>)
 800c9b8:	aa1c      	add	r2, sp, #112	@ 0x70
 800c9ba:	a819      	add	r0, sp, #100	@ 0x64
 800c9bc:	f001 f9c4 	bl	800dd48 <__hexnan>
 800c9c0:	2805      	cmp	r0, #5
 800c9c2:	d127      	bne.n	800ca14 <_strtod_l+0x384>
 800c9c4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c9c6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c9ca:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c9ce:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c9d2:	e696      	b.n	800c702 <_strtod_l+0x72>
 800c9d4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c9d6:	fb08 2101 	mla	r1, r8, r1, r2
 800c9da:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c9de:	9209      	str	r2, [sp, #36]	@ 0x24
 800c9e0:	e7b5      	b.n	800c94e <_strtod_l+0x2be>
 800c9e2:	2a6e      	cmp	r2, #110	@ 0x6e
 800c9e4:	e7da      	b.n	800c99c <_strtod_l+0x30c>
 800c9e6:	498b      	ldr	r1, [pc, #556]	@ (800cc14 <_strtod_l+0x584>)
 800c9e8:	a819      	add	r0, sp, #100	@ 0x64
 800c9ea:	f001 f999 	bl	800dd20 <__match>
 800c9ee:	2800      	cmp	r0, #0
 800c9f0:	f43f aea2 	beq.w	800c738 <_strtod_l+0xa8>
 800c9f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c9f6:	4988      	ldr	r1, [pc, #544]	@ (800cc18 <_strtod_l+0x588>)
 800c9f8:	3b01      	subs	r3, #1
 800c9fa:	a819      	add	r0, sp, #100	@ 0x64
 800c9fc:	9319      	str	r3, [sp, #100]	@ 0x64
 800c9fe:	f001 f98f 	bl	800dd20 <__match>
 800ca02:	b910      	cbnz	r0, 800ca0a <_strtod_l+0x37a>
 800ca04:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ca06:	3301      	adds	r3, #1
 800ca08:	9319      	str	r3, [sp, #100]	@ 0x64
 800ca0a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800cc28 <_strtod_l+0x598>
 800ca0e:	f04f 0a00 	mov.w	sl, #0
 800ca12:	e676      	b.n	800c702 <_strtod_l+0x72>
 800ca14:	4881      	ldr	r0, [pc, #516]	@ (800cc1c <_strtod_l+0x58c>)
 800ca16:	f000 febf 	bl	800d798 <nan>
 800ca1a:	ec5b ab10 	vmov	sl, fp, d0
 800ca1e:	e670      	b.n	800c702 <_strtod_l+0x72>
 800ca20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ca22:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800ca24:	eba8 0303 	sub.w	r3, r8, r3
 800ca28:	f1b9 0f00 	cmp.w	r9, #0
 800ca2c:	bf08      	it	eq
 800ca2e:	46a9      	moveq	r9, r5
 800ca30:	2d10      	cmp	r5, #16
 800ca32:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca34:	462c      	mov	r4, r5
 800ca36:	bfa8      	it	ge
 800ca38:	2410      	movge	r4, #16
 800ca3a:	f7f3 fd63 	bl	8000504 <__aeabi_ui2d>
 800ca3e:	2d09      	cmp	r5, #9
 800ca40:	4682      	mov	sl, r0
 800ca42:	468b      	mov	fp, r1
 800ca44:	dc13      	bgt.n	800ca6e <_strtod_l+0x3de>
 800ca46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	f43f ae5a 	beq.w	800c702 <_strtod_l+0x72>
 800ca4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca50:	dd78      	ble.n	800cb44 <_strtod_l+0x4b4>
 800ca52:	2b16      	cmp	r3, #22
 800ca54:	dc5f      	bgt.n	800cb16 <_strtod_l+0x486>
 800ca56:	4972      	ldr	r1, [pc, #456]	@ (800cc20 <_strtod_l+0x590>)
 800ca58:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ca5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca60:	4652      	mov	r2, sl
 800ca62:	465b      	mov	r3, fp
 800ca64:	f7f3 fdc8 	bl	80005f8 <__aeabi_dmul>
 800ca68:	4682      	mov	sl, r0
 800ca6a:	468b      	mov	fp, r1
 800ca6c:	e649      	b.n	800c702 <_strtod_l+0x72>
 800ca6e:	4b6c      	ldr	r3, [pc, #432]	@ (800cc20 <_strtod_l+0x590>)
 800ca70:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ca74:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ca78:	f7f3 fdbe 	bl	80005f8 <__aeabi_dmul>
 800ca7c:	4682      	mov	sl, r0
 800ca7e:	4638      	mov	r0, r7
 800ca80:	468b      	mov	fp, r1
 800ca82:	f7f3 fd3f 	bl	8000504 <__aeabi_ui2d>
 800ca86:	4602      	mov	r2, r0
 800ca88:	460b      	mov	r3, r1
 800ca8a:	4650      	mov	r0, sl
 800ca8c:	4659      	mov	r1, fp
 800ca8e:	f7f3 fbfd 	bl	800028c <__adddf3>
 800ca92:	2d0f      	cmp	r5, #15
 800ca94:	4682      	mov	sl, r0
 800ca96:	468b      	mov	fp, r1
 800ca98:	ddd5      	ble.n	800ca46 <_strtod_l+0x3b6>
 800ca9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca9c:	1b2c      	subs	r4, r5, r4
 800ca9e:	441c      	add	r4, r3
 800caa0:	2c00      	cmp	r4, #0
 800caa2:	f340 8093 	ble.w	800cbcc <_strtod_l+0x53c>
 800caa6:	f014 030f 	ands.w	r3, r4, #15
 800caaa:	d00a      	beq.n	800cac2 <_strtod_l+0x432>
 800caac:	495c      	ldr	r1, [pc, #368]	@ (800cc20 <_strtod_l+0x590>)
 800caae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cab2:	4652      	mov	r2, sl
 800cab4:	465b      	mov	r3, fp
 800cab6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800caba:	f7f3 fd9d 	bl	80005f8 <__aeabi_dmul>
 800cabe:	4682      	mov	sl, r0
 800cac0:	468b      	mov	fp, r1
 800cac2:	f034 040f 	bics.w	r4, r4, #15
 800cac6:	d073      	beq.n	800cbb0 <_strtod_l+0x520>
 800cac8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800cacc:	dd49      	ble.n	800cb62 <_strtod_l+0x4d2>
 800cace:	2400      	movs	r4, #0
 800cad0:	46a0      	mov	r8, r4
 800cad2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800cad4:	46a1      	mov	r9, r4
 800cad6:	9a05      	ldr	r2, [sp, #20]
 800cad8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800cc28 <_strtod_l+0x598>
 800cadc:	2322      	movs	r3, #34	@ 0x22
 800cade:	6013      	str	r3, [r2, #0]
 800cae0:	f04f 0a00 	mov.w	sl, #0
 800cae4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	f43f ae0b 	beq.w	800c702 <_strtod_l+0x72>
 800caec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800caee:	9805      	ldr	r0, [sp, #20]
 800caf0:	f7ff f944 	bl	800bd7c <_Bfree>
 800caf4:	9805      	ldr	r0, [sp, #20]
 800caf6:	4649      	mov	r1, r9
 800caf8:	f7ff f940 	bl	800bd7c <_Bfree>
 800cafc:	9805      	ldr	r0, [sp, #20]
 800cafe:	4641      	mov	r1, r8
 800cb00:	f7ff f93c 	bl	800bd7c <_Bfree>
 800cb04:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cb06:	9805      	ldr	r0, [sp, #20]
 800cb08:	f7ff f938 	bl	800bd7c <_Bfree>
 800cb0c:	9805      	ldr	r0, [sp, #20]
 800cb0e:	4621      	mov	r1, r4
 800cb10:	f7ff f934 	bl	800bd7c <_Bfree>
 800cb14:	e5f5      	b.n	800c702 <_strtod_l+0x72>
 800cb16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cb18:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800cb1c:	4293      	cmp	r3, r2
 800cb1e:	dbbc      	blt.n	800ca9a <_strtod_l+0x40a>
 800cb20:	4c3f      	ldr	r4, [pc, #252]	@ (800cc20 <_strtod_l+0x590>)
 800cb22:	f1c5 050f 	rsb	r5, r5, #15
 800cb26:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800cb2a:	4652      	mov	r2, sl
 800cb2c:	465b      	mov	r3, fp
 800cb2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb32:	f7f3 fd61 	bl	80005f8 <__aeabi_dmul>
 800cb36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb38:	1b5d      	subs	r5, r3, r5
 800cb3a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800cb3e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cb42:	e78f      	b.n	800ca64 <_strtod_l+0x3d4>
 800cb44:	3316      	adds	r3, #22
 800cb46:	dba8      	blt.n	800ca9a <_strtod_l+0x40a>
 800cb48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cb4a:	eba3 0808 	sub.w	r8, r3, r8
 800cb4e:	4b34      	ldr	r3, [pc, #208]	@ (800cc20 <_strtod_l+0x590>)
 800cb50:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800cb54:	e9d8 2300 	ldrd	r2, r3, [r8]
 800cb58:	4650      	mov	r0, sl
 800cb5a:	4659      	mov	r1, fp
 800cb5c:	f7f3 fe76 	bl	800084c <__aeabi_ddiv>
 800cb60:	e782      	b.n	800ca68 <_strtod_l+0x3d8>
 800cb62:	2300      	movs	r3, #0
 800cb64:	4f2f      	ldr	r7, [pc, #188]	@ (800cc24 <_strtod_l+0x594>)
 800cb66:	1124      	asrs	r4, r4, #4
 800cb68:	4650      	mov	r0, sl
 800cb6a:	4659      	mov	r1, fp
 800cb6c:	461e      	mov	r6, r3
 800cb6e:	2c01      	cmp	r4, #1
 800cb70:	dc21      	bgt.n	800cbb6 <_strtod_l+0x526>
 800cb72:	b10b      	cbz	r3, 800cb78 <_strtod_l+0x4e8>
 800cb74:	4682      	mov	sl, r0
 800cb76:	468b      	mov	fp, r1
 800cb78:	492a      	ldr	r1, [pc, #168]	@ (800cc24 <_strtod_l+0x594>)
 800cb7a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800cb7e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800cb82:	4652      	mov	r2, sl
 800cb84:	465b      	mov	r3, fp
 800cb86:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb8a:	f7f3 fd35 	bl	80005f8 <__aeabi_dmul>
 800cb8e:	4b26      	ldr	r3, [pc, #152]	@ (800cc28 <_strtod_l+0x598>)
 800cb90:	460a      	mov	r2, r1
 800cb92:	400b      	ands	r3, r1
 800cb94:	4925      	ldr	r1, [pc, #148]	@ (800cc2c <_strtod_l+0x59c>)
 800cb96:	428b      	cmp	r3, r1
 800cb98:	4682      	mov	sl, r0
 800cb9a:	d898      	bhi.n	800cace <_strtod_l+0x43e>
 800cb9c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800cba0:	428b      	cmp	r3, r1
 800cba2:	bf86      	itte	hi
 800cba4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800cc30 <_strtod_l+0x5a0>
 800cba8:	f04f 3aff 	movhi.w	sl, #4294967295
 800cbac:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	9308      	str	r3, [sp, #32]
 800cbb4:	e076      	b.n	800cca4 <_strtod_l+0x614>
 800cbb6:	07e2      	lsls	r2, r4, #31
 800cbb8:	d504      	bpl.n	800cbc4 <_strtod_l+0x534>
 800cbba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cbbe:	f7f3 fd1b 	bl	80005f8 <__aeabi_dmul>
 800cbc2:	2301      	movs	r3, #1
 800cbc4:	3601      	adds	r6, #1
 800cbc6:	1064      	asrs	r4, r4, #1
 800cbc8:	3708      	adds	r7, #8
 800cbca:	e7d0      	b.n	800cb6e <_strtod_l+0x4de>
 800cbcc:	d0f0      	beq.n	800cbb0 <_strtod_l+0x520>
 800cbce:	4264      	negs	r4, r4
 800cbd0:	f014 020f 	ands.w	r2, r4, #15
 800cbd4:	d00a      	beq.n	800cbec <_strtod_l+0x55c>
 800cbd6:	4b12      	ldr	r3, [pc, #72]	@ (800cc20 <_strtod_l+0x590>)
 800cbd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cbdc:	4650      	mov	r0, sl
 800cbde:	4659      	mov	r1, fp
 800cbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbe4:	f7f3 fe32 	bl	800084c <__aeabi_ddiv>
 800cbe8:	4682      	mov	sl, r0
 800cbea:	468b      	mov	fp, r1
 800cbec:	1124      	asrs	r4, r4, #4
 800cbee:	d0df      	beq.n	800cbb0 <_strtod_l+0x520>
 800cbf0:	2c1f      	cmp	r4, #31
 800cbf2:	dd1f      	ble.n	800cc34 <_strtod_l+0x5a4>
 800cbf4:	2400      	movs	r4, #0
 800cbf6:	46a0      	mov	r8, r4
 800cbf8:	940b      	str	r4, [sp, #44]	@ 0x2c
 800cbfa:	46a1      	mov	r9, r4
 800cbfc:	9a05      	ldr	r2, [sp, #20]
 800cbfe:	2322      	movs	r3, #34	@ 0x22
 800cc00:	f04f 0a00 	mov.w	sl, #0
 800cc04:	f04f 0b00 	mov.w	fp, #0
 800cc08:	6013      	str	r3, [r2, #0]
 800cc0a:	e76b      	b.n	800cae4 <_strtod_l+0x454>
 800cc0c:	0800eb59 	.word	0x0800eb59
 800cc10:	0800ee20 	.word	0x0800ee20
 800cc14:	0800eb51 	.word	0x0800eb51
 800cc18:	0800eb88 	.word	0x0800eb88
 800cc1c:	0800ecc1 	.word	0x0800ecc1
 800cc20:	0800ed58 	.word	0x0800ed58
 800cc24:	0800ed30 	.word	0x0800ed30
 800cc28:	7ff00000 	.word	0x7ff00000
 800cc2c:	7ca00000 	.word	0x7ca00000
 800cc30:	7fefffff 	.word	0x7fefffff
 800cc34:	f014 0310 	ands.w	r3, r4, #16
 800cc38:	bf18      	it	ne
 800cc3a:	236a      	movne	r3, #106	@ 0x6a
 800cc3c:	4ea9      	ldr	r6, [pc, #676]	@ (800cee4 <_strtod_l+0x854>)
 800cc3e:	9308      	str	r3, [sp, #32]
 800cc40:	4650      	mov	r0, sl
 800cc42:	4659      	mov	r1, fp
 800cc44:	2300      	movs	r3, #0
 800cc46:	07e7      	lsls	r7, r4, #31
 800cc48:	d504      	bpl.n	800cc54 <_strtod_l+0x5c4>
 800cc4a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cc4e:	f7f3 fcd3 	bl	80005f8 <__aeabi_dmul>
 800cc52:	2301      	movs	r3, #1
 800cc54:	1064      	asrs	r4, r4, #1
 800cc56:	f106 0608 	add.w	r6, r6, #8
 800cc5a:	d1f4      	bne.n	800cc46 <_strtod_l+0x5b6>
 800cc5c:	b10b      	cbz	r3, 800cc62 <_strtod_l+0x5d2>
 800cc5e:	4682      	mov	sl, r0
 800cc60:	468b      	mov	fp, r1
 800cc62:	9b08      	ldr	r3, [sp, #32]
 800cc64:	b1b3      	cbz	r3, 800cc94 <_strtod_l+0x604>
 800cc66:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800cc6a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	4659      	mov	r1, fp
 800cc72:	dd0f      	ble.n	800cc94 <_strtod_l+0x604>
 800cc74:	2b1f      	cmp	r3, #31
 800cc76:	dd56      	ble.n	800cd26 <_strtod_l+0x696>
 800cc78:	2b34      	cmp	r3, #52	@ 0x34
 800cc7a:	bfde      	ittt	le
 800cc7c:	f04f 33ff 	movle.w	r3, #4294967295
 800cc80:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800cc84:	4093      	lslle	r3, r2
 800cc86:	f04f 0a00 	mov.w	sl, #0
 800cc8a:	bfcc      	ite	gt
 800cc8c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800cc90:	ea03 0b01 	andle.w	fp, r3, r1
 800cc94:	2200      	movs	r2, #0
 800cc96:	2300      	movs	r3, #0
 800cc98:	4650      	mov	r0, sl
 800cc9a:	4659      	mov	r1, fp
 800cc9c:	f7f3 ff14 	bl	8000ac8 <__aeabi_dcmpeq>
 800cca0:	2800      	cmp	r0, #0
 800cca2:	d1a7      	bne.n	800cbf4 <_strtod_l+0x564>
 800cca4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cca6:	9300      	str	r3, [sp, #0]
 800cca8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ccaa:	9805      	ldr	r0, [sp, #20]
 800ccac:	462b      	mov	r3, r5
 800ccae:	464a      	mov	r2, r9
 800ccb0:	f7ff f8cc 	bl	800be4c <__s2b>
 800ccb4:	900b      	str	r0, [sp, #44]	@ 0x2c
 800ccb6:	2800      	cmp	r0, #0
 800ccb8:	f43f af09 	beq.w	800cace <_strtod_l+0x43e>
 800ccbc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ccbe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ccc0:	2a00      	cmp	r2, #0
 800ccc2:	eba3 0308 	sub.w	r3, r3, r8
 800ccc6:	bfa8      	it	ge
 800ccc8:	2300      	movge	r3, #0
 800ccca:	9312      	str	r3, [sp, #72]	@ 0x48
 800cccc:	2400      	movs	r4, #0
 800ccce:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ccd2:	9316      	str	r3, [sp, #88]	@ 0x58
 800ccd4:	46a0      	mov	r8, r4
 800ccd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ccd8:	9805      	ldr	r0, [sp, #20]
 800ccda:	6859      	ldr	r1, [r3, #4]
 800ccdc:	f7ff f80e 	bl	800bcfc <_Balloc>
 800cce0:	4681      	mov	r9, r0
 800cce2:	2800      	cmp	r0, #0
 800cce4:	f43f aef7 	beq.w	800cad6 <_strtod_l+0x446>
 800cce8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ccea:	691a      	ldr	r2, [r3, #16]
 800ccec:	3202      	adds	r2, #2
 800ccee:	f103 010c 	add.w	r1, r3, #12
 800ccf2:	0092      	lsls	r2, r2, #2
 800ccf4:	300c      	adds	r0, #12
 800ccf6:	f7fe f94a 	bl	800af8e <memcpy>
 800ccfa:	ec4b ab10 	vmov	d0, sl, fp
 800ccfe:	9805      	ldr	r0, [sp, #20]
 800cd00:	aa1c      	add	r2, sp, #112	@ 0x70
 800cd02:	a91b      	add	r1, sp, #108	@ 0x6c
 800cd04:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800cd08:	f7ff fbd4 	bl	800c4b4 <__d2b>
 800cd0c:	901a      	str	r0, [sp, #104]	@ 0x68
 800cd0e:	2800      	cmp	r0, #0
 800cd10:	f43f aee1 	beq.w	800cad6 <_strtod_l+0x446>
 800cd14:	9805      	ldr	r0, [sp, #20]
 800cd16:	2101      	movs	r1, #1
 800cd18:	f7ff f92e 	bl	800bf78 <__i2b>
 800cd1c:	4680      	mov	r8, r0
 800cd1e:	b948      	cbnz	r0, 800cd34 <_strtod_l+0x6a4>
 800cd20:	f04f 0800 	mov.w	r8, #0
 800cd24:	e6d7      	b.n	800cad6 <_strtod_l+0x446>
 800cd26:	f04f 32ff 	mov.w	r2, #4294967295
 800cd2a:	fa02 f303 	lsl.w	r3, r2, r3
 800cd2e:	ea03 0a0a 	and.w	sl, r3, sl
 800cd32:	e7af      	b.n	800cc94 <_strtod_l+0x604>
 800cd34:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800cd36:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800cd38:	2d00      	cmp	r5, #0
 800cd3a:	bfab      	itete	ge
 800cd3c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800cd3e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800cd40:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800cd42:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800cd44:	bfac      	ite	ge
 800cd46:	18ef      	addge	r7, r5, r3
 800cd48:	1b5e      	sublt	r6, r3, r5
 800cd4a:	9b08      	ldr	r3, [sp, #32]
 800cd4c:	1aed      	subs	r5, r5, r3
 800cd4e:	4415      	add	r5, r2
 800cd50:	4b65      	ldr	r3, [pc, #404]	@ (800cee8 <_strtod_l+0x858>)
 800cd52:	3d01      	subs	r5, #1
 800cd54:	429d      	cmp	r5, r3
 800cd56:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800cd5a:	da50      	bge.n	800cdfe <_strtod_l+0x76e>
 800cd5c:	1b5b      	subs	r3, r3, r5
 800cd5e:	2b1f      	cmp	r3, #31
 800cd60:	eba2 0203 	sub.w	r2, r2, r3
 800cd64:	f04f 0101 	mov.w	r1, #1
 800cd68:	dc3d      	bgt.n	800cde6 <_strtod_l+0x756>
 800cd6a:	fa01 f303 	lsl.w	r3, r1, r3
 800cd6e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cd70:	2300      	movs	r3, #0
 800cd72:	9310      	str	r3, [sp, #64]	@ 0x40
 800cd74:	18bd      	adds	r5, r7, r2
 800cd76:	9b08      	ldr	r3, [sp, #32]
 800cd78:	42af      	cmp	r7, r5
 800cd7a:	4416      	add	r6, r2
 800cd7c:	441e      	add	r6, r3
 800cd7e:	463b      	mov	r3, r7
 800cd80:	bfa8      	it	ge
 800cd82:	462b      	movge	r3, r5
 800cd84:	42b3      	cmp	r3, r6
 800cd86:	bfa8      	it	ge
 800cd88:	4633      	movge	r3, r6
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	bfc2      	ittt	gt
 800cd8e:	1aed      	subgt	r5, r5, r3
 800cd90:	1af6      	subgt	r6, r6, r3
 800cd92:	1aff      	subgt	r7, r7, r3
 800cd94:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	dd16      	ble.n	800cdc8 <_strtod_l+0x738>
 800cd9a:	4641      	mov	r1, r8
 800cd9c:	9805      	ldr	r0, [sp, #20]
 800cd9e:	461a      	mov	r2, r3
 800cda0:	f7ff f9a2 	bl	800c0e8 <__pow5mult>
 800cda4:	4680      	mov	r8, r0
 800cda6:	2800      	cmp	r0, #0
 800cda8:	d0ba      	beq.n	800cd20 <_strtod_l+0x690>
 800cdaa:	4601      	mov	r1, r0
 800cdac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cdae:	9805      	ldr	r0, [sp, #20]
 800cdb0:	f7ff f8f8 	bl	800bfa4 <__multiply>
 800cdb4:	900a      	str	r0, [sp, #40]	@ 0x28
 800cdb6:	2800      	cmp	r0, #0
 800cdb8:	f43f ae8d 	beq.w	800cad6 <_strtod_l+0x446>
 800cdbc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cdbe:	9805      	ldr	r0, [sp, #20]
 800cdc0:	f7fe ffdc 	bl	800bd7c <_Bfree>
 800cdc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cdc6:	931a      	str	r3, [sp, #104]	@ 0x68
 800cdc8:	2d00      	cmp	r5, #0
 800cdca:	dc1d      	bgt.n	800ce08 <_strtod_l+0x778>
 800cdcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	dd23      	ble.n	800ce1a <_strtod_l+0x78a>
 800cdd2:	4649      	mov	r1, r9
 800cdd4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800cdd6:	9805      	ldr	r0, [sp, #20]
 800cdd8:	f7ff f986 	bl	800c0e8 <__pow5mult>
 800cddc:	4681      	mov	r9, r0
 800cdde:	b9e0      	cbnz	r0, 800ce1a <_strtod_l+0x78a>
 800cde0:	f04f 0900 	mov.w	r9, #0
 800cde4:	e677      	b.n	800cad6 <_strtod_l+0x446>
 800cde6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800cdea:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800cdee:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800cdf2:	35e2      	adds	r5, #226	@ 0xe2
 800cdf4:	fa01 f305 	lsl.w	r3, r1, r5
 800cdf8:	9310      	str	r3, [sp, #64]	@ 0x40
 800cdfa:	9113      	str	r1, [sp, #76]	@ 0x4c
 800cdfc:	e7ba      	b.n	800cd74 <_strtod_l+0x6e4>
 800cdfe:	2300      	movs	r3, #0
 800ce00:	9310      	str	r3, [sp, #64]	@ 0x40
 800ce02:	2301      	movs	r3, #1
 800ce04:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ce06:	e7b5      	b.n	800cd74 <_strtod_l+0x6e4>
 800ce08:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ce0a:	9805      	ldr	r0, [sp, #20]
 800ce0c:	462a      	mov	r2, r5
 800ce0e:	f7ff f9c5 	bl	800c19c <__lshift>
 800ce12:	901a      	str	r0, [sp, #104]	@ 0x68
 800ce14:	2800      	cmp	r0, #0
 800ce16:	d1d9      	bne.n	800cdcc <_strtod_l+0x73c>
 800ce18:	e65d      	b.n	800cad6 <_strtod_l+0x446>
 800ce1a:	2e00      	cmp	r6, #0
 800ce1c:	dd07      	ble.n	800ce2e <_strtod_l+0x79e>
 800ce1e:	4649      	mov	r1, r9
 800ce20:	9805      	ldr	r0, [sp, #20]
 800ce22:	4632      	mov	r2, r6
 800ce24:	f7ff f9ba 	bl	800c19c <__lshift>
 800ce28:	4681      	mov	r9, r0
 800ce2a:	2800      	cmp	r0, #0
 800ce2c:	d0d8      	beq.n	800cde0 <_strtod_l+0x750>
 800ce2e:	2f00      	cmp	r7, #0
 800ce30:	dd08      	ble.n	800ce44 <_strtod_l+0x7b4>
 800ce32:	4641      	mov	r1, r8
 800ce34:	9805      	ldr	r0, [sp, #20]
 800ce36:	463a      	mov	r2, r7
 800ce38:	f7ff f9b0 	bl	800c19c <__lshift>
 800ce3c:	4680      	mov	r8, r0
 800ce3e:	2800      	cmp	r0, #0
 800ce40:	f43f ae49 	beq.w	800cad6 <_strtod_l+0x446>
 800ce44:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ce46:	9805      	ldr	r0, [sp, #20]
 800ce48:	464a      	mov	r2, r9
 800ce4a:	f7ff fa2f 	bl	800c2ac <__mdiff>
 800ce4e:	4604      	mov	r4, r0
 800ce50:	2800      	cmp	r0, #0
 800ce52:	f43f ae40 	beq.w	800cad6 <_strtod_l+0x446>
 800ce56:	68c3      	ldr	r3, [r0, #12]
 800ce58:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	60c3      	str	r3, [r0, #12]
 800ce5e:	4641      	mov	r1, r8
 800ce60:	f7ff fa08 	bl	800c274 <__mcmp>
 800ce64:	2800      	cmp	r0, #0
 800ce66:	da45      	bge.n	800cef4 <_strtod_l+0x864>
 800ce68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce6a:	ea53 030a 	orrs.w	r3, r3, sl
 800ce6e:	d16b      	bne.n	800cf48 <_strtod_l+0x8b8>
 800ce70:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d167      	bne.n	800cf48 <_strtod_l+0x8b8>
 800ce78:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ce7c:	0d1b      	lsrs	r3, r3, #20
 800ce7e:	051b      	lsls	r3, r3, #20
 800ce80:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ce84:	d960      	bls.n	800cf48 <_strtod_l+0x8b8>
 800ce86:	6963      	ldr	r3, [r4, #20]
 800ce88:	b913      	cbnz	r3, 800ce90 <_strtod_l+0x800>
 800ce8a:	6923      	ldr	r3, [r4, #16]
 800ce8c:	2b01      	cmp	r3, #1
 800ce8e:	dd5b      	ble.n	800cf48 <_strtod_l+0x8b8>
 800ce90:	4621      	mov	r1, r4
 800ce92:	2201      	movs	r2, #1
 800ce94:	9805      	ldr	r0, [sp, #20]
 800ce96:	f7ff f981 	bl	800c19c <__lshift>
 800ce9a:	4641      	mov	r1, r8
 800ce9c:	4604      	mov	r4, r0
 800ce9e:	f7ff f9e9 	bl	800c274 <__mcmp>
 800cea2:	2800      	cmp	r0, #0
 800cea4:	dd50      	ble.n	800cf48 <_strtod_l+0x8b8>
 800cea6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ceaa:	9a08      	ldr	r2, [sp, #32]
 800ceac:	0d1b      	lsrs	r3, r3, #20
 800ceae:	051b      	lsls	r3, r3, #20
 800ceb0:	2a00      	cmp	r2, #0
 800ceb2:	d06a      	beq.n	800cf8a <_strtod_l+0x8fa>
 800ceb4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ceb8:	d867      	bhi.n	800cf8a <_strtod_l+0x8fa>
 800ceba:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800cebe:	f67f ae9d 	bls.w	800cbfc <_strtod_l+0x56c>
 800cec2:	4b0a      	ldr	r3, [pc, #40]	@ (800ceec <_strtod_l+0x85c>)
 800cec4:	4650      	mov	r0, sl
 800cec6:	4659      	mov	r1, fp
 800cec8:	2200      	movs	r2, #0
 800ceca:	f7f3 fb95 	bl	80005f8 <__aeabi_dmul>
 800cece:	4b08      	ldr	r3, [pc, #32]	@ (800cef0 <_strtod_l+0x860>)
 800ced0:	400b      	ands	r3, r1
 800ced2:	4682      	mov	sl, r0
 800ced4:	468b      	mov	fp, r1
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	f47f ae08 	bne.w	800caec <_strtod_l+0x45c>
 800cedc:	9a05      	ldr	r2, [sp, #20]
 800cede:	2322      	movs	r3, #34	@ 0x22
 800cee0:	6013      	str	r3, [r2, #0]
 800cee2:	e603      	b.n	800caec <_strtod_l+0x45c>
 800cee4:	0800ee48 	.word	0x0800ee48
 800cee8:	fffffc02 	.word	0xfffffc02
 800ceec:	39500000 	.word	0x39500000
 800cef0:	7ff00000 	.word	0x7ff00000
 800cef4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800cef8:	d165      	bne.n	800cfc6 <_strtod_l+0x936>
 800cefa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800cefc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cf00:	b35a      	cbz	r2, 800cf5a <_strtod_l+0x8ca>
 800cf02:	4a9f      	ldr	r2, [pc, #636]	@ (800d180 <_strtod_l+0xaf0>)
 800cf04:	4293      	cmp	r3, r2
 800cf06:	d12b      	bne.n	800cf60 <_strtod_l+0x8d0>
 800cf08:	9b08      	ldr	r3, [sp, #32]
 800cf0a:	4651      	mov	r1, sl
 800cf0c:	b303      	cbz	r3, 800cf50 <_strtod_l+0x8c0>
 800cf0e:	4b9d      	ldr	r3, [pc, #628]	@ (800d184 <_strtod_l+0xaf4>)
 800cf10:	465a      	mov	r2, fp
 800cf12:	4013      	ands	r3, r2
 800cf14:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800cf18:	f04f 32ff 	mov.w	r2, #4294967295
 800cf1c:	d81b      	bhi.n	800cf56 <_strtod_l+0x8c6>
 800cf1e:	0d1b      	lsrs	r3, r3, #20
 800cf20:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cf24:	fa02 f303 	lsl.w	r3, r2, r3
 800cf28:	4299      	cmp	r1, r3
 800cf2a:	d119      	bne.n	800cf60 <_strtod_l+0x8d0>
 800cf2c:	4b96      	ldr	r3, [pc, #600]	@ (800d188 <_strtod_l+0xaf8>)
 800cf2e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cf30:	429a      	cmp	r2, r3
 800cf32:	d102      	bne.n	800cf3a <_strtod_l+0x8aa>
 800cf34:	3101      	adds	r1, #1
 800cf36:	f43f adce 	beq.w	800cad6 <_strtod_l+0x446>
 800cf3a:	4b92      	ldr	r3, [pc, #584]	@ (800d184 <_strtod_l+0xaf4>)
 800cf3c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cf3e:	401a      	ands	r2, r3
 800cf40:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800cf44:	f04f 0a00 	mov.w	sl, #0
 800cf48:	9b08      	ldr	r3, [sp, #32]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d1b9      	bne.n	800cec2 <_strtod_l+0x832>
 800cf4e:	e5cd      	b.n	800caec <_strtod_l+0x45c>
 800cf50:	f04f 33ff 	mov.w	r3, #4294967295
 800cf54:	e7e8      	b.n	800cf28 <_strtod_l+0x898>
 800cf56:	4613      	mov	r3, r2
 800cf58:	e7e6      	b.n	800cf28 <_strtod_l+0x898>
 800cf5a:	ea53 030a 	orrs.w	r3, r3, sl
 800cf5e:	d0a2      	beq.n	800cea6 <_strtod_l+0x816>
 800cf60:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cf62:	b1db      	cbz	r3, 800cf9c <_strtod_l+0x90c>
 800cf64:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cf66:	4213      	tst	r3, r2
 800cf68:	d0ee      	beq.n	800cf48 <_strtod_l+0x8b8>
 800cf6a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cf6c:	9a08      	ldr	r2, [sp, #32]
 800cf6e:	4650      	mov	r0, sl
 800cf70:	4659      	mov	r1, fp
 800cf72:	b1bb      	cbz	r3, 800cfa4 <_strtod_l+0x914>
 800cf74:	f7ff fb6c 	bl	800c650 <sulp>
 800cf78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cf7c:	ec53 2b10 	vmov	r2, r3, d0
 800cf80:	f7f3 f984 	bl	800028c <__adddf3>
 800cf84:	4682      	mov	sl, r0
 800cf86:	468b      	mov	fp, r1
 800cf88:	e7de      	b.n	800cf48 <_strtod_l+0x8b8>
 800cf8a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800cf8e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800cf92:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800cf96:	f04f 3aff 	mov.w	sl, #4294967295
 800cf9a:	e7d5      	b.n	800cf48 <_strtod_l+0x8b8>
 800cf9c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cf9e:	ea13 0f0a 	tst.w	r3, sl
 800cfa2:	e7e1      	b.n	800cf68 <_strtod_l+0x8d8>
 800cfa4:	f7ff fb54 	bl	800c650 <sulp>
 800cfa8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cfac:	ec53 2b10 	vmov	r2, r3, d0
 800cfb0:	f7f3 f96a 	bl	8000288 <__aeabi_dsub>
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	4682      	mov	sl, r0
 800cfba:	468b      	mov	fp, r1
 800cfbc:	f7f3 fd84 	bl	8000ac8 <__aeabi_dcmpeq>
 800cfc0:	2800      	cmp	r0, #0
 800cfc2:	d0c1      	beq.n	800cf48 <_strtod_l+0x8b8>
 800cfc4:	e61a      	b.n	800cbfc <_strtod_l+0x56c>
 800cfc6:	4641      	mov	r1, r8
 800cfc8:	4620      	mov	r0, r4
 800cfca:	f7ff facb 	bl	800c564 <__ratio>
 800cfce:	ec57 6b10 	vmov	r6, r7, d0
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800cfd8:	4630      	mov	r0, r6
 800cfda:	4639      	mov	r1, r7
 800cfdc:	f7f3 fd88 	bl	8000af0 <__aeabi_dcmple>
 800cfe0:	2800      	cmp	r0, #0
 800cfe2:	d06f      	beq.n	800d0c4 <_strtod_l+0xa34>
 800cfe4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d17a      	bne.n	800d0e0 <_strtod_l+0xa50>
 800cfea:	f1ba 0f00 	cmp.w	sl, #0
 800cfee:	d158      	bne.n	800d0a2 <_strtod_l+0xa12>
 800cff0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cff2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d15a      	bne.n	800d0b0 <_strtod_l+0xa20>
 800cffa:	4b64      	ldr	r3, [pc, #400]	@ (800d18c <_strtod_l+0xafc>)
 800cffc:	2200      	movs	r2, #0
 800cffe:	4630      	mov	r0, r6
 800d000:	4639      	mov	r1, r7
 800d002:	f7f3 fd6b 	bl	8000adc <__aeabi_dcmplt>
 800d006:	2800      	cmp	r0, #0
 800d008:	d159      	bne.n	800d0be <_strtod_l+0xa2e>
 800d00a:	4630      	mov	r0, r6
 800d00c:	4639      	mov	r1, r7
 800d00e:	4b60      	ldr	r3, [pc, #384]	@ (800d190 <_strtod_l+0xb00>)
 800d010:	2200      	movs	r2, #0
 800d012:	f7f3 faf1 	bl	80005f8 <__aeabi_dmul>
 800d016:	4606      	mov	r6, r0
 800d018:	460f      	mov	r7, r1
 800d01a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d01e:	9606      	str	r6, [sp, #24]
 800d020:	9307      	str	r3, [sp, #28]
 800d022:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d026:	4d57      	ldr	r5, [pc, #348]	@ (800d184 <_strtod_l+0xaf4>)
 800d028:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d02c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d02e:	401d      	ands	r5, r3
 800d030:	4b58      	ldr	r3, [pc, #352]	@ (800d194 <_strtod_l+0xb04>)
 800d032:	429d      	cmp	r5, r3
 800d034:	f040 80b2 	bne.w	800d19c <_strtod_l+0xb0c>
 800d038:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d03a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d03e:	ec4b ab10 	vmov	d0, sl, fp
 800d042:	f7ff f9c7 	bl	800c3d4 <__ulp>
 800d046:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d04a:	ec51 0b10 	vmov	r0, r1, d0
 800d04e:	f7f3 fad3 	bl	80005f8 <__aeabi_dmul>
 800d052:	4652      	mov	r2, sl
 800d054:	465b      	mov	r3, fp
 800d056:	f7f3 f919 	bl	800028c <__adddf3>
 800d05a:	460b      	mov	r3, r1
 800d05c:	4949      	ldr	r1, [pc, #292]	@ (800d184 <_strtod_l+0xaf4>)
 800d05e:	4a4e      	ldr	r2, [pc, #312]	@ (800d198 <_strtod_l+0xb08>)
 800d060:	4019      	ands	r1, r3
 800d062:	4291      	cmp	r1, r2
 800d064:	4682      	mov	sl, r0
 800d066:	d942      	bls.n	800d0ee <_strtod_l+0xa5e>
 800d068:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d06a:	4b47      	ldr	r3, [pc, #284]	@ (800d188 <_strtod_l+0xaf8>)
 800d06c:	429a      	cmp	r2, r3
 800d06e:	d103      	bne.n	800d078 <_strtod_l+0x9e8>
 800d070:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d072:	3301      	adds	r3, #1
 800d074:	f43f ad2f 	beq.w	800cad6 <_strtod_l+0x446>
 800d078:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d188 <_strtod_l+0xaf8>
 800d07c:	f04f 3aff 	mov.w	sl, #4294967295
 800d080:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d082:	9805      	ldr	r0, [sp, #20]
 800d084:	f7fe fe7a 	bl	800bd7c <_Bfree>
 800d088:	9805      	ldr	r0, [sp, #20]
 800d08a:	4649      	mov	r1, r9
 800d08c:	f7fe fe76 	bl	800bd7c <_Bfree>
 800d090:	9805      	ldr	r0, [sp, #20]
 800d092:	4641      	mov	r1, r8
 800d094:	f7fe fe72 	bl	800bd7c <_Bfree>
 800d098:	9805      	ldr	r0, [sp, #20]
 800d09a:	4621      	mov	r1, r4
 800d09c:	f7fe fe6e 	bl	800bd7c <_Bfree>
 800d0a0:	e619      	b.n	800ccd6 <_strtod_l+0x646>
 800d0a2:	f1ba 0f01 	cmp.w	sl, #1
 800d0a6:	d103      	bne.n	800d0b0 <_strtod_l+0xa20>
 800d0a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	f43f ada6 	beq.w	800cbfc <_strtod_l+0x56c>
 800d0b0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d160 <_strtod_l+0xad0>
 800d0b4:	4f35      	ldr	r7, [pc, #212]	@ (800d18c <_strtod_l+0xafc>)
 800d0b6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d0ba:	2600      	movs	r6, #0
 800d0bc:	e7b1      	b.n	800d022 <_strtod_l+0x992>
 800d0be:	4f34      	ldr	r7, [pc, #208]	@ (800d190 <_strtod_l+0xb00>)
 800d0c0:	2600      	movs	r6, #0
 800d0c2:	e7aa      	b.n	800d01a <_strtod_l+0x98a>
 800d0c4:	4b32      	ldr	r3, [pc, #200]	@ (800d190 <_strtod_l+0xb00>)
 800d0c6:	4630      	mov	r0, r6
 800d0c8:	4639      	mov	r1, r7
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	f7f3 fa94 	bl	80005f8 <__aeabi_dmul>
 800d0d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d0d2:	4606      	mov	r6, r0
 800d0d4:	460f      	mov	r7, r1
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d09f      	beq.n	800d01a <_strtod_l+0x98a>
 800d0da:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d0de:	e7a0      	b.n	800d022 <_strtod_l+0x992>
 800d0e0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d168 <_strtod_l+0xad8>
 800d0e4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d0e8:	ec57 6b17 	vmov	r6, r7, d7
 800d0ec:	e799      	b.n	800d022 <_strtod_l+0x992>
 800d0ee:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d0f2:	9b08      	ldr	r3, [sp, #32]
 800d0f4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d1c1      	bne.n	800d080 <_strtod_l+0x9f0>
 800d0fc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d100:	0d1b      	lsrs	r3, r3, #20
 800d102:	051b      	lsls	r3, r3, #20
 800d104:	429d      	cmp	r5, r3
 800d106:	d1bb      	bne.n	800d080 <_strtod_l+0x9f0>
 800d108:	4630      	mov	r0, r6
 800d10a:	4639      	mov	r1, r7
 800d10c:	f7f3 fdd4 	bl	8000cb8 <__aeabi_d2lz>
 800d110:	f7f3 fa44 	bl	800059c <__aeabi_l2d>
 800d114:	4602      	mov	r2, r0
 800d116:	460b      	mov	r3, r1
 800d118:	4630      	mov	r0, r6
 800d11a:	4639      	mov	r1, r7
 800d11c:	f7f3 f8b4 	bl	8000288 <__aeabi_dsub>
 800d120:	460b      	mov	r3, r1
 800d122:	4602      	mov	r2, r0
 800d124:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d128:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d12c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d12e:	ea46 060a 	orr.w	r6, r6, sl
 800d132:	431e      	orrs	r6, r3
 800d134:	d06f      	beq.n	800d216 <_strtod_l+0xb86>
 800d136:	a30e      	add	r3, pc, #56	@ (adr r3, 800d170 <_strtod_l+0xae0>)
 800d138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d13c:	f7f3 fcce 	bl	8000adc <__aeabi_dcmplt>
 800d140:	2800      	cmp	r0, #0
 800d142:	f47f acd3 	bne.w	800caec <_strtod_l+0x45c>
 800d146:	a30c      	add	r3, pc, #48	@ (adr r3, 800d178 <_strtod_l+0xae8>)
 800d148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d14c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d150:	f7f3 fce2 	bl	8000b18 <__aeabi_dcmpgt>
 800d154:	2800      	cmp	r0, #0
 800d156:	d093      	beq.n	800d080 <_strtod_l+0x9f0>
 800d158:	e4c8      	b.n	800caec <_strtod_l+0x45c>
 800d15a:	bf00      	nop
 800d15c:	f3af 8000 	nop.w
 800d160:	00000000 	.word	0x00000000
 800d164:	bff00000 	.word	0xbff00000
 800d168:	00000000 	.word	0x00000000
 800d16c:	3ff00000 	.word	0x3ff00000
 800d170:	94a03595 	.word	0x94a03595
 800d174:	3fdfffff 	.word	0x3fdfffff
 800d178:	35afe535 	.word	0x35afe535
 800d17c:	3fe00000 	.word	0x3fe00000
 800d180:	000fffff 	.word	0x000fffff
 800d184:	7ff00000 	.word	0x7ff00000
 800d188:	7fefffff 	.word	0x7fefffff
 800d18c:	3ff00000 	.word	0x3ff00000
 800d190:	3fe00000 	.word	0x3fe00000
 800d194:	7fe00000 	.word	0x7fe00000
 800d198:	7c9fffff 	.word	0x7c9fffff
 800d19c:	9b08      	ldr	r3, [sp, #32]
 800d19e:	b323      	cbz	r3, 800d1ea <_strtod_l+0xb5a>
 800d1a0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d1a4:	d821      	bhi.n	800d1ea <_strtod_l+0xb5a>
 800d1a6:	a328      	add	r3, pc, #160	@ (adr r3, 800d248 <_strtod_l+0xbb8>)
 800d1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ac:	4630      	mov	r0, r6
 800d1ae:	4639      	mov	r1, r7
 800d1b0:	f7f3 fc9e 	bl	8000af0 <__aeabi_dcmple>
 800d1b4:	b1a0      	cbz	r0, 800d1e0 <_strtod_l+0xb50>
 800d1b6:	4639      	mov	r1, r7
 800d1b8:	4630      	mov	r0, r6
 800d1ba:	f7f3 fcf5 	bl	8000ba8 <__aeabi_d2uiz>
 800d1be:	2801      	cmp	r0, #1
 800d1c0:	bf38      	it	cc
 800d1c2:	2001      	movcc	r0, #1
 800d1c4:	f7f3 f99e 	bl	8000504 <__aeabi_ui2d>
 800d1c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d1ca:	4606      	mov	r6, r0
 800d1cc:	460f      	mov	r7, r1
 800d1ce:	b9fb      	cbnz	r3, 800d210 <_strtod_l+0xb80>
 800d1d0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d1d4:	9014      	str	r0, [sp, #80]	@ 0x50
 800d1d6:	9315      	str	r3, [sp, #84]	@ 0x54
 800d1d8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d1dc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d1e0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d1e2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d1e6:	1b5b      	subs	r3, r3, r5
 800d1e8:	9311      	str	r3, [sp, #68]	@ 0x44
 800d1ea:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d1ee:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d1f2:	f7ff f8ef 	bl	800c3d4 <__ulp>
 800d1f6:	4650      	mov	r0, sl
 800d1f8:	ec53 2b10 	vmov	r2, r3, d0
 800d1fc:	4659      	mov	r1, fp
 800d1fe:	f7f3 f9fb 	bl	80005f8 <__aeabi_dmul>
 800d202:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d206:	f7f3 f841 	bl	800028c <__adddf3>
 800d20a:	4682      	mov	sl, r0
 800d20c:	468b      	mov	fp, r1
 800d20e:	e770      	b.n	800d0f2 <_strtod_l+0xa62>
 800d210:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d214:	e7e0      	b.n	800d1d8 <_strtod_l+0xb48>
 800d216:	a30e      	add	r3, pc, #56	@ (adr r3, 800d250 <_strtod_l+0xbc0>)
 800d218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d21c:	f7f3 fc5e 	bl	8000adc <__aeabi_dcmplt>
 800d220:	e798      	b.n	800d154 <_strtod_l+0xac4>
 800d222:	2300      	movs	r3, #0
 800d224:	930e      	str	r3, [sp, #56]	@ 0x38
 800d226:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d228:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d22a:	6013      	str	r3, [r2, #0]
 800d22c:	f7ff ba6d 	b.w	800c70a <_strtod_l+0x7a>
 800d230:	2a65      	cmp	r2, #101	@ 0x65
 800d232:	f43f ab68 	beq.w	800c906 <_strtod_l+0x276>
 800d236:	2a45      	cmp	r2, #69	@ 0x45
 800d238:	f43f ab65 	beq.w	800c906 <_strtod_l+0x276>
 800d23c:	2301      	movs	r3, #1
 800d23e:	f7ff bba0 	b.w	800c982 <_strtod_l+0x2f2>
 800d242:	bf00      	nop
 800d244:	f3af 8000 	nop.w
 800d248:	ffc00000 	.word	0xffc00000
 800d24c:	41dfffff 	.word	0x41dfffff
 800d250:	94a03595 	.word	0x94a03595
 800d254:	3fcfffff 	.word	0x3fcfffff

0800d258 <_strtod_r>:
 800d258:	4b01      	ldr	r3, [pc, #4]	@ (800d260 <_strtod_r+0x8>)
 800d25a:	f7ff ba19 	b.w	800c690 <_strtod_l>
 800d25e:	bf00      	nop
 800d260:	200000d8 	.word	0x200000d8

0800d264 <_strtol_l.isra.0>:
 800d264:	2b24      	cmp	r3, #36	@ 0x24
 800d266:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d26a:	4686      	mov	lr, r0
 800d26c:	4690      	mov	r8, r2
 800d26e:	d801      	bhi.n	800d274 <_strtol_l.isra.0+0x10>
 800d270:	2b01      	cmp	r3, #1
 800d272:	d106      	bne.n	800d282 <_strtol_l.isra.0+0x1e>
 800d274:	f7fd fe5e 	bl	800af34 <__errno>
 800d278:	2316      	movs	r3, #22
 800d27a:	6003      	str	r3, [r0, #0]
 800d27c:	2000      	movs	r0, #0
 800d27e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d282:	4834      	ldr	r0, [pc, #208]	@ (800d354 <_strtol_l.isra.0+0xf0>)
 800d284:	460d      	mov	r5, r1
 800d286:	462a      	mov	r2, r5
 800d288:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d28c:	5d06      	ldrb	r6, [r0, r4]
 800d28e:	f016 0608 	ands.w	r6, r6, #8
 800d292:	d1f8      	bne.n	800d286 <_strtol_l.isra.0+0x22>
 800d294:	2c2d      	cmp	r4, #45	@ 0x2d
 800d296:	d110      	bne.n	800d2ba <_strtol_l.isra.0+0x56>
 800d298:	782c      	ldrb	r4, [r5, #0]
 800d29a:	2601      	movs	r6, #1
 800d29c:	1c95      	adds	r5, r2, #2
 800d29e:	f033 0210 	bics.w	r2, r3, #16
 800d2a2:	d115      	bne.n	800d2d0 <_strtol_l.isra.0+0x6c>
 800d2a4:	2c30      	cmp	r4, #48	@ 0x30
 800d2a6:	d10d      	bne.n	800d2c4 <_strtol_l.isra.0+0x60>
 800d2a8:	782a      	ldrb	r2, [r5, #0]
 800d2aa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d2ae:	2a58      	cmp	r2, #88	@ 0x58
 800d2b0:	d108      	bne.n	800d2c4 <_strtol_l.isra.0+0x60>
 800d2b2:	786c      	ldrb	r4, [r5, #1]
 800d2b4:	3502      	adds	r5, #2
 800d2b6:	2310      	movs	r3, #16
 800d2b8:	e00a      	b.n	800d2d0 <_strtol_l.isra.0+0x6c>
 800d2ba:	2c2b      	cmp	r4, #43	@ 0x2b
 800d2bc:	bf04      	itt	eq
 800d2be:	782c      	ldrbeq	r4, [r5, #0]
 800d2c0:	1c95      	addeq	r5, r2, #2
 800d2c2:	e7ec      	b.n	800d29e <_strtol_l.isra.0+0x3a>
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d1f6      	bne.n	800d2b6 <_strtol_l.isra.0+0x52>
 800d2c8:	2c30      	cmp	r4, #48	@ 0x30
 800d2ca:	bf14      	ite	ne
 800d2cc:	230a      	movne	r3, #10
 800d2ce:	2308      	moveq	r3, #8
 800d2d0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d2d4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d2d8:	2200      	movs	r2, #0
 800d2da:	fbbc f9f3 	udiv	r9, ip, r3
 800d2de:	4610      	mov	r0, r2
 800d2e0:	fb03 ca19 	mls	sl, r3, r9, ip
 800d2e4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d2e8:	2f09      	cmp	r7, #9
 800d2ea:	d80f      	bhi.n	800d30c <_strtol_l.isra.0+0xa8>
 800d2ec:	463c      	mov	r4, r7
 800d2ee:	42a3      	cmp	r3, r4
 800d2f0:	dd1b      	ble.n	800d32a <_strtol_l.isra.0+0xc6>
 800d2f2:	1c57      	adds	r7, r2, #1
 800d2f4:	d007      	beq.n	800d306 <_strtol_l.isra.0+0xa2>
 800d2f6:	4581      	cmp	r9, r0
 800d2f8:	d314      	bcc.n	800d324 <_strtol_l.isra.0+0xc0>
 800d2fa:	d101      	bne.n	800d300 <_strtol_l.isra.0+0x9c>
 800d2fc:	45a2      	cmp	sl, r4
 800d2fe:	db11      	blt.n	800d324 <_strtol_l.isra.0+0xc0>
 800d300:	fb00 4003 	mla	r0, r0, r3, r4
 800d304:	2201      	movs	r2, #1
 800d306:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d30a:	e7eb      	b.n	800d2e4 <_strtol_l.isra.0+0x80>
 800d30c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d310:	2f19      	cmp	r7, #25
 800d312:	d801      	bhi.n	800d318 <_strtol_l.isra.0+0xb4>
 800d314:	3c37      	subs	r4, #55	@ 0x37
 800d316:	e7ea      	b.n	800d2ee <_strtol_l.isra.0+0x8a>
 800d318:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d31c:	2f19      	cmp	r7, #25
 800d31e:	d804      	bhi.n	800d32a <_strtol_l.isra.0+0xc6>
 800d320:	3c57      	subs	r4, #87	@ 0x57
 800d322:	e7e4      	b.n	800d2ee <_strtol_l.isra.0+0x8a>
 800d324:	f04f 32ff 	mov.w	r2, #4294967295
 800d328:	e7ed      	b.n	800d306 <_strtol_l.isra.0+0xa2>
 800d32a:	1c53      	adds	r3, r2, #1
 800d32c:	d108      	bne.n	800d340 <_strtol_l.isra.0+0xdc>
 800d32e:	2322      	movs	r3, #34	@ 0x22
 800d330:	f8ce 3000 	str.w	r3, [lr]
 800d334:	4660      	mov	r0, ip
 800d336:	f1b8 0f00 	cmp.w	r8, #0
 800d33a:	d0a0      	beq.n	800d27e <_strtol_l.isra.0+0x1a>
 800d33c:	1e69      	subs	r1, r5, #1
 800d33e:	e006      	b.n	800d34e <_strtol_l.isra.0+0xea>
 800d340:	b106      	cbz	r6, 800d344 <_strtol_l.isra.0+0xe0>
 800d342:	4240      	negs	r0, r0
 800d344:	f1b8 0f00 	cmp.w	r8, #0
 800d348:	d099      	beq.n	800d27e <_strtol_l.isra.0+0x1a>
 800d34a:	2a00      	cmp	r2, #0
 800d34c:	d1f6      	bne.n	800d33c <_strtol_l.isra.0+0xd8>
 800d34e:	f8c8 1000 	str.w	r1, [r8]
 800d352:	e794      	b.n	800d27e <_strtol_l.isra.0+0x1a>
 800d354:	0800ee71 	.word	0x0800ee71

0800d358 <_strtol_r>:
 800d358:	f7ff bf84 	b.w	800d264 <_strtol_l.isra.0>

0800d35c <__ssputs_r>:
 800d35c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d360:	688e      	ldr	r6, [r1, #8]
 800d362:	461f      	mov	r7, r3
 800d364:	42be      	cmp	r6, r7
 800d366:	680b      	ldr	r3, [r1, #0]
 800d368:	4682      	mov	sl, r0
 800d36a:	460c      	mov	r4, r1
 800d36c:	4690      	mov	r8, r2
 800d36e:	d82d      	bhi.n	800d3cc <__ssputs_r+0x70>
 800d370:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d374:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d378:	d026      	beq.n	800d3c8 <__ssputs_r+0x6c>
 800d37a:	6965      	ldr	r5, [r4, #20]
 800d37c:	6909      	ldr	r1, [r1, #16]
 800d37e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d382:	eba3 0901 	sub.w	r9, r3, r1
 800d386:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d38a:	1c7b      	adds	r3, r7, #1
 800d38c:	444b      	add	r3, r9
 800d38e:	106d      	asrs	r5, r5, #1
 800d390:	429d      	cmp	r5, r3
 800d392:	bf38      	it	cc
 800d394:	461d      	movcc	r5, r3
 800d396:	0553      	lsls	r3, r2, #21
 800d398:	d527      	bpl.n	800d3ea <__ssputs_r+0x8e>
 800d39a:	4629      	mov	r1, r5
 800d39c:	f7fc fcbe 	bl	8009d1c <_malloc_r>
 800d3a0:	4606      	mov	r6, r0
 800d3a2:	b360      	cbz	r0, 800d3fe <__ssputs_r+0xa2>
 800d3a4:	6921      	ldr	r1, [r4, #16]
 800d3a6:	464a      	mov	r2, r9
 800d3a8:	f7fd fdf1 	bl	800af8e <memcpy>
 800d3ac:	89a3      	ldrh	r3, [r4, #12]
 800d3ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d3b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d3b6:	81a3      	strh	r3, [r4, #12]
 800d3b8:	6126      	str	r6, [r4, #16]
 800d3ba:	6165      	str	r5, [r4, #20]
 800d3bc:	444e      	add	r6, r9
 800d3be:	eba5 0509 	sub.w	r5, r5, r9
 800d3c2:	6026      	str	r6, [r4, #0]
 800d3c4:	60a5      	str	r5, [r4, #8]
 800d3c6:	463e      	mov	r6, r7
 800d3c8:	42be      	cmp	r6, r7
 800d3ca:	d900      	bls.n	800d3ce <__ssputs_r+0x72>
 800d3cc:	463e      	mov	r6, r7
 800d3ce:	6820      	ldr	r0, [r4, #0]
 800d3d0:	4632      	mov	r2, r6
 800d3d2:	4641      	mov	r1, r8
 800d3d4:	f000 f9c6 	bl	800d764 <memmove>
 800d3d8:	68a3      	ldr	r3, [r4, #8]
 800d3da:	1b9b      	subs	r3, r3, r6
 800d3dc:	60a3      	str	r3, [r4, #8]
 800d3de:	6823      	ldr	r3, [r4, #0]
 800d3e0:	4433      	add	r3, r6
 800d3e2:	6023      	str	r3, [r4, #0]
 800d3e4:	2000      	movs	r0, #0
 800d3e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3ea:	462a      	mov	r2, r5
 800d3ec:	f000 fd59 	bl	800dea2 <_realloc_r>
 800d3f0:	4606      	mov	r6, r0
 800d3f2:	2800      	cmp	r0, #0
 800d3f4:	d1e0      	bne.n	800d3b8 <__ssputs_r+0x5c>
 800d3f6:	6921      	ldr	r1, [r4, #16]
 800d3f8:	4650      	mov	r0, sl
 800d3fa:	f7fe fc35 	bl	800bc68 <_free_r>
 800d3fe:	230c      	movs	r3, #12
 800d400:	f8ca 3000 	str.w	r3, [sl]
 800d404:	89a3      	ldrh	r3, [r4, #12]
 800d406:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d40a:	81a3      	strh	r3, [r4, #12]
 800d40c:	f04f 30ff 	mov.w	r0, #4294967295
 800d410:	e7e9      	b.n	800d3e6 <__ssputs_r+0x8a>
	...

0800d414 <_svfiprintf_r>:
 800d414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d418:	4698      	mov	r8, r3
 800d41a:	898b      	ldrh	r3, [r1, #12]
 800d41c:	061b      	lsls	r3, r3, #24
 800d41e:	b09d      	sub	sp, #116	@ 0x74
 800d420:	4607      	mov	r7, r0
 800d422:	460d      	mov	r5, r1
 800d424:	4614      	mov	r4, r2
 800d426:	d510      	bpl.n	800d44a <_svfiprintf_r+0x36>
 800d428:	690b      	ldr	r3, [r1, #16]
 800d42a:	b973      	cbnz	r3, 800d44a <_svfiprintf_r+0x36>
 800d42c:	2140      	movs	r1, #64	@ 0x40
 800d42e:	f7fc fc75 	bl	8009d1c <_malloc_r>
 800d432:	6028      	str	r0, [r5, #0]
 800d434:	6128      	str	r0, [r5, #16]
 800d436:	b930      	cbnz	r0, 800d446 <_svfiprintf_r+0x32>
 800d438:	230c      	movs	r3, #12
 800d43a:	603b      	str	r3, [r7, #0]
 800d43c:	f04f 30ff 	mov.w	r0, #4294967295
 800d440:	b01d      	add	sp, #116	@ 0x74
 800d442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d446:	2340      	movs	r3, #64	@ 0x40
 800d448:	616b      	str	r3, [r5, #20]
 800d44a:	2300      	movs	r3, #0
 800d44c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d44e:	2320      	movs	r3, #32
 800d450:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d454:	f8cd 800c 	str.w	r8, [sp, #12]
 800d458:	2330      	movs	r3, #48	@ 0x30
 800d45a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d5f8 <_svfiprintf_r+0x1e4>
 800d45e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d462:	f04f 0901 	mov.w	r9, #1
 800d466:	4623      	mov	r3, r4
 800d468:	469a      	mov	sl, r3
 800d46a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d46e:	b10a      	cbz	r2, 800d474 <_svfiprintf_r+0x60>
 800d470:	2a25      	cmp	r2, #37	@ 0x25
 800d472:	d1f9      	bne.n	800d468 <_svfiprintf_r+0x54>
 800d474:	ebba 0b04 	subs.w	fp, sl, r4
 800d478:	d00b      	beq.n	800d492 <_svfiprintf_r+0x7e>
 800d47a:	465b      	mov	r3, fp
 800d47c:	4622      	mov	r2, r4
 800d47e:	4629      	mov	r1, r5
 800d480:	4638      	mov	r0, r7
 800d482:	f7ff ff6b 	bl	800d35c <__ssputs_r>
 800d486:	3001      	adds	r0, #1
 800d488:	f000 80a7 	beq.w	800d5da <_svfiprintf_r+0x1c6>
 800d48c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d48e:	445a      	add	r2, fp
 800d490:	9209      	str	r2, [sp, #36]	@ 0x24
 800d492:	f89a 3000 	ldrb.w	r3, [sl]
 800d496:	2b00      	cmp	r3, #0
 800d498:	f000 809f 	beq.w	800d5da <_svfiprintf_r+0x1c6>
 800d49c:	2300      	movs	r3, #0
 800d49e:	f04f 32ff 	mov.w	r2, #4294967295
 800d4a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d4a6:	f10a 0a01 	add.w	sl, sl, #1
 800d4aa:	9304      	str	r3, [sp, #16]
 800d4ac:	9307      	str	r3, [sp, #28]
 800d4ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d4b2:	931a      	str	r3, [sp, #104]	@ 0x68
 800d4b4:	4654      	mov	r4, sl
 800d4b6:	2205      	movs	r2, #5
 800d4b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4bc:	484e      	ldr	r0, [pc, #312]	@ (800d5f8 <_svfiprintf_r+0x1e4>)
 800d4be:	f7f2 fe87 	bl	80001d0 <memchr>
 800d4c2:	9a04      	ldr	r2, [sp, #16]
 800d4c4:	b9d8      	cbnz	r0, 800d4fe <_svfiprintf_r+0xea>
 800d4c6:	06d0      	lsls	r0, r2, #27
 800d4c8:	bf44      	itt	mi
 800d4ca:	2320      	movmi	r3, #32
 800d4cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d4d0:	0711      	lsls	r1, r2, #28
 800d4d2:	bf44      	itt	mi
 800d4d4:	232b      	movmi	r3, #43	@ 0x2b
 800d4d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d4da:	f89a 3000 	ldrb.w	r3, [sl]
 800d4de:	2b2a      	cmp	r3, #42	@ 0x2a
 800d4e0:	d015      	beq.n	800d50e <_svfiprintf_r+0xfa>
 800d4e2:	9a07      	ldr	r2, [sp, #28]
 800d4e4:	4654      	mov	r4, sl
 800d4e6:	2000      	movs	r0, #0
 800d4e8:	f04f 0c0a 	mov.w	ip, #10
 800d4ec:	4621      	mov	r1, r4
 800d4ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d4f2:	3b30      	subs	r3, #48	@ 0x30
 800d4f4:	2b09      	cmp	r3, #9
 800d4f6:	d94b      	bls.n	800d590 <_svfiprintf_r+0x17c>
 800d4f8:	b1b0      	cbz	r0, 800d528 <_svfiprintf_r+0x114>
 800d4fa:	9207      	str	r2, [sp, #28]
 800d4fc:	e014      	b.n	800d528 <_svfiprintf_r+0x114>
 800d4fe:	eba0 0308 	sub.w	r3, r0, r8
 800d502:	fa09 f303 	lsl.w	r3, r9, r3
 800d506:	4313      	orrs	r3, r2
 800d508:	9304      	str	r3, [sp, #16]
 800d50a:	46a2      	mov	sl, r4
 800d50c:	e7d2      	b.n	800d4b4 <_svfiprintf_r+0xa0>
 800d50e:	9b03      	ldr	r3, [sp, #12]
 800d510:	1d19      	adds	r1, r3, #4
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	9103      	str	r1, [sp, #12]
 800d516:	2b00      	cmp	r3, #0
 800d518:	bfbb      	ittet	lt
 800d51a:	425b      	neglt	r3, r3
 800d51c:	f042 0202 	orrlt.w	r2, r2, #2
 800d520:	9307      	strge	r3, [sp, #28]
 800d522:	9307      	strlt	r3, [sp, #28]
 800d524:	bfb8      	it	lt
 800d526:	9204      	strlt	r2, [sp, #16]
 800d528:	7823      	ldrb	r3, [r4, #0]
 800d52a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d52c:	d10a      	bne.n	800d544 <_svfiprintf_r+0x130>
 800d52e:	7863      	ldrb	r3, [r4, #1]
 800d530:	2b2a      	cmp	r3, #42	@ 0x2a
 800d532:	d132      	bne.n	800d59a <_svfiprintf_r+0x186>
 800d534:	9b03      	ldr	r3, [sp, #12]
 800d536:	1d1a      	adds	r2, r3, #4
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	9203      	str	r2, [sp, #12]
 800d53c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d540:	3402      	adds	r4, #2
 800d542:	9305      	str	r3, [sp, #20]
 800d544:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d608 <_svfiprintf_r+0x1f4>
 800d548:	7821      	ldrb	r1, [r4, #0]
 800d54a:	2203      	movs	r2, #3
 800d54c:	4650      	mov	r0, sl
 800d54e:	f7f2 fe3f 	bl	80001d0 <memchr>
 800d552:	b138      	cbz	r0, 800d564 <_svfiprintf_r+0x150>
 800d554:	9b04      	ldr	r3, [sp, #16]
 800d556:	eba0 000a 	sub.w	r0, r0, sl
 800d55a:	2240      	movs	r2, #64	@ 0x40
 800d55c:	4082      	lsls	r2, r0
 800d55e:	4313      	orrs	r3, r2
 800d560:	3401      	adds	r4, #1
 800d562:	9304      	str	r3, [sp, #16]
 800d564:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d568:	4824      	ldr	r0, [pc, #144]	@ (800d5fc <_svfiprintf_r+0x1e8>)
 800d56a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d56e:	2206      	movs	r2, #6
 800d570:	f7f2 fe2e 	bl	80001d0 <memchr>
 800d574:	2800      	cmp	r0, #0
 800d576:	d036      	beq.n	800d5e6 <_svfiprintf_r+0x1d2>
 800d578:	4b21      	ldr	r3, [pc, #132]	@ (800d600 <_svfiprintf_r+0x1ec>)
 800d57a:	bb1b      	cbnz	r3, 800d5c4 <_svfiprintf_r+0x1b0>
 800d57c:	9b03      	ldr	r3, [sp, #12]
 800d57e:	3307      	adds	r3, #7
 800d580:	f023 0307 	bic.w	r3, r3, #7
 800d584:	3308      	adds	r3, #8
 800d586:	9303      	str	r3, [sp, #12]
 800d588:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d58a:	4433      	add	r3, r6
 800d58c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d58e:	e76a      	b.n	800d466 <_svfiprintf_r+0x52>
 800d590:	fb0c 3202 	mla	r2, ip, r2, r3
 800d594:	460c      	mov	r4, r1
 800d596:	2001      	movs	r0, #1
 800d598:	e7a8      	b.n	800d4ec <_svfiprintf_r+0xd8>
 800d59a:	2300      	movs	r3, #0
 800d59c:	3401      	adds	r4, #1
 800d59e:	9305      	str	r3, [sp, #20]
 800d5a0:	4619      	mov	r1, r3
 800d5a2:	f04f 0c0a 	mov.w	ip, #10
 800d5a6:	4620      	mov	r0, r4
 800d5a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d5ac:	3a30      	subs	r2, #48	@ 0x30
 800d5ae:	2a09      	cmp	r2, #9
 800d5b0:	d903      	bls.n	800d5ba <_svfiprintf_r+0x1a6>
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d0c6      	beq.n	800d544 <_svfiprintf_r+0x130>
 800d5b6:	9105      	str	r1, [sp, #20]
 800d5b8:	e7c4      	b.n	800d544 <_svfiprintf_r+0x130>
 800d5ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800d5be:	4604      	mov	r4, r0
 800d5c0:	2301      	movs	r3, #1
 800d5c2:	e7f0      	b.n	800d5a6 <_svfiprintf_r+0x192>
 800d5c4:	ab03      	add	r3, sp, #12
 800d5c6:	9300      	str	r3, [sp, #0]
 800d5c8:	462a      	mov	r2, r5
 800d5ca:	4b0e      	ldr	r3, [pc, #56]	@ (800d604 <_svfiprintf_r+0x1f0>)
 800d5cc:	a904      	add	r1, sp, #16
 800d5ce:	4638      	mov	r0, r7
 800d5d0:	f7fc fcd0 	bl	8009f74 <_printf_float>
 800d5d4:	1c42      	adds	r2, r0, #1
 800d5d6:	4606      	mov	r6, r0
 800d5d8:	d1d6      	bne.n	800d588 <_svfiprintf_r+0x174>
 800d5da:	89ab      	ldrh	r3, [r5, #12]
 800d5dc:	065b      	lsls	r3, r3, #25
 800d5de:	f53f af2d 	bmi.w	800d43c <_svfiprintf_r+0x28>
 800d5e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d5e4:	e72c      	b.n	800d440 <_svfiprintf_r+0x2c>
 800d5e6:	ab03      	add	r3, sp, #12
 800d5e8:	9300      	str	r3, [sp, #0]
 800d5ea:	462a      	mov	r2, r5
 800d5ec:	4b05      	ldr	r3, [pc, #20]	@ (800d604 <_svfiprintf_r+0x1f0>)
 800d5ee:	a904      	add	r1, sp, #16
 800d5f0:	4638      	mov	r0, r7
 800d5f2:	f7fc ff57 	bl	800a4a4 <_printf_i>
 800d5f6:	e7ed      	b.n	800d5d4 <_svfiprintf_r+0x1c0>
 800d5f8:	0800ec6d 	.word	0x0800ec6d
 800d5fc:	0800ec77 	.word	0x0800ec77
 800d600:	08009f75 	.word	0x08009f75
 800d604:	0800d35d 	.word	0x0800d35d
 800d608:	0800ec73 	.word	0x0800ec73

0800d60c <__sflush_r>:
 800d60c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d614:	0716      	lsls	r6, r2, #28
 800d616:	4605      	mov	r5, r0
 800d618:	460c      	mov	r4, r1
 800d61a:	d454      	bmi.n	800d6c6 <__sflush_r+0xba>
 800d61c:	684b      	ldr	r3, [r1, #4]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	dc02      	bgt.n	800d628 <__sflush_r+0x1c>
 800d622:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d624:	2b00      	cmp	r3, #0
 800d626:	dd48      	ble.n	800d6ba <__sflush_r+0xae>
 800d628:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d62a:	2e00      	cmp	r6, #0
 800d62c:	d045      	beq.n	800d6ba <__sflush_r+0xae>
 800d62e:	2300      	movs	r3, #0
 800d630:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d634:	682f      	ldr	r7, [r5, #0]
 800d636:	6a21      	ldr	r1, [r4, #32]
 800d638:	602b      	str	r3, [r5, #0]
 800d63a:	d030      	beq.n	800d69e <__sflush_r+0x92>
 800d63c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d63e:	89a3      	ldrh	r3, [r4, #12]
 800d640:	0759      	lsls	r1, r3, #29
 800d642:	d505      	bpl.n	800d650 <__sflush_r+0x44>
 800d644:	6863      	ldr	r3, [r4, #4]
 800d646:	1ad2      	subs	r2, r2, r3
 800d648:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d64a:	b10b      	cbz	r3, 800d650 <__sflush_r+0x44>
 800d64c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d64e:	1ad2      	subs	r2, r2, r3
 800d650:	2300      	movs	r3, #0
 800d652:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d654:	6a21      	ldr	r1, [r4, #32]
 800d656:	4628      	mov	r0, r5
 800d658:	47b0      	blx	r6
 800d65a:	1c43      	adds	r3, r0, #1
 800d65c:	89a3      	ldrh	r3, [r4, #12]
 800d65e:	d106      	bne.n	800d66e <__sflush_r+0x62>
 800d660:	6829      	ldr	r1, [r5, #0]
 800d662:	291d      	cmp	r1, #29
 800d664:	d82b      	bhi.n	800d6be <__sflush_r+0xb2>
 800d666:	4a2a      	ldr	r2, [pc, #168]	@ (800d710 <__sflush_r+0x104>)
 800d668:	40ca      	lsrs	r2, r1
 800d66a:	07d6      	lsls	r6, r2, #31
 800d66c:	d527      	bpl.n	800d6be <__sflush_r+0xb2>
 800d66e:	2200      	movs	r2, #0
 800d670:	6062      	str	r2, [r4, #4]
 800d672:	04d9      	lsls	r1, r3, #19
 800d674:	6922      	ldr	r2, [r4, #16]
 800d676:	6022      	str	r2, [r4, #0]
 800d678:	d504      	bpl.n	800d684 <__sflush_r+0x78>
 800d67a:	1c42      	adds	r2, r0, #1
 800d67c:	d101      	bne.n	800d682 <__sflush_r+0x76>
 800d67e:	682b      	ldr	r3, [r5, #0]
 800d680:	b903      	cbnz	r3, 800d684 <__sflush_r+0x78>
 800d682:	6560      	str	r0, [r4, #84]	@ 0x54
 800d684:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d686:	602f      	str	r7, [r5, #0]
 800d688:	b1b9      	cbz	r1, 800d6ba <__sflush_r+0xae>
 800d68a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d68e:	4299      	cmp	r1, r3
 800d690:	d002      	beq.n	800d698 <__sflush_r+0x8c>
 800d692:	4628      	mov	r0, r5
 800d694:	f7fe fae8 	bl	800bc68 <_free_r>
 800d698:	2300      	movs	r3, #0
 800d69a:	6363      	str	r3, [r4, #52]	@ 0x34
 800d69c:	e00d      	b.n	800d6ba <__sflush_r+0xae>
 800d69e:	2301      	movs	r3, #1
 800d6a0:	4628      	mov	r0, r5
 800d6a2:	47b0      	blx	r6
 800d6a4:	4602      	mov	r2, r0
 800d6a6:	1c50      	adds	r0, r2, #1
 800d6a8:	d1c9      	bne.n	800d63e <__sflush_r+0x32>
 800d6aa:	682b      	ldr	r3, [r5, #0]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d0c6      	beq.n	800d63e <__sflush_r+0x32>
 800d6b0:	2b1d      	cmp	r3, #29
 800d6b2:	d001      	beq.n	800d6b8 <__sflush_r+0xac>
 800d6b4:	2b16      	cmp	r3, #22
 800d6b6:	d11e      	bne.n	800d6f6 <__sflush_r+0xea>
 800d6b8:	602f      	str	r7, [r5, #0]
 800d6ba:	2000      	movs	r0, #0
 800d6bc:	e022      	b.n	800d704 <__sflush_r+0xf8>
 800d6be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d6c2:	b21b      	sxth	r3, r3
 800d6c4:	e01b      	b.n	800d6fe <__sflush_r+0xf2>
 800d6c6:	690f      	ldr	r7, [r1, #16]
 800d6c8:	2f00      	cmp	r7, #0
 800d6ca:	d0f6      	beq.n	800d6ba <__sflush_r+0xae>
 800d6cc:	0793      	lsls	r3, r2, #30
 800d6ce:	680e      	ldr	r6, [r1, #0]
 800d6d0:	bf08      	it	eq
 800d6d2:	694b      	ldreq	r3, [r1, #20]
 800d6d4:	600f      	str	r7, [r1, #0]
 800d6d6:	bf18      	it	ne
 800d6d8:	2300      	movne	r3, #0
 800d6da:	eba6 0807 	sub.w	r8, r6, r7
 800d6de:	608b      	str	r3, [r1, #8]
 800d6e0:	f1b8 0f00 	cmp.w	r8, #0
 800d6e4:	dde9      	ble.n	800d6ba <__sflush_r+0xae>
 800d6e6:	6a21      	ldr	r1, [r4, #32]
 800d6e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d6ea:	4643      	mov	r3, r8
 800d6ec:	463a      	mov	r2, r7
 800d6ee:	4628      	mov	r0, r5
 800d6f0:	47b0      	blx	r6
 800d6f2:	2800      	cmp	r0, #0
 800d6f4:	dc08      	bgt.n	800d708 <__sflush_r+0xfc>
 800d6f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d6fe:	81a3      	strh	r3, [r4, #12]
 800d700:	f04f 30ff 	mov.w	r0, #4294967295
 800d704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d708:	4407      	add	r7, r0
 800d70a:	eba8 0800 	sub.w	r8, r8, r0
 800d70e:	e7e7      	b.n	800d6e0 <__sflush_r+0xd4>
 800d710:	20400001 	.word	0x20400001

0800d714 <_fflush_r>:
 800d714:	b538      	push	{r3, r4, r5, lr}
 800d716:	690b      	ldr	r3, [r1, #16]
 800d718:	4605      	mov	r5, r0
 800d71a:	460c      	mov	r4, r1
 800d71c:	b913      	cbnz	r3, 800d724 <_fflush_r+0x10>
 800d71e:	2500      	movs	r5, #0
 800d720:	4628      	mov	r0, r5
 800d722:	bd38      	pop	{r3, r4, r5, pc}
 800d724:	b118      	cbz	r0, 800d72e <_fflush_r+0x1a>
 800d726:	6a03      	ldr	r3, [r0, #32]
 800d728:	b90b      	cbnz	r3, 800d72e <_fflush_r+0x1a>
 800d72a:	f7fd fa73 	bl	800ac14 <__sinit>
 800d72e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d0f3      	beq.n	800d71e <_fflush_r+0xa>
 800d736:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d738:	07d0      	lsls	r0, r2, #31
 800d73a:	d404      	bmi.n	800d746 <_fflush_r+0x32>
 800d73c:	0599      	lsls	r1, r3, #22
 800d73e:	d402      	bmi.n	800d746 <_fflush_r+0x32>
 800d740:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d742:	f7fd fc22 	bl	800af8a <__retarget_lock_acquire_recursive>
 800d746:	4628      	mov	r0, r5
 800d748:	4621      	mov	r1, r4
 800d74a:	f7ff ff5f 	bl	800d60c <__sflush_r>
 800d74e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d750:	07da      	lsls	r2, r3, #31
 800d752:	4605      	mov	r5, r0
 800d754:	d4e4      	bmi.n	800d720 <_fflush_r+0xc>
 800d756:	89a3      	ldrh	r3, [r4, #12]
 800d758:	059b      	lsls	r3, r3, #22
 800d75a:	d4e1      	bmi.n	800d720 <_fflush_r+0xc>
 800d75c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d75e:	f7fd fc15 	bl	800af8c <__retarget_lock_release_recursive>
 800d762:	e7dd      	b.n	800d720 <_fflush_r+0xc>

0800d764 <memmove>:
 800d764:	4288      	cmp	r0, r1
 800d766:	b510      	push	{r4, lr}
 800d768:	eb01 0402 	add.w	r4, r1, r2
 800d76c:	d902      	bls.n	800d774 <memmove+0x10>
 800d76e:	4284      	cmp	r4, r0
 800d770:	4623      	mov	r3, r4
 800d772:	d807      	bhi.n	800d784 <memmove+0x20>
 800d774:	1e43      	subs	r3, r0, #1
 800d776:	42a1      	cmp	r1, r4
 800d778:	d008      	beq.n	800d78c <memmove+0x28>
 800d77a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d77e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d782:	e7f8      	b.n	800d776 <memmove+0x12>
 800d784:	4402      	add	r2, r0
 800d786:	4601      	mov	r1, r0
 800d788:	428a      	cmp	r2, r1
 800d78a:	d100      	bne.n	800d78e <memmove+0x2a>
 800d78c:	bd10      	pop	{r4, pc}
 800d78e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d792:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d796:	e7f7      	b.n	800d788 <memmove+0x24>

0800d798 <nan>:
 800d798:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d7a0 <nan+0x8>
 800d79c:	4770      	bx	lr
 800d79e:	bf00      	nop
 800d7a0:	00000000 	.word	0x00000000
 800d7a4:	7ff80000 	.word	0x7ff80000

0800d7a8 <__assert_func>:
 800d7a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d7aa:	4614      	mov	r4, r2
 800d7ac:	461a      	mov	r2, r3
 800d7ae:	4b09      	ldr	r3, [pc, #36]	@ (800d7d4 <__assert_func+0x2c>)
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	4605      	mov	r5, r0
 800d7b4:	68d8      	ldr	r0, [r3, #12]
 800d7b6:	b14c      	cbz	r4, 800d7cc <__assert_func+0x24>
 800d7b8:	4b07      	ldr	r3, [pc, #28]	@ (800d7d8 <__assert_func+0x30>)
 800d7ba:	9100      	str	r1, [sp, #0]
 800d7bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d7c0:	4906      	ldr	r1, [pc, #24]	@ (800d7dc <__assert_func+0x34>)
 800d7c2:	462b      	mov	r3, r5
 800d7c4:	f000 fba8 	bl	800df18 <fiprintf>
 800d7c8:	f000 fbb8 	bl	800df3c <abort>
 800d7cc:	4b04      	ldr	r3, [pc, #16]	@ (800d7e0 <__assert_func+0x38>)
 800d7ce:	461c      	mov	r4, r3
 800d7d0:	e7f3      	b.n	800d7ba <__assert_func+0x12>
 800d7d2:	bf00      	nop
 800d7d4:	20000088 	.word	0x20000088
 800d7d8:	0800ec86 	.word	0x0800ec86
 800d7dc:	0800ec93 	.word	0x0800ec93
 800d7e0:	0800ecc1 	.word	0x0800ecc1

0800d7e4 <_calloc_r>:
 800d7e4:	b570      	push	{r4, r5, r6, lr}
 800d7e6:	fba1 5402 	umull	r5, r4, r1, r2
 800d7ea:	b934      	cbnz	r4, 800d7fa <_calloc_r+0x16>
 800d7ec:	4629      	mov	r1, r5
 800d7ee:	f7fc fa95 	bl	8009d1c <_malloc_r>
 800d7f2:	4606      	mov	r6, r0
 800d7f4:	b928      	cbnz	r0, 800d802 <_calloc_r+0x1e>
 800d7f6:	4630      	mov	r0, r6
 800d7f8:	bd70      	pop	{r4, r5, r6, pc}
 800d7fa:	220c      	movs	r2, #12
 800d7fc:	6002      	str	r2, [r0, #0]
 800d7fe:	2600      	movs	r6, #0
 800d800:	e7f9      	b.n	800d7f6 <_calloc_r+0x12>
 800d802:	462a      	mov	r2, r5
 800d804:	4621      	mov	r1, r4
 800d806:	f7fd fab0 	bl	800ad6a <memset>
 800d80a:	e7f4      	b.n	800d7f6 <_calloc_r+0x12>

0800d80c <rshift>:
 800d80c:	6903      	ldr	r3, [r0, #16]
 800d80e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d812:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d816:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d81a:	f100 0414 	add.w	r4, r0, #20
 800d81e:	dd45      	ble.n	800d8ac <rshift+0xa0>
 800d820:	f011 011f 	ands.w	r1, r1, #31
 800d824:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d828:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d82c:	d10c      	bne.n	800d848 <rshift+0x3c>
 800d82e:	f100 0710 	add.w	r7, r0, #16
 800d832:	4629      	mov	r1, r5
 800d834:	42b1      	cmp	r1, r6
 800d836:	d334      	bcc.n	800d8a2 <rshift+0x96>
 800d838:	1a9b      	subs	r3, r3, r2
 800d83a:	009b      	lsls	r3, r3, #2
 800d83c:	1eea      	subs	r2, r5, #3
 800d83e:	4296      	cmp	r6, r2
 800d840:	bf38      	it	cc
 800d842:	2300      	movcc	r3, #0
 800d844:	4423      	add	r3, r4
 800d846:	e015      	b.n	800d874 <rshift+0x68>
 800d848:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d84c:	f1c1 0820 	rsb	r8, r1, #32
 800d850:	40cf      	lsrs	r7, r1
 800d852:	f105 0e04 	add.w	lr, r5, #4
 800d856:	46a1      	mov	r9, r4
 800d858:	4576      	cmp	r6, lr
 800d85a:	46f4      	mov	ip, lr
 800d85c:	d815      	bhi.n	800d88a <rshift+0x7e>
 800d85e:	1a9a      	subs	r2, r3, r2
 800d860:	0092      	lsls	r2, r2, #2
 800d862:	3a04      	subs	r2, #4
 800d864:	3501      	adds	r5, #1
 800d866:	42ae      	cmp	r6, r5
 800d868:	bf38      	it	cc
 800d86a:	2200      	movcc	r2, #0
 800d86c:	18a3      	adds	r3, r4, r2
 800d86e:	50a7      	str	r7, [r4, r2]
 800d870:	b107      	cbz	r7, 800d874 <rshift+0x68>
 800d872:	3304      	adds	r3, #4
 800d874:	1b1a      	subs	r2, r3, r4
 800d876:	42a3      	cmp	r3, r4
 800d878:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d87c:	bf08      	it	eq
 800d87e:	2300      	moveq	r3, #0
 800d880:	6102      	str	r2, [r0, #16]
 800d882:	bf08      	it	eq
 800d884:	6143      	streq	r3, [r0, #20]
 800d886:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d88a:	f8dc c000 	ldr.w	ip, [ip]
 800d88e:	fa0c fc08 	lsl.w	ip, ip, r8
 800d892:	ea4c 0707 	orr.w	r7, ip, r7
 800d896:	f849 7b04 	str.w	r7, [r9], #4
 800d89a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d89e:	40cf      	lsrs	r7, r1
 800d8a0:	e7da      	b.n	800d858 <rshift+0x4c>
 800d8a2:	f851 cb04 	ldr.w	ip, [r1], #4
 800d8a6:	f847 cf04 	str.w	ip, [r7, #4]!
 800d8aa:	e7c3      	b.n	800d834 <rshift+0x28>
 800d8ac:	4623      	mov	r3, r4
 800d8ae:	e7e1      	b.n	800d874 <rshift+0x68>

0800d8b0 <__hexdig_fun>:
 800d8b0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d8b4:	2b09      	cmp	r3, #9
 800d8b6:	d802      	bhi.n	800d8be <__hexdig_fun+0xe>
 800d8b8:	3820      	subs	r0, #32
 800d8ba:	b2c0      	uxtb	r0, r0
 800d8bc:	4770      	bx	lr
 800d8be:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d8c2:	2b05      	cmp	r3, #5
 800d8c4:	d801      	bhi.n	800d8ca <__hexdig_fun+0x1a>
 800d8c6:	3847      	subs	r0, #71	@ 0x47
 800d8c8:	e7f7      	b.n	800d8ba <__hexdig_fun+0xa>
 800d8ca:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d8ce:	2b05      	cmp	r3, #5
 800d8d0:	d801      	bhi.n	800d8d6 <__hexdig_fun+0x26>
 800d8d2:	3827      	subs	r0, #39	@ 0x27
 800d8d4:	e7f1      	b.n	800d8ba <__hexdig_fun+0xa>
 800d8d6:	2000      	movs	r0, #0
 800d8d8:	4770      	bx	lr
	...

0800d8dc <__gethex>:
 800d8dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8e0:	b085      	sub	sp, #20
 800d8e2:	468a      	mov	sl, r1
 800d8e4:	9302      	str	r3, [sp, #8]
 800d8e6:	680b      	ldr	r3, [r1, #0]
 800d8e8:	9001      	str	r0, [sp, #4]
 800d8ea:	4690      	mov	r8, r2
 800d8ec:	1c9c      	adds	r4, r3, #2
 800d8ee:	46a1      	mov	r9, r4
 800d8f0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d8f4:	2830      	cmp	r0, #48	@ 0x30
 800d8f6:	d0fa      	beq.n	800d8ee <__gethex+0x12>
 800d8f8:	eba9 0303 	sub.w	r3, r9, r3
 800d8fc:	f1a3 0b02 	sub.w	fp, r3, #2
 800d900:	f7ff ffd6 	bl	800d8b0 <__hexdig_fun>
 800d904:	4605      	mov	r5, r0
 800d906:	2800      	cmp	r0, #0
 800d908:	d168      	bne.n	800d9dc <__gethex+0x100>
 800d90a:	49a0      	ldr	r1, [pc, #640]	@ (800db8c <__gethex+0x2b0>)
 800d90c:	2201      	movs	r2, #1
 800d90e:	4648      	mov	r0, r9
 800d910:	f7fd fa33 	bl	800ad7a <strncmp>
 800d914:	4607      	mov	r7, r0
 800d916:	2800      	cmp	r0, #0
 800d918:	d167      	bne.n	800d9ea <__gethex+0x10e>
 800d91a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d91e:	4626      	mov	r6, r4
 800d920:	f7ff ffc6 	bl	800d8b0 <__hexdig_fun>
 800d924:	2800      	cmp	r0, #0
 800d926:	d062      	beq.n	800d9ee <__gethex+0x112>
 800d928:	4623      	mov	r3, r4
 800d92a:	7818      	ldrb	r0, [r3, #0]
 800d92c:	2830      	cmp	r0, #48	@ 0x30
 800d92e:	4699      	mov	r9, r3
 800d930:	f103 0301 	add.w	r3, r3, #1
 800d934:	d0f9      	beq.n	800d92a <__gethex+0x4e>
 800d936:	f7ff ffbb 	bl	800d8b0 <__hexdig_fun>
 800d93a:	fab0 f580 	clz	r5, r0
 800d93e:	096d      	lsrs	r5, r5, #5
 800d940:	f04f 0b01 	mov.w	fp, #1
 800d944:	464a      	mov	r2, r9
 800d946:	4616      	mov	r6, r2
 800d948:	3201      	adds	r2, #1
 800d94a:	7830      	ldrb	r0, [r6, #0]
 800d94c:	f7ff ffb0 	bl	800d8b0 <__hexdig_fun>
 800d950:	2800      	cmp	r0, #0
 800d952:	d1f8      	bne.n	800d946 <__gethex+0x6a>
 800d954:	498d      	ldr	r1, [pc, #564]	@ (800db8c <__gethex+0x2b0>)
 800d956:	2201      	movs	r2, #1
 800d958:	4630      	mov	r0, r6
 800d95a:	f7fd fa0e 	bl	800ad7a <strncmp>
 800d95e:	2800      	cmp	r0, #0
 800d960:	d13f      	bne.n	800d9e2 <__gethex+0x106>
 800d962:	b944      	cbnz	r4, 800d976 <__gethex+0x9a>
 800d964:	1c74      	adds	r4, r6, #1
 800d966:	4622      	mov	r2, r4
 800d968:	4616      	mov	r6, r2
 800d96a:	3201      	adds	r2, #1
 800d96c:	7830      	ldrb	r0, [r6, #0]
 800d96e:	f7ff ff9f 	bl	800d8b0 <__hexdig_fun>
 800d972:	2800      	cmp	r0, #0
 800d974:	d1f8      	bne.n	800d968 <__gethex+0x8c>
 800d976:	1ba4      	subs	r4, r4, r6
 800d978:	00a7      	lsls	r7, r4, #2
 800d97a:	7833      	ldrb	r3, [r6, #0]
 800d97c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d980:	2b50      	cmp	r3, #80	@ 0x50
 800d982:	d13e      	bne.n	800da02 <__gethex+0x126>
 800d984:	7873      	ldrb	r3, [r6, #1]
 800d986:	2b2b      	cmp	r3, #43	@ 0x2b
 800d988:	d033      	beq.n	800d9f2 <__gethex+0x116>
 800d98a:	2b2d      	cmp	r3, #45	@ 0x2d
 800d98c:	d034      	beq.n	800d9f8 <__gethex+0x11c>
 800d98e:	1c71      	adds	r1, r6, #1
 800d990:	2400      	movs	r4, #0
 800d992:	7808      	ldrb	r0, [r1, #0]
 800d994:	f7ff ff8c 	bl	800d8b0 <__hexdig_fun>
 800d998:	1e43      	subs	r3, r0, #1
 800d99a:	b2db      	uxtb	r3, r3
 800d99c:	2b18      	cmp	r3, #24
 800d99e:	d830      	bhi.n	800da02 <__gethex+0x126>
 800d9a0:	f1a0 0210 	sub.w	r2, r0, #16
 800d9a4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d9a8:	f7ff ff82 	bl	800d8b0 <__hexdig_fun>
 800d9ac:	f100 3cff 	add.w	ip, r0, #4294967295
 800d9b0:	fa5f fc8c 	uxtb.w	ip, ip
 800d9b4:	f1bc 0f18 	cmp.w	ip, #24
 800d9b8:	f04f 030a 	mov.w	r3, #10
 800d9bc:	d91e      	bls.n	800d9fc <__gethex+0x120>
 800d9be:	b104      	cbz	r4, 800d9c2 <__gethex+0xe6>
 800d9c0:	4252      	negs	r2, r2
 800d9c2:	4417      	add	r7, r2
 800d9c4:	f8ca 1000 	str.w	r1, [sl]
 800d9c8:	b1ed      	cbz	r5, 800da06 <__gethex+0x12a>
 800d9ca:	f1bb 0f00 	cmp.w	fp, #0
 800d9ce:	bf0c      	ite	eq
 800d9d0:	2506      	moveq	r5, #6
 800d9d2:	2500      	movne	r5, #0
 800d9d4:	4628      	mov	r0, r5
 800d9d6:	b005      	add	sp, #20
 800d9d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9dc:	2500      	movs	r5, #0
 800d9de:	462c      	mov	r4, r5
 800d9e0:	e7b0      	b.n	800d944 <__gethex+0x68>
 800d9e2:	2c00      	cmp	r4, #0
 800d9e4:	d1c7      	bne.n	800d976 <__gethex+0x9a>
 800d9e6:	4627      	mov	r7, r4
 800d9e8:	e7c7      	b.n	800d97a <__gethex+0x9e>
 800d9ea:	464e      	mov	r6, r9
 800d9ec:	462f      	mov	r7, r5
 800d9ee:	2501      	movs	r5, #1
 800d9f0:	e7c3      	b.n	800d97a <__gethex+0x9e>
 800d9f2:	2400      	movs	r4, #0
 800d9f4:	1cb1      	adds	r1, r6, #2
 800d9f6:	e7cc      	b.n	800d992 <__gethex+0xb6>
 800d9f8:	2401      	movs	r4, #1
 800d9fa:	e7fb      	b.n	800d9f4 <__gethex+0x118>
 800d9fc:	fb03 0002 	mla	r0, r3, r2, r0
 800da00:	e7ce      	b.n	800d9a0 <__gethex+0xc4>
 800da02:	4631      	mov	r1, r6
 800da04:	e7de      	b.n	800d9c4 <__gethex+0xe8>
 800da06:	eba6 0309 	sub.w	r3, r6, r9
 800da0a:	3b01      	subs	r3, #1
 800da0c:	4629      	mov	r1, r5
 800da0e:	2b07      	cmp	r3, #7
 800da10:	dc0a      	bgt.n	800da28 <__gethex+0x14c>
 800da12:	9801      	ldr	r0, [sp, #4]
 800da14:	f7fe f972 	bl	800bcfc <_Balloc>
 800da18:	4604      	mov	r4, r0
 800da1a:	b940      	cbnz	r0, 800da2e <__gethex+0x152>
 800da1c:	4b5c      	ldr	r3, [pc, #368]	@ (800db90 <__gethex+0x2b4>)
 800da1e:	4602      	mov	r2, r0
 800da20:	21e4      	movs	r1, #228	@ 0xe4
 800da22:	485c      	ldr	r0, [pc, #368]	@ (800db94 <__gethex+0x2b8>)
 800da24:	f7ff fec0 	bl	800d7a8 <__assert_func>
 800da28:	3101      	adds	r1, #1
 800da2a:	105b      	asrs	r3, r3, #1
 800da2c:	e7ef      	b.n	800da0e <__gethex+0x132>
 800da2e:	f100 0a14 	add.w	sl, r0, #20
 800da32:	2300      	movs	r3, #0
 800da34:	4655      	mov	r5, sl
 800da36:	469b      	mov	fp, r3
 800da38:	45b1      	cmp	r9, r6
 800da3a:	d337      	bcc.n	800daac <__gethex+0x1d0>
 800da3c:	f845 bb04 	str.w	fp, [r5], #4
 800da40:	eba5 050a 	sub.w	r5, r5, sl
 800da44:	10ad      	asrs	r5, r5, #2
 800da46:	6125      	str	r5, [r4, #16]
 800da48:	4658      	mov	r0, fp
 800da4a:	f7fe fa49 	bl	800bee0 <__hi0bits>
 800da4e:	016d      	lsls	r5, r5, #5
 800da50:	f8d8 6000 	ldr.w	r6, [r8]
 800da54:	1a2d      	subs	r5, r5, r0
 800da56:	42b5      	cmp	r5, r6
 800da58:	dd54      	ble.n	800db04 <__gethex+0x228>
 800da5a:	1bad      	subs	r5, r5, r6
 800da5c:	4629      	mov	r1, r5
 800da5e:	4620      	mov	r0, r4
 800da60:	f7fe fdd5 	bl	800c60e <__any_on>
 800da64:	4681      	mov	r9, r0
 800da66:	b178      	cbz	r0, 800da88 <__gethex+0x1ac>
 800da68:	1e6b      	subs	r3, r5, #1
 800da6a:	1159      	asrs	r1, r3, #5
 800da6c:	f003 021f 	and.w	r2, r3, #31
 800da70:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800da74:	f04f 0901 	mov.w	r9, #1
 800da78:	fa09 f202 	lsl.w	r2, r9, r2
 800da7c:	420a      	tst	r2, r1
 800da7e:	d003      	beq.n	800da88 <__gethex+0x1ac>
 800da80:	454b      	cmp	r3, r9
 800da82:	dc36      	bgt.n	800daf2 <__gethex+0x216>
 800da84:	f04f 0902 	mov.w	r9, #2
 800da88:	4629      	mov	r1, r5
 800da8a:	4620      	mov	r0, r4
 800da8c:	f7ff febe 	bl	800d80c <rshift>
 800da90:	442f      	add	r7, r5
 800da92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800da96:	42bb      	cmp	r3, r7
 800da98:	da42      	bge.n	800db20 <__gethex+0x244>
 800da9a:	9801      	ldr	r0, [sp, #4]
 800da9c:	4621      	mov	r1, r4
 800da9e:	f7fe f96d 	bl	800bd7c <_Bfree>
 800daa2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800daa4:	2300      	movs	r3, #0
 800daa6:	6013      	str	r3, [r2, #0]
 800daa8:	25a3      	movs	r5, #163	@ 0xa3
 800daaa:	e793      	b.n	800d9d4 <__gethex+0xf8>
 800daac:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800dab0:	2a2e      	cmp	r2, #46	@ 0x2e
 800dab2:	d012      	beq.n	800dada <__gethex+0x1fe>
 800dab4:	2b20      	cmp	r3, #32
 800dab6:	d104      	bne.n	800dac2 <__gethex+0x1e6>
 800dab8:	f845 bb04 	str.w	fp, [r5], #4
 800dabc:	f04f 0b00 	mov.w	fp, #0
 800dac0:	465b      	mov	r3, fp
 800dac2:	7830      	ldrb	r0, [r6, #0]
 800dac4:	9303      	str	r3, [sp, #12]
 800dac6:	f7ff fef3 	bl	800d8b0 <__hexdig_fun>
 800daca:	9b03      	ldr	r3, [sp, #12]
 800dacc:	f000 000f 	and.w	r0, r0, #15
 800dad0:	4098      	lsls	r0, r3
 800dad2:	ea4b 0b00 	orr.w	fp, fp, r0
 800dad6:	3304      	adds	r3, #4
 800dad8:	e7ae      	b.n	800da38 <__gethex+0x15c>
 800dada:	45b1      	cmp	r9, r6
 800dadc:	d8ea      	bhi.n	800dab4 <__gethex+0x1d8>
 800dade:	492b      	ldr	r1, [pc, #172]	@ (800db8c <__gethex+0x2b0>)
 800dae0:	9303      	str	r3, [sp, #12]
 800dae2:	2201      	movs	r2, #1
 800dae4:	4630      	mov	r0, r6
 800dae6:	f7fd f948 	bl	800ad7a <strncmp>
 800daea:	9b03      	ldr	r3, [sp, #12]
 800daec:	2800      	cmp	r0, #0
 800daee:	d1e1      	bne.n	800dab4 <__gethex+0x1d8>
 800daf0:	e7a2      	b.n	800da38 <__gethex+0x15c>
 800daf2:	1ea9      	subs	r1, r5, #2
 800daf4:	4620      	mov	r0, r4
 800daf6:	f7fe fd8a 	bl	800c60e <__any_on>
 800dafa:	2800      	cmp	r0, #0
 800dafc:	d0c2      	beq.n	800da84 <__gethex+0x1a8>
 800dafe:	f04f 0903 	mov.w	r9, #3
 800db02:	e7c1      	b.n	800da88 <__gethex+0x1ac>
 800db04:	da09      	bge.n	800db1a <__gethex+0x23e>
 800db06:	1b75      	subs	r5, r6, r5
 800db08:	4621      	mov	r1, r4
 800db0a:	9801      	ldr	r0, [sp, #4]
 800db0c:	462a      	mov	r2, r5
 800db0e:	f7fe fb45 	bl	800c19c <__lshift>
 800db12:	1b7f      	subs	r7, r7, r5
 800db14:	4604      	mov	r4, r0
 800db16:	f100 0a14 	add.w	sl, r0, #20
 800db1a:	f04f 0900 	mov.w	r9, #0
 800db1e:	e7b8      	b.n	800da92 <__gethex+0x1b6>
 800db20:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800db24:	42bd      	cmp	r5, r7
 800db26:	dd6f      	ble.n	800dc08 <__gethex+0x32c>
 800db28:	1bed      	subs	r5, r5, r7
 800db2a:	42ae      	cmp	r6, r5
 800db2c:	dc34      	bgt.n	800db98 <__gethex+0x2bc>
 800db2e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800db32:	2b02      	cmp	r3, #2
 800db34:	d022      	beq.n	800db7c <__gethex+0x2a0>
 800db36:	2b03      	cmp	r3, #3
 800db38:	d024      	beq.n	800db84 <__gethex+0x2a8>
 800db3a:	2b01      	cmp	r3, #1
 800db3c:	d115      	bne.n	800db6a <__gethex+0x28e>
 800db3e:	42ae      	cmp	r6, r5
 800db40:	d113      	bne.n	800db6a <__gethex+0x28e>
 800db42:	2e01      	cmp	r6, #1
 800db44:	d10b      	bne.n	800db5e <__gethex+0x282>
 800db46:	9a02      	ldr	r2, [sp, #8]
 800db48:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800db4c:	6013      	str	r3, [r2, #0]
 800db4e:	2301      	movs	r3, #1
 800db50:	6123      	str	r3, [r4, #16]
 800db52:	f8ca 3000 	str.w	r3, [sl]
 800db56:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800db58:	2562      	movs	r5, #98	@ 0x62
 800db5a:	601c      	str	r4, [r3, #0]
 800db5c:	e73a      	b.n	800d9d4 <__gethex+0xf8>
 800db5e:	1e71      	subs	r1, r6, #1
 800db60:	4620      	mov	r0, r4
 800db62:	f7fe fd54 	bl	800c60e <__any_on>
 800db66:	2800      	cmp	r0, #0
 800db68:	d1ed      	bne.n	800db46 <__gethex+0x26a>
 800db6a:	9801      	ldr	r0, [sp, #4]
 800db6c:	4621      	mov	r1, r4
 800db6e:	f7fe f905 	bl	800bd7c <_Bfree>
 800db72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800db74:	2300      	movs	r3, #0
 800db76:	6013      	str	r3, [r2, #0]
 800db78:	2550      	movs	r5, #80	@ 0x50
 800db7a:	e72b      	b.n	800d9d4 <__gethex+0xf8>
 800db7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d1f3      	bne.n	800db6a <__gethex+0x28e>
 800db82:	e7e0      	b.n	800db46 <__gethex+0x26a>
 800db84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db86:	2b00      	cmp	r3, #0
 800db88:	d1dd      	bne.n	800db46 <__gethex+0x26a>
 800db8a:	e7ee      	b.n	800db6a <__gethex+0x28e>
 800db8c:	0800ec6b 	.word	0x0800ec6b
 800db90:	0800ec01 	.word	0x0800ec01
 800db94:	0800ecc2 	.word	0x0800ecc2
 800db98:	1e6f      	subs	r7, r5, #1
 800db9a:	f1b9 0f00 	cmp.w	r9, #0
 800db9e:	d130      	bne.n	800dc02 <__gethex+0x326>
 800dba0:	b127      	cbz	r7, 800dbac <__gethex+0x2d0>
 800dba2:	4639      	mov	r1, r7
 800dba4:	4620      	mov	r0, r4
 800dba6:	f7fe fd32 	bl	800c60e <__any_on>
 800dbaa:	4681      	mov	r9, r0
 800dbac:	117a      	asrs	r2, r7, #5
 800dbae:	2301      	movs	r3, #1
 800dbb0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800dbb4:	f007 071f 	and.w	r7, r7, #31
 800dbb8:	40bb      	lsls	r3, r7
 800dbba:	4213      	tst	r3, r2
 800dbbc:	4629      	mov	r1, r5
 800dbbe:	4620      	mov	r0, r4
 800dbc0:	bf18      	it	ne
 800dbc2:	f049 0902 	orrne.w	r9, r9, #2
 800dbc6:	f7ff fe21 	bl	800d80c <rshift>
 800dbca:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800dbce:	1b76      	subs	r6, r6, r5
 800dbd0:	2502      	movs	r5, #2
 800dbd2:	f1b9 0f00 	cmp.w	r9, #0
 800dbd6:	d047      	beq.n	800dc68 <__gethex+0x38c>
 800dbd8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dbdc:	2b02      	cmp	r3, #2
 800dbde:	d015      	beq.n	800dc0c <__gethex+0x330>
 800dbe0:	2b03      	cmp	r3, #3
 800dbe2:	d017      	beq.n	800dc14 <__gethex+0x338>
 800dbe4:	2b01      	cmp	r3, #1
 800dbe6:	d109      	bne.n	800dbfc <__gethex+0x320>
 800dbe8:	f019 0f02 	tst.w	r9, #2
 800dbec:	d006      	beq.n	800dbfc <__gethex+0x320>
 800dbee:	f8da 3000 	ldr.w	r3, [sl]
 800dbf2:	ea49 0903 	orr.w	r9, r9, r3
 800dbf6:	f019 0f01 	tst.w	r9, #1
 800dbfa:	d10e      	bne.n	800dc1a <__gethex+0x33e>
 800dbfc:	f045 0510 	orr.w	r5, r5, #16
 800dc00:	e032      	b.n	800dc68 <__gethex+0x38c>
 800dc02:	f04f 0901 	mov.w	r9, #1
 800dc06:	e7d1      	b.n	800dbac <__gethex+0x2d0>
 800dc08:	2501      	movs	r5, #1
 800dc0a:	e7e2      	b.n	800dbd2 <__gethex+0x2f6>
 800dc0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc0e:	f1c3 0301 	rsb	r3, r3, #1
 800dc12:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dc14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d0f0      	beq.n	800dbfc <__gethex+0x320>
 800dc1a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800dc1e:	f104 0314 	add.w	r3, r4, #20
 800dc22:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800dc26:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800dc2a:	f04f 0c00 	mov.w	ip, #0
 800dc2e:	4618      	mov	r0, r3
 800dc30:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc34:	f1b2 3fff 	cmp.w	r2, #4294967295
 800dc38:	d01b      	beq.n	800dc72 <__gethex+0x396>
 800dc3a:	3201      	adds	r2, #1
 800dc3c:	6002      	str	r2, [r0, #0]
 800dc3e:	2d02      	cmp	r5, #2
 800dc40:	f104 0314 	add.w	r3, r4, #20
 800dc44:	d13c      	bne.n	800dcc0 <__gethex+0x3e4>
 800dc46:	f8d8 2000 	ldr.w	r2, [r8]
 800dc4a:	3a01      	subs	r2, #1
 800dc4c:	42b2      	cmp	r2, r6
 800dc4e:	d109      	bne.n	800dc64 <__gethex+0x388>
 800dc50:	1171      	asrs	r1, r6, #5
 800dc52:	2201      	movs	r2, #1
 800dc54:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dc58:	f006 061f 	and.w	r6, r6, #31
 800dc5c:	fa02 f606 	lsl.w	r6, r2, r6
 800dc60:	421e      	tst	r6, r3
 800dc62:	d13a      	bne.n	800dcda <__gethex+0x3fe>
 800dc64:	f045 0520 	orr.w	r5, r5, #32
 800dc68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dc6a:	601c      	str	r4, [r3, #0]
 800dc6c:	9b02      	ldr	r3, [sp, #8]
 800dc6e:	601f      	str	r7, [r3, #0]
 800dc70:	e6b0      	b.n	800d9d4 <__gethex+0xf8>
 800dc72:	4299      	cmp	r1, r3
 800dc74:	f843 cc04 	str.w	ip, [r3, #-4]
 800dc78:	d8d9      	bhi.n	800dc2e <__gethex+0x352>
 800dc7a:	68a3      	ldr	r3, [r4, #8]
 800dc7c:	459b      	cmp	fp, r3
 800dc7e:	db17      	blt.n	800dcb0 <__gethex+0x3d4>
 800dc80:	6861      	ldr	r1, [r4, #4]
 800dc82:	9801      	ldr	r0, [sp, #4]
 800dc84:	3101      	adds	r1, #1
 800dc86:	f7fe f839 	bl	800bcfc <_Balloc>
 800dc8a:	4681      	mov	r9, r0
 800dc8c:	b918      	cbnz	r0, 800dc96 <__gethex+0x3ba>
 800dc8e:	4b1a      	ldr	r3, [pc, #104]	@ (800dcf8 <__gethex+0x41c>)
 800dc90:	4602      	mov	r2, r0
 800dc92:	2184      	movs	r1, #132	@ 0x84
 800dc94:	e6c5      	b.n	800da22 <__gethex+0x146>
 800dc96:	6922      	ldr	r2, [r4, #16]
 800dc98:	3202      	adds	r2, #2
 800dc9a:	f104 010c 	add.w	r1, r4, #12
 800dc9e:	0092      	lsls	r2, r2, #2
 800dca0:	300c      	adds	r0, #12
 800dca2:	f7fd f974 	bl	800af8e <memcpy>
 800dca6:	4621      	mov	r1, r4
 800dca8:	9801      	ldr	r0, [sp, #4]
 800dcaa:	f7fe f867 	bl	800bd7c <_Bfree>
 800dcae:	464c      	mov	r4, r9
 800dcb0:	6923      	ldr	r3, [r4, #16]
 800dcb2:	1c5a      	adds	r2, r3, #1
 800dcb4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dcb8:	6122      	str	r2, [r4, #16]
 800dcba:	2201      	movs	r2, #1
 800dcbc:	615a      	str	r2, [r3, #20]
 800dcbe:	e7be      	b.n	800dc3e <__gethex+0x362>
 800dcc0:	6922      	ldr	r2, [r4, #16]
 800dcc2:	455a      	cmp	r2, fp
 800dcc4:	dd0b      	ble.n	800dcde <__gethex+0x402>
 800dcc6:	2101      	movs	r1, #1
 800dcc8:	4620      	mov	r0, r4
 800dcca:	f7ff fd9f 	bl	800d80c <rshift>
 800dcce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dcd2:	3701      	adds	r7, #1
 800dcd4:	42bb      	cmp	r3, r7
 800dcd6:	f6ff aee0 	blt.w	800da9a <__gethex+0x1be>
 800dcda:	2501      	movs	r5, #1
 800dcdc:	e7c2      	b.n	800dc64 <__gethex+0x388>
 800dcde:	f016 061f 	ands.w	r6, r6, #31
 800dce2:	d0fa      	beq.n	800dcda <__gethex+0x3fe>
 800dce4:	4453      	add	r3, sl
 800dce6:	f1c6 0620 	rsb	r6, r6, #32
 800dcea:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800dcee:	f7fe f8f7 	bl	800bee0 <__hi0bits>
 800dcf2:	42b0      	cmp	r0, r6
 800dcf4:	dbe7      	blt.n	800dcc6 <__gethex+0x3ea>
 800dcf6:	e7f0      	b.n	800dcda <__gethex+0x3fe>
 800dcf8:	0800ec01 	.word	0x0800ec01

0800dcfc <L_shift>:
 800dcfc:	f1c2 0208 	rsb	r2, r2, #8
 800dd00:	0092      	lsls	r2, r2, #2
 800dd02:	b570      	push	{r4, r5, r6, lr}
 800dd04:	f1c2 0620 	rsb	r6, r2, #32
 800dd08:	6843      	ldr	r3, [r0, #4]
 800dd0a:	6804      	ldr	r4, [r0, #0]
 800dd0c:	fa03 f506 	lsl.w	r5, r3, r6
 800dd10:	432c      	orrs	r4, r5
 800dd12:	40d3      	lsrs	r3, r2
 800dd14:	6004      	str	r4, [r0, #0]
 800dd16:	f840 3f04 	str.w	r3, [r0, #4]!
 800dd1a:	4288      	cmp	r0, r1
 800dd1c:	d3f4      	bcc.n	800dd08 <L_shift+0xc>
 800dd1e:	bd70      	pop	{r4, r5, r6, pc}

0800dd20 <__match>:
 800dd20:	b530      	push	{r4, r5, lr}
 800dd22:	6803      	ldr	r3, [r0, #0]
 800dd24:	3301      	adds	r3, #1
 800dd26:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd2a:	b914      	cbnz	r4, 800dd32 <__match+0x12>
 800dd2c:	6003      	str	r3, [r0, #0]
 800dd2e:	2001      	movs	r0, #1
 800dd30:	bd30      	pop	{r4, r5, pc}
 800dd32:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd36:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800dd3a:	2d19      	cmp	r5, #25
 800dd3c:	bf98      	it	ls
 800dd3e:	3220      	addls	r2, #32
 800dd40:	42a2      	cmp	r2, r4
 800dd42:	d0f0      	beq.n	800dd26 <__match+0x6>
 800dd44:	2000      	movs	r0, #0
 800dd46:	e7f3      	b.n	800dd30 <__match+0x10>

0800dd48 <__hexnan>:
 800dd48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd4c:	680b      	ldr	r3, [r1, #0]
 800dd4e:	6801      	ldr	r1, [r0, #0]
 800dd50:	115e      	asrs	r6, r3, #5
 800dd52:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800dd56:	f013 031f 	ands.w	r3, r3, #31
 800dd5a:	b087      	sub	sp, #28
 800dd5c:	bf18      	it	ne
 800dd5e:	3604      	addne	r6, #4
 800dd60:	2500      	movs	r5, #0
 800dd62:	1f37      	subs	r7, r6, #4
 800dd64:	4682      	mov	sl, r0
 800dd66:	4690      	mov	r8, r2
 800dd68:	9301      	str	r3, [sp, #4]
 800dd6a:	f846 5c04 	str.w	r5, [r6, #-4]
 800dd6e:	46b9      	mov	r9, r7
 800dd70:	463c      	mov	r4, r7
 800dd72:	9502      	str	r5, [sp, #8]
 800dd74:	46ab      	mov	fp, r5
 800dd76:	784a      	ldrb	r2, [r1, #1]
 800dd78:	1c4b      	adds	r3, r1, #1
 800dd7a:	9303      	str	r3, [sp, #12]
 800dd7c:	b342      	cbz	r2, 800ddd0 <__hexnan+0x88>
 800dd7e:	4610      	mov	r0, r2
 800dd80:	9105      	str	r1, [sp, #20]
 800dd82:	9204      	str	r2, [sp, #16]
 800dd84:	f7ff fd94 	bl	800d8b0 <__hexdig_fun>
 800dd88:	2800      	cmp	r0, #0
 800dd8a:	d151      	bne.n	800de30 <__hexnan+0xe8>
 800dd8c:	9a04      	ldr	r2, [sp, #16]
 800dd8e:	9905      	ldr	r1, [sp, #20]
 800dd90:	2a20      	cmp	r2, #32
 800dd92:	d818      	bhi.n	800ddc6 <__hexnan+0x7e>
 800dd94:	9b02      	ldr	r3, [sp, #8]
 800dd96:	459b      	cmp	fp, r3
 800dd98:	dd13      	ble.n	800ddc2 <__hexnan+0x7a>
 800dd9a:	454c      	cmp	r4, r9
 800dd9c:	d206      	bcs.n	800ddac <__hexnan+0x64>
 800dd9e:	2d07      	cmp	r5, #7
 800dda0:	dc04      	bgt.n	800ddac <__hexnan+0x64>
 800dda2:	462a      	mov	r2, r5
 800dda4:	4649      	mov	r1, r9
 800dda6:	4620      	mov	r0, r4
 800dda8:	f7ff ffa8 	bl	800dcfc <L_shift>
 800ddac:	4544      	cmp	r4, r8
 800ddae:	d952      	bls.n	800de56 <__hexnan+0x10e>
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	f1a4 0904 	sub.w	r9, r4, #4
 800ddb6:	f844 3c04 	str.w	r3, [r4, #-4]
 800ddba:	f8cd b008 	str.w	fp, [sp, #8]
 800ddbe:	464c      	mov	r4, r9
 800ddc0:	461d      	mov	r5, r3
 800ddc2:	9903      	ldr	r1, [sp, #12]
 800ddc4:	e7d7      	b.n	800dd76 <__hexnan+0x2e>
 800ddc6:	2a29      	cmp	r2, #41	@ 0x29
 800ddc8:	d157      	bne.n	800de7a <__hexnan+0x132>
 800ddca:	3102      	adds	r1, #2
 800ddcc:	f8ca 1000 	str.w	r1, [sl]
 800ddd0:	f1bb 0f00 	cmp.w	fp, #0
 800ddd4:	d051      	beq.n	800de7a <__hexnan+0x132>
 800ddd6:	454c      	cmp	r4, r9
 800ddd8:	d206      	bcs.n	800dde8 <__hexnan+0xa0>
 800ddda:	2d07      	cmp	r5, #7
 800dddc:	dc04      	bgt.n	800dde8 <__hexnan+0xa0>
 800ddde:	462a      	mov	r2, r5
 800dde0:	4649      	mov	r1, r9
 800dde2:	4620      	mov	r0, r4
 800dde4:	f7ff ff8a 	bl	800dcfc <L_shift>
 800dde8:	4544      	cmp	r4, r8
 800ddea:	d936      	bls.n	800de5a <__hexnan+0x112>
 800ddec:	f1a8 0204 	sub.w	r2, r8, #4
 800ddf0:	4623      	mov	r3, r4
 800ddf2:	f853 1b04 	ldr.w	r1, [r3], #4
 800ddf6:	f842 1f04 	str.w	r1, [r2, #4]!
 800ddfa:	429f      	cmp	r7, r3
 800ddfc:	d2f9      	bcs.n	800ddf2 <__hexnan+0xaa>
 800ddfe:	1b3b      	subs	r3, r7, r4
 800de00:	f023 0303 	bic.w	r3, r3, #3
 800de04:	3304      	adds	r3, #4
 800de06:	3401      	adds	r4, #1
 800de08:	3e03      	subs	r6, #3
 800de0a:	42b4      	cmp	r4, r6
 800de0c:	bf88      	it	hi
 800de0e:	2304      	movhi	r3, #4
 800de10:	4443      	add	r3, r8
 800de12:	2200      	movs	r2, #0
 800de14:	f843 2b04 	str.w	r2, [r3], #4
 800de18:	429f      	cmp	r7, r3
 800de1a:	d2fb      	bcs.n	800de14 <__hexnan+0xcc>
 800de1c:	683b      	ldr	r3, [r7, #0]
 800de1e:	b91b      	cbnz	r3, 800de28 <__hexnan+0xe0>
 800de20:	4547      	cmp	r7, r8
 800de22:	d128      	bne.n	800de76 <__hexnan+0x12e>
 800de24:	2301      	movs	r3, #1
 800de26:	603b      	str	r3, [r7, #0]
 800de28:	2005      	movs	r0, #5
 800de2a:	b007      	add	sp, #28
 800de2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de30:	3501      	adds	r5, #1
 800de32:	2d08      	cmp	r5, #8
 800de34:	f10b 0b01 	add.w	fp, fp, #1
 800de38:	dd06      	ble.n	800de48 <__hexnan+0x100>
 800de3a:	4544      	cmp	r4, r8
 800de3c:	d9c1      	bls.n	800ddc2 <__hexnan+0x7a>
 800de3e:	2300      	movs	r3, #0
 800de40:	f844 3c04 	str.w	r3, [r4, #-4]
 800de44:	2501      	movs	r5, #1
 800de46:	3c04      	subs	r4, #4
 800de48:	6822      	ldr	r2, [r4, #0]
 800de4a:	f000 000f 	and.w	r0, r0, #15
 800de4e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800de52:	6020      	str	r0, [r4, #0]
 800de54:	e7b5      	b.n	800ddc2 <__hexnan+0x7a>
 800de56:	2508      	movs	r5, #8
 800de58:	e7b3      	b.n	800ddc2 <__hexnan+0x7a>
 800de5a:	9b01      	ldr	r3, [sp, #4]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d0dd      	beq.n	800de1c <__hexnan+0xd4>
 800de60:	f1c3 0320 	rsb	r3, r3, #32
 800de64:	f04f 32ff 	mov.w	r2, #4294967295
 800de68:	40da      	lsrs	r2, r3
 800de6a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800de6e:	4013      	ands	r3, r2
 800de70:	f846 3c04 	str.w	r3, [r6, #-4]
 800de74:	e7d2      	b.n	800de1c <__hexnan+0xd4>
 800de76:	3f04      	subs	r7, #4
 800de78:	e7d0      	b.n	800de1c <__hexnan+0xd4>
 800de7a:	2004      	movs	r0, #4
 800de7c:	e7d5      	b.n	800de2a <__hexnan+0xe2>

0800de7e <__ascii_mbtowc>:
 800de7e:	b082      	sub	sp, #8
 800de80:	b901      	cbnz	r1, 800de84 <__ascii_mbtowc+0x6>
 800de82:	a901      	add	r1, sp, #4
 800de84:	b142      	cbz	r2, 800de98 <__ascii_mbtowc+0x1a>
 800de86:	b14b      	cbz	r3, 800de9c <__ascii_mbtowc+0x1e>
 800de88:	7813      	ldrb	r3, [r2, #0]
 800de8a:	600b      	str	r3, [r1, #0]
 800de8c:	7812      	ldrb	r2, [r2, #0]
 800de8e:	1e10      	subs	r0, r2, #0
 800de90:	bf18      	it	ne
 800de92:	2001      	movne	r0, #1
 800de94:	b002      	add	sp, #8
 800de96:	4770      	bx	lr
 800de98:	4610      	mov	r0, r2
 800de9a:	e7fb      	b.n	800de94 <__ascii_mbtowc+0x16>
 800de9c:	f06f 0001 	mvn.w	r0, #1
 800dea0:	e7f8      	b.n	800de94 <__ascii_mbtowc+0x16>

0800dea2 <_realloc_r>:
 800dea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dea6:	4607      	mov	r7, r0
 800dea8:	4614      	mov	r4, r2
 800deaa:	460d      	mov	r5, r1
 800deac:	b921      	cbnz	r1, 800deb8 <_realloc_r+0x16>
 800deae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800deb2:	4611      	mov	r1, r2
 800deb4:	f7fb bf32 	b.w	8009d1c <_malloc_r>
 800deb8:	b92a      	cbnz	r2, 800dec6 <_realloc_r+0x24>
 800deba:	f7fd fed5 	bl	800bc68 <_free_r>
 800debe:	4625      	mov	r5, r4
 800dec0:	4628      	mov	r0, r5
 800dec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dec6:	f000 f840 	bl	800df4a <_malloc_usable_size_r>
 800deca:	4284      	cmp	r4, r0
 800decc:	4606      	mov	r6, r0
 800dece:	d802      	bhi.n	800ded6 <_realloc_r+0x34>
 800ded0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ded4:	d8f4      	bhi.n	800dec0 <_realloc_r+0x1e>
 800ded6:	4621      	mov	r1, r4
 800ded8:	4638      	mov	r0, r7
 800deda:	f7fb ff1f 	bl	8009d1c <_malloc_r>
 800dede:	4680      	mov	r8, r0
 800dee0:	b908      	cbnz	r0, 800dee6 <_realloc_r+0x44>
 800dee2:	4645      	mov	r5, r8
 800dee4:	e7ec      	b.n	800dec0 <_realloc_r+0x1e>
 800dee6:	42b4      	cmp	r4, r6
 800dee8:	4622      	mov	r2, r4
 800deea:	4629      	mov	r1, r5
 800deec:	bf28      	it	cs
 800deee:	4632      	movcs	r2, r6
 800def0:	f7fd f84d 	bl	800af8e <memcpy>
 800def4:	4629      	mov	r1, r5
 800def6:	4638      	mov	r0, r7
 800def8:	f7fd feb6 	bl	800bc68 <_free_r>
 800defc:	e7f1      	b.n	800dee2 <_realloc_r+0x40>

0800defe <__ascii_wctomb>:
 800defe:	4603      	mov	r3, r0
 800df00:	4608      	mov	r0, r1
 800df02:	b141      	cbz	r1, 800df16 <__ascii_wctomb+0x18>
 800df04:	2aff      	cmp	r2, #255	@ 0xff
 800df06:	d904      	bls.n	800df12 <__ascii_wctomb+0x14>
 800df08:	228a      	movs	r2, #138	@ 0x8a
 800df0a:	601a      	str	r2, [r3, #0]
 800df0c:	f04f 30ff 	mov.w	r0, #4294967295
 800df10:	4770      	bx	lr
 800df12:	700a      	strb	r2, [r1, #0]
 800df14:	2001      	movs	r0, #1
 800df16:	4770      	bx	lr

0800df18 <fiprintf>:
 800df18:	b40e      	push	{r1, r2, r3}
 800df1a:	b503      	push	{r0, r1, lr}
 800df1c:	4601      	mov	r1, r0
 800df1e:	ab03      	add	r3, sp, #12
 800df20:	4805      	ldr	r0, [pc, #20]	@ (800df38 <fiprintf+0x20>)
 800df22:	f853 2b04 	ldr.w	r2, [r3], #4
 800df26:	6800      	ldr	r0, [r0, #0]
 800df28:	9301      	str	r3, [sp, #4]
 800df2a:	f000 f83f 	bl	800dfac <_vfiprintf_r>
 800df2e:	b002      	add	sp, #8
 800df30:	f85d eb04 	ldr.w	lr, [sp], #4
 800df34:	b003      	add	sp, #12
 800df36:	4770      	bx	lr
 800df38:	20000088 	.word	0x20000088

0800df3c <abort>:
 800df3c:	b508      	push	{r3, lr}
 800df3e:	2006      	movs	r0, #6
 800df40:	f000 fa08 	bl	800e354 <raise>
 800df44:	2001      	movs	r0, #1
 800df46:	f7f6 f919 	bl	800417c <_exit>

0800df4a <_malloc_usable_size_r>:
 800df4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df4e:	1f18      	subs	r0, r3, #4
 800df50:	2b00      	cmp	r3, #0
 800df52:	bfbc      	itt	lt
 800df54:	580b      	ldrlt	r3, [r1, r0]
 800df56:	18c0      	addlt	r0, r0, r3
 800df58:	4770      	bx	lr

0800df5a <__sfputc_r>:
 800df5a:	6893      	ldr	r3, [r2, #8]
 800df5c:	3b01      	subs	r3, #1
 800df5e:	2b00      	cmp	r3, #0
 800df60:	b410      	push	{r4}
 800df62:	6093      	str	r3, [r2, #8]
 800df64:	da08      	bge.n	800df78 <__sfputc_r+0x1e>
 800df66:	6994      	ldr	r4, [r2, #24]
 800df68:	42a3      	cmp	r3, r4
 800df6a:	db01      	blt.n	800df70 <__sfputc_r+0x16>
 800df6c:	290a      	cmp	r1, #10
 800df6e:	d103      	bne.n	800df78 <__sfputc_r+0x1e>
 800df70:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df74:	f000 b932 	b.w	800e1dc <__swbuf_r>
 800df78:	6813      	ldr	r3, [r2, #0]
 800df7a:	1c58      	adds	r0, r3, #1
 800df7c:	6010      	str	r0, [r2, #0]
 800df7e:	7019      	strb	r1, [r3, #0]
 800df80:	4608      	mov	r0, r1
 800df82:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df86:	4770      	bx	lr

0800df88 <__sfputs_r>:
 800df88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df8a:	4606      	mov	r6, r0
 800df8c:	460f      	mov	r7, r1
 800df8e:	4614      	mov	r4, r2
 800df90:	18d5      	adds	r5, r2, r3
 800df92:	42ac      	cmp	r4, r5
 800df94:	d101      	bne.n	800df9a <__sfputs_r+0x12>
 800df96:	2000      	movs	r0, #0
 800df98:	e007      	b.n	800dfaa <__sfputs_r+0x22>
 800df9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df9e:	463a      	mov	r2, r7
 800dfa0:	4630      	mov	r0, r6
 800dfa2:	f7ff ffda 	bl	800df5a <__sfputc_r>
 800dfa6:	1c43      	adds	r3, r0, #1
 800dfa8:	d1f3      	bne.n	800df92 <__sfputs_r+0xa>
 800dfaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dfac <_vfiprintf_r>:
 800dfac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfb0:	460d      	mov	r5, r1
 800dfb2:	b09d      	sub	sp, #116	@ 0x74
 800dfb4:	4614      	mov	r4, r2
 800dfb6:	4698      	mov	r8, r3
 800dfb8:	4606      	mov	r6, r0
 800dfba:	b118      	cbz	r0, 800dfc4 <_vfiprintf_r+0x18>
 800dfbc:	6a03      	ldr	r3, [r0, #32]
 800dfbe:	b90b      	cbnz	r3, 800dfc4 <_vfiprintf_r+0x18>
 800dfc0:	f7fc fe28 	bl	800ac14 <__sinit>
 800dfc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dfc6:	07d9      	lsls	r1, r3, #31
 800dfc8:	d405      	bmi.n	800dfd6 <_vfiprintf_r+0x2a>
 800dfca:	89ab      	ldrh	r3, [r5, #12]
 800dfcc:	059a      	lsls	r2, r3, #22
 800dfce:	d402      	bmi.n	800dfd6 <_vfiprintf_r+0x2a>
 800dfd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dfd2:	f7fc ffda 	bl	800af8a <__retarget_lock_acquire_recursive>
 800dfd6:	89ab      	ldrh	r3, [r5, #12]
 800dfd8:	071b      	lsls	r3, r3, #28
 800dfda:	d501      	bpl.n	800dfe0 <_vfiprintf_r+0x34>
 800dfdc:	692b      	ldr	r3, [r5, #16]
 800dfde:	b99b      	cbnz	r3, 800e008 <_vfiprintf_r+0x5c>
 800dfe0:	4629      	mov	r1, r5
 800dfe2:	4630      	mov	r0, r6
 800dfe4:	f000 f938 	bl	800e258 <__swsetup_r>
 800dfe8:	b170      	cbz	r0, 800e008 <_vfiprintf_r+0x5c>
 800dfea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dfec:	07dc      	lsls	r4, r3, #31
 800dfee:	d504      	bpl.n	800dffa <_vfiprintf_r+0x4e>
 800dff0:	f04f 30ff 	mov.w	r0, #4294967295
 800dff4:	b01d      	add	sp, #116	@ 0x74
 800dff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dffa:	89ab      	ldrh	r3, [r5, #12]
 800dffc:	0598      	lsls	r0, r3, #22
 800dffe:	d4f7      	bmi.n	800dff0 <_vfiprintf_r+0x44>
 800e000:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e002:	f7fc ffc3 	bl	800af8c <__retarget_lock_release_recursive>
 800e006:	e7f3      	b.n	800dff0 <_vfiprintf_r+0x44>
 800e008:	2300      	movs	r3, #0
 800e00a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e00c:	2320      	movs	r3, #32
 800e00e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e012:	f8cd 800c 	str.w	r8, [sp, #12]
 800e016:	2330      	movs	r3, #48	@ 0x30
 800e018:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e1c8 <_vfiprintf_r+0x21c>
 800e01c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e020:	f04f 0901 	mov.w	r9, #1
 800e024:	4623      	mov	r3, r4
 800e026:	469a      	mov	sl, r3
 800e028:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e02c:	b10a      	cbz	r2, 800e032 <_vfiprintf_r+0x86>
 800e02e:	2a25      	cmp	r2, #37	@ 0x25
 800e030:	d1f9      	bne.n	800e026 <_vfiprintf_r+0x7a>
 800e032:	ebba 0b04 	subs.w	fp, sl, r4
 800e036:	d00b      	beq.n	800e050 <_vfiprintf_r+0xa4>
 800e038:	465b      	mov	r3, fp
 800e03a:	4622      	mov	r2, r4
 800e03c:	4629      	mov	r1, r5
 800e03e:	4630      	mov	r0, r6
 800e040:	f7ff ffa2 	bl	800df88 <__sfputs_r>
 800e044:	3001      	adds	r0, #1
 800e046:	f000 80a7 	beq.w	800e198 <_vfiprintf_r+0x1ec>
 800e04a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e04c:	445a      	add	r2, fp
 800e04e:	9209      	str	r2, [sp, #36]	@ 0x24
 800e050:	f89a 3000 	ldrb.w	r3, [sl]
 800e054:	2b00      	cmp	r3, #0
 800e056:	f000 809f 	beq.w	800e198 <_vfiprintf_r+0x1ec>
 800e05a:	2300      	movs	r3, #0
 800e05c:	f04f 32ff 	mov.w	r2, #4294967295
 800e060:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e064:	f10a 0a01 	add.w	sl, sl, #1
 800e068:	9304      	str	r3, [sp, #16]
 800e06a:	9307      	str	r3, [sp, #28]
 800e06c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e070:	931a      	str	r3, [sp, #104]	@ 0x68
 800e072:	4654      	mov	r4, sl
 800e074:	2205      	movs	r2, #5
 800e076:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e07a:	4853      	ldr	r0, [pc, #332]	@ (800e1c8 <_vfiprintf_r+0x21c>)
 800e07c:	f7f2 f8a8 	bl	80001d0 <memchr>
 800e080:	9a04      	ldr	r2, [sp, #16]
 800e082:	b9d8      	cbnz	r0, 800e0bc <_vfiprintf_r+0x110>
 800e084:	06d1      	lsls	r1, r2, #27
 800e086:	bf44      	itt	mi
 800e088:	2320      	movmi	r3, #32
 800e08a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e08e:	0713      	lsls	r3, r2, #28
 800e090:	bf44      	itt	mi
 800e092:	232b      	movmi	r3, #43	@ 0x2b
 800e094:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e098:	f89a 3000 	ldrb.w	r3, [sl]
 800e09c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e09e:	d015      	beq.n	800e0cc <_vfiprintf_r+0x120>
 800e0a0:	9a07      	ldr	r2, [sp, #28]
 800e0a2:	4654      	mov	r4, sl
 800e0a4:	2000      	movs	r0, #0
 800e0a6:	f04f 0c0a 	mov.w	ip, #10
 800e0aa:	4621      	mov	r1, r4
 800e0ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e0b0:	3b30      	subs	r3, #48	@ 0x30
 800e0b2:	2b09      	cmp	r3, #9
 800e0b4:	d94b      	bls.n	800e14e <_vfiprintf_r+0x1a2>
 800e0b6:	b1b0      	cbz	r0, 800e0e6 <_vfiprintf_r+0x13a>
 800e0b8:	9207      	str	r2, [sp, #28]
 800e0ba:	e014      	b.n	800e0e6 <_vfiprintf_r+0x13a>
 800e0bc:	eba0 0308 	sub.w	r3, r0, r8
 800e0c0:	fa09 f303 	lsl.w	r3, r9, r3
 800e0c4:	4313      	orrs	r3, r2
 800e0c6:	9304      	str	r3, [sp, #16]
 800e0c8:	46a2      	mov	sl, r4
 800e0ca:	e7d2      	b.n	800e072 <_vfiprintf_r+0xc6>
 800e0cc:	9b03      	ldr	r3, [sp, #12]
 800e0ce:	1d19      	adds	r1, r3, #4
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	9103      	str	r1, [sp, #12]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	bfbb      	ittet	lt
 800e0d8:	425b      	neglt	r3, r3
 800e0da:	f042 0202 	orrlt.w	r2, r2, #2
 800e0de:	9307      	strge	r3, [sp, #28]
 800e0e0:	9307      	strlt	r3, [sp, #28]
 800e0e2:	bfb8      	it	lt
 800e0e4:	9204      	strlt	r2, [sp, #16]
 800e0e6:	7823      	ldrb	r3, [r4, #0]
 800e0e8:	2b2e      	cmp	r3, #46	@ 0x2e
 800e0ea:	d10a      	bne.n	800e102 <_vfiprintf_r+0x156>
 800e0ec:	7863      	ldrb	r3, [r4, #1]
 800e0ee:	2b2a      	cmp	r3, #42	@ 0x2a
 800e0f0:	d132      	bne.n	800e158 <_vfiprintf_r+0x1ac>
 800e0f2:	9b03      	ldr	r3, [sp, #12]
 800e0f4:	1d1a      	adds	r2, r3, #4
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	9203      	str	r2, [sp, #12]
 800e0fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e0fe:	3402      	adds	r4, #2
 800e100:	9305      	str	r3, [sp, #20]
 800e102:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e1d8 <_vfiprintf_r+0x22c>
 800e106:	7821      	ldrb	r1, [r4, #0]
 800e108:	2203      	movs	r2, #3
 800e10a:	4650      	mov	r0, sl
 800e10c:	f7f2 f860 	bl	80001d0 <memchr>
 800e110:	b138      	cbz	r0, 800e122 <_vfiprintf_r+0x176>
 800e112:	9b04      	ldr	r3, [sp, #16]
 800e114:	eba0 000a 	sub.w	r0, r0, sl
 800e118:	2240      	movs	r2, #64	@ 0x40
 800e11a:	4082      	lsls	r2, r0
 800e11c:	4313      	orrs	r3, r2
 800e11e:	3401      	adds	r4, #1
 800e120:	9304      	str	r3, [sp, #16]
 800e122:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e126:	4829      	ldr	r0, [pc, #164]	@ (800e1cc <_vfiprintf_r+0x220>)
 800e128:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e12c:	2206      	movs	r2, #6
 800e12e:	f7f2 f84f 	bl	80001d0 <memchr>
 800e132:	2800      	cmp	r0, #0
 800e134:	d03f      	beq.n	800e1b6 <_vfiprintf_r+0x20a>
 800e136:	4b26      	ldr	r3, [pc, #152]	@ (800e1d0 <_vfiprintf_r+0x224>)
 800e138:	bb1b      	cbnz	r3, 800e182 <_vfiprintf_r+0x1d6>
 800e13a:	9b03      	ldr	r3, [sp, #12]
 800e13c:	3307      	adds	r3, #7
 800e13e:	f023 0307 	bic.w	r3, r3, #7
 800e142:	3308      	adds	r3, #8
 800e144:	9303      	str	r3, [sp, #12]
 800e146:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e148:	443b      	add	r3, r7
 800e14a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e14c:	e76a      	b.n	800e024 <_vfiprintf_r+0x78>
 800e14e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e152:	460c      	mov	r4, r1
 800e154:	2001      	movs	r0, #1
 800e156:	e7a8      	b.n	800e0aa <_vfiprintf_r+0xfe>
 800e158:	2300      	movs	r3, #0
 800e15a:	3401      	adds	r4, #1
 800e15c:	9305      	str	r3, [sp, #20]
 800e15e:	4619      	mov	r1, r3
 800e160:	f04f 0c0a 	mov.w	ip, #10
 800e164:	4620      	mov	r0, r4
 800e166:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e16a:	3a30      	subs	r2, #48	@ 0x30
 800e16c:	2a09      	cmp	r2, #9
 800e16e:	d903      	bls.n	800e178 <_vfiprintf_r+0x1cc>
 800e170:	2b00      	cmp	r3, #0
 800e172:	d0c6      	beq.n	800e102 <_vfiprintf_r+0x156>
 800e174:	9105      	str	r1, [sp, #20]
 800e176:	e7c4      	b.n	800e102 <_vfiprintf_r+0x156>
 800e178:	fb0c 2101 	mla	r1, ip, r1, r2
 800e17c:	4604      	mov	r4, r0
 800e17e:	2301      	movs	r3, #1
 800e180:	e7f0      	b.n	800e164 <_vfiprintf_r+0x1b8>
 800e182:	ab03      	add	r3, sp, #12
 800e184:	9300      	str	r3, [sp, #0]
 800e186:	462a      	mov	r2, r5
 800e188:	4b12      	ldr	r3, [pc, #72]	@ (800e1d4 <_vfiprintf_r+0x228>)
 800e18a:	a904      	add	r1, sp, #16
 800e18c:	4630      	mov	r0, r6
 800e18e:	f7fb fef1 	bl	8009f74 <_printf_float>
 800e192:	4607      	mov	r7, r0
 800e194:	1c78      	adds	r0, r7, #1
 800e196:	d1d6      	bne.n	800e146 <_vfiprintf_r+0x19a>
 800e198:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e19a:	07d9      	lsls	r1, r3, #31
 800e19c:	d405      	bmi.n	800e1aa <_vfiprintf_r+0x1fe>
 800e19e:	89ab      	ldrh	r3, [r5, #12]
 800e1a0:	059a      	lsls	r2, r3, #22
 800e1a2:	d402      	bmi.n	800e1aa <_vfiprintf_r+0x1fe>
 800e1a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e1a6:	f7fc fef1 	bl	800af8c <__retarget_lock_release_recursive>
 800e1aa:	89ab      	ldrh	r3, [r5, #12]
 800e1ac:	065b      	lsls	r3, r3, #25
 800e1ae:	f53f af1f 	bmi.w	800dff0 <_vfiprintf_r+0x44>
 800e1b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e1b4:	e71e      	b.n	800dff4 <_vfiprintf_r+0x48>
 800e1b6:	ab03      	add	r3, sp, #12
 800e1b8:	9300      	str	r3, [sp, #0]
 800e1ba:	462a      	mov	r2, r5
 800e1bc:	4b05      	ldr	r3, [pc, #20]	@ (800e1d4 <_vfiprintf_r+0x228>)
 800e1be:	a904      	add	r1, sp, #16
 800e1c0:	4630      	mov	r0, r6
 800e1c2:	f7fc f96f 	bl	800a4a4 <_printf_i>
 800e1c6:	e7e4      	b.n	800e192 <_vfiprintf_r+0x1e6>
 800e1c8:	0800ec6d 	.word	0x0800ec6d
 800e1cc:	0800ec77 	.word	0x0800ec77
 800e1d0:	08009f75 	.word	0x08009f75
 800e1d4:	0800df89 	.word	0x0800df89
 800e1d8:	0800ec73 	.word	0x0800ec73

0800e1dc <__swbuf_r>:
 800e1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1de:	460e      	mov	r6, r1
 800e1e0:	4614      	mov	r4, r2
 800e1e2:	4605      	mov	r5, r0
 800e1e4:	b118      	cbz	r0, 800e1ee <__swbuf_r+0x12>
 800e1e6:	6a03      	ldr	r3, [r0, #32]
 800e1e8:	b90b      	cbnz	r3, 800e1ee <__swbuf_r+0x12>
 800e1ea:	f7fc fd13 	bl	800ac14 <__sinit>
 800e1ee:	69a3      	ldr	r3, [r4, #24]
 800e1f0:	60a3      	str	r3, [r4, #8]
 800e1f2:	89a3      	ldrh	r3, [r4, #12]
 800e1f4:	071a      	lsls	r2, r3, #28
 800e1f6:	d501      	bpl.n	800e1fc <__swbuf_r+0x20>
 800e1f8:	6923      	ldr	r3, [r4, #16]
 800e1fa:	b943      	cbnz	r3, 800e20e <__swbuf_r+0x32>
 800e1fc:	4621      	mov	r1, r4
 800e1fe:	4628      	mov	r0, r5
 800e200:	f000 f82a 	bl	800e258 <__swsetup_r>
 800e204:	b118      	cbz	r0, 800e20e <__swbuf_r+0x32>
 800e206:	f04f 37ff 	mov.w	r7, #4294967295
 800e20a:	4638      	mov	r0, r7
 800e20c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e20e:	6823      	ldr	r3, [r4, #0]
 800e210:	6922      	ldr	r2, [r4, #16]
 800e212:	1a98      	subs	r0, r3, r2
 800e214:	6963      	ldr	r3, [r4, #20]
 800e216:	b2f6      	uxtb	r6, r6
 800e218:	4283      	cmp	r3, r0
 800e21a:	4637      	mov	r7, r6
 800e21c:	dc05      	bgt.n	800e22a <__swbuf_r+0x4e>
 800e21e:	4621      	mov	r1, r4
 800e220:	4628      	mov	r0, r5
 800e222:	f7ff fa77 	bl	800d714 <_fflush_r>
 800e226:	2800      	cmp	r0, #0
 800e228:	d1ed      	bne.n	800e206 <__swbuf_r+0x2a>
 800e22a:	68a3      	ldr	r3, [r4, #8]
 800e22c:	3b01      	subs	r3, #1
 800e22e:	60a3      	str	r3, [r4, #8]
 800e230:	6823      	ldr	r3, [r4, #0]
 800e232:	1c5a      	adds	r2, r3, #1
 800e234:	6022      	str	r2, [r4, #0]
 800e236:	701e      	strb	r6, [r3, #0]
 800e238:	6962      	ldr	r2, [r4, #20]
 800e23a:	1c43      	adds	r3, r0, #1
 800e23c:	429a      	cmp	r2, r3
 800e23e:	d004      	beq.n	800e24a <__swbuf_r+0x6e>
 800e240:	89a3      	ldrh	r3, [r4, #12]
 800e242:	07db      	lsls	r3, r3, #31
 800e244:	d5e1      	bpl.n	800e20a <__swbuf_r+0x2e>
 800e246:	2e0a      	cmp	r6, #10
 800e248:	d1df      	bne.n	800e20a <__swbuf_r+0x2e>
 800e24a:	4621      	mov	r1, r4
 800e24c:	4628      	mov	r0, r5
 800e24e:	f7ff fa61 	bl	800d714 <_fflush_r>
 800e252:	2800      	cmp	r0, #0
 800e254:	d0d9      	beq.n	800e20a <__swbuf_r+0x2e>
 800e256:	e7d6      	b.n	800e206 <__swbuf_r+0x2a>

0800e258 <__swsetup_r>:
 800e258:	b538      	push	{r3, r4, r5, lr}
 800e25a:	4b29      	ldr	r3, [pc, #164]	@ (800e300 <__swsetup_r+0xa8>)
 800e25c:	4605      	mov	r5, r0
 800e25e:	6818      	ldr	r0, [r3, #0]
 800e260:	460c      	mov	r4, r1
 800e262:	b118      	cbz	r0, 800e26c <__swsetup_r+0x14>
 800e264:	6a03      	ldr	r3, [r0, #32]
 800e266:	b90b      	cbnz	r3, 800e26c <__swsetup_r+0x14>
 800e268:	f7fc fcd4 	bl	800ac14 <__sinit>
 800e26c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e270:	0719      	lsls	r1, r3, #28
 800e272:	d422      	bmi.n	800e2ba <__swsetup_r+0x62>
 800e274:	06da      	lsls	r2, r3, #27
 800e276:	d407      	bmi.n	800e288 <__swsetup_r+0x30>
 800e278:	2209      	movs	r2, #9
 800e27a:	602a      	str	r2, [r5, #0]
 800e27c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e280:	81a3      	strh	r3, [r4, #12]
 800e282:	f04f 30ff 	mov.w	r0, #4294967295
 800e286:	e033      	b.n	800e2f0 <__swsetup_r+0x98>
 800e288:	0758      	lsls	r0, r3, #29
 800e28a:	d512      	bpl.n	800e2b2 <__swsetup_r+0x5a>
 800e28c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e28e:	b141      	cbz	r1, 800e2a2 <__swsetup_r+0x4a>
 800e290:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e294:	4299      	cmp	r1, r3
 800e296:	d002      	beq.n	800e29e <__swsetup_r+0x46>
 800e298:	4628      	mov	r0, r5
 800e29a:	f7fd fce5 	bl	800bc68 <_free_r>
 800e29e:	2300      	movs	r3, #0
 800e2a0:	6363      	str	r3, [r4, #52]	@ 0x34
 800e2a2:	89a3      	ldrh	r3, [r4, #12]
 800e2a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e2a8:	81a3      	strh	r3, [r4, #12]
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	6063      	str	r3, [r4, #4]
 800e2ae:	6923      	ldr	r3, [r4, #16]
 800e2b0:	6023      	str	r3, [r4, #0]
 800e2b2:	89a3      	ldrh	r3, [r4, #12]
 800e2b4:	f043 0308 	orr.w	r3, r3, #8
 800e2b8:	81a3      	strh	r3, [r4, #12]
 800e2ba:	6923      	ldr	r3, [r4, #16]
 800e2bc:	b94b      	cbnz	r3, 800e2d2 <__swsetup_r+0x7a>
 800e2be:	89a3      	ldrh	r3, [r4, #12]
 800e2c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e2c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e2c8:	d003      	beq.n	800e2d2 <__swsetup_r+0x7a>
 800e2ca:	4621      	mov	r1, r4
 800e2cc:	4628      	mov	r0, r5
 800e2ce:	f000 f883 	bl	800e3d8 <__smakebuf_r>
 800e2d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2d6:	f013 0201 	ands.w	r2, r3, #1
 800e2da:	d00a      	beq.n	800e2f2 <__swsetup_r+0x9a>
 800e2dc:	2200      	movs	r2, #0
 800e2de:	60a2      	str	r2, [r4, #8]
 800e2e0:	6962      	ldr	r2, [r4, #20]
 800e2e2:	4252      	negs	r2, r2
 800e2e4:	61a2      	str	r2, [r4, #24]
 800e2e6:	6922      	ldr	r2, [r4, #16]
 800e2e8:	b942      	cbnz	r2, 800e2fc <__swsetup_r+0xa4>
 800e2ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e2ee:	d1c5      	bne.n	800e27c <__swsetup_r+0x24>
 800e2f0:	bd38      	pop	{r3, r4, r5, pc}
 800e2f2:	0799      	lsls	r1, r3, #30
 800e2f4:	bf58      	it	pl
 800e2f6:	6962      	ldrpl	r2, [r4, #20]
 800e2f8:	60a2      	str	r2, [r4, #8]
 800e2fa:	e7f4      	b.n	800e2e6 <__swsetup_r+0x8e>
 800e2fc:	2000      	movs	r0, #0
 800e2fe:	e7f7      	b.n	800e2f0 <__swsetup_r+0x98>
 800e300:	20000088 	.word	0x20000088

0800e304 <_raise_r>:
 800e304:	291f      	cmp	r1, #31
 800e306:	b538      	push	{r3, r4, r5, lr}
 800e308:	4605      	mov	r5, r0
 800e30a:	460c      	mov	r4, r1
 800e30c:	d904      	bls.n	800e318 <_raise_r+0x14>
 800e30e:	2316      	movs	r3, #22
 800e310:	6003      	str	r3, [r0, #0]
 800e312:	f04f 30ff 	mov.w	r0, #4294967295
 800e316:	bd38      	pop	{r3, r4, r5, pc}
 800e318:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e31a:	b112      	cbz	r2, 800e322 <_raise_r+0x1e>
 800e31c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e320:	b94b      	cbnz	r3, 800e336 <_raise_r+0x32>
 800e322:	4628      	mov	r0, r5
 800e324:	f000 f830 	bl	800e388 <_getpid_r>
 800e328:	4622      	mov	r2, r4
 800e32a:	4601      	mov	r1, r0
 800e32c:	4628      	mov	r0, r5
 800e32e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e332:	f000 b817 	b.w	800e364 <_kill_r>
 800e336:	2b01      	cmp	r3, #1
 800e338:	d00a      	beq.n	800e350 <_raise_r+0x4c>
 800e33a:	1c59      	adds	r1, r3, #1
 800e33c:	d103      	bne.n	800e346 <_raise_r+0x42>
 800e33e:	2316      	movs	r3, #22
 800e340:	6003      	str	r3, [r0, #0]
 800e342:	2001      	movs	r0, #1
 800e344:	e7e7      	b.n	800e316 <_raise_r+0x12>
 800e346:	2100      	movs	r1, #0
 800e348:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e34c:	4620      	mov	r0, r4
 800e34e:	4798      	blx	r3
 800e350:	2000      	movs	r0, #0
 800e352:	e7e0      	b.n	800e316 <_raise_r+0x12>

0800e354 <raise>:
 800e354:	4b02      	ldr	r3, [pc, #8]	@ (800e360 <raise+0xc>)
 800e356:	4601      	mov	r1, r0
 800e358:	6818      	ldr	r0, [r3, #0]
 800e35a:	f7ff bfd3 	b.w	800e304 <_raise_r>
 800e35e:	bf00      	nop
 800e360:	20000088 	.word	0x20000088

0800e364 <_kill_r>:
 800e364:	b538      	push	{r3, r4, r5, lr}
 800e366:	4d07      	ldr	r5, [pc, #28]	@ (800e384 <_kill_r+0x20>)
 800e368:	2300      	movs	r3, #0
 800e36a:	4604      	mov	r4, r0
 800e36c:	4608      	mov	r0, r1
 800e36e:	4611      	mov	r1, r2
 800e370:	602b      	str	r3, [r5, #0]
 800e372:	f7f5 fef3 	bl	800415c <_kill>
 800e376:	1c43      	adds	r3, r0, #1
 800e378:	d102      	bne.n	800e380 <_kill_r+0x1c>
 800e37a:	682b      	ldr	r3, [r5, #0]
 800e37c:	b103      	cbz	r3, 800e380 <_kill_r+0x1c>
 800e37e:	6023      	str	r3, [r4, #0]
 800e380:	bd38      	pop	{r3, r4, r5, pc}
 800e382:	bf00      	nop
 800e384:	2000dfb4 	.word	0x2000dfb4

0800e388 <_getpid_r>:
 800e388:	f7f5 bee0 	b.w	800414c <_getpid>

0800e38c <__swhatbuf_r>:
 800e38c:	b570      	push	{r4, r5, r6, lr}
 800e38e:	460c      	mov	r4, r1
 800e390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e394:	2900      	cmp	r1, #0
 800e396:	b096      	sub	sp, #88	@ 0x58
 800e398:	4615      	mov	r5, r2
 800e39a:	461e      	mov	r6, r3
 800e39c:	da0d      	bge.n	800e3ba <__swhatbuf_r+0x2e>
 800e39e:	89a3      	ldrh	r3, [r4, #12]
 800e3a0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e3a4:	f04f 0100 	mov.w	r1, #0
 800e3a8:	bf14      	ite	ne
 800e3aa:	2340      	movne	r3, #64	@ 0x40
 800e3ac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e3b0:	2000      	movs	r0, #0
 800e3b2:	6031      	str	r1, [r6, #0]
 800e3b4:	602b      	str	r3, [r5, #0]
 800e3b6:	b016      	add	sp, #88	@ 0x58
 800e3b8:	bd70      	pop	{r4, r5, r6, pc}
 800e3ba:	466a      	mov	r2, sp
 800e3bc:	f000 f848 	bl	800e450 <_fstat_r>
 800e3c0:	2800      	cmp	r0, #0
 800e3c2:	dbec      	blt.n	800e39e <__swhatbuf_r+0x12>
 800e3c4:	9901      	ldr	r1, [sp, #4]
 800e3c6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e3ca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e3ce:	4259      	negs	r1, r3
 800e3d0:	4159      	adcs	r1, r3
 800e3d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e3d6:	e7eb      	b.n	800e3b0 <__swhatbuf_r+0x24>

0800e3d8 <__smakebuf_r>:
 800e3d8:	898b      	ldrh	r3, [r1, #12]
 800e3da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e3dc:	079d      	lsls	r5, r3, #30
 800e3de:	4606      	mov	r6, r0
 800e3e0:	460c      	mov	r4, r1
 800e3e2:	d507      	bpl.n	800e3f4 <__smakebuf_r+0x1c>
 800e3e4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e3e8:	6023      	str	r3, [r4, #0]
 800e3ea:	6123      	str	r3, [r4, #16]
 800e3ec:	2301      	movs	r3, #1
 800e3ee:	6163      	str	r3, [r4, #20]
 800e3f0:	b003      	add	sp, #12
 800e3f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3f4:	ab01      	add	r3, sp, #4
 800e3f6:	466a      	mov	r2, sp
 800e3f8:	f7ff ffc8 	bl	800e38c <__swhatbuf_r>
 800e3fc:	9f00      	ldr	r7, [sp, #0]
 800e3fe:	4605      	mov	r5, r0
 800e400:	4639      	mov	r1, r7
 800e402:	4630      	mov	r0, r6
 800e404:	f7fb fc8a 	bl	8009d1c <_malloc_r>
 800e408:	b948      	cbnz	r0, 800e41e <__smakebuf_r+0x46>
 800e40a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e40e:	059a      	lsls	r2, r3, #22
 800e410:	d4ee      	bmi.n	800e3f0 <__smakebuf_r+0x18>
 800e412:	f023 0303 	bic.w	r3, r3, #3
 800e416:	f043 0302 	orr.w	r3, r3, #2
 800e41a:	81a3      	strh	r3, [r4, #12]
 800e41c:	e7e2      	b.n	800e3e4 <__smakebuf_r+0xc>
 800e41e:	89a3      	ldrh	r3, [r4, #12]
 800e420:	6020      	str	r0, [r4, #0]
 800e422:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e426:	81a3      	strh	r3, [r4, #12]
 800e428:	9b01      	ldr	r3, [sp, #4]
 800e42a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e42e:	b15b      	cbz	r3, 800e448 <__smakebuf_r+0x70>
 800e430:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e434:	4630      	mov	r0, r6
 800e436:	f000 f81d 	bl	800e474 <_isatty_r>
 800e43a:	b128      	cbz	r0, 800e448 <__smakebuf_r+0x70>
 800e43c:	89a3      	ldrh	r3, [r4, #12]
 800e43e:	f023 0303 	bic.w	r3, r3, #3
 800e442:	f043 0301 	orr.w	r3, r3, #1
 800e446:	81a3      	strh	r3, [r4, #12]
 800e448:	89a3      	ldrh	r3, [r4, #12]
 800e44a:	431d      	orrs	r5, r3
 800e44c:	81a5      	strh	r5, [r4, #12]
 800e44e:	e7cf      	b.n	800e3f0 <__smakebuf_r+0x18>

0800e450 <_fstat_r>:
 800e450:	b538      	push	{r3, r4, r5, lr}
 800e452:	4d07      	ldr	r5, [pc, #28]	@ (800e470 <_fstat_r+0x20>)
 800e454:	2300      	movs	r3, #0
 800e456:	4604      	mov	r4, r0
 800e458:	4608      	mov	r0, r1
 800e45a:	4611      	mov	r1, r2
 800e45c:	602b      	str	r3, [r5, #0]
 800e45e:	f7f5 fedd 	bl	800421c <_fstat>
 800e462:	1c43      	adds	r3, r0, #1
 800e464:	d102      	bne.n	800e46c <_fstat_r+0x1c>
 800e466:	682b      	ldr	r3, [r5, #0]
 800e468:	b103      	cbz	r3, 800e46c <_fstat_r+0x1c>
 800e46a:	6023      	str	r3, [r4, #0]
 800e46c:	bd38      	pop	{r3, r4, r5, pc}
 800e46e:	bf00      	nop
 800e470:	2000dfb4 	.word	0x2000dfb4

0800e474 <_isatty_r>:
 800e474:	b538      	push	{r3, r4, r5, lr}
 800e476:	4d06      	ldr	r5, [pc, #24]	@ (800e490 <_isatty_r+0x1c>)
 800e478:	2300      	movs	r3, #0
 800e47a:	4604      	mov	r4, r0
 800e47c:	4608      	mov	r0, r1
 800e47e:	602b      	str	r3, [r5, #0]
 800e480:	f7f5 fedc 	bl	800423c <_isatty>
 800e484:	1c43      	adds	r3, r0, #1
 800e486:	d102      	bne.n	800e48e <_isatty_r+0x1a>
 800e488:	682b      	ldr	r3, [r5, #0]
 800e48a:	b103      	cbz	r3, 800e48e <_isatty_r+0x1a>
 800e48c:	6023      	str	r3, [r4, #0]
 800e48e:	bd38      	pop	{r3, r4, r5, pc}
 800e490:	2000dfb4 	.word	0x2000dfb4

0800e494 <_init>:
 800e494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e496:	bf00      	nop
 800e498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e49a:	bc08      	pop	{r3}
 800e49c:	469e      	mov	lr, r3
 800e49e:	4770      	bx	lr

0800e4a0 <_fini>:
 800e4a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4a2:	bf00      	nop
 800e4a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4a6:	bc08      	pop	{r3}
 800e4a8:	469e      	mov	lr, r3
 800e4aa:	4770      	bx	lr
