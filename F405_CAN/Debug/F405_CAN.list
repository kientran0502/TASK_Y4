
F405_CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e2cc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ac4  0800e460  0800e460  0000f460  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ef24  0800ef24  0001024c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ef24  0800ef24  0000ff24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ef2c  0800ef2c  0001024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ef2c  0800ef2c  0000ff2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ef30  0800ef30  0000ff30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000024c  20000000  0800ef34  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001024c  2**0
                  CONTENTS
 10 .bss          0000dd78  2000024c  2000024c  0001024c  2**2
                  ALLOC
 11 .noinit       00001e94  2000dfc4  2000dfc4  0001024c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  2000fe58  2000fe58  0001024c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0001024c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001e13f  00000000  00000000  0001027c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000061a7  00000000  00000000  0002e3bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000018a0  00000000  00000000  00034568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000121e  00000000  00000000  00035e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000a4ba  00000000  00000000  00037026  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00020c57  00000000  00000000  000414e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d4a36  00000000  00000000  00062137  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00136b6d  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000074f0  00000000  00000000  00136bb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000042  00000000  00000000  0013e0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000024c 	.word	0x2000024c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e444 	.word	0x0800e444

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000250 	.word	0x20000250
 80001cc:	0800e444 	.word	0x0800e444

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <csp_clock_get_time>:

#include <csp/csp_types.h>
#include <csp/csp_hooks.h>

__attribute__((weak)) void csp_clock_get_time(csp_timestamp_t * time) {
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	time->tv_sec = 0;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
	time->tv_nsec = 0;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2200      	movs	r2, #0
 8001032:	605a      	str	r2, [r3, #4]
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <csp_clock_set_time>:

__attribute__((weak)) int csp_clock_set_time(const csp_timestamp_t * time) {
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	return CSP_ERR_NOTSUP;
 8001048:	f06f 0304 	mvn.w	r3, #4
}
 800104c:	4618      	mov	r0, r3
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <csp_queue_create_static>:
#include <csp/csp.h>

#include <FreeRTOS.h>
#include <queue.h>

csp_queue_handle_t csp_queue_create_static(int length, size_t item_size, char * buffer, csp_static_queue_t * queue) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af02      	add	r7, sp, #8
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
 8001064:	603b      	str	r3, [r7, #0]
	return xQueueCreateStatic(length, item_size, (uint8_t *)buffer, queue);
 8001066:	68f8      	ldr	r0, [r7, #12]
 8001068:	2300      	movs	r3, #0
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	68b9      	ldr	r1, [r7, #8]
 8001072:	f005 fe7f 	bl	8006d74 <xQueueGenericCreateStatic>
 8001076:	4603      	mov	r3, r0
}
 8001078:	4618      	mov	r0, r3
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <csp_queue_enqueue>:

int csp_queue_enqueue(csp_queue_handle_t handle, const void * value, uint32_t timeout) {
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
	if (timeout != CSP_MAX_TIMEOUT)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f1b3 3fff 	cmp.w	r3, #4294967295
		timeout = timeout / portTICK_PERIOD_MS;
	if (xQueueSendToBack(handle, value, timeout) == pdPASS) {
 8001092:	2300      	movs	r3, #0
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	68b9      	ldr	r1, [r7, #8]
 8001098:	68f8      	ldr	r0, [r7, #12]
 800109a:	f005 ff0b 	bl	8006eb4 <xQueueGenericSend>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d101      	bne.n	80010a8 <csp_queue_enqueue+0x28>
		return CSP_QUEUE_OK;
 80010a4:	2300      	movs	r3, #0
 80010a6:	e001      	b.n	80010ac <csp_queue_enqueue+0x2c>
	}
	return CSP_QUEUE_ERROR;
 80010a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <csp_queue_enqueue_isr>:

int csp_queue_enqueue_isr(csp_queue_handle_t handle, const void * value, int * task_woken) {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
	if (xQueueSendToBackFromISR(handle, value, (portBASE_TYPE *)task_woken) == pdPASS) {
 80010c0:	2300      	movs	r3, #0
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	68b9      	ldr	r1, [r7, #8]
 80010c6:	68f8      	ldr	r0, [r7, #12]
 80010c8:	f005 fff6 	bl	80070b8 <xQueueGenericSendFromISR>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d101      	bne.n	80010d6 <csp_queue_enqueue_isr+0x22>
		return CSP_QUEUE_OK;
 80010d2:	2300      	movs	r3, #0
 80010d4:	e001      	b.n	80010da <csp_queue_enqueue_isr+0x26>
	}
	return CSP_QUEUE_ERROR;
 80010d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <csp_queue_dequeue>:

int csp_queue_dequeue(csp_queue_handle_t handle, void * buf, uint32_t timeout) {
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b084      	sub	sp, #16
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	60f8      	str	r0, [r7, #12]
 80010ea:	60b9      	str	r1, [r7, #8]
 80010ec:	607a      	str	r2, [r7, #4]
	if (timeout != CSP_MAX_TIMEOUT)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f1b3 3fff 	cmp.w	r3, #4294967295
		timeout = timeout / portTICK_PERIOD_MS;
	if (xQueueReceive(handle, buf, timeout) == pdPASS) {
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	68b9      	ldr	r1, [r7, #8]
 80010f8:	68f8      	ldr	r0, [r7, #12]
 80010fa:	f006 f87b 	bl	80071f4 <xQueueReceive>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b01      	cmp	r3, #1
 8001102:	d101      	bne.n	8001108 <csp_queue_dequeue+0x26>
		return CSP_QUEUE_OK;
 8001104:	2300      	movs	r3, #0
 8001106:	e001      	b.n	800110c <csp_queue_dequeue+0x2a>
	}
	return CSP_QUEUE_ERROR;
 8001108:	f04f 33ff 	mov.w	r3, #4294967295
}
 800110c:	4618      	mov	r0, r3
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <csp_queue_size>:
		return CSP_QUEUE_OK;
	}
	return CSP_QUEUE_ERROR;
}

int csp_queue_size(csp_queue_handle_t handle) {
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	return uxQueueMessagesWaiting(handle);
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f006 f94b 	bl	80073b8 <uxQueueMessagesWaiting>
 8001122:	4603      	mov	r3, r0
}
 8001124:	4618      	mov	r0, r3
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <csp_memfree_hook>:
#include <csp/csp_hooks.h>

#include <FreeRTOS.h>
#include <task.h>

__attribute__((weak)) uint32_t csp_memfree_hook(void) {
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
	return (uint32_t)xPortGetFreeHeapSize();
 8001130:	f008 f90e 	bl	8009350 <xPortGetFreeHeapSize>
 8001134:	4603      	mov	r3, r0
#else
	return 0;
#endif
}
 8001136:	4618      	mov	r0, r3
 8001138:	bd80      	pop	{r7, pc}

0800113a <csp_ps_hook>:

__attribute__((weak)) unsigned int csp_ps_hook(csp_packet_t * packet) {
 800113a:	b480      	push	{r7}
 800113c:	b083      	sub	sp, #12
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
	return 0;
 8001142:	2300      	movs	r3, #0
 8001144:	4618      	mov	r0, r3
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <csp_get_ms>:
#include <csp/arch/csp_time.h>

#include <FreeRTOS.h>
#include <task.h>  // FreeRTOS

uint32_t csp_get_ms(void) {
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
	return (uint32_t)(xTaskGetTickCount() * (1000 / configTICK_RATE_HZ));
 8001154:	f006 fdce 	bl	8007cf4 <xTaskGetTickCount>
 8001158:	4603      	mov	r3, r0
}
 800115a:	4618      	mov	r0, r3
 800115c:	bd80      	pop	{r7, pc}
	...

08001160 <csp_get_s>:

uint32_t csp_get_ms_isr(void) {
	return (uint32_t)(xTaskGetTickCountFromISR() * (1000 / configTICK_RATE_HZ));
}

uint32_t csp_get_s(void) {
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
	return (uint32_t)(xTaskGetTickCount() / configTICK_RATE_HZ);
 8001164:	f006 fdc6 	bl	8007cf4 <xTaskGetTickCount>
 8001168:	4603      	mov	r3, r0
 800116a:	4a03      	ldr	r2, [pc, #12]	@ (8001178 <csp_get_s+0x18>)
 800116c:	fba2 2303 	umull	r2, r3, r2, r3
 8001170:	099b      	lsrs	r3, r3, #6
}
 8001172:	4618      	mov	r0, r3
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	10624dd3 	.word	0x10624dd3

0800117c <csp_input_hook>:

	bif_a = if_a;
	bif_b = if_b;
}

__attribute__((weak)) void csp_input_hook(csp_iface_t * iface, csp_packet_t * packet) {
 800117c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800117e:	b089      	sub	sp, #36	@ 0x24
 8001180:	af06      	add	r7, sp, #24
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
	csp_print_packet("INP: S %u, D %u, Dp %u, Sp %u, Pr %u, Fl 0x%02X, Sz %" PRIu16 " VIA: %s\n",
 8001186:	4b15      	ldr	r3, [pc, #84]	@ (80011dc <csp_input_hook+0x60>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d021      	beq.n	80011d2 <csp_input_hook+0x56>
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	8b1b      	ldrh	r3, [r3, #24]
 8001192:	461d      	mov	r5, r3
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	8b5b      	ldrh	r3, [r3, #26]
 8001198:	461e      	mov	r6, r3
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	7f1b      	ldrb	r3, [r3, #28]
 800119e:	469c      	mov	ip, r3
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	7f5b      	ldrb	r3, [r3, #29]
 80011a4:	461a      	mov	r2, r3
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	7d9b      	ldrb	r3, [r3, #22]
 80011aa:	4619      	mov	r1, r3
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	7ddb      	ldrb	r3, [r3, #23]
 80011b0:	4618      	mov	r0, r3
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	8a9b      	ldrh	r3, [r3, #20]
 80011b6:	461c      	mov	r4, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	9304      	str	r3, [sp, #16]
 80011be:	9403      	str	r4, [sp, #12]
 80011c0:	9002      	str	r0, [sp, #8]
 80011c2:	9101      	str	r1, [sp, #4]
 80011c4:	9200      	str	r2, [sp, #0]
 80011c6:	4663      	mov	r3, ip
 80011c8:	4632      	mov	r2, r6
 80011ca:	4629      	mov	r1, r5
 80011cc:	4804      	ldr	r0, [pc, #16]	@ (80011e0 <csp_input_hook+0x64>)
 80011ce:	f000 fc55 	bl	8001a7c <csp_print_func>
				   packet->id.src, packet->id.dst, packet->id.dport,
				   packet->id.sport, packet->id.pri, packet->id.flags, packet->length, iface->name);
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000273 	.word	0x20000273
 80011e0:	0800e460 	.word	0x0800e460

080011e4 <csp_buffer_init>:
#define SKBUF_SIZE CSP_BUFFER_ALIGN *((sizeof(csp_skbf_t) + CSP_BUFFER_SIZE + CSP_BUFFER_PACKET_OVERHEAD + (CSP_BUFFER_ALIGN - 1)) / CSP_BUFFER_ALIGN)

// Queue of free CSP buffers
static csp_queue_handle_t csp_buffers;

void csp_buffer_init(void) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
	 * Putting this section in a separate non .bss area, saves some boot time */
	static char csp_buffer_pool[SKBUF_SIZE * CSP_BUFFER_COUNT] __attribute__((section(".noinit"))); // không được khởi tạo lại về 0 khi MCU reset mềm khi đặt nó vào section 
	static csp_static_queue_t csp_buffers_queue __attribute__((section(".noinit")));
	static char csp_buffer_queue_data[CSP_BUFFER_COUNT * sizeof(csp_skbf_t *)] __attribute__((section(".noinit")));

	csp_buffers = csp_queue_create_static(CSP_BUFFER_COUNT, sizeof(csp_skbf_t *), csp_buffer_queue_data, &csp_buffers_queue);
 80011ea:	4b14      	ldr	r3, [pc, #80]	@ (800123c <csp_buffer_init+0x58>)
 80011ec:	4a14      	ldr	r2, [pc, #80]	@ (8001240 <csp_buffer_init+0x5c>)
 80011ee:	2104      	movs	r1, #4
 80011f0:	2014      	movs	r0, #20
 80011f2:	f7ff ff31 	bl	8001058 <csp_queue_create_static>
 80011f6:	4603      	mov	r3, r0
 80011f8:	4a12      	ldr	r2, [pc, #72]	@ (8001244 <csp_buffer_init+0x60>)
 80011fa:	6013      	str	r3, [r2, #0]

	for (unsigned int i = 0; i < CSP_BUFFER_COUNT; i++) {
 80011fc:	2300      	movs	r3, #0
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	e014      	b.n	800122c <csp_buffer_init+0x48>
		csp_skbf_t * buf = (void *)&csp_buffer_pool[i * SKBUF_SIZE];
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8001208:	fb02 f303 	mul.w	r3, r2, r3
 800120c:	4a0e      	ldr	r2, [pc, #56]	@ (8001248 <csp_buffer_init+0x64>)
 800120e:	4413      	add	r3, r2
 8001210:	603b      	str	r3, [r7, #0]
		buf->skbf_addr = buf;
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	683a      	ldr	r2, [r7, #0]
 8001216:	605a      	str	r2, [r3, #4]
		csp_queue_enqueue(csp_buffers, &buf, 0);
 8001218:	4b0a      	ldr	r3, [pc, #40]	@ (8001244 <csp_buffer_init+0x60>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4639      	mov	r1, r7
 800121e:	2200      	movs	r2, #0
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff ff2d 	bl	8001080 <csp_queue_enqueue>
	for (unsigned int i = 0; i < CSP_BUFFER_COUNT; i++) {
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	3301      	adds	r3, #1
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b13      	cmp	r3, #19
 8001230:	d9e7      	bls.n	8001202 <csp_buffer_init+0x1e>
	}
}
 8001232:	bf00      	nop
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	2000f7d4 	.word	0x2000f7d4
 8001240:	2000f824 	.word	0x2000f824
 8001244:	20000268 	.word	0x20000268
 8001248:	2000dfc4 	.word	0x2000dfc4

0800124c <csp_buffer_get>:

	buffer->refcount = 1;
	return buffer->skbf_data;
}

void * csp_buffer_get(size_t _data_size) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]

	if (_data_size > CSP_BUFFER_SIZE) {
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800125a:	d904      	bls.n	8001266 <csp_buffer_get+0x1a>
		csp_dbg_errno = CSP_DBG_ERR_MTU_EXCEEDED;
 800125c:	4b16      	ldr	r3, [pc, #88]	@ (80012b8 <csp_buffer_get+0x6c>)
 800125e:	2202      	movs	r2, #2
 8001260:	701a      	strb	r2, [r3, #0]
		return NULL;
 8001262:	2300      	movs	r3, #0
 8001264:	e023      	b.n	80012ae <csp_buffer_get+0x62>
	}

	csp_skbf_t * buffer = NULL;
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
	csp_queue_dequeue(csp_buffers, &buffer, 0);
 800126a:	4b14      	ldr	r3, [pc, #80]	@ (80012bc <csp_buffer_get+0x70>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f107 010c 	add.w	r1, r7, #12
 8001272:	2200      	movs	r2, #0
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff ff34 	bl	80010e2 <csp_queue_dequeue>
	if (buffer == NULL) {
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d107      	bne.n	8001290 <csp_buffer_get+0x44>
		csp_dbg_buffer_out++;
 8001280:	4b0f      	ldr	r3, [pc, #60]	@ (80012c0 <csp_buffer_get+0x74>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	3301      	adds	r3, #1
 8001286:	b2da      	uxtb	r2, r3
 8001288:	4b0d      	ldr	r3, [pc, #52]	@ (80012c0 <csp_buffer_get+0x74>)
 800128a:	701a      	strb	r2, [r3, #0]
		return NULL;
 800128c:	2300      	movs	r3, #0
 800128e:	e00e      	b.n	80012ae <csp_buffer_get+0x62>
	}

	if (buffer != buffer->skbf_addr) {
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	685a      	ldr	r2, [r3, #4]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	429a      	cmp	r2, r3
 8001298:	d004      	beq.n	80012a4 <csp_buffer_get+0x58>
		csp_dbg_errno = CSP_DBG_ERR_CORRUPT_BUFFER;
 800129a:	4b07      	ldr	r3, [pc, #28]	@ (80012b8 <csp_buffer_get+0x6c>)
 800129c:	2201      	movs	r2, #1
 800129e:	701a      	strb	r2, [r3, #0]
		return NULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	e004      	b.n	80012ae <csp_buffer_get+0x62>
	}

	buffer->refcount = 1;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2201      	movs	r2, #1
 80012a8:	601a      	str	r2, [r3, #0]
	return buffer->skbf_data;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	3308      	adds	r3, #8
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	2000026e 	.word	0x2000026e
 80012bc:	20000268 	.word	0x20000268
 80012c0:	2000026d 	.word	0x2000026d

080012c4 <csp_buffer_free_isr>:

void csp_buffer_free_isr(void * packet) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]

	if (packet == NULL) {
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d033      	beq.n	800133a <csp_buffer_free_isr+0x76>
		// freeing a NULL pointer is OK, e.g. standard free()
		return;
	}

	csp_skbf_t * buf = (void *)(((uint8_t *)packet) - sizeof(csp_skbf_t));
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	3b08      	subs	r3, #8
 80012d6:	60fb      	str	r3, [r7, #12]

	if (((uintptr_t)buf % CSP_BUFFER_ALIGN) > 0) {
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f003 0303 	and.w	r3, r3, #3
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <csp_buffer_free_isr+0x26>
		csp_dbg_errno = CSP_DBG_ERR_CORRUPT_BUFFER;
 80012e2:	4b18      	ldr	r3, [pc, #96]	@ (8001344 <csp_buffer_free_isr+0x80>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	701a      	strb	r2, [r3, #0]
		return;
 80012e8:	e028      	b.n	800133c <csp_buffer_free_isr+0x78>
	}

	if (buf->skbf_addr != buf) {
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	685a      	ldr	r2, [r3, #4]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d003      	beq.n	80012fc <csp_buffer_free_isr+0x38>
		csp_dbg_errno = CSP_DBG_ERR_CORRUPT_BUFFER;
 80012f4:	4b13      	ldr	r3, [pc, #76]	@ (8001344 <csp_buffer_free_isr+0x80>)
 80012f6:	2201      	movs	r2, #1
 80012f8:	701a      	strb	r2, [r3, #0]
		return;
 80012fa:	e01f      	b.n	800133c <csp_buffer_free_isr+0x78>
	}

	if (buf->refcount == 0) {
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d103      	bne.n	800130c <csp_buffer_free_isr+0x48>
		csp_dbg_errno = CSP_DBG_ERR_CORRUPT_BUFFER;
 8001304:	4b0f      	ldr	r3, [pc, #60]	@ (8001344 <csp_buffer_free_isr+0x80>)
 8001306:	2201      	movs	r2, #1
 8001308:	701a      	strb	r2, [r3, #0]
		return;
 800130a:	e017      	b.n	800133c <csp_buffer_free_isr+0x78>
	}

	if (--(buf->refcount) > 0) {
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	3a01      	subs	r2, #1
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <csp_buffer_free_isr+0x5e>
		csp_dbg_errno = CSP_DBG_ERR_CORRUPT_BUFFER;;
 800131a:	4b0a      	ldr	r3, [pc, #40]	@ (8001344 <csp_buffer_free_isr+0x80>)
 800131c:	2201      	movs	r2, #1
 800131e:	701a      	strb	r2, [r3, #0]
		return;
 8001320:	e00c      	b.n	800133c <csp_buffer_free_isr+0x78>
	}

	int task_woken = 0;
 8001322:	2300      	movs	r3, #0
 8001324:	60bb      	str	r3, [r7, #8]
	csp_queue_enqueue_isr(csp_buffers, &buf, &task_woken);
 8001326:	4b08      	ldr	r3, [pc, #32]	@ (8001348 <csp_buffer_free_isr+0x84>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f107 0208 	add.w	r2, r7, #8
 800132e:	f107 010c 	add.w	r1, r7, #12
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff febe 	bl	80010b4 <csp_queue_enqueue_isr>
 8001338:	e000      	b.n	800133c <csp_buffer_free_isr+0x78>
		return;
 800133a:	bf00      	nop
}
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	2000026e 	.word	0x2000026e
 8001348:	20000268 	.word	0x20000268

0800134c <csp_buffer_free>:

void csp_buffer_free(void * packet) {
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]

	if (packet == NULL) {
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d030      	beq.n	80013bc <csp_buffer_free+0x70>
		/* freeing a NULL pointer is OK, e.g. standard free() */
		return;
	}

	csp_skbf_t * buf = (void *)(((uint8_t *)packet) - sizeof(csp_skbf_t));
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	3b08      	subs	r3, #8
 800135e:	60fb      	str	r3, [r7, #12]

	if (((uintptr_t)buf % CSP_BUFFER_ALIGN) > 0) {
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f003 0303 	and.w	r3, r3, #3
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <csp_buffer_free+0x26>
		csp_dbg_errno = CSP_DBG_ERR_CORRUPT_BUFFER;
 800136a:	4b16      	ldr	r3, [pc, #88]	@ (80013c4 <csp_buffer_free+0x78>)
 800136c:	2201      	movs	r2, #1
 800136e:	701a      	strb	r2, [r3, #0]
		return;
 8001370:	e025      	b.n	80013be <csp_buffer_free+0x72>
	}

	if (buf->skbf_addr != buf) {
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	685a      	ldr	r2, [r3, #4]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	429a      	cmp	r2, r3
 800137a:	d003      	beq.n	8001384 <csp_buffer_free+0x38>
		csp_dbg_errno = CSP_DBG_ERR_CORRUPT_BUFFER;
 800137c:	4b11      	ldr	r3, [pc, #68]	@ (80013c4 <csp_buffer_free+0x78>)
 800137e:	2201      	movs	r2, #1
 8001380:	701a      	strb	r2, [r3, #0]
		return;
 8001382:	e01c      	b.n	80013be <csp_buffer_free+0x72>
	}

	if (buf->refcount == 0) {
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d103      	bne.n	8001394 <csp_buffer_free+0x48>
		csp_dbg_errno = CSP_DBG_ERR_ALREADY_FREE;
 800138c:	4b0d      	ldr	r3, [pc, #52]	@ (80013c4 <csp_buffer_free+0x78>)
 800138e:	2203      	movs	r2, #3
 8001390:	701a      	strb	r2, [r3, #0]
		return;
 8001392:	e014      	b.n	80013be <csp_buffer_free+0x72>
	}

	if (--(buf->refcount) > 0) {
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	3a01      	subs	r2, #1
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d003      	beq.n	80013aa <csp_buffer_free+0x5e>
		csp_dbg_errno = CSP_DBG_ERR_REFCOUNT;
 80013a2:	4b08      	ldr	r3, [pc, #32]	@ (80013c4 <csp_buffer_free+0x78>)
 80013a4:	2204      	movs	r2, #4
 80013a6:	701a      	strb	r2, [r3, #0]
		return;
 80013a8:	e009      	b.n	80013be <csp_buffer_free+0x72>
	}

	csp_queue_enqueue(csp_buffers, &buf, 0);
 80013aa:	4b07      	ldr	r3, [pc, #28]	@ (80013c8 <csp_buffer_free+0x7c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f107 010c 	add.w	r1, r7, #12
 80013b2:	2200      	movs	r2, #0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff fe63 	bl	8001080 <csp_queue_enqueue>
 80013ba:	e000      	b.n	80013be <csp_buffer_free+0x72>
		return;
 80013bc:	bf00      	nop
}
 80013be:	3710      	adds	r7, #16
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	2000026e 	.word	0x2000026e
 80013c8:	20000268 	.word	0x20000268

080013cc <csp_buffer_clone>:

void * csp_buffer_clone(void * buffer) {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]

	csp_packet_t * packet = (csp_packet_t *)buffer;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	60fb      	str	r3, [r7, #12]
	if (!packet) {
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d101      	bne.n	80013e2 <csp_buffer_clone+0x16>
		return NULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	e011      	b.n	8001406 <csp_buffer_clone+0x3a>
	}

	csp_packet_t * clone = csp_buffer_get(packet->length);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	8a9b      	ldrh	r3, [r3, #20]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff ff30 	bl	800124c <csp_buffer_get>
 80013ec:	60b8      	str	r0, [r7, #8]
	if (clone) {
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d007      	beq.n	8001404 <csp_buffer_clone+0x38>
		memcpy(clone, packet, csp_buffer_size());
 80013f4:	f000 f818 	bl	8001428 <csp_buffer_size>
 80013f8:	4603      	mov	r3, r0
 80013fa:	461a      	mov	r2, r3
 80013fc:	68f9      	ldr	r1, [r7, #12]
 80013fe:	68b8      	ldr	r0, [r7, #8]
 8001400:	f009 fd9d 	bl	800af3e <memcpy>
	}

	return clone;
 8001404:	68bb      	ldr	r3, [r7, #8]
}
 8001406:	4618      	mov	r0, r3
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
	...

08001410 <csp_buffer_remaining>:

int csp_buffer_remaining(void) {
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
	return csp_queue_size(csp_buffers);
 8001414:	4b03      	ldr	r3, [pc, #12]	@ (8001424 <csp_buffer_remaining+0x14>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff fe7b 	bl	8001114 <csp_queue_size>
 800141e:	4603      	mov	r3, r0
}
 8001420:	4618      	mov	r0, r3
 8001422:	bd80      	pop	{r7, pc}
 8001424:	20000268 	.word	0x20000268

08001428 <csp_buffer_size>:

size_t csp_buffer_size(void) {
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
	return (CSP_BUFFER_SIZE + CSP_BUFFER_PACKET_OVERHEAD);
 800142c:	f44f 7396 	mov.w	r3, #300	@ 0x12c
}
 8001430:	4618      	mov	r0, r3
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <csp_buffer_data_size>:

size_t csp_buffer_data_size(void) {
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0
	return CSP_BUFFER_SIZE;
 800143e:	f44f 7380 	mov.w	r3, #256	@ 0x100
}
 8001442:	4618      	mov	r0, r3
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <csp_conn_enqueue_packet>:
		}
	}
#endif
}

int csp_conn_enqueue_packet(csp_conn_t * conn, csp_packet_t * packet) {
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]

	if (!conn)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d102      	bne.n	8001462 <csp_conn_enqueue_packet+0x16>
		return CSP_ERR_INVAL;
 800145c:	f06f 0301 	mvn.w	r3, #1
 8001460:	e013      	b.n	800148a <csp_conn_enqueue_packet+0x3e>

	if (csp_queue_enqueue(conn->rx_queue, &packet, 0) != CSP_QUEUE_OK) {
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	4639      	mov	r1, r7
 8001468:	2200      	movs	r2, #0
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff fe08 	bl	8001080 <csp_queue_enqueue>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d008      	beq.n	8001488 <csp_conn_enqueue_packet+0x3c>
		csp_dbg_conn_ovf++;
 8001476:	4b07      	ldr	r3, [pc, #28]	@ (8001494 <csp_conn_enqueue_packet+0x48>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	3301      	adds	r3, #1
 800147c:	b2da      	uxtb	r2, r3
 800147e:	4b05      	ldr	r3, [pc, #20]	@ (8001494 <csp_conn_enqueue_packet+0x48>)
 8001480:	701a      	strb	r2, [r3, #0]
		return CSP_ERR_NOMEM;
 8001482:	f04f 33ff 	mov.w	r3, #4294967295
 8001486:	e000      	b.n	800148a <csp_conn_enqueue_packet+0x3e>
	}

	return CSP_ERR_NONE;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000270 	.word	0x20000270

08001498 <csp_conn_init>:

void csp_conn_init(void) {
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0

	for (int i = 0; i < CSP_CONN_MAX; i++) {
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	e028      	b.n	80014f6 <csp_conn_init+0x5e>
		csp_conn_t * conn = &arr_conn[i];
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	22a8      	movs	r2, #168	@ 0xa8
 80014a8:	fb02 f303 	mul.w	r3, r2, r3
 80014ac:	4a16      	ldr	r2, [pc, #88]	@ (8001508 <csp_conn_init+0x70>)
 80014ae:	4413      	add	r3, r2
 80014b0:	60bb      	str	r3, [r7, #8]

		conn->sport_outgoing = CSP_PORT_MAX_BIND + 1 + i;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	3340      	adds	r3, #64	@ 0x40
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	761a      	strb	r2, [r3, #24]
		conn->state = CONN_CLOSED;
 80014be:	2300      	movs	r3, #0
 80014c0:	607b      	str	r3, [r7, #4]
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	3304      	adds	r3, #4
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	f3bf 8f5b 	dmb	ish
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	f3bf 8f5b 	dmb	ish
		conn->idin.flags = 0;
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	2200      	movs	r2, #0
 80014d6:	725a      	strb	r2, [r3, #9]
		conn->rx_queue = csp_queue_create_static(CSP_CONN_RXQUEUE_LEN, sizeof(csp_packet_t *), conn->rx_queue_static_data, &conn->rx_queue_static);
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	3320      	adds	r3, #32
 80014e2:	2104      	movs	r1, #4
 80014e4:	200a      	movs	r0, #10
 80014e6:	f7ff fdb7 	bl	8001058 <csp_queue_create_static>
 80014ea:	4602      	mov	r2, r0
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	61da      	str	r2, [r3, #28]
	for (int i = 0; i < CSP_CONN_MAX; i++) {
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	3301      	adds	r3, #1
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	2b07      	cmp	r3, #7
 80014fa:	ddd3      	ble.n	80014a4 <csp_conn_init+0xc>

#if (CSP_USE_RDP)
		csp_rdp_init(conn);
#endif
	}
}
 80014fc:	bf00      	nop
 80014fe:	bf00      	nop
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	2000f874 	.word	0x2000f874

0800150c <csp_conn_find_existing>:
	}

	return NULL;
}

csp_conn_t * csp_conn_find_existing(csp_id_t * id) {
 800150c:	b480      	push	{r7}
 800150e:	b087      	sub	sp, #28
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < CSP_CONN_MAX; i++) {
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]
 8001518:	e03c      	b.n	8001594 <csp_conn_find_existing+0x88>
		csp_conn_t * conn = &arr_conn[i];
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	22a8      	movs	r2, #168	@ 0xa8
 800151e:	fb02 f303 	mul.w	r3, r2, r3
 8001522:	4a21      	ldr	r2, [pc, #132]	@ (80015a8 <csp_conn_find_existing+0x9c>)
 8001524:	4413      	add	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
		 * Also this is written using explicit fields, not bitmasks, in order to improve
		 * portability and dual use between different header formats.
		 */

		/* Connection must match dport */
		if (conn->idin.dport != id->dport)
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	7b9a      	ldrb	r2, [r3, #14]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	799b      	ldrb	r3, [r3, #6]
 8001530:	429a      	cmp	r2, r3
 8001532:	d123      	bne.n	800157c <csp_conn_find_existing+0x70>
			continue;

		/* Connection must match sport */
		if (conn->idin.sport != id->sport)
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	7bda      	ldrb	r2, [r3, #15]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	79db      	ldrb	r3, [r3, #7]
 800153c:	429a      	cmp	r2, r3
 800153e:	d11f      	bne.n	8001580 <csp_conn_find_existing+0x74>
			continue;

		/* Connection must match destination */
		if (conn->idin.dst != id->dst)
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	899a      	ldrh	r2, [r3, #12]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	889b      	ldrh	r3, [r3, #4]
 8001548:	b29b      	uxth	r3, r3
 800154a:	429a      	cmp	r2, r3
 800154c:	d11a      	bne.n	8001584 <csp_conn_find_existing+0x78>
			continue;


		/* Connection must be open */
		if (conn->state != CONN_OPEN)
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	3304      	adds	r3, #4
 8001552:	f3bf 8f5b 	dmb	ish
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f3bf 8f5b 	dmb	ish
 800155c:	60bb      	str	r3, [r7, #8]
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d111      	bne.n	8001588 <csp_conn_find_existing+0x7c>
			continue;

		/* Connection must be client */
		if (conn->type != CONN_CLIENT)
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	f3bf 8f5b 	dmb	ish
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f3bf 8f5b 	dmb	ish
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d109      	bne.n	800158c <csp_conn_find_existing+0x80>
			continue;

		/* All conditions found! */
		return conn;
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	e00f      	b.n	800159c <csp_conn_find_existing+0x90>
			continue;
 800157c:	bf00      	nop
 800157e:	e006      	b.n	800158e <csp_conn_find_existing+0x82>
			continue;
 8001580:	bf00      	nop
 8001582:	e004      	b.n	800158e <csp_conn_find_existing+0x82>
			continue;
 8001584:	bf00      	nop
 8001586:	e002      	b.n	800158e <csp_conn_find_existing+0x82>
			continue;
 8001588:	bf00      	nop
 800158a:	e000      	b.n	800158e <csp_conn_find_existing+0x82>
			continue;
 800158c:	bf00      	nop
	for (int i = 0; i < CSP_CONN_MAX; i++) {
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	3301      	adds	r3, #1
 8001592:	617b      	str	r3, [r7, #20]
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	2b07      	cmp	r3, #7
 8001598:	ddbf      	ble.n	800151a <csp_conn_find_existing+0xe>
	}

	return NULL;
 800159a:	2300      	movs	r3, #0
}
 800159c:	4618      	mov	r0, r3
 800159e:	371c      	adds	r7, #28
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	2000f874 	.word	0x2000f874

080015ac <csp_conn_flush_rx_queue>:

static int csp_conn_flush_rx_queue(csp_conn_t * conn) {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]

	csp_packet_t * packet;

	/* Flush packet queues */
	while (csp_queue_dequeue(conn->rx_queue, &packet, 0) == CSP_QUEUE_OK) {
 80015b4:	e006      	b.n	80015c4 <csp_conn_flush_rx_queue+0x18>
		if (packet != NULL) {
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d003      	beq.n	80015c4 <csp_conn_flush_rx_queue+0x18>
			csp_buffer_free(packet);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff fec4 	bl	800134c <csp_buffer_free>
	while (csp_queue_dequeue(conn->rx_queue, &packet, 0) == CSP_QUEUE_OK) {
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	69db      	ldr	r3, [r3, #28]
 80015c8:	f107 010c 	add.w	r1, r7, #12
 80015cc:	2200      	movs	r2, #0
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff fd87 	bl	80010e2 <csp_queue_dequeue>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d0ed      	beq.n	80015b6 <csp_conn_flush_rx_queue+0xa>
		}
	}

	return CSP_ERR_NONE;
 80015da:	2300      	movs	r3, #0
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3710      	adds	r7, #16
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <csp_conn_allocate>:

csp_conn_t * csp_conn_allocate(csp_conn_type_t type) {
 80015e4:	b490      	push	{r4, r7}
 80015e6:	b08a      	sub	sp, #40	@ 0x28
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	71fb      	strb	r3, [r7, #7]

	static uint8_t csp_conn_last_given = 0;

	/* Search for free connection */
	csp_conn_t * conn = NULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	627b      	str	r3, [r7, #36]	@ 0x24
	int i = csp_conn_last_given;
 80015f2:	4b36      	ldr	r3, [pc, #216]	@ (80016cc <csp_conn_allocate+0xe8>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	623b      	str	r3, [r7, #32]
	for (int j = 0; j < CSP_CONN_MAX; j++) {
 80015f8:	2300      	movs	r3, #0
 80015fa:	61fb      	str	r3, [r7, #28]
 80015fc:	e03f      	b.n	800167e <csp_conn_allocate+0x9a>
		i = (i + 1) % CSP_CONN_MAX;
 80015fe:	6a3b      	ldr	r3, [r7, #32]
 8001600:	3301      	adds	r3, #1
 8001602:	425a      	negs	r2, r3
 8001604:	f003 0307 	and.w	r3, r3, #7
 8001608:	f002 0207 	and.w	r2, r2, #7
 800160c:	bf58      	it	pl
 800160e:	4253      	negpl	r3, r2
 8001610:	623b      	str	r3, [r7, #32]

		int expected = CONN_CLOSED;
 8001612:	2300      	movs	r3, #0
 8001614:	613b      	str	r3, [r7, #16]
		if (atomic_compare_exchange_weak(&arr_conn[i].state, &expected, CONN_OPEN)) {
 8001616:	6a3b      	ldr	r3, [r7, #32]
 8001618:	22a8      	movs	r2, #168	@ 0xa8
 800161a:	fb02 f303 	mul.w	r3, r2, r3
 800161e:	4a2c      	ldr	r2, [pc, #176]	@ (80016d0 <csp_conn_allocate+0xec>)
 8001620:	4413      	add	r3, r2
 8001622:	3304      	adds	r3, #4
 8001624:	61bb      	str	r3, [r7, #24]
 8001626:	2301      	movs	r3, #1
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	461c      	mov	r4, r3
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	f107 0310 	add.w	r3, r7, #16
 8001634:	6818      	ldr	r0, [r3, #0]
 8001636:	f3bf 8f5b 	dmb	ish
 800163a:	e852 1f00 	ldrex	r1, [r2]
 800163e:	4281      	cmp	r1, r0
 8001640:	d103      	bne.n	800164a <csp_conn_allocate+0x66>
 8001642:	e842 4c00 	strex	ip, r4, [r2]
 8001646:	f1bc 0f00 	cmp.w	ip, #0
 800164a:	f3bf 8f5b 	dmb	ish
 800164e:	bf0c      	ite	eq
 8001650:	2201      	moveq	r2, #1
 8001652:	2200      	movne	r2, #0
 8001654:	2a00      	cmp	r2, #0
 8001656:	d100      	bne.n	800165a <csp_conn_allocate+0x76>
 8001658:	6019      	str	r1, [r3, #0]
 800165a:	4613      	mov	r3, r2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d00b      	beq.n	8001678 <csp_conn_allocate+0x94>
			conn = &arr_conn[i];
 8001660:	6a3b      	ldr	r3, [r7, #32]
 8001662:	22a8      	movs	r2, #168	@ 0xa8
 8001664:	fb02 f303 	mul.w	r3, r2, r3
 8001668:	4a19      	ldr	r2, [pc, #100]	@ (80016d0 <csp_conn_allocate+0xec>)
 800166a:	4413      	add	r3, r2
 800166c:	627b      	str	r3, [r7, #36]	@ 0x24
			csp_conn_last_given = i;
 800166e:	6a3b      	ldr	r3, [r7, #32]
 8001670:	b2da      	uxtb	r2, r3
 8001672:	4b16      	ldr	r3, [pc, #88]	@ (80016cc <csp_conn_allocate+0xe8>)
 8001674:	701a      	strb	r2, [r3, #0]
 8001676:	e005      	b.n	8001684 <csp_conn_allocate+0xa0>
	for (int j = 0; j < CSP_CONN_MAX; j++) {
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	3301      	adds	r3, #1
 800167c:	61fb      	str	r3, [r7, #28]
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	2b07      	cmp	r3, #7
 8001682:	ddbc      	ble.n	80015fe <csp_conn_allocate+0x1a>
			break;
		}
	}

	if (conn == NULL) {
 8001684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001686:	2b00      	cmp	r3, #0
 8001688:	d107      	bne.n	800169a <csp_conn_allocate+0xb6>
		csp_dbg_conn_out++;
 800168a:	4b12      	ldr	r3, [pc, #72]	@ (80016d4 <csp_conn_allocate+0xf0>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	3301      	adds	r3, #1
 8001690:	b2da      	uxtb	r2, r3
 8001692:	4b10      	ldr	r3, [pc, #64]	@ (80016d4 <csp_conn_allocate+0xf0>)
 8001694:	701a      	strb	r2, [r3, #0]
		return NULL;
 8001696:	2300      	movs	r3, #0
 8001698:	e013      	b.n	80016c2 <csp_conn_allocate+0xde>
	}

	conn->timestamp = 0;
 800169a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800169c:	2200      	movs	r2, #0
 800169e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	conn->type = type;
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	617b      	str	r3, [r7, #20]
 80016a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a8:	697a      	ldr	r2, [r7, #20]
 80016aa:	f3bf 8f5b 	dmb	ish
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	f3bf 8f5b 	dmb	ish
	conn->idin.flags = 0;
 80016b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b6:	2200      	movs	r2, #0
 80016b8:	725a      	strb	r2, [r3, #9]
	conn->idout.flags = 0;
 80016ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016bc:	2200      	movs	r2, #0
 80016be:	745a      	strb	r2, [r3, #17]
	return conn;
 80016c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3728      	adds	r7, #40	@ 0x28
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc90      	pop	{r4, r7}
 80016ca:	4770      	bx	lr
 80016cc:	2000026c 	.word	0x2000026c
 80016d0:	2000f874 	.word	0x2000f874
 80016d4:	2000026f 	.word	0x2000026f

080016d8 <csp_conn_new>:

csp_conn_t * csp_conn_new(csp_id_t idin, csp_id_t idout) {
 80016d8:	b590      	push	{r4, r7, lr}
 80016da:	b087      	sub	sp, #28
 80016dc:	af00      	add	r7, sp, #0
 80016de:	f107 0408 	add.w	r4, r7, #8
 80016e2:	e884 0003 	stmia.w	r4, {r0, r1}
 80016e6:	4639      	mov	r1, r7
 80016e8:	e881 000c 	stmia.w	r1, {r2, r3}

	/* Allocate connection structure */
	csp_conn_t * conn = csp_conn_allocate(CONN_CLIENT);
 80016ec:	2000      	movs	r0, #0
 80016ee:	f7ff ff79 	bl	80015e4 <csp_conn_allocate>
 80016f2:	6178      	str	r0, [r7, #20]

	if (conn) {
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d017      	beq.n	800172a <csp_conn_new+0x52>
		/* No lock is needed here, because nobody else *
		 * has a reference to this connection yet.     */
		csp_id_copy(&conn->idin, &idin);
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	3308      	adds	r3, #8
 80016fe:	f107 0208 	add.w	r2, r7, #8
 8001702:	4611      	mov	r1, r2
 8001704:	4618      	mov	r0, r3
 8001706:	f000 fd5e 	bl	80021c6 <csp_id_copy>
		csp_id_copy(&conn->idout, &idout);
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	3310      	adds	r3, #16
 800170e:	463a      	mov	r2, r7
 8001710:	4611      	mov	r1, r2
 8001712:	4618      	mov	r0, r3
 8001714:	f000 fd57 	bl	80021c6 <csp_id_copy>

		conn->timestamp = csp_get_ms();
 8001718:	f7ff fd1a 	bl	8001150 <csp_get_ms>
 800171c:	4602      	mov	r2, r0
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

		/* Ensure connection queue is empty */
		csp_conn_flush_rx_queue(conn);
 8001724:	6978      	ldr	r0, [r7, #20]
 8001726:	f7ff ff41 	bl	80015ac <csp_conn_flush_rx_queue>
	}

	return conn;
 800172a:	697b      	ldr	r3, [r7, #20]
}
 800172c:	4618      	mov	r0, r3
 800172e:	371c      	adds	r7, #28
 8001730:	46bd      	mov	sp, r7
 8001732:	bd90      	pop	{r4, r7, pc}

08001734 <csp_close>:

int csp_close(csp_conn_t * conn) {
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
	return csp_conn_close(conn, CSP_RDP_CLOSED_BY_USERSPACE);
 800173c:	2101      	movs	r1, #1
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f000 f806 	bl	8001750 <csp_conn_close>
 8001744:	4603      	mov	r3, r0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
	...

08001750 <csp_conn_close>:

int csp_conn_close(csp_conn_t * conn, uint8_t closed_by) {
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	460b      	mov	r3, r1
 800175a:	70fb      	strb	r3, [r7, #3]

	if (conn == NULL) {
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d101      	bne.n	8001766 <csp_conn_close+0x16>
		return CSP_ERR_NONE;
 8001762:	2300      	movs	r3, #0
 8001764:	e01d      	b.n	80017a2 <csp_conn_close+0x52>
	}

	if (conn->state == CONN_CLOSED) {
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	3304      	adds	r3, #4
 800176a:	f3bf 8f5b 	dmb	ish
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f3bf 8f5b 	dmb	ish
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d104      	bne.n	8001786 <csp_conn_close+0x36>
		csp_dbg_errno = CSP_DBG_ERR_ALREADY_CLOSED;
 800177c:	4b0b      	ldr	r3, [pc, #44]	@ (80017ac <csp_conn_close+0x5c>)
 800177e:	220a      	movs	r2, #10
 8001780:	701a      	strb	r2, [r3, #0]
		return CSP_ERR_NONE;
 8001782:	2300      	movs	r3, #0
 8001784:	e00d      	b.n	80017a2 <csp_conn_close+0x52>
		}
	}
#endif

	/* Ensure connection queue is empty */
	csp_conn_flush_rx_queue(conn);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff ff10 	bl	80015ac <csp_conn_flush_rx_queue>
		csp_rdp_queue_flush(conn);
	}
#endif

	/* Set to closed */
	conn->state = CONN_CLOSED;
 800178c:	2300      	movs	r3, #0
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3304      	adds	r3, #4
 8001794:	68fa      	ldr	r2, [r7, #12]
 8001796:	f3bf 8f5b 	dmb	ish
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	f3bf 8f5b 	dmb	ish
	
	return CSP_ERR_NONE;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	2000026e 	.word	0x2000026e

080017b0 <csp_connect>:

csp_conn_t * csp_connect(uint8_t prio, uint16_t dest, uint8_t dport, uint32_t timeout, uint32_t opts) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08a      	sub	sp, #40	@ 0x28
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	603b      	str	r3, [r7, #0]
 80017b8:	4603      	mov	r3, r0
 80017ba:	71fb      	strb	r3, [r7, #7]
 80017bc:	460b      	mov	r3, r1
 80017be:	80bb      	strh	r3, [r7, #4]
 80017c0:	4613      	mov	r3, r2
 80017c2:	71bb      	strb	r3, [r7, #6]

	/* Force options on all connections */
	opts |= csp_conf.conn_dfl_so;
 80017c4:	4b48      	ldr	r3, [pc, #288]	@ (80018e8 <csp_connect+0x138>)
 80017c6:	691b      	ldr	r3, [r3, #16]
 80017c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80017ca:	4313      	orrs	r3, r2
 80017cc:	633b      	str	r3, [r7, #48]	@ 0x30

	int source_addr = -1;
 80017ce:	f04f 33ff 	mov.w	r3, #4294967295
 80017d2:	627b      	str	r3, [r7, #36]	@ 0x24
	csp_iface_t * local_interface = csp_iflist_get_by_subnet(dest);
 80017d4:	88bb      	ldrh	r3, [r7, #4]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f000 fc04 	bl	8001fe4 <csp_iflist_get_by_subnet>
 80017dc:	6238      	str	r0, [r7, #32]
	if (local_interface) {
 80017de:	6a3b      	ldr	r3, [r7, #32]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d003      	beq.n	80017ec <csp_connect+0x3c>
		source_addr = local_interface->addr;
 80017e4:	6a3b      	ldr	r3, [r7, #32]
 80017e6:	881b      	ldrh	r3, [r3, #0]
 80017e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80017ea:	e00b      	b.n	8001804 <csp_connect+0x54>
	} else {
		csp_route_t * route = csp_rtable_find_route(dest);
 80017ec:	88bb      	ldrh	r3, [r7, #4]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f001 fb14 	bl	8002e1c <csp_rtable_find_route>
 80017f4:	61f8      	str	r0, [r7, #28]
		if (route) {
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d003      	beq.n	8001804 <csp_connect+0x54>
			source_addr = route->iface->addr;
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	881b      	ldrh	r3, [r3, #0]
 8001802:	627b      	str	r3, [r7, #36]	@ 0x24
		}
	}

	if (source_addr == -1) {
 8001804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800180a:	d107      	bne.n	800181c <csp_connect+0x6c>
		csp_dbg_conn_noroute++;
 800180c:	4b37      	ldr	r3, [pc, #220]	@ (80018ec <csp_connect+0x13c>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	3301      	adds	r3, #1
 8001812:	b2da      	uxtb	r2, r3
 8001814:	4b35      	ldr	r3, [pc, #212]	@ (80018ec <csp_connect+0x13c>)
 8001816:	701a      	strb	r2, [r3, #0]
		return NULL;
 8001818:	2300      	movs	r3, #0
 800181a:	e060      	b.n	80018de <csp_connect+0x12e>
	}
	
	/* Generate identifier */
	csp_id_t incoming_id, outgoing_id;
	incoming_id.pri = prio;
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	743b      	strb	r3, [r7, #16]
	incoming_id.dst = source_addr;
 8001820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001822:	b29b      	uxth	r3, r3
 8001824:	82bb      	strh	r3, [r7, #20]
	incoming_id.src = dest;
 8001826:	88bb      	ldrh	r3, [r7, #4]
 8001828:	827b      	strh	r3, [r7, #18]
	incoming_id.sport = dport;
 800182a:	79bb      	ldrb	r3, [r7, #6]
 800182c:	75fb      	strb	r3, [r7, #23]
	incoming_id.flags = 0;
 800182e:	2300      	movs	r3, #0
 8001830:	747b      	strb	r3, [r7, #17]
	outgoing_id.pri = prio;
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	723b      	strb	r3, [r7, #8]
	outgoing_id.dst = dest;
 8001836:	88bb      	ldrh	r3, [r7, #4]
 8001838:	81bb      	strh	r3, [r7, #12]
	outgoing_id.src = source_addr;
 800183a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800183c:	b29b      	uxth	r3, r3
 800183e:	817b      	strh	r3, [r7, #10]
	outgoing_id.dport = dport;
 8001840:	79bb      	ldrb	r3, [r7, #6]
 8001842:	73bb      	strb	r3, [r7, #14]
	outgoing_id.flags = 0;
 8001844:	2300      	movs	r3, #0
 8001846:	727b      	strb	r3, [r7, #9]

	/* Set connection options */
	if (opts & CSP_O_NOCRC32) {
 8001848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800184a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <csp_connect+0xaa>
		opts &= ~CSP_O_CRC32;
 8001852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001854:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001858:	633b      	str	r3, [r7, #48]	@ 0x30
	}

	if (opts & CSP_O_RDP) {
 800185a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	2b00      	cmp	r3, #0
 8001862:	d004      	beq.n	800186e <csp_connect+0xbe>
#if (CSP_USE_RDP)
		incoming_id.flags |= CSP_FRDP;
		outgoing_id.flags |= CSP_FRDP;
#else
		csp_dbg_errno = CSP_DBG_ERR_UNSUPPORTED;
 8001864:	4b22      	ldr	r3, [pc, #136]	@ (80018f0 <csp_connect+0x140>)
 8001866:	2207      	movs	r2, #7
 8001868:	701a      	strb	r2, [r3, #0]
		return NULL;
 800186a:	2300      	movs	r3, #0
 800186c:	e037      	b.n	80018de <csp_connect+0x12e>
#endif
	}

	if (opts & CSP_O_HMAC) {
 800186e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	2b00      	cmp	r3, #0
 8001876:	d004      	beq.n	8001882 <csp_connect+0xd2>
#if (CSP_USE_HMAC)
		outgoing_id.flags |= CSP_FHMAC;
		incoming_id.flags |= CSP_FHMAC;
#else
		csp_dbg_errno = CSP_DBG_ERR_UNSUPPORTED;
 8001878:	4b1d      	ldr	r3, [pc, #116]	@ (80018f0 <csp_connect+0x140>)
 800187a:	2207      	movs	r2, #7
 800187c:	701a      	strb	r2, [r3, #0]
		return NULL;
 800187e:	2300      	movs	r3, #0
 8001880:	e02d      	b.n	80018de <csp_connect+0x12e>
#endif
	}

	if (opts & CSP_O_CRC32) {
 8001882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001884:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001888:	2b00      	cmp	r3, #0
 800188a:	d009      	beq.n	80018a0 <csp_connect+0xf0>
		outgoing_id.flags |= CSP_FCRC32;
 800188c:	7a7b      	ldrb	r3, [r7, #9]
 800188e:	f043 0301 	orr.w	r3, r3, #1
 8001892:	b2db      	uxtb	r3, r3
 8001894:	727b      	strb	r3, [r7, #9]
		incoming_id.flags |= CSP_FCRC32;
 8001896:	7c7b      	ldrb	r3, [r7, #17]
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	b2db      	uxtb	r3, r3
 800189e:	747b      	strb	r3, [r7, #17]
	}

	/* Find a new connection */
	csp_conn_t * conn = csp_conn_new(incoming_id, outgoing_id);
 80018a0:	f107 0308 	add.w	r3, r7, #8
 80018a4:	cb0c      	ldmia	r3, {r2, r3}
 80018a6:	f107 0110 	add.w	r1, r7, #16
 80018aa:	c903      	ldmia	r1, {r0, r1}
 80018ac:	f7ff ff14 	bl	80016d8 <csp_conn_new>
 80018b0:	61b8      	str	r0, [r7, #24]
	if (conn == NULL) {
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d101      	bne.n	80018bc <csp_connect+0x10c>
		return NULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	e010      	b.n	80018de <csp_connect+0x12e>
	}

	/* Outgoing connections always use pre-defined source port */
	conn->idout.sport = conn->sport_outgoing;
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	7e1a      	ldrb	r2, [r3, #24]
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	75da      	strb	r2, [r3, #23]
	conn->idin.dport = conn->sport_outgoing;
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	7e1a      	ldrb	r2, [r3, #24]
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	739a      	strb	r2, [r3, #14]
	conn->dest_socket = NULL;
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	2200      	movs	r2, #0
 80018d0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

	/* Set connection options */
	conn->opts = opts;
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80018d8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		}
	}
#endif

	/* We have a successful connection */
	return conn;
 80018dc:	69bb      	ldr	r3, [r7, #24]
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3728      	adds	r7, #40	@ 0x28
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000000 	.word	0x20000000
 80018ec:	20000271 	.word	0x20000271
 80018f0:	2000026e 	.word	0x2000026e

080018f4 <csp_conn_dport>:

int csp_conn_dport(csp_conn_t * conn) {
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]

	return conn->idin.dport;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	7b9b      	ldrb	r3, [r3, #14]
}
 8001900:	4618      	mov	r0, r3
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <csp_crc32_memory>:
	0xE330A81A, 0x115B2B19, 0x020BD8ED, 0xF0605BEE, 0x24AA3F05, 0xD6C1BC06, 0xC5914FF2, 0x37FACCF1,
	0x69E9F0D5, 0x9B8273D6, 0x88D28022, 0x7AB90321, 0xAE7367CA, 0x5C18E4C9, 0x4F48173D, 0xBD23943E,
	0xF36E6F75, 0x0105EC76, 0x12551F82, 0xE03E9C81, 0x34F4F86A, 0xC69F7B69, 0xD5CF889D, 0x27A40B9E,
	0x79B737BA, 0x8BDCB4B9, 0x988C474D, 0x6AE7C44E, 0xBE2DA0A5, 0x4C4623A6, 0x5F16D052, 0xAD7D5351};

uint32_t csp_crc32_memory(const uint8_t * data, uint32_t length) {
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
	uint32_t crc;

	crc = 0xFFFFFFFF;
 8001916:	f04f 33ff 	mov.w	r3, #4294967295
 800191a:	60fb      	str	r3, [r7, #12]
	while (length--)
 800191c:	e00e      	b.n	800193c <csp_crc32_memory+0x30>
#ifdef __AVR__
		crc = pgm_read_dword(&crc_tab[(crc ^ *data++) & 0xFFL]) ^ (crc >> 8);
#else
		crc = crc_tab[(crc ^ *data++) & 0xFFL] ^ (crc >> 8);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	1c5a      	adds	r2, r3, #1
 8001922:	607a      	str	r2, [r7, #4]
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	461a      	mov	r2, r3
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	4053      	eors	r3, r2
 800192c:	b2db      	uxtb	r3, r3
 800192e:	4a0a      	ldr	r2, [pc, #40]	@ (8001958 <csp_crc32_memory+0x4c>)
 8001930:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	0a1b      	lsrs	r3, r3, #8
 8001938:	4053      	eors	r3, r2
 800193a:	60fb      	str	r3, [r7, #12]
	while (length--)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	1e5a      	subs	r2, r3, #1
 8001940:	603a      	str	r2, [r7, #0]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1eb      	bne.n	800191e <csp_crc32_memory+0x12>
#endif

	return (crc ^ 0xFFFFFFFF);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	43db      	mvns	r3, r3
}
 800194a:	4618      	mov	r0, r3
 800194c:	3714      	adds	r7, #20
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	0800e6c0 	.word	0x0800e6c0

0800195c <csp_crc32_append>:

int csp_crc32_append(csp_packet_t * packet) {
 800195c:	b590      	push	{r4, r7, lr}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]

	uint32_t crc;

	if ((packet->length + sizeof(crc)) > csp_buffer_data_size()) {
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	8a9b      	ldrh	r3, [r3, #20]
 8001968:	1d1c      	adds	r4, r3, #4
 800196a:	f7ff fd66 	bl	800143a <csp_buffer_data_size>
 800196e:	4603      	mov	r3, r0
 8001970:	429c      	cmp	r4, r3
 8001972:	d902      	bls.n	800197a <csp_crc32_append+0x1e>
		return CSP_ERR_NOMEM;
 8001974:	f04f 33ff 	mov.w	r3, #4294967295
 8001978:	e01f      	b.n	80019ba <csp_crc32_append+0x5e>

	/* Calculate CRC32, convert to network byte order */
#if CSP_21 // In CSP 2.1 we change to include header per default
		crc = csp_crc32_memory((uint8_t *)&packet->id, packet->length + sizeof(packet->id));
#else
		crc = csp_crc32_memory(packet->data, packet->length);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	8a9b      	ldrh	r3, [r3, #20]
 8001984:	4619      	mov	r1, r3
 8001986:	4610      	mov	r0, r2
 8001988:	f7ff ffc0 	bl	800190c <csp_crc32_memory>
 800198c:	4603      	mov	r3, r0
 800198e:	60fb      	str	r3, [r7, #12]
#endif

	/* Convert to network byte order */
	crc = csp_htobe32(crc);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	4618      	mov	r0, r3
 8001994:	f000 f9eb 	bl	8001d6e <csp_htobe32>
 8001998:	4603      	mov	r3, r0
 800199a:	60fb      	str	r3, [r7, #12]

	/* Copy checksum to packet */
	memcpy(&packet->data[packet->length], &crc, sizeof(crc));
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	8a9b      	ldrh	r3, [r3, #20]
 80019a0:	3328      	adds	r3, #40	@ 0x28
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	4413      	add	r3, r2
 80019a6:	3304      	adds	r3, #4
 80019a8:	68fa      	ldr	r2, [r7, #12]
 80019aa:	601a      	str	r2, [r3, #0]
	packet->length += sizeof(crc);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	8a9b      	ldrh	r3, [r3, #20]
 80019b0:	3304      	adds	r3, #4
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	829a      	strh	r2, [r3, #20]

	return CSP_ERR_NONE;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd90      	pop	{r4, r7, pc}

080019c2 <csp_crc32_verify>:

int csp_crc32_verify(csp_packet_t * packet) {
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b084      	sub	sp, #16
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]

	uint32_t crc;

	if (packet->length < sizeof(crc)) {
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	8a9b      	ldrh	r3, [r3, #20]
 80019ce:	2b03      	cmp	r3, #3
 80019d0:	d802      	bhi.n	80019d8 <csp_crc32_verify+0x16>
		return CSP_ERR_CRC32;
 80019d2:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 80019d6:	e04d      	b.n	8001a74 <csp_crc32_verify+0xb2>
	}

	/* Calculate CRC32, convert to network byte order */
	crc = csp_crc32_memory((uint8_t *)&packet->id, packet->length + sizeof(packet->id) - sizeof(crc));
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f103 0216 	add.w	r2, r3, #22
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	8a9b      	ldrh	r3, [r3, #20]
 80019e2:	3304      	adds	r3, #4
 80019e4:	4619      	mov	r1, r3
 80019e6:	4610      	mov	r0, r2
 80019e8:	f7ff ff90 	bl	800190c <csp_crc32_memory>
 80019ec:	4603      	mov	r3, r0
 80019ee:	60fb      	str	r3, [r7, #12]
	crc = csp_htobe32(crc);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f000 f9bb 	bl	8001d6e <csp_htobe32>
 80019f8:	4603      	mov	r3, r0
 80019fa:	60fb      	str	r3, [r7, #12]

	/* Compare calculated checksum with packet header */
	if (memcmp(&packet->data[packet->length] - sizeof(crc), &crc, sizeof(crc)) != 0) {
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	8a9b      	ldrh	r3, [r3, #20]
 8001a00:	3328      	adds	r3, #40	@ 0x28
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	4413      	add	r3, r2
 8001a06:	3304      	adds	r3, #4
 8001a08:	3b04      	subs	r3, #4
 8001a0a:	f107 010c 	add.w	r1, r7, #12
 8001a0e:	2204      	movs	r2, #4
 8001a10:	4618      	mov	r0, r3
 8001a12:	f009 f972 	bl	800acfa <memcmp>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d024      	beq.n	8001a66 <csp_crc32_verify+0xa4>

		/* CRC32 with header failed, try without header */
		crc = csp_crc32_memory(packet->data, packet->length - sizeof(crc));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	8a9b      	ldrh	r3, [r3, #20]
 8001a26:	3b04      	subs	r3, #4
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4610      	mov	r0, r2
 8001a2c:	f7ff ff6e 	bl	800190c <csp_crc32_memory>
 8001a30:	4603      	mov	r3, r0
 8001a32:	60fb      	str	r3, [r7, #12]
		crc = csp_htobe32(crc);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f000 f999 	bl	8001d6e <csp_htobe32>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	60fb      	str	r3, [r7, #12]

		if (memcmp(&packet->data[packet->length] - sizeof(crc), &crc, sizeof(crc)) != 0) {
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	8a9b      	ldrh	r3, [r3, #20]
 8001a44:	3328      	adds	r3, #40	@ 0x28
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	4413      	add	r3, r2
 8001a4a:	3304      	adds	r3, #4
 8001a4c:	3b04      	subs	r3, #4
 8001a4e:	f107 010c 	add.w	r1, r7, #12
 8001a52:	2204      	movs	r2, #4
 8001a54:	4618      	mov	r0, r3
 8001a56:	f009 f950 	bl	800acfa <memcmp>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d002      	beq.n	8001a66 <csp_crc32_verify+0xa4>
			return CSP_ERR_CRC32;
 8001a60:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8001a64:	e006      	b.n	8001a74 <csp_crc32_verify+0xb2>
		}
		
	}

	/* Strip CRC32 */
	packet->length -= sizeof(crc);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	8a9b      	ldrh	r3, [r3, #20]
 8001a6a:	3b04      	subs	r3, #4
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	829a      	strh	r2, [r3, #20]
	return CSP_ERR_NONE;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3710      	adds	r7, #16
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <csp_print_func>:
    va_start(args, fmt);
    vprintf(fmt, args);
    va_end(args);
}
#else
__attribute__((weak)) void csp_print_func(const char * fmt, ...) {}
 8001a7c:	b40f      	push	{r0, r1, r2, r3}
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	bf00      	nop
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	b004      	add	sp, #16
 8001a8c:	4770      	bx	lr
	...

08001a90 <csp_dedup_is_duplicate>:
/* Store packet CRC's in a ringbuffer */
static uint32_t csp_dedup_array[CSP_DEDUP_COUNT] = {};
static uint32_t csp_dedup_timestamp[CSP_DEDUP_COUNT] = {};
static int csp_dedup_in = 0;

bool csp_dedup_is_duplicate(csp_packet_t * packet) {
 8001a90:	b590      	push	{r4, r7, lr}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
	/* Calculate CRC32 for packet */
	uint32_t crc = csp_crc32_memory((const uint8_t *)&packet->id, packet->length + sizeof(packet->id));
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f103 0216 	add.w	r2, r3, #22
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	8a9b      	ldrh	r3, [r3, #20]
 8001aa2:	3308      	adds	r3, #8
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4610      	mov	r0, r2
 8001aa8:	f7ff ff30 	bl	800190c <csp_crc32_memory>
 8001aac:	60b8      	str	r0, [r7, #8]

	/* Check if we have received this packet before */
	for (int i = 0; i < CSP_DEDUP_COUNT; i++) {
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	e015      	b.n	8001ae0 <csp_dedup_is_duplicate+0x50>

		/* Check for match */
		if (crc == csp_dedup_array[i]) {
 8001ab4:	4a1b      	ldr	r2, [pc, #108]	@ (8001b24 <csp_dedup_is_duplicate+0x94>)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001abc:	68ba      	ldr	r2, [r7, #8]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d10b      	bne.n	8001ada <csp_dedup_is_duplicate+0x4a>

			/* Check the timestamp */
			if (csp_get_ms() < csp_dedup_timestamp[i] + CSP_DEDUP_WINDOW_MS)
 8001ac2:	f7ff fb45 	bl	8001150 <csp_get_ms>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	4917      	ldr	r1, [pc, #92]	@ (8001b28 <csp_dedup_is_duplicate+0x98>)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001ad0:	3364      	adds	r3, #100	@ 0x64
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d201      	bcs.n	8001ada <csp_dedup_is_duplicate+0x4a>
				return true;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e020      	b.n	8001b1c <csp_dedup_is_duplicate+0x8c>
	for (int i = 0; i < CSP_DEDUP_COUNT; i++) {
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	3301      	adds	r3, #1
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2b0f      	cmp	r3, #15
 8001ae4:	dde6      	ble.n	8001ab4 <csp_dedup_is_duplicate+0x24>
		}
	}

	/* If not, insert packet into duplicate list */
	csp_dedup_array[csp_dedup_in] = crc;
 8001ae6:	4b11      	ldr	r3, [pc, #68]	@ (8001b2c <csp_dedup_is_duplicate+0x9c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	490e      	ldr	r1, [pc, #56]	@ (8001b24 <csp_dedup_is_duplicate+0x94>)
 8001aec:	68ba      	ldr	r2, [r7, #8]
 8001aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	csp_dedup_timestamp[csp_dedup_in] = csp_get_ms();
 8001af2:	4b0e      	ldr	r3, [pc, #56]	@ (8001b2c <csp_dedup_is_duplicate+0x9c>)
 8001af4:	681c      	ldr	r4, [r3, #0]
 8001af6:	f7ff fb2b 	bl	8001150 <csp_get_ms>
 8001afa:	4603      	mov	r3, r0
 8001afc:	4a0a      	ldr	r2, [pc, #40]	@ (8001b28 <csp_dedup_is_duplicate+0x98>)
 8001afe:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	csp_dedup_in = (csp_dedup_in + 1) % CSP_DEDUP_COUNT;
 8001b02:	4b0a      	ldr	r3, [pc, #40]	@ (8001b2c <csp_dedup_is_duplicate+0x9c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	3301      	adds	r3, #1
 8001b08:	425a      	negs	r2, r3
 8001b0a:	f003 030f 	and.w	r3, r3, #15
 8001b0e:	f002 020f 	and.w	r2, r2, #15
 8001b12:	bf58      	it	pl
 8001b14:	4253      	negpl	r3, r2
 8001b16:	4a05      	ldr	r2, [pc, #20]	@ (8001b2c <csp_dedup_is_duplicate+0x9c>)
 8001b18:	6013      	str	r3, [r2, #0]

	return false;
 8001b1a:	2300      	movs	r3, #0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd90      	pop	{r4, r7, pc}
 8001b24:	20000274 	.word	0x20000274
 8001b28:	200002b4 	.word	0x200002b4
 8001b2c:	200002f4 	.word	0x200002f4

08001b30 <csp_hton16>:
/* CSP includes */
#include <csp/csp.h>
#include <csp/csp_endian.h>

/* Convert 16-bit number from host byte order to network byte order */
inline uint16_t __attribute__ ((__const__)) csp_hton16(uint16_t h16) {
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	80fb      	strh	r3, [r7, #6]
#ifdef CSP_BIG_ENDIAN
	return h16;
#else
	return (((h16 & 0xff00) >> 8) |
 8001b3a:	88fb      	ldrh	r3, [r7, #6]
 8001b3c:	0a1b      	lsrs	r3, r3, #8
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	b21a      	sxth	r2, r3
 8001b42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b46:	021b      	lsls	r3, r3, #8
 8001b48:	b21b      	sxth	r3, r3
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	b21b      	sxth	r3, r3
 8001b4e:	b29b      	uxth	r3, r3
			((h16 & 0x00ff) << 8));
#endif
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <csp_ntoh16>:

/* Convert 16-bit number from network byte order to host byte order */
inline uint16_t __attribute__ ((__const__)) csp_ntoh16(uint16_t n16) {
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	80fb      	strh	r3, [r7, #6]
	return csp_hton16(n16);
 8001b66:	88fb      	ldrh	r3, [r7, #6]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff ffe1 	bl	8001b30 <csp_hton16>
 8001b6e:	4603      	mov	r3, r0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <csp_hton32>:

/* Convert 32-bit number from host byte order to network byte order */
inline uint32_t __attribute__ ((__const__)) csp_hton32(uint32_t h32) {
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
#ifdef CSP_BIG_ENDIAN
	return h32;
#else
	return (((h32 & 0xff000000) >> 24) |
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	0e1a      	lsrs	r2, r3, #24
			((h32 & 0x000000ff) << 24) |
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	061b      	lsls	r3, r3, #24
	return (((h32 & 0xff000000) >> 24) |
 8001b88:	431a      	orrs	r2, r3
			((h32 & 0x0000ff00) <<  8) |
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	021b      	lsls	r3, r3, #8
 8001b8e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
			((h32 & 0x000000ff) << 24) |
 8001b92:	431a      	orrs	r2, r3
			((h32 & 0x00ff0000) >>  8));
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	0a1b      	lsrs	r3, r3, #8
 8001b98:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
			((h32 & 0x0000ff00) <<  8) |
 8001b9c:	4313      	orrs	r3, r2
#endif
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <csp_ntoh32>:

/* Convert 32-bit number from network byte order to host byte order */
inline uint32_t __attribute__ ((__const__)) csp_ntoh32(uint32_t n32) {
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b082      	sub	sp, #8
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
	return csp_hton32(n32);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7ff ffe0 	bl	8001b78 <csp_hton32>
 8001bb8:	4603      	mov	r3, r0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <csp_hton64>:

/* Convert 64-bit number from host byte order to network byte order */
inline uint64_t __attribute__ ((__const__)) csp_hton64(uint64_t h64) {
 8001bc2:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001bc6:	b099      	sub	sp, #100	@ 0x64
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	e9c7 0116 	strd	r0, r1, [r7, #88]	@ 0x58
#ifdef CSP_BIG_ENDIAN
	return h64;
#else
	return (((h64 & 0xff00000000000000LL) >> 56) |
 8001bce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001bd2:	f04f 0400 	mov.w	r4, #0
 8001bd6:	f04f 0500 	mov.w	r5, #0
 8001bda:	0e1c      	lsrs	r4, r3, #24
 8001bdc:	2500      	movs	r5, #0
			((h64 & 0x00000000000000ffLL) << 56) |
 8001bde:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001be2:	f04f 0000 	mov.w	r0, #0
 8001be6:	f04f 0100 	mov.w	r1, #0
 8001bea:	0611      	lsls	r1, r2, #24
 8001bec:	2000      	movs	r0, #0
	return (((h64 & 0xff00000000000000LL) >> 56) |
 8001bee:	ea44 0a00 	orr.w	sl, r4, r0
 8001bf2:	ea45 0b01 	orr.w	fp, r5, r1
			((h64 & 0x00ff000000000000LL) >> 40) |
 8001bf6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001bfa:	f04f 0000 	mov.w	r0, #0
 8001bfe:	f04f 0100 	mov.w	r1, #0
 8001c02:	0a18      	lsrs	r0, r3, #8
 8001c04:	2100      	movs	r1, #0
 8001c06:	f400 487f 	and.w	r8, r0, #65280	@ 0xff00
 8001c0a:	f04f 0900 	mov.w	r9, #0
			((h64 & 0x00000000000000ffLL) << 56) |
 8001c0e:	ea4a 0308 	orr.w	r3, sl, r8
 8001c12:	653b      	str	r3, [r7, #80]	@ 0x50
 8001c14:	ea4b 0309 	orr.w	r3, fp, r9
 8001c18:	657b      	str	r3, [r7, #84]	@ 0x54
			((h64 & 0x000000000000ff00LL) << 40) |
 8001c1a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001c1e:	f04f 0000 	mov.w	r0, #0
 8001c22:	f04f 0100 	mov.w	r1, #0
 8001c26:	0211      	lsls	r1, r2, #8
 8001c28:	2000      	movs	r0, #0
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c2e:	f401 037f 	and.w	r3, r1, #16711680	@ 0xff0000
 8001c32:	64fb      	str	r3, [r7, #76]	@ 0x4c
			((h64 & 0x00ff000000000000LL) >> 40) |
 8001c34:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001c38:	4623      	mov	r3, r4
 8001c3a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001c3e:	4602      	mov	r2, r0
 8001c40:	4313      	orrs	r3, r2
 8001c42:	643b      	str	r3, [r7, #64]	@ 0x40
 8001c44:	462b      	mov	r3, r5
 8001c46:	460a      	mov	r2, r1
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	647b      	str	r3, [r7, #68]	@ 0x44
			((h64 & 0x0000ff0000000000LL) >> 24) |
 8001c4c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001c50:	f04f 0000 	mov.w	r0, #0
 8001c54:	f04f 0100 	mov.w	r1, #0
 8001c58:	0e10      	lsrs	r0, r2, #24
 8001c5a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8001c5e:	0e19      	lsrs	r1, r3, #24
 8001c60:	f400 037f 	and.w	r3, r0, #16711680	@ 0xff0000
 8001c64:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c66:	2300      	movs	r3, #0
 8001c68:	63fb      	str	r3, [r7, #60]	@ 0x3c
			((h64 & 0x000000000000ff00LL) << 40) |
 8001c6a:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8001c6e:	4623      	mov	r3, r4
 8001c70:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001c74:	4602      	mov	r2, r0
 8001c76:	4313      	orrs	r3, r2
 8001c78:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c7a:	462b      	mov	r3, r5
 8001c7c:	460a      	mov	r2, r1
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	637b      	str	r3, [r7, #52]	@ 0x34
			((h64 & 0x0000000000ff0000LL) << 24) |
 8001c82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001c86:	f04f 0000 	mov.w	r0, #0
 8001c8a:	f04f 0100 	mov.w	r1, #0
 8001c8e:	0619      	lsls	r1, r3, #24
 8001c90:	ea41 2112 	orr.w	r1, r1, r2, lsr #8
 8001c94:	0610      	lsls	r0, r2, #24
 8001c96:	2300      	movs	r3, #0
 8001c98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c9a:	f401 437f 	and.w	r3, r1, #65280	@ 0xff00
 8001c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
			((h64 & 0x0000ff0000000000LL) >> 24) |
 8001ca0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001ca4:	4623      	mov	r3, r4
 8001ca6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001caa:	4602      	mov	r2, r0
 8001cac:	4313      	orrs	r3, r2
 8001cae:	623b      	str	r3, [r7, #32]
 8001cb0:	462b      	mov	r3, r5
 8001cb2:	460a      	mov	r2, r1
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	627b      	str	r3, [r7, #36]	@ 0x24
			((h64 & 0x000000ff00000000LL) >>  8) |
 8001cb8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8001cbc:	f04f 0200 	mov.w	r2, #0
 8001cc0:	f04f 0300 	mov.w	r3, #0
 8001cc4:	0a02      	lsrs	r2, r0, #8
 8001cc6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001cca:	0a0b      	lsrs	r3, r1, #8
 8001ccc:	f002 437f 	and.w	r3, r2, #4278190080	@ 0xff000000
 8001cd0:	61bb      	str	r3, [r7, #24]
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61fb      	str	r3, [r7, #28]
			((h64 & 0x0000000000ff0000LL) << 24) |
 8001cd6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001cda:	4623      	mov	r3, r4
 8001cdc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	462b      	mov	r3, r5
 8001ce8:	460a      	mov	r2, r1
 8001cea:	4313      	orrs	r3, r2
 8001cec:	617b      	str	r3, [r7, #20]
			((h64 & 0x00000000ff000000LL) <<  8));
 8001cee:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8001cf2:	f04f 0200 	mov.w	r2, #0
 8001cf6:	f04f 0300 	mov.w	r3, #0
 8001cfa:	020b      	lsls	r3, r1, #8
 8001cfc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8001d00:	0202      	lsls	r2, r0, #8
 8001d02:	2100      	movs	r1, #0
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 8001d0a:	60fb      	str	r3, [r7, #12]
			((h64 & 0x000000ff00000000LL) >>  8) |
 8001d0c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001d10:	4623      	mov	r3, r4
 8001d12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d16:	4602      	mov	r2, r0
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	603b      	str	r3, [r7, #0]
 8001d1c:	462b      	mov	r3, r5
 8001d1e:	460a      	mov	r2, r1
 8001d20:	4313      	orrs	r3, r2
 8001d22:	607b      	str	r3, [r7, #4]
 8001d24:	e9d7 2300 	ldrd	r2, r3, [r7]
#endif
}
 8001d28:	4610      	mov	r0, r2
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	3764      	adds	r7, #100	@ 0x64
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001d34:	4770      	bx	lr

08001d36 <csp_htobe16>:
inline uint64_t __attribute__ ((__const__)) csp_ntoh64(uint64_t n64) {
	return csp_hton64(n64);
}

/* Convert 16-bit number from host byte order to big endian byte order */
inline uint16_t __attribute__ ((__const__)) csp_htobe16(uint16_t h16) {
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b082      	sub	sp, #8
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	80fb      	strh	r3, [r7, #6]
	return csp_hton16(h16);
 8001d40:	88fb      	ldrh	r3, [r7, #6]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff fef4 	bl	8001b30 <csp_hton16>
 8001d48:	4603      	mov	r3, r0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <csp_betoh16>:
			((h16 & 0x00ff) << 8));
#endif
}

/* Convert 16-bit number from big endian byte order to little endian byte order */
inline uint16_t __attribute__ ((__const__)) csp_betoh16(uint16_t be16) {
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b082      	sub	sp, #8
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	4603      	mov	r3, r0
 8001d5a:	80fb      	strh	r3, [r7, #6]
	return csp_ntoh16(be16);
 8001d5c:	88fb      	ldrh	r3, [r7, #6]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff fefc 	bl	8001b5c <csp_ntoh16>
 8001d64:	4603      	mov	r3, r0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <csp_htobe32>:
inline uint16_t __attribute__ ((__const__)) csp_letoh16(uint16_t le16) {
	return csp_htole16(le16);
}

/* Convert 32-bit number from host byte order to big endian byte order */
inline uint32_t __attribute__ ((__const__)) csp_htobe32(uint32_t h32) {
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b082      	sub	sp, #8
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
	return csp_hton32(h32);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f7ff fefe 	bl	8001b78 <csp_hton32>
 8001d7c:	4603      	mov	r3, r0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <csp_betoh32>:
			((h32 & 0x00ff0000) >>  8));
#endif
}

/* Convert 32-bit number from big endian byte order to host byte order */
inline uint32_t __attribute__ ((__const__)) csp_betoh32(uint32_t be32) {
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
	return csp_ntoh32(be32);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7ff ff0b 	bl	8001baa <csp_ntoh32>
 8001d94:	4603      	mov	r3, r0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <csp_htobe64>:
inline uint32_t __attribute__ ((__const__)) csp_letoh32(uint32_t le32) {
	return csp_htole32(le32);
}

/* Convert 64-bit number from host byte order to big endian byte order */
inline uint64_t __attribute__ ((__const__)) csp_htobe64(uint64_t h64) {
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b082      	sub	sp, #8
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	e9c7 0100 	strd	r0, r1, [r7]
	return csp_hton64(h64);
 8001da8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001dac:	f7ff ff09 	bl	8001bc2 <csp_hton64>
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
}
 8001db4:	4610      	mov	r0, r2
 8001db6:	4619      	mov	r1, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <csp_id1_prepend>:
#define CSP_ID1_FLAGS_MASK   0xFF
#define CSP_ID1_FLAGS_OFFSET 0

#define CSP_ID1_HEADER_SIZE 4

void csp_id1_prepend(csp_packet_t * packet) {
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b084      	sub	sp, #16
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]

	/* Pack into 32-bit using host endian */
	uint32_t id1 = ((packet->id.pri << CSP_ID1_PRIO_OFFSET) |
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	7d9b      	ldrb	r3, [r3, #22]
 8001dca:	079a      	lsls	r2, r3, #30
					(packet->id.dst << CSP_ID1_DST_OFFSET) |
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	8b5b      	ldrh	r3, [r3, #26]
 8001dd0:	051b      	lsls	r3, r3, #20
	uint32_t id1 = ((packet->id.pri << CSP_ID1_PRIO_OFFSET) |
 8001dd2:	431a      	orrs	r2, r3
					(packet->id.src << CSP_ID1_SRC_OFFSET) |
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	8b1b      	ldrh	r3, [r3, #24]
 8001dd8:	065b      	lsls	r3, r3, #25
					(packet->id.dst << CSP_ID1_DST_OFFSET) |
 8001dda:	431a      	orrs	r2, r3
					(packet->id.dport << CSP_ID1_DPORT_OFFSET) |
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	7f1b      	ldrb	r3, [r3, #28]
 8001de0:	039b      	lsls	r3, r3, #14
					(packet->id.src << CSP_ID1_SRC_OFFSET) |
 8001de2:	431a      	orrs	r2, r3
					(packet->id.sport << CSP_ID1_SPORT_OFFSET) |
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	7f5b      	ldrb	r3, [r3, #29]
 8001de8:	021b      	lsls	r3, r3, #8
					(packet->id.dport << CSP_ID1_DPORT_OFFSET) |
 8001dea:	4313      	orrs	r3, r2
					(packet->id.flags << CSP_ID1_FLAGS_OFFSET));
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	7dd2      	ldrb	r2, [r2, #23]
					(packet->id.sport << CSP_ID1_SPORT_OFFSET) |
 8001df0:	4313      	orrs	r3, r2
	uint32_t id1 = ((packet->id.pri << CSP_ID1_PRIO_OFFSET) |
 8001df2:	60fb      	str	r3, [r7, #12]

	/* Convert to big / network endian */
	id1 = csp_htobe32(id1);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff ffb9 	bl	8001d6e <csp_htobe32>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	60fb      	str	r3, [r7, #12]

	packet->frame_begin = packet->data - CSP_ID1_HEADER_SIZE;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	332c      	adds	r3, #44	@ 0x2c
 8001e04:	1f1a      	subs	r2, r3, #4
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	60da      	str	r2, [r3, #12]
	packet->frame_length = packet->length + CSP_ID1_HEADER_SIZE;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	8a9b      	ldrh	r3, [r3, #20]
 8001e0e:	3304      	adds	r3, #4
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	821a      	strh	r2, [r3, #16]

	memcpy(packet->frame_begin, &id1, CSP_ID1_HEADER_SIZE);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	601a      	str	r2, [r3, #0]
}
 8001e1e:	bf00      	nop
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <csp_id2_prepend>:
#define CSP_ID2_FLAGS_MASK   0x3F
#define CSP_ID2_FLAGS_OFFSET 0

#define CSP_ID2_HEADER_SIZE 6

void csp_id2_prepend(csp_packet_t * packet) {
 8001e26:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e2a:	b097      	sub	sp, #92	@ 0x5c
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	64f8      	str	r0, [r7, #76]	@ 0x4c

	/* Pack into 64-bit using host endian */
	uint64_t id2 = ((((uint64_t)packet->id.pri) << CSP_ID2_PRIO_OFFSET) |
 8001e30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e32:	7d9b      	ldrb	r3, [r3, #22]
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2200      	movs	r2, #0
 8001e38:	643b      	str	r3, [r7, #64]	@ 0x40
 8001e3a:	647a      	str	r2, [r7, #68]	@ 0x44
 8001e3c:	f04f 0000 	mov.w	r0, #0
 8001e40:	f04f 0100 	mov.w	r1, #0
 8001e44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e46:	0399      	lsls	r1, r3, #14
 8001e48:	2000      	movs	r0, #0
					(((uint64_t)packet->id.dst) << CSP_ID2_DST_OFFSET) |
 8001e4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e4c:	8b5b      	ldrh	r3, [r3, #26]
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	2200      	movs	r2, #0
 8001e52:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001e54:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001e56:	f04f 0200 	mov.w	r2, #0
 8001e5a:	f04f 0300 	mov.w	r3, #0
 8001e5e:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 8001e60:	0033      	movs	r3, r6
 8001e62:	2200      	movs	r2, #0
	uint64_t id2 = ((((uint64_t)packet->id.pri) << CSP_ID2_PRIO_OFFSET) |
 8001e64:	ea40 0602 	orr.w	r6, r0, r2
 8001e68:	633e      	str	r6, [r7, #48]	@ 0x30
 8001e6a:	430b      	orrs	r3, r1
 8001e6c:	637b      	str	r3, [r7, #52]	@ 0x34
					(((uint64_t)packet->id.src) << CSP_ID2_SRC_OFFSET) |
 8001e6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e70:	8b1b      	ldrh	r3, [r3, #24]
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	2200      	movs	r2, #0
 8001e76:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e78:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001e7a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8001e7e:	460b      	mov	r3, r1
 8001e80:	0b9d      	lsrs	r5, r3, #14
 8001e82:	460b      	mov	r3, r1
 8001e84:	049c      	lsls	r4, r3, #18
					(((uint64_t)packet->id.dst) << CSP_ID2_DST_OFFSET) |
 8001e86:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	4323      	orrs	r3, r4
 8001e8e:	623b      	str	r3, [r7, #32]
 8001e90:	4613      	mov	r3, r2
 8001e92:	432b      	orrs	r3, r5
 8001e94:	627b      	str	r3, [r7, #36]	@ 0x24
					(packet->id.dport << CSP_ID2_DPORT_OFFSET) |
 8001e96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e98:	7f1b      	ldrb	r3, [r3, #28]
 8001e9a:	031b      	lsls	r3, r3, #12
 8001e9c:	17da      	asrs	r2, r3, #31
 8001e9e:	61bb      	str	r3, [r7, #24]
 8001ea0:	61fa      	str	r2, [r7, #28]
					(((uint64_t)packet->id.src) << CSP_ID2_SRC_OFFSET) |
 8001ea2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001ea6:	4623      	mov	r3, r4
 8001ea8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001eac:	4602      	mov	r2, r0
 8001eae:	ea43 0a02 	orr.w	sl, r3, r2
 8001eb2:	462b      	mov	r3, r5
 8001eb4:	460a      	mov	r2, r1
 8001eb6:	ea43 0b02 	orr.w	fp, r3, r2
					(packet->id.sport << CSP_ID2_SPORT_OFFSET) |
 8001eba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ebc:	7f5b      	ldrb	r3, [r3, #29]
 8001ebe:	019b      	lsls	r3, r3, #6
 8001ec0:	17da      	asrs	r2, r3, #31
 8001ec2:	613b      	str	r3, [r7, #16]
 8001ec4:	617a      	str	r2, [r7, #20]
					(packet->id.dport << CSP_ID2_DPORT_OFFSET) |
 8001ec6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001eca:	460b      	mov	r3, r1
 8001ecc:	ea4a 0803 	orr.w	r8, sl, r3
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	ea4b 0903 	orr.w	r9, fp, r3
					(packet->id.flags << CSP_ID2_FLAGS_OFFSET));
 8001ed6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ed8:	7ddb      	ldrb	r3, [r3, #23]
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	2200      	movs	r2, #0
 8001ede:	60bb      	str	r3, [r7, #8]
 8001ee0:	60fa      	str	r2, [r7, #12]
					(packet->id.sport << CSP_ID2_SPORT_OFFSET) |
 8001ee2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	ea48 0303 	orr.w	r3, r8, r3
 8001eec:	603b      	str	r3, [r7, #0]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	ea49 0303 	orr.w	r3, r9, r3
 8001ef4:	607b      	str	r3, [r7, #4]
	uint64_t id2 = ((((uint64_t)packet->id.pri) << CSP_ID2_PRIO_OFFSET) |
 8001ef6:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001efa:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50

	/* Convert to big / network endian:
	 * We first shift up the 48 bit header to most significant end of the 64-bit */
	id2 = csp_htobe64(id2 << 16);
 8001efe:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001f02:	f04f 0200 	mov.w	r2, #0
 8001f06:	f04f 0300 	mov.w	r3, #0
 8001f0a:	040b      	lsls	r3, r1, #16
 8001f0c:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8001f10:	0402      	lsls	r2, r0, #16
 8001f12:	4610      	mov	r0, r2
 8001f14:	4619      	mov	r1, r3
 8001f16:	f7ff ff42 	bl	8001d9e <csp_htobe64>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

	packet->frame_begin = packet->data - CSP_ID2_HEADER_SIZE;
 8001f22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f24:	332c      	adds	r3, #44	@ 0x2c
 8001f26:	1f9a      	subs	r2, r3, #6
 8001f28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f2a:	60da      	str	r2, [r3, #12]
	packet->frame_length = packet->length + CSP_ID2_HEADER_SIZE;
 8001f2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f2e:	8a9b      	ldrh	r3, [r3, #20]
 8001f30:	3306      	adds	r3, #6
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f36:	821a      	strh	r2, [r3, #16]

	memcpy(packet->frame_begin, &id2, CSP_ID2_HEADER_SIZE);
 8001f38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8001f40:	2206      	movs	r2, #6
 8001f42:	4618      	mov	r0, r3
 8001f44:	f008 fffb 	bl	800af3e <memcpy>
}
 8001f48:	bf00      	nop
 8001f4a:	375c      	adds	r7, #92	@ 0x5c
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001f54 <csp_id_prepend>:
 * to avoid a runtime comparison. But that would also clutter the configuration and expose this
 * to the user. An alternative would be a set of global but non exported function pointers.
 * That would actually be nicer, but it can be done later, it works for now.
 */

void csp_id_prepend(csp_packet_t * packet) {
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
	if (csp_conf.version == 2) {
 8001f5c:	4b07      	ldr	r3, [pc, #28]	@ (8001f7c <csp_id_prepend+0x28>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d103      	bne.n	8001f6c <csp_id_prepend+0x18>
		csp_id2_prepend(packet);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f7ff ff5e 	bl	8001e26 <csp_id2_prepend>
	} else {
		csp_id1_prepend(packet);
	}
}
 8001f6a:	e002      	b.n	8001f72 <csp_id_prepend+0x1e>
		csp_id1_prepend(packet);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f7ff ff26 	bl	8001dbe <csp_id1_prepend>
}
 8001f72:	bf00      	nop
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	20000000 	.word	0x20000000

08001f80 <csp_id_get_host_bits>:
		csp_id1_setup_rx(packet);
		return CSP_ID1_HEADER_SIZE;
	}
}

unsigned int csp_id_get_host_bits(void) {
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
	if (csp_conf.version == 2) {
 8001f84:	4b05      	ldr	r3, [pc, #20]	@ (8001f9c <csp_id_get_host_bits+0x1c>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d101      	bne.n	8001f90 <csp_id_get_host_bits+0x10>
		return CSP_ID2_HOST_SIZE;
 8001f8c:	230e      	movs	r3, #14
 8001f8e:	e000      	b.n	8001f92 <csp_id_get_host_bits+0x12>
	} else {
		return CSP_ID1_HOST_SIZE;
 8001f90:	2305      	movs	r3, #5
	}
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	20000000 	.word	0x20000000

08001fa0 <csp_id_is_broadcast>:

unsigned int csp_id_get_max_port(void) {
	return ((1 << (CSP_ID2_PORT_SIZE)) - 1);
}

int csp_id_is_broadcast(uint16_t addr, uint16_t netmask) {
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	460a      	mov	r2, r1
 8001faa:	80fb      	strh	r3, [r7, #6]
 8001fac:	4613      	mov	r3, r2
 8001fae:	80bb      	strh	r3, [r7, #4]
	uint16_t hostmask = (1 << (csp_id_get_host_bits() - netmask)) - 1;
 8001fb0:	f7ff ffe6 	bl	8001f80 <csp_id_get_host_bits>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	88bb      	ldrh	r3, [r7, #4]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2201      	movs	r2, #1
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	81fb      	strh	r3, [r7, #14]
	if ((addr & hostmask) == hostmask) {
 8001fc6:	88fa      	ldrh	r2, [r7, #6]
 8001fc8:	89fb      	ldrh	r3, [r7, #14]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	89fa      	ldrh	r2, [r7, #14]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d101      	bne.n	8001fd8 <csp_id_is_broadcast+0x38>
		return 1;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e000      	b.n	8001fda <csp_id_is_broadcast+0x3a>
	}
	return 0;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <csp_iflist_get_by_subnet>:
#include <csp/csp_debug.h>

/* Interfaces are stored in a linked list */
static csp_iface_t * interfaces = NULL;

csp_iface_t * csp_iflist_get_by_subnet(uint16_t addr) {
 8001fe4:	b590      	push	{r4, r7, lr}
 8001fe6:	b087      	sub	sp, #28
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	80fb      	strh	r3, [r7, #6]

	csp_iface_t * ifc = interfaces;
 8001fee:	4b1a      	ldr	r3, [pc, #104]	@ (8002058 <csp_iflist_get_by_subnet+0x74>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	617b      	str	r3, [r7, #20]
	while (ifc) {
 8001ff4:	e028      	b.n	8002048 <csp_iflist_get_by_subnet+0x64>

		/* Reject searches involving subnets, if the netmask is invalud */
		if (ifc->netmask == 0) {
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	885b      	ldrh	r3, [r3, #2]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d103      	bne.n	8002006 <csp_iflist_get_by_subnet+0x22>
			ifc = ifc->next;
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002002:	617b      	str	r3, [r7, #20]
			continue;
 8002004:	e020      	b.n	8002048 <csp_iflist_get_by_subnet+0x64>
		}

		/* Look if address is within subnet */
		uint16_t netmask = ((1 << ifc->netmask) - 1) << (csp_id_get_host_bits() - ifc->netmask);
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	885b      	ldrh	r3, [r3, #2]
 800200a:	461a      	mov	r2, r3
 800200c:	2301      	movs	r3, #1
 800200e:	4093      	lsls	r3, r2
 8002010:	1e5c      	subs	r4, r3, #1
 8002012:	f7ff ffb5 	bl	8001f80 <csp_id_get_host_bits>
 8002016:	4602      	mov	r2, r0
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	885b      	ldrh	r3, [r3, #2]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	fa04 f303 	lsl.w	r3, r4, r3
 8002022:	827b      	strh	r3, [r7, #18]
		uint16_t network_a = ifc->addr & netmask;
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	881a      	ldrh	r2, [r3, #0]
 8002028:	8a7b      	ldrh	r3, [r7, #18]
 800202a:	4013      	ands	r3, r2
 800202c:	823b      	strh	r3, [r7, #16]
		uint16_t network_b = addr & netmask;
 800202e:	88fa      	ldrh	r2, [r7, #6]
 8002030:	8a7b      	ldrh	r3, [r7, #18]
 8002032:	4013      	ands	r3, r2
 8002034:	81fb      	strh	r3, [r7, #14]
		if (network_a == network_b) {
 8002036:	8a3a      	ldrh	r2, [r7, #16]
 8002038:	89fb      	ldrh	r3, [r7, #14]
 800203a:	429a      	cmp	r2, r3
 800203c:	d101      	bne.n	8002042 <csp_iflist_get_by_subnet+0x5e>
			return ifc;
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	e006      	b.n	8002050 <csp_iflist_get_by_subnet+0x6c>
		}

		ifc = ifc->next;
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002046:	617b      	str	r3, [r7, #20]
	while (ifc) {
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1d3      	bne.n	8001ff6 <csp_iflist_get_by_subnet+0x12>
	}

	return NULL;
 800204e:	2300      	movs	r3, #0

}
 8002050:	4618      	mov	r0, r3
 8002052:	371c      	adds	r7, #28
 8002054:	46bd      	mov	sp, r7
 8002056:	bd90      	pop	{r4, r7, pc}
 8002058:	200002f8 	.word	0x200002f8

0800205c <csp_iflist_get_by_name>:

	return NULL;

}

csp_iface_t * csp_iflist_get_by_name(const char * name) {
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
	csp_iface_t * ifc = interfaces;
 8002064:	4b0d      	ldr	r3, [pc, #52]	@ (800209c <csp_iflist_get_by_name+0x40>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	60fb      	str	r3, [r7, #12]
	while (ifc) {
 800206a:	e00e      	b.n	800208a <csp_iflist_get_by_name+0x2e>
		if (strncmp(ifc->name, name, CSP_IFLIST_NAME_MAX) == 0) {
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	220a      	movs	r2, #10
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	4618      	mov	r0, r3
 8002076:	f008 fe58 	bl	800ad2a <strncmp>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d101      	bne.n	8002084 <csp_iflist_get_by_name+0x28>
			return ifc;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	e006      	b.n	8002092 <csp_iflist_get_by_name+0x36>
		}
		ifc = ifc->next;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002088:	60fb      	str	r3, [r7, #12]
	while (ifc) {
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d1ed      	bne.n	800206c <csp_iflist_get_by_name+0x10>
	}
	return NULL;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	200002f8 	.word	0x200002f8

080020a0 <csp_iflist_add>:

int csp_iflist_add(csp_iface_t * ifc) {
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]

	ifc->next = NULL;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	641a      	str	r2, [r3, #64]	@ 0x40

	/* Add interface to pool */
	if (interfaces == NULL) {
 80020ae:	4b18      	ldr	r3, [pc, #96]	@ (8002110 <csp_iflist_add+0x70>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d103      	bne.n	80020be <csp_iflist_add+0x1e>
		/* This is the first interface to be added */
		interfaces = ifc;
 80020b6:	4a16      	ldr	r2, [pc, #88]	@ (8002110 <csp_iflist_add+0x70>)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6013      	str	r3, [r2, #0]
 80020bc:	e022      	b.n	8002104 <csp_iflist_add+0x64>
	} else {
		/* Insert interface last if not already in pool */
		csp_iface_t * last = NULL;
 80020be:	2300      	movs	r3, #0
 80020c0:	60fb      	str	r3, [r7, #12]
		for (csp_iface_t * i = interfaces; i != NULL; i = i->next) {
 80020c2:	4b13      	ldr	r3, [pc, #76]	@ (8002110 <csp_iflist_add+0x70>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	60bb      	str	r3, [r7, #8]
 80020c8:	e016      	b.n	80020f8 <csp_iflist_add+0x58>
			if ((i == ifc) || (strncmp(ifc->name, i->name, CSP_IFLIST_NAME_MAX) == 0)) {
 80020ca:	68ba      	ldr	r2, [r7, #8]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d00a      	beq.n	80020e8 <csp_iflist_add+0x48>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6858      	ldr	r0, [r3, #4]
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	220a      	movs	r2, #10
 80020dc:	4619      	mov	r1, r3
 80020de:	f008 fe24 	bl	800ad2a <strncmp>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d102      	bne.n	80020ee <csp_iflist_add+0x4e>
				return CSP_ERR_ALREADY;
 80020e8:	f06f 0306 	mvn.w	r3, #6
 80020ec:	e00b      	b.n	8002106 <csp_iflist_add+0x66>
			}
			last = i;
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	60fb      	str	r3, [r7, #12]
		for (csp_iface_t * i = interfaces; i != NULL; i = i->next) {
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f6:	60bb      	str	r3, [r7, #8]
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1e5      	bne.n	80020ca <csp_iflist_add+0x2a>
		}

		last->next = ifc;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	641a      	str	r2, [r3, #64]	@ 0x40
	}

	return CSP_ERR_NONE;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	200002f8 	.word	0x200002f8

08002114 <csp_init>:

uint16_t csp_get_address(void) {
	return csp_conf.address;
}

void csp_init(void) {
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0

	csp_buffer_init(); // cấp bộ nhớ nội cho CSP (packet buffer)
 8002118:	f7ff f864 	bl	80011e4 <csp_buffer_init>
	csp_conn_init(); // khởi tạo hệ thống quản lí kết nối
 800211c:	f7ff f9bc 	bl	8001498 <csp_conn_init>
	csp_qfifo_init(); // Khởi tạo FIFO queue cho các packet chờ xử lý.
 8002120:	f000 fbb0 	bl	8002884 <csp_qfifo_init>
//	csp_iflist_add(&csp_if_lo); // Thêm interface (giao diện loopback) vào danh sách các giao diện của hệ thống CSP.
//								// (giao diện loopback) vào danh sách các giao diện của hệ thống CSP.
//
//	/* Register loopback route */
//	csp_rtable_set(0, 14, &csp_if_lo, CSP_NO_VIA_ADDRESS); // thiết lập routing table (bảng định tuyến) cho node.
}
 8002124:	bf00      	nop
 8002126:	bd80      	pop	{r7, pc}

08002128 <csp_accept>:
	sock->opts = opts;

	return sock;
}

csp_conn_t * csp_accept(csp_socket_t * sock, uint32_t timeout) {
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]

	if ((sock == NULL) || (sock->rx_queue == NULL)) {
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d003      	beq.n	8002140 <csp_accept+0x18>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d104      	bne.n	800214a <csp_accept+0x22>
		csp_dbg_errno = CSP_DBG_ERR_INVALID_POINTER;
 8002140:	4b0b      	ldr	r3, [pc, #44]	@ (8002170 <csp_accept+0x48>)
 8002142:	220b      	movs	r2, #11
 8002144:	701a      	strb	r2, [r3, #0]
		return NULL;
 8002146:	2300      	movs	r3, #0
 8002148:	e00d      	b.n	8002166 <csp_accept+0x3e>
	}

	csp_conn_t * conn;
	if (csp_queue_dequeue(sock->rx_queue, &conn, timeout) == CSP_QUEUE_OK) {
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f107 010c 	add.w	r1, r7, #12
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	4618      	mov	r0, r3
 8002156:	f7fe ffc4 	bl	80010e2 <csp_queue_dequeue>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d101      	bne.n	8002164 <csp_accept+0x3c>
		return conn;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	e000      	b.n	8002166 <csp_accept+0x3e>
	}

	return NULL;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	2000026e 	.word	0x2000026e

08002174 <csp_read>:

csp_packet_t * csp_read(csp_conn_t * conn, uint32_t timeout) {
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]

	csp_packet_t * packet = NULL;
 800217e:	2300      	movs	r3, #0
 8002180:	60bb      	str	r3, [r7, #8]

	if ((conn == NULL) || (conn->state != CONN_OPEN)) {
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00a      	beq.n	800219e <csp_read+0x2a>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3304      	adds	r3, #4
 800218c:	f3bf 8f5b 	dmb	ish
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f3bf 8f5b 	dmb	ish
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d001      	beq.n	80021a2 <csp_read+0x2e>
		return NULL;
 800219e:	2300      	movs	r3, #0
 80021a0:	e00d      	b.n	80021be <csp_read+0x4a>
	if (timeout && (conn->idin.flags & CSP_FRDP) && (timeout < conn->rdp.conn_timeout)) {
		timeout = conn->rdp.conn_timeout;
	}
#endif

	if (csp_queue_dequeue(conn->rx_queue, &packet, timeout) != CSP_QUEUE_OK) {
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	f107 0108 	add.w	r1, r7, #8
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fe ff98 	bl	80010e2 <csp_queue_dequeue>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <csp_read+0x48>
		return NULL;
 80021b8:	2300      	movs	r3, #0
 80021ba:	e000      	b.n	80021be <csp_read+0x4a>
	if ((conn->idin.flags & CSP_FRDP) && conn->rdp.delayed_acks) {
		csp_rdp_check_ack(conn);
	}
#endif

	return packet;
 80021bc:	68bb      	ldr	r3, [r7, #8]
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <csp_id_copy>:

/* Provide a safe method to copy type safe, between two csp ids */
void csp_id_copy(csp_id_t * target, csp_id_t * source) {
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
 80021ce:	6039      	str	r1, [r7, #0]
	target->pri = source->pri;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	781a      	ldrb	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	701a      	strb	r2, [r3, #0]
	target->dst = source->dst;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	889b      	ldrh	r3, [r3, #4]
 80021dc:	b29a      	uxth	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	809a      	strh	r2, [r3, #4]
	target->src = source->src;
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	885b      	ldrh	r3, [r3, #2]
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	805a      	strh	r2, [r3, #2]
	target->dport = source->dport;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	799a      	ldrb	r2, [r3, #6]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	719a      	strb	r2, [r3, #6]
	target->sport = source->sport;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	79da      	ldrb	r2, [r3, #7]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	71da      	strb	r2, [r3, #7]
	target->flags = source->flags;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	785a      	ldrb	r2, [r3, #1]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	705a      	strb	r2, [r3, #1]
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <csp_send_direct>:

int csp_send_direct(csp_id_t idout, csp_packet_t * packet, int from_me) {
 8002210:	b590      	push	{r4, r7, lr}
 8002212:	b08b      	sub	sp, #44	@ 0x2c
 8002214:	af02      	add	r7, sp, #8
 8002216:	f107 0408 	add.w	r4, r7, #8
 800221a:	e884 0003 	stmia.w	r4, {r0, r1}
 800221e:	607a      	str	r2, [r7, #4]
 8002220:	603b      	str	r3, [r7, #0]

	int ret;

	/* Try to find the destination on any local subnets */
	csp_iface_t * local_interface = csp_iflist_get_by_subnet(idout.dst);
 8002222:	89bb      	ldrh	r3, [r7, #12]
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff fedd 	bl	8001fe4 <csp_iflist_get_by_subnet>
 800222a:	61b8      	str	r0, [r7, #24]
	if (local_interface) {
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d010      	beq.n	8002254 <csp_send_direct+0x44>
		idout.src = local_interface->addr;
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	881b      	ldrh	r3, [r3, #0]
 8002236:	817b      	strh	r3, [r7, #10]
		ret = csp_send_direct_iface(idout, packet, local_interface, CSP_NO_VIA_ADDRESS, 1);
 8002238:	2301      	movs	r3, #1
 800223a:	9301      	str	r3, [sp, #4]
 800223c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002240:	9300      	str	r3, [sp, #0]
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	f107 0108 	add.w	r1, r7, #8
 800224a:	c903      	ldmia	r1, {r0, r1}
 800224c:	f000 f86c 	bl	8002328 <csp_send_direct_iface>
 8002250:	61f8      	str	r0, [r7, #28]
 8002252:	e023      	b.n	800229c <csp_send_direct+0x8c>

	/* Otherwise, resort to the routing table for help */		
	} else {
		csp_route_t * route = csp_rtable_find_route(idout.dst);
 8002254:	89bb      	ldrh	r3, [r7, #12]
 8002256:	4618      	mov	r0, r3
 8002258:	f000 fde0 	bl	8002e1c <csp_rtable_find_route>
 800225c:	6178      	str	r0, [r7, #20]
		if (route == NULL) {
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d108      	bne.n	8002276 <csp_send_direct+0x66>
			csp_dbg_conn_noroute++;
 8002264:	4b10      	ldr	r3, [pc, #64]	@ (80022a8 <csp_send_direct+0x98>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	3301      	adds	r3, #1
 800226a:	b2da      	uxtb	r2, r3
 800226c:	4b0e      	ldr	r3, [pc, #56]	@ (80022a8 <csp_send_direct+0x98>)
 800226e:	701a      	strb	r2, [r3, #0]
			return CSP_ERR_TX;
 8002270:	f06f 0309 	mvn.w	r3, #9
 8002274:	e013      	b.n	800229e <csp_send_direct+0x8e>
		}
		idout.src = route->iface->addr;
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	881b      	ldrh	r3, [r3, #0]
 800227c:	817b      	strh	r3, [r7, #10]
		ret = csp_send_direct_iface(idout, packet, route->iface, route->via, 1);
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	689a      	ldr	r2, [r3, #8]
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	889b      	ldrh	r3, [r3, #4]
 8002286:	2101      	movs	r1, #1
 8002288:	9101      	str	r1, [sp, #4]
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	4613      	mov	r3, r2
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	f107 0108 	add.w	r1, r7, #8
 8002294:	c903      	ldmia	r1, {r0, r1}
 8002296:	f000 f847 	bl	8002328 <csp_send_direct_iface>
 800229a:	61f8      	str	r0, [r7, #28]
	}
	return ret;
 800229c:	69fb      	ldr	r3, [r7, #28]

}
 800229e:	4618      	mov	r0, r3
 80022a0:	3724      	adds	r7, #36	@ 0x24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd90      	pop	{r4, r7, pc}
 80022a6:	bf00      	nop
 80022a8:	20000271 	.word	0x20000271

080022ac <csp_output_hook>:

__attribute__((weak)) void csp_output_hook(csp_id_t idout, csp_packet_t * packet, csp_iface_t * iface, uint16_t via, int from_me) {
 80022ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022b0:	b08a      	sub	sp, #40	@ 0x28
 80022b2:	af06      	add	r7, sp, #24
 80022b4:	f107 0408 	add.w	r4, r7, #8
 80022b8:	e884 0003 	stmia.w	r4, {r0, r1}
 80022bc:	607a      	str	r2, [r7, #4]
 80022be:	603b      	str	r3, [r7, #0]
	csp_print_packet("OUT: S %u, D %u, Dp %u, Sp %u, Pr %u, Fl 0x%02X, Sz %u VIA: %s (%u)\n",
 80022c0:	4b17      	ldr	r3, [pc, #92]	@ (8002320 <csp_output_hook+0x74>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d025      	beq.n	8002314 <csp_output_hook+0x68>
 80022c8:	897b      	ldrh	r3, [r7, #10]
 80022ca:	469c      	mov	ip, r3
 80022cc:	89bb      	ldrh	r3, [r7, #12]
 80022ce:	469e      	mov	lr, r3
 80022d0:	7bbb      	ldrb	r3, [r7, #14]
 80022d2:	4698      	mov	r8, r3
 80022d4:	7bfb      	ldrb	r3, [r7, #15]
 80022d6:	4618      	mov	r0, r3
 80022d8:	7a3b      	ldrb	r3, [r7, #8]
 80022da:	461c      	mov	r4, r3
 80022dc:	7a7b      	ldrb	r3, [r7, #9]
 80022de:	461d      	mov	r5, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	8a9b      	ldrh	r3, [r3, #20]
 80022e4:	461e      	mov	r6, r3
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685a      	ldr	r2, [r3, #4]
 80022ea:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80022ec:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80022f0:	428b      	cmp	r3, r1
 80022f2:	d001      	beq.n	80022f8 <csp_output_hook+0x4c>
 80022f4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80022f6:	e000      	b.n	80022fa <csp_output_hook+0x4e>
 80022f8:	89bb      	ldrh	r3, [r7, #12]
 80022fa:	9305      	str	r3, [sp, #20]
 80022fc:	9204      	str	r2, [sp, #16]
 80022fe:	9603      	str	r6, [sp, #12]
 8002300:	9502      	str	r5, [sp, #8]
 8002302:	9401      	str	r4, [sp, #4]
 8002304:	9000      	str	r0, [sp, #0]
 8002306:	4643      	mov	r3, r8
 8002308:	4672      	mov	r2, lr
 800230a:	4661      	mov	r1, ip
 800230c:	4805      	ldr	r0, [pc, #20]	@ (8002324 <csp_output_hook+0x78>)
 800230e:	f7ff fbb5 	bl	8001a7c <csp_print_func>
				idout.src, idout.dst, idout.dport, idout.sport, idout.pri, idout.flags, packet->length, iface->name, (via != CSP_NO_VIA_ADDRESS) ? via : idout.dst);
	return;
 8002312:	bf00      	nop
 8002314:	bf00      	nop
}
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800231e:	bf00      	nop
 8002320:	20000273 	.word	0x20000273
 8002324:	0800e4c4 	.word	0x0800e4c4

08002328 <csp_send_direct_iface>:

int csp_send_direct_iface(csp_id_t idout, csp_packet_t * packet, csp_iface_t * iface, uint16_t via, int from_me) {
 8002328:	b590      	push	{r4, r7, lr}
 800232a:	b089      	sub	sp, #36	@ 0x24
 800232c:	af02      	add	r7, sp, #8
 800232e:	f107 0408 	add.w	r4, r7, #8
 8002332:	e884 0003 	stmia.w	r4, {r0, r1}
 8002336:	607a      	str	r2, [r7, #4]
 8002338:	603b      	str	r3, [r7, #0]

	if (iface == NULL) {
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d106      	bne.n	800234e <csp_send_direct_iface+0x26>
		csp_dbg_conn_noroute++;
 8002340:	4b36      	ldr	r3, [pc, #216]	@ (800241c <csp_send_direct_iface+0xf4>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	3301      	adds	r3, #1
 8002346:	b2da      	uxtb	r2, r3
 8002348:	4b34      	ldr	r3, [pc, #208]	@ (800241c <csp_send_direct_iface+0xf4>)
 800234a:	701a      	strb	r2, [r3, #0]
		goto err;
 800234c:	e060      	b.n	8002410 <csp_send_direct_iface+0xe8>
	}

	csp_output_hook(idout, packet, iface, via, from_me);
 800234e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002350:	9301      	str	r3, [sp, #4]
 8002352:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	f107 0108 	add.w	r1, r7, #8
 800235e:	c903      	ldmia	r1, {r0, r1}
 8002360:	f7ff ffa4 	bl	80022ac <csp_output_hook>

	/* Copy identifier to packet (before crc and hmac) */
	csp_id_copy(&packet->id, &idout);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3316      	adds	r3, #22
 8002368:	f107 0208 	add.w	r2, r7, #8
 800236c:	4611      	mov	r1, r2
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff ff29 	bl	80021c6 <csp_id_copy>

#if (CSP_USE_PROMISC)
	/* Loopback traffic is added to promisc queue by the router */
	if (from_me && (iface != &csp_if_lo)) {
 8002374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002376:	2b00      	cmp	r3, #0
 8002378:	d006      	beq.n	8002388 <csp_send_direct_iface+0x60>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	4a28      	ldr	r2, [pc, #160]	@ (8002420 <csp_send_direct_iface+0xf8>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d002      	beq.n	8002388 <csp_send_direct_iface+0x60>
		csp_promisc_add(packet);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 fa4a 	bl	800281c <csp_promisc_add>
	}
#endif

	/* Only encrypt packets from the current node */
	if (from_me) {
 8002388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800238a:	2b00      	cmp	r3, #0
 800238c:	d013      	beq.n	80023b6 <csp_send_direct_iface+0x8e>

		/* Append HMAC */
		if (idout.flags & CSP_FHMAC) {
 800238e:	7a7b      	ldrb	r3, [r7, #9]
 8002390:	f003 0308 	and.w	r3, r3, #8
 8002394:	2b00      	cmp	r3, #0
 8002396:	d003      	beq.n	80023a0 <csp_send_direct_iface+0x78>
			if (csp_hmac_append(packet, false) != CSP_ERR_NONE) {
				/* HMAC append failed */
				goto tx_err;
			}
#else
			csp_dbg_errno = CSP_DBG_ERR_UNSUPPORTED;
 8002398:	4b22      	ldr	r3, [pc, #136]	@ (8002424 <csp_send_direct_iface+0xfc>)
 800239a:	2207      	movs	r2, #7
 800239c:	701a      	strb	r2, [r3, #0]
			goto tx_err;
 800239e:	e032      	b.n	8002406 <csp_send_direct_iface+0xde>
#endif
		}

		/* Append CRC32 */
		if (idout.flags & CSP_FCRC32) {
 80023a0:	7a7b      	ldrb	r3, [r7, #9]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d005      	beq.n	80023b6 <csp_send_direct_iface+0x8e>
			/* Calculate and add CRC32 (does not include header for backwards compatability with csp1.x) */
			if (csp_crc32_append(packet) != CSP_ERR_NONE) {
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7ff fad6 	bl	800195c <csp_crc32_append>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d122      	bne.n	80023fc <csp_send_direct_iface+0xd4>
		}

	}

	/* Store length before passing to interface */
	uint16_t bytes = packet->length;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	8a9b      	ldrh	r3, [r3, #20]
 80023ba:	82fb      	strh	r3, [r7, #22]
	uint16_t mtu = iface->mtu;
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	8a9b      	ldrh	r3, [r3, #20]
 80023c0:	82bb      	strh	r3, [r7, #20]

	if (mtu > 0 && bytes > mtu)
 80023c2:	8abb      	ldrh	r3, [r7, #20]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d003      	beq.n	80023d0 <csp_send_direct_iface+0xa8>
 80023c8:	8afa      	ldrh	r2, [r7, #22]
 80023ca:	8abb      	ldrh	r3, [r7, #20]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d817      	bhi.n	8002400 <csp_send_direct_iface+0xd8>
		goto tx_err;

	if ((*iface->nexthop)(iface, via, packet) != CSP_ERR_NONE)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	6838      	ldr	r0, [r7, #0]
 80023da:	4798      	blx	r3
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d110      	bne.n	8002404 <csp_send_direct_iface+0xdc>
		goto tx_err;

	iface->tx++;
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	1c5a      	adds	r2, r3, #1
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	619a      	str	r2, [r3, #24]
	iface->txbytes += bytes;
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023f0:	8afb      	ldrh	r3, [r7, #22]
 80023f2:	441a      	add	r2, r3
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	635a      	str	r2, [r3, #52]	@ 0x34
	return CSP_ERR_NONE;
 80023f8:	2300      	movs	r3, #0
 80023fa:	e00b      	b.n	8002414 <csp_send_direct_iface+0xec>
				goto tx_err;
 80023fc:	bf00      	nop
 80023fe:	e002      	b.n	8002406 <csp_send_direct_iface+0xde>
		goto tx_err;
 8002400:	bf00      	nop
 8002402:	e000      	b.n	8002406 <csp_send_direct_iface+0xde>
		goto tx_err;
 8002404:	bf00      	nop

tx_err:
	iface->tx_error++;
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	1c5a      	adds	r2, r3, #1
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	621a      	str	r2, [r3, #32]
err:
	return CSP_ERR_TX;
 8002410:	f06f 0309 	mvn.w	r3, #9
}
 8002414:	4618      	mov	r0, r3
 8002416:	371c      	adds	r7, #28
 8002418:	46bd      	mov	sp, r7
 800241a:	bd90      	pop	{r4, r7, pc}
 800241c:	20000271 	.word	0x20000271
 8002420:	2000001c 	.word	0x2000001c
 8002424:	2000026e 	.word	0x2000026e

08002428 <csp_send>:

void csp_send(csp_conn_t * conn, csp_packet_t * packet) {
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]

	if (packet == NULL) {
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d01f      	beq.n	8002478 <csp_send+0x50>
		return;
	}

	if ((conn == NULL) || (conn->state != CONN_OPEN)) {
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00a      	beq.n	8002454 <csp_send+0x2c>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	3304      	adds	r3, #4
 8002442:	f3bf 8f5b 	dmb	ish
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f3bf 8f5b 	dmb	ish
 800244c:	60fb      	str	r3, [r7, #12]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d003      	beq.n	800245c <csp_send+0x34>
		csp_buffer_free(packet);
 8002454:	6838      	ldr	r0, [r7, #0]
 8002456:	f7fe ff79 	bl	800134c <csp_buffer_free>
		return;
 800245a:	e00e      	b.n	800247a <csp_send+0x52>
			return;
		}
	}
#endif

	if (csp_send_direct(conn->idout, packet, 1) != CSP_ERR_NONE) {
 800245c:	6879      	ldr	r1, [r7, #4]
 800245e:	2301      	movs	r3, #1
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	3110      	adds	r1, #16
 8002464:	c903      	ldmia	r1, {r0, r1}
 8002466:	f7ff fed3 	bl	8002210 <csp_send_direct>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d004      	beq.n	800247a <csp_send+0x52>
		csp_buffer_free(packet);
 8002470:	6838      	ldr	r0, [r7, #0]
 8002472:	f7fe ff6b 	bl	800134c <csp_buffer_free>
		return;
 8002476:	e000      	b.n	800247a <csp_send+0x52>
		return;
 8002478:	bf00      	nop
	}
}
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <csp_transaction_persistent>:
void csp_send_prio(uint8_t prio, csp_conn_t * conn, csp_packet_t * packet) {
	conn->idout.pri = prio;
	csp_send(conn, packet);
}

int csp_transaction_persistent(csp_conn_t * conn, uint32_t timeout, void * outbuf, int outlen, void * inbuf, int inlen) {
 8002480:	b580      	push	{r7, lr}
 8002482:	b088      	sub	sp, #32
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
 800248c:	603b      	str	r3, [r7, #0]

	int size = (inlen > outlen) ? inlen : outlen;
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002492:	4293      	cmp	r3, r2
 8002494:	bfb8      	it	lt
 8002496:	4613      	movlt	r3, r2
 8002498:	61fb      	str	r3, [r7, #28]
	csp_packet_t * packet = csp_buffer_get(size);
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	4618      	mov	r0, r3
 800249e:	f7fe fed5 	bl	800124c <csp_buffer_get>
 80024a2:	61b8      	str	r0, [r7, #24]
	if (packet == NULL)
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <csp_transaction_persistent+0x2e>
		return 0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	e048      	b.n	8002540 <csp_transaction_persistent+0xc0>

	/* Copy the request */
	if (outlen > 0 && outbuf != NULL)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	dd09      	ble.n	80024c8 <csp_transaction_persistent+0x48>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d006      	beq.n	80024c8 <csp_transaction_persistent+0x48>
		memcpy(packet->data, outbuf, outlen);
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	332c      	adds	r3, #44	@ 0x2c
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	6879      	ldr	r1, [r7, #4]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f008 fd3b 	bl	800af3e <memcpy>
	packet->length = outlen;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	829a      	strh	r2, [r3, #20]

	csp_send(conn, packet);
 80024d0:	69b9      	ldr	r1, [r7, #24]
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	f7ff ffa8 	bl	8002428 <csp_send>

	/* If no reply is expected, return now */
	if (inlen == 0)
 80024d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <csp_transaction_persistent+0x62>
		return 1;
 80024de:	2301      	movs	r3, #1
 80024e0:	e02e      	b.n	8002540 <csp_transaction_persistent+0xc0>

	packet = csp_read(conn, timeout);
 80024e2:	68b9      	ldr	r1, [r7, #8]
 80024e4:	68f8      	ldr	r0, [r7, #12]
 80024e6:	f7ff fe45 	bl	8002174 <csp_read>
 80024ea:	61b8      	str	r0, [r7, #24]
	if (packet == NULL)
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <csp_transaction_persistent+0x76>
		return 0;
 80024f2:	2300      	movs	r3, #0
 80024f4:	e024      	b.n	8002540 <csp_transaction_persistent+0xc0>

	if ((inlen != -1) && ((int)packet->length != inlen)) {
 80024f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024fc:	d010      	beq.n	8002520 <csp_transaction_persistent+0xa0>
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	8a9b      	ldrh	r3, [r3, #20]
 8002502:	461a      	mov	r2, r3
 8002504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002506:	4293      	cmp	r3, r2
 8002508:	d00a      	beq.n	8002520 <csp_transaction_persistent+0xa0>
		csp_dbg_inval_reply++;
 800250a:	4b0f      	ldr	r3, [pc, #60]	@ (8002548 <csp_transaction_persistent+0xc8>)
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	3301      	adds	r3, #1
 8002510:	b2da      	uxtb	r2, r3
 8002512:	4b0d      	ldr	r3, [pc, #52]	@ (8002548 <csp_transaction_persistent+0xc8>)
 8002514:	701a      	strb	r2, [r3, #0]
		csp_buffer_free(packet);
 8002516:	69b8      	ldr	r0, [r7, #24]
 8002518:	f7fe ff18 	bl	800134c <csp_buffer_free>
		return 0;
 800251c:	2300      	movs	r3, #0
 800251e:	e00f      	b.n	8002540 <csp_transaction_persistent+0xc0>
	}

	memcpy(inbuf, packet->data, packet->length);
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	8a9b      	ldrh	r3, [r3, #20]
 800252a:	461a      	mov	r2, r3
 800252c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800252e:	f008 fd06 	bl	800af3e <memcpy>
	int length = packet->length;
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	8a9b      	ldrh	r3, [r3, #20]
 8002536:	617b      	str	r3, [r7, #20]
	csp_buffer_free(packet);
 8002538:	69b8      	ldr	r0, [r7, #24]
 800253a:	f7fe ff07 	bl	800134c <csp_buffer_free>
	return length;
 800253e:	697b      	ldr	r3, [r7, #20]
}
 8002540:	4618      	mov	r0, r3
 8002542:	3720      	adds	r7, #32
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	20000272 	.word	0x20000272

0800254c <csp_transaction_w_opts>:

int csp_transaction_w_opts(uint8_t prio, uint16_t dest, uint8_t port, uint32_t timeout, void * outbuf, int outlen, void * inbuf, int inlen, uint32_t opts) {
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af02      	add	r7, sp, #8
 8002552:	603b      	str	r3, [r7, #0]
 8002554:	4603      	mov	r3, r0
 8002556:	71fb      	strb	r3, [r7, #7]
 8002558:	460b      	mov	r3, r1
 800255a:	80bb      	strh	r3, [r7, #4]
 800255c:	4613      	mov	r3, r2
 800255e:	71bb      	strb	r3, [r7, #6]

	csp_conn_t * conn = csp_connect(prio, dest, port, 0, opts);
 8002560:	79ba      	ldrb	r2, [r7, #6]
 8002562:	88b9      	ldrh	r1, [r7, #4]
 8002564:	79f8      	ldrb	r0, [r7, #7]
 8002566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002568:	9300      	str	r3, [sp, #0]
 800256a:	2300      	movs	r3, #0
 800256c:	f7ff f920 	bl	80017b0 <csp_connect>
 8002570:	60f8      	str	r0, [r7, #12]
	if (conn == NULL)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d101      	bne.n	800257c <csp_transaction_w_opts+0x30>
		return 0;
 8002578:	2300      	movs	r3, #0
 800257a:	e00e      	b.n	800259a <csp_transaction_w_opts+0x4e>

	int status = csp_transaction_persistent(conn, timeout, outbuf, outlen, inbuf, inlen);
 800257c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257e:	9301      	str	r3, [sp, #4]
 8002580:	6a3b      	ldr	r3, [r7, #32]
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	6839      	ldr	r1, [r7, #0]
 800258a:	68f8      	ldr	r0, [r7, #12]
 800258c:	f7ff ff78 	bl	8002480 <csp_transaction_persistent>
 8002590:	60b8      	str	r0, [r7, #8]

	csp_close(conn);
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f7ff f8ce 	bl	8001734 <csp_close>

	return status;
 8002598:	68bb      	ldr	r3, [r7, #8]
}
 800259a:	4618      	mov	r0, r3
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
	...

080025a4 <csp_sendto>:
	csp_queue_dequeue(socket->rx_queue, &packet, timeout);

	return packet;
}

void csp_sendto(uint8_t prio, uint16_t dest, uint8_t dport, uint8_t src_port, uint32_t opts, csp_packet_t * packet) {
 80025a4:	b590      	push	{r4, r7, lr}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4604      	mov	r4, r0
 80025ac:	4608      	mov	r0, r1
 80025ae:	4611      	mov	r1, r2
 80025b0:	461a      	mov	r2, r3
 80025b2:	4623      	mov	r3, r4
 80025b4:	71fb      	strb	r3, [r7, #7]
 80025b6:	4603      	mov	r3, r0
 80025b8:	80bb      	strh	r3, [r7, #4]
 80025ba:	460b      	mov	r3, r1
 80025bc:	71bb      	strb	r3, [r7, #6]
 80025be:	4613      	mov	r3, r2
 80025c0:	70fb      	strb	r3, [r7, #3]

	if (!(opts & CSP_O_SAME))
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d102      	bne.n	80025d2 <csp_sendto+0x2e>
		packet->id.flags = 0;
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	2200      	movs	r2, #0
 80025d0:	75da      	strb	r2, [r3, #23]

	if (opts & CSP_O_RDP) {
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d006      	beq.n	80025ea <csp_sendto+0x46>
		csp_dbg_errno = CSP_DBG_ERR_UNSUPPORTED;
 80025dc:	4b21      	ldr	r3, [pc, #132]	@ (8002664 <csp_sendto+0xc0>)
 80025de:	2207      	movs	r2, #7
 80025e0:	701a      	strb	r2, [r3, #0]
		csp_buffer_free(packet);
 80025e2:	69f8      	ldr	r0, [r7, #28]
 80025e4:	f7fe feb2 	bl	800134c <csp_buffer_free>
		return;
 80025e8:	e038      	b.n	800265c <csp_sendto+0xb8>
	}

	if (opts & CSP_O_HMAC) {
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	f003 0304 	and.w	r3, r3, #4
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d006      	beq.n	8002602 <csp_sendto+0x5e>
#if (CSP_USE_HMAC)
		packet->id.flags |= CSP_FHMAC;
#else
		csp_dbg_errno = CSP_DBG_ERR_UNSUPPORTED;
 80025f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002664 <csp_sendto+0xc0>)
 80025f6:	2207      	movs	r2, #7
 80025f8:	701a      	strb	r2, [r3, #0]
		csp_buffer_free(packet);
 80025fa:	69f8      	ldr	r0, [r7, #28]
 80025fc:	f7fe fea6 	bl	800134c <csp_buffer_free>
		return;
 8002600:	e02c      	b.n	800265c <csp_sendto+0xb8>
#endif
	}

	if (opts & CSP_O_CRC32) {
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002608:	2b00      	cmp	r3, #0
 800260a:	d006      	beq.n	800261a <csp_sendto+0x76>
		packet->id.flags |= CSP_FCRC32;
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	7ddb      	ldrb	r3, [r3, #23]
 8002610:	f043 0301 	orr.w	r3, r3, #1
 8002614:	b2da      	uxtb	r2, r3
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	75da      	strb	r2, [r3, #23]
	}

	packet->id.dst = dest;
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	88ba      	ldrh	r2, [r7, #4]
 800261e:	835a      	strh	r2, [r3, #26]
	packet->id.dport = dport;
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	79ba      	ldrb	r2, [r7, #6]
 8002624:	771a      	strb	r2, [r3, #28]
	packet->id.src = 0; // The source address will be filled by csp_send_direct
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	2200      	movs	r2, #0
 800262a:	831a      	strh	r2, [r3, #24]
	packet->id.sport = src_port;
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	78fa      	ldrb	r2, [r7, #3]
 8002630:	775a      	strb	r2, [r3, #29]
	packet->id.pri = prio;
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	79fa      	ldrb	r2, [r7, #7]
 8002636:	759a      	strb	r2, [r3, #22]

	if (csp_send_direct(packet->id, packet, 1) != CSP_ERR_NONE) {
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	f8d3 2016 	ldr.w	r2, [r3, #22]
 800263e:	4610      	mov	r0, r2
 8002640:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8002644:	4619      	mov	r1, r3
 8002646:	2301      	movs	r3, #1
 8002648:	69fa      	ldr	r2, [r7, #28]
 800264a:	f7ff fde1 	bl	8002210 <csp_send_direct>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d003      	beq.n	800265c <csp_sendto+0xb8>
		csp_buffer_free(packet);
 8002654:	69f8      	ldr	r0, [r7, #28]
 8002656:	f7fe fe79 	bl	800134c <csp_buffer_free>
		return;
 800265a:	bf00      	nop
	}
}
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	bd90      	pop	{r4, r7, pc}
 8002662:	bf00      	nop
 8002664:	2000026e 	.word	0x2000026e

08002668 <csp_sendto_reply>:

void csp_sendto_reply(const csp_packet_t * request_packet, csp_packet_t * reply_packet, uint32_t opts) {
 8002668:	b590      	push	{r4, r7, lr}
 800266a:	b087      	sub	sp, #28
 800266c:	af02      	add	r7, sp, #8
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]

	if (request_packet == NULL)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d018      	beq.n	80026ac <csp_sendto_reply+0x44>
		return;

	if (opts & CSP_O_SAME) {
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d003      	beq.n	800268c <csp_sendto_reply+0x24>
		reply_packet->id.flags = request_packet->id.flags;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	7dda      	ldrb	r2, [r3, #23]
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	75da      	strb	r2, [r3, #23]
	}

	return csp_sendto(request_packet->id.pri, request_packet->id.src, request_packet->id.sport, request_packet->id.dport, opts, reply_packet);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	7d98      	ldrb	r0, [r3, #22]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	8b19      	ldrh	r1, [r3, #24]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	7f5a      	ldrb	r2, [r3, #29]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	7f1c      	ldrb	r4, [r3, #28]
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	9301      	str	r3, [sp, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	4623      	mov	r3, r4
 80026a6:	f7ff ff7d 	bl	80025a4 <csp_sendto>
 80026aa:	e000      	b.n	80026ae <csp_sendto_reply+0x46>
		return;
 80026ac:	bf00      	nop
}
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd90      	pop	{r4, r7, pc}

080026b4 <csp_port_get_callback>:
} csp_port_t;

/* We rely on the .bss section to clear this, so there is no csp_port_init() function */
static csp_port_t ports[CSP_PORT_MAX_BIND + 2] = {0};

csp_callback_t csp_port_get_callback(unsigned int port) {
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
	
	if (port > CSP_PORT_MAX_BIND) {
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b3f      	cmp	r3, #63	@ 0x3f
 80026c0:	d901      	bls.n	80026c6 <csp_port_get_callback+0x12>
		return NULL;
 80026c2:	2300      	movs	r3, #0
 80026c4:	e01d      	b.n	8002702 <csp_port_get_callback+0x4e>
	}

	/* Check if port is open callback */
	if (ports[port].state == PORT_OPEN_CB) {
 80026c6:	4a12      	ldr	r2, [pc, #72]	@ (8002710 <csp_port_get_callback+0x5c>)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d105      	bne.n	80026de <csp_port_get_callback+0x2a>
		return ports[port].callback;
 80026d2:	4a0f      	ldr	r2, [pc, #60]	@ (8002710 <csp_port_get_callback+0x5c>)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	4413      	add	r3, r2
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	e011      	b.n	8002702 <csp_port_get_callback+0x4e>
	}

	/* If it's open socket, then return no callback */
	if (ports[port].state == PORT_OPEN) {
 80026de:	4a0c      	ldr	r2, [pc, #48]	@ (8002710 <csp_port_get_callback+0x5c>)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d101      	bne.n	80026ee <csp_port_get_callback+0x3a>
		return NULL;
 80026ea:	2300      	movs	r3, #0
 80026ec:	e009      	b.n	8002702 <csp_port_get_callback+0x4e>
	}

	/* Otherwise check if we have a match all callback */
	if (ports[CSP_PORT_MAX_BIND + 1].state == PORT_OPEN_CB) {
 80026ee:	4b08      	ldr	r3, [pc, #32]	@ (8002710 <csp_port_get_callback+0x5c>)
 80026f0:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d103      	bne.n	8002700 <csp_port_get_callback+0x4c>
		return ports[CSP_PORT_MAX_BIND + 1].callback;
 80026f8:	4b05      	ldr	r3, [pc, #20]	@ (8002710 <csp_port_get_callback+0x5c>)
 80026fa:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80026fe:	e000      	b.n	8002702 <csp_port_get_callback+0x4e>
	}

	return NULL;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	200002fc 	.word	0x200002fc

08002714 <csp_port_get_socket>:

csp_socket_t * csp_port_get_socket(unsigned int port) {
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]

	if (port > CSP_PORT_MAX_BIND) {
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002720:	d901      	bls.n	8002726 <csp_port_get_socket+0x12>
		return NULL;
 8002722:	2300      	movs	r3, #0
 8002724:	e01d      	b.n	8002762 <csp_port_get_socket+0x4e>
	}

	if (ports[port].state == PORT_OPEN) {
 8002726:	4a12      	ldr	r2, [pc, #72]	@ (8002770 <csp_port_get_socket+0x5c>)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d105      	bne.n	800273e <csp_port_get_socket+0x2a>
		return ports[port].socket;
 8002732:	4a0f      	ldr	r2, [pc, #60]	@ (8002770 <csp_port_get_socket+0x5c>)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	4413      	add	r3, r2
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	e011      	b.n	8002762 <csp_port_get_socket+0x4e>
	}

	if (ports[port].state == PORT_OPEN_CB) {
 800273e:	4a0c      	ldr	r2, [pc, #48]	@ (8002770 <csp_port_get_socket+0x5c>)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8002746:	2b02      	cmp	r3, #2
 8002748:	d101      	bne.n	800274e <csp_port_get_socket+0x3a>
		return NULL;
 800274a:	2300      	movs	r3, #0
 800274c:	e009      	b.n	8002762 <csp_port_get_socket+0x4e>
	}

	if (ports[CSP_PORT_MAX_BIND + 1].state == PORT_OPEN) {
 800274e:	4b08      	ldr	r3, [pc, #32]	@ (8002770 <csp_port_get_socket+0x5c>)
 8002750:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8002754:	2b01      	cmp	r3, #1
 8002756:	d103      	bne.n	8002760 <csp_port_get_socket+0x4c>
		return ports[CSP_PORT_MAX_BIND + 1].socket;
 8002758:	4b05      	ldr	r3, [pc, #20]	@ (8002770 <csp_port_get_socket+0x5c>)
 800275a:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800275e:	e000      	b.n	8002762 <csp_port_get_socket+0x4e>
	}

	return NULL;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	200002fc 	.word	0x200002fc

08002774 <csp_listen>:

int csp_listen(csp_socket_t * socket, size_t backlog) {
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
	socket->rx_queue = csp_queue_create_static(CSP_CONN_RXQUEUE_LEN, sizeof(csp_packet_t *), socket->rx_queue_static_data, &socket->rx_queue_static);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f103 0254 	add.w	r2, r3, #84	@ 0x54
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3304      	adds	r3, #4
 8002788:	2104      	movs	r1, #4
 800278a:	200a      	movs	r0, #10
 800278c:	f7fe fc64 	bl	8001058 <csp_queue_create_static>
 8002790:	4602      	mov	r2, r0
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	601a      	str	r2, [r3, #0]
	return CSP_ERR_NONE;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <csp_bind>:

int csp_bind(csp_socket_t * socket, uint8_t port) {
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	460b      	mov	r3, r1
 80027aa:	70fb      	strb	r3, [r7, #3]

	if (socket == NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d102      	bne.n	80027b8 <csp_bind+0x18>
		return CSP_ERR_INVAL;
 80027b2:	f06f 0301 	mvn.w	r3, #1
 80027b6:	e026      	b.n	8002806 <csp_bind+0x66>

	if (port == CSP_ANY) {
 80027b8:	78fb      	ldrb	r3, [r7, #3]
 80027ba:	2bff      	cmp	r3, #255	@ 0xff
 80027bc:	d102      	bne.n	80027c4 <csp_bind+0x24>
		port = CSP_PORT_MAX_BIND + 1;
 80027be:	2340      	movs	r3, #64	@ 0x40
 80027c0:	70fb      	strb	r3, [r7, #3]
 80027c2:	e008      	b.n	80027d6 <csp_bind+0x36>
	} else if (port > CSP_PORT_MAX_BIND) {
 80027c4:	78fb      	ldrb	r3, [r7, #3]
 80027c6:	2b3f      	cmp	r3, #63	@ 0x3f
 80027c8:	d905      	bls.n	80027d6 <csp_bind+0x36>
		csp_dbg_errno = CSP_DBG_ERR_INVALID_BIND_PORT;
 80027ca:	4b12      	ldr	r3, [pc, #72]	@ (8002814 <csp_bind+0x74>)
 80027cc:	2208      	movs	r2, #8
 80027ce:	701a      	strb	r2, [r3, #0]
		return CSP_ERR_INVAL;
 80027d0:	f06f 0301 	mvn.w	r3, #1
 80027d4:	e017      	b.n	8002806 <csp_bind+0x66>
	}

	if (ports[port].state != PORT_CLOSED) {
 80027d6:	78fb      	ldrb	r3, [r7, #3]
 80027d8:	4a0f      	ldr	r2, [pc, #60]	@ (8002818 <csp_bind+0x78>)
 80027da:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d005      	beq.n	80027ee <csp_bind+0x4e>
		csp_dbg_errno = CSP_DBG_ERR_PORT_ALREADY_IN_USE;
 80027e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002814 <csp_bind+0x74>)
 80027e4:	2209      	movs	r2, #9
 80027e6:	701a      	strb	r2, [r3, #0]
		return CSP_ERR_USED;
 80027e8:	f06f 0303 	mvn.w	r3, #3
 80027ec:	e00b      	b.n	8002806 <csp_bind+0x66>
	}

	/* Save listener */
	ports[port].socket = socket;
 80027ee:	78fb      	ldrb	r3, [r7, #3]
 80027f0:	4a09      	ldr	r2, [pc, #36]	@ (8002818 <csp_bind+0x78>)
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	4413      	add	r3, r2
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	605a      	str	r2, [r3, #4]
	ports[port].state = PORT_OPEN;
 80027fa:	78fb      	ldrb	r3, [r7, #3]
 80027fc:	4a06      	ldr	r2, [pc, #24]	@ (8002818 <csp_bind+0x78>)
 80027fe:	2101      	movs	r1, #1
 8002800:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]

	return CSP_ERR_NONE;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	2000026e 	.word	0x2000026e
 8002818:	200002fc 	.word	0x200002fc

0800281c <csp_promisc_add>:
	csp_queue_dequeue(csp_promisc_queue, &packet, timeout);

	return packet;
}

void csp_promisc_add(csp_packet_t * packet) {
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]

	if (csp_promisc_enabled == 0)
 8002824:	4b14      	ldr	r3, [pc, #80]	@ (8002878 <csp_promisc_add+0x5c>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d021      	beq.n	8002870 <csp_promisc_add+0x54>
		return;

	if (csp_promisc_queue != NULL) {
 800282c:	4b13      	ldr	r3, [pc, #76]	@ (800287c <csp_promisc_add+0x60>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d01e      	beq.n	8002872 <csp_promisc_add+0x56>
		/* Make a copy of the message and queue it to the promiscuous task */
		csp_packet_t * packet_copy = csp_buffer_clone(packet);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f7fe fdc9 	bl	80013cc <csp_buffer_clone>
 800283a:	4603      	mov	r3, r0
 800283c:	60fb      	str	r3, [r7, #12]
		if (packet_copy != NULL) {
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d016      	beq.n	8002872 <csp_promisc_add+0x56>
			if (csp_queue_enqueue(csp_promisc_queue, &packet_copy, 0) != CSP_QUEUE_OK) {
 8002844:	4b0d      	ldr	r3, [pc, #52]	@ (800287c <csp_promisc_add+0x60>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f107 010c 	add.w	r1, r7, #12
 800284c:	2200      	movs	r2, #0
 800284e:	4618      	mov	r0, r3
 8002850:	f7fe fc16 	bl	8001080 <csp_queue_enqueue>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00b      	beq.n	8002872 <csp_promisc_add+0x56>
				csp_dbg_conn_ovf++;
 800285a:	4b09      	ldr	r3, [pc, #36]	@ (8002880 <csp_promisc_add+0x64>)
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	3301      	adds	r3, #1
 8002860:	b2da      	uxtb	r2, r3
 8002862:	4b07      	ldr	r3, [pc, #28]	@ (8002880 <csp_promisc_add+0x64>)
 8002864:	701a      	strb	r2, [r3, #0]
				csp_buffer_free(packet_copy);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	4618      	mov	r0, r3
 800286a:	f7fe fd6f 	bl	800134c <csp_buffer_free>
 800286e:	e000      	b.n	8002872 <csp_promisc_add+0x56>
		return;
 8002870:	bf00      	nop
			}
		}
	}
}
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	20000508 	.word	0x20000508
 800287c:	20000504 	.word	0x20000504
 8002880:	20000270 	.word	0x20000270

08002884 <csp_qfifo_init>:

static csp_static_queue_t qfifo_queue __attribute__((section(".noinit")));
static csp_queue_handle_t qfifo_queue_handle __attribute__((section(".noinit")));
char qfifo_queue_buffer[sizeof(csp_qfifo_t) * CSP_QFIFO_LEN] __attribute__((section(".noinit")));

void csp_qfifo_init(void) {
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
	qfifo_queue_handle = csp_queue_create_static(CSP_QFIFO_LEN, sizeof(csp_qfifo_t), qfifo_queue_buffer, &qfifo_queue);
 8002888:	4b05      	ldr	r3, [pc, #20]	@ (80028a0 <csp_qfifo_init+0x1c>)
 800288a:	4a06      	ldr	r2, [pc, #24]	@ (80028a4 <csp_qfifo_init+0x20>)
 800288c:	2108      	movs	r1, #8
 800288e:	200a      	movs	r0, #10
 8002890:	f7fe fbe2 	bl	8001058 <csp_queue_create_static>
 8002894:	4603      	mov	r3, r0
 8002896:	4a04      	ldr	r2, [pc, #16]	@ (80028a8 <csp_qfifo_init+0x24>)
 8002898:	6013      	str	r3, [r2, #0]
}
 800289a:	bf00      	nop
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	2000fdb4 	.word	0x2000fdb4
 80028a4:	2000fe08 	.word	0x2000fe08
 80028a8:	2000fe04 	.word	0x2000fe04

080028ac <csp_qfifo_read>:

int csp_qfifo_read(csp_qfifo_t * input) {
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]

	if (csp_queue_dequeue(qfifo_queue_handle, input, FIFO_TIMEOUT) != CSP_QUEUE_OK)
 80028b4:	4b09      	ldr	r3, [pc, #36]	@ (80028dc <csp_qfifo_read+0x30>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f04f 32ff 	mov.w	r2, #4294967295
 80028bc:	6879      	ldr	r1, [r7, #4]
 80028be:	4618      	mov	r0, r3
 80028c0:	f7fe fc0f 	bl	80010e2 <csp_queue_dequeue>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d002      	beq.n	80028d0 <csp_qfifo_read+0x24>
		return CSP_ERR_TIMEDOUT;
 80028ca:	f06f 0302 	mvn.w	r3, #2
 80028ce:	e000      	b.n	80028d2 <csp_qfifo_read+0x26>

	return CSP_ERR_NONE;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	2000fe04 	.word	0x2000fe04

080028e0 <csp_qfifo_write>:

void csp_qfifo_write(csp_packet_t * packet, csp_iface_t * iface, void * pxTaskWoken) {
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b088      	sub	sp, #32
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]

	int result;

	if (packet == NULL) {
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d103      	bne.n	80028fa <csp_qfifo_write+0x1a>
		csp_dbg_errno = CSP_DBG_ERR_INVALID_POINTER;
 80028f2:	4b25      	ldr	r3, [pc, #148]	@ (8002988 <csp_qfifo_write+0xa8>)
 80028f4:	220b      	movs	r2, #11
 80028f6:	701a      	strb	r2, [r3, #0]
		return;
 80028f8:	e042      	b.n	8002980 <csp_qfifo_write+0xa0>
	}

	if (iface == NULL) {
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d10d      	bne.n	800291c <csp_qfifo_write+0x3c>
		csp_dbg_errno = CSP_DBG_ERR_INVALID_POINTER;
 8002900:	4b21      	ldr	r3, [pc, #132]	@ (8002988 <csp_qfifo_write+0xa8>)
 8002902:	220b      	movs	r2, #11
 8002904:	701a      	strb	r2, [r3, #0]
		if (pxTaskWoken == NULL)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d103      	bne.n	8002914 <csp_qfifo_write+0x34>
			csp_buffer_free(packet);
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f7fe fd1d 	bl	800134c <csp_buffer_free>
		else
			csp_buffer_free_isr(packet);
		return;
 8002912:	e035      	b.n	8002980 <csp_qfifo_write+0xa0>
			csp_buffer_free_isr(packet);
 8002914:	68f8      	ldr	r0, [r7, #12]
 8002916:	f7fe fcd5 	bl	80012c4 <csp_buffer_free_isr>
		return;
 800291a:	e031      	b.n	8002980 <csp_qfifo_write+0xa0>
	}

	csp_qfifo_t queue_element;
	queue_element.iface = iface;
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	617b      	str	r3, [r7, #20]
	queue_element.packet = packet;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	61bb      	str	r3, [r7, #24]

	if (pxTaskWoken == NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d109      	bne.n	800293e <csp_qfifo_write+0x5e>
		result = csp_queue_enqueue(qfifo_queue_handle, &queue_element, 1);
 800292a:	4b18      	ldr	r3, [pc, #96]	@ (800298c <csp_qfifo_write+0xac>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f107 0114 	add.w	r1, r7, #20
 8002932:	2201      	movs	r2, #1
 8002934:	4618      	mov	r0, r3
 8002936:	f7fe fba3 	bl	8001080 <csp_queue_enqueue>
 800293a:	61f8      	str	r0, [r7, #28]
 800293c:	e008      	b.n	8002950 <csp_qfifo_write+0x70>
	else
		result = csp_queue_enqueue_isr(qfifo_queue_handle, &queue_element, pxTaskWoken);
 800293e:	4b13      	ldr	r3, [pc, #76]	@ (800298c <csp_qfifo_write+0xac>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f107 0114 	add.w	r1, r7, #20
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	4618      	mov	r0, r3
 800294a:	f7fe fbb3 	bl	80010b4 <csp_queue_enqueue_isr>
 800294e:	61f8      	str	r0, [r7, #28]

	if (result != CSP_QUEUE_OK) {
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d014      	beq.n	8002980 <csp_qfifo_write+0xa0>
		csp_dbg_conn_ovf++;
 8002956:	4b0e      	ldr	r3, [pc, #56]	@ (8002990 <csp_qfifo_write+0xb0>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	3301      	adds	r3, #1
 800295c:	b2da      	uxtb	r2, r3
 800295e:	4b0c      	ldr	r3, [pc, #48]	@ (8002990 <csp_qfifo_write+0xb0>)
 8002960:	701a      	strb	r2, [r3, #0]
		iface->drop++;
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002966:	1c5a      	adds	r2, r3, #1
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	629a      	str	r2, [r3, #40]	@ 0x28
		if (pxTaskWoken == NULL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d103      	bne.n	800297a <csp_qfifo_write+0x9a>
			csp_buffer_free(packet);
 8002972:	68f8      	ldr	r0, [r7, #12]
 8002974:	f7fe fcea 	bl	800134c <csp_buffer_free>
 8002978:	e002      	b.n	8002980 <csp_qfifo_write+0xa0>
		else
			csp_buffer_free_isr(packet);
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f7fe fca2 	bl	80012c4 <csp_buffer_free_isr>
	}
}
 8002980:	3720      	adds	r7, #32
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	2000026e 	.word	0x2000026e
 800298c:	2000fe04 	.word	0x2000fe04
 8002990:	20000270 	.word	0x20000270

08002994 <csp_route_check_options>:
 * Check supported packet options
 * @param iface pointer to incoming interface
 * @param packet pointer to packet
 * @return CSP_ERR_NONE is all options are supported, CSP_ERR_NOTSUP if not
 */
static int csp_route_check_options(csp_iface_t * iface, csp_packet_t * packet) {
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]


#if (CSP_USE_HMAC == 0)
	/* Drop HMAC packets */
	if (packet->id.flags & CSP_FHMAC) {
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	7ddb      	ldrb	r3, [r3, #23]
 80029a2:	f003 0308 	and.w	r3, r3, #8
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00a      	beq.n	80029c0 <csp_route_check_options+0x2c>
		csp_dbg_errno = CSP_DBG_ERR_UNSUPPORTED;
 80029aa:	4b11      	ldr	r3, [pc, #68]	@ (80029f0 <csp_route_check_options+0x5c>)
 80029ac:	2207      	movs	r2, #7
 80029ae:	701a      	strb	r2, [r3, #0]
		iface->autherr++;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b4:	1c5a      	adds	r2, r3, #1
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	62da      	str	r2, [r3, #44]	@ 0x2c
		return CSP_ERR_NOTSUP;
 80029ba:	f06f 0304 	mvn.w	r3, #4
 80029be:	e011      	b.n	80029e4 <csp_route_check_options+0x50>
	}
#endif

#if (CSP_USE_RDP == 0)
	/* Drop RDP packets */
	if (packet->id.flags & CSP_FRDP) {
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	7ddb      	ldrb	r3, [r3, #23]
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00a      	beq.n	80029e2 <csp_route_check_options+0x4e>
		csp_dbg_errno = CSP_DBG_ERR_UNSUPPORTED;
 80029cc:	4b08      	ldr	r3, [pc, #32]	@ (80029f0 <csp_route_check_options+0x5c>)
 80029ce:	2207      	movs	r2, #7
 80029d0:	701a      	strb	r2, [r3, #0]
		iface->rx_error++;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d6:	1c5a      	adds	r2, r3, #1
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	625a      	str	r2, [r3, #36]	@ 0x24
		return CSP_ERR_NOTSUP;
 80029dc:	f06f 0304 	mvn.w	r3, #4
 80029e0:	e000      	b.n	80029e4 <csp_route_check_options+0x50>
	}
#endif
	return CSP_ERR_NONE;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	2000026e 	.word	0x2000026e

080029f4 <csp_route_security_check>:
 * @param security_opts either socket_opts or conn_opts
 * @param iface pointer to incoming interface
 * @param packet pointer to packet
 * @return #CSP_ERR_NONE on success, otherwise an error code.
 */
static int csp_route_security_check(uint32_t security_opts, csp_iface_t * iface, csp_packet_t * packet) {
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]


	/* CRC32 verified packet */
	if (packet->id.flags & CSP_FCRC32) {
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	7ddb      	ldrb	r3, [r3, #23]
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00d      	beq.n	8002a28 <csp_route_security_check+0x34>
		/* Verify CRC32 (does not include header for backwards compatability with csp1.x) */
		if (csp_crc32_verify(packet) != CSP_ERR_NONE) {
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f7fe ffd8 	bl	80019c2 <csp_crc32_verify>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d014      	beq.n	8002a42 <csp_route_security_check+0x4e>
			iface->rx_error++;
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a1c:	1c5a      	adds	r2, r3, #1
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	625a      	str	r2, [r3, #36]	@ 0x24
			return CSP_ERR_CRC32;
 8002a22:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8002a26:	e00d      	b.n	8002a44 <csp_route_security_check+0x50>
		}
	} else if (security_opts & CSP_SO_CRC32REQ) {
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d007      	beq.n	8002a42 <csp_route_security_check+0x4e>
		iface->rx_error++;
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a36:	1c5a      	adds	r2, r3, #1
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	625a      	str	r2, [r3, #36]	@ 0x24
		return CSP_ERR_CRC32;
 8002a3c:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8002a40:	e000      	b.n	8002a44 <csp_route_security_check+0x50>
			return CSP_ERR_INVAL;
		}
	}
#endif

	return CSP_ERR_NONE;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3710      	adds	r7, #16
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <csp_route_work>:
	csp_print_packet("INP: S %u, D %u, Dp %u, Sp %u, Pr %u, Fl 0x%02X, Sz %" PRIu16 " VIA: %s\n",
				   packet->id.src, packet->id.dst, packet->id.dport,
				   packet->id.sport, packet->id.pri, packet->id.flags, packet->length, iface->name);
}

int csp_route_work(void) {
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b08a      	sub	sp, #40	@ 0x28
 8002a50:	af00      	add	r7, sp, #0
	/* Check connection timeouts (currently only for RDP) */
	csp_conn_check_timeouts();
#endif

	/* Get next packet to route */
	if (csp_qfifo_read(&input) != CSP_ERR_NONE) {
 8002a52:	f107 0310 	add.w	r3, r7, #16
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff ff28 	bl	80028ac <csp_qfifo_read>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d002      	beq.n	8002a68 <csp_route_work+0x1c>
		return CSP_ERR_TIMEDOUT;
 8002a62:	f06f 0302 	mvn.w	r3, #2
 8002a66:	e194      	b.n	8002d92 <csp_route_work+0x346>
	}

	packet = input.packet;
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	60fb      	str	r3, [r7, #12]
	if (packet == NULL) {
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d102      	bne.n	8002a78 <csp_route_work+0x2c>
		return CSP_ERR_TIMEDOUT;
 8002a72:	f06f 0302 	mvn.w	r3, #2
 8002a76:	e18c      	b.n	8002d92 <csp_route_work+0x346>
	}

	csp_input_hook(input.iface, packet);
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	4611      	mov	r1, r2
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7fe fb7c 	bl	800117c <csp_input_hook>

	/* Here there be promiscuous mode */
#if (CSP_USE_PROMISC)
	csp_promisc_add(packet);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7ff fec8 	bl	800281c <csp_promisc_add>
#endif

	/* Count the message */
	input.iface->rx++;
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	69da      	ldr	r2, [r3, #28]
 8002a90:	3201      	adds	r2, #1
 8002a92:	61da      	str	r2, [r3, #28]
	input.iface->rxbytes += packet->length;
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	8a9b      	ldrh	r3, [r3, #20]
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	440a      	add	r2, r1
 8002aa2:	639a      	str	r2, [r3, #56]	@ 0x38

	/* The packet is to me, if the address matches that of the incoming interface,
	 * or the address matches the broadcast address of the incoming interface */
	int is_to_me = ((input.iface->addr == packet->id.dst) || (csp_id_is_broadcast(packet->id.dst, input.iface->netmask)));
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	881a      	ldrh	r2, [r3, #0]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8b5b      	ldrh	r3, [r3, #26]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d00a      	beq.n	8002ac6 <csp_route_work+0x7a>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8b5a      	ldrh	r2, [r3, #26]
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	885b      	ldrh	r3, [r3, #2]
 8002ab8:	4619      	mov	r1, r3
 8002aba:	4610      	mov	r0, r2
 8002abc:	f7ff fa70 	bl	8001fa0 <csp_id_is_broadcast>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <csp_route_work+0x7e>
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e000      	b.n	8002acc <csp_route_work+0x80>
 8002aca:	2300      	movs	r3, #0
 8002acc:	627b      	str	r3, [r7, #36]	@ 0x24

	/* Deduplication */
	if ((csp_conf.dedup == CSP_DEDUP_ALL) ||
 8002ace:	4b9c      	ldr	r3, [pc, #624]	@ (8002d40 <csp_route_work+0x2f4>)
 8002ad0:	7d1b      	ldrb	r3, [r3, #20]
 8002ad2:	2b03      	cmp	r3, #3
 8002ad4:	d00d      	beq.n	8002af2 <csp_route_work+0xa6>
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d003      	beq.n	8002ae4 <csp_route_work+0x98>
		((is_to_me) && (csp_conf.dedup == CSP_DEDUP_INCOMING)) ||
 8002adc:	4b98      	ldr	r3, [pc, #608]	@ (8002d40 <csp_route_work+0x2f4>)
 8002ade:	7d1b      	ldrb	r3, [r3, #20]
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d006      	beq.n	8002af2 <csp_route_work+0xa6>
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d114      	bne.n	8002b14 <csp_route_work+0xc8>
		((!is_to_me) && (csp_conf.dedup == CSP_DEDUP_FWD))) {
 8002aea:	4b95      	ldr	r3, [pc, #596]	@ (8002d40 <csp_route_work+0x2f4>)
 8002aec:	7d1b      	ldrb	r3, [r3, #20]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d110      	bne.n	8002b14 <csp_route_work+0xc8>
		if (csp_dedup_is_duplicate(packet)) {
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7fe ffcb 	bl	8001a90 <csp_dedup_is_duplicate>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d009      	beq.n	8002b14 <csp_route_work+0xc8>
			/* Discard packet */
			input.iface->drop++;
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b04:	3201      	adds	r2, #1
 8002b06:	629a      	str	r2, [r3, #40]	@ 0x28
			csp_buffer_free(packet);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7fe fc1e 	bl	800134c <csp_buffer_free>
			return CSP_ERR_NONE;
 8002b10:	2300      	movs	r3, #0
 8002b12:	e13e      	b.n	8002d92 <csp_route_work+0x346>
		}
	}

	/* If the message is not to me, route the message to the correct interface */
	if (!is_to_me) {
 8002b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d12b      	bne.n	8002b72 <csp_route_work+0x126>

		/* Find the destination interface */
		csp_route_t * route = csp_rtable_find_route(packet->id.dst);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	8b5b      	ldrh	r3, [r3, #26]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f000 f97c 	bl	8002e1c <csp_rtable_find_route>
 8002b24:	61b8      	str	r0, [r7, #24]

		/* If the message resolves to the input interface, don't loop it back out */
		if ((route == NULL) || ((route->iface == input.iface) && (input.iface->split_horizon_off == 0))) {
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d008      	beq.n	8002b3e <csp_route_work+0xf2>
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	689a      	ldr	r2, [r3, #8]
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d109      	bne.n	8002b4a <csp_route_work+0xfe>
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	7d9b      	ldrb	r3, [r3, #22]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d105      	bne.n	8002b4a <csp_route_work+0xfe>
			csp_buffer_free(packet);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7fe fc03 	bl	800134c <csp_buffer_free>
			return CSP_ERR_NONE;
 8002b46:	2300      	movs	r3, #0
 8002b48:	e123      	b.n	8002d92 <csp_route_work+0x346>
		}

		/* Otherwise, actually send the message */
		if (csp_send_direct(packet->id, packet, 0) != CSP_ERR_NONE) {
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	f8d3 1016 	ldr.w	r1, [r3, #22]
 8002b52:	4608      	mov	r0, r1
 8002b54:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8002b58:	4619      	mov	r1, r3
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	f7ff fb58 	bl	8002210 <csp_send_direct>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <csp_route_work+0x122>
			csp_buffer_free(packet);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7fe fbef 	bl	800134c <csp_buffer_free>
		}

		/* Next message, please */
		return CSP_ERR_NONE;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	e10f      	b.n	8002d92 <csp_route_work+0x346>
	}

	/* Discard packets with unsupported options */
	if (csp_route_check_options(input.iface, packet) != CSP_ERR_NONE) {
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	4611      	mov	r1, r2
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7ff ff0b 	bl	8002994 <csp_route_check_options>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d005      	beq.n	8002b90 <csp_route_work+0x144>
		csp_buffer_free(packet);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7fe fbe0 	bl	800134c <csp_buffer_free>
		return CSP_ERR_NONE;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	e100      	b.n	8002d92 <csp_route_work+0x346>
	}

	/**
	 * Callbacks 
	 */
	csp_callback_t callback = csp_port_get_callback(packet->id.dport);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	7f1b      	ldrb	r3, [r3, #28]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff fd8d 	bl	80026b4 <csp_port_get_callback>
 8002b9a:	6238      	str	r0, [r7, #32]
	if (callback) {
 8002b9c:	6a3b      	ldr	r3, [r7, #32]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d014      	beq.n	8002bcc <csp_route_work+0x180>

		if (csp_route_security_check(CSP_SO_NONE, input.iface, packet) < 0) {
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	2000      	movs	r0, #0
 8002baa:	f7ff ff23 	bl	80029f4 <csp_route_security_check>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	da05      	bge.n	8002bc0 <csp_route_work+0x174>
			csp_buffer_free(packet);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7fe fbc8 	bl	800134c <csp_buffer_free>
			return CSP_ERR_NONE;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	e0e8      	b.n	8002d92 <csp_route_work+0x346>
		}

		callback(packet);
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	6a3b      	ldr	r3, [r7, #32]
 8002bc4:	4610      	mov	r0, r2
 8002bc6:	4798      	blx	r3
		return CSP_ERR_NONE;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	e0e2      	b.n	8002d92 <csp_route_work+0x346>
	/**
	 * Sockets 
	 */

	/* The message is to me, search for incoming socket */
	socket = csp_port_get_socket(packet->id.dport);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	7f1b      	ldrb	r3, [r3, #28]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7ff fd9f 	bl	8002714 <csp_port_get_socket>
 8002bd6:	61f8      	str	r0, [r7, #28]

	/* If the socket is connection-less, deliver now */
	if (socket && (socket->opts & CSP_SO_CONN_LESS)) {
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d02e      	beq.n	8002c3c <csp_route_work+0x1f0>
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002be2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d028      	beq.n	8002c3c <csp_route_work+0x1f0>

		if (csp_route_security_check(socket->opts, input.iface, packet) < 0) {
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002bee:	6939      	ldr	r1, [r7, #16]
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7ff fefe 	bl	80029f4 <csp_route_security_check>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	da05      	bge.n	8002c0a <csp_route_work+0x1be>
			csp_buffer_free(packet);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7fe fba3 	bl	800134c <csp_buffer_free>
			return CSP_ERR_NONE;
 8002c06:	2300      	movs	r3, #0
 8002c08:	e0c3      	b.n	8002d92 <csp_route_work+0x346>
		}

		if (csp_queue_enqueue(socket->rx_queue, &packet, 0) != CSP_QUEUE_OK) {
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f107 010c 	add.w	r1, r7, #12
 8002c12:	2200      	movs	r2, #0
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7fe fa33 	bl	8001080 <csp_queue_enqueue>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d00b      	beq.n	8002c38 <csp_route_work+0x1ec>
			csp_dbg_conn_ovf++;
 8002c20:	4b48      	ldr	r3, [pc, #288]	@ (8002d44 <csp_route_work+0x2f8>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	3301      	adds	r3, #1
 8002c26:	b2da      	uxtb	r2, r3
 8002c28:	4b46      	ldr	r3, [pc, #280]	@ (8002d44 <csp_route_work+0x2f8>)
 8002c2a:	701a      	strb	r2, [r3, #0]
			csp_buffer_free(packet);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7fe fb8c 	bl	800134c <csp_buffer_free>
			return 0;
 8002c34:	2300      	movs	r3, #0
 8002c36:	e0ac      	b.n	8002d92 <csp_route_work+0x346>
		}
		
		return CSP_ERR_NONE;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	e0aa      	b.n	8002d92 <csp_route_work+0x346>
	}

	/* Search for an existing connection */
	conn = csp_conn_find_existing(&packet->id);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	3316      	adds	r3, #22
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7fe fc63 	bl	800150c <csp_conn_find_existing>
 8002c46:	4603      	mov	r3, r0
 8002c48:	60bb      	str	r3, [r7, #8]

	/* If this is an incoming packet on a new connection */
	if (conn == NULL) {
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d150      	bne.n	8002cf2 <csp_route_work+0x2a6>

		/* Reject packet if no matching socket is found */
		if (!socket) {
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d105      	bne.n	8002c62 <csp_route_work+0x216>
			csp_buffer_free(packet);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7fe fb77 	bl	800134c <csp_buffer_free>
			return CSP_ERR_NONE;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	e097      	b.n	8002d92 <csp_route_work+0x346>
		}

		/* Run security check on incoming packet */
		if (csp_route_security_check(socket->opts, input.iface, packet) < 0) {
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c66:	6939      	ldr	r1, [r7, #16]
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7ff fec2 	bl	80029f4 <csp_route_security_check>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	da05      	bge.n	8002c82 <csp_route_work+0x236>
			csp_buffer_free(packet);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7fe fb67 	bl	800134c <csp_buffer_free>
			return CSP_ERR_NONE;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	e087      	b.n	8002d92 <csp_route_work+0x346>
		}

		/* New incoming connection accepted */
		csp_id_t idout;
		idout.pri = packet->id.pri;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	7d9b      	ldrb	r3, [r3, #22]
 8002c86:	703b      	strb	r3, [r7, #0]
		idout.src = packet->id.dst;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8b5b      	ldrh	r3, [r3, #26]
 8002c8c:	807b      	strh	r3, [r7, #2]
		idout.dst = packet->id.src;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8b1b      	ldrh	r3, [r3, #24]
 8002c92:	80bb      	strh	r3, [r7, #4]
		idout.dport = packet->id.sport;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	7f5b      	ldrb	r3, [r3, #29]
 8002c98:	71bb      	strb	r3, [r7, #6]
		idout.sport = packet->id.dport;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	7f1b      	ldrb	r3, [r3, #28]
 8002c9e:	71fb      	strb	r3, [r7, #7]
		idout.flags = packet->id.flags;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	7ddb      	ldrb	r3, [r3, #23]
 8002ca4:	707b      	strb	r3, [r7, #1]

		/* Create connection */
		conn = csp_conn_new(packet->id, idout);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f8d3 2016 	ldr.w	r2, [r3, #22]
 8002cac:	4610      	mov	r0, r2
 8002cae:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	463b      	mov	r3, r7
 8002cb6:	cb0c      	ldmia	r3, {r2, r3}
 8002cb8:	f7fe fd0e 	bl	80016d8 <csp_conn_new>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	60bb      	str	r3, [r7, #8]

		if (!conn) {
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10b      	bne.n	8002cde <csp_route_work+0x292>
			csp_dbg_conn_out++;
 8002cc6:	4b20      	ldr	r3, [pc, #128]	@ (8002d48 <csp_route_work+0x2fc>)
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	3301      	adds	r3, #1
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	4b1e      	ldr	r3, [pc, #120]	@ (8002d48 <csp_route_work+0x2fc>)
 8002cd0:	701a      	strb	r2, [r3, #0]
			csp_buffer_free(packet);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7fe fb39 	bl	800134c <csp_buffer_free>
			return CSP_ERR_NONE;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	e059      	b.n	8002d92 <csp_route_work+0x346>
		}

		/* Store the socket queue and options */
		conn->dest_socket = socket;
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	69fa      	ldr	r2, [r7, #28]
 8002ce2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
		conn->opts = socket->opts;
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	69fa      	ldr	r2, [r7, #28]
 8002cea:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 8002cec:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 8002cf0:	e010      	b.n	8002d14 <csp_route_work+0x2c8>

		/* Packet to existing connection */
	} else {

		/* Run security check on incoming packet */
		if (csp_route_security_check(conn->opts, input.iface, packet) < 0) {
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002cf8:	6939      	ldr	r1, [r7, #16]
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff fe79 	bl	80029f4 <csp_route_security_check>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	da05      	bge.n	8002d14 <csp_route_work+0x2c8>
			csp_buffer_free(packet);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7fe fb1e 	bl	800134c <csp_buffer_free>
			return CSP_ERR_NONE;
 8002d10:	2300      	movs	r3, #0
 8002d12:	e03e      	b.n	8002d92 <csp_route_work+0x346>
		return CSP_ERR_NONE;
	}
#endif

	/* Otherwise, enqueue directly */
	if (csp_conn_enqueue_packet(conn, packet) < 0) {
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	4611      	mov	r1, r2
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7fe fb96 	bl	800144c <csp_conn_enqueue_packet>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	da12      	bge.n	8002d4c <csp_route_work+0x300>
		csp_dbg_conn_ovf++;
 8002d26:	4b07      	ldr	r3, [pc, #28]	@ (8002d44 <csp_route_work+0x2f8>)
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	4b05      	ldr	r3, [pc, #20]	@ (8002d44 <csp_route_work+0x2f8>)
 8002d30:	701a      	strb	r2, [r3, #0]
		csp_buffer_free(packet);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7fe fb09 	bl	800134c <csp_buffer_free>
		return CSP_ERR_NONE;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	e029      	b.n	8002d92 <csp_route_work+0x346>
 8002d3e:	bf00      	nop
 8002d40:	20000000 	.word	0x20000000
 8002d44:	20000270 	.word	0x20000270
 8002d48:	2000026f 	.word	0x2000026f
	}

	/* Try to queue up the new connection pointer */
	if (conn->dest_socket != NULL) {
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d01c      	beq.n	8002d90 <csp_route_work+0x344>
		if (csp_queue_enqueue(conn->dest_socket->rx_queue, &conn, 0) != CSP_QUEUE_OK) {
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f107 0108 	add.w	r1, r7, #8
 8002d62:	2200      	movs	r2, #0
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7fe f98b 	bl	8001080 <csp_queue_enqueue>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00b      	beq.n	8002d88 <csp_route_work+0x33c>
			csp_dbg_conn_ovf++;
 8002d70:	4b0a      	ldr	r3, [pc, #40]	@ (8002d9c <csp_route_work+0x350>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	3301      	adds	r3, #1
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	4b08      	ldr	r3, [pc, #32]	@ (8002d9c <csp_route_work+0x350>)
 8002d7a:	701a      	strb	r2, [r3, #0]
			csp_close(conn);
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7fe fcd8 	bl	8001734 <csp_close>
			return CSP_ERR_NONE;
 8002d84:	2300      	movs	r3, #0
 8002d86:	e004      	b.n	8002d92 <csp_route_work+0x346>
		}

		/* Ensure that this connection will not be posted to this socket again */
		conn->dest_socket = NULL;
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	}

	return CSP_ERR_NONE;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3728      	adds	r7, #40	@ 0x28
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	20000270 	.word	0x20000270

08002da0 <csp_rtable_find_exact>:
/* Definition of routing table */
static csp_route_t rtable[CSP_RTABLE_SIZE] = {0};

static int rtable_inptr = 0;

static csp_route_t * csp_rtable_find_exact(uint16_t addr, uint16_t netmask) {
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	4603      	mov	r3, r0
 8002da8:	460a      	mov	r2, r1
 8002daa:	80fb      	strh	r3, [r7, #6]
 8002dac:	4613      	mov	r3, r2
 8002dae:	80bb      	strh	r3, [r7, #4]

	/* Start search */
	for (int i = 0; i < rtable_inptr; i++) {
 8002db0:	2300      	movs	r3, #0
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	e021      	b.n	8002dfa <csp_rtable_find_exact+0x5a>
		if (rtable[i].address == addr && rtable[i].netmask == netmask) {
 8002db6:	4917      	ldr	r1, [pc, #92]	@ (8002e14 <csp_rtable_find_exact+0x74>)
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	4413      	add	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	440b      	add	r3, r1
 8002dc4:	881b      	ldrh	r3, [r3, #0]
 8002dc6:	88fa      	ldrh	r2, [r7, #6]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d113      	bne.n	8002df4 <csp_rtable_find_exact+0x54>
 8002dcc:	4911      	ldr	r1, [pc, #68]	@ (8002e14 <csp_rtable_find_exact+0x74>)
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	4413      	add	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	440b      	add	r3, r1
 8002dda:	3302      	adds	r3, #2
 8002ddc:	881b      	ldrh	r3, [r3, #0]
 8002dde:	88ba      	ldrh	r2, [r7, #4]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d107      	bne.n	8002df4 <csp_rtable_find_exact+0x54>
			return &rtable[i];
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	4613      	mov	r3, r2
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	4413      	add	r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	4a09      	ldr	r2, [pc, #36]	@ (8002e14 <csp_rtable_find_exact+0x74>)
 8002df0:	4413      	add	r3, r2
 8002df2:	e008      	b.n	8002e06 <csp_rtable_find_exact+0x66>
	for (int i = 0; i < rtable_inptr; i++) {
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	3301      	adds	r3, #1
 8002df8:	60fb      	str	r3, [r7, #12]
 8002dfa:	4b07      	ldr	r3, [pc, #28]	@ (8002e18 <csp_rtable_find_exact+0x78>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	dbd8      	blt.n	8002db6 <csp_rtable_find_exact+0x16>
		}
	}

	return NULL;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3714      	adds	r7, #20
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	2000050c 	.word	0x2000050c
 8002e18:	20000584 	.word	0x20000584

08002e1c <csp_rtable_find_route>:

csp_route_t * csp_rtable_find_route(uint16_t addr) {
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b088      	sub	sp, #32
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	4603      	mov	r3, r0
 8002e24:	80fb      	strh	r3, [r7, #6]

	/* Remember best result */
	int best_result = -1;
 8002e26:	f04f 33ff 	mov.w	r3, #4294967295
 8002e2a:	61fb      	str	r3, [r7, #28]
	uint16_t best_result_mask = 0;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	837b      	strh	r3, [r7, #26]

	/* Start search */
	for (int i = 0; i < rtable_inptr; i++) {
 8002e30:	2300      	movs	r3, #0
 8002e32:	617b      	str	r3, [r7, #20]
 8002e34:	e043      	b.n	8002ebe <csp_rtable_find_route+0xa2>

		uint16_t hostbits = (1 << (csp_id_get_host_bits() - rtable[i].netmask)) - 1;
 8002e36:	f7ff f8a3 	bl	8001f80 <csp_id_get_host_bits>
 8002e3a:	4601      	mov	r1, r0
 8002e3c:	482a      	ldr	r0, [pc, #168]	@ (8002ee8 <csp_rtable_find_route+0xcc>)
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	4613      	mov	r3, r2
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	4413      	add	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4403      	add	r3, r0
 8002e4a:	3302      	adds	r3, #2
 8002e4c:	881b      	ldrh	r3, [r3, #0]
 8002e4e:	1acb      	subs	r3, r1, r3
 8002e50:	2201      	movs	r2, #1
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	827b      	strh	r3, [r7, #18]
		uint16_t netbits = ~hostbits;
 8002e5c:	8a7b      	ldrh	r3, [r7, #18]
 8002e5e:	43db      	mvns	r3, r3
 8002e60:	823b      	strh	r3, [r7, #16]

		/* Match network addresses */
		uint16_t net_a = rtable[i].address & netbits;
 8002e62:	4921      	ldr	r1, [pc, #132]	@ (8002ee8 <csp_rtable_find_route+0xcc>)
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	4613      	mov	r3, r2
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	4413      	add	r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	440b      	add	r3, r1
 8002e70:	881a      	ldrh	r2, [r3, #0]
 8002e72:	8a3b      	ldrh	r3, [r7, #16]
 8002e74:	4013      	ands	r3, r2
 8002e76:	81fb      	strh	r3, [r7, #14]
		uint16_t net_b = addr & netbits;
 8002e78:	88fa      	ldrh	r2, [r7, #6]
 8002e7a:	8a3b      	ldrh	r3, [r7, #16]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	81bb      	strh	r3, [r7, #12]

		/* We have a match */
		if (net_a == net_b) {
 8002e80:	89fa      	ldrh	r2, [r7, #14]
 8002e82:	89bb      	ldrh	r3, [r7, #12]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d117      	bne.n	8002eb8 <csp_rtable_find_route+0x9c>
			if (rtable[i].netmask >= best_result_mask) {
 8002e88:	4917      	ldr	r1, [pc, #92]	@ (8002ee8 <csp_rtable_find_route+0xcc>)
 8002e8a:	697a      	ldr	r2, [r7, #20]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	4413      	add	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	3302      	adds	r3, #2
 8002e98:	881b      	ldrh	r3, [r3, #0]
 8002e9a:	8b7a      	ldrh	r2, [r7, #26]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d80b      	bhi.n	8002eb8 <csp_rtable_find_route+0x9c>
				best_result = i;
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	61fb      	str	r3, [r7, #28]
				best_result_mask = rtable[i].netmask;
 8002ea4:	4910      	ldr	r1, [pc, #64]	@ (8002ee8 <csp_rtable_find_route+0xcc>)
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	4413      	add	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	440b      	add	r3, r1
 8002eb2:	3302      	adds	r3, #2
 8002eb4:	881b      	ldrh	r3, [r3, #0]
 8002eb6:	837b      	strh	r3, [r7, #26]
	for (int i = 0; i < rtable_inptr; i++) {
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	3301      	adds	r3, #1
 8002ebc:	617b      	str	r3, [r7, #20]
 8002ebe:	4b0b      	ldr	r3, [pc, #44]	@ (8002eec <csp_rtable_find_route+0xd0>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	dbb6      	blt.n	8002e36 <csp_rtable_find_route+0x1a>
			}
		}
	}

	if (best_result > -1) {
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	db07      	blt.n	8002ede <csp_rtable_find_route+0xc2>
		return &rtable[best_result];
 8002ece:	69fa      	ldr	r2, [r7, #28]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	4413      	add	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	4a03      	ldr	r2, [pc, #12]	@ (8002ee8 <csp_rtable_find_route+0xcc>)
 8002eda:	4413      	add	r3, r2
 8002edc:	e000      	b.n	8002ee0 <csp_rtable_find_route+0xc4>
	}

	return NULL;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3720      	adds	r7, #32
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	2000050c 	.word	0x2000050c
 8002eec:	20000584 	.word	0x20000584

08002ef0 <csp_rtable_set_internal>:

int csp_rtable_set_internal(uint16_t address, uint16_t netmask, csp_iface_t * ifc, uint16_t via) {
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60ba      	str	r2, [r7, #8]
 8002ef8:	461a      	mov	r2, r3
 8002efa:	4603      	mov	r3, r0
 8002efc:	81fb      	strh	r3, [r7, #14]
 8002efe:	460b      	mov	r3, r1
 8002f00:	81bb      	strh	r3, [r7, #12]
 8002f02:	4613      	mov	r3, r2
 8002f04:	80fb      	strh	r3, [r7, #6]

	/* First see if the entry exists */
	csp_route_t * entry = csp_rtable_find_exact(address, netmask);
 8002f06:	89ba      	ldrh	r2, [r7, #12]
 8002f08:	89fb      	ldrh	r3, [r7, #14]
 8002f0a:	4611      	mov	r1, r2
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7ff ff47 	bl	8002da0 <csp_rtable_find_exact>
 8002f12:	6178      	str	r0, [r7, #20]

	/* If not, create a new one */
	if (!entry) {
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d112      	bne.n	8002f40 <csp_rtable_set_internal+0x50>
		entry = &rtable[rtable_inptr++];
 8002f1a:	4b12      	ldr	r3, [pc, #72]	@ (8002f64 <csp_rtable_set_internal+0x74>)
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	1c53      	adds	r3, r2, #1
 8002f20:	4910      	ldr	r1, [pc, #64]	@ (8002f64 <csp_rtable_set_internal+0x74>)
 8002f22:	600b      	str	r3, [r1, #0]
 8002f24:	4613      	mov	r3, r2
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	4413      	add	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4a0e      	ldr	r2, [pc, #56]	@ (8002f68 <csp_rtable_set_internal+0x78>)
 8002f2e:	4413      	add	r3, r2
 8002f30:	617b      	str	r3, [r7, #20]
		if (rtable_inptr == CSP_RTABLE_SIZE)
 8002f32:	4b0c      	ldr	r3, [pc, #48]	@ (8002f64 <csp_rtable_set_internal+0x74>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2b0a      	cmp	r3, #10
 8002f38:	d102      	bne.n	8002f40 <csp_rtable_set_internal+0x50>
			rtable_inptr = CSP_RTABLE_SIZE;
 8002f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8002f64 <csp_rtable_set_internal+0x74>)
 8002f3c:	220a      	movs	r2, #10
 8002f3e:	601a      	str	r2, [r3, #0]
	}

	/* Fill in the data */
	entry->address = address;
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	89fa      	ldrh	r2, [r7, #14]
 8002f44:	801a      	strh	r2, [r3, #0]
	entry->netmask = netmask;
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	89ba      	ldrh	r2, [r7, #12]
 8002f4a:	805a      	strh	r2, [r3, #2]
	entry->iface = ifc;
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	68ba      	ldr	r2, [r7, #8]
 8002f50:	609a      	str	r2, [r3, #8]
	entry->via = via;
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	88fa      	ldrh	r2, [r7, #6]
 8002f56:	809a      	strh	r2, [r3, #4]

	return CSP_ERR_NONE;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3718      	adds	r7, #24
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	20000584 	.word	0x20000584
 8002f68:	2000050c 	.word	0x2000050c

08002f6c <csp_rtable_set>:

void csp_rtable_clear(void) {
	csp_rtable_free();
}

int csp_rtable_set(uint16_t address, int netmask, csp_iface_t * ifc, uint16_t via) {
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60b9      	str	r1, [r7, #8]
 8002f74:	607a      	str	r2, [r7, #4]
 8002f76:	461a      	mov	r2, r3
 8002f78:	4603      	mov	r3, r0
 8002f7a:	81fb      	strh	r3, [r7, #14]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	81bb      	strh	r3, [r7, #12]
//address ở đây là địa chỉ đích của node hoặc mạng con mà bạn muốn thêm vào bảng định tuyến (routing table).
	if ((netmask < 0) || (netmask > (int)csp_id_get_host_bits())) {
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	db06      	blt.n	8002f94 <csp_rtable_set+0x28>
 8002f86:	f7fe fffb 	bl	8001f80 <csp_id_get_host_bits>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	4293      	cmp	r3, r2
 8002f92:	dd03      	ble.n	8002f9c <csp_rtable_set+0x30>
		netmask = csp_id_get_host_bits();
 8002f94:	f7fe fff4 	bl	8001f80 <csp_id_get_host_bits>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	60bb      	str	r3, [r7, #8]
	}

	/* Validates options */
	if ((ifc == NULL) || (netmask > (int)csp_id_get_host_bits())) {
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d006      	beq.n	8002fb0 <csp_rtable_set+0x44>
 8002fa2:	f7fe ffed 	bl	8001f80 <csp_id_get_host_bits>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	461a      	mov	r2, r3
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	4293      	cmp	r3, r2
 8002fae:	dd05      	ble.n	8002fbc <csp_rtable_set+0x50>
		csp_dbg_errno = CSP_DBG_ERR_INVALID_RTABLE_ENTRY; 
 8002fb0:	4b08      	ldr	r3, [pc, #32]	@ (8002fd4 <csp_rtable_set+0x68>)
 8002fb2:	2206      	movs	r2, #6
 8002fb4:	701a      	strb	r2, [r3, #0]
		return CSP_ERR_INVAL;
 8002fb6:	f06f 0301 	mvn.w	r3, #1
 8002fba:	e007      	b.n	8002fcc <csp_rtable_set+0x60>
	}

	return csp_rtable_set_internal(address, netmask, ifc, via);
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	b299      	uxth	r1, r3
 8002fc0:	89bb      	ldrh	r3, [r7, #12]
 8002fc2:	89f8      	ldrh	r0, [r7, #14]
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	f7ff ff93 	bl	8002ef0 <csp_rtable_set_internal>
 8002fca:	4603      	mov	r3, r0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	2000026e 	.word	0x2000026e

08002fd8 <do_cmp_ident>:

void csp_cmp_set_memcpy(csp_memcpy_fnc_t fnc) {
	csp_cmp_memcpy_fnc = fnc;
}

static int do_cmp_ident(struct csp_cmp_message * cmp) {
 8002fd8:	b590      	push	{r4, r7, lr}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]

	/* Copy revision */
	strncpy(cmp->ident.revision, csp_conf.revision, CSP_CMP_IDENT_REV_LEN);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	3334      	adds	r3, #52	@ 0x34
 8002fe4:	4a20      	ldr	r2, [pc, #128]	@ (8003068 <do_cmp_ident+0x90>)
 8002fe6:	68d1      	ldr	r1, [r2, #12]
 8002fe8:	2214      	movs	r2, #20
 8002fea:	4618      	mov	r0, r3
 8002fec:	f007 feaf 	bl	800ad4e <strncpy>
	cmp->ident.revision[CSP_CMP_IDENT_REV_LEN - 1] = '\0';
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

	/* Copy compilation date */
	strncpy(cmp->ident.date, __DATE__, CSP_CMP_IDENT_DATE_LEN);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	3348      	adds	r3, #72	@ 0x48
 8002ffc:	4a1b      	ldr	r2, [pc, #108]	@ (800306c <do_cmp_ident+0x94>)
 8002ffe:	461c      	mov	r4, r3
 8003000:	4613      	mov	r3, r2
 8003002:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003004:	6020      	str	r0, [r4, #0]
 8003006:	6061      	str	r1, [r4, #4]
 8003008:	60a2      	str	r2, [r4, #8]
	cmp->ident.date[CSP_CMP_IDENT_DATE_LEN - 1] = '\0';
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53

	/* Copy compilation time */
	strncpy(cmp->ident.time, __TIME__, CSP_CMP_IDENT_TIME_LEN);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	3354      	adds	r3, #84	@ 0x54
 8003016:	4916      	ldr	r1, [pc, #88]	@ (8003070 <do_cmp_ident+0x98>)
 8003018:	461a      	mov	r2, r3
 800301a:	460b      	mov	r3, r1
 800301c:	cb03      	ldmia	r3!, {r0, r1}
 800301e:	6010      	str	r0, [r2, #0]
 8003020:	6051      	str	r1, [r2, #4]
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	7213      	strb	r3, [r2, #8]
	cmp->ident.time[CSP_CMP_IDENT_TIME_LEN - 1] = '\0';
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

	/* Copy hostname */
	strncpy(cmp->ident.hostname, csp_conf.hostname, CSP_HOSTNAME_LEN);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	3302      	adds	r3, #2
 8003032:	4a0d      	ldr	r2, [pc, #52]	@ (8003068 <do_cmp_ident+0x90>)
 8003034:	6851      	ldr	r1, [r2, #4]
 8003036:	2214      	movs	r2, #20
 8003038:	4618      	mov	r0, r3
 800303a:	f007 fe88 	bl	800ad4e <strncpy>
	cmp->ident.hostname[CSP_HOSTNAME_LEN - 1] = '\0';
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	755a      	strb	r2, [r3, #21]

	/* Copy model name */
	strncpy(cmp->ident.model, csp_conf.model, CSP_MODEL_LEN);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3316      	adds	r3, #22
 8003048:	4a07      	ldr	r2, [pc, #28]	@ (8003068 <do_cmp_ident+0x90>)
 800304a:	6891      	ldr	r1, [r2, #8]
 800304c:	221e      	movs	r2, #30
 800304e:	4618      	mov	r0, r3
 8003050:	f007 fe7d 	bl	800ad4e <strncpy>
	cmp->ident.model[CSP_MODEL_LEN - 1] = '\0';
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

	return CSP_ERR_NONE;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	bd90      	pop	{r4, r7, pc}
 8003066:	bf00      	nop
 8003068:	20000000 	.word	0x20000000
 800306c:	0800e514 	.word	0x0800e514
 8003070:	0800e520 	.word	0x0800e520

08003074 <do_cmp_route_set_v1>:

static int do_cmp_route_set_v1(struct csp_cmp_message * cmp) {
 8003074:	b590      	push	{r4, r7, lr}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]

	csp_iface_t * ifc = csp_iflist_get_by_name(cmp->route_set_v1.interface);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	3304      	adds	r3, #4
 8003080:	4618      	mov	r0, r3
 8003082:	f7fe ffeb 	bl	800205c <csp_iflist_get_by_name>
 8003086:	60f8      	str	r0, [r7, #12]
	if (ifc == NULL) {
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d102      	bne.n	8003094 <do_cmp_route_set_v1+0x20>
		return CSP_ERR_INVAL;
 800308e:	f06f 0301 	mvn.w	r3, #1
 8003092:	e013      	b.n	80030bc <do_cmp_route_set_v1+0x48>
	}

	if (csp_rtable_set(cmp->route_set_v1.dest_node, csp_id_get_host_bits(), ifc, cmp->route_set_v1.next_hop_via) != CSP_ERR_NONE) {
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	789b      	ldrb	r3, [r3, #2]
 8003098:	461c      	mov	r4, r3
 800309a:	f7fe ff71 	bl	8001f80 <csp_id_get_host_bits>
 800309e:	4603      	mov	r3, r0
 80030a0:	4619      	mov	r1, r3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	78db      	ldrb	r3, [r3, #3]
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	4620      	mov	r0, r4
 80030aa:	f7ff ff5f 	bl	8002f6c <csp_rtable_set>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d002      	beq.n	80030ba <do_cmp_route_set_v1+0x46>
		return CSP_ERR_INVAL;
 80030b4:	f06f 0301 	mvn.w	r3, #1
 80030b8:	e000      	b.n	80030bc <do_cmp_route_set_v1+0x48>
	}

	return CSP_ERR_NONE;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3714      	adds	r7, #20
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd90      	pop	{r4, r7, pc}

080030c4 <do_cmp_route_set_v2>:

static int do_cmp_route_set_v2(struct csp_cmp_message * cmp) {
 80030c4:	b5b0      	push	{r4, r5, r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]

	csp_iface_t * ifc = csp_iflist_get_by_name(cmp->route_set_v2.interface);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	3308      	adds	r3, #8
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7fe ffc3 	bl	800205c <csp_iflist_get_by_name>
 80030d6:	60f8      	str	r0, [r7, #12]
	if (ifc == NULL) {
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d102      	bne.n	80030e4 <do_cmp_route_set_v2+0x20>
		return CSP_ERR_INVAL;
 80030de:	f06f 0301 	mvn.w	r3, #1
 80030e2:	e022      	b.n	800312a <do_cmp_route_set_v2+0x66>
	}

	if (csp_rtable_set(csp_betoh16(cmp->route_set_v2.dest_node), csp_betoh16(cmp->route_set_v2.netmask), ifc, csp_betoh16(cmp->route_set_v2.next_hop_via)) != CSP_ERR_NONE) {
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	885b      	ldrh	r3, [r3, #2]
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7fe fe31 	bl	8001d52 <csp_betoh16>
 80030f0:	4603      	mov	r3, r0
 80030f2:	461c      	mov	r4, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	88db      	ldrh	r3, [r3, #6]
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7fe fe29 	bl	8001d52 <csp_betoh16>
 8003100:	4603      	mov	r3, r0
 8003102:	461d      	mov	r5, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	889b      	ldrh	r3, [r3, #4]
 8003108:	b29b      	uxth	r3, r3
 800310a:	4618      	mov	r0, r3
 800310c:	f7fe fe21 	bl	8001d52 <csp_betoh16>
 8003110:	4603      	mov	r3, r0
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	4629      	mov	r1, r5
 8003116:	4620      	mov	r0, r4
 8003118:	f7ff ff28 	bl	8002f6c <csp_rtable_set>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d002      	beq.n	8003128 <do_cmp_route_set_v2+0x64>
		return CSP_ERR_INVAL;
 8003122:	f06f 0301 	mvn.w	r3, #1
 8003126:	e000      	b.n	800312a <do_cmp_route_set_v2+0x66>
	}

	return CSP_ERR_NONE;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bdb0      	pop	{r4, r5, r7, pc}

08003132 <do_cmp_if_stats>:

static int do_cmp_if_stats(struct csp_cmp_message * cmp) {
 8003132:	b580      	push	{r7, lr}
 8003134:	b084      	sub	sp, #16
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]

	csp_iface_t * ifc = csp_iflist_get_by_name(cmp->if_stats.interface);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	3302      	adds	r3, #2
 800313e:	4618      	mov	r0, r3
 8003140:	f7fe ff8c 	bl	800205c <csp_iflist_get_by_name>
 8003144:	60f8      	str	r0, [r7, #12]
	if (ifc == NULL)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d102      	bne.n	8003152 <do_cmp_if_stats+0x20>
		return CSP_ERR_INVAL;
 800314c:	f06f 0301 	mvn.w	r3, #1
 8003150:	e05a      	b.n	8003208 <do_cmp_if_stats+0xd6>

	cmp->if_stats.tx = csp_htobe32(ifc->tx);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	4618      	mov	r0, r3
 8003158:	f7fe fe09 	bl	8001d6e <csp_htobe32>
 800315c:	4602      	mov	r2, r0
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f8c3 200d 	str.w	r2, [r3, #13]
	cmp->if_stats.rx = csp_htobe32(ifc->rx);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	69db      	ldr	r3, [r3, #28]
 8003168:	4618      	mov	r0, r3
 800316a:	f7fe fe00 	bl	8001d6e <csp_htobe32>
 800316e:	4602      	mov	r2, r0
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f8c3 2011 	str.w	r2, [r3, #17]
	cmp->if_stats.tx_error = csp_htobe32(ifc->tx_error);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	4618      	mov	r0, r3
 800317c:	f7fe fdf7 	bl	8001d6e <csp_htobe32>
 8003180:	4602      	mov	r2, r0
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f8c3 2015 	str.w	r2, [r3, #21]
	cmp->if_stats.rx_error = csp_htobe32(ifc->rx_error);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800318c:	4618      	mov	r0, r3
 800318e:	f7fe fdee 	bl	8001d6e <csp_htobe32>
 8003192:	4602      	mov	r2, r0
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f8c3 2019 	str.w	r2, [r3, #25]
	cmp->if_stats.drop = csp_htobe32(ifc->drop);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800319e:	4618      	mov	r0, r3
 80031a0:	f7fe fde5 	bl	8001d6e <csp_htobe32>
 80031a4:	4602      	mov	r2, r0
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f8c3 201d 	str.w	r2, [r3, #29]
	cmp->if_stats.autherr = csp_htobe32(ifc->autherr);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7fe fddc 	bl	8001d6e <csp_htobe32>
 80031b6:	4602      	mov	r2, r0
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f8c3 2021 	str.w	r2, [r3, #33]	@ 0x21
	cmp->if_stats.frame = csp_htobe32(ifc->frame);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7fe fdd3 	bl	8001d6e <csp_htobe32>
 80031c8:	4602      	mov	r2, r0
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f8c3 2025 	str.w	r2, [r3, #37]	@ 0x25
	cmp->if_stats.txbytes = csp_htobe32(ifc->txbytes);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7fe fdca 	bl	8001d6e <csp_htobe32>
 80031da:	4602      	mov	r2, r0
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f8c3 2029 	str.w	r2, [r3, #41]	@ 0x29
	cmp->if_stats.rxbytes = csp_htobe32(ifc->rxbytes);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7fe fdc1 	bl	8001d6e <csp_htobe32>
 80031ec:	4602      	mov	r2, r0
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f8c3 202d 	str.w	r2, [r3, #45]	@ 0x2d
	cmp->if_stats.irq = csp_htobe32(ifc->irq);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7fe fdb8 	bl	8001d6e <csp_htobe32>
 80031fe:	4602      	mov	r2, r0
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f8c3 2031 	str.w	r2, [r3, #49]	@ 0x31

	return CSP_ERR_NONE;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <do_cmp_peek>:

static int do_cmp_peek(struct csp_cmp_message * cmp) {
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]

	cmp->peek.addr = csp_htobe32(cmp->peek.addr);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800321e:	4618      	mov	r0, r3
 8003220:	f7fe fda5 	bl	8001d6e <csp_htobe32>
 8003224:	4602      	mov	r2, r0
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f8c3 2002 	str.w	r2, [r3, #2]
	if (cmp->peek.len > CSP_CMP_PEEK_MAX_LEN)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	799b      	ldrb	r3, [r3, #6]
 8003230:	2bc8      	cmp	r3, #200	@ 0xc8
 8003232:	d902      	bls.n	800323a <do_cmp_peek+0x2a>
		return CSP_ERR_INVAL;
 8003234:	f06f 0301 	mvn.w	r3, #1
 8003238:	e00b      	b.n	8003252 <do_cmp_peek+0x42>

	/* Dangerous, you better know what you are doing */
	csp_cmp_memcpy_fnc((csp_memptr_t)(uintptr_t)cmp->peek.data, (csp_memptr_t)(uintptr_t)cmp->peek.addr, cmp->peek.len);
 800323a:	4b08      	ldr	r3, [pc, #32]	@ (800325c <do_cmp_peek+0x4c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	1dd0      	adds	r0, r2, #7
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	f8d2 2002 	ldr.w	r2, [r2, #2]
 8003248:	4611      	mov	r1, r2
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	7992      	ldrb	r2, [r2, #6]
 800324e:	4798      	blx	r3

	return CSP_ERR_NONE;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	20000018 	.word	0x20000018

08003260 <do_cmp_poke>:

static int do_cmp_poke(struct csp_cmp_message * cmp) {
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]

	cmp->poke.addr = csp_htobe32(cmp->poke.addr);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800326e:	4618      	mov	r0, r3
 8003270:	f7fe fd7d 	bl	8001d6e <csp_htobe32>
 8003274:	4602      	mov	r2, r0
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f8c3 2002 	str.w	r2, [r3, #2]
	if (cmp->poke.len > CSP_CMP_POKE_MAX_LEN)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	799b      	ldrb	r3, [r3, #6]
 8003280:	2bc8      	cmp	r3, #200	@ 0xc8
 8003282:	d902      	bls.n	800328a <do_cmp_poke+0x2a>
		return CSP_ERR_INVAL;
 8003284:	f06f 0301 	mvn.w	r3, #1
 8003288:	e00b      	b.n	80032a2 <do_cmp_poke+0x42>

	/* Extremely dangerous, you better know what you are doing */
	csp_cmp_memcpy_fnc((csp_memptr_t)(uintptr_t)cmp->poke.addr, (csp_memptr_t)(uintptr_t)cmp->poke.data, cmp->poke.len);
 800328a:	4b08      	ldr	r3, [pc, #32]	@ (80032ac <do_cmp_poke+0x4c>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	f8d2 2002 	ldr.w	r2, [r2, #2]
 8003294:	4610      	mov	r0, r2
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	1dd1      	adds	r1, r2, #7
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	7992      	ldrb	r2, [r2, #6]
 800329e:	4798      	blx	r3

	return CSP_ERR_NONE;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	20000018 	.word	0x20000018

080032b0 <do_cmp_clock>:

static int do_cmp_clock(struct csp_cmp_message * cmp) {
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]

	csp_timestamp_t clock;
	clock.tv_sec = csp_betoh32(cmp->clock.tv_sec);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80032be:	4618      	mov	r0, r3
 80032c0:	f7fe fd61 	bl	8001d86 <csp_betoh32>
 80032c4:	4603      	mov	r3, r0
 80032c6:	60fb      	str	r3, [r7, #12]
	clock.tv_nsec = csp_betoh32(cmp->clock.tv_nsec);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f8d3 3006 	ldr.w	r3, [r3, #6]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7fe fd59 	bl	8001d86 <csp_betoh32>
 80032d4:	4603      	mov	r3, r0
 80032d6:	613b      	str	r3, [r7, #16]

	int res = CSP_ERR_NONE;
 80032d8:	2300      	movs	r3, #0
 80032da:	617b      	str	r3, [r7, #20]
	if (clock.tv_sec != 0) {
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00b      	beq.n	80032fa <do_cmp_clock+0x4a>
		// set time
		res = csp_clock_set_time(&clock);
 80032e2:	f107 030c 	add.w	r3, r7, #12
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7fd feaa 	bl	8001040 <csp_clock_set_time>
 80032ec:	6178      	str	r0, [r7, #20]
		if (res != CSP_ERR_NONE) {
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d002      	beq.n	80032fa <do_cmp_clock+0x4a>
			csp_dbg_errno = CSP_DBG_ERR_CLOCK_SET_FAIL;
 80032f4:	4b0e      	ldr	r3, [pc, #56]	@ (8003330 <do_cmp_clock+0x80>)
 80032f6:	220c      	movs	r2, #12
 80032f8:	701a      	strb	r2, [r3, #0]
		}
	}

	csp_clock_get_time(&clock);
 80032fa:	f107 030c 	add.w	r3, r7, #12
 80032fe:	4618      	mov	r0, r3
 8003300:	f7fd fe8e 	bl	8001020 <csp_clock_get_time>

	cmp->clock.tv_sec = csp_htobe32(clock.tv_sec);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	4618      	mov	r0, r3
 8003308:	f7fe fd31 	bl	8001d6e <csp_htobe32>
 800330c:	4602      	mov	r2, r0
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f8c3 2002 	str.w	r2, [r3, #2]
	cmp->clock.tv_nsec = csp_htobe32(clock.tv_nsec);
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	4618      	mov	r0, r3
 8003318:	f7fe fd29 	bl	8001d6e <csp_htobe32>
 800331c:	4602      	mov	r2, r0
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f8c3 2006 	str.w	r2, [r3, #6]

	return res;
 8003324:	697b      	ldr	r3, [r7, #20]
}
 8003326:	4618      	mov	r0, r3
 8003328:	3718      	adds	r7, #24
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	2000026e 	.word	0x2000026e

08003334 <csp_cmp_handler>:

/* CSP Management Protocol handler */
static int csp_cmp_handler(csp_packet_t * packet) {
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]

	int ret = CSP_ERR_INVAL;
 800333c:	f06f 0301 	mvn.w	r3, #1
 8003340:	60fb      	str	r3, [r7, #12]
	struct csp_cmp_message * cmp = (struct csp_cmp_message *)packet->data;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	332c      	adds	r3, #44	@ 0x2c
 8003346:	60bb      	str	r3, [r7, #8]

	/* Ignore everything but requests */
	if (cmp->type != CSP_CMP_REQUEST)
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <csp_cmp_handler+0x20>
		return ret;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	e04c      	b.n	80033ee <csp_cmp_handler+0xba>

	switch (cmp->code) {
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	785b      	ldrb	r3, [r3, #1]
 8003358:	3b01      	subs	r3, #1
 800335a:	2b06      	cmp	r3, #6
 800335c:	d83f      	bhi.n	80033de <csp_cmp_handler+0xaa>
 800335e:	a201      	add	r2, pc, #4	@ (adr r2, 8003364 <csp_cmp_handler+0x30>)
 8003360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003364:	08003381 	.word	0x08003381
 8003368:	08003391 	.word	0x08003391
 800336c:	080033b1 	.word	0x080033b1
 8003370:	080033c1 	.word	0x080033c1
 8003374:	080033cb 	.word	0x080033cb
 8003378:	080033d5 	.word	0x080033d5
 800337c:	080033a1 	.word	0x080033a1
		case CSP_CMP_IDENT:
			ret = do_cmp_ident(cmp);
 8003380:	68b8      	ldr	r0, [r7, #8]
 8003382:	f7ff fe29 	bl	8002fd8 <do_cmp_ident>
 8003386:	60f8      	str	r0, [r7, #12]
			packet->length = CMP_SIZE(ident);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	225d      	movs	r2, #93	@ 0x5d
 800338c:	829a      	strh	r2, [r3, #20]
			break;
 800338e:	e02a      	b.n	80033e6 <csp_cmp_handler+0xb2>

		case CSP_CMP_ROUTE_SET_V1:
			ret = do_cmp_route_set_v1(cmp);
 8003390:	68b8      	ldr	r0, [r7, #8]
 8003392:	f7ff fe6f 	bl	8003074 <do_cmp_route_set_v1>
 8003396:	60f8      	str	r0, [r7, #12]
			packet->length = CMP_SIZE(route_set_v1);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	220f      	movs	r2, #15
 800339c:	829a      	strh	r2, [r3, #20]
			break;
 800339e:	e022      	b.n	80033e6 <csp_cmp_handler+0xb2>

		case CSP_CMP_ROUTE_SET_V2:
			ret = do_cmp_route_set_v2(cmp);
 80033a0:	68b8      	ldr	r0, [r7, #8]
 80033a2:	f7ff fe8f 	bl	80030c4 <do_cmp_route_set_v2>
 80033a6:	60f8      	str	r0, [r7, #12]
			packet->length = CMP_SIZE(route_set_v2);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2214      	movs	r2, #20
 80033ac:	829a      	strh	r2, [r3, #20]
			break;
 80033ae:	e01a      	b.n	80033e6 <csp_cmp_handler+0xb2>

		case CSP_CMP_IF_STATS:
			ret = do_cmp_if_stats(cmp);
 80033b0:	68b8      	ldr	r0, [r7, #8]
 80033b2:	f7ff febe 	bl	8003132 <do_cmp_if_stats>
 80033b6:	60f8      	str	r0, [r7, #12]
			packet->length = CMP_SIZE(if_stats);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2235      	movs	r2, #53	@ 0x35
 80033bc:	829a      	strh	r2, [r3, #20]
			break;
 80033be:	e012      	b.n	80033e6 <csp_cmp_handler+0xb2>

		case CSP_CMP_PEEK:
			ret = do_cmp_peek(cmp);
 80033c0:	68b8      	ldr	r0, [r7, #8]
 80033c2:	f7ff ff25 	bl	8003210 <do_cmp_peek>
 80033c6:	60f8      	str	r0, [r7, #12]
			break;
 80033c8:	e00d      	b.n	80033e6 <csp_cmp_handler+0xb2>

		case CSP_CMP_POKE:
			ret = do_cmp_poke(cmp);
 80033ca:	68b8      	ldr	r0, [r7, #8]
 80033cc:	f7ff ff48 	bl	8003260 <do_cmp_poke>
 80033d0:	60f8      	str	r0, [r7, #12]
			break;
 80033d2:	e008      	b.n	80033e6 <csp_cmp_handler+0xb2>

		case CSP_CMP_CLOCK:
			ret = do_cmp_clock(cmp);
 80033d4:	68b8      	ldr	r0, [r7, #8]
 80033d6:	f7ff ff6b 	bl	80032b0 <do_cmp_clock>
 80033da:	60f8      	str	r0, [r7, #12]
			break;
 80033dc:	e003      	b.n	80033e6 <csp_cmp_handler+0xb2>

		default:
			ret = CSP_ERR_INVAL;
 80033de:	f06f 0301 	mvn.w	r3, #1
 80033e2:	60fb      	str	r3, [r7, #12]
			break;
 80033e4:	bf00      	nop
	}

	cmp->type = CSP_CMP_REPLY;
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	22ff      	movs	r2, #255	@ 0xff
 80033ea:	701a      	strb	r2, [r3, #0]

	return ret;
 80033ec:	68fb      	ldr	r3, [r7, #12]
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop

080033f8 <csp_service_handler>:

void csp_service_handler(csp_packet_t * packet) {
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]

	switch (packet->id.dport) {
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	7f1b      	ldrb	r3, [r3, #28]
 8003404:	2b06      	cmp	r3, #6
 8003406:	d873      	bhi.n	80034f0 <csp_service_handler+0xf8>
 8003408:	a201      	add	r2, pc, #4	@ (adr r2, 8003410 <csp_service_handler+0x18>)
 800340a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800340e:	bf00      	nop
 8003410:	0800342d 	.word	0x0800342d
 8003414:	080034f9 	.word	0x080034f9
 8003418:	08003441 	.word	0x08003441
 800341c:	0800345f 	.word	0x0800345f
 8003420:	08003487 	.word	0x08003487
 8003424:	080034a9 	.word	0x080034a9
 8003428:	080034cd 	.word	0x080034cd

		case CSP_CMP:
			/* Pass to CMP handler */
			if (csp_cmp_handler(packet) != CSP_ERR_NONE) {
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f7ff ff81 	bl	8003334 <csp_cmp_handler>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d061      	beq.n	80034fc <csp_service_handler+0x104>
				csp_buffer_free(packet);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f7fd ff87 	bl	800134c <csp_buffer_free>
				return;
 800343e:	e069      	b.n	8003514 <csp_service_handler+0x11c>
		case CSP_PING:
			/* A ping means, just echo the packet, so no changes */
			break;

		case CSP_PS: {
			packet->length = csp_ps_hook(packet);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f7fd fe7a 	bl	800113a <csp_ps_hook>
 8003446:	4603      	mov	r3, r0
 8003448:	b29a      	uxth	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	829a      	strh	r2, [r3, #20]
			if (packet->length == 0) {
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	8a9b      	ldrh	r3, [r3, #20]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d154      	bne.n	8003500 <csp_service_handler+0x108>
				csp_buffer_free(packet);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f7fd ff78 	bl	800134c <csp_buffer_free>
			}
			break;
 800345c:	e050      	b.n	8003500 <csp_service_handler+0x108>
		}

		case CSP_MEMFREE: {

			uint32_t total = 0;
 800345e:	2300      	movs	r3, #0
 8003460:	617b      	str	r3, [r7, #20]
			total = csp_memfree_hook();
 8003462:	f7fd fe63 	bl	800112c <csp_memfree_hook>
 8003466:	4603      	mov	r3, r0
 8003468:	617b      	str	r3, [r7, #20]
			
			total = csp_htobe32(total);
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	4618      	mov	r0, r3
 800346e:	f7fe fc7e 	bl	8001d6e <csp_htobe32>
 8003472:	4603      	mov	r3, r0
 8003474:	617b      	str	r3, [r7, #20]
			memcpy(packet->data, &total, sizeof(total));
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	332c      	adds	r3, #44	@ 0x2c
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	601a      	str	r2, [r3, #0]
			packet->length = sizeof(total);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2204      	movs	r2, #4
 8003482:	829a      	strh	r2, [r3, #20]

			break;
 8003484:	e03d      	b.n	8003502 <csp_service_handler+0x10a>
		}

		case CSP_REBOOT: {
			uint32_t magic_word;
			memcpy(&magic_word, packet->data, sizeof(magic_word));
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	332c      	adds	r3, #44	@ 0x2c
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	613b      	str	r3, [r7, #16]

			magic_word = csp_betoh32(magic_word);
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	4618      	mov	r0, r3
 8003492:	f7fe fc78 	bl	8001d86 <csp_betoh32>
 8003496:	4603      	mov	r3, r0
 8003498:	613b      	str	r3, [r7, #16]

			/* If the magic word is valid, reboot */
			if (magic_word == CSP_REBOOT_MAGIC) {
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	4a1f      	ldr	r2, [pc, #124]	@ (800351c <csp_service_handler+0x124>)
 800349e:	4293      	cmp	r3, r2
				
			} else if (magic_word == CSP_REBOOT_SHUTDOWN_MAGIC) {
				// csp_shutdown_hook();
			}

			csp_buffer_free(packet);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f7fd ff53 	bl	800134c <csp_buffer_free>
			return;
 80034a6:	e035      	b.n	8003514 <csp_service_handler+0x11c>
		}

		case CSP_BUF_FREE: {
			uint32_t size = csp_buffer_remaining();
 80034a8:	f7fd ffb2 	bl	8001410 <csp_buffer_remaining>
 80034ac:	4603      	mov	r3, r0
 80034ae:	60fb      	str	r3, [r7, #12]
			size = csp_htobe32(size);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7fe fc5b 	bl	8001d6e <csp_htobe32>
 80034b8:	4603      	mov	r3, r0
 80034ba:	60fb      	str	r3, [r7, #12]
			memcpy(packet->data, &size, sizeof(size));
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	332c      	adds	r3, #44	@ 0x2c
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	601a      	str	r2, [r3, #0]
			packet->length = sizeof(size);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2204      	movs	r2, #4
 80034c8:	829a      	strh	r2, [r3, #20]
			break;
 80034ca:	e01a      	b.n	8003502 <csp_service_handler+0x10a>
		}

		case CSP_UPTIME: {
			uint32_t time = csp_get_s();
 80034cc:	f7fd fe48 	bl	8001160 <csp_get_s>
 80034d0:	4603      	mov	r3, r0
 80034d2:	60bb      	str	r3, [r7, #8]
			time = csp_htobe32(time);
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7fe fc49 	bl	8001d6e <csp_htobe32>
 80034dc:	4603      	mov	r3, r0
 80034de:	60bb      	str	r3, [r7, #8]
			memcpy(packet->data, &time, sizeof(time));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	332c      	adds	r3, #44	@ 0x2c
 80034e4:	68ba      	ldr	r2, [r7, #8]
 80034e6:	601a      	str	r2, [r3, #0]
			packet->length = sizeof(time);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2204      	movs	r2, #4
 80034ec:	829a      	strh	r2, [r3, #20]
			break;
 80034ee:	e008      	b.n	8003502 <csp_service_handler+0x10a>
		}

		default:
			csp_buffer_free(packet);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f7fd ff2b 	bl	800134c <csp_buffer_free>
			return;
 80034f6:	e00d      	b.n	8003514 <csp_service_handler+0x11c>
			break;
 80034f8:	bf00      	nop
 80034fa:	e002      	b.n	8003502 <csp_service_handler+0x10a>
			break;
 80034fc:	bf00      	nop
 80034fe:	e000      	b.n	8003502 <csp_service_handler+0x10a>
			break;
 8003500:	bf00      	nop
	}

	if (packet != NULL) {
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d005      	beq.n	8003514 <csp_service_handler+0x11c>
		csp_sendto_reply(packet, packet, CSP_O_SAME);
 8003508:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800350c:	6879      	ldr	r1, [r7, #4]
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7ff f8aa 	bl	8002668 <csp_sendto_reply>
	}
}
 8003514:	3718      	adds	r7, #24
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	80078007 	.word	0x80078007

08003520 <csp_can1_tx>:
	}

	return CSP_ERR_NONE;
}

int csp_can1_tx(csp_iface_t * iface, uint16_t via, csp_packet_t * packet) {
 8003520:	b590      	push	{r4, r7, lr}
 8003522:	b08f      	sub	sp, #60	@ 0x3c
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	460b      	mov	r3, r1
 800352a:	607a      	str	r2, [r7, #4]
 800352c:	817b      	strh	r3, [r7, #10]

	/* Loopback */
	if (packet->id.dst == iface->addr) {
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	8b5a      	ldrh	r2, [r3, #26]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	881b      	ldrh	r3, [r3, #0]
 8003536:	429a      	cmp	r2, r3
 8003538:	d106      	bne.n	8003548 <csp_can1_tx+0x28>
		csp_qfifo_write(packet, iface, NULL);
 800353a:	2200      	movs	r2, #0
 800353c:	68f9      	ldr	r1, [r7, #12]
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f7ff f9ce 	bl	80028e0 <csp_qfifo_write>
		return CSP_ERR_NONE;
 8003544:	2300      	movs	r3, #0
 8003546:	e0cd      	b.n	80036e4 <csp_can1_tx+0x1c4>
	}

	csp_can_interface_data_t * ifdata = iface->interface_data;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Get an unique CFP id - this should be locked to prevent access from multiple tasks */
	const uint32_t ident = ifdata->cfp_packet_counter++;
 800354e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	1c59      	adds	r1, r3, #1
 8003554:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003556:	6011      	str	r1, [r2, #0]
 8003558:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Figure out destination node based on routing entry */
	const uint8_t dest = (via != CSP_NO_VIA_ADDRESS) ? via : packet->id.dst;
 800355a:	897b      	ldrh	r3, [r7, #10]
 800355c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003560:	4293      	cmp	r3, r2
 8003562:	d002      	beq.n	800356a <csp_can1_tx+0x4a>
 8003564:	897b      	ldrh	r3, [r7, #10]
 8003566:	b2db      	uxtb	r3, r3
 8003568:	e002      	b.n	8003570 <csp_can1_tx+0x50>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	8b5b      	ldrh	r3, [r3, #26]
 800356e:	b2db      	uxtb	r3, r3
 8003570:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

	uint32_t can_id = 0;
 8003574:	2300      	movs	r3, #0
 8003576:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t data_bytes = 0;
 8003578:	2300      	movs	r3, #0
 800357a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

	/**
	 * CSP 1.x Frame Header:
	 * Data offset is always 6.
	 */
	can_id = (CFP_MAKE_SRC(packet->id.src) |
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	8b1b      	ldrh	r3, [r3, #24]
 8003582:	061b      	lsls	r3, r3, #24
 8003584:	f003 52f8 	and.w	r2, r3, #520093696	@ 0x1f000000
			  CFP_MAKE_DST(dest) |
 8003588:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800358c:	04db      	lsls	r3, r3, #19
 800358e:	f403 0378 	and.w	r3, r3, #16252928	@ 0xf80000
	can_id = (CFP_MAKE_SRC(packet->id.src) |
 8003592:	431a      	orrs	r2, r3
			  CFP_MAKE_ID(ident) |
 8003594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003596:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800359a:	431a      	orrs	r2, r3
			  CFP_MAKE_TYPE(CFP_BEGIN) |
			  CFP_MAKE_REMAIN((packet->length + CFP1_DATA_OFFSET - 1) / CAN_FRAME_SIZE));
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	8a9b      	ldrh	r3, [r3, #20]
 80035a0:	3305      	adds	r3, #5
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	da00      	bge.n	80035a8 <csp_can1_tx+0x88>
 80035a6:	3307      	adds	r3, #7
 80035a8:	10db      	asrs	r3, r3, #3
 80035aa:	029b      	lsls	r3, r3, #10
 80035ac:	f403 337f 	and.w	r3, r3, #261120	@ 0x3fc00
	can_id = (CFP_MAKE_SRC(packet->id.src) |
 80035b0:	4313      	orrs	r3, r2
 80035b2:	627b      	str	r3, [r7, #36]	@ 0x24
	 * 2 byte length field
	 * 2 byte data (optional)
	 */

	/* Copy CSP 1.x headers and data: Always 4 bytes */
	csp_id_prepend(packet);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f7fe fccd 	bl	8001f54 <csp_id_prepend>
	memcpy(frame_buf + CFP1_CSP_HEADER_OFFSET, packet->frame_begin, CFP1_CSP_HEADER_SIZE);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	617b      	str	r3, [r7, #20]

	/* Copy length field, always 2 bytes */
	uint16_t csp_length_be = csp_htobe16(packet->length);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	8a9b      	ldrh	r3, [r3, #20]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7fe fbb5 	bl	8001d36 <csp_htobe16>
 80035cc:	4603      	mov	r3, r0
 80035ce:	827b      	strh	r3, [r7, #18]
	memcpy(frame_buf + CFP1_DATA_LEN_OFFSET, &csp_length_be, CFP1_DATA_LEN_SIZE);
 80035d0:	f107 0314 	add.w	r3, r7, #20
 80035d4:	3304      	adds	r3, #4
 80035d6:	8a7a      	ldrh	r2, [r7, #18]
 80035d8:	801a      	strh	r2, [r3, #0]

	/* Calculate number of data bytes. Max 2 bytes possible */
	data_bytes = (packet->length <= CFP1_DATA_SIZE_BEGIN) ? packet->length : CFP1_DATA_SIZE_BEGIN;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	8a9b      	ldrh	r3, [r3, #20]
 80035de:	2b02      	cmp	r3, #2
 80035e0:	bf28      	it	cs
 80035e2:	2302      	movcs	r3, #2
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	memcpy(frame_buf + CFP1_DATA_OFFSET, packet->data, data_bytes);
 80035ea:	f107 0314 	add.w	r3, r7, #20
 80035ee:	3306      	adds	r3, #6
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	f102 012c 	add.w	r1, r2, #44	@ 0x2c
 80035f6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80035fa:	4618      	mov	r0, r3
 80035fc:	f007 fc9f 	bl	800af3e <memcpy>

	/* Increment tx counter */
	uint16_t tx_count = data_bytes;
 8003600:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003604:	86fb      	strh	r3, [r7, #54]	@ 0x36

	const csp_can_driver_tx_t tx_func = ifdata->tx_func;
 8003606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	61fb      	str	r3, [r7, #28]

	/* Send first frame */
	if ((tx_func)(iface->driver_data, can_id, frame_buf, CFP1_DATA_OFFSET + data_bytes) != CSP_ERR_NONE) {
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	68d8      	ldr	r0, [r3, #12]
 8003610:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003614:	3306      	adds	r3, #6
 8003616:	b2db      	uxtb	r3, r3
 8003618:	f107 0214 	add.w	r2, r7, #20
 800361c:	69fc      	ldr	r4, [r7, #28]
 800361e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003620:	47a0      	blx	r4
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d054      	beq.n	80036d2 <csp_can1_tx+0x1b2>
		iface->tx_error++;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6a1b      	ldr	r3, [r3, #32]
 800362c:	1c5a      	adds	r2, r3, #1
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	621a      	str	r2, [r3, #32]
		/* Does not free on return */
		return CSP_ERR_DRIVER;
 8003632:	f06f 030a 	mvn.w	r3, #10
 8003636:	e055      	b.n	80036e4 <csp_can1_tx+0x1c4>
		 * CSP 1.x Frame Header:
		 * Data offset is always 6.
		 */

		/* Calculate frame data bytes */
		data_bytes = (packet->length - tx_count >= CAN_FRAME_SIZE) ? CAN_FRAME_SIZE : packet->length - tx_count;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	8a9b      	ldrh	r3, [r3, #20]
 800363c:	461a      	mov	r2, r3
 800363e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b08      	cmp	r3, #8
 8003644:	bfa8      	it	ge
 8003646:	2308      	movge	r3, #8
 8003648:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

		/* Prepare identifier */
		can_id = (CFP_MAKE_SRC(packet->id.src) |
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	8b1b      	ldrh	r3, [r3, #24]
 8003650:	061b      	lsls	r3, r3, #24
 8003652:	f003 52f8 	and.w	r2, r3, #520093696	@ 0x1f000000
				  CFP_MAKE_DST(dest) |
 8003656:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800365a:	04db      	lsls	r3, r3, #19
 800365c:	f403 0378 	and.w	r3, r3, #16252928	@ 0xf80000
		can_id = (CFP_MAKE_SRC(packet->id.src) |
 8003660:	431a      	orrs	r2, r3
				  CFP_MAKE_ID(ident) |
 8003662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003664:	f3c3 0309 	ubfx	r3, r3, #0, #10
				  CFP_MAKE_DST(dest) |
 8003668:	431a      	orrs	r2, r3
				  CFP_MAKE_TYPE(CFP_MORE) |
				  CFP_MAKE_REMAIN((packet->length - tx_count - data_bytes + CAN_FRAME_SIZE - 1) / CAN_FRAME_SIZE));
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	8a9b      	ldrh	r3, [r3, #20]
 800366e:	4619      	mov	r1, r3
 8003670:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003672:	1ac9      	subs	r1, r1, r3
 8003674:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003678:	1acb      	subs	r3, r1, r3
 800367a:	3307      	adds	r3, #7
 800367c:	2b00      	cmp	r3, #0
 800367e:	da00      	bge.n	8003682 <csp_can1_tx+0x162>
 8003680:	3307      	adds	r3, #7
 8003682:	10db      	asrs	r3, r3, #3
 8003684:	029b      	lsls	r3, r3, #10
 8003686:	f403 337f 	and.w	r3, r3, #261120	@ 0x3fc00
				  CFP_MAKE_TYPE(CFP_MORE) |
 800368a:	4313      	orrs	r3, r2
		can_id = (CFP_MAKE_SRC(packet->id.src) |
 800368c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003690:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Increment tx counter */
		tx_count += data_bytes;
 8003692:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003696:	b29a      	uxth	r2, r3
 8003698:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800369a:	4413      	add	r3, r2
 800369c:	86fb      	strh	r3, [r7, #54]	@ 0x36

		/* Send frame */
		if ((tx_func)(iface->driver_data, can_id, packet->data + tx_count - data_bytes, data_bytes) != CSP_ERR_NONE) {
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	68d8      	ldr	r0, [r3, #12]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 80036a8:	8ef9      	ldrh	r1, [r7, #54]	@ 0x36
 80036aa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80036ae:	1acb      	subs	r3, r1, r3
 80036b0:	441a      	add	r2, r3
 80036b2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80036b6:	69fc      	ldr	r4, [r7, #28]
 80036b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80036ba:	47a0      	blx	r4
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d007      	beq.n	80036d2 <csp_can1_tx+0x1b2>
			iface->tx_error++;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	1c5a      	adds	r2, r3, #1
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	621a      	str	r2, [r3, #32]
			/* Does not free on return */
			return CSP_ERR_DRIVER;
 80036cc:	f06f 030a 	mvn.w	r3, #10
 80036d0:	e008      	b.n	80036e4 <csp_can1_tx+0x1c4>
	while (tx_count < packet->length) {
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	8a9b      	ldrh	r3, [r3, #20]
 80036d6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80036d8:	429a      	cmp	r2, r3
 80036da:	d3ad      	bcc.n	8003638 <csp_can1_tx+0x118>
		}
	}

	csp_buffer_free(packet);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f7fd fe35 	bl	800134c <csp_buffer_free>

	return CSP_ERR_NONE;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	373c      	adds	r7, #60	@ 0x3c
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd90      	pop	{r4, r7, pc}

080036ec <csp_can2_tx>:
	}

	return CSP_ERR_NONE;
}

int csp_can2_tx(csp_iface_t * iface, uint16_t via, csp_packet_t * packet) {
 80036ec:	b590      	push	{r4, r7, lr}
 80036ee:	b091      	sub	sp, #68	@ 0x44
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	460b      	mov	r3, r1
 80036f6:	607a      	str	r2, [r7, #4]
 80036f8:	817b      	strh	r3, [r7, #10]

	/* Loopback */
	if (packet->id.dst == iface->addr) {
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	8b5a      	ldrh	r2, [r3, #26]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	881b      	ldrh	r3, [r3, #0]
 8003702:	429a      	cmp	r2, r3
 8003704:	d106      	bne.n	8003714 <csp_can2_tx+0x28>
		csp_qfifo_write(packet, iface, NULL);
 8003706:	2200      	movs	r2, #0
 8003708:	68f9      	ldr	r1, [r7, #12]
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f7ff f8e8 	bl	80028e0 <csp_qfifo_write>
		return CSP_ERR_NONE;
 8003710:	2300      	movs	r3, #0
 8003712:	e0f0      	b.n	80038f6 <csp_can2_tx+0x20a>
	}

	csp_can_interface_data_t * ifdata = iface->interface_data;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Setup counters */
	int sender_count = ifdata->cfp_packet_counter++;
 800371a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	1c59      	adds	r1, r3, #1
 8003720:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003722:	6011      	str	r1, [r2, #0]
 8003724:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int tx_count = 0;
 8003726:	2300      	movs	r3, #0
 8003728:	63fb      	str	r3, [r7, #60]	@ 0x3c

	uint32_t can_id = 0;
 800372a:	2300      	movs	r3, #0
 800372c:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint8_t frame_buf_inp = 0;
 800372e:	2300      	movs	r3, #0
 8003730:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	uint8_t frame_buf_avail = CAN_FRAME_SIZE;
 8003734:	2308      	movs	r3, #8
 8003736:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

	/* Pack mandatory fields of header */
	can_id = (((packet->id.pri & CFP2_PRIO_MASK) << CFP2_PRIO_OFFSET) |
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	7d9b      	ldrb	r3, [r3, #22]
 800373e:	06db      	lsls	r3, r3, #27
 8003740:	f003 52c0 	and.w	r2, r3, #402653184	@ 0x18000000
			  ((packet->id.dst & CFP2_DST_MASK) << CFP2_DST_OFFSET) |
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	8b5b      	ldrh	r3, [r3, #26]
 8003748:	0359      	lsls	r1, r3, #13
 800374a:	4b6d      	ldr	r3, [pc, #436]	@ (8003900 <csp_can2_tx+0x214>)
 800374c:	400b      	ands	r3, r1
	can_id = (((packet->id.pri & CFP2_PRIO_MASK) << CFP2_PRIO_OFFSET) |
 800374e:	431a      	orrs	r2, r3
			  ((iface->addr & CFP2_SENDER_MASK) << CFP2_SENDER_OFFSET) |
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	881b      	ldrh	r3, [r3, #0]
 8003754:	01db      	lsls	r3, r3, #7
 8003756:	f403 6378 	and.w	r3, r3, #3968	@ 0xf80
			  ((packet->id.dst & CFP2_DST_MASK) << CFP2_DST_OFFSET) |
 800375a:	431a      	orrs	r2, r3
			  ((sender_count & CFP2_SC_MASK) << CFP2_SC_OFFSET) |
 800375c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800375e:	015b      	lsls	r3, r3, #5
 8003760:	f003 0360 	and.w	r3, r3, #96	@ 0x60
			  ((iface->addr & CFP2_SENDER_MASK) << CFP2_SENDER_OFFSET) |
 8003764:	4313      	orrs	r3, r2
			  ((sender_count & CFP2_SC_MASK) << CFP2_SC_OFFSET) |
 8003766:	f043 0302 	orr.w	r3, r3, #2
	can_id = (((packet->id.pri & CFP2_PRIO_MASK) << CFP2_PRIO_OFFSET) |
 800376a:	63bb      	str	r3, [r7, #56]	@ 0x38
			  ((1 & CFP2_BEGIN_MASK) << CFP2_BEGIN_OFFSET));

	/* Pack the rest of the CSP header in the first 32-bit of data */
    uint32_t frame_buf_mem[(CAN_FRAME_SIZE+sizeof(uint32_t)-1)/sizeof(uint32_t)];
    uint8_t *frame_buf = (uint8_t*)frame_buf_mem;
 800376c:	f107 0314 	add.w	r3, r7, #20
 8003770:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t * header_extension = (uint32_t *)frame_buf_mem;
 8003772:	f107 0314 	add.w	r3, r7, #20
 8003776:	623b      	str	r3, [r7, #32]

	*header_extension = (((packet->id.src & CFP2_SRC_MASK) << CFP2_SRC_OFFSET) |
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	8b1b      	ldrh	r3, [r3, #24]
 800377c:	049a      	lsls	r2, r3, #18
						 ((packet->id.dport & CFP2_DPORT_MASK) << CFP2_DPORT_OFFSET) |
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	7f1b      	ldrb	r3, [r3, #28]
 8003782:	031b      	lsls	r3, r3, #12
 8003784:	f403 337c 	and.w	r3, r3, #258048	@ 0x3f000
	*header_extension = (((packet->id.src & CFP2_SRC_MASK) << CFP2_SRC_OFFSET) |
 8003788:	431a      	orrs	r2, r3
						 ((packet->id.sport & CFP2_SPORT_MASK) << CFP2_SPORT_OFFSET) |
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	7f5b      	ldrb	r3, [r3, #29]
 800378e:	019b      	lsls	r3, r3, #6
 8003790:	f403 637c 	and.w	r3, r3, #4032	@ 0xfc0
						 ((packet->id.dport & CFP2_DPORT_MASK) << CFP2_DPORT_OFFSET) |
 8003794:	431a      	orrs	r2, r3
						 ((packet->id.flags & CFP2_FLAGS_MASK) << CFP2_FLAGS_OFFSET));
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	7ddb      	ldrb	r3, [r3, #23]
 800379a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
						 ((packet->id.sport & CFP2_SPORT_MASK) << CFP2_SPORT_OFFSET) |
 800379e:	4313      	orrs	r3, r2
 80037a0:	461a      	mov	r2, r3
	*header_extension = (((packet->id.src & CFP2_SRC_MASK) << CFP2_SRC_OFFSET) |
 80037a2:	6a3b      	ldr	r3, [r7, #32]
 80037a4:	601a      	str	r2, [r3, #0]

	/* Convert to network byte order */
	*header_extension = csp_htobe32(*header_extension);
 80037a6:	6a3b      	ldr	r3, [r7, #32]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7fe fadf 	bl	8001d6e <csp_htobe32>
 80037b0:	4602      	mov	r2, r0
 80037b2:	6a3b      	ldr	r3, [r7, #32]
 80037b4:	601a      	str	r2, [r3, #0]

	frame_buf_inp += 4;
 80037b6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80037ba:	3304      	adds	r3, #4
 80037bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	frame_buf_avail -= 4;
 80037c0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80037c4:	3b04      	subs	r3, #4
 80037c6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

	/* Copy first bytes of data field (max 4) */
	int data_bytes = (packet->length >= 4) ? 4 : packet->length;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	8a9b      	ldrh	r3, [r3, #20]
 80037ce:	2b04      	cmp	r3, #4
 80037d0:	bf28      	it	cs
 80037d2:	2304      	movcs	r3, #4
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	61fb      	str	r3, [r7, #28]
	memcpy(frame_buf + frame_buf_inp, packet->data, data_bytes);
 80037d8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80037dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037de:	18d0      	adds	r0, r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	332c      	adds	r3, #44	@ 0x2c
 80037e4:	69fa      	ldr	r2, [r7, #28]
 80037e6:	4619      	mov	r1, r3
 80037e8:	f007 fba9 	bl	800af3e <memcpy>
	frame_buf_inp += data_bytes;
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	b2da      	uxtb	r2, r3
 80037f0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80037f4:	4413      	add	r3, r2
 80037f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	tx_count = data_bytes;
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	63fb      	str	r3, [r7, #60]	@ 0x3c

	/* Check for end condition */
	if (tx_count == packet->length) {
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	8a9b      	ldrh	r3, [r3, #20]
 8003802:	461a      	mov	r2, r3
 8003804:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003806:	4293      	cmp	r3, r2
 8003808:	d103      	bne.n	8003812 <csp_can2_tx+0x126>
		can_id |= ((1 & CFP2_END_MASK) << CFP2_END_OFFSET);
 800380a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800380c:	f043 0301 	orr.w	r3, r3, #1
 8003810:	63bb      	str	r3, [r7, #56]	@ 0x38
	}

	/* Send first frame now */
	if ((ifdata->tx_func)(iface->driver_data, can_id, frame_buf, frame_buf_inp) != CSP_ERR_NONE) {
 8003812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003814:	685c      	ldr	r4, [r3, #4]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	68d8      	ldr	r0, [r3, #12]
 800381a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800381e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003820:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003822:	47a0      	blx	r4
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d007      	beq.n	800383a <csp_can2_tx+0x14e>
		iface->tx_error++;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	1c5a      	adds	r2, r3, #1
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	621a      	str	r2, [r3, #32]
		/* Does not free on return */
		return CSP_ERR_DRIVER;
 8003834:	f06f 030a 	mvn.w	r3, #10
 8003838:	e05d      	b.n	80038f6 <csp_can2_tx+0x20a>
	}

	/* Send next fragments if not complete */
	int fragment_count = 1;
 800383a:	2301      	movs	r3, #1
 800383c:	637b      	str	r3, [r7, #52]	@ 0x34
	while (tx_count < packet->length) {
 800383e:	e050      	b.n	80038e2 <csp_can2_tx+0x1f6>

		/* Pack mandatory fields of header */
		can_id = (((packet->id.pri & CFP2_PRIO_MASK) << CFP2_PRIO_OFFSET) |
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	7d9b      	ldrb	r3, [r3, #22]
 8003844:	06db      	lsls	r3, r3, #27
 8003846:	f003 52c0 	and.w	r2, r3, #402653184	@ 0x18000000
				  ((packet->id.dst & CFP2_DST_MASK) << CFP2_DST_OFFSET) |
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	8b5b      	ldrh	r3, [r3, #26]
 800384e:	0359      	lsls	r1, r3, #13
 8003850:	4b2b      	ldr	r3, [pc, #172]	@ (8003900 <csp_can2_tx+0x214>)
 8003852:	400b      	ands	r3, r1
		can_id = (((packet->id.pri & CFP2_PRIO_MASK) << CFP2_PRIO_OFFSET) |
 8003854:	431a      	orrs	r2, r3
				  ((iface->addr & CFP2_SENDER_MASK) << CFP2_SENDER_OFFSET) |
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	881b      	ldrh	r3, [r3, #0]
 800385a:	01db      	lsls	r3, r3, #7
 800385c:	f403 6378 	and.w	r3, r3, #3968	@ 0xf80
				  ((packet->id.dst & CFP2_DST_MASK) << CFP2_DST_OFFSET) |
 8003860:	431a      	orrs	r2, r3
				  ((sender_count & CFP2_SC_MASK) << CFP2_SC_OFFSET));
 8003862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003864:	015b      	lsls	r3, r3, #5
 8003866:	f003 0360 	and.w	r3, r3, #96	@ 0x60
				  ((iface->addr & CFP2_SENDER_MASK) << CFP2_SENDER_OFFSET) |
 800386a:	4313      	orrs	r3, r2
		can_id = (((packet->id.pri & CFP2_PRIO_MASK) << CFP2_PRIO_OFFSET) |
 800386c:	63bb      	str	r3, [r7, #56]	@ 0x38

		/* Set and increment fragment count */
		can_id |= (fragment_count++ & CFP2_FC_MASK) << CFP2_FC_OFFSET;
 800386e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003870:	1c5a      	adds	r2, r3, #1
 8003872:	637a      	str	r2, [r7, #52]	@ 0x34
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	f003 031c 	and.w	r3, r3, #28
 800387a:	461a      	mov	r2, r3
 800387c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800387e:	4313      	orrs	r3, r2
 8003880:	63bb      	str	r3, [r7, #56]	@ 0x38

		/* Calculate frame data bytes */
		data_bytes = (packet->length - tx_count >= CAN_FRAME_SIZE) ? CAN_FRAME_SIZE : packet->length - tx_count;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	8a9b      	ldrh	r3, [r3, #20]
 8003886:	461a      	mov	r2, r3
 8003888:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b08      	cmp	r3, #8
 800388e:	bfa8      	it	ge
 8003890:	2308      	movge	r3, #8
 8003892:	61fb      	str	r3, [r7, #28]

		/* Check for end condition */
		if (tx_count + data_bytes == packet->length) {
 8003894:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	4413      	add	r3, r2
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	8a92      	ldrh	r2, [r2, #20]
 800389e:	4293      	cmp	r3, r2
 80038a0:	d103      	bne.n	80038aa <csp_can2_tx+0x1be>
			can_id |= ((1 & CFP2_END_MASK) << CFP2_END_OFFSET);
 80038a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038a4:	f043 0301 	orr.w	r3, r3, #1
 80038a8:	63bb      	str	r3, [r7, #56]	@ 0x38
		}

		/* Send frame */
		if ((ifdata->tx_func)(iface->driver_data, can_id, packet->data + tx_count, data_bytes) != CSP_ERR_NONE) {
 80038aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ac:	685c      	ldr	r4, [r3, #4]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	68d8      	ldr	r0, [r3, #12]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 80038b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038ba:	441a      	add	r2, r3
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80038c2:	47a0      	blx	r4
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d007      	beq.n	80038da <csp_can2_tx+0x1ee>
			iface->tx_error++;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	1c5a      	adds	r2, r3, #1
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	621a      	str	r2, [r3, #32]
			/* Does not free on return */
			return CSP_ERR_DRIVER;
 80038d4:	f06f 030a 	mvn.w	r3, #10
 80038d8:	e00d      	b.n	80038f6 <csp_can2_tx+0x20a>
//			/* Does not free on return */
//			return CSP_ERR_DRIVER;
//		}

		/* Increment tx counter */
		tx_count += data_bytes;
 80038da:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	4413      	add	r3, r2
 80038e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	while (tx_count < packet->length) {
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	8a9b      	ldrh	r3, [r3, #20]
 80038e6:	461a      	mov	r2, r3
 80038e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038ea:	4293      	cmp	r3, r2
 80038ec:	dba8      	blt.n	8003840 <csp_can2_tx+0x154>
	}

	csp_buffer_free(packet);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7fd fd2c 	bl	800134c <csp_buffer_free>

	return CSP_ERR_NONE;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3744      	adds	r7, #68	@ 0x44
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd90      	pop	{r4, r7, pc}
 80038fe:	bf00      	nop
 8003900:	07ffe000 	.word	0x07ffe000

08003904 <csp_can_add_interface>:

int csp_can_add_interface(csp_iface_t * iface) {
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]

	if ((iface == NULL) || (iface->name == NULL) || (iface->interface_data == NULL)) {
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d007      	beq.n	8003922 <csp_can_add_interface+0x1e>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d003      	beq.n	8003922 <csp_can_add_interface+0x1e>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d102      	bne.n	8003928 <csp_can_add_interface+0x24>
		return CSP_ERR_INVAL;
 8003922:	f06f 0301 	mvn.w	r3, #1
 8003926:	e023      	b.n	8003970 <csp_can_add_interface+0x6c>
	}

	csp_can_interface_data_t * ifdata = iface->interface_data;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	60fb      	str	r3, [r7, #12]
	if (ifdata->tx_func == NULL) {
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d102      	bne.n	800393c <csp_can_add_interface+0x38>
		return CSP_ERR_INVAL;
 8003936:	f06f 0301 	mvn.w	r3, #1
 800393a:	e019      	b.n	8003970 <csp_can_add_interface+0x6c>

	/* We reserve 8 bytes of the data field, for CFP information:
	 * In reality we dont use as much, its between 3 and 6 depending
	 * on CFP format.
	 */
	iface->mtu = csp_buffer_data_size() - 8;
 800393c:	f7fd fd7d 	bl	800143a <csp_buffer_data_size>
 8003940:	4603      	mov	r3, r0
 8003942:	b29b      	uxth	r3, r3
 8003944:	3b08      	subs	r3, #8
 8003946:	b29a      	uxth	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	829a      	strh	r2, [r3, #20]

	ifdata->cfp_packet_counter = 0;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	601a      	str	r2, [r3, #0]

	if (csp_conf.version == 1) {
 8003952:	4b09      	ldr	r3, [pc, #36]	@ (8003978 <csp_can_add_interface+0x74>)
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d103      	bne.n	8003962 <csp_can_add_interface+0x5e>
		iface->nexthop = csp_can1_tx;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a07      	ldr	r2, [pc, #28]	@ (800397c <csp_can_add_interface+0x78>)
 800395e:	611a      	str	r2, [r3, #16]
 8003960:	e002      	b.n	8003968 <csp_can_add_interface+0x64>
	} else {
		iface->nexthop = csp_can2_tx;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a06      	ldr	r2, [pc, #24]	@ (8003980 <csp_can_add_interface+0x7c>)
 8003966:	611a      	str	r2, [r3, #16]
	}

	return csp_iflist_add(iface);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f7fe fb99 	bl	80020a0 <csp_iflist_add>
 800396e:	4603      	mov	r3, r0
}
 8003970:	4618      	mov	r0, r3
 8003972:	3710      	adds	r7, #16
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	20000000 	.word	0x20000000
 800397c:	08003521 	.word	0x08003521
 8003980:	080036ed 	.word	0x080036ed

08003984 <csp_lo_tx>:
/**
 * Loopback interface transmit function
 * @param packet Packet to transmit
 * @return 1 if packet was successfully transmitted, 0 on error
 */
static int csp_lo_tx(csp_iface_t * iface, uint16_t via, csp_packet_t * packet) {
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	460b      	mov	r3, r1
 800398e:	607a      	str	r2, [r7, #4]
 8003990:	817b      	strh	r3, [r7, #10]

	/* Send back into CSP, notice calling from task so last argument must be NULL! */
	csp_qfifo_write(packet, &csp_if_lo, NULL);
 8003992:	2200      	movs	r2, #0
 8003994:	4904      	ldr	r1, [pc, #16]	@ (80039a8 <csp_lo_tx+0x24>)
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f7fe ffa2 	bl	80028e0 <csp_qfifo_write>

	return CSP_ERR_NONE;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	2000001c 	.word	0x2000001c

080039ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039b0:	4b04      	ldr	r3, [pc, #16]	@ (80039c4 <__NVIC_GetPriorityGrouping+0x18>)
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	0a1b      	lsrs	r3, r3, #8
 80039b6:	f003 0307 	and.w	r3, r3, #7
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr
 80039c4:	e000ed00 	.word	0xe000ed00

080039c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	4603      	mov	r3, r0
 80039d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	db0b      	blt.n	80039f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039da:	79fb      	ldrb	r3, [r7, #7]
 80039dc:	f003 021f 	and.w	r2, r3, #31
 80039e0:	4907      	ldr	r1, [pc, #28]	@ (8003a00 <__NVIC_EnableIRQ+0x38>)
 80039e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e6:	095b      	lsrs	r3, r3, #5
 80039e8:	2001      	movs	r0, #1
 80039ea:	fa00 f202 	lsl.w	r2, r0, r2
 80039ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80039f2:	bf00      	nop
 80039f4:	370c      	adds	r7, #12
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	e000e100 	.word	0xe000e100

08003a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	6039      	str	r1, [r7, #0]
 8003a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	db0a      	blt.n	8003a2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	b2da      	uxtb	r2, r3
 8003a1c:	490c      	ldr	r1, [pc, #48]	@ (8003a50 <__NVIC_SetPriority+0x4c>)
 8003a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a22:	0112      	lsls	r2, r2, #4
 8003a24:	b2d2      	uxtb	r2, r2
 8003a26:	440b      	add	r3, r1
 8003a28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a2c:	e00a      	b.n	8003a44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	4908      	ldr	r1, [pc, #32]	@ (8003a54 <__NVIC_SetPriority+0x50>)
 8003a34:	79fb      	ldrb	r3, [r7, #7]
 8003a36:	f003 030f 	and.w	r3, r3, #15
 8003a3a:	3b04      	subs	r3, #4
 8003a3c:	0112      	lsls	r2, r2, #4
 8003a3e:	b2d2      	uxtb	r2, r2
 8003a40:	440b      	add	r3, r1
 8003a42:	761a      	strb	r2, [r3, #24]
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr
 8003a50:	e000e100 	.word	0xe000e100
 8003a54:	e000ed00 	.word	0xe000ed00

08003a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b089      	sub	sp, #36	@ 0x24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f003 0307 	and.w	r3, r3, #7
 8003a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	f1c3 0307 	rsb	r3, r3, #7
 8003a72:	2b04      	cmp	r3, #4
 8003a74:	bf28      	it	cs
 8003a76:	2304      	movcs	r3, #4
 8003a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	3304      	adds	r3, #4
 8003a7e:	2b06      	cmp	r3, #6
 8003a80:	d902      	bls.n	8003a88 <NVIC_EncodePriority+0x30>
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	3b03      	subs	r3, #3
 8003a86:	e000      	b.n	8003a8a <NVIC_EncodePriority+0x32>
 8003a88:	2300      	movs	r3, #0
 8003a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	fa02 f303 	lsl.w	r3, r2, r3
 8003a96:	43da      	mvns	r2, r3
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	401a      	ands	r2, r3
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8003aaa:	43d9      	mvns	r1, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ab0:	4313      	orrs	r3, r2
         );
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3724      	adds	r7, #36	@ 0x24
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b083      	sub	sp, #12
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	60da      	str	r2, [r3, #12]
}
 8003ad2:	bf00      	nop
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr

08003ade <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8003ade:	b480      	push	{r7}
 8003ae0:	b083      	sub	sp, #12
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	615a      	str	r2, [r3, #20]
}
 8003afe:	bf00      	nop
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
	...

08003b0c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003b14:	4b08      	ldr	r3, [pc, #32]	@ (8003b38 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003b16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b18:	4907      	ldr	r1, [pc, #28]	@ (8003b38 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003b20:	4b05      	ldr	r3, [pc, #20]	@ (8003b38 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003b22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4013      	ands	r3, r2
 8003b28:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
}
 8003b2c:	bf00      	nop
 8003b2e:	3714      	adds	r7, #20
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr
 8003b38:	40023800 	.word	0x40023800

08003b3c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8003b44:	4b08      	ldr	r3, [pc, #32]	@ (8003b68 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003b46:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b48:	4907      	ldr	r1, [pc, #28]	@ (8003b68 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003b50:	4b05      	ldr	r3, [pc, #20]	@ (8003b68 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003b52:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4013      	ands	r3, r2
 8003b58:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
}
 8003b5c:	bf00      	nop
 8003b5e:	3714      	adds	r7, #20
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr
 8003b68:	40023800 	.word	0x40023800

08003b6c <vApplicationStackOverflowHook>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
vApplicationStackOverflowHook()
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0

}
 8003b70:	bf00      	nop
 8003b72:	4618      	mov	r0, r3
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <Debuglogging>:
void Debuglogging(void *pvParameters)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
	while(1)
	{
		task_debug_logging();
 8003b84:	f005 fe9a 	bl	80098bc <task_debug_logging>
		vTaskDelay(50);
 8003b88:	2032      	movs	r0, #50	@ 0x32
 8003b8a:	f003 ff61 	bl	8007a50 <vTaskDelay>
		task_debug_logging();
 8003b8e:	bf00      	nop
 8003b90:	e7f8      	b.n	8003b84 <Debuglogging+0x8>
	...

08003b94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003b9a:	f000 fbb1 	bl	8004300 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003b9e:	f000 f879 	bl	8003c94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003ba2:	f000 f991 	bl	8003ec8 <MX_GPIO_Init>
  MX_CAN1_Init();
 8003ba6:	f000 f8dd 	bl	8003d64 <MX_CAN1_Init>
  MX_USART6_UART_Init();
 8003baa:	f000 f92d 	bl	8003e08 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  /*****************Init CAN*******************/
  // Start CAN
  HAL_CAN_Start(&hcan1);
 8003bae:	482a      	ldr	r0, [pc, #168]	@ (8003c58 <main+0xc4>)
 8003bb0:	f000 fe16 	bl	80047e0 <HAL_CAN_Start>

  // Enable interrupt nhận
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8003bb4:	2102      	movs	r1, #2
 8003bb6:	4828      	ldr	r0, [pc, #160]	@ (8003c58 <main+0xc4>)
 8003bb8:	f000 ff26 	bl	8004a08 <HAL_CAN_ActivateNotification>

  // Cấu hình header truyền
  TxHeader.DLC = 8;             // 8 byte
 8003bbc:	4b27      	ldr	r3, [pc, #156]	@ (8003c5c <main+0xc8>)
 8003bbe:	2208      	movs	r2, #8
 8003bc0:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;    // Standard ID (11 bit)
 8003bc2:	4b26      	ldr	r3, [pc, #152]	@ (8003c5c <main+0xc8>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;  // Data frame
 8003bc8:	4b24      	ldr	r3, [pc, #144]	@ (8003c5c <main+0xc8>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x103;       // CAN ID của thiết bị này
 8003bce:	4b23      	ldr	r3, [pc, #140]	@ (8003c5c <main+0xc8>)
 8003bd0:	f240 1203 	movw	r2, #259	@ 0x103
 8003bd4:	601a      	str	r2, [r3, #0]

  TxData[0]= 0x83;
 8003bd6:	4b22      	ldr	r3, [pc, #136]	@ (8003c60 <main+0xcc>)
 8003bd8:	2283      	movs	r2, #131	@ 0x83
 8003bda:	701a      	strb	r2, [r3, #0]
  /************************************/

  CSP_Init();
 8003bdc:	f005 ff1a 	bl	8009a14 <CSP_Init>
  uart_debug_init();
 8003be0:	f005 feec 	bl	80099bc <uart_debug_init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003be4:	f002 fe98 	bl	8006918 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003be8:	4a1e      	ldr	r2, [pc, #120]	@ (8003c64 <main+0xd0>)
 8003bea:	2100      	movs	r1, #0
 8003bec:	481e      	ldr	r0, [pc, #120]	@ (8003c68 <main+0xd4>)
 8003bee:	f002 fedd 	bl	80069ac <osThreadNew>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	4a1d      	ldr	r2, [pc, #116]	@ (8003c6c <main+0xd8>)
 8003bf6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(vTaskCspSend, "CSP_Send", 128 * 8, NULL, osPriorityNormal - 1, &hCspSend);
 8003bf8:	4b1d      	ldr	r3, [pc, #116]	@ (8003c70 <main+0xdc>)
 8003bfa:	9301      	str	r3, [sp, #4]
 8003bfc:	2317      	movs	r3, #23
 8003bfe:	9300      	str	r3, [sp, #0]
 8003c00:	2300      	movs	r3, #0
 8003c02:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c06:	491b      	ldr	r1, [pc, #108]	@ (8003c74 <main+0xe0>)
 8003c08:	481b      	ldr	r0, [pc, #108]	@ (8003c78 <main+0xe4>)
 8003c0a:	f003 fdc3 	bl	8007794 <xTaskCreate>
  xTaskCreate(vTaskCspReceive, "CSP_Receive", 128 * 8, NULL, osPriorityNormal - 1, &hCspReceive);
 8003c0e:	4b1b      	ldr	r3, [pc, #108]	@ (8003c7c <main+0xe8>)
 8003c10:	9301      	str	r3, [sp, #4]
 8003c12:	2317      	movs	r3, #23
 8003c14:	9300      	str	r3, [sp, #0]
 8003c16:	2300      	movs	r3, #0
 8003c18:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c1c:	4918      	ldr	r1, [pc, #96]	@ (8003c80 <main+0xec>)
 8003c1e:	4819      	ldr	r0, [pc, #100]	@ (8003c84 <main+0xf0>)
 8003c20:	f003 fdb8 	bl	8007794 <xTaskCreate>
  xTaskCreate(Debuglogging, "Debuglogging", 128 * 2, NULL, osPriorityNormal - 1, NULL);
 8003c24:	2300      	movs	r3, #0
 8003c26:	9301      	str	r3, [sp, #4]
 8003c28:	2317      	movs	r3, #23
 8003c2a:	9300      	str	r3, [sp, #0]
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c32:	4915      	ldr	r1, [pc, #84]	@ (8003c88 <main+0xf4>)
 8003c34:	4815      	ldr	r0, [pc, #84]	@ (8003c8c <main+0xf8>)
 8003c36:	f003 fdad 	bl	8007794 <xTaskCreate>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8003c3a:	f002 fe91 	bl	8006960 <osKernelStart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8003c3e:	4b14      	ldr	r3, [pc, #80]	@ (8003c90 <main+0xfc>)
 8003c40:	4a07      	ldr	r2, [pc, #28]	@ (8003c60 <main+0xcc>)
 8003c42:	4906      	ldr	r1, [pc, #24]	@ (8003c5c <main+0xc8>)
 8003c44:	4804      	ldr	r0, [pc, #16]	@ (8003c58 <main+0xc4>)
 8003c46:	f000 fe0f 	bl	8004868 <HAL_CAN_AddTxMessage>
//	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_5);
	  HAL_Delay(1000);
 8003c4a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003c4e:	f000 fbc9 	bl	80043e4 <HAL_Delay>
	  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8003c52:	bf00      	nop
 8003c54:	e7f3      	b.n	8003c3e <main+0xaa>
 8003c56:	bf00      	nop
 8003c58:	20000588 	.word	0x20000588
 8003c5c:	200005b4 	.word	0x200005b4
 8003c60:	200005cc 	.word	0x200005cc
 8003c64:	0800eac0 	.word	0x0800eac0
 8003c68:	08003f69 	.word	0x08003f69
 8003c6c:	200005b0 	.word	0x200005b0
 8003c70:	2000de24 	.word	0x2000de24
 8003c74:	0800e540 	.word	0x0800e540
 8003c78:	08009ac5 	.word	0x08009ac5
 8003c7c:	2000de28 	.word	0x2000de28
 8003c80:	0800e54c 	.word	0x0800e54c
 8003c84:	08009b69 	.word	0x08009b69
 8003c88:	0800e558 	.word	0x0800e558
 8003c8c:	08003b7d 	.word	0x08003b7d
 8003c90:	200005d4 	.word	0x200005d4

08003c94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b094      	sub	sp, #80	@ 0x50
 8003c98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c9a:	f107 0320 	add.w	r3, r7, #32
 8003c9e:	2230      	movs	r2, #48	@ 0x30
 8003ca0:	2100      	movs	r1, #0
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f007 f839 	bl	800ad1a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ca8:	f107 030c 	add.w	r3, r7, #12
 8003cac:	2200      	movs	r2, #0
 8003cae:	601a      	str	r2, [r3, #0]
 8003cb0:	605a      	str	r2, [r3, #4]
 8003cb2:	609a      	str	r2, [r3, #8]
 8003cb4:	60da      	str	r2, [r3, #12]
 8003cb6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003cb8:	2300      	movs	r3, #0
 8003cba:	60bb      	str	r3, [r7, #8]
 8003cbc:	4b27      	ldr	r3, [pc, #156]	@ (8003d5c <SystemClock_Config+0xc8>)
 8003cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc0:	4a26      	ldr	r2, [pc, #152]	@ (8003d5c <SystemClock_Config+0xc8>)
 8003cc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cc6:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cc8:	4b24      	ldr	r3, [pc, #144]	@ (8003d5c <SystemClock_Config+0xc8>)
 8003cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ccc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cd0:	60bb      	str	r3, [r7, #8]
 8003cd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	607b      	str	r3, [r7, #4]
 8003cd8:	4b21      	ldr	r3, [pc, #132]	@ (8003d60 <SystemClock_Config+0xcc>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a20      	ldr	r2, [pc, #128]	@ (8003d60 <SystemClock_Config+0xcc>)
 8003cde:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ce2:	6013      	str	r3, [r2, #0]
 8003ce4:	4b1e      	ldr	r3, [pc, #120]	@ (8003d60 <SystemClock_Config+0xcc>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cec:	607b      	str	r3, [r7, #4]
 8003cee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003cf8:	2310      	movs	r3, #16
 8003cfa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003d00:	2300      	movs	r3, #0
 8003d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003d04:	2308      	movs	r3, #8
 8003d06:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8003d08:	2348      	movs	r3, #72	@ 0x48
 8003d0a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003d10:	2304      	movs	r3, #4
 8003d12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d14:	f107 0320 	add.w	r3, r7, #32
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f001 fbb7 	bl	800548c <HAL_RCC_OscConfig>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d001      	beq.n	8003d28 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003d24:	f000 f930 	bl	8003f88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003d28:	230f      	movs	r3, #15
 8003d2a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d30:	2300      	movs	r3, #0
 8003d32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003d34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003d3e:	f107 030c 	add.w	r3, r7, #12
 8003d42:	2102      	movs	r1, #2
 8003d44:	4618      	mov	r0, r3
 8003d46:	f001 fe19 	bl	800597c <HAL_RCC_ClockConfig>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d001      	beq.n	8003d54 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003d50:	f000 f91a 	bl	8003f88 <Error_Handler>
  }
}
 8003d54:	bf00      	nop
 8003d56:	3750      	adds	r7, #80	@ 0x50
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	40023800 	.word	0x40023800
 8003d60:	40007000 	.word	0x40007000

08003d64 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b08a      	sub	sp, #40	@ 0x28
 8003d68:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8003d6a:	4b25      	ldr	r3, [pc, #148]	@ (8003e00 <MX_CAN1_Init+0x9c>)
 8003d6c:	4a25      	ldr	r2, [pc, #148]	@ (8003e04 <MX_CAN1_Init+0xa0>)
 8003d6e:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 8003d70:	4b23      	ldr	r3, [pc, #140]	@ (8003e00 <MX_CAN1_Init+0x9c>)
 8003d72:	2212      	movs	r2, #18
 8003d74:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003d76:	4b22      	ldr	r3, [pc, #136]	@ (8003e00 <MX_CAN1_Init+0x9c>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003d7c:	4b20      	ldr	r3, [pc, #128]	@ (8003e00 <MX_CAN1_Init+0x9c>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8003d82:	4b1f      	ldr	r3, [pc, #124]	@ (8003e00 <MX_CAN1_Init+0x9c>)
 8003d84:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003d88:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8003d8a:	4b1d      	ldr	r3, [pc, #116]	@ (8003e00 <MX_CAN1_Init+0x9c>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8003d90:	4b1b      	ldr	r3, [pc, #108]	@ (8003e00 <MX_CAN1_Init+0x9c>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8003d96:	4b1a      	ldr	r3, [pc, #104]	@ (8003e00 <MX_CAN1_Init+0x9c>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8003d9c:	4b18      	ldr	r3, [pc, #96]	@ (8003e00 <MX_CAN1_Init+0x9c>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8003da2:	4b17      	ldr	r3, [pc, #92]	@ (8003e00 <MX_CAN1_Init+0x9c>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003da8:	4b15      	ldr	r3, [pc, #84]	@ (8003e00 <MX_CAN1_Init+0x9c>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8003dae:	4b14      	ldr	r3, [pc, #80]	@ (8003e00 <MX_CAN1_Init+0x9c>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003db4:	4812      	ldr	r0, [pc, #72]	@ (8003e00 <MX_CAN1_Init+0x9c>)
 8003db6:	f000 fb39 	bl	800442c <HAL_CAN_Init>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d001      	beq.n	8003dc4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8003dc0:	f000 f8e2 	bl	8003f88 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef sFilterConfig;

  // Cấu hình filter: nhận tất cả message
  sFilterConfig.FilterBank = 0;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8003de0:	2300      	movs	r3, #0
 8003de2:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8003de4:	2301      	movs	r3, #1
 8003de6:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 8003de8:	230e      	movs	r3, #14
 8003dea:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8003dec:	463b      	mov	r3, r7
 8003dee:	4619      	mov	r1, r3
 8003df0:	4803      	ldr	r0, [pc, #12]	@ (8003e00 <MX_CAN1_Init+0x9c>)
 8003df2:	f000 fc17 	bl	8004624 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8003df6:	bf00      	nop
 8003df8:	3728      	adds	r7, #40	@ 0x28
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	20000588 	.word	0x20000588
 8003e04:	40006400 	.word	0x40006400

08003e08 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b08e      	sub	sp, #56	@ 0x38
 8003e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8003e0e:	f107 031c 	add.w	r3, r7, #28
 8003e12:	2200      	movs	r2, #0
 8003e14:	601a      	str	r2, [r3, #0]
 8003e16:	605a      	str	r2, [r3, #4]
 8003e18:	609a      	str	r2, [r3, #8]
 8003e1a:	60da      	str	r2, [r3, #12]
 8003e1c:	611a      	str	r2, [r3, #16]
 8003e1e:	615a      	str	r2, [r3, #20]
 8003e20:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e22:	1d3b      	adds	r3, r7, #4
 8003e24:	2200      	movs	r2, #0
 8003e26:	601a      	str	r2, [r3, #0]
 8003e28:	605a      	str	r2, [r3, #4]
 8003e2a:	609a      	str	r2, [r3, #8]
 8003e2c:	60da      	str	r2, [r3, #12]
 8003e2e:	611a      	str	r2, [r3, #16]
 8003e30:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 8003e32:	2020      	movs	r0, #32
 8003e34:	f7ff fe82 	bl	8003b3c <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8003e38:	2004      	movs	r0, #4
 8003e3a:	f7ff fe67 	bl	8003b0c <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC6   ------> USART6_TX
  PC7   ------> USART6_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8003e3e:	23c0      	movs	r3, #192	@ 0xc0
 8003e40:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003e42:	2302      	movs	r3, #2
 8003e44:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003e46:	2303      	movs	r3, #3
 8003e48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8003e52:	2308      	movs	r3, #8
 8003e54:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e56:	1d3b      	adds	r3, r7, #4
 8003e58:	4619      	mov	r1, r3
 8003e5a:	4819      	ldr	r0, [pc, #100]	@ (8003ec0 <MX_USART6_UART_Init+0xb8>)
 8003e5c:	f002 f885 	bl	8005f6a <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),6, 0));
 8003e60:	f7ff fda4 	bl	80039ac <__NVIC_GetPriorityGrouping>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2200      	movs	r2, #0
 8003e68:	2106      	movs	r1, #6
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7ff fdf4 	bl	8003a58 <NVIC_EncodePriority>
 8003e70:	4603      	mov	r3, r0
 8003e72:	4619      	mov	r1, r3
 8003e74:	2047      	movs	r0, #71	@ 0x47
 8003e76:	f7ff fdc5 	bl	8003a04 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 8003e7a:	2047      	movs	r0, #71	@ 0x47
 8003e7c:	f7ff fda4 	bl	80039c8 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8003e80:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8003e84:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003e86:	2300      	movs	r3, #0
 8003e88:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003e92:	230c      	movs	r3, #12
 8003e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003e96:	2300      	movs	r3, #0
 8003e98:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART6, &USART_InitStruct);
 8003e9e:	f107 031c 	add.w	r3, r7, #28
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	4807      	ldr	r0, [pc, #28]	@ (8003ec4 <MX_USART6_UART_Init+0xbc>)
 8003ea6:	f002 fc83 	bl	80067b0 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 8003eaa:	4806      	ldr	r0, [pc, #24]	@ (8003ec4 <MX_USART6_UART_Init+0xbc>)
 8003eac:	f7ff fe17 	bl	8003ade <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 8003eb0:	4804      	ldr	r0, [pc, #16]	@ (8003ec4 <MX_USART6_UART_Init+0xbc>)
 8003eb2:	f7ff fe04 	bl	8003abe <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003eb6:	bf00      	nop
 8003eb8:	3738      	adds	r7, #56	@ 0x38
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	40020800 	.word	0x40020800
 8003ec4:	40011400 	.word	0x40011400

08003ec8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b088      	sub	sp, #32
 8003ecc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ece:	f107 030c 	add.w	r3, r7, #12
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	601a      	str	r2, [r3, #0]
 8003ed6:	605a      	str	r2, [r3, #4]
 8003ed8:	609a      	str	r2, [r3, #8]
 8003eda:	60da      	str	r2, [r3, #12]
 8003edc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ede:	2300      	movs	r3, #0
 8003ee0:	60bb      	str	r3, [r7, #8]
 8003ee2:	4b1f      	ldr	r3, [pc, #124]	@ (8003f60 <MX_GPIO_Init+0x98>)
 8003ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee6:	4a1e      	ldr	r2, [pc, #120]	@ (8003f60 <MX_GPIO_Init+0x98>)
 8003ee8:	f043 0304 	orr.w	r3, r3, #4
 8003eec:	6313      	str	r3, [r2, #48]	@ 0x30
 8003eee:	4b1c      	ldr	r3, [pc, #112]	@ (8003f60 <MX_GPIO_Init+0x98>)
 8003ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef2:	f003 0304 	and.w	r3, r3, #4
 8003ef6:	60bb      	str	r3, [r7, #8]
 8003ef8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003efa:	2300      	movs	r3, #0
 8003efc:	607b      	str	r3, [r7, #4]
 8003efe:	4b18      	ldr	r3, [pc, #96]	@ (8003f60 <MX_GPIO_Init+0x98>)
 8003f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f02:	4a17      	ldr	r2, [pc, #92]	@ (8003f60 <MX_GPIO_Init+0x98>)
 8003f04:	f043 0301 	orr.w	r3, r3, #1
 8003f08:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f0a:	4b15      	ldr	r3, [pc, #84]	@ (8003f60 <MX_GPIO_Init+0x98>)
 8003f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	607b      	str	r3, [r7, #4]
 8003f14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f16:	2300      	movs	r3, #0
 8003f18:	603b      	str	r3, [r7, #0]
 8003f1a:	4b11      	ldr	r3, [pc, #68]	@ (8003f60 <MX_GPIO_Init+0x98>)
 8003f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f1e:	4a10      	ldr	r2, [pc, #64]	@ (8003f60 <MX_GPIO_Init+0x98>)
 8003f20:	f043 0302 	orr.w	r3, r3, #2
 8003f24:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f26:	4b0e      	ldr	r3, [pc, #56]	@ (8003f60 <MX_GPIO_Init+0x98>)
 8003f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	603b      	str	r3, [r7, #0]
 8003f30:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8003f32:	2200      	movs	r2, #0
 8003f34:	2120      	movs	r1, #32
 8003f36:	480b      	ldr	r0, [pc, #44]	@ (8003f64 <MX_GPIO_Init+0x9c>)
 8003f38:	f001 fa74 	bl	8005424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003f3c:	2320      	movs	r3, #32
 8003f3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f40:	2301      	movs	r3, #1
 8003f42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f44:	2300      	movs	r3, #0
 8003f46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f4c:	f107 030c 	add.w	r3, r7, #12
 8003f50:	4619      	mov	r1, r3
 8003f52:	4804      	ldr	r0, [pc, #16]	@ (8003f64 <MX_GPIO_Init+0x9c>)
 8003f54:	f001 f8ca 	bl	80050ec <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8003f58:	bf00      	nop
 8003f5a:	3720      	adds	r7, #32
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	40023800 	.word	0x40023800
 8003f64:	40020800 	.word	0x40020800

08003f68 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
//	uart_ring_buffer_put((uint8_t*)"Red toggle\n", 16);
//	  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_5);
 8003f70:	2120      	movs	r1, #32
 8003f72:	4804      	ldr	r0, [pc, #16]	@ (8003f84 <StartDefaultTask+0x1c>)
 8003f74:	f001 fa6f 	bl	8005456 <HAL_GPIO_TogglePin>
    vTaskDelay(200);
 8003f78:	20c8      	movs	r0, #200	@ 0xc8
 8003f7a:	f003 fd69 	bl	8007a50 <vTaskDelay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_5);
 8003f7e:	bf00      	nop
 8003f80:	e7f6      	b.n	8003f70 <StartDefaultTask+0x8>
 8003f82:	bf00      	nop
 8003f84:	40020800 	.word	0x40020800

08003f88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003f8c:	b672      	cpsid	i
}
 8003f8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003f90:	bf00      	nop
 8003f92:	e7fd      	b.n	8003f90 <Error_Handler+0x8>

08003f94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b082      	sub	sp, #8
 8003f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	607b      	str	r3, [r7, #4]
 8003f9e:	4b12      	ldr	r3, [pc, #72]	@ (8003fe8 <HAL_MspInit+0x54>)
 8003fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fa2:	4a11      	ldr	r2, [pc, #68]	@ (8003fe8 <HAL_MspInit+0x54>)
 8003fa4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003fa8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003faa:	4b0f      	ldr	r3, [pc, #60]	@ (8003fe8 <HAL_MspInit+0x54>)
 8003fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fb2:	607b      	str	r3, [r7, #4]
 8003fb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	603b      	str	r3, [r7, #0]
 8003fba:	4b0b      	ldr	r3, [pc, #44]	@ (8003fe8 <HAL_MspInit+0x54>)
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8003fe8 <HAL_MspInit+0x54>)
 8003fc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003fc6:	4b08      	ldr	r3, [pc, #32]	@ (8003fe8 <HAL_MspInit+0x54>)
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fce:	603b      	str	r3, [r7, #0]
 8003fd0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	210f      	movs	r1, #15
 8003fd6:	f06f 0001 	mvn.w	r0, #1
 8003fda:	f001 f850 	bl	800507e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003fde:	bf00      	nop
 8003fe0:	3708      	adds	r7, #8
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	40023800 	.word	0x40023800

08003fec <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b08a      	sub	sp, #40	@ 0x28
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ff4:	f107 0314 	add.w	r3, r7, #20
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	601a      	str	r2, [r3, #0]
 8003ffc:	605a      	str	r2, [r3, #4]
 8003ffe:	609a      	str	r2, [r3, #8]
 8004000:	60da      	str	r2, [r3, #12]
 8004002:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a1d      	ldr	r2, [pc, #116]	@ (8004080 <HAL_CAN_MspInit+0x94>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d134      	bne.n	8004078 <HAL_CAN_MspInit+0x8c>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800400e:	2300      	movs	r3, #0
 8004010:	613b      	str	r3, [r7, #16]
 8004012:	4b1c      	ldr	r3, [pc, #112]	@ (8004084 <HAL_CAN_MspInit+0x98>)
 8004014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004016:	4a1b      	ldr	r2, [pc, #108]	@ (8004084 <HAL_CAN_MspInit+0x98>)
 8004018:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800401c:	6413      	str	r3, [r2, #64]	@ 0x40
 800401e:	4b19      	ldr	r3, [pc, #100]	@ (8004084 <HAL_CAN_MspInit+0x98>)
 8004020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004022:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004026:	613b      	str	r3, [r7, #16]
 8004028:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800402a:	2300      	movs	r3, #0
 800402c:	60fb      	str	r3, [r7, #12]
 800402e:	4b15      	ldr	r3, [pc, #84]	@ (8004084 <HAL_CAN_MspInit+0x98>)
 8004030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004032:	4a14      	ldr	r2, [pc, #80]	@ (8004084 <HAL_CAN_MspInit+0x98>)
 8004034:	f043 0302 	orr.w	r3, r3, #2
 8004038:	6313      	str	r3, [r2, #48]	@ 0x30
 800403a:	4b12      	ldr	r3, [pc, #72]	@ (8004084 <HAL_CAN_MspInit+0x98>)
 800403c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800403e:	f003 0302 	and.w	r3, r3, #2
 8004042:	60fb      	str	r3, [r7, #12]
 8004044:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004046:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800404a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800404c:	2302      	movs	r3, #2
 800404e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004050:	2300      	movs	r3, #0
 8004052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004054:	2303      	movs	r3, #3
 8004056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004058:	2309      	movs	r3, #9
 800405a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800405c:	f107 0314 	add.w	r3, r7, #20
 8004060:	4619      	mov	r1, r3
 8004062:	4809      	ldr	r0, [pc, #36]	@ (8004088 <HAL_CAN_MspInit+0x9c>)
 8004064:	f001 f842 	bl	80050ec <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8004068:	2200      	movs	r2, #0
 800406a:	2105      	movs	r1, #5
 800406c:	2014      	movs	r0, #20
 800406e:	f001 f806 	bl	800507e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8004072:	2014      	movs	r0, #20
 8004074:	f001 f81f 	bl	80050b6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8004078:	bf00      	nop
 800407a:	3728      	adds	r7, #40	@ 0x28
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	40006400 	.word	0x40006400
 8004084:	40023800 	.word	0x40023800
 8004088:	40020400 	.word	0x40020400

0800408c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800408c:	b480      	push	{r7}
 800408e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004090:	bf00      	nop
 8004092:	e7fd      	b.n	8004090 <NMI_Handler+0x4>

08004094 <HardFault_Handler>:
}

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void){
 8004094:	b480      	push	{r7}
 8004096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004098:	bf00      	nop
 800409a:	e7fd      	b.n	8004098 <HardFault_Handler+0x4>

0800409c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800409c:	b480      	push	{r7}
 800409e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040a0:	bf00      	nop
 80040a2:	e7fd      	b.n	80040a0 <MemManage_Handler+0x4>

080040a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040a4:	b480      	push	{r7}
 80040a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040a8:	bf00      	nop
 80040aa:	e7fd      	b.n	80040a8 <BusFault_Handler+0x4>

080040ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80040ac:	b480      	push	{r7}
 80040ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040b0:	bf00      	nop
 80040b2:	e7fd      	b.n	80040b0 <UsageFault_Handler+0x4>

080040b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80040b8:	bf00      	nop
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr

080040c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80040c2:	b580      	push	{r7, lr}
 80040c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040c6:	f000 f96d 	bl	80043a4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80040ca:	f004 f97f 	bl	80083cc <xTaskGetSchedulerState>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d001      	beq.n	80040d8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80040d4:	f004 ff78 	bl	8008fc8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80040d8:	bf00      	nop
 80040da:	bd80      	pop	{r7, pc}

080040dc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80040e0:	4802      	ldr	r0, [pc, #8]	@ (80040ec <CAN1_RX0_IRQHandler+0x10>)
 80040e2:	f000 fcb7 	bl	8004a54 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80040e6:	bf00      	nop
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	20000588 	.word	0x20000588

080040f0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	uart_IRQ_handler();
 80040f4:	f005 fc16 	bl	8009924 <uart_IRQ_handler>
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80040f8:	bf00      	nop
 80040fa:	bd80      	pop	{r7, pc}

080040fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80040fc:	b480      	push	{r7}
 80040fe:	af00      	add	r7, sp, #0
  return 1;
 8004100:	2301      	movs	r3, #1
}
 8004102:	4618      	mov	r0, r3
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <_kill>:

int _kill(int pid, int sig)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004116:	f006 fee5 	bl	800aee4 <__errno>
 800411a:	4603      	mov	r3, r0
 800411c:	2216      	movs	r2, #22
 800411e:	601a      	str	r2, [r3, #0]
  return -1;
 8004120:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004124:	4618      	mov	r0, r3
 8004126:	3708      	adds	r7, #8
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <_exit>:

void _exit (int status)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004134:	f04f 31ff 	mov.w	r1, #4294967295
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f7ff ffe7 	bl	800410c <_kill>
  while (1) {}    /* Make sure we hang here */
 800413e:	bf00      	nop
 8004140:	e7fd      	b.n	800413e <_exit+0x12>

08004142 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b086      	sub	sp, #24
 8004146:	af00      	add	r7, sp, #0
 8004148:	60f8      	str	r0, [r7, #12]
 800414a:	60b9      	str	r1, [r7, #8]
 800414c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800414e:	2300      	movs	r3, #0
 8004150:	617b      	str	r3, [r7, #20]
 8004152:	e00a      	b.n	800416a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004154:	f3af 8000 	nop.w
 8004158:	4601      	mov	r1, r0
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	1c5a      	adds	r2, r3, #1
 800415e:	60ba      	str	r2, [r7, #8]
 8004160:	b2ca      	uxtb	r2, r1
 8004162:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	3301      	adds	r3, #1
 8004168:	617b      	str	r3, [r7, #20]
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	429a      	cmp	r2, r3
 8004170:	dbf0      	blt.n	8004154 <_read+0x12>
  }

  return len;
 8004172:	687b      	ldr	r3, [r7, #4]
}
 8004174:	4618      	mov	r0, r3
 8004176:	3718      	adds	r7, #24
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004188:	2300      	movs	r3, #0
 800418a:	617b      	str	r3, [r7, #20]
 800418c:	e009      	b.n	80041a2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	1c5a      	adds	r2, r3, #1
 8004192:	60ba      	str	r2, [r7, #8]
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	4618      	mov	r0, r3
 8004198:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	3301      	adds	r3, #1
 80041a0:	617b      	str	r3, [r7, #20]
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	dbf1      	blt.n	800418e <_write+0x12>
  }
  return len;
 80041aa:	687b      	ldr	r3, [r7, #4]
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3718      	adds	r7, #24
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <_close>:

int _close(int file)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80041bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80041dc:	605a      	str	r2, [r3, #4]
  return 0;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <_isatty>:

int _isatty(int file)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80041f4:	2301      	movs	r3, #1
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr

08004202 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004202:	b480      	push	{r7}
 8004204:	b085      	sub	sp, #20
 8004206:	af00      	add	r7, sp, #0
 8004208:	60f8      	str	r0, [r7, #12]
 800420a:	60b9      	str	r1, [r7, #8]
 800420c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3714      	adds	r7, #20
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b086      	sub	sp, #24
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004224:	4a14      	ldr	r2, [pc, #80]	@ (8004278 <_sbrk+0x5c>)
 8004226:	4b15      	ldr	r3, [pc, #84]	@ (800427c <_sbrk+0x60>)
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004230:	4b13      	ldr	r3, [pc, #76]	@ (8004280 <_sbrk+0x64>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d102      	bne.n	800423e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004238:	4b11      	ldr	r3, [pc, #68]	@ (8004280 <_sbrk+0x64>)
 800423a:	4a12      	ldr	r2, [pc, #72]	@ (8004284 <_sbrk+0x68>)
 800423c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800423e:	4b10      	ldr	r3, [pc, #64]	@ (8004280 <_sbrk+0x64>)
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4413      	add	r3, r2
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	429a      	cmp	r2, r3
 800424a:	d207      	bcs.n	800425c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800424c:	f006 fe4a 	bl	800aee4 <__errno>
 8004250:	4603      	mov	r3, r0
 8004252:	220c      	movs	r2, #12
 8004254:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004256:	f04f 33ff 	mov.w	r3, #4294967295
 800425a:	e009      	b.n	8004270 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800425c:	4b08      	ldr	r3, [pc, #32]	@ (8004280 <_sbrk+0x64>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004262:	4b07      	ldr	r3, [pc, #28]	@ (8004280 <_sbrk+0x64>)
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4413      	add	r3, r2
 800426a:	4a05      	ldr	r2, [pc, #20]	@ (8004280 <_sbrk+0x64>)
 800426c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800426e:	68fb      	ldr	r3, [r7, #12]
}
 8004270:	4618      	mov	r0, r3
 8004272:	3718      	adds	r7, #24
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	20020000 	.word	0x20020000
 800427c:	00000400 	.word	0x00000400
 8004280:	200005d8 	.word	0x200005d8
 8004284:	2000fe58 	.word	0x2000fe58

08004288 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004288:	b480      	push	{r7}
 800428a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800428c:	4b06      	ldr	r3, [pc, #24]	@ (80042a8 <SystemInit+0x20>)
 800428e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004292:	4a05      	ldr	r2, [pc, #20]	@ (80042a8 <SystemInit+0x20>)
 8004294:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004298:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800429c:	bf00      	nop
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	e000ed00 	.word	0xe000ed00

080042ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80042ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80042e4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80042b0:	f7ff ffea 	bl	8004288 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80042b4:	480c      	ldr	r0, [pc, #48]	@ (80042e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80042b6:	490d      	ldr	r1, [pc, #52]	@ (80042ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80042b8:	4a0d      	ldr	r2, [pc, #52]	@ (80042f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80042ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042bc:	e002      	b.n	80042c4 <LoopCopyDataInit>

080042be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042c2:	3304      	adds	r3, #4

080042c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042c8:	d3f9      	bcc.n	80042be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042ca:	4a0a      	ldr	r2, [pc, #40]	@ (80042f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80042cc:	4c0a      	ldr	r4, [pc, #40]	@ (80042f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80042ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042d0:	e001      	b.n	80042d6 <LoopFillZerobss>

080042d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042d4:	3204      	adds	r2, #4

080042d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042d8:	d3fb      	bcc.n	80042d2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80042da:	f006 fe09 	bl	800aef0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80042de:	f7ff fc59 	bl	8003b94 <main>
  bx  lr    
 80042e2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80042e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80042e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80042ec:	2000024c 	.word	0x2000024c
  ldr r2, =_sidata
 80042f0:	0800ef34 	.word	0x0800ef34
  ldr r2, =_sbss
 80042f4:	2000024c 	.word	0x2000024c
  ldr r4, =_ebss
 80042f8:	2000dfc4 	.word	0x2000dfc4

080042fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80042fc:	e7fe      	b.n	80042fc <ADC_IRQHandler>
	...

08004300 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004304:	4b0e      	ldr	r3, [pc, #56]	@ (8004340 <HAL_Init+0x40>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a0d      	ldr	r2, [pc, #52]	@ (8004340 <HAL_Init+0x40>)
 800430a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800430e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004310:	4b0b      	ldr	r3, [pc, #44]	@ (8004340 <HAL_Init+0x40>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a0a      	ldr	r2, [pc, #40]	@ (8004340 <HAL_Init+0x40>)
 8004316:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800431a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800431c:	4b08      	ldr	r3, [pc, #32]	@ (8004340 <HAL_Init+0x40>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a07      	ldr	r2, [pc, #28]	@ (8004340 <HAL_Init+0x40>)
 8004322:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004326:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004328:	2003      	movs	r0, #3
 800432a:	f000 fe9d 	bl	8005068 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800432e:	200f      	movs	r0, #15
 8004330:	f000 f808 	bl	8004344 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004334:	f7ff fe2e 	bl	8003f94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	40023c00 	.word	0x40023c00

08004344 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800434c:	4b12      	ldr	r3, [pc, #72]	@ (8004398 <HAL_InitTick+0x54>)
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	4b12      	ldr	r3, [pc, #72]	@ (800439c <HAL_InitTick+0x58>)
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	4619      	mov	r1, r3
 8004356:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800435a:	fbb3 f3f1 	udiv	r3, r3, r1
 800435e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004362:	4618      	mov	r0, r3
 8004364:	f000 feb5 	bl	80050d2 <HAL_SYSTICK_Config>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e00e      	b.n	8004390 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2b0f      	cmp	r3, #15
 8004376:	d80a      	bhi.n	800438e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004378:	2200      	movs	r2, #0
 800437a:	6879      	ldr	r1, [r7, #4]
 800437c:	f04f 30ff 	mov.w	r0, #4294967295
 8004380:	f000 fe7d 	bl	800507e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004384:	4a06      	ldr	r2, [pc, #24]	@ (80043a0 <HAL_InitTick+0x5c>)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800438a:	2300      	movs	r3, #0
 800438c:	e000      	b.n	8004390 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
}
 8004390:	4618      	mov	r0, r3
 8004392:	3708      	adds	r7, #8
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	20000060 	.word	0x20000060
 800439c:	20000068 	.word	0x20000068
 80043a0:	20000064 	.word	0x20000064

080043a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043a4:	b480      	push	{r7}
 80043a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80043a8:	4b06      	ldr	r3, [pc, #24]	@ (80043c4 <HAL_IncTick+0x20>)
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	461a      	mov	r2, r3
 80043ae:	4b06      	ldr	r3, [pc, #24]	@ (80043c8 <HAL_IncTick+0x24>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4413      	add	r3, r2
 80043b4:	4a04      	ldr	r2, [pc, #16]	@ (80043c8 <HAL_IncTick+0x24>)
 80043b6:	6013      	str	r3, [r2, #0]
}
 80043b8:	bf00      	nop
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	20000068 	.word	0x20000068
 80043c8:	200005dc 	.word	0x200005dc

080043cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043cc:	b480      	push	{r7}
 80043ce:	af00      	add	r7, sp, #0
  return uwTick;
 80043d0:	4b03      	ldr	r3, [pc, #12]	@ (80043e0 <HAL_GetTick+0x14>)
 80043d2:	681b      	ldr	r3, [r3, #0]
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	200005dc 	.word	0x200005dc

080043e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80043ec:	f7ff ffee 	bl	80043cc <HAL_GetTick>
 80043f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043fc:	d005      	beq.n	800440a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80043fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004428 <HAL_Delay+0x44>)
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	461a      	mov	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	4413      	add	r3, r2
 8004408:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800440a:	bf00      	nop
 800440c:	f7ff ffde 	bl	80043cc <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	429a      	cmp	r2, r3
 800441a:	d8f7      	bhi.n	800440c <HAL_Delay+0x28>
  {
  }
}
 800441c:	bf00      	nop
 800441e:	bf00      	nop
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	20000068 	.word	0x20000068

0800442c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e0ed      	b.n	800461a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d102      	bne.n	8004450 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f7ff fdce 	bl	8003fec <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f042 0201 	orr.w	r2, r2, #1
 800445e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004460:	f7ff ffb4 	bl	80043cc <HAL_GetTick>
 8004464:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004466:	e012      	b.n	800448e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004468:	f7ff ffb0 	bl	80043cc <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b0a      	cmp	r3, #10
 8004474:	d90b      	bls.n	800448e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800447a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2205      	movs	r2, #5
 8004486:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e0c5      	b.n	800461a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f003 0301 	and.w	r3, r3, #1
 8004498:	2b00      	cmp	r3, #0
 800449a:	d0e5      	beq.n	8004468 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f022 0202 	bic.w	r2, r2, #2
 80044aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044ac:	f7ff ff8e 	bl	80043cc <HAL_GetTick>
 80044b0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80044b2:	e012      	b.n	80044da <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80044b4:	f7ff ff8a 	bl	80043cc <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b0a      	cmp	r3, #10
 80044c0:	d90b      	bls.n	80044da <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2205      	movs	r2, #5
 80044d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e09f      	b.n	800461a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1e5      	bne.n	80044b4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	7e1b      	ldrb	r3, [r3, #24]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d108      	bne.n	8004502 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80044fe:	601a      	str	r2, [r3, #0]
 8004500:	e007      	b.n	8004512 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004510:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	7e5b      	ldrb	r3, [r3, #25]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d108      	bne.n	800452c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004528:	601a      	str	r2, [r3, #0]
 800452a:	e007      	b.n	800453c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800453a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	7e9b      	ldrb	r3, [r3, #26]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d108      	bne.n	8004556 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f042 0220 	orr.w	r2, r2, #32
 8004552:	601a      	str	r2, [r3, #0]
 8004554:	e007      	b.n	8004566 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f022 0220 	bic.w	r2, r2, #32
 8004564:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	7edb      	ldrb	r3, [r3, #27]
 800456a:	2b01      	cmp	r3, #1
 800456c:	d108      	bne.n	8004580 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f022 0210 	bic.w	r2, r2, #16
 800457c:	601a      	str	r2, [r3, #0]
 800457e:	e007      	b.n	8004590 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f042 0210 	orr.w	r2, r2, #16
 800458e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	7f1b      	ldrb	r3, [r3, #28]
 8004594:	2b01      	cmp	r3, #1
 8004596:	d108      	bne.n	80045aa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f042 0208 	orr.w	r2, r2, #8
 80045a6:	601a      	str	r2, [r3, #0]
 80045a8:	e007      	b.n	80045ba <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f022 0208 	bic.w	r2, r2, #8
 80045b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	7f5b      	ldrb	r3, [r3, #29]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d108      	bne.n	80045d4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f042 0204 	orr.w	r2, r2, #4
 80045d0:	601a      	str	r2, [r3, #0]
 80045d2:	e007      	b.n	80045e4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f022 0204 	bic.w	r2, r2, #4
 80045e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689a      	ldr	r2, [r3, #8]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	431a      	orrs	r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	431a      	orrs	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	695b      	ldr	r3, [r3, #20]
 80045f8:	ea42 0103 	orr.w	r1, r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	1e5a      	subs	r2, r3, #1
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	430a      	orrs	r2, r1
 8004608:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3710      	adds	r7, #16
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
	...

08004624 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8004624:	b480      	push	{r7}
 8004626:	b087      	sub	sp, #28
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004634:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 8004636:	7dfb      	ldrb	r3, [r7, #23]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d003      	beq.n	8004644 <HAL_CAN_ConfigFilter+0x20>
 800463c:	7dfb      	ldrb	r3, [r7, #23]
 800463e:	2b02      	cmp	r3, #2
 8004640:	f040 80be 	bne.w	80047c0 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004644:	4b65      	ldr	r3, [pc, #404]	@ (80047dc <HAL_CAN_ConfigFilter+0x1b8>)
 8004646:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800464e:	f043 0201 	orr.w	r2, r3, #1
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800465e:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004672:	021b      	lsls	r3, r3, #8
 8004674:	431a      	orrs	r2, r3
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	695b      	ldr	r3, [r3, #20]
 8004680:	f003 031f 	and.w	r3, r3, #31
 8004684:	2201      	movs	r2, #1
 8004686:	fa02 f303 	lsl.w	r3, r2, r3
 800468a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	43db      	mvns	r3, r3
 8004696:	401a      	ands	r2, r3
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	69db      	ldr	r3, [r3, #28]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d123      	bne.n	80046ee <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	43db      	mvns	r3, r3
 80046b0:	401a      	ands	r2, r3
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80046c4:	683a      	ldr	r2, [r7, #0]
 80046c6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80046c8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	3248      	adds	r2, #72	@ 0x48
 80046ce:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80046e2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80046e4:	6939      	ldr	r1, [r7, #16]
 80046e6:	3348      	adds	r3, #72	@ 0x48
 80046e8:	00db      	lsls	r3, r3, #3
 80046ea:	440b      	add	r3, r1
 80046ec:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d122      	bne.n	800473c <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	431a      	orrs	r2, r3
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004712:	683a      	ldr	r2, [r7, #0]
 8004714:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004716:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	3248      	adds	r2, #72	@ 0x48
 800471c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004730:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004732:	6939      	ldr	r1, [r7, #16]
 8004734:	3348      	adds	r3, #72	@ 0x48
 8004736:	00db      	lsls	r3, r3, #3
 8004738:	440b      	add	r3, r1
 800473a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d109      	bne.n	8004758 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	43db      	mvns	r3, r3
 800474e:	401a      	ands	r2, r3
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8004756:	e007      	b.n	8004768 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	431a      	orrs	r2, r3
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d109      	bne.n	8004784 <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	43db      	mvns	r3, r3
 800477a:	401a      	ands	r2, r3
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8004782:	e007      	b.n	8004794 <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	431a      	orrs	r2, r3
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	6a1b      	ldr	r3, [r3, #32]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d107      	bne.n	80047ac <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	431a      	orrs	r2, r3
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80047b2:	f023 0201 	bic.w	r2, r3, #1
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80047bc:	2300      	movs	r3, #0
 80047be:	e006      	b.n	80047ce <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
  }
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	371c      	adds	r7, #28
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	40006400 	.word	0x40006400

080047e0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d12e      	bne.n	8004852 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2202      	movs	r2, #2
 80047f8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f022 0201 	bic.w	r2, r2, #1
 800480a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800480c:	f7ff fdde 	bl	80043cc <HAL_GetTick>
 8004810:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004812:	e012      	b.n	800483a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004814:	f7ff fdda 	bl	80043cc <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b0a      	cmp	r3, #10
 8004820:	d90b      	bls.n	800483a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004826:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2205      	movs	r2, #5
 8004832:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e012      	b.n	8004860 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f003 0301 	and.w	r3, r3, #1
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1e5      	bne.n	8004814 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800484e:	2300      	movs	r3, #0
 8004850:	e006      	b.n	8004860 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004856:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
  }
}
 8004860:	4618      	mov	r0, r3
 8004862:	3710      	adds	r7, #16
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8004868:	b480      	push	{r7}
 800486a:	b089      	sub	sp, #36	@ 0x24
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
 8004874:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f893 3020 	ldrb.w	r3, [r3, #32]
 800487c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004886:	7ffb      	ldrb	r3, [r7, #31]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d003      	beq.n	8004894 <HAL_CAN_AddTxMessage+0x2c>
 800488c:	7ffb      	ldrb	r3, [r7, #31]
 800488e:	2b02      	cmp	r3, #2
 8004890:	f040 80ad 	bne.w	80049ee <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d10a      	bne.n	80048b4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d105      	bne.n	80048b4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f000 8095 	beq.w	80049de <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	0e1b      	lsrs	r3, r3, #24
 80048b8:	f003 0303 	and.w	r3, r3, #3
 80048bc:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80048be:	2201      	movs	r2, #1
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	409a      	lsls	r2, r3
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d10d      	bne.n	80048ec <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80048da:	68f9      	ldr	r1, [r7, #12]
 80048dc:	6809      	ldr	r1, [r1, #0]
 80048de:	431a      	orrs	r2, r3
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	3318      	adds	r3, #24
 80048e4:	011b      	lsls	r3, r3, #4
 80048e6:	440b      	add	r3, r1
 80048e8:	601a      	str	r2, [r3, #0]
 80048ea:	e00f      	b.n	800490c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80048f6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80048fc:	68f9      	ldr	r1, [r7, #12]
 80048fe:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004900:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	3318      	adds	r3, #24
 8004906:	011b      	lsls	r3, r3, #4
 8004908:	440b      	add	r3, r1
 800490a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6819      	ldr	r1, [r3, #0]
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	691a      	ldr	r2, [r3, #16]
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	3318      	adds	r3, #24
 8004918:	011b      	lsls	r3, r3, #4
 800491a:	440b      	add	r3, r1
 800491c:	3304      	adds	r3, #4
 800491e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	7d1b      	ldrb	r3, [r3, #20]
 8004924:	2b01      	cmp	r3, #1
 8004926:	d111      	bne.n	800494c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	3318      	adds	r3, #24
 8004930:	011b      	lsls	r3, r3, #4
 8004932:	4413      	add	r3, r2
 8004934:	3304      	adds	r3, #4
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	6811      	ldr	r1, [r2, #0]
 800493c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	3318      	adds	r3, #24
 8004944:	011b      	lsls	r3, r3, #4
 8004946:	440b      	add	r3, r1
 8004948:	3304      	adds	r3, #4
 800494a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	3307      	adds	r3, #7
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	061a      	lsls	r2, r3, #24
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	3306      	adds	r3, #6
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	041b      	lsls	r3, r3, #16
 800495c:	431a      	orrs	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	3305      	adds	r3, #5
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	021b      	lsls	r3, r3, #8
 8004966:	4313      	orrs	r3, r2
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	3204      	adds	r2, #4
 800496c:	7812      	ldrb	r2, [r2, #0]
 800496e:	4610      	mov	r0, r2
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	6811      	ldr	r1, [r2, #0]
 8004974:	ea43 0200 	orr.w	r2, r3, r0
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	011b      	lsls	r3, r3, #4
 800497c:	440b      	add	r3, r1
 800497e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8004982:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	3303      	adds	r3, #3
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	061a      	lsls	r2, r3, #24
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	3302      	adds	r3, #2
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	041b      	lsls	r3, r3, #16
 8004994:	431a      	orrs	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	3301      	adds	r3, #1
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	021b      	lsls	r3, r3, #8
 800499e:	4313      	orrs	r3, r2
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	7812      	ldrb	r2, [r2, #0]
 80049a4:	4610      	mov	r0, r2
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	6811      	ldr	r1, [r2, #0]
 80049aa:	ea43 0200 	orr.w	r2, r3, r0
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	011b      	lsls	r3, r3, #4
 80049b2:	440b      	add	r3, r1
 80049b4:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80049b8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	3318      	adds	r3, #24
 80049c2:	011b      	lsls	r3, r3, #4
 80049c4:	4413      	add	r3, r2
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	6811      	ldr	r1, [r2, #0]
 80049cc:	f043 0201 	orr.w	r2, r3, #1
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	3318      	adds	r3, #24
 80049d4:	011b      	lsls	r3, r3, #4
 80049d6:	440b      	add	r3, r1
 80049d8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80049da:	2300      	movs	r3, #0
 80049dc:	e00e      	b.n	80049fc <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e006      	b.n	80049fc <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
  }
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3724      	adds	r7, #36	@ 0x24
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a18:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004a1a:	7bfb      	ldrb	r3, [r7, #15]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d002      	beq.n	8004a26 <HAL_CAN_ActivateNotification+0x1e>
 8004a20:	7bfb      	ldrb	r3, [r7, #15]
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d109      	bne.n	8004a3a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	6959      	ldr	r1, [r3, #20]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	683a      	ldr	r2, [r7, #0]
 8004a32:	430a      	orrs	r2, r1
 8004a34:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004a36:	2300      	movs	r3, #0
 8004a38:	e006      	b.n	8004a48 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a3e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
  }
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3714      	adds	r7, #20
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b08a      	sub	sp, #40	@ 0x28
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	695b      	ldr	r3, [r3, #20]
 8004a66:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004a90:	6a3b      	ldr	r3, [r7, #32]
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d07c      	beq.n	8004b94 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	f003 0301 	and.w	r3, r3, #1
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d023      	beq.n	8004aec <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	f003 0302 	and.w	r3, r3, #2
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d003      	beq.n	8004abe <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 f983 	bl	8004dc2 <HAL_CAN_TxMailbox0CompleteCallback>
 8004abc:	e016      	b.n	8004aec <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	f003 0304 	and.w	r3, r3, #4
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d004      	beq.n	8004ad2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aca:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004ace:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ad0:	e00c      	b.n	8004aec <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	f003 0308 	and.w	r3, r3, #8
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d004      	beq.n	8004ae6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ade:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004ae2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ae4:	e002      	b.n	8004aec <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 f989 	bl	8004dfe <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d024      	beq.n	8004b40 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004afe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d003      	beq.n	8004b12 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 f963 	bl	8004dd6 <HAL_CAN_TxMailbox1CompleteCallback>
 8004b10:	e016      	b.n	8004b40 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d004      	beq.n	8004b26 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b1e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004b22:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b24:	e00c      	b.n	8004b40 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d004      	beq.n	8004b3a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b32:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004b36:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b38:	e002      	b.n	8004b40 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 f969 	bl	8004e12 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d024      	beq.n	8004b94 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004b52:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d003      	beq.n	8004b66 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 f943 	bl	8004dea <HAL_CAN_TxMailbox2CompleteCallback>
 8004b64:	e016      	b.n	8004b94 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d004      	beq.n	8004b7a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b76:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b78:	e00c      	b.n	8004b94 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d004      	beq.n	8004b8e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b8c:	e002      	b.n	8004b94 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 f949 	bl	8004e26 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004b94:	6a3b      	ldr	r3, [r7, #32]
 8004b96:	f003 0308 	and.w	r3, r3, #8
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00c      	beq.n	8004bb8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	f003 0310 	and.w	r3, r3, #16
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d007      	beq.n	8004bb8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004baa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004bae:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2210      	movs	r2, #16
 8004bb6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004bb8:	6a3b      	ldr	r3, [r7, #32]
 8004bba:	f003 0304 	and.w	r3, r3, #4
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00b      	beq.n	8004bda <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f003 0308 	and.w	r3, r3, #8
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d006      	beq.n	8004bda <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2208      	movs	r2, #8
 8004bd2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 f93a 	bl	8004e4e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004bda:	6a3b      	ldr	r3, [r7, #32]
 8004bdc:	f003 0302 	and.w	r3, r3, #2
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d009      	beq.n	8004bf8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	f003 0303 	and.w	r3, r3, #3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d002      	beq.n	8004bf8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 f921 	bl	8004e3a <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004bf8:	6a3b      	ldr	r3, [r7, #32]
 8004bfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00c      	beq.n	8004c1c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	f003 0310 	and.w	r3, r3, #16
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d007      	beq.n	8004c1c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c0e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004c12:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2210      	movs	r2, #16
 8004c1a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004c1c:	6a3b      	ldr	r3, [r7, #32]
 8004c1e:	f003 0320 	and.w	r3, r3, #32
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00b      	beq.n	8004c3e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	f003 0308 	and.w	r3, r3, #8
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d006      	beq.n	8004c3e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2208      	movs	r2, #8
 8004c36:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 f91c 	bl	8004e76 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004c3e:	6a3b      	ldr	r3, [r7, #32]
 8004c40:	f003 0310 	and.w	r3, r3, #16
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d009      	beq.n	8004c5c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	f003 0303 	and.w	r3, r3, #3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d002      	beq.n	8004c5c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f903 	bl	8004e62 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004c5c:	6a3b      	ldr	r3, [r7, #32]
 8004c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00b      	beq.n	8004c7e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	f003 0310 	and.w	r3, r3, #16
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d006      	beq.n	8004c7e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2210      	movs	r2, #16
 8004c76:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f000 f906 	bl	8004e8a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004c7e:	6a3b      	ldr	r3, [r7, #32]
 8004c80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d00b      	beq.n	8004ca0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	f003 0308 	and.w	r3, r3, #8
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d006      	beq.n	8004ca0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2208      	movs	r2, #8
 8004c98:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 f8ff 	bl	8004e9e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004ca0:	6a3b      	ldr	r3, [r7, #32]
 8004ca2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d07b      	beq.n	8004da2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	f003 0304 	and.w	r3, r3, #4
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d072      	beq.n	8004d9a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004cb4:	6a3b      	ldr	r3, [r7, #32]
 8004cb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d008      	beq.n	8004cd0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d003      	beq.n	8004cd0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cca:	f043 0301 	orr.w	r3, r3, #1
 8004cce:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004cd0:	6a3b      	ldr	r3, [r7, #32]
 8004cd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d008      	beq.n	8004cec <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d003      	beq.n	8004cec <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce6:	f043 0302 	orr.w	r3, r3, #2
 8004cea:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004cec:	6a3b      	ldr	r3, [r7, #32]
 8004cee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d008      	beq.n	8004d08 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d003      	beq.n	8004d08 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d02:	f043 0304 	orr.w	r3, r3, #4
 8004d06:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004d08:	6a3b      	ldr	r3, [r7, #32]
 8004d0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d043      	beq.n	8004d9a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d03e      	beq.n	8004d9a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004d22:	2b60      	cmp	r3, #96	@ 0x60
 8004d24:	d02b      	beq.n	8004d7e <HAL_CAN_IRQHandler+0x32a>
 8004d26:	2b60      	cmp	r3, #96	@ 0x60
 8004d28:	d82e      	bhi.n	8004d88 <HAL_CAN_IRQHandler+0x334>
 8004d2a:	2b50      	cmp	r3, #80	@ 0x50
 8004d2c:	d022      	beq.n	8004d74 <HAL_CAN_IRQHandler+0x320>
 8004d2e:	2b50      	cmp	r3, #80	@ 0x50
 8004d30:	d82a      	bhi.n	8004d88 <HAL_CAN_IRQHandler+0x334>
 8004d32:	2b40      	cmp	r3, #64	@ 0x40
 8004d34:	d019      	beq.n	8004d6a <HAL_CAN_IRQHandler+0x316>
 8004d36:	2b40      	cmp	r3, #64	@ 0x40
 8004d38:	d826      	bhi.n	8004d88 <HAL_CAN_IRQHandler+0x334>
 8004d3a:	2b30      	cmp	r3, #48	@ 0x30
 8004d3c:	d010      	beq.n	8004d60 <HAL_CAN_IRQHandler+0x30c>
 8004d3e:	2b30      	cmp	r3, #48	@ 0x30
 8004d40:	d822      	bhi.n	8004d88 <HAL_CAN_IRQHandler+0x334>
 8004d42:	2b10      	cmp	r3, #16
 8004d44:	d002      	beq.n	8004d4c <HAL_CAN_IRQHandler+0x2f8>
 8004d46:	2b20      	cmp	r3, #32
 8004d48:	d005      	beq.n	8004d56 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004d4a:	e01d      	b.n	8004d88 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d4e:	f043 0308 	orr.w	r3, r3, #8
 8004d52:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004d54:	e019      	b.n	8004d8a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d58:	f043 0310 	orr.w	r3, r3, #16
 8004d5c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004d5e:	e014      	b.n	8004d8a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d62:	f043 0320 	orr.w	r3, r3, #32
 8004d66:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004d68:	e00f      	b.n	8004d8a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d70:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004d72:	e00a      	b.n	8004d8a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d7a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004d7c:	e005      	b.n	8004d8a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d84:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004d86:	e000      	b.n	8004d8a <HAL_CAN_IRQHandler+0x336>
            break;
 8004d88:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	699a      	ldr	r2, [r3, #24]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004d98:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2204      	movs	r2, #4
 8004da0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d008      	beq.n	8004dba <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dae:	431a      	orrs	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 f87c 	bl	8004eb2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004dba:	bf00      	nop
 8004dbc:	3728      	adds	r7, #40	@ 0x28
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004dc2:	b480      	push	{r7}
 8004dc4:	b083      	sub	sp, #12
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004dca:	bf00      	nop
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr

08004dd6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004dd6:	b480      	push	{r7}
 8004dd8:	b083      	sub	sp, #12
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004dde:	bf00      	nop
 8004de0:	370c      	adds	r7, #12
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr

08004dea <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004dea:	b480      	push	{r7}
 8004dec:	b083      	sub	sp, #12
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004df2:	bf00      	nop
 8004df4:	370c      	adds	r7, #12
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr

08004dfe <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004dfe:	b480      	push	{r7}
 8004e00:	b083      	sub	sp, #12
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004e06:	bf00      	nop
 8004e08:	370c      	adds	r7, #12
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr

08004e12 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004e12:	b480      	push	{r7}
 8004e14:	b083      	sub	sp, #12
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004e1a:	bf00      	nop
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004e26:	b480      	push	{r7}
 8004e28:	b083      	sub	sp, #12
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004e2e:	bf00      	nop
 8004e30:	370c      	adds	r7, #12
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr

08004e3a <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b083      	sub	sp, #12
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8004e42:	bf00      	nop
 8004e44:	370c      	adds	r7, #12
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr

08004e4e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004e4e:	b480      	push	{r7}
 8004e50:	b083      	sub	sp, #12
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004e56:	bf00      	nop
 8004e58:	370c      	adds	r7, #12
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr

08004e62 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004e62:	b480      	push	{r7}
 8004e64:	b083      	sub	sp, #12
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004e6a:	bf00      	nop
 8004e6c:	370c      	adds	r7, #12
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr

08004e76 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004e76:	b480      	push	{r7}
 8004e78:	b083      	sub	sp, #12
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004e7e:	bf00      	nop
 8004e80:	370c      	adds	r7, #12
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr

08004e8a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004e8a:	b480      	push	{r7}
 8004e8c:	b083      	sub	sp, #12
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004e92:	bf00      	nop
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr

08004e9e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	b083      	sub	sp, #12
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004ea6:	bf00      	nop
 8004ea8:	370c      	adds	r7, #12
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr

08004eb2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004eb2:	b480      	push	{r7}
 8004eb4:	b083      	sub	sp, #12
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004eba:	bf00      	nop
 8004ebc:	370c      	adds	r7, #12
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
	...

08004ec8 <__NVIC_SetPriorityGrouping>:
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f003 0307 	and.w	r3, r3, #7
 8004ed6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8004f0c <__NVIC_SetPriorityGrouping+0x44>)
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ede:	68ba      	ldr	r2, [r7, #8]
 8004ee0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ef0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004ef4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ef8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004efa:	4a04      	ldr	r2, [pc, #16]	@ (8004f0c <__NVIC_SetPriorityGrouping+0x44>)
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	60d3      	str	r3, [r2, #12]
}
 8004f00:	bf00      	nop
 8004f02:	3714      	adds	r7, #20
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr
 8004f0c:	e000ed00 	.word	0xe000ed00

08004f10 <__NVIC_GetPriorityGrouping>:
{
 8004f10:	b480      	push	{r7}
 8004f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f14:	4b04      	ldr	r3, [pc, #16]	@ (8004f28 <__NVIC_GetPriorityGrouping+0x18>)
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	0a1b      	lsrs	r3, r3, #8
 8004f1a:	f003 0307 	and.w	r3, r3, #7
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr
 8004f28:	e000ed00 	.word	0xe000ed00

08004f2c <__NVIC_EnableIRQ>:
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	4603      	mov	r3, r0
 8004f34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	db0b      	blt.n	8004f56 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f3e:	79fb      	ldrb	r3, [r7, #7]
 8004f40:	f003 021f 	and.w	r2, r3, #31
 8004f44:	4907      	ldr	r1, [pc, #28]	@ (8004f64 <__NVIC_EnableIRQ+0x38>)
 8004f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f4a:	095b      	lsrs	r3, r3, #5
 8004f4c:	2001      	movs	r0, #1
 8004f4e:	fa00 f202 	lsl.w	r2, r0, r2
 8004f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004f56:	bf00      	nop
 8004f58:	370c      	adds	r7, #12
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	e000e100 	.word	0xe000e100

08004f68 <__NVIC_SetPriority>:
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	4603      	mov	r3, r0
 8004f70:	6039      	str	r1, [r7, #0]
 8004f72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	db0a      	blt.n	8004f92 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	b2da      	uxtb	r2, r3
 8004f80:	490c      	ldr	r1, [pc, #48]	@ (8004fb4 <__NVIC_SetPriority+0x4c>)
 8004f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f86:	0112      	lsls	r2, r2, #4
 8004f88:	b2d2      	uxtb	r2, r2
 8004f8a:	440b      	add	r3, r1
 8004f8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004f90:	e00a      	b.n	8004fa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	b2da      	uxtb	r2, r3
 8004f96:	4908      	ldr	r1, [pc, #32]	@ (8004fb8 <__NVIC_SetPriority+0x50>)
 8004f98:	79fb      	ldrb	r3, [r7, #7]
 8004f9a:	f003 030f 	and.w	r3, r3, #15
 8004f9e:	3b04      	subs	r3, #4
 8004fa0:	0112      	lsls	r2, r2, #4
 8004fa2:	b2d2      	uxtb	r2, r2
 8004fa4:	440b      	add	r3, r1
 8004fa6:	761a      	strb	r2, [r3, #24]
}
 8004fa8:	bf00      	nop
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr
 8004fb4:	e000e100 	.word	0xe000e100
 8004fb8:	e000ed00 	.word	0xe000ed00

08004fbc <NVIC_EncodePriority>:
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b089      	sub	sp, #36	@ 0x24
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f003 0307 	and.w	r3, r3, #7
 8004fce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	f1c3 0307 	rsb	r3, r3, #7
 8004fd6:	2b04      	cmp	r3, #4
 8004fd8:	bf28      	it	cs
 8004fda:	2304      	movcs	r3, #4
 8004fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	3304      	adds	r3, #4
 8004fe2:	2b06      	cmp	r3, #6
 8004fe4:	d902      	bls.n	8004fec <NVIC_EncodePriority+0x30>
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	3b03      	subs	r3, #3
 8004fea:	e000      	b.n	8004fee <NVIC_EncodePriority+0x32>
 8004fec:	2300      	movs	r3, #0
 8004fee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffa:	43da      	mvns	r2, r3
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	401a      	ands	r2, r3
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005004:	f04f 31ff 	mov.w	r1, #4294967295
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	fa01 f303 	lsl.w	r3, r1, r3
 800500e:	43d9      	mvns	r1, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005014:	4313      	orrs	r3, r2
}
 8005016:	4618      	mov	r0, r3
 8005018:	3724      	adds	r7, #36	@ 0x24
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
	...

08005024 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	3b01      	subs	r3, #1
 8005030:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005034:	d301      	bcc.n	800503a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005036:	2301      	movs	r3, #1
 8005038:	e00f      	b.n	800505a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800503a:	4a0a      	ldr	r2, [pc, #40]	@ (8005064 <SysTick_Config+0x40>)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	3b01      	subs	r3, #1
 8005040:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005042:	210f      	movs	r1, #15
 8005044:	f04f 30ff 	mov.w	r0, #4294967295
 8005048:	f7ff ff8e 	bl	8004f68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800504c:	4b05      	ldr	r3, [pc, #20]	@ (8005064 <SysTick_Config+0x40>)
 800504e:	2200      	movs	r2, #0
 8005050:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005052:	4b04      	ldr	r3, [pc, #16]	@ (8005064 <SysTick_Config+0x40>)
 8005054:	2207      	movs	r2, #7
 8005056:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3708      	adds	r7, #8
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	e000e010 	.word	0xe000e010

08005068 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f7ff ff29 	bl	8004ec8 <__NVIC_SetPriorityGrouping>
}
 8005076:	bf00      	nop
 8005078:	3708      	adds	r7, #8
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}

0800507e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800507e:	b580      	push	{r7, lr}
 8005080:	b086      	sub	sp, #24
 8005082:	af00      	add	r7, sp, #0
 8005084:	4603      	mov	r3, r0
 8005086:	60b9      	str	r1, [r7, #8]
 8005088:	607a      	str	r2, [r7, #4]
 800508a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800508c:	2300      	movs	r3, #0
 800508e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005090:	f7ff ff3e 	bl	8004f10 <__NVIC_GetPriorityGrouping>
 8005094:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	68b9      	ldr	r1, [r7, #8]
 800509a:	6978      	ldr	r0, [r7, #20]
 800509c:	f7ff ff8e 	bl	8004fbc <NVIC_EncodePriority>
 80050a0:	4602      	mov	r2, r0
 80050a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050a6:	4611      	mov	r1, r2
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7ff ff5d 	bl	8004f68 <__NVIC_SetPriority>
}
 80050ae:	bf00      	nop
 80050b0:	3718      	adds	r7, #24
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}

080050b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b082      	sub	sp, #8
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	4603      	mov	r3, r0
 80050be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80050c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050c4:	4618      	mov	r0, r3
 80050c6:	f7ff ff31 	bl	8004f2c <__NVIC_EnableIRQ>
}
 80050ca:	bf00      	nop
 80050cc:	3708      	adds	r7, #8
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b082      	sub	sp, #8
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f7ff ffa2 	bl	8005024 <SysTick_Config>
 80050e0:	4603      	mov	r3, r0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3708      	adds	r7, #8
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
	...

080050ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b089      	sub	sp, #36	@ 0x24
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80050f6:	2300      	movs	r3, #0
 80050f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80050fa:	2300      	movs	r3, #0
 80050fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80050fe:	2300      	movs	r3, #0
 8005100:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005102:	2300      	movs	r3, #0
 8005104:	61fb      	str	r3, [r7, #28]
 8005106:	e16b      	b.n	80053e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005108:	2201      	movs	r2, #1
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	fa02 f303 	lsl.w	r3, r2, r3
 8005110:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	697a      	ldr	r2, [r7, #20]
 8005118:	4013      	ands	r3, r2
 800511a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	429a      	cmp	r2, r3
 8005122:	f040 815a 	bne.w	80053da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	f003 0303 	and.w	r3, r3, #3
 800512e:	2b01      	cmp	r3, #1
 8005130:	d005      	beq.n	800513e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800513a:	2b02      	cmp	r3, #2
 800513c:	d130      	bne.n	80051a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	005b      	lsls	r3, r3, #1
 8005148:	2203      	movs	r2, #3
 800514a:	fa02 f303 	lsl.w	r3, r2, r3
 800514e:	43db      	mvns	r3, r3
 8005150:	69ba      	ldr	r2, [r7, #24]
 8005152:	4013      	ands	r3, r2
 8005154:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	68da      	ldr	r2, [r3, #12]
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	005b      	lsls	r3, r3, #1
 800515e:	fa02 f303 	lsl.w	r3, r2, r3
 8005162:	69ba      	ldr	r2, [r7, #24]
 8005164:	4313      	orrs	r3, r2
 8005166:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	69ba      	ldr	r2, [r7, #24]
 800516c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005174:	2201      	movs	r2, #1
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	fa02 f303 	lsl.w	r3, r2, r3
 800517c:	43db      	mvns	r3, r3
 800517e:	69ba      	ldr	r2, [r7, #24]
 8005180:	4013      	ands	r3, r2
 8005182:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	091b      	lsrs	r3, r3, #4
 800518a:	f003 0201 	and.w	r2, r3, #1
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	fa02 f303 	lsl.w	r3, r2, r3
 8005194:	69ba      	ldr	r2, [r7, #24]
 8005196:	4313      	orrs	r3, r2
 8005198:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	69ba      	ldr	r2, [r7, #24]
 800519e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	f003 0303 	and.w	r3, r3, #3
 80051a8:	2b03      	cmp	r3, #3
 80051aa:	d017      	beq.n	80051dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	005b      	lsls	r3, r3, #1
 80051b6:	2203      	movs	r2, #3
 80051b8:	fa02 f303 	lsl.w	r3, r2, r3
 80051bc:	43db      	mvns	r3, r3
 80051be:	69ba      	ldr	r2, [r7, #24]
 80051c0:	4013      	ands	r3, r2
 80051c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	689a      	ldr	r2, [r3, #8]
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	005b      	lsls	r3, r3, #1
 80051cc:	fa02 f303 	lsl.w	r3, r2, r3
 80051d0:	69ba      	ldr	r2, [r7, #24]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	69ba      	ldr	r2, [r7, #24]
 80051da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	f003 0303 	and.w	r3, r3, #3
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d123      	bne.n	8005230 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	08da      	lsrs	r2, r3, #3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	3208      	adds	r2, #8
 80051f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	f003 0307 	and.w	r3, r3, #7
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	220f      	movs	r2, #15
 8005200:	fa02 f303 	lsl.w	r3, r2, r3
 8005204:	43db      	mvns	r3, r3
 8005206:	69ba      	ldr	r2, [r7, #24]
 8005208:	4013      	ands	r3, r2
 800520a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	691a      	ldr	r2, [r3, #16]
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	f003 0307 	and.w	r3, r3, #7
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	fa02 f303 	lsl.w	r3, r2, r3
 800521c:	69ba      	ldr	r2, [r7, #24]
 800521e:	4313      	orrs	r3, r2
 8005220:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	08da      	lsrs	r2, r3, #3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	3208      	adds	r2, #8
 800522a:	69b9      	ldr	r1, [r7, #24]
 800522c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	005b      	lsls	r3, r3, #1
 800523a:	2203      	movs	r2, #3
 800523c:	fa02 f303 	lsl.w	r3, r2, r3
 8005240:	43db      	mvns	r3, r3
 8005242:	69ba      	ldr	r2, [r7, #24]
 8005244:	4013      	ands	r3, r2
 8005246:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	f003 0203 	and.w	r2, r3, #3
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	005b      	lsls	r3, r3, #1
 8005254:	fa02 f303 	lsl.w	r3, r2, r3
 8005258:	69ba      	ldr	r2, [r7, #24]
 800525a:	4313      	orrs	r3, r2
 800525c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	69ba      	ldr	r2, [r7, #24]
 8005262:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800526c:	2b00      	cmp	r3, #0
 800526e:	f000 80b4 	beq.w	80053da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005272:	2300      	movs	r3, #0
 8005274:	60fb      	str	r3, [r7, #12]
 8005276:	4b60      	ldr	r3, [pc, #384]	@ (80053f8 <HAL_GPIO_Init+0x30c>)
 8005278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800527a:	4a5f      	ldr	r2, [pc, #380]	@ (80053f8 <HAL_GPIO_Init+0x30c>)
 800527c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005280:	6453      	str	r3, [r2, #68]	@ 0x44
 8005282:	4b5d      	ldr	r3, [pc, #372]	@ (80053f8 <HAL_GPIO_Init+0x30c>)
 8005284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005286:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800528a:	60fb      	str	r3, [r7, #12]
 800528c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800528e:	4a5b      	ldr	r2, [pc, #364]	@ (80053fc <HAL_GPIO_Init+0x310>)
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	089b      	lsrs	r3, r3, #2
 8005294:	3302      	adds	r3, #2
 8005296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800529a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	f003 0303 	and.w	r3, r3, #3
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	220f      	movs	r2, #15
 80052a6:	fa02 f303 	lsl.w	r3, r2, r3
 80052aa:	43db      	mvns	r3, r3
 80052ac:	69ba      	ldr	r2, [r7, #24]
 80052ae:	4013      	ands	r3, r2
 80052b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a52      	ldr	r2, [pc, #328]	@ (8005400 <HAL_GPIO_Init+0x314>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d02b      	beq.n	8005312 <HAL_GPIO_Init+0x226>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a51      	ldr	r2, [pc, #324]	@ (8005404 <HAL_GPIO_Init+0x318>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d025      	beq.n	800530e <HAL_GPIO_Init+0x222>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a50      	ldr	r2, [pc, #320]	@ (8005408 <HAL_GPIO_Init+0x31c>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d01f      	beq.n	800530a <HAL_GPIO_Init+0x21e>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a4f      	ldr	r2, [pc, #316]	@ (800540c <HAL_GPIO_Init+0x320>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d019      	beq.n	8005306 <HAL_GPIO_Init+0x21a>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a4e      	ldr	r2, [pc, #312]	@ (8005410 <HAL_GPIO_Init+0x324>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d013      	beq.n	8005302 <HAL_GPIO_Init+0x216>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a4d      	ldr	r2, [pc, #308]	@ (8005414 <HAL_GPIO_Init+0x328>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d00d      	beq.n	80052fe <HAL_GPIO_Init+0x212>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a4c      	ldr	r2, [pc, #304]	@ (8005418 <HAL_GPIO_Init+0x32c>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d007      	beq.n	80052fa <HAL_GPIO_Init+0x20e>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a4b      	ldr	r2, [pc, #300]	@ (800541c <HAL_GPIO_Init+0x330>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d101      	bne.n	80052f6 <HAL_GPIO_Init+0x20a>
 80052f2:	2307      	movs	r3, #7
 80052f4:	e00e      	b.n	8005314 <HAL_GPIO_Init+0x228>
 80052f6:	2308      	movs	r3, #8
 80052f8:	e00c      	b.n	8005314 <HAL_GPIO_Init+0x228>
 80052fa:	2306      	movs	r3, #6
 80052fc:	e00a      	b.n	8005314 <HAL_GPIO_Init+0x228>
 80052fe:	2305      	movs	r3, #5
 8005300:	e008      	b.n	8005314 <HAL_GPIO_Init+0x228>
 8005302:	2304      	movs	r3, #4
 8005304:	e006      	b.n	8005314 <HAL_GPIO_Init+0x228>
 8005306:	2303      	movs	r3, #3
 8005308:	e004      	b.n	8005314 <HAL_GPIO_Init+0x228>
 800530a:	2302      	movs	r3, #2
 800530c:	e002      	b.n	8005314 <HAL_GPIO_Init+0x228>
 800530e:	2301      	movs	r3, #1
 8005310:	e000      	b.n	8005314 <HAL_GPIO_Init+0x228>
 8005312:	2300      	movs	r3, #0
 8005314:	69fa      	ldr	r2, [r7, #28]
 8005316:	f002 0203 	and.w	r2, r2, #3
 800531a:	0092      	lsls	r2, r2, #2
 800531c:	4093      	lsls	r3, r2
 800531e:	69ba      	ldr	r2, [r7, #24]
 8005320:	4313      	orrs	r3, r2
 8005322:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005324:	4935      	ldr	r1, [pc, #212]	@ (80053fc <HAL_GPIO_Init+0x310>)
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	089b      	lsrs	r3, r3, #2
 800532a:	3302      	adds	r3, #2
 800532c:	69ba      	ldr	r2, [r7, #24]
 800532e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005332:	4b3b      	ldr	r3, [pc, #236]	@ (8005420 <HAL_GPIO_Init+0x334>)
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	43db      	mvns	r3, r3
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	4013      	ands	r3, r2
 8005340:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d003      	beq.n	8005356 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800534e:	69ba      	ldr	r2, [r7, #24]
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	4313      	orrs	r3, r2
 8005354:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005356:	4a32      	ldr	r2, [pc, #200]	@ (8005420 <HAL_GPIO_Init+0x334>)
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800535c:	4b30      	ldr	r3, [pc, #192]	@ (8005420 <HAL_GPIO_Init+0x334>)
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	43db      	mvns	r3, r3
 8005366:	69ba      	ldr	r2, [r7, #24]
 8005368:	4013      	ands	r3, r2
 800536a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d003      	beq.n	8005380 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005378:	69ba      	ldr	r2, [r7, #24]
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	4313      	orrs	r3, r2
 800537e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005380:	4a27      	ldr	r2, [pc, #156]	@ (8005420 <HAL_GPIO_Init+0x334>)
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005386:	4b26      	ldr	r3, [pc, #152]	@ (8005420 <HAL_GPIO_Init+0x334>)
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	43db      	mvns	r3, r3
 8005390:	69ba      	ldr	r2, [r7, #24]
 8005392:	4013      	ands	r3, r2
 8005394:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d003      	beq.n	80053aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80053a2:	69ba      	ldr	r2, [r7, #24]
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80053aa:	4a1d      	ldr	r2, [pc, #116]	@ (8005420 <HAL_GPIO_Init+0x334>)
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80053b0:	4b1b      	ldr	r3, [pc, #108]	@ (8005420 <HAL_GPIO_Init+0x334>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	43db      	mvns	r3, r3
 80053ba:	69ba      	ldr	r2, [r7, #24]
 80053bc:	4013      	ands	r3, r2
 80053be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d003      	beq.n	80053d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80053cc:	69ba      	ldr	r2, [r7, #24]
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80053d4:	4a12      	ldr	r2, [pc, #72]	@ (8005420 <HAL_GPIO_Init+0x334>)
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	3301      	adds	r3, #1
 80053de:	61fb      	str	r3, [r7, #28]
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	2b0f      	cmp	r3, #15
 80053e4:	f67f ae90 	bls.w	8005108 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80053e8:	bf00      	nop
 80053ea:	bf00      	nop
 80053ec:	3724      	adds	r7, #36	@ 0x24
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	40023800 	.word	0x40023800
 80053fc:	40013800 	.word	0x40013800
 8005400:	40020000 	.word	0x40020000
 8005404:	40020400 	.word	0x40020400
 8005408:	40020800 	.word	0x40020800
 800540c:	40020c00 	.word	0x40020c00
 8005410:	40021000 	.word	0x40021000
 8005414:	40021400 	.word	0x40021400
 8005418:	40021800 	.word	0x40021800
 800541c:	40021c00 	.word	0x40021c00
 8005420:	40013c00 	.word	0x40013c00

08005424 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	460b      	mov	r3, r1
 800542e:	807b      	strh	r3, [r7, #2]
 8005430:	4613      	mov	r3, r2
 8005432:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005434:	787b      	ldrb	r3, [r7, #1]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d003      	beq.n	8005442 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800543a:	887a      	ldrh	r2, [r7, #2]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005440:	e003      	b.n	800544a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005442:	887b      	ldrh	r3, [r7, #2]
 8005444:	041a      	lsls	r2, r3, #16
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	619a      	str	r2, [r3, #24]
}
 800544a:	bf00      	nop
 800544c:	370c      	adds	r7, #12
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr

08005456 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005456:	b480      	push	{r7}
 8005458:	b085      	sub	sp, #20
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
 800545e:	460b      	mov	r3, r1
 8005460:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	695b      	ldr	r3, [r3, #20]
 8005466:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005468:	887a      	ldrh	r2, [r7, #2]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	4013      	ands	r3, r2
 800546e:	041a      	lsls	r2, r3, #16
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	43d9      	mvns	r1, r3
 8005474:	887b      	ldrh	r3, [r7, #2]
 8005476:	400b      	ands	r3, r1
 8005478:	431a      	orrs	r2, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	619a      	str	r2, [r3, #24]
}
 800547e:	bf00      	nop
 8005480:	3714      	adds	r7, #20
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr
	...

0800548c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b086      	sub	sp, #24
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e267      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0301 	and.w	r3, r3, #1
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d075      	beq.n	8005596 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80054aa:	4b88      	ldr	r3, [pc, #544]	@ (80056cc <HAL_RCC_OscConfig+0x240>)
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f003 030c 	and.w	r3, r3, #12
 80054b2:	2b04      	cmp	r3, #4
 80054b4:	d00c      	beq.n	80054d0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054b6:	4b85      	ldr	r3, [pc, #532]	@ (80056cc <HAL_RCC_OscConfig+0x240>)
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80054be:	2b08      	cmp	r3, #8
 80054c0:	d112      	bne.n	80054e8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054c2:	4b82      	ldr	r3, [pc, #520]	@ (80056cc <HAL_RCC_OscConfig+0x240>)
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80054ce:	d10b      	bne.n	80054e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054d0:	4b7e      	ldr	r3, [pc, #504]	@ (80056cc <HAL_RCC_OscConfig+0x240>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d05b      	beq.n	8005594 <HAL_RCC_OscConfig+0x108>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d157      	bne.n	8005594 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e242      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054f0:	d106      	bne.n	8005500 <HAL_RCC_OscConfig+0x74>
 80054f2:	4b76      	ldr	r3, [pc, #472]	@ (80056cc <HAL_RCC_OscConfig+0x240>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a75      	ldr	r2, [pc, #468]	@ (80056cc <HAL_RCC_OscConfig+0x240>)
 80054f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054fc:	6013      	str	r3, [r2, #0]
 80054fe:	e01d      	b.n	800553c <HAL_RCC_OscConfig+0xb0>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005508:	d10c      	bne.n	8005524 <HAL_RCC_OscConfig+0x98>
 800550a:	4b70      	ldr	r3, [pc, #448]	@ (80056cc <HAL_RCC_OscConfig+0x240>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a6f      	ldr	r2, [pc, #444]	@ (80056cc <HAL_RCC_OscConfig+0x240>)
 8005510:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005514:	6013      	str	r3, [r2, #0]
 8005516:	4b6d      	ldr	r3, [pc, #436]	@ (80056cc <HAL_RCC_OscConfig+0x240>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a6c      	ldr	r2, [pc, #432]	@ (80056cc <HAL_RCC_OscConfig+0x240>)
 800551c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005520:	6013      	str	r3, [r2, #0]
 8005522:	e00b      	b.n	800553c <HAL_RCC_OscConfig+0xb0>
 8005524:	4b69      	ldr	r3, [pc, #420]	@ (80056cc <HAL_RCC_OscConfig+0x240>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a68      	ldr	r2, [pc, #416]	@ (80056cc <HAL_RCC_OscConfig+0x240>)
 800552a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800552e:	6013      	str	r3, [r2, #0]
 8005530:	4b66      	ldr	r3, [pc, #408]	@ (80056cc <HAL_RCC_OscConfig+0x240>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a65      	ldr	r2, [pc, #404]	@ (80056cc <HAL_RCC_OscConfig+0x240>)
 8005536:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800553a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d013      	beq.n	800556c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005544:	f7fe ff42 	bl	80043cc <HAL_GetTick>
 8005548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800554a:	e008      	b.n	800555e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800554c:	f7fe ff3e 	bl	80043cc <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	2b64      	cmp	r3, #100	@ 0x64
 8005558:	d901      	bls.n	800555e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e207      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800555e:	4b5b      	ldr	r3, [pc, #364]	@ (80056cc <HAL_RCC_OscConfig+0x240>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d0f0      	beq.n	800554c <HAL_RCC_OscConfig+0xc0>
 800556a:	e014      	b.n	8005596 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800556c:	f7fe ff2e 	bl	80043cc <HAL_GetTick>
 8005570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005572:	e008      	b.n	8005586 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005574:	f7fe ff2a 	bl	80043cc <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	2b64      	cmp	r3, #100	@ 0x64
 8005580:	d901      	bls.n	8005586 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e1f3      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005586:	4b51      	ldr	r3, [pc, #324]	@ (80056cc <HAL_RCC_OscConfig+0x240>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1f0      	bne.n	8005574 <HAL_RCC_OscConfig+0xe8>
 8005592:	e000      	b.n	8005596 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005594:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0302 	and.w	r3, r3, #2
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d063      	beq.n	800566a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80055a2:	4b4a      	ldr	r3, [pc, #296]	@ (80056cc <HAL_RCC_OscConfig+0x240>)
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f003 030c 	and.w	r3, r3, #12
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00b      	beq.n	80055c6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055ae:	4b47      	ldr	r3, [pc, #284]	@ (80056cc <HAL_RCC_OscConfig+0x240>)
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80055b6:	2b08      	cmp	r3, #8
 80055b8:	d11c      	bne.n	80055f4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055ba:	4b44      	ldr	r3, [pc, #272]	@ (80056cc <HAL_RCC_OscConfig+0x240>)
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d116      	bne.n	80055f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055c6:	4b41      	ldr	r3, [pc, #260]	@ (80056cc <HAL_RCC_OscConfig+0x240>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0302 	and.w	r3, r3, #2
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d005      	beq.n	80055de <HAL_RCC_OscConfig+0x152>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d001      	beq.n	80055de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e1c7      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055de:	4b3b      	ldr	r3, [pc, #236]	@ (80056cc <HAL_RCC_OscConfig+0x240>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	00db      	lsls	r3, r3, #3
 80055ec:	4937      	ldr	r1, [pc, #220]	@ (80056cc <HAL_RCC_OscConfig+0x240>)
 80055ee:	4313      	orrs	r3, r2
 80055f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055f2:	e03a      	b.n	800566a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d020      	beq.n	800563e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055fc:	4b34      	ldr	r3, [pc, #208]	@ (80056d0 <HAL_RCC_OscConfig+0x244>)
 80055fe:	2201      	movs	r2, #1
 8005600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005602:	f7fe fee3 	bl	80043cc <HAL_GetTick>
 8005606:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005608:	e008      	b.n	800561c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800560a:	f7fe fedf 	bl	80043cc <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	2b02      	cmp	r3, #2
 8005616:	d901      	bls.n	800561c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005618:	2303      	movs	r3, #3
 800561a:	e1a8      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800561c:	4b2b      	ldr	r3, [pc, #172]	@ (80056cc <HAL_RCC_OscConfig+0x240>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0302 	and.w	r3, r3, #2
 8005624:	2b00      	cmp	r3, #0
 8005626:	d0f0      	beq.n	800560a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005628:	4b28      	ldr	r3, [pc, #160]	@ (80056cc <HAL_RCC_OscConfig+0x240>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	00db      	lsls	r3, r3, #3
 8005636:	4925      	ldr	r1, [pc, #148]	@ (80056cc <HAL_RCC_OscConfig+0x240>)
 8005638:	4313      	orrs	r3, r2
 800563a:	600b      	str	r3, [r1, #0]
 800563c:	e015      	b.n	800566a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800563e:	4b24      	ldr	r3, [pc, #144]	@ (80056d0 <HAL_RCC_OscConfig+0x244>)
 8005640:	2200      	movs	r2, #0
 8005642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005644:	f7fe fec2 	bl	80043cc <HAL_GetTick>
 8005648:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800564a:	e008      	b.n	800565e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800564c:	f7fe febe 	bl	80043cc <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	2b02      	cmp	r3, #2
 8005658:	d901      	bls.n	800565e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e187      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800565e:	4b1b      	ldr	r3, [pc, #108]	@ (80056cc <HAL_RCC_OscConfig+0x240>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0302 	and.w	r3, r3, #2
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1f0      	bne.n	800564c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0308 	and.w	r3, r3, #8
 8005672:	2b00      	cmp	r3, #0
 8005674:	d036      	beq.n	80056e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d016      	beq.n	80056ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800567e:	4b15      	ldr	r3, [pc, #84]	@ (80056d4 <HAL_RCC_OscConfig+0x248>)
 8005680:	2201      	movs	r2, #1
 8005682:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005684:	f7fe fea2 	bl	80043cc <HAL_GetTick>
 8005688:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800568a:	e008      	b.n	800569e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800568c:	f7fe fe9e 	bl	80043cc <HAL_GetTick>
 8005690:	4602      	mov	r2, r0
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	2b02      	cmp	r3, #2
 8005698:	d901      	bls.n	800569e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e167      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800569e:	4b0b      	ldr	r3, [pc, #44]	@ (80056cc <HAL_RCC_OscConfig+0x240>)
 80056a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056a2:	f003 0302 	and.w	r3, r3, #2
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d0f0      	beq.n	800568c <HAL_RCC_OscConfig+0x200>
 80056aa:	e01b      	b.n	80056e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056ac:	4b09      	ldr	r3, [pc, #36]	@ (80056d4 <HAL_RCC_OscConfig+0x248>)
 80056ae:	2200      	movs	r2, #0
 80056b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056b2:	f7fe fe8b 	bl	80043cc <HAL_GetTick>
 80056b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056b8:	e00e      	b.n	80056d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80056ba:	f7fe fe87 	bl	80043cc <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d907      	bls.n	80056d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e150      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
 80056cc:	40023800 	.word	0x40023800
 80056d0:	42470000 	.word	0x42470000
 80056d4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056d8:	4b88      	ldr	r3, [pc, #544]	@ (80058fc <HAL_RCC_OscConfig+0x470>)
 80056da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056dc:	f003 0302 	and.w	r3, r3, #2
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1ea      	bne.n	80056ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0304 	and.w	r3, r3, #4
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f000 8097 	beq.w	8005820 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056f2:	2300      	movs	r3, #0
 80056f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056f6:	4b81      	ldr	r3, [pc, #516]	@ (80058fc <HAL_RCC_OscConfig+0x470>)
 80056f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d10f      	bne.n	8005722 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005702:	2300      	movs	r3, #0
 8005704:	60bb      	str	r3, [r7, #8]
 8005706:	4b7d      	ldr	r3, [pc, #500]	@ (80058fc <HAL_RCC_OscConfig+0x470>)
 8005708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800570a:	4a7c      	ldr	r2, [pc, #496]	@ (80058fc <HAL_RCC_OscConfig+0x470>)
 800570c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005710:	6413      	str	r3, [r2, #64]	@ 0x40
 8005712:	4b7a      	ldr	r3, [pc, #488]	@ (80058fc <HAL_RCC_OscConfig+0x470>)
 8005714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005716:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800571a:	60bb      	str	r3, [r7, #8]
 800571c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800571e:	2301      	movs	r3, #1
 8005720:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005722:	4b77      	ldr	r3, [pc, #476]	@ (8005900 <HAL_RCC_OscConfig+0x474>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800572a:	2b00      	cmp	r3, #0
 800572c:	d118      	bne.n	8005760 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800572e:	4b74      	ldr	r3, [pc, #464]	@ (8005900 <HAL_RCC_OscConfig+0x474>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a73      	ldr	r2, [pc, #460]	@ (8005900 <HAL_RCC_OscConfig+0x474>)
 8005734:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005738:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800573a:	f7fe fe47 	bl	80043cc <HAL_GetTick>
 800573e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005740:	e008      	b.n	8005754 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005742:	f7fe fe43 	bl	80043cc <HAL_GetTick>
 8005746:	4602      	mov	r2, r0
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	1ad3      	subs	r3, r2, r3
 800574c:	2b02      	cmp	r3, #2
 800574e:	d901      	bls.n	8005754 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005750:	2303      	movs	r3, #3
 8005752:	e10c      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005754:	4b6a      	ldr	r3, [pc, #424]	@ (8005900 <HAL_RCC_OscConfig+0x474>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800575c:	2b00      	cmp	r3, #0
 800575e:	d0f0      	beq.n	8005742 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d106      	bne.n	8005776 <HAL_RCC_OscConfig+0x2ea>
 8005768:	4b64      	ldr	r3, [pc, #400]	@ (80058fc <HAL_RCC_OscConfig+0x470>)
 800576a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800576c:	4a63      	ldr	r2, [pc, #396]	@ (80058fc <HAL_RCC_OscConfig+0x470>)
 800576e:	f043 0301 	orr.w	r3, r3, #1
 8005772:	6713      	str	r3, [r2, #112]	@ 0x70
 8005774:	e01c      	b.n	80057b0 <HAL_RCC_OscConfig+0x324>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	2b05      	cmp	r3, #5
 800577c:	d10c      	bne.n	8005798 <HAL_RCC_OscConfig+0x30c>
 800577e:	4b5f      	ldr	r3, [pc, #380]	@ (80058fc <HAL_RCC_OscConfig+0x470>)
 8005780:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005782:	4a5e      	ldr	r2, [pc, #376]	@ (80058fc <HAL_RCC_OscConfig+0x470>)
 8005784:	f043 0304 	orr.w	r3, r3, #4
 8005788:	6713      	str	r3, [r2, #112]	@ 0x70
 800578a:	4b5c      	ldr	r3, [pc, #368]	@ (80058fc <HAL_RCC_OscConfig+0x470>)
 800578c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800578e:	4a5b      	ldr	r2, [pc, #364]	@ (80058fc <HAL_RCC_OscConfig+0x470>)
 8005790:	f043 0301 	orr.w	r3, r3, #1
 8005794:	6713      	str	r3, [r2, #112]	@ 0x70
 8005796:	e00b      	b.n	80057b0 <HAL_RCC_OscConfig+0x324>
 8005798:	4b58      	ldr	r3, [pc, #352]	@ (80058fc <HAL_RCC_OscConfig+0x470>)
 800579a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800579c:	4a57      	ldr	r2, [pc, #348]	@ (80058fc <HAL_RCC_OscConfig+0x470>)
 800579e:	f023 0301 	bic.w	r3, r3, #1
 80057a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80057a4:	4b55      	ldr	r3, [pc, #340]	@ (80058fc <HAL_RCC_OscConfig+0x470>)
 80057a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057a8:	4a54      	ldr	r2, [pc, #336]	@ (80058fc <HAL_RCC_OscConfig+0x470>)
 80057aa:	f023 0304 	bic.w	r3, r3, #4
 80057ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d015      	beq.n	80057e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057b8:	f7fe fe08 	bl	80043cc <HAL_GetTick>
 80057bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057be:	e00a      	b.n	80057d6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057c0:	f7fe fe04 	bl	80043cc <HAL_GetTick>
 80057c4:	4602      	mov	r2, r0
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d901      	bls.n	80057d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e0cb      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057d6:	4b49      	ldr	r3, [pc, #292]	@ (80058fc <HAL_RCC_OscConfig+0x470>)
 80057d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057da:	f003 0302 	and.w	r3, r3, #2
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d0ee      	beq.n	80057c0 <HAL_RCC_OscConfig+0x334>
 80057e2:	e014      	b.n	800580e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057e4:	f7fe fdf2 	bl	80043cc <HAL_GetTick>
 80057e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057ea:	e00a      	b.n	8005802 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057ec:	f7fe fdee 	bl	80043cc <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d901      	bls.n	8005802 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e0b5      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005802:	4b3e      	ldr	r3, [pc, #248]	@ (80058fc <HAL_RCC_OscConfig+0x470>)
 8005804:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005806:	f003 0302 	and.w	r3, r3, #2
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1ee      	bne.n	80057ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800580e:	7dfb      	ldrb	r3, [r7, #23]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d105      	bne.n	8005820 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005814:	4b39      	ldr	r3, [pc, #228]	@ (80058fc <HAL_RCC_OscConfig+0x470>)
 8005816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005818:	4a38      	ldr	r2, [pc, #224]	@ (80058fc <HAL_RCC_OscConfig+0x470>)
 800581a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800581e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	2b00      	cmp	r3, #0
 8005826:	f000 80a1 	beq.w	800596c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800582a:	4b34      	ldr	r3, [pc, #208]	@ (80058fc <HAL_RCC_OscConfig+0x470>)
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f003 030c 	and.w	r3, r3, #12
 8005832:	2b08      	cmp	r3, #8
 8005834:	d05c      	beq.n	80058f0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	699b      	ldr	r3, [r3, #24]
 800583a:	2b02      	cmp	r3, #2
 800583c:	d141      	bne.n	80058c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800583e:	4b31      	ldr	r3, [pc, #196]	@ (8005904 <HAL_RCC_OscConfig+0x478>)
 8005840:	2200      	movs	r2, #0
 8005842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005844:	f7fe fdc2 	bl	80043cc <HAL_GetTick>
 8005848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800584a:	e008      	b.n	800585e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800584c:	f7fe fdbe 	bl	80043cc <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	2b02      	cmp	r3, #2
 8005858:	d901      	bls.n	800585e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e087      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800585e:	4b27      	ldr	r3, [pc, #156]	@ (80058fc <HAL_RCC_OscConfig+0x470>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1f0      	bne.n	800584c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	69da      	ldr	r2, [r3, #28]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a1b      	ldr	r3, [r3, #32]
 8005872:	431a      	orrs	r2, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005878:	019b      	lsls	r3, r3, #6
 800587a:	431a      	orrs	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005880:	085b      	lsrs	r3, r3, #1
 8005882:	3b01      	subs	r3, #1
 8005884:	041b      	lsls	r3, r3, #16
 8005886:	431a      	orrs	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800588c:	061b      	lsls	r3, r3, #24
 800588e:	491b      	ldr	r1, [pc, #108]	@ (80058fc <HAL_RCC_OscConfig+0x470>)
 8005890:	4313      	orrs	r3, r2
 8005892:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005894:	4b1b      	ldr	r3, [pc, #108]	@ (8005904 <HAL_RCC_OscConfig+0x478>)
 8005896:	2201      	movs	r2, #1
 8005898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800589a:	f7fe fd97 	bl	80043cc <HAL_GetTick>
 800589e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058a0:	e008      	b.n	80058b4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058a2:	f7fe fd93 	bl	80043cc <HAL_GetTick>
 80058a6:	4602      	mov	r2, r0
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d901      	bls.n	80058b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e05c      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058b4:	4b11      	ldr	r3, [pc, #68]	@ (80058fc <HAL_RCC_OscConfig+0x470>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d0f0      	beq.n	80058a2 <HAL_RCC_OscConfig+0x416>
 80058c0:	e054      	b.n	800596c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058c2:	4b10      	ldr	r3, [pc, #64]	@ (8005904 <HAL_RCC_OscConfig+0x478>)
 80058c4:	2200      	movs	r2, #0
 80058c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058c8:	f7fe fd80 	bl	80043cc <HAL_GetTick>
 80058cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058ce:	e008      	b.n	80058e2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058d0:	f7fe fd7c 	bl	80043cc <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d901      	bls.n	80058e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e045      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058e2:	4b06      	ldr	r3, [pc, #24]	@ (80058fc <HAL_RCC_OscConfig+0x470>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1f0      	bne.n	80058d0 <HAL_RCC_OscConfig+0x444>
 80058ee:	e03d      	b.n	800596c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	699b      	ldr	r3, [r3, #24]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d107      	bne.n	8005908 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e038      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
 80058fc:	40023800 	.word	0x40023800
 8005900:	40007000 	.word	0x40007000
 8005904:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005908:	4b1b      	ldr	r3, [pc, #108]	@ (8005978 <HAL_RCC_OscConfig+0x4ec>)
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	699b      	ldr	r3, [r3, #24]
 8005912:	2b01      	cmp	r3, #1
 8005914:	d028      	beq.n	8005968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005920:	429a      	cmp	r2, r3
 8005922:	d121      	bne.n	8005968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800592e:	429a      	cmp	r2, r3
 8005930:	d11a      	bne.n	8005968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005938:	4013      	ands	r3, r2
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800593e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005940:	4293      	cmp	r3, r2
 8005942:	d111      	bne.n	8005968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800594e:	085b      	lsrs	r3, r3, #1
 8005950:	3b01      	subs	r3, #1
 8005952:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005954:	429a      	cmp	r2, r3
 8005956:	d107      	bne.n	8005968 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005962:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005964:	429a      	cmp	r2, r3
 8005966:	d001      	beq.n	800596c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e000      	b.n	800596e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3718      	adds	r7, #24
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	40023800 	.word	0x40023800

0800597c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d101      	bne.n	8005990 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e0cc      	b.n	8005b2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005990:	4b68      	ldr	r3, [pc, #416]	@ (8005b34 <HAL_RCC_ClockConfig+0x1b8>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0307 	and.w	r3, r3, #7
 8005998:	683a      	ldr	r2, [r7, #0]
 800599a:	429a      	cmp	r2, r3
 800599c:	d90c      	bls.n	80059b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800599e:	4b65      	ldr	r3, [pc, #404]	@ (8005b34 <HAL_RCC_ClockConfig+0x1b8>)
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	b2d2      	uxtb	r2, r2
 80059a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059a6:	4b63      	ldr	r3, [pc, #396]	@ (8005b34 <HAL_RCC_ClockConfig+0x1b8>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0307 	and.w	r3, r3, #7
 80059ae:	683a      	ldr	r2, [r7, #0]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d001      	beq.n	80059b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e0b8      	b.n	8005b2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 0302 	and.w	r3, r3, #2
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d020      	beq.n	8005a06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0304 	and.w	r3, r3, #4
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d005      	beq.n	80059dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059d0:	4b59      	ldr	r3, [pc, #356]	@ (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	4a58      	ldr	r2, [pc, #352]	@ (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 80059d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80059da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 0308 	and.w	r3, r3, #8
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d005      	beq.n	80059f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059e8:	4b53      	ldr	r3, [pc, #332]	@ (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	4a52      	ldr	r2, [pc, #328]	@ (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 80059ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80059f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059f4:	4b50      	ldr	r3, [pc, #320]	@ (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	494d      	ldr	r1, [pc, #308]	@ (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 0301 	and.w	r3, r3, #1
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d044      	beq.n	8005a9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d107      	bne.n	8005a2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a1a:	4b47      	ldr	r3, [pc, #284]	@ (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d119      	bne.n	8005a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e07f      	b.n	8005b2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d003      	beq.n	8005a3a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a36:	2b03      	cmp	r3, #3
 8005a38:	d107      	bne.n	8005a4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a3a:	4b3f      	ldr	r3, [pc, #252]	@ (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d109      	bne.n	8005a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e06f      	b.n	8005b2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a4a:	4b3b      	ldr	r3, [pc, #236]	@ (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0302 	and.w	r3, r3, #2
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d101      	bne.n	8005a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e067      	b.n	8005b2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a5a:	4b37      	ldr	r3, [pc, #220]	@ (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	f023 0203 	bic.w	r2, r3, #3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	4934      	ldr	r1, [pc, #208]	@ (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a6c:	f7fe fcae 	bl	80043cc <HAL_GetTick>
 8005a70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a72:	e00a      	b.n	8005a8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a74:	f7fe fcaa 	bl	80043cc <HAL_GetTick>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d901      	bls.n	8005a8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e04f      	b.n	8005b2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a8a:	4b2b      	ldr	r3, [pc, #172]	@ (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	f003 020c 	and.w	r2, r3, #12
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d1eb      	bne.n	8005a74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a9c:	4b25      	ldr	r3, [pc, #148]	@ (8005b34 <HAL_RCC_ClockConfig+0x1b8>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 0307 	and.w	r3, r3, #7
 8005aa4:	683a      	ldr	r2, [r7, #0]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d20c      	bcs.n	8005ac4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aaa:	4b22      	ldr	r3, [pc, #136]	@ (8005b34 <HAL_RCC_ClockConfig+0x1b8>)
 8005aac:	683a      	ldr	r2, [r7, #0]
 8005aae:	b2d2      	uxtb	r2, r2
 8005ab0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ab2:	4b20      	ldr	r3, [pc, #128]	@ (8005b34 <HAL_RCC_ClockConfig+0x1b8>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0307 	and.w	r3, r3, #7
 8005aba:	683a      	ldr	r2, [r7, #0]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d001      	beq.n	8005ac4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e032      	b.n	8005b2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0304 	and.w	r3, r3, #4
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d008      	beq.n	8005ae2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ad0:	4b19      	ldr	r3, [pc, #100]	@ (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	4916      	ldr	r1, [pc, #88]	@ (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 0308 	and.w	r3, r3, #8
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d009      	beq.n	8005b02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005aee:	4b12      	ldr	r3, [pc, #72]	@ (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	00db      	lsls	r3, r3, #3
 8005afc:	490e      	ldr	r1, [pc, #56]	@ (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005afe:	4313      	orrs	r3, r2
 8005b00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005b02:	f000 f821 	bl	8005b48 <HAL_RCC_GetSysClockFreq>
 8005b06:	4602      	mov	r2, r0
 8005b08:	4b0b      	ldr	r3, [pc, #44]	@ (8005b38 <HAL_RCC_ClockConfig+0x1bc>)
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	091b      	lsrs	r3, r3, #4
 8005b0e:	f003 030f 	and.w	r3, r3, #15
 8005b12:	490a      	ldr	r1, [pc, #40]	@ (8005b3c <HAL_RCC_ClockConfig+0x1c0>)
 8005b14:	5ccb      	ldrb	r3, [r1, r3]
 8005b16:	fa22 f303 	lsr.w	r3, r2, r3
 8005b1a:	4a09      	ldr	r2, [pc, #36]	@ (8005b40 <HAL_RCC_ClockConfig+0x1c4>)
 8005b1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005b1e:	4b09      	ldr	r3, [pc, #36]	@ (8005b44 <HAL_RCC_ClockConfig+0x1c8>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4618      	mov	r0, r3
 8005b24:	f7fe fc0e 	bl	8004344 <HAL_InitTick>

  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	40023c00 	.word	0x40023c00
 8005b38:	40023800 	.word	0x40023800
 8005b3c:	0800eae4 	.word	0x0800eae4
 8005b40:	20000060 	.word	0x20000060
 8005b44:	20000064 	.word	0x20000064

08005b48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b4c:	b090      	sub	sp, #64	@ 0x40
 8005b4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005b50:	2300      	movs	r3, #0
 8005b52:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005b54:	2300      	movs	r3, #0
 8005b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b60:	4b59      	ldr	r3, [pc, #356]	@ (8005cc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	f003 030c 	and.w	r3, r3, #12
 8005b68:	2b08      	cmp	r3, #8
 8005b6a:	d00d      	beq.n	8005b88 <HAL_RCC_GetSysClockFreq+0x40>
 8005b6c:	2b08      	cmp	r3, #8
 8005b6e:	f200 80a1 	bhi.w	8005cb4 <HAL_RCC_GetSysClockFreq+0x16c>
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d002      	beq.n	8005b7c <HAL_RCC_GetSysClockFreq+0x34>
 8005b76:	2b04      	cmp	r3, #4
 8005b78:	d003      	beq.n	8005b82 <HAL_RCC_GetSysClockFreq+0x3a>
 8005b7a:	e09b      	b.n	8005cb4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b7c:	4b53      	ldr	r3, [pc, #332]	@ (8005ccc <HAL_RCC_GetSysClockFreq+0x184>)
 8005b7e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005b80:	e09b      	b.n	8005cba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b82:	4b53      	ldr	r3, [pc, #332]	@ (8005cd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005b84:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005b86:	e098      	b.n	8005cba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b88:	4b4f      	ldr	r3, [pc, #316]	@ (8005cc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b90:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b92:	4b4d      	ldr	r3, [pc, #308]	@ (8005cc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d028      	beq.n	8005bf0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b9e:	4b4a      	ldr	r3, [pc, #296]	@ (8005cc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	099b      	lsrs	r3, r3, #6
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	623b      	str	r3, [r7, #32]
 8005ba8:	627a      	str	r2, [r7, #36]	@ 0x24
 8005baa:	6a3b      	ldr	r3, [r7, #32]
 8005bac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005bb0:	2100      	movs	r1, #0
 8005bb2:	4b47      	ldr	r3, [pc, #284]	@ (8005cd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005bb4:	fb03 f201 	mul.w	r2, r3, r1
 8005bb8:	2300      	movs	r3, #0
 8005bba:	fb00 f303 	mul.w	r3, r0, r3
 8005bbe:	4413      	add	r3, r2
 8005bc0:	4a43      	ldr	r2, [pc, #268]	@ (8005cd0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005bc2:	fba0 1202 	umull	r1, r2, r0, r2
 8005bc6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005bc8:	460a      	mov	r2, r1
 8005bca:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005bcc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005bce:	4413      	add	r3, r2
 8005bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	61bb      	str	r3, [r7, #24]
 8005bd8:	61fa      	str	r2, [r7, #28]
 8005bda:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bde:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005be2:	f7fb f851 	bl	8000c88 <__aeabi_uldivmod>
 8005be6:	4602      	mov	r2, r0
 8005be8:	460b      	mov	r3, r1
 8005bea:	4613      	mov	r3, r2
 8005bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005bee:	e053      	b.n	8005c98 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bf0:	4b35      	ldr	r3, [pc, #212]	@ (8005cc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	099b      	lsrs	r3, r3, #6
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	613b      	str	r3, [r7, #16]
 8005bfa:	617a      	str	r2, [r7, #20]
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005c02:	f04f 0b00 	mov.w	fp, #0
 8005c06:	4652      	mov	r2, sl
 8005c08:	465b      	mov	r3, fp
 8005c0a:	f04f 0000 	mov.w	r0, #0
 8005c0e:	f04f 0100 	mov.w	r1, #0
 8005c12:	0159      	lsls	r1, r3, #5
 8005c14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c18:	0150      	lsls	r0, r2, #5
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	ebb2 080a 	subs.w	r8, r2, sl
 8005c22:	eb63 090b 	sbc.w	r9, r3, fp
 8005c26:	f04f 0200 	mov.w	r2, #0
 8005c2a:	f04f 0300 	mov.w	r3, #0
 8005c2e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005c32:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005c36:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005c3a:	ebb2 0408 	subs.w	r4, r2, r8
 8005c3e:	eb63 0509 	sbc.w	r5, r3, r9
 8005c42:	f04f 0200 	mov.w	r2, #0
 8005c46:	f04f 0300 	mov.w	r3, #0
 8005c4a:	00eb      	lsls	r3, r5, #3
 8005c4c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c50:	00e2      	lsls	r2, r4, #3
 8005c52:	4614      	mov	r4, r2
 8005c54:	461d      	mov	r5, r3
 8005c56:	eb14 030a 	adds.w	r3, r4, sl
 8005c5a:	603b      	str	r3, [r7, #0]
 8005c5c:	eb45 030b 	adc.w	r3, r5, fp
 8005c60:	607b      	str	r3, [r7, #4]
 8005c62:	f04f 0200 	mov.w	r2, #0
 8005c66:	f04f 0300 	mov.w	r3, #0
 8005c6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005c6e:	4629      	mov	r1, r5
 8005c70:	028b      	lsls	r3, r1, #10
 8005c72:	4621      	mov	r1, r4
 8005c74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c78:	4621      	mov	r1, r4
 8005c7a:	028a      	lsls	r2, r1, #10
 8005c7c:	4610      	mov	r0, r2
 8005c7e:	4619      	mov	r1, r3
 8005c80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c82:	2200      	movs	r2, #0
 8005c84:	60bb      	str	r3, [r7, #8]
 8005c86:	60fa      	str	r2, [r7, #12]
 8005c88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c8c:	f7fa fffc 	bl	8000c88 <__aeabi_uldivmod>
 8005c90:	4602      	mov	r2, r0
 8005c92:	460b      	mov	r3, r1
 8005c94:	4613      	mov	r3, r2
 8005c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005c98:	4b0b      	ldr	r3, [pc, #44]	@ (8005cc8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	0c1b      	lsrs	r3, r3, #16
 8005c9e:	f003 0303 	and.w	r3, r3, #3
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	005b      	lsls	r3, r3, #1
 8005ca6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005ca8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cb0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005cb2:	e002      	b.n	8005cba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005cb4:	4b05      	ldr	r3, [pc, #20]	@ (8005ccc <HAL_RCC_GetSysClockFreq+0x184>)
 8005cb6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005cb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005cba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3740      	adds	r7, #64	@ 0x40
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cc6:	bf00      	nop
 8005cc8:	40023800 	.word	0x40023800
 8005ccc:	00f42400 	.word	0x00f42400
 8005cd0:	017d7840 	.word	0x017d7840

08005cd4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b08b      	sub	sp, #44	@ 0x2c
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	fa93 f3a3 	rbit	r3, r3
 8005cee:	613b      	str	r3, [r7, #16]
  return result;
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d101      	bne.n	8005cfe <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8005cfa:	2320      	movs	r3, #32
 8005cfc:	e003      	b.n	8005d06 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	fab3 f383 	clz	r3, r3
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	005b      	lsls	r3, r3, #1
 8005d08:	2103      	movs	r1, #3
 8005d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d0e:	43db      	mvns	r3, r3
 8005d10:	401a      	ands	r2, r3
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d16:	6a3b      	ldr	r3, [r7, #32]
 8005d18:	fa93 f3a3 	rbit	r3, r3
 8005d1c:	61fb      	str	r3, [r7, #28]
  return result;
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d101      	bne.n	8005d2c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8005d28:	2320      	movs	r3, #32
 8005d2a:	e003      	b.n	8005d34 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d2e:	fab3 f383 	clz	r3, r3
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	005b      	lsls	r3, r3, #1
 8005d36:	6879      	ldr	r1, [r7, #4]
 8005d38:	fa01 f303 	lsl.w	r3, r1, r3
 8005d3c:	431a      	orrs	r2, r3
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	601a      	str	r2, [r3, #0]
}
 8005d42:	bf00      	nop
 8005d44:	372c      	adds	r7, #44	@ 0x2c
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr

08005d4e <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8005d4e:	b480      	push	{r7}
 8005d50:	b085      	sub	sp, #20
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	60f8      	str	r0, [r7, #12]
 8005d56:	60b9      	str	r1, [r7, #8]
 8005d58:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	685a      	ldr	r2, [r3, #4]
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	43db      	mvns	r3, r3
 8005d62:	401a      	ands	r2, r3
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	6879      	ldr	r1, [r7, #4]
 8005d68:	fb01 f303 	mul.w	r3, r1, r3
 8005d6c:	431a      	orrs	r2, r3
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	605a      	str	r2, [r3, #4]
}
 8005d72:	bf00      	nop
 8005d74:	3714      	adds	r7, #20
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr

08005d7e <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8005d7e:	b480      	push	{r7}
 8005d80:	b08b      	sub	sp, #44	@ 0x2c
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	60f8      	str	r0, [r7, #12]
 8005d86:	60b9      	str	r1, [r7, #8]
 8005d88:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	689a      	ldr	r2, [r3, #8]
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	fa93 f3a3 	rbit	r3, r3
 8005d98:	613b      	str	r3, [r7, #16]
  return result;
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d101      	bne.n	8005da8 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8005da4:	2320      	movs	r3, #32
 8005da6:	e003      	b.n	8005db0 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	fab3 f383 	clz	r3, r3
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	005b      	lsls	r3, r3, #1
 8005db2:	2103      	movs	r1, #3
 8005db4:	fa01 f303 	lsl.w	r3, r1, r3
 8005db8:	43db      	mvns	r3, r3
 8005dba:	401a      	ands	r2, r3
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dc0:	6a3b      	ldr	r3, [r7, #32]
 8005dc2:	fa93 f3a3 	rbit	r3, r3
 8005dc6:	61fb      	str	r3, [r7, #28]
  return result;
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d101      	bne.n	8005dd6 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8005dd2:	2320      	movs	r3, #32
 8005dd4:	e003      	b.n	8005dde <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8005dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd8:	fab3 f383 	clz	r3, r3
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	005b      	lsls	r3, r3, #1
 8005de0:	6879      	ldr	r1, [r7, #4]
 8005de2:	fa01 f303 	lsl.w	r3, r1, r3
 8005de6:	431a      	orrs	r2, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8005dec:	bf00      	nop
 8005dee:	372c      	adds	r7, #44	@ 0x2c
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b08b      	sub	sp, #44	@ 0x2c
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	68da      	ldr	r2, [r3, #12]
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	fa93 f3a3 	rbit	r3, r3
 8005e12:	613b      	str	r3, [r7, #16]
  return result;
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d101      	bne.n	8005e22 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8005e1e:	2320      	movs	r3, #32
 8005e20:	e003      	b.n	8005e2a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	fab3 f383 	clz	r3, r3
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	005b      	lsls	r3, r3, #1
 8005e2c:	2103      	movs	r1, #3
 8005e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e32:	43db      	mvns	r3, r3
 8005e34:	401a      	ands	r2, r3
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e3a:	6a3b      	ldr	r3, [r7, #32]
 8005e3c:	fa93 f3a3 	rbit	r3, r3
 8005e40:	61fb      	str	r3, [r7, #28]
  return result;
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d101      	bne.n	8005e50 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8005e4c:	2320      	movs	r3, #32
 8005e4e:	e003      	b.n	8005e58 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8005e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e52:	fab3 f383 	clz	r3, r3
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	005b      	lsls	r3, r3, #1
 8005e5a:	6879      	ldr	r1, [r7, #4]
 8005e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e60:	431a      	orrs	r2, r3
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	60da      	str	r2, [r3, #12]
}
 8005e66:	bf00      	nop
 8005e68:	372c      	adds	r7, #44	@ 0x2c
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr

08005e72 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8005e72:	b480      	push	{r7}
 8005e74:	b08b      	sub	sp, #44	@ 0x2c
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	60f8      	str	r0, [r7, #12]
 8005e7a:	60b9      	str	r1, [r7, #8]
 8005e7c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6a1a      	ldr	r2, [r3, #32]
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	fa93 f3a3 	rbit	r3, r3
 8005e8c:	613b      	str	r3, [r7, #16]
  return result;
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d101      	bne.n	8005e9c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8005e98:	2320      	movs	r3, #32
 8005e9a:	e003      	b.n	8005ea4 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	fab3 f383 	clz	r3, r3
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	210f      	movs	r1, #15
 8005ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8005eac:	43db      	mvns	r3, r3
 8005eae:	401a      	ands	r2, r3
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005eb4:	6a3b      	ldr	r3, [r7, #32]
 8005eb6:	fa93 f3a3 	rbit	r3, r3
 8005eba:	61fb      	str	r3, [r7, #28]
  return result;
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d101      	bne.n	8005eca <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8005ec6:	2320      	movs	r3, #32
 8005ec8:	e003      	b.n	8005ed2 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8005eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ecc:	fab3 f383 	clz	r3, r3
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	6879      	ldr	r1, [r7, #4]
 8005ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8005eda:	431a      	orrs	r2, r3
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8005ee0:	bf00      	nop
 8005ee2:	372c      	adds	r7, #44	@ 0x2c
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b08b      	sub	sp, #44	@ 0x2c
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	60b9      	str	r1, [r7, #8]
 8005ef6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	0a1b      	lsrs	r3, r3, #8
 8005f00:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	fa93 f3a3 	rbit	r3, r3
 8005f08:	613b      	str	r3, [r7, #16]
  return result;
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d101      	bne.n	8005f18 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8005f14:	2320      	movs	r3, #32
 8005f16:	e003      	b.n	8005f20 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	fab3 f383 	clz	r3, r3
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	210f      	movs	r1, #15
 8005f24:	fa01 f303 	lsl.w	r3, r1, r3
 8005f28:	43db      	mvns	r3, r3
 8005f2a:	401a      	ands	r2, r3
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	0a1b      	lsrs	r3, r3, #8
 8005f30:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f32:	6a3b      	ldr	r3, [r7, #32]
 8005f34:	fa93 f3a3 	rbit	r3, r3
 8005f38:	61fb      	str	r3, [r7, #28]
  return result;
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d101      	bne.n	8005f48 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8005f44:	2320      	movs	r3, #32
 8005f46:	e003      	b.n	8005f50 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8005f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f4a:	fab3 f383 	clz	r3, r3
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	6879      	ldr	r1, [r7, #4]
 8005f54:	fa01 f303 	lsl.w	r3, r1, r3
 8005f58:	431a      	orrs	r2, r3
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8005f5e:	bf00      	nop
 8005f60:	372c      	adds	r7, #44	@ 0x2c
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr

08005f6a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b08a      	sub	sp, #40	@ 0x28
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
 8005f72:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8005f74:	2300      	movs	r3, #0
 8005f76:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	fa93 f3a3 	rbit	r3, r3
 8005f88:	617b      	str	r3, [r7, #20]
  return result;
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8005f8e:	69fb      	ldr	r3, [r7, #28]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d101      	bne.n	8005f98 <LL_GPIO_Init+0x2e>
    return 32U;
 8005f94:	2320      	movs	r3, #32
 8005f96:	e003      	b.n	8005fa0 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	fab3 f383 	clz	r3, r3
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005fa2:	e057      	b.n	8006054 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	2101      	movs	r1, #1
 8005faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fac:	fa01 f303 	lsl.w	r3, r1, r3
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8005fb4:	6a3b      	ldr	r3, [r7, #32]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d049      	beq.n	800604e <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d003      	beq.n	8005fca <LL_GPIO_Init+0x60>
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	d10d      	bne.n	8005fe6 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	461a      	mov	r2, r3
 8005fd0:	6a39      	ldr	r1, [r7, #32]
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f7ff fed3 	bl	8005d7e <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	461a      	mov	r2, r3
 8005fde:	6a39      	ldr	r1, [r7, #32]
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f7ff feb4 	bl	8005d4e <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	461a      	mov	r2, r3
 8005fec:	6a39      	ldr	r1, [r7, #32]
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f7ff ff02 	bl	8005df8 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	d121      	bne.n	8006040 <LL_GPIO_Init+0xd6>
 8005ffc:	6a3b      	ldr	r3, [r7, #32]
 8005ffe:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	fa93 f3a3 	rbit	r3, r3
 8006006:	60bb      	str	r3, [r7, #8]
  return result;
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d101      	bne.n	8006016 <LL_GPIO_Init+0xac>
    return 32U;
 8006012:	2320      	movs	r3, #32
 8006014:	e003      	b.n	800601e <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	fab3 f383 	clz	r3, r3
 800601c:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800601e:	2b07      	cmp	r3, #7
 8006020:	d807      	bhi.n	8006032 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	461a      	mov	r2, r3
 8006028:	6a39      	ldr	r1, [r7, #32]
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f7ff ff21 	bl	8005e72 <LL_GPIO_SetAFPin_0_7>
 8006030:	e006      	b.n	8006040 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	695b      	ldr	r3, [r3, #20]
 8006036:	461a      	mov	r2, r3
 8006038:	6a39      	ldr	r1, [r7, #32]
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f7ff ff56 	bl	8005eec <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	461a      	mov	r2, r3
 8006046:	6a39      	ldr	r1, [r7, #32]
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f7ff fe43 	bl	8005cd4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800604e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006050:	3301      	adds	r3, #1
 8006052:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800605a:	fa22 f303 	lsr.w	r3, r2, r3
 800605e:	2b00      	cmp	r3, #0
 8006060:	d1a0      	bne.n	8005fa4 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8006062:	2300      	movs	r3, #0
}
 8006064:	4618      	mov	r0, r3
 8006066:	3728      	adds	r7, #40	@ 0x28
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800606c:	b480      	push	{r7}
 800606e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006070:	4b04      	ldr	r3, [pc, #16]	@ (8006084 <LL_RCC_GetSysClkSource+0x18>)
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	f003 030c 	and.w	r3, r3, #12
}
 8006078:	4618      	mov	r0, r3
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop
 8006084:	40023800 	.word	0x40023800

08006088 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8006088:	b480      	push	{r7}
 800608a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800608c:	4b04      	ldr	r3, [pc, #16]	@ (80060a0 <LL_RCC_GetAHBPrescaler+0x18>)
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8006094:	4618      	mov	r0, r3
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr
 800609e:	bf00      	nop
 80060a0:	40023800 	.word	0x40023800

080060a4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80060a4:	b480      	push	{r7}
 80060a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80060a8:	4b04      	ldr	r3, [pc, #16]	@ (80060bc <LL_RCC_GetAPB1Prescaler+0x18>)
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	40023800 	.word	0x40023800

080060c0 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80060c0:	b480      	push	{r7}
 80060c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80060c4:	4b04      	ldr	r3, [pc, #16]	@ (80060d8 <LL_RCC_GetAPB2Prescaler+0x18>)
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
 80060d6:	bf00      	nop
 80060d8:	40023800 	.word	0x40023800

080060dc <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80060dc:	b480      	push	{r7}
 80060de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80060e0:	4b04      	ldr	r3, [pc, #16]	@ (80060f4 <LL_RCC_PLL_GetMainSource+0x18>)
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
 80060f2:	bf00      	nop
 80060f4:	40023800 	.word	0x40023800

080060f8 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80060f8:	b480      	push	{r7}
 80060fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80060fc:	4b04      	ldr	r3, [pc, #16]	@ (8006110 <LL_RCC_PLL_GetN+0x18>)
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	099b      	lsrs	r3, r3, #6
 8006102:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8006106:	4618      	mov	r0, r3
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr
 8006110:	40023800 	.word	0x40023800

08006114 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8006114:	b480      	push	{r7}
 8006116:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8006118:	4b04      	ldr	r3, [pc, #16]	@ (800612c <LL_RCC_PLL_GetP+0x18>)
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8006120:	4618      	mov	r0, r3
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop
 800612c:	40023800 	.word	0x40023800

08006130 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8006130:	b480      	push	{r7}
 8006132:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006134:	4b04      	ldr	r3, [pc, #16]	@ (8006148 <LL_RCC_PLL_GetDivider+0x18>)
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 800613c:	4618      	mov	r0, r3
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop
 8006148:	40023800 	.word	0x40023800

0800614c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b082      	sub	sp, #8
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8006154:	f000 f820 	bl	8006198 <RCC_GetSystemClockFreq>
 8006158:	4602      	mov	r2, r0
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4618      	mov	r0, r3
 8006164:	f000 f840 	bl	80061e8 <RCC_GetHCLKClockFreq>
 8006168:	4602      	mov	r2, r0
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	4618      	mov	r0, r3
 8006174:	f000 f84e 	bl	8006214 <RCC_GetPCLK1ClockFreq>
 8006178:	4602      	mov	r2, r0
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	4618      	mov	r0, r3
 8006184:	f000 f85a 	bl	800623c <RCC_GetPCLK2ClockFreq>
 8006188:	4602      	mov	r2, r0
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	60da      	str	r2, [r3, #12]
}
 800618e:	bf00      	nop
 8006190:	3708      	adds	r7, #8
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
	...

08006198 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800619e:	2300      	movs	r3, #0
 80061a0:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80061a2:	f7ff ff63 	bl	800606c <LL_RCC_GetSysClkSource>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b08      	cmp	r3, #8
 80061aa:	d00c      	beq.n	80061c6 <RCC_GetSystemClockFreq+0x2e>
 80061ac:	2b08      	cmp	r3, #8
 80061ae:	d80f      	bhi.n	80061d0 <RCC_GetSystemClockFreq+0x38>
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d002      	beq.n	80061ba <RCC_GetSystemClockFreq+0x22>
 80061b4:	2b04      	cmp	r3, #4
 80061b6:	d003      	beq.n	80061c0 <RCC_GetSystemClockFreq+0x28>
 80061b8:	e00a      	b.n	80061d0 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80061ba:	4b09      	ldr	r3, [pc, #36]	@ (80061e0 <RCC_GetSystemClockFreq+0x48>)
 80061bc:	607b      	str	r3, [r7, #4]
      break;
 80061be:	e00a      	b.n	80061d6 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80061c0:	4b08      	ldr	r3, [pc, #32]	@ (80061e4 <RCC_GetSystemClockFreq+0x4c>)
 80061c2:	607b      	str	r3, [r7, #4]
      break;
 80061c4:	e007      	b.n	80061d6 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80061c6:	2008      	movs	r0, #8
 80061c8:	f000 f84c 	bl	8006264 <RCC_PLL_GetFreqDomain_SYS>
 80061cc:	6078      	str	r0, [r7, #4]
      break;
 80061ce:	e002      	b.n	80061d6 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80061d0:	4b03      	ldr	r3, [pc, #12]	@ (80061e0 <RCC_GetSystemClockFreq+0x48>)
 80061d2:	607b      	str	r3, [r7, #4]
      break;
 80061d4:	bf00      	nop
  }

  return frequency;
 80061d6:	687b      	ldr	r3, [r7, #4]
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3708      	adds	r7, #8
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	00f42400 	.word	0x00f42400
 80061e4:	017d7840 	.word	0x017d7840

080061e8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80061f0:	f7ff ff4a 	bl	8006088 <LL_RCC_GetAHBPrescaler>
 80061f4:	4603      	mov	r3, r0
 80061f6:	091b      	lsrs	r3, r3, #4
 80061f8:	f003 030f 	and.w	r3, r3, #15
 80061fc:	4a04      	ldr	r2, [pc, #16]	@ (8006210 <RCC_GetHCLKClockFreq+0x28>)
 80061fe:	5cd3      	ldrb	r3, [r2, r3]
 8006200:	461a      	mov	r2, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	40d3      	lsrs	r3, r2
}
 8006206:	4618      	mov	r0, r3
 8006208:	3708      	adds	r7, #8
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
 800620e:	bf00      	nop
 8006210:	0800eae4 	.word	0x0800eae4

08006214 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800621c:	f7ff ff42 	bl	80060a4 <LL_RCC_GetAPB1Prescaler>
 8006220:	4603      	mov	r3, r0
 8006222:	0a9b      	lsrs	r3, r3, #10
 8006224:	4a04      	ldr	r2, [pc, #16]	@ (8006238 <RCC_GetPCLK1ClockFreq+0x24>)
 8006226:	5cd3      	ldrb	r3, [r2, r3]
 8006228:	461a      	mov	r2, r3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	40d3      	lsrs	r3, r2
}
 800622e:	4618      	mov	r0, r3
 8006230:	3708      	adds	r7, #8
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	0800eaf4 	.word	0x0800eaf4

0800623c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8006244:	f7ff ff3c 	bl	80060c0 <LL_RCC_GetAPB2Prescaler>
 8006248:	4603      	mov	r3, r0
 800624a:	0b5b      	lsrs	r3, r3, #13
 800624c:	4a04      	ldr	r2, [pc, #16]	@ (8006260 <RCC_GetPCLK2ClockFreq+0x24>)
 800624e:	5cd3      	ldrb	r3, [r2, r3]
 8006250:	461a      	mov	r2, r3
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	40d3      	lsrs	r3, r2
}
 8006256:	4618      	mov	r0, r3
 8006258:	3708      	adds	r7, #8
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	0800eaf4 	.word	0x0800eaf4

08006264 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8006264:	b590      	push	{r4, r7, lr}
 8006266:	b087      	sub	sp, #28
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 800626c:	2300      	movs	r3, #0
 800626e:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 8006270:	2300      	movs	r3, #0
 8006272:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 8006274:	2300      	movs	r3, #0
 8006276:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8006278:	f7ff ff30 	bl	80060dc <LL_RCC_PLL_GetMainSource>
 800627c:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d004      	beq.n	800628e <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800628a:	d003      	beq.n	8006294 <RCC_PLL_GetFreqDomain_SYS+0x30>
 800628c:	e005      	b.n	800629a <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800628e:	4b12      	ldr	r3, [pc, #72]	@ (80062d8 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8006290:	617b      	str	r3, [r7, #20]
      break;
 8006292:	e005      	b.n	80062a0 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8006294:	4b11      	ldr	r3, [pc, #68]	@ (80062dc <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8006296:	617b      	str	r3, [r7, #20]
      break;
 8006298:	e002      	b.n	80062a0 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800629a:	4b0f      	ldr	r3, [pc, #60]	@ (80062d8 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800629c:	617b      	str	r3, [r7, #20]
      break;
 800629e:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2b08      	cmp	r3, #8
 80062a4:	d113      	bne.n	80062ce <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80062a6:	f7ff ff43 	bl	8006130 <LL_RCC_PLL_GetDivider>
 80062aa:	4602      	mov	r2, r0
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	fbb3 f4f2 	udiv	r4, r3, r2
 80062b2:	f7ff ff21 	bl	80060f8 <LL_RCC_PLL_GetN>
 80062b6:	4603      	mov	r3, r0
 80062b8:	fb03 f404 	mul.w	r4, r3, r4
 80062bc:	f7ff ff2a 	bl	8006114 <LL_RCC_PLL_GetP>
 80062c0:	4603      	mov	r3, r0
 80062c2:	0c1b      	lsrs	r3, r3, #16
 80062c4:	3301      	adds	r3, #1
 80062c6:	005b      	lsls	r3, r3, #1
 80062c8:	fbb4 f3f3 	udiv	r3, r4, r3
 80062cc:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80062ce:	693b      	ldr	r3, [r7, #16]
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	371c      	adds	r7, #28
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd90      	pop	{r4, r7, pc}
 80062d8:	00f42400 	.word	0x00f42400
 80062dc:	017d7840 	.word	0x017d7840

080062e0 <LL_USART_IsEnabled>:
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80062f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062f4:	bf0c      	ite	eq
 80062f6:	2301      	moveq	r3, #1
 80062f8:	2300      	movne	r3, #0
 80062fa:	b2db      	uxtb	r3, r3
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <LL_USART_SetStopBitsLength>:
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	431a      	orrs	r2, r3
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	611a      	str	r2, [r3, #16]
}
 8006322:	bf00      	nop
 8006324:	370c      	adds	r7, #12
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr

0800632e <LL_USART_SetHWFlowCtrl>:
{
 800632e:	b480      	push	{r7}
 8006330:	b083      	sub	sp, #12
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
 8006336:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	695b      	ldr	r3, [r3, #20]
 800633c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	431a      	orrs	r2, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	615a      	str	r2, [r3, #20]
}
 8006348:	bf00      	nop
 800634a:	370c      	adds	r7, #12
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <LL_USART_SetBaudRate>:
{
 8006354:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006358:	b0c0      	sub	sp, #256	@ 0x100
 800635a:	af00      	add	r7, sp, #0
 800635c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006360:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8006364:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8006368:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800636c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006370:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006374:	f040 810c 	bne.w	8006590 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8006378:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800637c:	2200      	movs	r2, #0
 800637e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006382:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006386:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800638a:	4622      	mov	r2, r4
 800638c:	462b      	mov	r3, r5
 800638e:	1891      	adds	r1, r2, r2
 8006390:	6639      	str	r1, [r7, #96]	@ 0x60
 8006392:	415b      	adcs	r3, r3
 8006394:	667b      	str	r3, [r7, #100]	@ 0x64
 8006396:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800639a:	4621      	mov	r1, r4
 800639c:	eb12 0801 	adds.w	r8, r2, r1
 80063a0:	4629      	mov	r1, r5
 80063a2:	eb43 0901 	adc.w	r9, r3, r1
 80063a6:	f04f 0200 	mov.w	r2, #0
 80063aa:	f04f 0300 	mov.w	r3, #0
 80063ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80063b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80063ba:	4690      	mov	r8, r2
 80063bc:	4699      	mov	r9, r3
 80063be:	4623      	mov	r3, r4
 80063c0:	eb18 0303 	adds.w	r3, r8, r3
 80063c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80063c8:	462b      	mov	r3, r5
 80063ca:	eb49 0303 	adc.w	r3, r9, r3
 80063ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80063d2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80063d6:	2200      	movs	r2, #0
 80063d8:	469a      	mov	sl, r3
 80063da:	4693      	mov	fp, r2
 80063dc:	eb1a 030a 	adds.w	r3, sl, sl
 80063e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80063e2:	eb4b 030b 	adc.w	r3, fp, fp
 80063e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80063e8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80063ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80063f0:	f7fa fc4a 	bl	8000c88 <__aeabi_uldivmod>
 80063f4:	4602      	mov	r2, r0
 80063f6:	460b      	mov	r3, r1
 80063f8:	4b64      	ldr	r3, [pc, #400]	@ (800658c <LL_USART_SetBaudRate+0x238>)
 80063fa:	fba3 2302 	umull	r2, r3, r3, r2
 80063fe:	095b      	lsrs	r3, r3, #5
 8006400:	b29b      	uxth	r3, r3
 8006402:	011b      	lsls	r3, r3, #4
 8006404:	b29c      	uxth	r4, r3
 8006406:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800640a:	2200      	movs	r2, #0
 800640c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006410:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006414:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8006418:	4642      	mov	r2, r8
 800641a:	464b      	mov	r3, r9
 800641c:	1891      	adds	r1, r2, r2
 800641e:	6539      	str	r1, [r7, #80]	@ 0x50
 8006420:	415b      	adcs	r3, r3
 8006422:	657b      	str	r3, [r7, #84]	@ 0x54
 8006424:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006428:	4641      	mov	r1, r8
 800642a:	1851      	adds	r1, r2, r1
 800642c:	64b9      	str	r1, [r7, #72]	@ 0x48
 800642e:	4649      	mov	r1, r9
 8006430:	414b      	adcs	r3, r1
 8006432:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006434:	f04f 0200 	mov.w	r2, #0
 8006438:	f04f 0300 	mov.w	r3, #0
 800643c:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8006440:	4659      	mov	r1, fp
 8006442:	00cb      	lsls	r3, r1, #3
 8006444:	4651      	mov	r1, sl
 8006446:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800644a:	4651      	mov	r1, sl
 800644c:	00ca      	lsls	r2, r1, #3
 800644e:	4610      	mov	r0, r2
 8006450:	4619      	mov	r1, r3
 8006452:	4603      	mov	r3, r0
 8006454:	4642      	mov	r2, r8
 8006456:	189b      	adds	r3, r3, r2
 8006458:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800645c:	464b      	mov	r3, r9
 800645e:	460a      	mov	r2, r1
 8006460:	eb42 0303 	adc.w	r3, r2, r3
 8006464:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006468:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800646c:	2200      	movs	r2, #0
 800646e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006472:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8006476:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800647a:	460b      	mov	r3, r1
 800647c:	18db      	adds	r3, r3, r3
 800647e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006480:	4613      	mov	r3, r2
 8006482:	eb42 0303 	adc.w	r3, r2, r3
 8006486:	647b      	str	r3, [r7, #68]	@ 0x44
 8006488:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800648c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8006490:	f7fa fbfa 	bl	8000c88 <__aeabi_uldivmod>
 8006494:	4602      	mov	r2, r0
 8006496:	460b      	mov	r3, r1
 8006498:	4611      	mov	r1, r2
 800649a:	4b3c      	ldr	r3, [pc, #240]	@ (800658c <LL_USART_SetBaudRate+0x238>)
 800649c:	fba3 2301 	umull	r2, r3, r3, r1
 80064a0:	095b      	lsrs	r3, r3, #5
 80064a2:	2264      	movs	r2, #100	@ 0x64
 80064a4:	fb02 f303 	mul.w	r3, r2, r3
 80064a8:	1acb      	subs	r3, r1, r3
 80064aa:	00db      	lsls	r3, r3, #3
 80064ac:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80064b0:	4b36      	ldr	r3, [pc, #216]	@ (800658c <LL_USART_SetBaudRate+0x238>)
 80064b2:	fba3 2302 	umull	r2, r3, r3, r2
 80064b6:	095b      	lsrs	r3, r3, #5
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	005b      	lsls	r3, r3, #1
 80064bc:	b29b      	uxth	r3, r3
 80064be:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	4423      	add	r3, r4
 80064c6:	b29c      	uxth	r4, r3
 80064c8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80064cc:	2200      	movs	r2, #0
 80064ce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80064d2:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80064d6:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 80064da:	4642      	mov	r2, r8
 80064dc:	464b      	mov	r3, r9
 80064de:	1891      	adds	r1, r2, r2
 80064e0:	63b9      	str	r1, [r7, #56]	@ 0x38
 80064e2:	415b      	adcs	r3, r3
 80064e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064e6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80064ea:	4641      	mov	r1, r8
 80064ec:	1851      	adds	r1, r2, r1
 80064ee:	6339      	str	r1, [r7, #48]	@ 0x30
 80064f0:	4649      	mov	r1, r9
 80064f2:	414b      	adcs	r3, r1
 80064f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80064f6:	f04f 0200 	mov.w	r2, #0
 80064fa:	f04f 0300 	mov.w	r3, #0
 80064fe:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006502:	4659      	mov	r1, fp
 8006504:	00cb      	lsls	r3, r1, #3
 8006506:	4651      	mov	r1, sl
 8006508:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800650c:	4651      	mov	r1, sl
 800650e:	00ca      	lsls	r2, r1, #3
 8006510:	4610      	mov	r0, r2
 8006512:	4619      	mov	r1, r3
 8006514:	4603      	mov	r3, r0
 8006516:	4642      	mov	r2, r8
 8006518:	189b      	adds	r3, r3, r2
 800651a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800651e:	464b      	mov	r3, r9
 8006520:	460a      	mov	r2, r1
 8006522:	eb42 0303 	adc.w	r3, r2, r3
 8006526:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800652a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800652e:	2200      	movs	r2, #0
 8006530:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006534:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8006538:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800653c:	460b      	mov	r3, r1
 800653e:	18db      	adds	r3, r3, r3
 8006540:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006542:	4613      	mov	r3, r2
 8006544:	eb42 0303 	adc.w	r3, r2, r3
 8006548:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800654a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800654e:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8006552:	f7fa fb99 	bl	8000c88 <__aeabi_uldivmod>
 8006556:	4602      	mov	r2, r0
 8006558:	460b      	mov	r3, r1
 800655a:	4b0c      	ldr	r3, [pc, #48]	@ (800658c <LL_USART_SetBaudRate+0x238>)
 800655c:	fba3 1302 	umull	r1, r3, r3, r2
 8006560:	095b      	lsrs	r3, r3, #5
 8006562:	2164      	movs	r1, #100	@ 0x64
 8006564:	fb01 f303 	mul.w	r3, r1, r3
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	00db      	lsls	r3, r3, #3
 800656c:	3332      	adds	r3, #50	@ 0x32
 800656e:	4a07      	ldr	r2, [pc, #28]	@ (800658c <LL_USART_SetBaudRate+0x238>)
 8006570:	fba2 2303 	umull	r2, r3, r2, r3
 8006574:	095b      	lsrs	r3, r3, #5
 8006576:	b29b      	uxth	r3, r3
 8006578:	f003 0307 	and.w	r3, r3, #7
 800657c:	b29b      	uxth	r3, r3
 800657e:	4423      	add	r3, r4
 8006580:	b29b      	uxth	r3, r3
 8006582:	461a      	mov	r2, r3
 8006584:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006588:	609a      	str	r2, [r3, #8]
}
 800658a:	e108      	b.n	800679e <LL_USART_SetBaudRate+0x44a>
 800658c:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8006590:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006594:	2200      	movs	r2, #0
 8006596:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800659a:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800659e:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 80065a2:	4642      	mov	r2, r8
 80065a4:	464b      	mov	r3, r9
 80065a6:	1891      	adds	r1, r2, r2
 80065a8:	6239      	str	r1, [r7, #32]
 80065aa:	415b      	adcs	r3, r3
 80065ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80065ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80065b2:	4641      	mov	r1, r8
 80065b4:	1854      	adds	r4, r2, r1
 80065b6:	4649      	mov	r1, r9
 80065b8:	eb43 0501 	adc.w	r5, r3, r1
 80065bc:	f04f 0200 	mov.w	r2, #0
 80065c0:	f04f 0300 	mov.w	r3, #0
 80065c4:	00eb      	lsls	r3, r5, #3
 80065c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065ca:	00e2      	lsls	r2, r4, #3
 80065cc:	4614      	mov	r4, r2
 80065ce:	461d      	mov	r5, r3
 80065d0:	4643      	mov	r3, r8
 80065d2:	18e3      	adds	r3, r4, r3
 80065d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80065d8:	464b      	mov	r3, r9
 80065da:	eb45 0303 	adc.w	r3, r5, r3
 80065de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80065e2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80065e6:	2200      	movs	r2, #0
 80065e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80065ec:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80065f0:	f04f 0200 	mov.w	r2, #0
 80065f4:	f04f 0300 	mov.w	r3, #0
 80065f8:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 80065fc:	4629      	mov	r1, r5
 80065fe:	008b      	lsls	r3, r1, #2
 8006600:	4621      	mov	r1, r4
 8006602:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006606:	4621      	mov	r1, r4
 8006608:	008a      	lsls	r2, r1, #2
 800660a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800660e:	f7fa fb3b 	bl	8000c88 <__aeabi_uldivmod>
 8006612:	4602      	mov	r2, r0
 8006614:	460b      	mov	r3, r1
 8006616:	4b65      	ldr	r3, [pc, #404]	@ (80067ac <LL_USART_SetBaudRate+0x458>)
 8006618:	fba3 2302 	umull	r2, r3, r3, r2
 800661c:	095b      	lsrs	r3, r3, #5
 800661e:	b29b      	uxth	r3, r3
 8006620:	011b      	lsls	r3, r3, #4
 8006622:	b29c      	uxth	r4, r3
 8006624:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006628:	2200      	movs	r2, #0
 800662a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800662e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006632:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8006636:	4642      	mov	r2, r8
 8006638:	464b      	mov	r3, r9
 800663a:	1891      	adds	r1, r2, r2
 800663c:	61b9      	str	r1, [r7, #24]
 800663e:	415b      	adcs	r3, r3
 8006640:	61fb      	str	r3, [r7, #28]
 8006642:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006646:	4641      	mov	r1, r8
 8006648:	1851      	adds	r1, r2, r1
 800664a:	6139      	str	r1, [r7, #16]
 800664c:	4649      	mov	r1, r9
 800664e:	414b      	adcs	r3, r1
 8006650:	617b      	str	r3, [r7, #20]
 8006652:	f04f 0200 	mov.w	r2, #0
 8006656:	f04f 0300 	mov.w	r3, #0
 800665a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800665e:	4659      	mov	r1, fp
 8006660:	00cb      	lsls	r3, r1, #3
 8006662:	4651      	mov	r1, sl
 8006664:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006668:	4651      	mov	r1, sl
 800666a:	00ca      	lsls	r2, r1, #3
 800666c:	4610      	mov	r0, r2
 800666e:	4619      	mov	r1, r3
 8006670:	4603      	mov	r3, r0
 8006672:	4642      	mov	r2, r8
 8006674:	189b      	adds	r3, r3, r2
 8006676:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800667a:	464b      	mov	r3, r9
 800667c:	460a      	mov	r2, r1
 800667e:	eb42 0303 	adc.w	r3, r2, r3
 8006682:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006686:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800668a:	2200      	movs	r2, #0
 800668c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006690:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8006694:	f04f 0200 	mov.w	r2, #0
 8006698:	f04f 0300 	mov.w	r3, #0
 800669c:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 80066a0:	4649      	mov	r1, r9
 80066a2:	008b      	lsls	r3, r1, #2
 80066a4:	4641      	mov	r1, r8
 80066a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066aa:	4641      	mov	r1, r8
 80066ac:	008a      	lsls	r2, r1, #2
 80066ae:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 80066b2:	f7fa fae9 	bl	8000c88 <__aeabi_uldivmod>
 80066b6:	4602      	mov	r2, r0
 80066b8:	460b      	mov	r3, r1
 80066ba:	4611      	mov	r1, r2
 80066bc:	4b3b      	ldr	r3, [pc, #236]	@ (80067ac <LL_USART_SetBaudRate+0x458>)
 80066be:	fba3 2301 	umull	r2, r3, r3, r1
 80066c2:	095b      	lsrs	r3, r3, #5
 80066c4:	2264      	movs	r2, #100	@ 0x64
 80066c6:	fb02 f303 	mul.w	r3, r2, r3
 80066ca:	1acb      	subs	r3, r1, r3
 80066cc:	011b      	lsls	r3, r3, #4
 80066ce:	3332      	adds	r3, #50	@ 0x32
 80066d0:	4a36      	ldr	r2, [pc, #216]	@ (80067ac <LL_USART_SetBaudRate+0x458>)
 80066d2:	fba2 2303 	umull	r2, r3, r2, r3
 80066d6:	095b      	lsrs	r3, r3, #5
 80066d8:	b29b      	uxth	r3, r3
 80066da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80066de:	b29b      	uxth	r3, r3
 80066e0:	4423      	add	r3, r4
 80066e2:	b29c      	uxth	r4, r3
 80066e4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80066e8:	2200      	movs	r2, #0
 80066ea:	67bb      	str	r3, [r7, #120]	@ 0x78
 80066ec:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80066ee:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80066f2:	4642      	mov	r2, r8
 80066f4:	464b      	mov	r3, r9
 80066f6:	1891      	adds	r1, r2, r2
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	415b      	adcs	r3, r3
 80066fc:	60fb      	str	r3, [r7, #12]
 80066fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006702:	4641      	mov	r1, r8
 8006704:	1851      	adds	r1, r2, r1
 8006706:	6039      	str	r1, [r7, #0]
 8006708:	4649      	mov	r1, r9
 800670a:	414b      	adcs	r3, r1
 800670c:	607b      	str	r3, [r7, #4]
 800670e:	f04f 0200 	mov.w	r2, #0
 8006712:	f04f 0300 	mov.w	r3, #0
 8006716:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800671a:	4659      	mov	r1, fp
 800671c:	00cb      	lsls	r3, r1, #3
 800671e:	4651      	mov	r1, sl
 8006720:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006724:	4651      	mov	r1, sl
 8006726:	00ca      	lsls	r2, r1, #3
 8006728:	4610      	mov	r0, r2
 800672a:	4619      	mov	r1, r3
 800672c:	4603      	mov	r3, r0
 800672e:	4642      	mov	r2, r8
 8006730:	189b      	adds	r3, r3, r2
 8006732:	673b      	str	r3, [r7, #112]	@ 0x70
 8006734:	464b      	mov	r3, r9
 8006736:	460a      	mov	r2, r1
 8006738:	eb42 0303 	adc.w	r3, r2, r3
 800673c:	677b      	str	r3, [r7, #116]	@ 0x74
 800673e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006742:	2200      	movs	r2, #0
 8006744:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006746:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006748:	f04f 0200 	mov.w	r2, #0
 800674c:	f04f 0300 	mov.w	r3, #0
 8006750:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 8006754:	4649      	mov	r1, r9
 8006756:	008b      	lsls	r3, r1, #2
 8006758:	4641      	mov	r1, r8
 800675a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800675e:	4641      	mov	r1, r8
 8006760:	008a      	lsls	r2, r1, #2
 8006762:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8006766:	f7fa fa8f 	bl	8000c88 <__aeabi_uldivmod>
 800676a:	4602      	mov	r2, r0
 800676c:	460b      	mov	r3, r1
 800676e:	4b0f      	ldr	r3, [pc, #60]	@ (80067ac <LL_USART_SetBaudRate+0x458>)
 8006770:	fba3 1302 	umull	r1, r3, r3, r2
 8006774:	095b      	lsrs	r3, r3, #5
 8006776:	2164      	movs	r1, #100	@ 0x64
 8006778:	fb01 f303 	mul.w	r3, r1, r3
 800677c:	1ad3      	subs	r3, r2, r3
 800677e:	011b      	lsls	r3, r3, #4
 8006780:	3332      	adds	r3, #50	@ 0x32
 8006782:	4a0a      	ldr	r2, [pc, #40]	@ (80067ac <LL_USART_SetBaudRate+0x458>)
 8006784:	fba2 2303 	umull	r2, r3, r2, r3
 8006788:	095b      	lsrs	r3, r3, #5
 800678a:	b29b      	uxth	r3, r3
 800678c:	f003 030f 	and.w	r3, r3, #15
 8006790:	b29b      	uxth	r3, r3
 8006792:	4423      	add	r3, r4
 8006794:	b29b      	uxth	r3, r3
 8006796:	461a      	mov	r2, r3
 8006798:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800679c:	609a      	str	r2, [r3, #8]
}
 800679e:	bf00      	nop
 80067a0:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80067a4:	46bd      	mov	sp, r7
 80067a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067aa:	bf00      	nop
 80067ac:	51eb851f 	.word	0x51eb851f

080067b0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b088      	sub	sp, #32
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80067be:	2300      	movs	r3, #0
 80067c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f7ff fd8c 	bl	80062e0 <LL_USART_IsEnabled>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d15e      	bne.n	800688c <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 80067d6:	f023 030c 	bic.w	r3, r3, #12
 80067da:	683a      	ldr	r2, [r7, #0]
 80067dc:	6851      	ldr	r1, [r2, #4]
 80067de:	683a      	ldr	r2, [r7, #0]
 80067e0:	68d2      	ldr	r2, [r2, #12]
 80067e2:	4311      	orrs	r1, r2
 80067e4:	683a      	ldr	r2, [r7, #0]
 80067e6:	6912      	ldr	r2, [r2, #16]
 80067e8:	4311      	orrs	r1, r2
 80067ea:	683a      	ldr	r2, [r7, #0]
 80067ec:	6992      	ldr	r2, [r2, #24]
 80067ee:	430a      	orrs	r2, r1
 80067f0:	431a      	orrs	r2, r3
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	4619      	mov	r1, r3
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f7ff fd83 	bl	8006308 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	695b      	ldr	r3, [r3, #20]
 8006806:	4619      	mov	r1, r3
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f7ff fd90 	bl	800632e <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800680e:	f107 0308 	add.w	r3, r7, #8
 8006812:	4618      	mov	r0, r3
 8006814:	f7ff fc9a 	bl	800614c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4a1f      	ldr	r2, [pc, #124]	@ (8006898 <LL_USART_Init+0xe8>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d102      	bne.n	8006826 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	61bb      	str	r3, [r7, #24]
 8006824:	e021      	b.n	800686a <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a1c      	ldr	r2, [pc, #112]	@ (800689c <LL_USART_Init+0xec>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d102      	bne.n	8006834 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	61bb      	str	r3, [r7, #24]
 8006832:	e01a      	b.n	800686a <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4a1a      	ldr	r2, [pc, #104]	@ (80068a0 <LL_USART_Init+0xf0>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d102      	bne.n	8006842 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	61bb      	str	r3, [r7, #24]
 8006840:	e013      	b.n	800686a <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	4a17      	ldr	r2, [pc, #92]	@ (80068a4 <LL_USART_Init+0xf4>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d102      	bne.n	8006850 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	61bb      	str	r3, [r7, #24]
 800684e:	e00c      	b.n	800686a <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a15      	ldr	r2, [pc, #84]	@ (80068a8 <LL_USART_Init+0xf8>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d102      	bne.n	800685e <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	61bb      	str	r3, [r7, #24]
 800685c:	e005      	b.n	800686a <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a12      	ldr	r2, [pc, #72]	@ (80068ac <LL_USART_Init+0xfc>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d101      	bne.n	800686a <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800686a:	69bb      	ldr	r3, [r7, #24]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d00d      	beq.n	800688c <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d009      	beq.n	800688c <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8006878:	2300      	movs	r3, #0
 800687a:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8006884:	69b9      	ldr	r1, [r7, #24]
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f7ff fd64 	bl	8006354 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800688c:	7ffb      	ldrb	r3, [r7, #31]
}
 800688e:	4618      	mov	r0, r3
 8006890:	3720      	adds	r7, #32
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	40011000 	.word	0x40011000
 800689c:	40004400 	.word	0x40004400
 80068a0:	40004800 	.word	0x40004800
 80068a4:	40011400 	.word	0x40011400
 80068a8:	40004c00 	.word	0x40004c00
 80068ac:	40005000 	.word	0x40005000

080068b0 <__NVIC_SetPriority>:
{
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	4603      	mov	r3, r0
 80068b8:	6039      	str	r1, [r7, #0]
 80068ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80068bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	db0a      	blt.n	80068da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	b2da      	uxtb	r2, r3
 80068c8:	490c      	ldr	r1, [pc, #48]	@ (80068fc <__NVIC_SetPriority+0x4c>)
 80068ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068ce:	0112      	lsls	r2, r2, #4
 80068d0:	b2d2      	uxtb	r2, r2
 80068d2:	440b      	add	r3, r1
 80068d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80068d8:	e00a      	b.n	80068f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	b2da      	uxtb	r2, r3
 80068de:	4908      	ldr	r1, [pc, #32]	@ (8006900 <__NVIC_SetPriority+0x50>)
 80068e0:	79fb      	ldrb	r3, [r7, #7]
 80068e2:	f003 030f 	and.w	r3, r3, #15
 80068e6:	3b04      	subs	r3, #4
 80068e8:	0112      	lsls	r2, r2, #4
 80068ea:	b2d2      	uxtb	r2, r2
 80068ec:	440b      	add	r3, r1
 80068ee:	761a      	strb	r2, [r3, #24]
}
 80068f0:	bf00      	nop
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr
 80068fc:	e000e100 	.word	0xe000e100
 8006900:	e000ed00 	.word	0xe000ed00

08006904 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006904:	b580      	push	{r7, lr}
 8006906:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006908:	2100      	movs	r1, #0
 800690a:	f06f 0004 	mvn.w	r0, #4
 800690e:	f7ff ffcf 	bl	80068b0 <__NVIC_SetPriority>
#endif
}
 8006912:	bf00      	nop
 8006914:	bd80      	pop	{r7, pc}
	...

08006918 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800691e:	f3ef 8305 	mrs	r3, IPSR
 8006922:	603b      	str	r3, [r7, #0]
  return(result);
 8006924:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006926:	2b00      	cmp	r3, #0
 8006928:	d003      	beq.n	8006932 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800692a:	f06f 0305 	mvn.w	r3, #5
 800692e:	607b      	str	r3, [r7, #4]
 8006930:	e00c      	b.n	800694c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006932:	4b0a      	ldr	r3, [pc, #40]	@ (800695c <osKernelInitialize+0x44>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d105      	bne.n	8006946 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800693a:	4b08      	ldr	r3, [pc, #32]	@ (800695c <osKernelInitialize+0x44>)
 800693c:	2201      	movs	r2, #1
 800693e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006940:	2300      	movs	r3, #0
 8006942:	607b      	str	r3, [r7, #4]
 8006944:	e002      	b.n	800694c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006946:	f04f 33ff 	mov.w	r3, #4294967295
 800694a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800694c:	687b      	ldr	r3, [r7, #4]
}
 800694e:	4618      	mov	r0, r3
 8006950:	370c      	adds	r7, #12
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr
 800695a:	bf00      	nop
 800695c:	200005e0 	.word	0x200005e0

08006960 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006966:	f3ef 8305 	mrs	r3, IPSR
 800696a:	603b      	str	r3, [r7, #0]
  return(result);
 800696c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800696e:	2b00      	cmp	r3, #0
 8006970:	d003      	beq.n	800697a <osKernelStart+0x1a>
    stat = osErrorISR;
 8006972:	f06f 0305 	mvn.w	r3, #5
 8006976:	607b      	str	r3, [r7, #4]
 8006978:	e010      	b.n	800699c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800697a:	4b0b      	ldr	r3, [pc, #44]	@ (80069a8 <osKernelStart+0x48>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	2b01      	cmp	r3, #1
 8006980:	d109      	bne.n	8006996 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006982:	f7ff ffbf 	bl	8006904 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006986:	4b08      	ldr	r3, [pc, #32]	@ (80069a8 <osKernelStart+0x48>)
 8006988:	2202      	movs	r2, #2
 800698a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800698c:	f001 f896 	bl	8007abc <vTaskStartScheduler>
      stat = osOK;
 8006990:	2300      	movs	r3, #0
 8006992:	607b      	str	r3, [r7, #4]
 8006994:	e002      	b.n	800699c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006996:	f04f 33ff 	mov.w	r3, #4294967295
 800699a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800699c:	687b      	ldr	r3, [r7, #4]
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3708      	adds	r7, #8
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	200005e0 	.word	0x200005e0

080069ac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b08e      	sub	sp, #56	@ 0x38
 80069b0:	af04      	add	r7, sp, #16
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	60b9      	str	r1, [r7, #8]
 80069b6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80069b8:	2300      	movs	r3, #0
 80069ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069bc:	f3ef 8305 	mrs	r3, IPSR
 80069c0:	617b      	str	r3, [r7, #20]
  return(result);
 80069c2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d17e      	bne.n	8006ac6 <osThreadNew+0x11a>
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d07b      	beq.n	8006ac6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80069ce:	2380      	movs	r3, #128	@ 0x80
 80069d0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80069d2:	2318      	movs	r3, #24
 80069d4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80069d6:	2300      	movs	r3, #0
 80069d8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80069da:	f04f 33ff 	mov.w	r3, #4294967295
 80069de:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d045      	beq.n	8006a72 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d002      	beq.n	80069f4 <osThreadNew+0x48>
        name = attr->name;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	699b      	ldr	r3, [r3, #24]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d002      	beq.n	8006a02 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	699b      	ldr	r3, [r3, #24]
 8006a00:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d008      	beq.n	8006a1a <osThreadNew+0x6e>
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	2b38      	cmp	r3, #56	@ 0x38
 8006a0c:	d805      	bhi.n	8006a1a <osThreadNew+0x6e>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	f003 0301 	and.w	r3, r3, #1
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d001      	beq.n	8006a1e <osThreadNew+0x72>
        return (NULL);
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	e054      	b.n	8006ac8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	695b      	ldr	r3, [r3, #20]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d003      	beq.n	8006a2e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	695b      	ldr	r3, [r3, #20]
 8006a2a:	089b      	lsrs	r3, r3, #2
 8006a2c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00e      	beq.n	8006a54 <osThreadNew+0xa8>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	2ba7      	cmp	r3, #167	@ 0xa7
 8006a3c:	d90a      	bls.n	8006a54 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d006      	beq.n	8006a54 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	695b      	ldr	r3, [r3, #20]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d002      	beq.n	8006a54 <osThreadNew+0xa8>
        mem = 1;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	61bb      	str	r3, [r7, #24]
 8006a52:	e010      	b.n	8006a76 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d10c      	bne.n	8006a76 <osThreadNew+0xca>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d108      	bne.n	8006a76 <osThreadNew+0xca>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	691b      	ldr	r3, [r3, #16]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d104      	bne.n	8006a76 <osThreadNew+0xca>
          mem = 0;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	61bb      	str	r3, [r7, #24]
 8006a70:	e001      	b.n	8006a76 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006a72:	2300      	movs	r3, #0
 8006a74:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d110      	bne.n	8006a9e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006a84:	9202      	str	r2, [sp, #8]
 8006a86:	9301      	str	r3, [sp, #4]
 8006a88:	69fb      	ldr	r3, [r7, #28]
 8006a8a:	9300      	str	r3, [sp, #0]
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	6a3a      	ldr	r2, [r7, #32]
 8006a90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006a92:	68f8      	ldr	r0, [r7, #12]
 8006a94:	f000 fe1e 	bl	80076d4 <xTaskCreateStatic>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	613b      	str	r3, [r7, #16]
 8006a9c:	e013      	b.n	8006ac6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006a9e:	69bb      	ldr	r3, [r7, #24]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d110      	bne.n	8006ac6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006aa4:	6a3b      	ldr	r3, [r7, #32]
 8006aa6:	b29a      	uxth	r2, r3
 8006aa8:	f107 0310 	add.w	r3, r7, #16
 8006aac:	9301      	str	r3, [sp, #4]
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	9300      	str	r3, [sp, #0]
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006ab6:	68f8      	ldr	r0, [r7, #12]
 8006ab8:	f000 fe6c 	bl	8007794 <xTaskCreate>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d001      	beq.n	8006ac6 <osThreadNew+0x11a>
            hTask = NULL;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006ac6:	693b      	ldr	r3, [r7, #16]
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3728      	adds	r7, #40	@ 0x28
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006ad0:	b480      	push	{r7}
 8006ad2:	b085      	sub	sp, #20
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	4a07      	ldr	r2, [pc, #28]	@ (8006afc <vApplicationGetIdleTaskMemory+0x2c>)
 8006ae0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	4a06      	ldr	r2, [pc, #24]	@ (8006b00 <vApplicationGetIdleTaskMemory+0x30>)
 8006ae6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2280      	movs	r2, #128	@ 0x80
 8006aec:	601a      	str	r2, [r3, #0]
}
 8006aee:	bf00      	nop
 8006af0:	3714      	adds	r7, #20
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop
 8006afc:	200005e4 	.word	0x200005e4
 8006b00:	2000068c 	.word	0x2000068c

08006b04 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006b04:	b480      	push	{r7}
 8006b06:	b085      	sub	sp, #20
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	4a07      	ldr	r2, [pc, #28]	@ (8006b30 <vApplicationGetTimerTaskMemory+0x2c>)
 8006b14:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	4a06      	ldr	r2, [pc, #24]	@ (8006b34 <vApplicationGetTimerTaskMemory+0x30>)
 8006b1a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006b22:	601a      	str	r2, [r3, #0]
}
 8006b24:	bf00      	nop
 8006b26:	3714      	adds	r7, #20
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr
 8006b30:	2000088c 	.word	0x2000088c
 8006b34:	20000934 	.word	0x20000934

08006b38 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f103 0208 	add.w	r2, r3, #8
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8006b50:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f103 0208 	add.w	r2, r3, #8
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f103 0208 	add.w	r2, r3, #8
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006b6c:	bf00      	nop
 8006b6e:	370c      	adds	r7, #12
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006b86:	bf00      	nop
 8006b88:	370c      	adds	r7, #12
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr

08006b92 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b92:	b480      	push	{r7}
 8006b94:	b085      	sub	sp, #20
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
 8006b9a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	68fa      	ldr	r2, [r7, #12]
 8006ba6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	689a      	ldr	r2, [r3, #8]
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	683a      	ldr	r2, [r7, #0]
 8006bb6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	683a      	ldr	r2, [r7, #0]
 8006bbc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	1c5a      	adds	r2, r3, #1
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	601a      	str	r2, [r3, #0]
}
 8006bce:	bf00      	nop
 8006bd0:	3714      	adds	r7, #20
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr

08006bda <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006bda:	b480      	push	{r7}
 8006bdc:	b085      	sub	sp, #20
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
 8006be2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bf0:	d103      	bne.n	8006bfa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	60fb      	str	r3, [r7, #12]
 8006bf8:	e00c      	b.n	8006c14 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	3308      	adds	r3, #8
 8006bfe:	60fb      	str	r3, [r7, #12]
 8006c00:	e002      	b.n	8006c08 <vListInsert+0x2e>
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	60fb      	str	r3, [r7, #12]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	68ba      	ldr	r2, [r7, #8]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d2f6      	bcs.n	8006c02 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	685a      	ldr	r2, [r3, #4]
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	683a      	ldr	r2, [r7, #0]
 8006c22:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	68fa      	ldr	r2, [r7, #12]
 8006c28:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	683a      	ldr	r2, [r7, #0]
 8006c2e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	1c5a      	adds	r2, r3, #1
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	601a      	str	r2, [r3, #0]
}
 8006c40:	bf00      	nop
 8006c42:	3714      	adds	r7, #20
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b085      	sub	sp, #20
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	691b      	ldr	r3, [r3, #16]
 8006c58:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	6892      	ldr	r2, [r2, #8]
 8006c62:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	6852      	ldr	r2, [r2, #4]
 8006c6c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d103      	bne.n	8006c80 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	689a      	ldr	r2, [r3, #8]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	1e5a      	subs	r2, r3, #1
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3714      	adds	r7, #20
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d10b      	bne.n	8006ccc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cb8:	f383 8811 	msr	BASEPRI, r3
 8006cbc:	f3bf 8f6f 	isb	sy
 8006cc0:	f3bf 8f4f 	dsb	sy
 8006cc4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006cc6:	bf00      	nop
 8006cc8:	bf00      	nop
 8006cca:	e7fd      	b.n	8006cc8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006ccc:	f002 f8ec 	bl	8008ea8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cd8:	68f9      	ldr	r1, [r7, #12]
 8006cda:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006cdc:	fb01 f303 	mul.w	r3, r1, r3
 8006ce0:	441a      	add	r2, r3
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cfc:	3b01      	subs	r3, #1
 8006cfe:	68f9      	ldr	r1, [r7, #12]
 8006d00:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006d02:	fb01 f303 	mul.w	r3, r1, r3
 8006d06:	441a      	add	r2, r3
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	22ff      	movs	r2, #255	@ 0xff
 8006d10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	22ff      	movs	r2, #255	@ 0xff
 8006d18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d114      	bne.n	8006d4c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	691b      	ldr	r3, [r3, #16]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d01a      	beq.n	8006d60 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	3310      	adds	r3, #16
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f001 f986 	bl	8008040 <xTaskRemoveFromEventList>
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d012      	beq.n	8006d60 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8006d70 <xQueueGenericReset+0xd0>)
 8006d3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d40:	601a      	str	r2, [r3, #0]
 8006d42:	f3bf 8f4f 	dsb	sy
 8006d46:	f3bf 8f6f 	isb	sy
 8006d4a:	e009      	b.n	8006d60 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	3310      	adds	r3, #16
 8006d50:	4618      	mov	r0, r3
 8006d52:	f7ff fef1 	bl	8006b38 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	3324      	adds	r3, #36	@ 0x24
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7ff feec 	bl	8006b38 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006d60:	f002 f8d4 	bl	8008f0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006d64:	2301      	movs	r3, #1
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3710      	adds	r7, #16
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	bf00      	nop
 8006d70:	e000ed04 	.word	0xe000ed04

08006d74 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b08e      	sub	sp, #56	@ 0x38
 8006d78:	af02      	add	r7, sp, #8
 8006d7a:	60f8      	str	r0, [r7, #12]
 8006d7c:	60b9      	str	r1, [r7, #8]
 8006d7e:	607a      	str	r2, [r7, #4]
 8006d80:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d10b      	bne.n	8006da0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006d88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d8c:	f383 8811 	msr	BASEPRI, r3
 8006d90:	f3bf 8f6f 	isb	sy
 8006d94:	f3bf 8f4f 	dsb	sy
 8006d98:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006d9a:	bf00      	nop
 8006d9c:	bf00      	nop
 8006d9e:	e7fd      	b.n	8006d9c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d10b      	bne.n	8006dbe <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006daa:	f383 8811 	msr	BASEPRI, r3
 8006dae:	f3bf 8f6f 	isb	sy
 8006db2:	f3bf 8f4f 	dsb	sy
 8006db6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006db8:	bf00      	nop
 8006dba:	bf00      	nop
 8006dbc:	e7fd      	b.n	8006dba <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d002      	beq.n	8006dca <xQueueGenericCreateStatic+0x56>
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d001      	beq.n	8006dce <xQueueGenericCreateStatic+0x5a>
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e000      	b.n	8006dd0 <xQueueGenericCreateStatic+0x5c>
 8006dce:	2300      	movs	r3, #0
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d10b      	bne.n	8006dec <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006dd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dd8:	f383 8811 	msr	BASEPRI, r3
 8006ddc:	f3bf 8f6f 	isb	sy
 8006de0:	f3bf 8f4f 	dsb	sy
 8006de4:	623b      	str	r3, [r7, #32]
}
 8006de6:	bf00      	nop
 8006de8:	bf00      	nop
 8006dea:	e7fd      	b.n	8006de8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d102      	bne.n	8006df8 <xQueueGenericCreateStatic+0x84>
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d101      	bne.n	8006dfc <xQueueGenericCreateStatic+0x88>
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e000      	b.n	8006dfe <xQueueGenericCreateStatic+0x8a>
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d10b      	bne.n	8006e1a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006e02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e06:	f383 8811 	msr	BASEPRI, r3
 8006e0a:	f3bf 8f6f 	isb	sy
 8006e0e:	f3bf 8f4f 	dsb	sy
 8006e12:	61fb      	str	r3, [r7, #28]
}
 8006e14:	bf00      	nop
 8006e16:	bf00      	nop
 8006e18:	e7fd      	b.n	8006e16 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006e1a:	2350      	movs	r3, #80	@ 0x50
 8006e1c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	2b50      	cmp	r3, #80	@ 0x50
 8006e22:	d00b      	beq.n	8006e3c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e28:	f383 8811 	msr	BASEPRI, r3
 8006e2c:	f3bf 8f6f 	isb	sy
 8006e30:	f3bf 8f4f 	dsb	sy
 8006e34:	61bb      	str	r3, [r7, #24]
}
 8006e36:	bf00      	nop
 8006e38:	bf00      	nop
 8006e3a:	e7fd      	b.n	8006e38 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006e3c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d00d      	beq.n	8006e64 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006e50:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e56:	9300      	str	r3, [sp, #0]
 8006e58:	4613      	mov	r3, r2
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	68b9      	ldr	r1, [r7, #8]
 8006e5e:	68f8      	ldr	r0, [r7, #12]
 8006e60:	f000 f805 	bl	8006e6e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3730      	adds	r7, #48	@ 0x30
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b084      	sub	sp, #16
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	60f8      	str	r0, [r7, #12]
 8006e76:	60b9      	str	r1, [r7, #8]
 8006e78:	607a      	str	r2, [r7, #4]
 8006e7a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d103      	bne.n	8006e8a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006e82:	69bb      	ldr	r3, [r7, #24]
 8006e84:	69ba      	ldr	r2, [r7, #24]
 8006e86:	601a      	str	r2, [r3, #0]
 8006e88:	e002      	b.n	8006e90 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006e90:	69bb      	ldr	r3, [r7, #24]
 8006e92:	68fa      	ldr	r2, [r7, #12]
 8006e94:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006e96:	69bb      	ldr	r3, [r7, #24]
 8006e98:	68ba      	ldr	r2, [r7, #8]
 8006e9a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006e9c:	2101      	movs	r1, #1
 8006e9e:	69b8      	ldr	r0, [r7, #24]
 8006ea0:	f7ff fefe 	bl	8006ca0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	78fa      	ldrb	r2, [r7, #3]
 8006ea8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006eac:	bf00      	nop
 8006eae:	3710      	adds	r7, #16
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b08e      	sub	sp, #56	@ 0x38
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	607a      	str	r2, [r7, #4]
 8006ec0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d10b      	bne.n	8006ee8 <xQueueGenericSend+0x34>
	__asm volatile
 8006ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ed4:	f383 8811 	msr	BASEPRI, r3
 8006ed8:	f3bf 8f6f 	isb	sy
 8006edc:	f3bf 8f4f 	dsb	sy
 8006ee0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006ee2:	bf00      	nop
 8006ee4:	bf00      	nop
 8006ee6:	e7fd      	b.n	8006ee4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d103      	bne.n	8006ef6 <xQueueGenericSend+0x42>
 8006eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d101      	bne.n	8006efa <xQueueGenericSend+0x46>
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e000      	b.n	8006efc <xQueueGenericSend+0x48>
 8006efa:	2300      	movs	r3, #0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d10b      	bne.n	8006f18 <xQueueGenericSend+0x64>
	__asm volatile
 8006f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f04:	f383 8811 	msr	BASEPRI, r3
 8006f08:	f3bf 8f6f 	isb	sy
 8006f0c:	f3bf 8f4f 	dsb	sy
 8006f10:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006f12:	bf00      	nop
 8006f14:	bf00      	nop
 8006f16:	e7fd      	b.n	8006f14 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	2b02      	cmp	r3, #2
 8006f1c:	d103      	bne.n	8006f26 <xQueueGenericSend+0x72>
 8006f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d101      	bne.n	8006f2a <xQueueGenericSend+0x76>
 8006f26:	2301      	movs	r3, #1
 8006f28:	e000      	b.n	8006f2c <xQueueGenericSend+0x78>
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d10b      	bne.n	8006f48 <xQueueGenericSend+0x94>
	__asm volatile
 8006f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f34:	f383 8811 	msr	BASEPRI, r3
 8006f38:	f3bf 8f6f 	isb	sy
 8006f3c:	f3bf 8f4f 	dsb	sy
 8006f40:	623b      	str	r3, [r7, #32]
}
 8006f42:	bf00      	nop
 8006f44:	bf00      	nop
 8006f46:	e7fd      	b.n	8006f44 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f48:	f001 fa40 	bl	80083cc <xTaskGetSchedulerState>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d102      	bne.n	8006f58 <xQueueGenericSend+0xa4>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d101      	bne.n	8006f5c <xQueueGenericSend+0xa8>
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e000      	b.n	8006f5e <xQueueGenericSend+0xaa>
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d10b      	bne.n	8006f7a <xQueueGenericSend+0xc6>
	__asm volatile
 8006f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f66:	f383 8811 	msr	BASEPRI, r3
 8006f6a:	f3bf 8f6f 	isb	sy
 8006f6e:	f3bf 8f4f 	dsb	sy
 8006f72:	61fb      	str	r3, [r7, #28]
}
 8006f74:	bf00      	nop
 8006f76:	bf00      	nop
 8006f78:	e7fd      	b.n	8006f76 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f7a:	f001 ff95 	bl	8008ea8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d302      	bcc.n	8006f90 <xQueueGenericSend+0xdc>
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	2b02      	cmp	r3, #2
 8006f8e:	d129      	bne.n	8006fe4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f90:	683a      	ldr	r2, [r7, #0]
 8006f92:	68b9      	ldr	r1, [r7, #8]
 8006f94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f96:	f000 fa2e 	bl	80073f6 <prvCopyDataToQueue>
 8006f9a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d010      	beq.n	8006fc6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fa6:	3324      	adds	r3, #36	@ 0x24
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f001 f849 	bl	8008040 <xTaskRemoveFromEventList>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d013      	beq.n	8006fdc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006fb4:	4b3f      	ldr	r3, [pc, #252]	@ (80070b4 <xQueueGenericSend+0x200>)
 8006fb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fba:	601a      	str	r2, [r3, #0]
 8006fbc:	f3bf 8f4f 	dsb	sy
 8006fc0:	f3bf 8f6f 	isb	sy
 8006fc4:	e00a      	b.n	8006fdc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006fc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d007      	beq.n	8006fdc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006fcc:	4b39      	ldr	r3, [pc, #228]	@ (80070b4 <xQueueGenericSend+0x200>)
 8006fce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fd2:	601a      	str	r2, [r3, #0]
 8006fd4:	f3bf 8f4f 	dsb	sy
 8006fd8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006fdc:	f001 ff96 	bl	8008f0c <vPortExitCritical>
				return pdPASS;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e063      	b.n	80070ac <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d103      	bne.n	8006ff2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006fea:	f001 ff8f 	bl	8008f0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	e05c      	b.n	80070ac <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ff2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d106      	bne.n	8007006 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ff8:	f107 0314 	add.w	r3, r7, #20
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f001 f883 	bl	8008108 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007002:	2301      	movs	r3, #1
 8007004:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007006:	f001 ff81 	bl	8008f0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800700a:	f000 fdc7 	bl	8007b9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800700e:	f001 ff4b 	bl	8008ea8 <vPortEnterCritical>
 8007012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007014:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007018:	b25b      	sxtb	r3, r3
 800701a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800701e:	d103      	bne.n	8007028 <xQueueGenericSend+0x174>
 8007020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007022:	2200      	movs	r2, #0
 8007024:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800702a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800702e:	b25b      	sxtb	r3, r3
 8007030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007034:	d103      	bne.n	800703e <xQueueGenericSend+0x18a>
 8007036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007038:	2200      	movs	r2, #0
 800703a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800703e:	f001 ff65 	bl	8008f0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007042:	1d3a      	adds	r2, r7, #4
 8007044:	f107 0314 	add.w	r3, r7, #20
 8007048:	4611      	mov	r1, r2
 800704a:	4618      	mov	r0, r3
 800704c:	f001 f872 	bl	8008134 <xTaskCheckForTimeOut>
 8007050:	4603      	mov	r3, r0
 8007052:	2b00      	cmp	r3, #0
 8007054:	d124      	bne.n	80070a0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007056:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007058:	f000 fac5 	bl	80075e6 <prvIsQueueFull>
 800705c:	4603      	mov	r3, r0
 800705e:	2b00      	cmp	r3, #0
 8007060:	d018      	beq.n	8007094 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007064:	3310      	adds	r3, #16
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	4611      	mov	r1, r2
 800706a:	4618      	mov	r0, r3
 800706c:	f000 ff96 	bl	8007f9c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007070:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007072:	f000 fa50 	bl	8007516 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007076:	f000 fd9f 	bl	8007bb8 <xTaskResumeAll>
 800707a:	4603      	mov	r3, r0
 800707c:	2b00      	cmp	r3, #0
 800707e:	f47f af7c 	bne.w	8006f7a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007082:	4b0c      	ldr	r3, [pc, #48]	@ (80070b4 <xQueueGenericSend+0x200>)
 8007084:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007088:	601a      	str	r2, [r3, #0]
 800708a:	f3bf 8f4f 	dsb	sy
 800708e:	f3bf 8f6f 	isb	sy
 8007092:	e772      	b.n	8006f7a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007094:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007096:	f000 fa3e 	bl	8007516 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800709a:	f000 fd8d 	bl	8007bb8 <xTaskResumeAll>
 800709e:	e76c      	b.n	8006f7a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80070a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80070a2:	f000 fa38 	bl	8007516 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80070a6:	f000 fd87 	bl	8007bb8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80070aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3738      	adds	r7, #56	@ 0x38
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}
 80070b4:	e000ed04 	.word	0xe000ed04

080070b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b090      	sub	sp, #64	@ 0x40
 80070bc:	af00      	add	r7, sp, #0
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	60b9      	str	r1, [r7, #8]
 80070c2:	607a      	str	r2, [r7, #4]
 80070c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80070ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d10b      	bne.n	80070e8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80070d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070d4:	f383 8811 	msr	BASEPRI, r3
 80070d8:	f3bf 8f6f 	isb	sy
 80070dc:	f3bf 8f4f 	dsb	sy
 80070e0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80070e2:	bf00      	nop
 80070e4:	bf00      	nop
 80070e6:	e7fd      	b.n	80070e4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d103      	bne.n	80070f6 <xQueueGenericSendFromISR+0x3e>
 80070ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d101      	bne.n	80070fa <xQueueGenericSendFromISR+0x42>
 80070f6:	2301      	movs	r3, #1
 80070f8:	e000      	b.n	80070fc <xQueueGenericSendFromISR+0x44>
 80070fa:	2300      	movs	r3, #0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d10b      	bne.n	8007118 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007104:	f383 8811 	msr	BASEPRI, r3
 8007108:	f3bf 8f6f 	isb	sy
 800710c:	f3bf 8f4f 	dsb	sy
 8007110:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007112:	bf00      	nop
 8007114:	bf00      	nop
 8007116:	e7fd      	b.n	8007114 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	2b02      	cmp	r3, #2
 800711c:	d103      	bne.n	8007126 <xQueueGenericSendFromISR+0x6e>
 800711e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007122:	2b01      	cmp	r3, #1
 8007124:	d101      	bne.n	800712a <xQueueGenericSendFromISR+0x72>
 8007126:	2301      	movs	r3, #1
 8007128:	e000      	b.n	800712c <xQueueGenericSendFromISR+0x74>
 800712a:	2300      	movs	r3, #0
 800712c:	2b00      	cmp	r3, #0
 800712e:	d10b      	bne.n	8007148 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007134:	f383 8811 	msr	BASEPRI, r3
 8007138:	f3bf 8f6f 	isb	sy
 800713c:	f3bf 8f4f 	dsb	sy
 8007140:	623b      	str	r3, [r7, #32]
}
 8007142:	bf00      	nop
 8007144:	bf00      	nop
 8007146:	e7fd      	b.n	8007144 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007148:	f001 ff8e 	bl	8009068 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800714c:	f3ef 8211 	mrs	r2, BASEPRI
 8007150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007154:	f383 8811 	msr	BASEPRI, r3
 8007158:	f3bf 8f6f 	isb	sy
 800715c:	f3bf 8f4f 	dsb	sy
 8007160:	61fa      	str	r2, [r7, #28]
 8007162:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007164:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007166:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800716a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800716c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800716e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007170:	429a      	cmp	r2, r3
 8007172:	d302      	bcc.n	800717a <xQueueGenericSendFromISR+0xc2>
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	2b02      	cmp	r3, #2
 8007178:	d12f      	bne.n	80071da <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800717a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800717c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007180:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007188:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800718a:	683a      	ldr	r2, [r7, #0]
 800718c:	68b9      	ldr	r1, [r7, #8]
 800718e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007190:	f000 f931 	bl	80073f6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007194:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800719c:	d112      	bne.n	80071c4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800719e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d016      	beq.n	80071d4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80071a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071a8:	3324      	adds	r3, #36	@ 0x24
 80071aa:	4618      	mov	r0, r3
 80071ac:	f000 ff48 	bl	8008040 <xTaskRemoveFromEventList>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d00e      	beq.n	80071d4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d00b      	beq.n	80071d4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	601a      	str	r2, [r3, #0]
 80071c2:	e007      	b.n	80071d4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80071c4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80071c8:	3301      	adds	r3, #1
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	b25a      	sxtb	r2, r3
 80071ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80071d4:	2301      	movs	r3, #1
 80071d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80071d8:	e001      	b.n	80071de <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80071da:	2300      	movs	r3, #0
 80071dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071e0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80071e8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80071ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3740      	adds	r7, #64	@ 0x40
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b08c      	sub	sp, #48	@ 0x30
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007200:	2300      	movs	r3, #0
 8007202:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800720a:	2b00      	cmp	r3, #0
 800720c:	d10b      	bne.n	8007226 <xQueueReceive+0x32>
	__asm volatile
 800720e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007212:	f383 8811 	msr	BASEPRI, r3
 8007216:	f3bf 8f6f 	isb	sy
 800721a:	f3bf 8f4f 	dsb	sy
 800721e:	623b      	str	r3, [r7, #32]
}
 8007220:	bf00      	nop
 8007222:	bf00      	nop
 8007224:	e7fd      	b.n	8007222 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d103      	bne.n	8007234 <xQueueReceive+0x40>
 800722c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800722e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007230:	2b00      	cmp	r3, #0
 8007232:	d101      	bne.n	8007238 <xQueueReceive+0x44>
 8007234:	2301      	movs	r3, #1
 8007236:	e000      	b.n	800723a <xQueueReceive+0x46>
 8007238:	2300      	movs	r3, #0
 800723a:	2b00      	cmp	r3, #0
 800723c:	d10b      	bne.n	8007256 <xQueueReceive+0x62>
	__asm volatile
 800723e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007242:	f383 8811 	msr	BASEPRI, r3
 8007246:	f3bf 8f6f 	isb	sy
 800724a:	f3bf 8f4f 	dsb	sy
 800724e:	61fb      	str	r3, [r7, #28]
}
 8007250:	bf00      	nop
 8007252:	bf00      	nop
 8007254:	e7fd      	b.n	8007252 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007256:	f001 f8b9 	bl	80083cc <xTaskGetSchedulerState>
 800725a:	4603      	mov	r3, r0
 800725c:	2b00      	cmp	r3, #0
 800725e:	d102      	bne.n	8007266 <xQueueReceive+0x72>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d101      	bne.n	800726a <xQueueReceive+0x76>
 8007266:	2301      	movs	r3, #1
 8007268:	e000      	b.n	800726c <xQueueReceive+0x78>
 800726a:	2300      	movs	r3, #0
 800726c:	2b00      	cmp	r3, #0
 800726e:	d10b      	bne.n	8007288 <xQueueReceive+0x94>
	__asm volatile
 8007270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007274:	f383 8811 	msr	BASEPRI, r3
 8007278:	f3bf 8f6f 	isb	sy
 800727c:	f3bf 8f4f 	dsb	sy
 8007280:	61bb      	str	r3, [r7, #24]
}
 8007282:	bf00      	nop
 8007284:	bf00      	nop
 8007286:	e7fd      	b.n	8007284 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007288:	f001 fe0e 	bl	8008ea8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800728c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800728e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007290:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007294:	2b00      	cmp	r3, #0
 8007296:	d01f      	beq.n	80072d8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007298:	68b9      	ldr	r1, [r7, #8]
 800729a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800729c:	f000 f915 	bl	80074ca <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80072a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a2:	1e5a      	subs	r2, r3, #1
 80072a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072a6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072aa:	691b      	ldr	r3, [r3, #16]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d00f      	beq.n	80072d0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072b2:	3310      	adds	r3, #16
 80072b4:	4618      	mov	r0, r3
 80072b6:	f000 fec3 	bl	8008040 <xTaskRemoveFromEventList>
 80072ba:	4603      	mov	r3, r0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d007      	beq.n	80072d0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80072c0:	4b3c      	ldr	r3, [pc, #240]	@ (80073b4 <xQueueReceive+0x1c0>)
 80072c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072c6:	601a      	str	r2, [r3, #0]
 80072c8:	f3bf 8f4f 	dsb	sy
 80072cc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80072d0:	f001 fe1c 	bl	8008f0c <vPortExitCritical>
				return pdPASS;
 80072d4:	2301      	movs	r3, #1
 80072d6:	e069      	b.n	80073ac <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d103      	bne.n	80072e6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80072de:	f001 fe15 	bl	8008f0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80072e2:	2300      	movs	r3, #0
 80072e4:	e062      	b.n	80073ac <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80072e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d106      	bne.n	80072fa <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80072ec:	f107 0310 	add.w	r3, r7, #16
 80072f0:	4618      	mov	r0, r3
 80072f2:	f000 ff09 	bl	8008108 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80072f6:	2301      	movs	r3, #1
 80072f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80072fa:	f001 fe07 	bl	8008f0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80072fe:	f000 fc4d 	bl	8007b9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007302:	f001 fdd1 	bl	8008ea8 <vPortEnterCritical>
 8007306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007308:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800730c:	b25b      	sxtb	r3, r3
 800730e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007312:	d103      	bne.n	800731c <xQueueReceive+0x128>
 8007314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007316:	2200      	movs	r2, #0
 8007318:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800731c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800731e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007322:	b25b      	sxtb	r3, r3
 8007324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007328:	d103      	bne.n	8007332 <xQueueReceive+0x13e>
 800732a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800732c:	2200      	movs	r2, #0
 800732e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007332:	f001 fdeb 	bl	8008f0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007336:	1d3a      	adds	r2, r7, #4
 8007338:	f107 0310 	add.w	r3, r7, #16
 800733c:	4611      	mov	r1, r2
 800733e:	4618      	mov	r0, r3
 8007340:	f000 fef8 	bl	8008134 <xTaskCheckForTimeOut>
 8007344:	4603      	mov	r3, r0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d123      	bne.n	8007392 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800734a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800734c:	f000 f935 	bl	80075ba <prvIsQueueEmpty>
 8007350:	4603      	mov	r3, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	d017      	beq.n	8007386 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007358:	3324      	adds	r3, #36	@ 0x24
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	4611      	mov	r1, r2
 800735e:	4618      	mov	r0, r3
 8007360:	f000 fe1c 	bl	8007f9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007364:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007366:	f000 f8d6 	bl	8007516 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800736a:	f000 fc25 	bl	8007bb8 <xTaskResumeAll>
 800736e:	4603      	mov	r3, r0
 8007370:	2b00      	cmp	r3, #0
 8007372:	d189      	bne.n	8007288 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007374:	4b0f      	ldr	r3, [pc, #60]	@ (80073b4 <xQueueReceive+0x1c0>)
 8007376:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800737a:	601a      	str	r2, [r3, #0]
 800737c:	f3bf 8f4f 	dsb	sy
 8007380:	f3bf 8f6f 	isb	sy
 8007384:	e780      	b.n	8007288 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007386:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007388:	f000 f8c5 	bl	8007516 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800738c:	f000 fc14 	bl	8007bb8 <xTaskResumeAll>
 8007390:	e77a      	b.n	8007288 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007392:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007394:	f000 f8bf 	bl	8007516 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007398:	f000 fc0e 	bl	8007bb8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800739c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800739e:	f000 f90c 	bl	80075ba <prvIsQueueEmpty>
 80073a2:	4603      	mov	r3, r0
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	f43f af6f 	beq.w	8007288 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80073aa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3730      	adds	r7, #48	@ 0x30
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}
 80073b4:	e000ed04 	.word	0xe000ed04

080073b8 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b084      	sub	sp, #16
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d10b      	bne.n	80073de <uxQueueMessagesWaiting+0x26>
	__asm volatile
 80073c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073ca:	f383 8811 	msr	BASEPRI, r3
 80073ce:	f3bf 8f6f 	isb	sy
 80073d2:	f3bf 8f4f 	dsb	sy
 80073d6:	60bb      	str	r3, [r7, #8]
}
 80073d8:	bf00      	nop
 80073da:	bf00      	nop
 80073dc:	e7fd      	b.n	80073da <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80073de:	f001 fd63 	bl	8008ea8 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073e6:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80073e8:	f001 fd90 	bl	8008f0c <vPortExitCritical>

	return uxReturn;
 80073ec:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80073ee:	4618      	mov	r0, r3
 80073f0:	3710      	adds	r7, #16
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}

080073f6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80073f6:	b580      	push	{r7, lr}
 80073f8:	b086      	sub	sp, #24
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	60f8      	str	r0, [r7, #12]
 80073fe:	60b9      	str	r1, [r7, #8]
 8007400:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007402:	2300      	movs	r3, #0
 8007404:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800740a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007410:	2b00      	cmp	r3, #0
 8007412:	d10d      	bne.n	8007430 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d14d      	bne.n	80074b8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	4618      	mov	r0, r3
 8007422:	f000 fff1 	bl	8008408 <xTaskPriorityDisinherit>
 8007426:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2200      	movs	r2, #0
 800742c:	609a      	str	r2, [r3, #8]
 800742e:	e043      	b.n	80074b8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d119      	bne.n	800746a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	6858      	ldr	r0, [r3, #4]
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800743e:	461a      	mov	r2, r3
 8007440:	68b9      	ldr	r1, [r7, #8]
 8007442:	f003 fd7c 	bl	800af3e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	685a      	ldr	r2, [r3, #4]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800744e:	441a      	add	r2, r3
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	685a      	ldr	r2, [r3, #4]
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	429a      	cmp	r2, r3
 800745e:	d32b      	bcc.n	80074b8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	605a      	str	r2, [r3, #4]
 8007468:	e026      	b.n	80074b8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	68d8      	ldr	r0, [r3, #12]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007472:	461a      	mov	r2, r3
 8007474:	68b9      	ldr	r1, [r7, #8]
 8007476:	f003 fd62 	bl	800af3e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	68da      	ldr	r2, [r3, #12]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007482:	425b      	negs	r3, r3
 8007484:	441a      	add	r2, r3
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	68da      	ldr	r2, [r3, #12]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	429a      	cmp	r2, r3
 8007494:	d207      	bcs.n	80074a6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	689a      	ldr	r2, [r3, #8]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800749e:	425b      	negs	r3, r3
 80074a0:	441a      	add	r2, r3
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2b02      	cmp	r3, #2
 80074aa:	d105      	bne.n	80074b8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d002      	beq.n	80074b8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	3b01      	subs	r3, #1
 80074b6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	1c5a      	adds	r2, r3, #1
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80074c0:	697b      	ldr	r3, [r7, #20]
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3718      	adds	r7, #24
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80074ca:	b580      	push	{r7, lr}
 80074cc:	b082      	sub	sp, #8
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
 80074d2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d018      	beq.n	800750e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	68da      	ldr	r2, [r3, #12]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074e4:	441a      	add	r2, r3
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	68da      	ldr	r2, [r3, #12]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d303      	bcc.n	80074fe <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	68d9      	ldr	r1, [r3, #12]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007506:	461a      	mov	r2, r3
 8007508:	6838      	ldr	r0, [r7, #0]
 800750a:	f003 fd18 	bl	800af3e <memcpy>
	}
}
 800750e:	bf00      	nop
 8007510:	3708      	adds	r7, #8
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}

08007516 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007516:	b580      	push	{r7, lr}
 8007518:	b084      	sub	sp, #16
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800751e:	f001 fcc3 	bl	8008ea8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007528:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800752a:	e011      	b.n	8007550 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007530:	2b00      	cmp	r3, #0
 8007532:	d012      	beq.n	800755a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	3324      	adds	r3, #36	@ 0x24
 8007538:	4618      	mov	r0, r3
 800753a:	f000 fd81 	bl	8008040 <xTaskRemoveFromEventList>
 800753e:	4603      	mov	r3, r0
 8007540:	2b00      	cmp	r3, #0
 8007542:	d001      	beq.n	8007548 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007544:	f000 fe5a 	bl	80081fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007548:	7bfb      	ldrb	r3, [r7, #15]
 800754a:	3b01      	subs	r3, #1
 800754c:	b2db      	uxtb	r3, r3
 800754e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007550:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007554:	2b00      	cmp	r3, #0
 8007556:	dce9      	bgt.n	800752c <prvUnlockQueue+0x16>
 8007558:	e000      	b.n	800755c <prvUnlockQueue+0x46>
					break;
 800755a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	22ff      	movs	r2, #255	@ 0xff
 8007560:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007564:	f001 fcd2 	bl	8008f0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007568:	f001 fc9e 	bl	8008ea8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007572:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007574:	e011      	b.n	800759a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	691b      	ldr	r3, [r3, #16]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d012      	beq.n	80075a4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	3310      	adds	r3, #16
 8007582:	4618      	mov	r0, r3
 8007584:	f000 fd5c 	bl	8008040 <xTaskRemoveFromEventList>
 8007588:	4603      	mov	r3, r0
 800758a:	2b00      	cmp	r3, #0
 800758c:	d001      	beq.n	8007592 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800758e:	f000 fe35 	bl	80081fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007592:	7bbb      	ldrb	r3, [r7, #14]
 8007594:	3b01      	subs	r3, #1
 8007596:	b2db      	uxtb	r3, r3
 8007598:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800759a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	dce9      	bgt.n	8007576 <prvUnlockQueue+0x60>
 80075a2:	e000      	b.n	80075a6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80075a4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	22ff      	movs	r2, #255	@ 0xff
 80075aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80075ae:	f001 fcad 	bl	8008f0c <vPortExitCritical>
}
 80075b2:	bf00      	nop
 80075b4:	3710      	adds	r7, #16
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}

080075ba <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b084      	sub	sp, #16
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80075c2:	f001 fc71 	bl	8008ea8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d102      	bne.n	80075d4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80075ce:	2301      	movs	r3, #1
 80075d0:	60fb      	str	r3, [r7, #12]
 80075d2:	e001      	b.n	80075d8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80075d4:	2300      	movs	r3, #0
 80075d6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80075d8:	f001 fc98 	bl	8008f0c <vPortExitCritical>

	return xReturn;
 80075dc:	68fb      	ldr	r3, [r7, #12]
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3710      	adds	r7, #16
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}

080075e6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80075e6:	b580      	push	{r7, lr}
 80075e8:	b084      	sub	sp, #16
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80075ee:	f001 fc5b 	bl	8008ea8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d102      	bne.n	8007604 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80075fe:	2301      	movs	r3, #1
 8007600:	60fb      	str	r3, [r7, #12]
 8007602:	e001      	b.n	8007608 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007604:	2300      	movs	r3, #0
 8007606:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007608:	f001 fc80 	bl	8008f0c <vPortExitCritical>

	return xReturn;
 800760c:	68fb      	ldr	r3, [r7, #12]
}
 800760e:	4618      	mov	r0, r3
 8007610:	3710      	adds	r7, #16
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
	...

08007618 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007618:	b480      	push	{r7}
 800761a:	b085      	sub	sp, #20
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007622:	2300      	movs	r3, #0
 8007624:	60fb      	str	r3, [r7, #12]
 8007626:	e014      	b.n	8007652 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007628:	4a0f      	ldr	r2, [pc, #60]	@ (8007668 <vQueueAddToRegistry+0x50>)
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d10b      	bne.n	800764c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007634:	490c      	ldr	r1, [pc, #48]	@ (8007668 <vQueueAddToRegistry+0x50>)
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	683a      	ldr	r2, [r7, #0]
 800763a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800763e:	4a0a      	ldr	r2, [pc, #40]	@ (8007668 <vQueueAddToRegistry+0x50>)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	00db      	lsls	r3, r3, #3
 8007644:	4413      	add	r3, r2
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800764a:	e006      	b.n	800765a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	3301      	adds	r3, #1
 8007650:	60fb      	str	r3, [r7, #12]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2b07      	cmp	r3, #7
 8007656:	d9e7      	bls.n	8007628 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007658:	bf00      	nop
 800765a:	bf00      	nop
 800765c:	3714      	adds	r7, #20
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr
 8007666:	bf00      	nop
 8007668:	20000d34 	.word	0x20000d34

0800766c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800766c:	b580      	push	{r7, lr}
 800766e:	b086      	sub	sp, #24
 8007670:	af00      	add	r7, sp, #0
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800767c:	f001 fc14 	bl	8008ea8 <vPortEnterCritical>
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007686:	b25b      	sxtb	r3, r3
 8007688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800768c:	d103      	bne.n	8007696 <vQueueWaitForMessageRestricted+0x2a>
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	2200      	movs	r2, #0
 8007692:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800769c:	b25b      	sxtb	r3, r3
 800769e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076a2:	d103      	bne.n	80076ac <vQueueWaitForMessageRestricted+0x40>
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	2200      	movs	r2, #0
 80076a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80076ac:	f001 fc2e 	bl	8008f0c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d106      	bne.n	80076c6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	3324      	adds	r3, #36	@ 0x24
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	68b9      	ldr	r1, [r7, #8]
 80076c0:	4618      	mov	r0, r3
 80076c2:	f000 fc91 	bl	8007fe8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80076c6:	6978      	ldr	r0, [r7, #20]
 80076c8:	f7ff ff25 	bl	8007516 <prvUnlockQueue>
	}
 80076cc:	bf00      	nop
 80076ce:	3718      	adds	r7, #24
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b08e      	sub	sp, #56	@ 0x38
 80076d8:	af04      	add	r7, sp, #16
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	60b9      	str	r1, [r7, #8]
 80076de:	607a      	str	r2, [r7, #4]
 80076e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80076e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d10b      	bne.n	8007700 <xTaskCreateStatic+0x2c>
	__asm volatile
 80076e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ec:	f383 8811 	msr	BASEPRI, r3
 80076f0:	f3bf 8f6f 	isb	sy
 80076f4:	f3bf 8f4f 	dsb	sy
 80076f8:	623b      	str	r3, [r7, #32]
}
 80076fa:	bf00      	nop
 80076fc:	bf00      	nop
 80076fe:	e7fd      	b.n	80076fc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007702:	2b00      	cmp	r3, #0
 8007704:	d10b      	bne.n	800771e <xTaskCreateStatic+0x4a>
	__asm volatile
 8007706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800770a:	f383 8811 	msr	BASEPRI, r3
 800770e:	f3bf 8f6f 	isb	sy
 8007712:	f3bf 8f4f 	dsb	sy
 8007716:	61fb      	str	r3, [r7, #28]
}
 8007718:	bf00      	nop
 800771a:	bf00      	nop
 800771c:	e7fd      	b.n	800771a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800771e:	23a8      	movs	r3, #168	@ 0xa8
 8007720:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	2ba8      	cmp	r3, #168	@ 0xa8
 8007726:	d00b      	beq.n	8007740 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800772c:	f383 8811 	msr	BASEPRI, r3
 8007730:	f3bf 8f6f 	isb	sy
 8007734:	f3bf 8f4f 	dsb	sy
 8007738:	61bb      	str	r3, [r7, #24]
}
 800773a:	bf00      	nop
 800773c:	bf00      	nop
 800773e:	e7fd      	b.n	800773c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007740:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007744:	2b00      	cmp	r3, #0
 8007746:	d01e      	beq.n	8007786 <xTaskCreateStatic+0xb2>
 8007748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800774a:	2b00      	cmp	r3, #0
 800774c:	d01b      	beq.n	8007786 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800774e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007750:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007754:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007756:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800775a:	2202      	movs	r2, #2
 800775c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007760:	2300      	movs	r3, #0
 8007762:	9303      	str	r3, [sp, #12]
 8007764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007766:	9302      	str	r3, [sp, #8]
 8007768:	f107 0314 	add.w	r3, r7, #20
 800776c:	9301      	str	r3, [sp, #4]
 800776e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007770:	9300      	str	r3, [sp, #0]
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	68b9      	ldr	r1, [r7, #8]
 8007778:	68f8      	ldr	r0, [r7, #12]
 800777a:	f000 f851 	bl	8007820 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800777e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007780:	f000 f8f6 	bl	8007970 <prvAddNewTaskToReadyList>
 8007784:	e001      	b.n	800778a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007786:	2300      	movs	r3, #0
 8007788:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800778a:	697b      	ldr	r3, [r7, #20]
	}
 800778c:	4618      	mov	r0, r3
 800778e:	3728      	adds	r7, #40	@ 0x28
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007794:	b580      	push	{r7, lr}
 8007796:	b08c      	sub	sp, #48	@ 0x30
 8007798:	af04      	add	r7, sp, #16
 800779a:	60f8      	str	r0, [r7, #12]
 800779c:	60b9      	str	r1, [r7, #8]
 800779e:	603b      	str	r3, [r7, #0]
 80077a0:	4613      	mov	r3, r2
 80077a2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80077a4:	88fb      	ldrh	r3, [r7, #6]
 80077a6:	009b      	lsls	r3, r3, #2
 80077a8:	4618      	mov	r0, r3
 80077aa:	f001 fc9f 	bl	80090ec <pvPortMalloc>
 80077ae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d00e      	beq.n	80077d4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80077b6:	20a8      	movs	r0, #168	@ 0xa8
 80077b8:	f001 fc98 	bl	80090ec <pvPortMalloc>
 80077bc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80077be:	69fb      	ldr	r3, [r7, #28]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d003      	beq.n	80077cc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80077c4:	69fb      	ldr	r3, [r7, #28]
 80077c6:	697a      	ldr	r2, [r7, #20]
 80077c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80077ca:	e005      	b.n	80077d8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80077cc:	6978      	ldr	r0, [r7, #20]
 80077ce:	f001 fd5b 	bl	8009288 <vPortFree>
 80077d2:	e001      	b.n	80077d8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80077d4:	2300      	movs	r3, #0
 80077d6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80077d8:	69fb      	ldr	r3, [r7, #28]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d017      	beq.n	800780e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	2200      	movs	r2, #0
 80077e2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80077e6:	88fa      	ldrh	r2, [r7, #6]
 80077e8:	2300      	movs	r3, #0
 80077ea:	9303      	str	r3, [sp, #12]
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	9302      	str	r3, [sp, #8]
 80077f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077f2:	9301      	str	r3, [sp, #4]
 80077f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077f6:	9300      	str	r3, [sp, #0]
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	68b9      	ldr	r1, [r7, #8]
 80077fc:	68f8      	ldr	r0, [r7, #12]
 80077fe:	f000 f80f 	bl	8007820 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007802:	69f8      	ldr	r0, [r7, #28]
 8007804:	f000 f8b4 	bl	8007970 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007808:	2301      	movs	r3, #1
 800780a:	61bb      	str	r3, [r7, #24]
 800780c:	e002      	b.n	8007814 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800780e:	f04f 33ff 	mov.w	r3, #4294967295
 8007812:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007814:	69bb      	ldr	r3, [r7, #24]
	}
 8007816:	4618      	mov	r0, r3
 8007818:	3720      	adds	r7, #32
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
	...

08007820 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b088      	sub	sp, #32
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	607a      	str	r2, [r7, #4]
 800782c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800782e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007830:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	009b      	lsls	r3, r3, #2
 8007836:	461a      	mov	r2, r3
 8007838:	21a5      	movs	r1, #165	@ 0xa5
 800783a:	f003 fa6e 	bl	800ad1a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800783e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007840:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007848:	3b01      	subs	r3, #1
 800784a:	009b      	lsls	r3, r3, #2
 800784c:	4413      	add	r3, r2
 800784e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007850:	69bb      	ldr	r3, [r7, #24]
 8007852:	f023 0307 	bic.w	r3, r3, #7
 8007856:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007858:	69bb      	ldr	r3, [r7, #24]
 800785a:	f003 0307 	and.w	r3, r3, #7
 800785e:	2b00      	cmp	r3, #0
 8007860:	d00b      	beq.n	800787a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007866:	f383 8811 	msr	BASEPRI, r3
 800786a:	f3bf 8f6f 	isb	sy
 800786e:	f3bf 8f4f 	dsb	sy
 8007872:	617b      	str	r3, [r7, #20]
}
 8007874:	bf00      	nop
 8007876:	bf00      	nop
 8007878:	e7fd      	b.n	8007876 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d01f      	beq.n	80078c0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007880:	2300      	movs	r3, #0
 8007882:	61fb      	str	r3, [r7, #28]
 8007884:	e012      	b.n	80078ac <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007886:	68ba      	ldr	r2, [r7, #8]
 8007888:	69fb      	ldr	r3, [r7, #28]
 800788a:	4413      	add	r3, r2
 800788c:	7819      	ldrb	r1, [r3, #0]
 800788e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007890:	69fb      	ldr	r3, [r7, #28]
 8007892:	4413      	add	r3, r2
 8007894:	3334      	adds	r3, #52	@ 0x34
 8007896:	460a      	mov	r2, r1
 8007898:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800789a:	68ba      	ldr	r2, [r7, #8]
 800789c:	69fb      	ldr	r3, [r7, #28]
 800789e:	4413      	add	r3, r2
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d006      	beq.n	80078b4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80078a6:	69fb      	ldr	r3, [r7, #28]
 80078a8:	3301      	adds	r3, #1
 80078aa:	61fb      	str	r3, [r7, #28]
 80078ac:	69fb      	ldr	r3, [r7, #28]
 80078ae:	2b0f      	cmp	r3, #15
 80078b0:	d9e9      	bls.n	8007886 <prvInitialiseNewTask+0x66>
 80078b2:	e000      	b.n	80078b6 <prvInitialiseNewTask+0x96>
			{
				break;
 80078b4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80078b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078b8:	2200      	movs	r2, #0
 80078ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80078be:	e003      	b.n	80078c8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80078c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078c2:	2200      	movs	r2, #0
 80078c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80078c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ca:	2b37      	cmp	r3, #55	@ 0x37
 80078cc:	d901      	bls.n	80078d2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80078ce:	2337      	movs	r3, #55	@ 0x37
 80078d0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80078d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80078d6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80078d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80078dc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80078de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078e0:	2200      	movs	r2, #0
 80078e2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80078e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078e6:	3304      	adds	r3, #4
 80078e8:	4618      	mov	r0, r3
 80078ea:	f7ff f945 	bl	8006b78 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80078ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078f0:	3318      	adds	r3, #24
 80078f2:	4618      	mov	r0, r3
 80078f4:	f7ff f940 	bl	8006b78 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80078f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078fc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007900:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007906:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800790a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800790c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800790e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007910:	2200      	movs	r2, #0
 8007912:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007918:	2200      	movs	r2, #0
 800791a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800791e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007920:	3354      	adds	r3, #84	@ 0x54
 8007922:	224c      	movs	r2, #76	@ 0x4c
 8007924:	2100      	movs	r1, #0
 8007926:	4618      	mov	r0, r3
 8007928:	f003 f9f7 	bl	800ad1a <memset>
 800792c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800792e:	4a0d      	ldr	r2, [pc, #52]	@ (8007964 <prvInitialiseNewTask+0x144>)
 8007930:	659a      	str	r2, [r3, #88]	@ 0x58
 8007932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007934:	4a0c      	ldr	r2, [pc, #48]	@ (8007968 <prvInitialiseNewTask+0x148>)
 8007936:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800793a:	4a0c      	ldr	r2, [pc, #48]	@ (800796c <prvInitialiseNewTask+0x14c>)
 800793c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800793e:	683a      	ldr	r2, [r7, #0]
 8007940:	68f9      	ldr	r1, [r7, #12]
 8007942:	69b8      	ldr	r0, [r7, #24]
 8007944:	f001 f97e 	bl	8008c44 <pxPortInitialiseStack>
 8007948:	4602      	mov	r2, r0
 800794a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800794c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800794e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007950:	2b00      	cmp	r3, #0
 8007952:	d002      	beq.n	800795a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007956:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007958:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800795a:	bf00      	nop
 800795c:	3720      	adds	r7, #32
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop
 8007964:	2000de80 	.word	0x2000de80
 8007968:	2000dee8 	.word	0x2000dee8
 800796c:	2000df50 	.word	0x2000df50

08007970 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007978:	f001 fa96 	bl	8008ea8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800797c:	4b2d      	ldr	r3, [pc, #180]	@ (8007a34 <prvAddNewTaskToReadyList+0xc4>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	3301      	adds	r3, #1
 8007982:	4a2c      	ldr	r2, [pc, #176]	@ (8007a34 <prvAddNewTaskToReadyList+0xc4>)
 8007984:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007986:	4b2c      	ldr	r3, [pc, #176]	@ (8007a38 <prvAddNewTaskToReadyList+0xc8>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d109      	bne.n	80079a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800798e:	4a2a      	ldr	r2, [pc, #168]	@ (8007a38 <prvAddNewTaskToReadyList+0xc8>)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007994:	4b27      	ldr	r3, [pc, #156]	@ (8007a34 <prvAddNewTaskToReadyList+0xc4>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	2b01      	cmp	r3, #1
 800799a:	d110      	bne.n	80079be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800799c:	f000 fc52 	bl	8008244 <prvInitialiseTaskLists>
 80079a0:	e00d      	b.n	80079be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80079a2:	4b26      	ldr	r3, [pc, #152]	@ (8007a3c <prvAddNewTaskToReadyList+0xcc>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d109      	bne.n	80079be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80079aa:	4b23      	ldr	r3, [pc, #140]	@ (8007a38 <prvAddNewTaskToReadyList+0xc8>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d802      	bhi.n	80079be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80079b8:	4a1f      	ldr	r2, [pc, #124]	@ (8007a38 <prvAddNewTaskToReadyList+0xc8>)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80079be:	4b20      	ldr	r3, [pc, #128]	@ (8007a40 <prvAddNewTaskToReadyList+0xd0>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	3301      	adds	r3, #1
 80079c4:	4a1e      	ldr	r2, [pc, #120]	@ (8007a40 <prvAddNewTaskToReadyList+0xd0>)
 80079c6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80079c8:	4b1d      	ldr	r3, [pc, #116]	@ (8007a40 <prvAddNewTaskToReadyList+0xd0>)
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079d4:	4b1b      	ldr	r3, [pc, #108]	@ (8007a44 <prvAddNewTaskToReadyList+0xd4>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	429a      	cmp	r2, r3
 80079da:	d903      	bls.n	80079e4 <prvAddNewTaskToReadyList+0x74>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079e0:	4a18      	ldr	r2, [pc, #96]	@ (8007a44 <prvAddNewTaskToReadyList+0xd4>)
 80079e2:	6013      	str	r3, [r2, #0]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079e8:	4613      	mov	r3, r2
 80079ea:	009b      	lsls	r3, r3, #2
 80079ec:	4413      	add	r3, r2
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	4a15      	ldr	r2, [pc, #84]	@ (8007a48 <prvAddNewTaskToReadyList+0xd8>)
 80079f2:	441a      	add	r2, r3
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	3304      	adds	r3, #4
 80079f8:	4619      	mov	r1, r3
 80079fa:	4610      	mov	r0, r2
 80079fc:	f7ff f8c9 	bl	8006b92 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007a00:	f001 fa84 	bl	8008f0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007a04:	4b0d      	ldr	r3, [pc, #52]	@ (8007a3c <prvAddNewTaskToReadyList+0xcc>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d00e      	beq.n	8007a2a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007a0c:	4b0a      	ldr	r3, [pc, #40]	@ (8007a38 <prvAddNewTaskToReadyList+0xc8>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d207      	bcs.n	8007a2a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8007a4c <prvAddNewTaskToReadyList+0xdc>)
 8007a1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a20:	601a      	str	r2, [r3, #0]
 8007a22:	f3bf 8f4f 	dsb	sy
 8007a26:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a2a:	bf00      	nop
 8007a2c:	3708      	adds	r7, #8
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
 8007a32:	bf00      	nop
 8007a34:	20001248 	.word	0x20001248
 8007a38:	20000d74 	.word	0x20000d74
 8007a3c:	20001254 	.word	0x20001254
 8007a40:	20001264 	.word	0x20001264
 8007a44:	20001250 	.word	0x20001250
 8007a48:	20000d78 	.word	0x20000d78
 8007a4c:	e000ed04 	.word	0xe000ed04

08007a50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b084      	sub	sp, #16
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d018      	beq.n	8007a94 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007a62:	4b14      	ldr	r3, [pc, #80]	@ (8007ab4 <vTaskDelay+0x64>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d00b      	beq.n	8007a82 <vTaskDelay+0x32>
	__asm volatile
 8007a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a6e:	f383 8811 	msr	BASEPRI, r3
 8007a72:	f3bf 8f6f 	isb	sy
 8007a76:	f3bf 8f4f 	dsb	sy
 8007a7a:	60bb      	str	r3, [r7, #8]
}
 8007a7c:	bf00      	nop
 8007a7e:	bf00      	nop
 8007a80:	e7fd      	b.n	8007a7e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007a82:	f000 f88b 	bl	8007b9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007a86:	2100      	movs	r1, #0
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 fd2d 	bl	80084e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007a8e:	f000 f893 	bl	8007bb8 <xTaskResumeAll>
 8007a92:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d107      	bne.n	8007aaa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007a9a:	4b07      	ldr	r3, [pc, #28]	@ (8007ab8 <vTaskDelay+0x68>)
 8007a9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007aa0:	601a      	str	r2, [r3, #0]
 8007aa2:	f3bf 8f4f 	dsb	sy
 8007aa6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007aaa:	bf00      	nop
 8007aac:	3710      	adds	r7, #16
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	20001270 	.word	0x20001270
 8007ab8:	e000ed04 	.word	0xe000ed04

08007abc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b08a      	sub	sp, #40	@ 0x28
 8007ac0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007aca:	463a      	mov	r2, r7
 8007acc:	1d39      	adds	r1, r7, #4
 8007ace:	f107 0308 	add.w	r3, r7, #8
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f7fe fffc 	bl	8006ad0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007ad8:	6839      	ldr	r1, [r7, #0]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	68ba      	ldr	r2, [r7, #8]
 8007ade:	9202      	str	r2, [sp, #8]
 8007ae0:	9301      	str	r3, [sp, #4]
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	9300      	str	r3, [sp, #0]
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	460a      	mov	r2, r1
 8007aea:	4924      	ldr	r1, [pc, #144]	@ (8007b7c <vTaskStartScheduler+0xc0>)
 8007aec:	4824      	ldr	r0, [pc, #144]	@ (8007b80 <vTaskStartScheduler+0xc4>)
 8007aee:	f7ff fdf1 	bl	80076d4 <xTaskCreateStatic>
 8007af2:	4603      	mov	r3, r0
 8007af4:	4a23      	ldr	r2, [pc, #140]	@ (8007b84 <vTaskStartScheduler+0xc8>)
 8007af6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007af8:	4b22      	ldr	r3, [pc, #136]	@ (8007b84 <vTaskStartScheduler+0xc8>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d002      	beq.n	8007b06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007b00:	2301      	movs	r3, #1
 8007b02:	617b      	str	r3, [r7, #20]
 8007b04:	e001      	b.n	8007b0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007b06:	2300      	movs	r3, #0
 8007b08:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d102      	bne.n	8007b16 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007b10:	f000 fd3e 	bl	8008590 <xTimerCreateTimerTask>
 8007b14:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d11b      	bne.n	8007b54 <vTaskStartScheduler+0x98>
	__asm volatile
 8007b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b20:	f383 8811 	msr	BASEPRI, r3
 8007b24:	f3bf 8f6f 	isb	sy
 8007b28:	f3bf 8f4f 	dsb	sy
 8007b2c:	613b      	str	r3, [r7, #16]
}
 8007b2e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007b30:	4b15      	ldr	r3, [pc, #84]	@ (8007b88 <vTaskStartScheduler+0xcc>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	3354      	adds	r3, #84	@ 0x54
 8007b36:	4a15      	ldr	r2, [pc, #84]	@ (8007b8c <vTaskStartScheduler+0xd0>)
 8007b38:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007b3a:	4b15      	ldr	r3, [pc, #84]	@ (8007b90 <vTaskStartScheduler+0xd4>)
 8007b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8007b40:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007b42:	4b14      	ldr	r3, [pc, #80]	@ (8007b94 <vTaskStartScheduler+0xd8>)
 8007b44:	2201      	movs	r2, #1
 8007b46:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007b48:	4b13      	ldr	r3, [pc, #76]	@ (8007b98 <vTaskStartScheduler+0xdc>)
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007b4e:	f001 f907 	bl	8008d60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007b52:	e00f      	b.n	8007b74 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b5a:	d10b      	bne.n	8007b74 <vTaskStartScheduler+0xb8>
	__asm volatile
 8007b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b60:	f383 8811 	msr	BASEPRI, r3
 8007b64:	f3bf 8f6f 	isb	sy
 8007b68:	f3bf 8f4f 	dsb	sy
 8007b6c:	60fb      	str	r3, [r7, #12]
}
 8007b6e:	bf00      	nop
 8007b70:	bf00      	nop
 8007b72:	e7fd      	b.n	8007b70 <vTaskStartScheduler+0xb4>
}
 8007b74:	bf00      	nop
 8007b76:	3718      	adds	r7, #24
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}
 8007b7c:	0800e568 	.word	0x0800e568
 8007b80:	08008215 	.word	0x08008215
 8007b84:	2000126c 	.word	0x2000126c
 8007b88:	20000d74 	.word	0x20000d74
 8007b8c:	20000090 	.word	0x20000090
 8007b90:	20001268 	.word	0x20001268
 8007b94:	20001254 	.word	0x20001254
 8007b98:	2000124c 	.word	0x2000124c

08007b9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007ba0:	4b04      	ldr	r3, [pc, #16]	@ (8007bb4 <vTaskSuspendAll+0x18>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	3301      	adds	r3, #1
 8007ba6:	4a03      	ldr	r2, [pc, #12]	@ (8007bb4 <vTaskSuspendAll+0x18>)
 8007ba8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007baa:	bf00      	nop
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr
 8007bb4:	20001270 	.word	0x20001270

08007bb8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007bc6:	4b42      	ldr	r3, [pc, #264]	@ (8007cd0 <xTaskResumeAll+0x118>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d10b      	bne.n	8007be6 <xTaskResumeAll+0x2e>
	__asm volatile
 8007bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bd2:	f383 8811 	msr	BASEPRI, r3
 8007bd6:	f3bf 8f6f 	isb	sy
 8007bda:	f3bf 8f4f 	dsb	sy
 8007bde:	603b      	str	r3, [r7, #0]
}
 8007be0:	bf00      	nop
 8007be2:	bf00      	nop
 8007be4:	e7fd      	b.n	8007be2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007be6:	f001 f95f 	bl	8008ea8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007bea:	4b39      	ldr	r3, [pc, #228]	@ (8007cd0 <xTaskResumeAll+0x118>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	3b01      	subs	r3, #1
 8007bf0:	4a37      	ldr	r2, [pc, #220]	@ (8007cd0 <xTaskResumeAll+0x118>)
 8007bf2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bf4:	4b36      	ldr	r3, [pc, #216]	@ (8007cd0 <xTaskResumeAll+0x118>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d162      	bne.n	8007cc2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007bfc:	4b35      	ldr	r3, [pc, #212]	@ (8007cd4 <xTaskResumeAll+0x11c>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d05e      	beq.n	8007cc2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007c04:	e02f      	b.n	8007c66 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c06:	4b34      	ldr	r3, [pc, #208]	@ (8007cd8 <xTaskResumeAll+0x120>)
 8007c08:	68db      	ldr	r3, [r3, #12]
 8007c0a:	68db      	ldr	r3, [r3, #12]
 8007c0c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	3318      	adds	r3, #24
 8007c12:	4618      	mov	r0, r3
 8007c14:	f7ff f81a 	bl	8006c4c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	3304      	adds	r3, #4
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f7ff f815 	bl	8006c4c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c26:	4b2d      	ldr	r3, [pc, #180]	@ (8007cdc <xTaskResumeAll+0x124>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d903      	bls.n	8007c36 <xTaskResumeAll+0x7e>
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c32:	4a2a      	ldr	r2, [pc, #168]	@ (8007cdc <xTaskResumeAll+0x124>)
 8007c34:	6013      	str	r3, [r2, #0]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c3a:	4613      	mov	r3, r2
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	4413      	add	r3, r2
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	4a27      	ldr	r2, [pc, #156]	@ (8007ce0 <xTaskResumeAll+0x128>)
 8007c44:	441a      	add	r2, r3
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	3304      	adds	r3, #4
 8007c4a:	4619      	mov	r1, r3
 8007c4c:	4610      	mov	r0, r2
 8007c4e:	f7fe ffa0 	bl	8006b92 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c56:	4b23      	ldr	r3, [pc, #140]	@ (8007ce4 <xTaskResumeAll+0x12c>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d302      	bcc.n	8007c66 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007c60:	4b21      	ldr	r3, [pc, #132]	@ (8007ce8 <xTaskResumeAll+0x130>)
 8007c62:	2201      	movs	r2, #1
 8007c64:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007c66:	4b1c      	ldr	r3, [pc, #112]	@ (8007cd8 <xTaskResumeAll+0x120>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d1cb      	bne.n	8007c06 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d001      	beq.n	8007c78 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007c74:	f000 fb8a 	bl	800838c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007c78:	4b1c      	ldr	r3, [pc, #112]	@ (8007cec <xTaskResumeAll+0x134>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d010      	beq.n	8007ca6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007c84:	f000 f846 	bl	8007d14 <xTaskIncrementTick>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d002      	beq.n	8007c94 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007c8e:	4b16      	ldr	r3, [pc, #88]	@ (8007ce8 <xTaskResumeAll+0x130>)
 8007c90:	2201      	movs	r2, #1
 8007c92:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	3b01      	subs	r3, #1
 8007c98:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d1f1      	bne.n	8007c84 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007ca0:	4b12      	ldr	r3, [pc, #72]	@ (8007cec <xTaskResumeAll+0x134>)
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007ca6:	4b10      	ldr	r3, [pc, #64]	@ (8007ce8 <xTaskResumeAll+0x130>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d009      	beq.n	8007cc2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007cae:	2301      	movs	r3, #1
 8007cb0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007cb2:	4b0f      	ldr	r3, [pc, #60]	@ (8007cf0 <xTaskResumeAll+0x138>)
 8007cb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cb8:	601a      	str	r2, [r3, #0]
 8007cba:	f3bf 8f4f 	dsb	sy
 8007cbe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007cc2:	f001 f923 	bl	8008f0c <vPortExitCritical>

	return xAlreadyYielded;
 8007cc6:	68bb      	ldr	r3, [r7, #8]
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3710      	adds	r7, #16
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}
 8007cd0:	20001270 	.word	0x20001270
 8007cd4:	20001248 	.word	0x20001248
 8007cd8:	20001208 	.word	0x20001208
 8007cdc:	20001250 	.word	0x20001250
 8007ce0:	20000d78 	.word	0x20000d78
 8007ce4:	20000d74 	.word	0x20000d74
 8007ce8:	2000125c 	.word	0x2000125c
 8007cec:	20001258 	.word	0x20001258
 8007cf0:	e000ed04 	.word	0xe000ed04

08007cf4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b083      	sub	sp, #12
 8007cf8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007cfa:	4b05      	ldr	r3, [pc, #20]	@ (8007d10 <xTaskGetTickCount+0x1c>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007d00:	687b      	ldr	r3, [r7, #4]
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	370c      	adds	r7, #12
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr
 8007d0e:	bf00      	nop
 8007d10:	2000124c 	.word	0x2000124c

08007d14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b086      	sub	sp, #24
 8007d18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d1e:	4b4f      	ldr	r3, [pc, #316]	@ (8007e5c <xTaskIncrementTick+0x148>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	f040 8090 	bne.w	8007e48 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007d28:	4b4d      	ldr	r3, [pc, #308]	@ (8007e60 <xTaskIncrementTick+0x14c>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007d30:	4a4b      	ldr	r2, [pc, #300]	@ (8007e60 <xTaskIncrementTick+0x14c>)
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d121      	bne.n	8007d80 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007d3c:	4b49      	ldr	r3, [pc, #292]	@ (8007e64 <xTaskIncrementTick+0x150>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d00b      	beq.n	8007d5e <xTaskIncrementTick+0x4a>
	__asm volatile
 8007d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d4a:	f383 8811 	msr	BASEPRI, r3
 8007d4e:	f3bf 8f6f 	isb	sy
 8007d52:	f3bf 8f4f 	dsb	sy
 8007d56:	603b      	str	r3, [r7, #0]
}
 8007d58:	bf00      	nop
 8007d5a:	bf00      	nop
 8007d5c:	e7fd      	b.n	8007d5a <xTaskIncrementTick+0x46>
 8007d5e:	4b41      	ldr	r3, [pc, #260]	@ (8007e64 <xTaskIncrementTick+0x150>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	60fb      	str	r3, [r7, #12]
 8007d64:	4b40      	ldr	r3, [pc, #256]	@ (8007e68 <xTaskIncrementTick+0x154>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a3e      	ldr	r2, [pc, #248]	@ (8007e64 <xTaskIncrementTick+0x150>)
 8007d6a:	6013      	str	r3, [r2, #0]
 8007d6c:	4a3e      	ldr	r2, [pc, #248]	@ (8007e68 <xTaskIncrementTick+0x154>)
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	6013      	str	r3, [r2, #0]
 8007d72:	4b3e      	ldr	r3, [pc, #248]	@ (8007e6c <xTaskIncrementTick+0x158>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	3301      	adds	r3, #1
 8007d78:	4a3c      	ldr	r2, [pc, #240]	@ (8007e6c <xTaskIncrementTick+0x158>)
 8007d7a:	6013      	str	r3, [r2, #0]
 8007d7c:	f000 fb06 	bl	800838c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007d80:	4b3b      	ldr	r3, [pc, #236]	@ (8007e70 <xTaskIncrementTick+0x15c>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	693a      	ldr	r2, [r7, #16]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d349      	bcc.n	8007e1e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d8a:	4b36      	ldr	r3, [pc, #216]	@ (8007e64 <xTaskIncrementTick+0x150>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d104      	bne.n	8007d9e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d94:	4b36      	ldr	r3, [pc, #216]	@ (8007e70 <xTaskIncrementTick+0x15c>)
 8007d96:	f04f 32ff 	mov.w	r2, #4294967295
 8007d9a:	601a      	str	r2, [r3, #0]
					break;
 8007d9c:	e03f      	b.n	8007e1e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d9e:	4b31      	ldr	r3, [pc, #196]	@ (8007e64 <xTaskIncrementTick+0x150>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	68db      	ldr	r3, [r3, #12]
 8007da6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007dae:	693a      	ldr	r2, [r7, #16]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d203      	bcs.n	8007dbe <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007db6:	4a2e      	ldr	r2, [pc, #184]	@ (8007e70 <xTaskIncrementTick+0x15c>)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007dbc:	e02f      	b.n	8007e1e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	3304      	adds	r3, #4
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f7fe ff42 	bl	8006c4c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d004      	beq.n	8007dda <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	3318      	adds	r3, #24
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f7fe ff39 	bl	8006c4c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dde:	4b25      	ldr	r3, [pc, #148]	@ (8007e74 <xTaskIncrementTick+0x160>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d903      	bls.n	8007dee <xTaskIncrementTick+0xda>
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dea:	4a22      	ldr	r2, [pc, #136]	@ (8007e74 <xTaskIncrementTick+0x160>)
 8007dec:	6013      	str	r3, [r2, #0]
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007df2:	4613      	mov	r3, r2
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	4413      	add	r3, r2
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	4a1f      	ldr	r2, [pc, #124]	@ (8007e78 <xTaskIncrementTick+0x164>)
 8007dfc:	441a      	add	r2, r3
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	3304      	adds	r3, #4
 8007e02:	4619      	mov	r1, r3
 8007e04:	4610      	mov	r0, r2
 8007e06:	f7fe fec4 	bl	8006b92 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e0e:	4b1b      	ldr	r3, [pc, #108]	@ (8007e7c <xTaskIncrementTick+0x168>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d3b8      	bcc.n	8007d8a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e1c:	e7b5      	b.n	8007d8a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007e1e:	4b17      	ldr	r3, [pc, #92]	@ (8007e7c <xTaskIncrementTick+0x168>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e24:	4914      	ldr	r1, [pc, #80]	@ (8007e78 <xTaskIncrementTick+0x164>)
 8007e26:	4613      	mov	r3, r2
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	4413      	add	r3, r2
 8007e2c:	009b      	lsls	r3, r3, #2
 8007e2e:	440b      	add	r3, r1
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d901      	bls.n	8007e3a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007e36:	2301      	movs	r3, #1
 8007e38:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007e3a:	4b11      	ldr	r3, [pc, #68]	@ (8007e80 <xTaskIncrementTick+0x16c>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d007      	beq.n	8007e52 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007e42:	2301      	movs	r3, #1
 8007e44:	617b      	str	r3, [r7, #20]
 8007e46:	e004      	b.n	8007e52 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007e48:	4b0e      	ldr	r3, [pc, #56]	@ (8007e84 <xTaskIncrementTick+0x170>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	3301      	adds	r3, #1
 8007e4e:	4a0d      	ldr	r2, [pc, #52]	@ (8007e84 <xTaskIncrementTick+0x170>)
 8007e50:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007e52:	697b      	ldr	r3, [r7, #20]
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3718      	adds	r7, #24
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}
 8007e5c:	20001270 	.word	0x20001270
 8007e60:	2000124c 	.word	0x2000124c
 8007e64:	20001200 	.word	0x20001200
 8007e68:	20001204 	.word	0x20001204
 8007e6c:	20001260 	.word	0x20001260
 8007e70:	20001268 	.word	0x20001268
 8007e74:	20001250 	.word	0x20001250
 8007e78:	20000d78 	.word	0x20000d78
 8007e7c:	20000d74 	.word	0x20000d74
 8007e80:	2000125c 	.word	0x2000125c
 8007e84:	20001258 	.word	0x20001258

08007e88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b086      	sub	sp, #24
 8007e8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007e8e:	4b3d      	ldr	r3, [pc, #244]	@ (8007f84 <vTaskSwitchContext+0xfc>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d003      	beq.n	8007e9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007e96:	4b3c      	ldr	r3, [pc, #240]	@ (8007f88 <vTaskSwitchContext+0x100>)
 8007e98:	2201      	movs	r2, #1
 8007e9a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007e9c:	e06e      	b.n	8007f7c <vTaskSwitchContext+0xf4>
		xYieldPending = pdFALSE;
 8007e9e:	4b3a      	ldr	r3, [pc, #232]	@ (8007f88 <vTaskSwitchContext+0x100>)
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8007ea4:	4b39      	ldr	r3, [pc, #228]	@ (8007f8c <vTaskSwitchContext+0x104>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007eaa:	613b      	str	r3, [r7, #16]
 8007eac:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8007eb0:	60fb      	str	r3, [r7, #12]
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	68fa      	ldr	r2, [r7, #12]
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d111      	bne.n	8007ee0 <vTaskSwitchContext+0x58>
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	3304      	adds	r3, #4
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	68fa      	ldr	r2, [r7, #12]
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d10b      	bne.n	8007ee0 <vTaskSwitchContext+0x58>
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	3308      	adds	r3, #8
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	68fa      	ldr	r2, [r7, #12]
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d105      	bne.n	8007ee0 <vTaskSwitchContext+0x58>
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	330c      	adds	r3, #12
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	68fa      	ldr	r2, [r7, #12]
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d008      	beq.n	8007ef2 <vTaskSwitchContext+0x6a>
 8007ee0:	4b2a      	ldr	r3, [pc, #168]	@ (8007f8c <vTaskSwitchContext+0x104>)
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	4b29      	ldr	r3, [pc, #164]	@ (8007f8c <vTaskSwitchContext+0x104>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	3334      	adds	r3, #52	@ 0x34
 8007eea:	4619      	mov	r1, r3
 8007eec:	4610      	mov	r0, r2
 8007eee:	f7fb fe3d 	bl	8003b6c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ef2:	4b27      	ldr	r3, [pc, #156]	@ (8007f90 <vTaskSwitchContext+0x108>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	617b      	str	r3, [r7, #20]
 8007ef8:	e011      	b.n	8007f1e <vTaskSwitchContext+0x96>
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d10b      	bne.n	8007f18 <vTaskSwitchContext+0x90>
	__asm volatile
 8007f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f04:	f383 8811 	msr	BASEPRI, r3
 8007f08:	f3bf 8f6f 	isb	sy
 8007f0c:	f3bf 8f4f 	dsb	sy
 8007f10:	607b      	str	r3, [r7, #4]
}
 8007f12:	bf00      	nop
 8007f14:	bf00      	nop
 8007f16:	e7fd      	b.n	8007f14 <vTaskSwitchContext+0x8c>
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	3b01      	subs	r3, #1
 8007f1c:	617b      	str	r3, [r7, #20]
 8007f1e:	491d      	ldr	r1, [pc, #116]	@ (8007f94 <vTaskSwitchContext+0x10c>)
 8007f20:	697a      	ldr	r2, [r7, #20]
 8007f22:	4613      	mov	r3, r2
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	4413      	add	r3, r2
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	440b      	add	r3, r1
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d0e3      	beq.n	8007efa <vTaskSwitchContext+0x72>
 8007f32:	697a      	ldr	r2, [r7, #20]
 8007f34:	4613      	mov	r3, r2
 8007f36:	009b      	lsls	r3, r3, #2
 8007f38:	4413      	add	r3, r2
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	4a15      	ldr	r2, [pc, #84]	@ (8007f94 <vTaskSwitchContext+0x10c>)
 8007f3e:	4413      	add	r3, r2
 8007f40:	60bb      	str	r3, [r7, #8]
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	685a      	ldr	r2, [r3, #4]
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	605a      	str	r2, [r3, #4]
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	685a      	ldr	r2, [r3, #4]
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	3308      	adds	r3, #8
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d104      	bne.n	8007f62 <vTaskSwitchContext+0xda>
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	685a      	ldr	r2, [r3, #4]
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	605a      	str	r2, [r3, #4]
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	68db      	ldr	r3, [r3, #12]
 8007f68:	4a08      	ldr	r2, [pc, #32]	@ (8007f8c <vTaskSwitchContext+0x104>)
 8007f6a:	6013      	str	r3, [r2, #0]
 8007f6c:	4a08      	ldr	r2, [pc, #32]	@ (8007f90 <vTaskSwitchContext+0x108>)
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007f72:	4b06      	ldr	r3, [pc, #24]	@ (8007f8c <vTaskSwitchContext+0x104>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	3354      	adds	r3, #84	@ 0x54
 8007f78:	4a07      	ldr	r2, [pc, #28]	@ (8007f98 <vTaskSwitchContext+0x110>)
 8007f7a:	6013      	str	r3, [r2, #0]
}
 8007f7c:	bf00      	nop
 8007f7e:	3718      	adds	r7, #24
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}
 8007f84:	20001270 	.word	0x20001270
 8007f88:	2000125c 	.word	0x2000125c
 8007f8c:	20000d74 	.word	0x20000d74
 8007f90:	20001250 	.word	0x20001250
 8007f94:	20000d78 	.word	0x20000d78
 8007f98:	20000090 	.word	0x20000090

08007f9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d10b      	bne.n	8007fc4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fb0:	f383 8811 	msr	BASEPRI, r3
 8007fb4:	f3bf 8f6f 	isb	sy
 8007fb8:	f3bf 8f4f 	dsb	sy
 8007fbc:	60fb      	str	r3, [r7, #12]
}
 8007fbe:	bf00      	nop
 8007fc0:	bf00      	nop
 8007fc2:	e7fd      	b.n	8007fc0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007fc4:	4b07      	ldr	r3, [pc, #28]	@ (8007fe4 <vTaskPlaceOnEventList+0x48>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	3318      	adds	r3, #24
 8007fca:	4619      	mov	r1, r3
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f7fe fe04 	bl	8006bda <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007fd2:	2101      	movs	r1, #1
 8007fd4:	6838      	ldr	r0, [r7, #0]
 8007fd6:	f000 fa87 	bl	80084e8 <prvAddCurrentTaskToDelayedList>
}
 8007fda:	bf00      	nop
 8007fdc:	3710      	adds	r7, #16
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	20000d74 	.word	0x20000d74

08007fe8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b086      	sub	sp, #24
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d10b      	bne.n	8008012 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ffe:	f383 8811 	msr	BASEPRI, r3
 8008002:	f3bf 8f6f 	isb	sy
 8008006:	f3bf 8f4f 	dsb	sy
 800800a:	617b      	str	r3, [r7, #20]
}
 800800c:	bf00      	nop
 800800e:	bf00      	nop
 8008010:	e7fd      	b.n	800800e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008012:	4b0a      	ldr	r3, [pc, #40]	@ (800803c <vTaskPlaceOnEventListRestricted+0x54>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	3318      	adds	r3, #24
 8008018:	4619      	mov	r1, r3
 800801a:	68f8      	ldr	r0, [r7, #12]
 800801c:	f7fe fdb9 	bl	8006b92 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d002      	beq.n	800802c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008026:	f04f 33ff 	mov.w	r3, #4294967295
 800802a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800802c:	6879      	ldr	r1, [r7, #4]
 800802e:	68b8      	ldr	r0, [r7, #8]
 8008030:	f000 fa5a 	bl	80084e8 <prvAddCurrentTaskToDelayedList>
	}
 8008034:	bf00      	nop
 8008036:	3718      	adds	r7, #24
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}
 800803c:	20000d74 	.word	0x20000d74

08008040 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b086      	sub	sp, #24
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	68db      	ldr	r3, [r3, #12]
 800804c:	68db      	ldr	r3, [r3, #12]
 800804e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d10b      	bne.n	800806e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800805a:	f383 8811 	msr	BASEPRI, r3
 800805e:	f3bf 8f6f 	isb	sy
 8008062:	f3bf 8f4f 	dsb	sy
 8008066:	60fb      	str	r3, [r7, #12]
}
 8008068:	bf00      	nop
 800806a:	bf00      	nop
 800806c:	e7fd      	b.n	800806a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	3318      	adds	r3, #24
 8008072:	4618      	mov	r0, r3
 8008074:	f7fe fdea 	bl	8006c4c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008078:	4b1d      	ldr	r3, [pc, #116]	@ (80080f0 <xTaskRemoveFromEventList+0xb0>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d11d      	bne.n	80080bc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	3304      	adds	r3, #4
 8008084:	4618      	mov	r0, r3
 8008086:	f7fe fde1 	bl	8006c4c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800808e:	4b19      	ldr	r3, [pc, #100]	@ (80080f4 <xTaskRemoveFromEventList+0xb4>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	429a      	cmp	r2, r3
 8008094:	d903      	bls.n	800809e <xTaskRemoveFromEventList+0x5e>
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800809a:	4a16      	ldr	r2, [pc, #88]	@ (80080f4 <xTaskRemoveFromEventList+0xb4>)
 800809c:	6013      	str	r3, [r2, #0]
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080a2:	4613      	mov	r3, r2
 80080a4:	009b      	lsls	r3, r3, #2
 80080a6:	4413      	add	r3, r2
 80080a8:	009b      	lsls	r3, r3, #2
 80080aa:	4a13      	ldr	r2, [pc, #76]	@ (80080f8 <xTaskRemoveFromEventList+0xb8>)
 80080ac:	441a      	add	r2, r3
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	3304      	adds	r3, #4
 80080b2:	4619      	mov	r1, r3
 80080b4:	4610      	mov	r0, r2
 80080b6:	f7fe fd6c 	bl	8006b92 <vListInsertEnd>
 80080ba:	e005      	b.n	80080c8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	3318      	adds	r3, #24
 80080c0:	4619      	mov	r1, r3
 80080c2:	480e      	ldr	r0, [pc, #56]	@ (80080fc <xTaskRemoveFromEventList+0xbc>)
 80080c4:	f7fe fd65 	bl	8006b92 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080cc:	4b0c      	ldr	r3, [pc, #48]	@ (8008100 <xTaskRemoveFromEventList+0xc0>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d905      	bls.n	80080e2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80080d6:	2301      	movs	r3, #1
 80080d8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80080da:	4b0a      	ldr	r3, [pc, #40]	@ (8008104 <xTaskRemoveFromEventList+0xc4>)
 80080dc:	2201      	movs	r2, #1
 80080de:	601a      	str	r2, [r3, #0]
 80080e0:	e001      	b.n	80080e6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80080e2:	2300      	movs	r3, #0
 80080e4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80080e6:	697b      	ldr	r3, [r7, #20]
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3718      	adds	r7, #24
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}
 80080f0:	20001270 	.word	0x20001270
 80080f4:	20001250 	.word	0x20001250
 80080f8:	20000d78 	.word	0x20000d78
 80080fc:	20001208 	.word	0x20001208
 8008100:	20000d74 	.word	0x20000d74
 8008104:	2000125c 	.word	0x2000125c

08008108 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008108:	b480      	push	{r7}
 800810a:	b083      	sub	sp, #12
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008110:	4b06      	ldr	r3, [pc, #24]	@ (800812c <vTaskInternalSetTimeOutState+0x24>)
 8008112:	681a      	ldr	r2, [r3, #0]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008118:	4b05      	ldr	r3, [pc, #20]	@ (8008130 <vTaskInternalSetTimeOutState+0x28>)
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	605a      	str	r2, [r3, #4]
}
 8008120:	bf00      	nop
 8008122:	370c      	adds	r7, #12
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr
 800812c:	20001260 	.word	0x20001260
 8008130:	2000124c 	.word	0x2000124c

08008134 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b088      	sub	sp, #32
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d10b      	bne.n	800815c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008148:	f383 8811 	msr	BASEPRI, r3
 800814c:	f3bf 8f6f 	isb	sy
 8008150:	f3bf 8f4f 	dsb	sy
 8008154:	613b      	str	r3, [r7, #16]
}
 8008156:	bf00      	nop
 8008158:	bf00      	nop
 800815a:	e7fd      	b.n	8008158 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d10b      	bne.n	800817a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008166:	f383 8811 	msr	BASEPRI, r3
 800816a:	f3bf 8f6f 	isb	sy
 800816e:	f3bf 8f4f 	dsb	sy
 8008172:	60fb      	str	r3, [r7, #12]
}
 8008174:	bf00      	nop
 8008176:	bf00      	nop
 8008178:	e7fd      	b.n	8008176 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800817a:	f000 fe95 	bl	8008ea8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800817e:	4b1d      	ldr	r3, [pc, #116]	@ (80081f4 <xTaskCheckForTimeOut+0xc0>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	685b      	ldr	r3, [r3, #4]
 8008188:	69ba      	ldr	r2, [r7, #24]
 800818a:	1ad3      	subs	r3, r2, r3
 800818c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008196:	d102      	bne.n	800819e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008198:	2300      	movs	r3, #0
 800819a:	61fb      	str	r3, [r7, #28]
 800819c:	e023      	b.n	80081e6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	4b15      	ldr	r3, [pc, #84]	@ (80081f8 <xTaskCheckForTimeOut+0xc4>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d007      	beq.n	80081ba <xTaskCheckForTimeOut+0x86>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	69ba      	ldr	r2, [r7, #24]
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d302      	bcc.n	80081ba <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80081b4:	2301      	movs	r3, #1
 80081b6:	61fb      	str	r3, [r7, #28]
 80081b8:	e015      	b.n	80081e6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	697a      	ldr	r2, [r7, #20]
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d20b      	bcs.n	80081dc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	681a      	ldr	r2, [r3, #0]
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	1ad2      	subs	r2, r2, r3
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f7ff ff99 	bl	8008108 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80081d6:	2300      	movs	r3, #0
 80081d8:	61fb      	str	r3, [r7, #28]
 80081da:	e004      	b.n	80081e6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	2200      	movs	r2, #0
 80081e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80081e2:	2301      	movs	r3, #1
 80081e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80081e6:	f000 fe91 	bl	8008f0c <vPortExitCritical>

	return xReturn;
 80081ea:	69fb      	ldr	r3, [r7, #28]
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3720      	adds	r7, #32
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}
 80081f4:	2000124c 	.word	0x2000124c
 80081f8:	20001260 	.word	0x20001260

080081fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80081fc:	b480      	push	{r7}
 80081fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008200:	4b03      	ldr	r3, [pc, #12]	@ (8008210 <vTaskMissedYield+0x14>)
 8008202:	2201      	movs	r2, #1
 8008204:	601a      	str	r2, [r3, #0]
}
 8008206:	bf00      	nop
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr
 8008210:	2000125c 	.word	0x2000125c

08008214 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b082      	sub	sp, #8
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800821c:	f000 f852 	bl	80082c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008220:	4b06      	ldr	r3, [pc, #24]	@ (800823c <prvIdleTask+0x28>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	2b01      	cmp	r3, #1
 8008226:	d9f9      	bls.n	800821c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008228:	4b05      	ldr	r3, [pc, #20]	@ (8008240 <prvIdleTask+0x2c>)
 800822a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800822e:	601a      	str	r2, [r3, #0]
 8008230:	f3bf 8f4f 	dsb	sy
 8008234:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008238:	e7f0      	b.n	800821c <prvIdleTask+0x8>
 800823a:	bf00      	nop
 800823c:	20000d78 	.word	0x20000d78
 8008240:	e000ed04 	.word	0xe000ed04

08008244 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800824a:	2300      	movs	r3, #0
 800824c:	607b      	str	r3, [r7, #4]
 800824e:	e00c      	b.n	800826a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	4613      	mov	r3, r2
 8008254:	009b      	lsls	r3, r3, #2
 8008256:	4413      	add	r3, r2
 8008258:	009b      	lsls	r3, r3, #2
 800825a:	4a12      	ldr	r2, [pc, #72]	@ (80082a4 <prvInitialiseTaskLists+0x60>)
 800825c:	4413      	add	r3, r2
 800825e:	4618      	mov	r0, r3
 8008260:	f7fe fc6a 	bl	8006b38 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	3301      	adds	r3, #1
 8008268:	607b      	str	r3, [r7, #4]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2b37      	cmp	r3, #55	@ 0x37
 800826e:	d9ef      	bls.n	8008250 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008270:	480d      	ldr	r0, [pc, #52]	@ (80082a8 <prvInitialiseTaskLists+0x64>)
 8008272:	f7fe fc61 	bl	8006b38 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008276:	480d      	ldr	r0, [pc, #52]	@ (80082ac <prvInitialiseTaskLists+0x68>)
 8008278:	f7fe fc5e 	bl	8006b38 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800827c:	480c      	ldr	r0, [pc, #48]	@ (80082b0 <prvInitialiseTaskLists+0x6c>)
 800827e:	f7fe fc5b 	bl	8006b38 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008282:	480c      	ldr	r0, [pc, #48]	@ (80082b4 <prvInitialiseTaskLists+0x70>)
 8008284:	f7fe fc58 	bl	8006b38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008288:	480b      	ldr	r0, [pc, #44]	@ (80082b8 <prvInitialiseTaskLists+0x74>)
 800828a:	f7fe fc55 	bl	8006b38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800828e:	4b0b      	ldr	r3, [pc, #44]	@ (80082bc <prvInitialiseTaskLists+0x78>)
 8008290:	4a05      	ldr	r2, [pc, #20]	@ (80082a8 <prvInitialiseTaskLists+0x64>)
 8008292:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008294:	4b0a      	ldr	r3, [pc, #40]	@ (80082c0 <prvInitialiseTaskLists+0x7c>)
 8008296:	4a05      	ldr	r2, [pc, #20]	@ (80082ac <prvInitialiseTaskLists+0x68>)
 8008298:	601a      	str	r2, [r3, #0]
}
 800829a:	bf00      	nop
 800829c:	3708      	adds	r7, #8
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
 80082a2:	bf00      	nop
 80082a4:	20000d78 	.word	0x20000d78
 80082a8:	200011d8 	.word	0x200011d8
 80082ac:	200011ec 	.word	0x200011ec
 80082b0:	20001208 	.word	0x20001208
 80082b4:	2000121c 	.word	0x2000121c
 80082b8:	20001234 	.word	0x20001234
 80082bc:	20001200 	.word	0x20001200
 80082c0:	20001204 	.word	0x20001204

080082c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b082      	sub	sp, #8
 80082c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80082ca:	e019      	b.n	8008300 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80082cc:	f000 fdec 	bl	8008ea8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082d0:	4b10      	ldr	r3, [pc, #64]	@ (8008314 <prvCheckTasksWaitingTermination+0x50>)
 80082d2:	68db      	ldr	r3, [r3, #12]
 80082d4:	68db      	ldr	r3, [r3, #12]
 80082d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	3304      	adds	r3, #4
 80082dc:	4618      	mov	r0, r3
 80082de:	f7fe fcb5 	bl	8006c4c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80082e2:	4b0d      	ldr	r3, [pc, #52]	@ (8008318 <prvCheckTasksWaitingTermination+0x54>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	3b01      	subs	r3, #1
 80082e8:	4a0b      	ldr	r2, [pc, #44]	@ (8008318 <prvCheckTasksWaitingTermination+0x54>)
 80082ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80082ec:	4b0b      	ldr	r3, [pc, #44]	@ (800831c <prvCheckTasksWaitingTermination+0x58>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	3b01      	subs	r3, #1
 80082f2:	4a0a      	ldr	r2, [pc, #40]	@ (800831c <prvCheckTasksWaitingTermination+0x58>)
 80082f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80082f6:	f000 fe09 	bl	8008f0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 f810 	bl	8008320 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008300:	4b06      	ldr	r3, [pc, #24]	@ (800831c <prvCheckTasksWaitingTermination+0x58>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d1e1      	bne.n	80082cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008308:	bf00      	nop
 800830a:	bf00      	nop
 800830c:	3708      	adds	r7, #8
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
 8008312:	bf00      	nop
 8008314:	2000121c 	.word	0x2000121c
 8008318:	20001248 	.word	0x20001248
 800831c:	20001230 	.word	0x20001230

08008320 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008320:	b580      	push	{r7, lr}
 8008322:	b084      	sub	sp, #16
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	3354      	adds	r3, #84	@ 0x54
 800832c:	4618      	mov	r0, r3
 800832e:	f002 fd35 	bl	800ad9c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008338:	2b00      	cmp	r3, #0
 800833a:	d108      	bne.n	800834e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008340:	4618      	mov	r0, r3
 8008342:	f000 ffa1 	bl	8009288 <vPortFree>
				vPortFree( pxTCB );
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 ff9e 	bl	8009288 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800834c:	e019      	b.n	8008382 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008354:	2b01      	cmp	r3, #1
 8008356:	d103      	bne.n	8008360 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f000 ff95 	bl	8009288 <vPortFree>
	}
 800835e:	e010      	b.n	8008382 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008366:	2b02      	cmp	r3, #2
 8008368:	d00b      	beq.n	8008382 <prvDeleteTCB+0x62>
	__asm volatile
 800836a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800836e:	f383 8811 	msr	BASEPRI, r3
 8008372:	f3bf 8f6f 	isb	sy
 8008376:	f3bf 8f4f 	dsb	sy
 800837a:	60fb      	str	r3, [r7, #12]
}
 800837c:	bf00      	nop
 800837e:	bf00      	nop
 8008380:	e7fd      	b.n	800837e <prvDeleteTCB+0x5e>
	}
 8008382:	bf00      	nop
 8008384:	3710      	adds	r7, #16
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}
	...

0800838c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008392:	4b0c      	ldr	r3, [pc, #48]	@ (80083c4 <prvResetNextTaskUnblockTime+0x38>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d104      	bne.n	80083a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800839c:	4b0a      	ldr	r3, [pc, #40]	@ (80083c8 <prvResetNextTaskUnblockTime+0x3c>)
 800839e:	f04f 32ff 	mov.w	r2, #4294967295
 80083a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80083a4:	e008      	b.n	80083b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083a6:	4b07      	ldr	r3, [pc, #28]	@ (80083c4 <prvResetNextTaskUnblockTime+0x38>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	68db      	ldr	r3, [r3, #12]
 80083ac:	68db      	ldr	r3, [r3, #12]
 80083ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	4a04      	ldr	r2, [pc, #16]	@ (80083c8 <prvResetNextTaskUnblockTime+0x3c>)
 80083b6:	6013      	str	r3, [r2, #0]
}
 80083b8:	bf00      	nop
 80083ba:	370c      	adds	r7, #12
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr
 80083c4:	20001200 	.word	0x20001200
 80083c8:	20001268 	.word	0x20001268

080083cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80083cc:	b480      	push	{r7}
 80083ce:	b083      	sub	sp, #12
 80083d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80083d2:	4b0b      	ldr	r3, [pc, #44]	@ (8008400 <xTaskGetSchedulerState+0x34>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d102      	bne.n	80083e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80083da:	2301      	movs	r3, #1
 80083dc:	607b      	str	r3, [r7, #4]
 80083de:	e008      	b.n	80083f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083e0:	4b08      	ldr	r3, [pc, #32]	@ (8008404 <xTaskGetSchedulerState+0x38>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d102      	bne.n	80083ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80083e8:	2302      	movs	r3, #2
 80083ea:	607b      	str	r3, [r7, #4]
 80083ec:	e001      	b.n	80083f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80083ee:	2300      	movs	r3, #0
 80083f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80083f2:	687b      	ldr	r3, [r7, #4]
	}
 80083f4:	4618      	mov	r0, r3
 80083f6:	370c      	adds	r7, #12
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr
 8008400:	20001254 	.word	0x20001254
 8008404:	20001270 	.word	0x20001270

08008408 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008408:	b580      	push	{r7, lr}
 800840a:	b086      	sub	sp, #24
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008414:	2300      	movs	r3, #0
 8008416:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d058      	beq.n	80084d0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800841e:	4b2f      	ldr	r3, [pc, #188]	@ (80084dc <xTaskPriorityDisinherit+0xd4>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	693a      	ldr	r2, [r7, #16]
 8008424:	429a      	cmp	r2, r3
 8008426:	d00b      	beq.n	8008440 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800842c:	f383 8811 	msr	BASEPRI, r3
 8008430:	f3bf 8f6f 	isb	sy
 8008434:	f3bf 8f4f 	dsb	sy
 8008438:	60fb      	str	r3, [r7, #12]
}
 800843a:	bf00      	nop
 800843c:	bf00      	nop
 800843e:	e7fd      	b.n	800843c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008444:	2b00      	cmp	r3, #0
 8008446:	d10b      	bne.n	8008460 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800844c:	f383 8811 	msr	BASEPRI, r3
 8008450:	f3bf 8f6f 	isb	sy
 8008454:	f3bf 8f4f 	dsb	sy
 8008458:	60bb      	str	r3, [r7, #8]
}
 800845a:	bf00      	nop
 800845c:	bf00      	nop
 800845e:	e7fd      	b.n	800845c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008464:	1e5a      	subs	r2, r3, #1
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008472:	429a      	cmp	r2, r3
 8008474:	d02c      	beq.n	80084d0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800847a:	2b00      	cmp	r3, #0
 800847c:	d128      	bne.n	80084d0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	3304      	adds	r3, #4
 8008482:	4618      	mov	r0, r3
 8008484:	f7fe fbe2 	bl	8006c4c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008494:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084a0:	4b0f      	ldr	r3, [pc, #60]	@ (80084e0 <xTaskPriorityDisinherit+0xd8>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d903      	bls.n	80084b0 <xTaskPriorityDisinherit+0xa8>
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084ac:	4a0c      	ldr	r2, [pc, #48]	@ (80084e0 <xTaskPriorityDisinherit+0xd8>)
 80084ae:	6013      	str	r3, [r2, #0]
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084b4:	4613      	mov	r3, r2
 80084b6:	009b      	lsls	r3, r3, #2
 80084b8:	4413      	add	r3, r2
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	4a09      	ldr	r2, [pc, #36]	@ (80084e4 <xTaskPriorityDisinherit+0xdc>)
 80084be:	441a      	add	r2, r3
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	3304      	adds	r3, #4
 80084c4:	4619      	mov	r1, r3
 80084c6:	4610      	mov	r0, r2
 80084c8:	f7fe fb63 	bl	8006b92 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80084cc:	2301      	movs	r3, #1
 80084ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80084d0:	697b      	ldr	r3, [r7, #20]
	}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3718      	adds	r7, #24
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop
 80084dc:	20000d74 	.word	0x20000d74
 80084e0:	20001250 	.word	0x20001250
 80084e4:	20000d78 	.word	0x20000d78

080084e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80084f2:	4b21      	ldr	r3, [pc, #132]	@ (8008578 <prvAddCurrentTaskToDelayedList+0x90>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80084f8:	4b20      	ldr	r3, [pc, #128]	@ (800857c <prvAddCurrentTaskToDelayedList+0x94>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	3304      	adds	r3, #4
 80084fe:	4618      	mov	r0, r3
 8008500:	f7fe fba4 	bl	8006c4c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800850a:	d10a      	bne.n	8008522 <prvAddCurrentTaskToDelayedList+0x3a>
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d007      	beq.n	8008522 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008512:	4b1a      	ldr	r3, [pc, #104]	@ (800857c <prvAddCurrentTaskToDelayedList+0x94>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	3304      	adds	r3, #4
 8008518:	4619      	mov	r1, r3
 800851a:	4819      	ldr	r0, [pc, #100]	@ (8008580 <prvAddCurrentTaskToDelayedList+0x98>)
 800851c:	f7fe fb39 	bl	8006b92 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008520:	e026      	b.n	8008570 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008522:	68fa      	ldr	r2, [r7, #12]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	4413      	add	r3, r2
 8008528:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800852a:	4b14      	ldr	r3, [pc, #80]	@ (800857c <prvAddCurrentTaskToDelayedList+0x94>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	68ba      	ldr	r2, [r7, #8]
 8008530:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008532:	68ba      	ldr	r2, [r7, #8]
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	429a      	cmp	r2, r3
 8008538:	d209      	bcs.n	800854e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800853a:	4b12      	ldr	r3, [pc, #72]	@ (8008584 <prvAddCurrentTaskToDelayedList+0x9c>)
 800853c:	681a      	ldr	r2, [r3, #0]
 800853e:	4b0f      	ldr	r3, [pc, #60]	@ (800857c <prvAddCurrentTaskToDelayedList+0x94>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	3304      	adds	r3, #4
 8008544:	4619      	mov	r1, r3
 8008546:	4610      	mov	r0, r2
 8008548:	f7fe fb47 	bl	8006bda <vListInsert>
}
 800854c:	e010      	b.n	8008570 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800854e:	4b0e      	ldr	r3, [pc, #56]	@ (8008588 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	4b0a      	ldr	r3, [pc, #40]	@ (800857c <prvAddCurrentTaskToDelayedList+0x94>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	3304      	adds	r3, #4
 8008558:	4619      	mov	r1, r3
 800855a:	4610      	mov	r0, r2
 800855c:	f7fe fb3d 	bl	8006bda <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008560:	4b0a      	ldr	r3, [pc, #40]	@ (800858c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	68ba      	ldr	r2, [r7, #8]
 8008566:	429a      	cmp	r2, r3
 8008568:	d202      	bcs.n	8008570 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800856a:	4a08      	ldr	r2, [pc, #32]	@ (800858c <prvAddCurrentTaskToDelayedList+0xa4>)
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	6013      	str	r3, [r2, #0]
}
 8008570:	bf00      	nop
 8008572:	3710      	adds	r7, #16
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}
 8008578:	2000124c 	.word	0x2000124c
 800857c:	20000d74 	.word	0x20000d74
 8008580:	20001234 	.word	0x20001234
 8008584:	20001204 	.word	0x20001204
 8008588:	20001200 	.word	0x20001200
 800858c:	20001268 	.word	0x20001268

08008590 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b08a      	sub	sp, #40	@ 0x28
 8008594:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008596:	2300      	movs	r3, #0
 8008598:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800859a:	f000 fb13 	bl	8008bc4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800859e:	4b1d      	ldr	r3, [pc, #116]	@ (8008614 <xTimerCreateTimerTask+0x84>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d021      	beq.n	80085ea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80085a6:	2300      	movs	r3, #0
 80085a8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80085aa:	2300      	movs	r3, #0
 80085ac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80085ae:	1d3a      	adds	r2, r7, #4
 80085b0:	f107 0108 	add.w	r1, r7, #8
 80085b4:	f107 030c 	add.w	r3, r7, #12
 80085b8:	4618      	mov	r0, r3
 80085ba:	f7fe faa3 	bl	8006b04 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80085be:	6879      	ldr	r1, [r7, #4]
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	68fa      	ldr	r2, [r7, #12]
 80085c4:	9202      	str	r2, [sp, #8]
 80085c6:	9301      	str	r3, [sp, #4]
 80085c8:	2302      	movs	r3, #2
 80085ca:	9300      	str	r3, [sp, #0]
 80085cc:	2300      	movs	r3, #0
 80085ce:	460a      	mov	r2, r1
 80085d0:	4911      	ldr	r1, [pc, #68]	@ (8008618 <xTimerCreateTimerTask+0x88>)
 80085d2:	4812      	ldr	r0, [pc, #72]	@ (800861c <xTimerCreateTimerTask+0x8c>)
 80085d4:	f7ff f87e 	bl	80076d4 <xTaskCreateStatic>
 80085d8:	4603      	mov	r3, r0
 80085da:	4a11      	ldr	r2, [pc, #68]	@ (8008620 <xTimerCreateTimerTask+0x90>)
 80085dc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80085de:	4b10      	ldr	r3, [pc, #64]	@ (8008620 <xTimerCreateTimerTask+0x90>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d001      	beq.n	80085ea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80085e6:	2301      	movs	r3, #1
 80085e8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d10b      	bne.n	8008608 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80085f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085f4:	f383 8811 	msr	BASEPRI, r3
 80085f8:	f3bf 8f6f 	isb	sy
 80085fc:	f3bf 8f4f 	dsb	sy
 8008600:	613b      	str	r3, [r7, #16]
}
 8008602:	bf00      	nop
 8008604:	bf00      	nop
 8008606:	e7fd      	b.n	8008604 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008608:	697b      	ldr	r3, [r7, #20]
}
 800860a:	4618      	mov	r0, r3
 800860c:	3718      	adds	r7, #24
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
 8008612:	bf00      	nop
 8008614:	200012a4 	.word	0x200012a4
 8008618:	0800e570 	.word	0x0800e570
 800861c:	0800875d 	.word	0x0800875d
 8008620:	200012a8 	.word	0x200012a8

08008624 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b08a      	sub	sp, #40	@ 0x28
 8008628:	af00      	add	r7, sp, #0
 800862a:	60f8      	str	r0, [r7, #12]
 800862c:	60b9      	str	r1, [r7, #8]
 800862e:	607a      	str	r2, [r7, #4]
 8008630:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008632:	2300      	movs	r3, #0
 8008634:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d10b      	bne.n	8008654 <xTimerGenericCommand+0x30>
	__asm volatile
 800863c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008640:	f383 8811 	msr	BASEPRI, r3
 8008644:	f3bf 8f6f 	isb	sy
 8008648:	f3bf 8f4f 	dsb	sy
 800864c:	623b      	str	r3, [r7, #32]
}
 800864e:	bf00      	nop
 8008650:	bf00      	nop
 8008652:	e7fd      	b.n	8008650 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008654:	4b19      	ldr	r3, [pc, #100]	@ (80086bc <xTimerGenericCommand+0x98>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d02a      	beq.n	80086b2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	2b05      	cmp	r3, #5
 800866c:	dc18      	bgt.n	80086a0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800866e:	f7ff fead 	bl	80083cc <xTaskGetSchedulerState>
 8008672:	4603      	mov	r3, r0
 8008674:	2b02      	cmp	r3, #2
 8008676:	d109      	bne.n	800868c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008678:	4b10      	ldr	r3, [pc, #64]	@ (80086bc <xTimerGenericCommand+0x98>)
 800867a:	6818      	ldr	r0, [r3, #0]
 800867c:	f107 0110 	add.w	r1, r7, #16
 8008680:	2300      	movs	r3, #0
 8008682:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008684:	f7fe fc16 	bl	8006eb4 <xQueueGenericSend>
 8008688:	6278      	str	r0, [r7, #36]	@ 0x24
 800868a:	e012      	b.n	80086b2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800868c:	4b0b      	ldr	r3, [pc, #44]	@ (80086bc <xTimerGenericCommand+0x98>)
 800868e:	6818      	ldr	r0, [r3, #0]
 8008690:	f107 0110 	add.w	r1, r7, #16
 8008694:	2300      	movs	r3, #0
 8008696:	2200      	movs	r2, #0
 8008698:	f7fe fc0c 	bl	8006eb4 <xQueueGenericSend>
 800869c:	6278      	str	r0, [r7, #36]	@ 0x24
 800869e:	e008      	b.n	80086b2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80086a0:	4b06      	ldr	r3, [pc, #24]	@ (80086bc <xTimerGenericCommand+0x98>)
 80086a2:	6818      	ldr	r0, [r3, #0]
 80086a4:	f107 0110 	add.w	r1, r7, #16
 80086a8:	2300      	movs	r3, #0
 80086aa:	683a      	ldr	r2, [r7, #0]
 80086ac:	f7fe fd04 	bl	80070b8 <xQueueGenericSendFromISR>
 80086b0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80086b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3728      	adds	r7, #40	@ 0x28
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}
 80086bc:	200012a4 	.word	0x200012a4

080086c0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b088      	sub	sp, #32
 80086c4:	af02      	add	r7, sp, #8
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086ca:	4b23      	ldr	r3, [pc, #140]	@ (8008758 <prvProcessExpiredTimer+0x98>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	68db      	ldr	r3, [r3, #12]
 80086d0:	68db      	ldr	r3, [r3, #12]
 80086d2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	3304      	adds	r3, #4
 80086d8:	4618      	mov	r0, r3
 80086da:	f7fe fab7 	bl	8006c4c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80086e4:	f003 0304 	and.w	r3, r3, #4
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d023      	beq.n	8008734 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	699a      	ldr	r2, [r3, #24]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	18d1      	adds	r1, r2, r3
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	683a      	ldr	r2, [r7, #0]
 80086f8:	6978      	ldr	r0, [r7, #20]
 80086fa:	f000 f8d5 	bl	80088a8 <prvInsertTimerInActiveList>
 80086fe:	4603      	mov	r3, r0
 8008700:	2b00      	cmp	r3, #0
 8008702:	d020      	beq.n	8008746 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008704:	2300      	movs	r3, #0
 8008706:	9300      	str	r3, [sp, #0]
 8008708:	2300      	movs	r3, #0
 800870a:	687a      	ldr	r2, [r7, #4]
 800870c:	2100      	movs	r1, #0
 800870e:	6978      	ldr	r0, [r7, #20]
 8008710:	f7ff ff88 	bl	8008624 <xTimerGenericCommand>
 8008714:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d114      	bne.n	8008746 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800871c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008720:	f383 8811 	msr	BASEPRI, r3
 8008724:	f3bf 8f6f 	isb	sy
 8008728:	f3bf 8f4f 	dsb	sy
 800872c:	60fb      	str	r3, [r7, #12]
}
 800872e:	bf00      	nop
 8008730:	bf00      	nop
 8008732:	e7fd      	b.n	8008730 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800873a:	f023 0301 	bic.w	r3, r3, #1
 800873e:	b2da      	uxtb	r2, r3
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	6a1b      	ldr	r3, [r3, #32]
 800874a:	6978      	ldr	r0, [r7, #20]
 800874c:	4798      	blx	r3
}
 800874e:	bf00      	nop
 8008750:	3718      	adds	r7, #24
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop
 8008758:	2000129c 	.word	0x2000129c

0800875c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b084      	sub	sp, #16
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008764:	f107 0308 	add.w	r3, r7, #8
 8008768:	4618      	mov	r0, r3
 800876a:	f000 f859 	bl	8008820 <prvGetNextExpireTime>
 800876e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	4619      	mov	r1, r3
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	f000 f805 	bl	8008784 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800877a:	f000 f8d7 	bl	800892c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800877e:	bf00      	nop
 8008780:	e7f0      	b.n	8008764 <prvTimerTask+0x8>
	...

08008784 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800878e:	f7ff fa05 	bl	8007b9c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008792:	f107 0308 	add.w	r3, r7, #8
 8008796:	4618      	mov	r0, r3
 8008798:	f000 f866 	bl	8008868 <prvSampleTimeNow>
 800879c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d130      	bne.n	8008806 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d10a      	bne.n	80087c0 <prvProcessTimerOrBlockTask+0x3c>
 80087aa:	687a      	ldr	r2, [r7, #4]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	429a      	cmp	r2, r3
 80087b0:	d806      	bhi.n	80087c0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80087b2:	f7ff fa01 	bl	8007bb8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80087b6:	68f9      	ldr	r1, [r7, #12]
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f7ff ff81 	bl	80086c0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80087be:	e024      	b.n	800880a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d008      	beq.n	80087d8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80087c6:	4b13      	ldr	r3, [pc, #76]	@ (8008814 <prvProcessTimerOrBlockTask+0x90>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d101      	bne.n	80087d4 <prvProcessTimerOrBlockTask+0x50>
 80087d0:	2301      	movs	r3, #1
 80087d2:	e000      	b.n	80087d6 <prvProcessTimerOrBlockTask+0x52>
 80087d4:	2300      	movs	r3, #0
 80087d6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80087d8:	4b0f      	ldr	r3, [pc, #60]	@ (8008818 <prvProcessTimerOrBlockTask+0x94>)
 80087da:	6818      	ldr	r0, [r3, #0]
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	1ad3      	subs	r3, r2, r3
 80087e2:	683a      	ldr	r2, [r7, #0]
 80087e4:	4619      	mov	r1, r3
 80087e6:	f7fe ff41 	bl	800766c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80087ea:	f7ff f9e5 	bl	8007bb8 <xTaskResumeAll>
 80087ee:	4603      	mov	r3, r0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d10a      	bne.n	800880a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80087f4:	4b09      	ldr	r3, [pc, #36]	@ (800881c <prvProcessTimerOrBlockTask+0x98>)
 80087f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087fa:	601a      	str	r2, [r3, #0]
 80087fc:	f3bf 8f4f 	dsb	sy
 8008800:	f3bf 8f6f 	isb	sy
}
 8008804:	e001      	b.n	800880a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008806:	f7ff f9d7 	bl	8007bb8 <xTaskResumeAll>
}
 800880a:	bf00      	nop
 800880c:	3710      	adds	r7, #16
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
 8008812:	bf00      	nop
 8008814:	200012a0 	.word	0x200012a0
 8008818:	200012a4 	.word	0x200012a4
 800881c:	e000ed04 	.word	0xe000ed04

08008820 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008820:	b480      	push	{r7}
 8008822:	b085      	sub	sp, #20
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008828:	4b0e      	ldr	r3, [pc, #56]	@ (8008864 <prvGetNextExpireTime+0x44>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d101      	bne.n	8008836 <prvGetNextExpireTime+0x16>
 8008832:	2201      	movs	r2, #1
 8008834:	e000      	b.n	8008838 <prvGetNextExpireTime+0x18>
 8008836:	2200      	movs	r2, #0
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d105      	bne.n	8008850 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008844:	4b07      	ldr	r3, [pc, #28]	@ (8008864 <prvGetNextExpireTime+0x44>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	68db      	ldr	r3, [r3, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	60fb      	str	r3, [r7, #12]
 800884e:	e001      	b.n	8008854 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008850:	2300      	movs	r3, #0
 8008852:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008854:	68fb      	ldr	r3, [r7, #12]
}
 8008856:	4618      	mov	r0, r3
 8008858:	3714      	adds	r7, #20
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr
 8008862:	bf00      	nop
 8008864:	2000129c 	.word	0x2000129c

08008868 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b084      	sub	sp, #16
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008870:	f7ff fa40 	bl	8007cf4 <xTaskGetTickCount>
 8008874:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008876:	4b0b      	ldr	r3, [pc, #44]	@ (80088a4 <prvSampleTimeNow+0x3c>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	68fa      	ldr	r2, [r7, #12]
 800887c:	429a      	cmp	r2, r3
 800887e:	d205      	bcs.n	800888c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008880:	f000 f93a 	bl	8008af8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2201      	movs	r2, #1
 8008888:	601a      	str	r2, [r3, #0]
 800888a:	e002      	b.n	8008892 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2200      	movs	r2, #0
 8008890:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008892:	4a04      	ldr	r2, [pc, #16]	@ (80088a4 <prvSampleTimeNow+0x3c>)
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008898:	68fb      	ldr	r3, [r7, #12]
}
 800889a:	4618      	mov	r0, r3
 800889c:	3710      	adds	r7, #16
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
 80088a2:	bf00      	nop
 80088a4:	200012ac 	.word	0x200012ac

080088a8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b086      	sub	sp, #24
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	60f8      	str	r0, [r7, #12]
 80088b0:	60b9      	str	r1, [r7, #8]
 80088b2:	607a      	str	r2, [r7, #4]
 80088b4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80088b6:	2300      	movs	r3, #0
 80088b8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	68ba      	ldr	r2, [r7, #8]
 80088be:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	68fa      	ldr	r2, [r7, #12]
 80088c4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80088c6:	68ba      	ldr	r2, [r7, #8]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	429a      	cmp	r2, r3
 80088cc:	d812      	bhi.n	80088f4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088ce:	687a      	ldr	r2, [r7, #4]
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	1ad2      	subs	r2, r2, r3
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	699b      	ldr	r3, [r3, #24]
 80088d8:	429a      	cmp	r2, r3
 80088da:	d302      	bcc.n	80088e2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80088dc:	2301      	movs	r3, #1
 80088de:	617b      	str	r3, [r7, #20]
 80088e0:	e01b      	b.n	800891a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80088e2:	4b10      	ldr	r3, [pc, #64]	@ (8008924 <prvInsertTimerInActiveList+0x7c>)
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	3304      	adds	r3, #4
 80088ea:	4619      	mov	r1, r3
 80088ec:	4610      	mov	r0, r2
 80088ee:	f7fe f974 	bl	8006bda <vListInsert>
 80088f2:	e012      	b.n	800891a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80088f4:	687a      	ldr	r2, [r7, #4]
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d206      	bcs.n	800890a <prvInsertTimerInActiveList+0x62>
 80088fc:	68ba      	ldr	r2, [r7, #8]
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	429a      	cmp	r2, r3
 8008902:	d302      	bcc.n	800890a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008904:	2301      	movs	r3, #1
 8008906:	617b      	str	r3, [r7, #20]
 8008908:	e007      	b.n	800891a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800890a:	4b07      	ldr	r3, [pc, #28]	@ (8008928 <prvInsertTimerInActiveList+0x80>)
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	3304      	adds	r3, #4
 8008912:	4619      	mov	r1, r3
 8008914:	4610      	mov	r0, r2
 8008916:	f7fe f960 	bl	8006bda <vListInsert>
		}
	}

	return xProcessTimerNow;
 800891a:	697b      	ldr	r3, [r7, #20]
}
 800891c:	4618      	mov	r0, r3
 800891e:	3718      	adds	r7, #24
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}
 8008924:	200012a0 	.word	0x200012a0
 8008928:	2000129c 	.word	0x2000129c

0800892c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b08e      	sub	sp, #56	@ 0x38
 8008930:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008932:	e0ce      	b.n	8008ad2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2b00      	cmp	r3, #0
 8008938:	da19      	bge.n	800896e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800893a:	1d3b      	adds	r3, r7, #4
 800893c:	3304      	adds	r3, #4
 800893e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008942:	2b00      	cmp	r3, #0
 8008944:	d10b      	bne.n	800895e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800894a:	f383 8811 	msr	BASEPRI, r3
 800894e:	f3bf 8f6f 	isb	sy
 8008952:	f3bf 8f4f 	dsb	sy
 8008956:	61fb      	str	r3, [r7, #28]
}
 8008958:	bf00      	nop
 800895a:	bf00      	nop
 800895c:	e7fd      	b.n	800895a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800895e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008964:	6850      	ldr	r0, [r2, #4]
 8008966:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008968:	6892      	ldr	r2, [r2, #8]
 800896a:	4611      	mov	r1, r2
 800896c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2b00      	cmp	r3, #0
 8008972:	f2c0 80ae 	blt.w	8008ad2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800897a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800897c:	695b      	ldr	r3, [r3, #20]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d004      	beq.n	800898c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008984:	3304      	adds	r3, #4
 8008986:	4618      	mov	r0, r3
 8008988:	f7fe f960 	bl	8006c4c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800898c:	463b      	mov	r3, r7
 800898e:	4618      	mov	r0, r3
 8008990:	f7ff ff6a 	bl	8008868 <prvSampleTimeNow>
 8008994:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2b09      	cmp	r3, #9
 800899a:	f200 8097 	bhi.w	8008acc <prvProcessReceivedCommands+0x1a0>
 800899e:	a201      	add	r2, pc, #4	@ (adr r2, 80089a4 <prvProcessReceivedCommands+0x78>)
 80089a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089a4:	080089cd 	.word	0x080089cd
 80089a8:	080089cd 	.word	0x080089cd
 80089ac:	080089cd 	.word	0x080089cd
 80089b0:	08008a43 	.word	0x08008a43
 80089b4:	08008a57 	.word	0x08008a57
 80089b8:	08008aa3 	.word	0x08008aa3
 80089bc:	080089cd 	.word	0x080089cd
 80089c0:	080089cd 	.word	0x080089cd
 80089c4:	08008a43 	.word	0x08008a43
 80089c8:	08008a57 	.word	0x08008a57
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80089cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80089d2:	f043 0301 	orr.w	r3, r3, #1
 80089d6:	b2da      	uxtb	r2, r3
 80089d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80089de:	68ba      	ldr	r2, [r7, #8]
 80089e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089e2:	699b      	ldr	r3, [r3, #24]
 80089e4:	18d1      	adds	r1, r2, r3
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089ec:	f7ff ff5c 	bl	80088a8 <prvInsertTimerInActiveList>
 80089f0:	4603      	mov	r3, r0
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d06c      	beq.n	8008ad0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80089f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089f8:	6a1b      	ldr	r3, [r3, #32]
 80089fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089fc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80089fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a04:	f003 0304 	and.w	r3, r3, #4
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d061      	beq.n	8008ad0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008a0c:	68ba      	ldr	r2, [r7, #8]
 8008a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a10:	699b      	ldr	r3, [r3, #24]
 8008a12:	441a      	add	r2, r3
 8008a14:	2300      	movs	r3, #0
 8008a16:	9300      	str	r3, [sp, #0]
 8008a18:	2300      	movs	r3, #0
 8008a1a:	2100      	movs	r1, #0
 8008a1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a1e:	f7ff fe01 	bl	8008624 <xTimerGenericCommand>
 8008a22:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008a24:	6a3b      	ldr	r3, [r7, #32]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d152      	bne.n	8008ad0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008a2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a2e:	f383 8811 	msr	BASEPRI, r3
 8008a32:	f3bf 8f6f 	isb	sy
 8008a36:	f3bf 8f4f 	dsb	sy
 8008a3a:	61bb      	str	r3, [r7, #24]
}
 8008a3c:	bf00      	nop
 8008a3e:	bf00      	nop
 8008a40:	e7fd      	b.n	8008a3e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a48:	f023 0301 	bic.w	r3, r3, #1
 8008a4c:	b2da      	uxtb	r2, r3
 8008a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a50:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008a54:	e03d      	b.n	8008ad2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a5c:	f043 0301 	orr.w	r3, r3, #1
 8008a60:	b2da      	uxtb	r2, r3
 8008a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a64:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008a68:	68ba      	ldr	r2, [r7, #8]
 8008a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a6c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a70:	699b      	ldr	r3, [r3, #24]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d10b      	bne.n	8008a8e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a7a:	f383 8811 	msr	BASEPRI, r3
 8008a7e:	f3bf 8f6f 	isb	sy
 8008a82:	f3bf 8f4f 	dsb	sy
 8008a86:	617b      	str	r3, [r7, #20]
}
 8008a88:	bf00      	nop
 8008a8a:	bf00      	nop
 8008a8c:	e7fd      	b.n	8008a8a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a90:	699a      	ldr	r2, [r3, #24]
 8008a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a94:	18d1      	adds	r1, r2, r3
 8008a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a9c:	f7ff ff04 	bl	80088a8 <prvInsertTimerInActiveList>
					break;
 8008aa0:	e017      	b.n	8008ad2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aa4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008aa8:	f003 0302 	and.w	r3, r3, #2
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d103      	bne.n	8008ab8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008ab0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ab2:	f000 fbe9 	bl	8009288 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008ab6:	e00c      	b.n	8008ad2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008abe:	f023 0301 	bic.w	r3, r3, #1
 8008ac2:	b2da      	uxtb	r2, r3
 8008ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ac6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008aca:	e002      	b.n	8008ad2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008acc:	bf00      	nop
 8008ace:	e000      	b.n	8008ad2 <prvProcessReceivedCommands+0x1a6>
					break;
 8008ad0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008ad2:	4b08      	ldr	r3, [pc, #32]	@ (8008af4 <prvProcessReceivedCommands+0x1c8>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	1d39      	adds	r1, r7, #4
 8008ad8:	2200      	movs	r2, #0
 8008ada:	4618      	mov	r0, r3
 8008adc:	f7fe fb8a 	bl	80071f4 <xQueueReceive>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	f47f af26 	bne.w	8008934 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008ae8:	bf00      	nop
 8008aea:	bf00      	nop
 8008aec:	3730      	adds	r7, #48	@ 0x30
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}
 8008af2:	bf00      	nop
 8008af4:	200012a4 	.word	0x200012a4

08008af8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b088      	sub	sp, #32
 8008afc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008afe:	e049      	b.n	8008b94 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008b00:	4b2e      	ldr	r3, [pc, #184]	@ (8008bbc <prvSwitchTimerLists+0xc4>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	68db      	ldr	r3, [r3, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b0a:	4b2c      	ldr	r3, [pc, #176]	@ (8008bbc <prvSwitchTimerLists+0xc4>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	68db      	ldr	r3, [r3, #12]
 8008b10:	68db      	ldr	r3, [r3, #12]
 8008b12:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	3304      	adds	r3, #4
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f7fe f897 	bl	8006c4c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	6a1b      	ldr	r3, [r3, #32]
 8008b22:	68f8      	ldr	r0, [r7, #12]
 8008b24:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b2c:	f003 0304 	and.w	r3, r3, #4
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d02f      	beq.n	8008b94 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	699b      	ldr	r3, [r3, #24]
 8008b38:	693a      	ldr	r2, [r7, #16]
 8008b3a:	4413      	add	r3, r2
 8008b3c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008b3e:	68ba      	ldr	r2, [r7, #8]
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d90e      	bls.n	8008b64 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	68ba      	ldr	r2, [r7, #8]
 8008b4a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	68fa      	ldr	r2, [r7, #12]
 8008b50:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008b52:	4b1a      	ldr	r3, [pc, #104]	@ (8008bbc <prvSwitchTimerLists+0xc4>)
 8008b54:	681a      	ldr	r2, [r3, #0]
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	3304      	adds	r3, #4
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	4610      	mov	r0, r2
 8008b5e:	f7fe f83c 	bl	8006bda <vListInsert>
 8008b62:	e017      	b.n	8008b94 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008b64:	2300      	movs	r3, #0
 8008b66:	9300      	str	r3, [sp, #0]
 8008b68:	2300      	movs	r3, #0
 8008b6a:	693a      	ldr	r2, [r7, #16]
 8008b6c:	2100      	movs	r1, #0
 8008b6e:	68f8      	ldr	r0, [r7, #12]
 8008b70:	f7ff fd58 	bl	8008624 <xTimerGenericCommand>
 8008b74:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d10b      	bne.n	8008b94 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b80:	f383 8811 	msr	BASEPRI, r3
 8008b84:	f3bf 8f6f 	isb	sy
 8008b88:	f3bf 8f4f 	dsb	sy
 8008b8c:	603b      	str	r3, [r7, #0]
}
 8008b8e:	bf00      	nop
 8008b90:	bf00      	nop
 8008b92:	e7fd      	b.n	8008b90 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008b94:	4b09      	ldr	r3, [pc, #36]	@ (8008bbc <prvSwitchTimerLists+0xc4>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d1b0      	bne.n	8008b00 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008b9e:	4b07      	ldr	r3, [pc, #28]	@ (8008bbc <prvSwitchTimerLists+0xc4>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008ba4:	4b06      	ldr	r3, [pc, #24]	@ (8008bc0 <prvSwitchTimerLists+0xc8>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a04      	ldr	r2, [pc, #16]	@ (8008bbc <prvSwitchTimerLists+0xc4>)
 8008baa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008bac:	4a04      	ldr	r2, [pc, #16]	@ (8008bc0 <prvSwitchTimerLists+0xc8>)
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	6013      	str	r3, [r2, #0]
}
 8008bb2:	bf00      	nop
 8008bb4:	3718      	adds	r7, #24
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
 8008bba:	bf00      	nop
 8008bbc:	2000129c 	.word	0x2000129c
 8008bc0:	200012a0 	.word	0x200012a0

08008bc4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b082      	sub	sp, #8
 8008bc8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008bca:	f000 f96d 	bl	8008ea8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008bce:	4b15      	ldr	r3, [pc, #84]	@ (8008c24 <prvCheckForValidListAndQueue+0x60>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d120      	bne.n	8008c18 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008bd6:	4814      	ldr	r0, [pc, #80]	@ (8008c28 <prvCheckForValidListAndQueue+0x64>)
 8008bd8:	f7fd ffae 	bl	8006b38 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008bdc:	4813      	ldr	r0, [pc, #76]	@ (8008c2c <prvCheckForValidListAndQueue+0x68>)
 8008bde:	f7fd ffab 	bl	8006b38 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008be2:	4b13      	ldr	r3, [pc, #76]	@ (8008c30 <prvCheckForValidListAndQueue+0x6c>)
 8008be4:	4a10      	ldr	r2, [pc, #64]	@ (8008c28 <prvCheckForValidListAndQueue+0x64>)
 8008be6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008be8:	4b12      	ldr	r3, [pc, #72]	@ (8008c34 <prvCheckForValidListAndQueue+0x70>)
 8008bea:	4a10      	ldr	r2, [pc, #64]	@ (8008c2c <prvCheckForValidListAndQueue+0x68>)
 8008bec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008bee:	2300      	movs	r3, #0
 8008bf0:	9300      	str	r3, [sp, #0]
 8008bf2:	4b11      	ldr	r3, [pc, #68]	@ (8008c38 <prvCheckForValidListAndQueue+0x74>)
 8008bf4:	4a11      	ldr	r2, [pc, #68]	@ (8008c3c <prvCheckForValidListAndQueue+0x78>)
 8008bf6:	2110      	movs	r1, #16
 8008bf8:	200a      	movs	r0, #10
 8008bfa:	f7fe f8bb 	bl	8006d74 <xQueueGenericCreateStatic>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	4a08      	ldr	r2, [pc, #32]	@ (8008c24 <prvCheckForValidListAndQueue+0x60>)
 8008c02:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008c04:	4b07      	ldr	r3, [pc, #28]	@ (8008c24 <prvCheckForValidListAndQueue+0x60>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d005      	beq.n	8008c18 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008c0c:	4b05      	ldr	r3, [pc, #20]	@ (8008c24 <prvCheckForValidListAndQueue+0x60>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	490b      	ldr	r1, [pc, #44]	@ (8008c40 <prvCheckForValidListAndQueue+0x7c>)
 8008c12:	4618      	mov	r0, r3
 8008c14:	f7fe fd00 	bl	8007618 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008c18:	f000 f978 	bl	8008f0c <vPortExitCritical>
}
 8008c1c:	bf00      	nop
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}
 8008c22:	bf00      	nop
 8008c24:	200012a4 	.word	0x200012a4
 8008c28:	20001274 	.word	0x20001274
 8008c2c:	20001288 	.word	0x20001288
 8008c30:	2000129c 	.word	0x2000129c
 8008c34:	200012a0 	.word	0x200012a0
 8008c38:	20001350 	.word	0x20001350
 8008c3c:	200012b0 	.word	0x200012b0
 8008c40:	0800e578 	.word	0x0800e578

08008c44 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008c44:	b480      	push	{r7}
 8008c46:	b085      	sub	sp, #20
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	60f8      	str	r0, [r7, #12]
 8008c4c:	60b9      	str	r1, [r7, #8]
 8008c4e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	3b04      	subs	r3, #4
 8008c54:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008c5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	3b04      	subs	r3, #4
 8008c62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	f023 0201 	bic.w	r2, r3, #1
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	3b04      	subs	r3, #4
 8008c72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008c74:	4a0c      	ldr	r2, [pc, #48]	@ (8008ca8 <pxPortInitialiseStack+0x64>)
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	3b14      	subs	r3, #20
 8008c7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	3b04      	subs	r3, #4
 8008c8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f06f 0202 	mvn.w	r2, #2
 8008c92:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	3b20      	subs	r3, #32
 8008c98:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3714      	adds	r7, #20
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr
 8008ca8:	08008cad 	.word	0x08008cad

08008cac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008cac:	b480      	push	{r7}
 8008cae:	b085      	sub	sp, #20
 8008cb0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008cb6:	4b13      	ldr	r3, [pc, #76]	@ (8008d04 <prvTaskExitError+0x58>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cbe:	d00b      	beq.n	8008cd8 <prvTaskExitError+0x2c>
	__asm volatile
 8008cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cc4:	f383 8811 	msr	BASEPRI, r3
 8008cc8:	f3bf 8f6f 	isb	sy
 8008ccc:	f3bf 8f4f 	dsb	sy
 8008cd0:	60fb      	str	r3, [r7, #12]
}
 8008cd2:	bf00      	nop
 8008cd4:	bf00      	nop
 8008cd6:	e7fd      	b.n	8008cd4 <prvTaskExitError+0x28>
	__asm volatile
 8008cd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cdc:	f383 8811 	msr	BASEPRI, r3
 8008ce0:	f3bf 8f6f 	isb	sy
 8008ce4:	f3bf 8f4f 	dsb	sy
 8008ce8:	60bb      	str	r3, [r7, #8]
}
 8008cea:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008cec:	bf00      	nop
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d0fc      	beq.n	8008cee <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008cf4:	bf00      	nop
 8008cf6:	bf00      	nop
 8008cf8:	3714      	adds	r7, #20
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr
 8008d02:	bf00      	nop
 8008d04:	2000006c 	.word	0x2000006c
	...

08008d10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008d10:	4b07      	ldr	r3, [pc, #28]	@ (8008d30 <pxCurrentTCBConst2>)
 8008d12:	6819      	ldr	r1, [r3, #0]
 8008d14:	6808      	ldr	r0, [r1, #0]
 8008d16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d1a:	f380 8809 	msr	PSP, r0
 8008d1e:	f3bf 8f6f 	isb	sy
 8008d22:	f04f 0000 	mov.w	r0, #0
 8008d26:	f380 8811 	msr	BASEPRI, r0
 8008d2a:	4770      	bx	lr
 8008d2c:	f3af 8000 	nop.w

08008d30 <pxCurrentTCBConst2>:
 8008d30:	20000d74 	.word	0x20000d74
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008d34:	bf00      	nop
 8008d36:	bf00      	nop

08008d38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008d38:	4808      	ldr	r0, [pc, #32]	@ (8008d5c <prvPortStartFirstTask+0x24>)
 8008d3a:	6800      	ldr	r0, [r0, #0]
 8008d3c:	6800      	ldr	r0, [r0, #0]
 8008d3e:	f380 8808 	msr	MSP, r0
 8008d42:	f04f 0000 	mov.w	r0, #0
 8008d46:	f380 8814 	msr	CONTROL, r0
 8008d4a:	b662      	cpsie	i
 8008d4c:	b661      	cpsie	f
 8008d4e:	f3bf 8f4f 	dsb	sy
 8008d52:	f3bf 8f6f 	isb	sy
 8008d56:	df00      	svc	0
 8008d58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008d5a:	bf00      	nop
 8008d5c:	e000ed08 	.word	0xe000ed08

08008d60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b086      	sub	sp, #24
 8008d64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008d66:	4b47      	ldr	r3, [pc, #284]	@ (8008e84 <xPortStartScheduler+0x124>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a47      	ldr	r2, [pc, #284]	@ (8008e88 <xPortStartScheduler+0x128>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d10b      	bne.n	8008d88 <xPortStartScheduler+0x28>
	__asm volatile
 8008d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d74:	f383 8811 	msr	BASEPRI, r3
 8008d78:	f3bf 8f6f 	isb	sy
 8008d7c:	f3bf 8f4f 	dsb	sy
 8008d80:	60fb      	str	r3, [r7, #12]
}
 8008d82:	bf00      	nop
 8008d84:	bf00      	nop
 8008d86:	e7fd      	b.n	8008d84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008d88:	4b3e      	ldr	r3, [pc, #248]	@ (8008e84 <xPortStartScheduler+0x124>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a3f      	ldr	r2, [pc, #252]	@ (8008e8c <xPortStartScheduler+0x12c>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d10b      	bne.n	8008daa <xPortStartScheduler+0x4a>
	__asm volatile
 8008d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d96:	f383 8811 	msr	BASEPRI, r3
 8008d9a:	f3bf 8f6f 	isb	sy
 8008d9e:	f3bf 8f4f 	dsb	sy
 8008da2:	613b      	str	r3, [r7, #16]
}
 8008da4:	bf00      	nop
 8008da6:	bf00      	nop
 8008da8:	e7fd      	b.n	8008da6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008daa:	4b39      	ldr	r3, [pc, #228]	@ (8008e90 <xPortStartScheduler+0x130>)
 8008dac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	781b      	ldrb	r3, [r3, #0]
 8008db2:	b2db      	uxtb	r3, r3
 8008db4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	22ff      	movs	r2, #255	@ 0xff
 8008dba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	b2db      	uxtb	r3, r3
 8008dc2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008dc4:	78fb      	ldrb	r3, [r7, #3]
 8008dc6:	b2db      	uxtb	r3, r3
 8008dc8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008dcc:	b2da      	uxtb	r2, r3
 8008dce:	4b31      	ldr	r3, [pc, #196]	@ (8008e94 <xPortStartScheduler+0x134>)
 8008dd0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008dd2:	4b31      	ldr	r3, [pc, #196]	@ (8008e98 <xPortStartScheduler+0x138>)
 8008dd4:	2207      	movs	r2, #7
 8008dd6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008dd8:	e009      	b.n	8008dee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008dda:	4b2f      	ldr	r3, [pc, #188]	@ (8008e98 <xPortStartScheduler+0x138>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	3b01      	subs	r3, #1
 8008de0:	4a2d      	ldr	r2, [pc, #180]	@ (8008e98 <xPortStartScheduler+0x138>)
 8008de2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008de4:	78fb      	ldrb	r3, [r7, #3]
 8008de6:	b2db      	uxtb	r3, r3
 8008de8:	005b      	lsls	r3, r3, #1
 8008dea:	b2db      	uxtb	r3, r3
 8008dec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008dee:	78fb      	ldrb	r3, [r7, #3]
 8008df0:	b2db      	uxtb	r3, r3
 8008df2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008df6:	2b80      	cmp	r3, #128	@ 0x80
 8008df8:	d0ef      	beq.n	8008dda <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008dfa:	4b27      	ldr	r3, [pc, #156]	@ (8008e98 <xPortStartScheduler+0x138>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f1c3 0307 	rsb	r3, r3, #7
 8008e02:	2b04      	cmp	r3, #4
 8008e04:	d00b      	beq.n	8008e1e <xPortStartScheduler+0xbe>
	__asm volatile
 8008e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e0a:	f383 8811 	msr	BASEPRI, r3
 8008e0e:	f3bf 8f6f 	isb	sy
 8008e12:	f3bf 8f4f 	dsb	sy
 8008e16:	60bb      	str	r3, [r7, #8]
}
 8008e18:	bf00      	nop
 8008e1a:	bf00      	nop
 8008e1c:	e7fd      	b.n	8008e1a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008e1e:	4b1e      	ldr	r3, [pc, #120]	@ (8008e98 <xPortStartScheduler+0x138>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	021b      	lsls	r3, r3, #8
 8008e24:	4a1c      	ldr	r2, [pc, #112]	@ (8008e98 <xPortStartScheduler+0x138>)
 8008e26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008e28:	4b1b      	ldr	r3, [pc, #108]	@ (8008e98 <xPortStartScheduler+0x138>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008e30:	4a19      	ldr	r2, [pc, #100]	@ (8008e98 <xPortStartScheduler+0x138>)
 8008e32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	b2da      	uxtb	r2, r3
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008e3c:	4b17      	ldr	r3, [pc, #92]	@ (8008e9c <xPortStartScheduler+0x13c>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a16      	ldr	r2, [pc, #88]	@ (8008e9c <xPortStartScheduler+0x13c>)
 8008e42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008e46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008e48:	4b14      	ldr	r3, [pc, #80]	@ (8008e9c <xPortStartScheduler+0x13c>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a13      	ldr	r2, [pc, #76]	@ (8008e9c <xPortStartScheduler+0x13c>)
 8008e4e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008e52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008e54:	f000 f8da 	bl	800900c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008e58:	4b11      	ldr	r3, [pc, #68]	@ (8008ea0 <xPortStartScheduler+0x140>)
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008e5e:	f000 f8f9 	bl	8009054 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008e62:	4b10      	ldr	r3, [pc, #64]	@ (8008ea4 <xPortStartScheduler+0x144>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4a0f      	ldr	r2, [pc, #60]	@ (8008ea4 <xPortStartScheduler+0x144>)
 8008e68:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008e6c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008e6e:	f7ff ff63 	bl	8008d38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008e72:	f7ff f809 	bl	8007e88 <vTaskSwitchContext>
	prvTaskExitError();
 8008e76:	f7ff ff19 	bl	8008cac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008e7a:	2300      	movs	r3, #0
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3718      	adds	r7, #24
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}
 8008e84:	e000ed00 	.word	0xe000ed00
 8008e88:	410fc271 	.word	0x410fc271
 8008e8c:	410fc270 	.word	0x410fc270
 8008e90:	e000e400 	.word	0xe000e400
 8008e94:	200013a0 	.word	0x200013a0
 8008e98:	200013a4 	.word	0x200013a4
 8008e9c:	e000ed20 	.word	0xe000ed20
 8008ea0:	2000006c 	.word	0x2000006c
 8008ea4:	e000ef34 	.word	0xe000ef34

08008ea8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b083      	sub	sp, #12
 8008eac:	af00      	add	r7, sp, #0
	__asm volatile
 8008eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eb2:	f383 8811 	msr	BASEPRI, r3
 8008eb6:	f3bf 8f6f 	isb	sy
 8008eba:	f3bf 8f4f 	dsb	sy
 8008ebe:	607b      	str	r3, [r7, #4]
}
 8008ec0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008ec2:	4b10      	ldr	r3, [pc, #64]	@ (8008f04 <vPortEnterCritical+0x5c>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	3301      	adds	r3, #1
 8008ec8:	4a0e      	ldr	r2, [pc, #56]	@ (8008f04 <vPortEnterCritical+0x5c>)
 8008eca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008ecc:	4b0d      	ldr	r3, [pc, #52]	@ (8008f04 <vPortEnterCritical+0x5c>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d110      	bne.n	8008ef6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8008f08 <vPortEnterCritical+0x60>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	b2db      	uxtb	r3, r3
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d00b      	beq.n	8008ef6 <vPortEnterCritical+0x4e>
	__asm volatile
 8008ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ee2:	f383 8811 	msr	BASEPRI, r3
 8008ee6:	f3bf 8f6f 	isb	sy
 8008eea:	f3bf 8f4f 	dsb	sy
 8008eee:	603b      	str	r3, [r7, #0]
}
 8008ef0:	bf00      	nop
 8008ef2:	bf00      	nop
 8008ef4:	e7fd      	b.n	8008ef2 <vPortEnterCritical+0x4a>
	}
}
 8008ef6:	bf00      	nop
 8008ef8:	370c      	adds	r7, #12
 8008efa:	46bd      	mov	sp, r7
 8008efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f00:	4770      	bx	lr
 8008f02:	bf00      	nop
 8008f04:	2000006c 	.word	0x2000006c
 8008f08:	e000ed04 	.word	0xe000ed04

08008f0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b083      	sub	sp, #12
 8008f10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008f12:	4b12      	ldr	r3, [pc, #72]	@ (8008f5c <vPortExitCritical+0x50>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d10b      	bne.n	8008f32 <vPortExitCritical+0x26>
	__asm volatile
 8008f1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f1e:	f383 8811 	msr	BASEPRI, r3
 8008f22:	f3bf 8f6f 	isb	sy
 8008f26:	f3bf 8f4f 	dsb	sy
 8008f2a:	607b      	str	r3, [r7, #4]
}
 8008f2c:	bf00      	nop
 8008f2e:	bf00      	nop
 8008f30:	e7fd      	b.n	8008f2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008f32:	4b0a      	ldr	r3, [pc, #40]	@ (8008f5c <vPortExitCritical+0x50>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	3b01      	subs	r3, #1
 8008f38:	4a08      	ldr	r2, [pc, #32]	@ (8008f5c <vPortExitCritical+0x50>)
 8008f3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008f3c:	4b07      	ldr	r3, [pc, #28]	@ (8008f5c <vPortExitCritical+0x50>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d105      	bne.n	8008f50 <vPortExitCritical+0x44>
 8008f44:	2300      	movs	r3, #0
 8008f46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	f383 8811 	msr	BASEPRI, r3
}
 8008f4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008f50:	bf00      	nop
 8008f52:	370c      	adds	r7, #12
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr
 8008f5c:	2000006c 	.word	0x2000006c

08008f60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008f60:	f3ef 8009 	mrs	r0, PSP
 8008f64:	f3bf 8f6f 	isb	sy
 8008f68:	4b15      	ldr	r3, [pc, #84]	@ (8008fc0 <pxCurrentTCBConst>)
 8008f6a:	681a      	ldr	r2, [r3, #0]
 8008f6c:	f01e 0f10 	tst.w	lr, #16
 8008f70:	bf08      	it	eq
 8008f72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008f76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f7a:	6010      	str	r0, [r2, #0]
 8008f7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008f80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008f84:	f380 8811 	msr	BASEPRI, r0
 8008f88:	f3bf 8f4f 	dsb	sy
 8008f8c:	f3bf 8f6f 	isb	sy
 8008f90:	f7fe ff7a 	bl	8007e88 <vTaskSwitchContext>
 8008f94:	f04f 0000 	mov.w	r0, #0
 8008f98:	f380 8811 	msr	BASEPRI, r0
 8008f9c:	bc09      	pop	{r0, r3}
 8008f9e:	6819      	ldr	r1, [r3, #0]
 8008fa0:	6808      	ldr	r0, [r1, #0]
 8008fa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fa6:	f01e 0f10 	tst.w	lr, #16
 8008faa:	bf08      	it	eq
 8008fac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008fb0:	f380 8809 	msr	PSP, r0
 8008fb4:	f3bf 8f6f 	isb	sy
 8008fb8:	4770      	bx	lr
 8008fba:	bf00      	nop
 8008fbc:	f3af 8000 	nop.w

08008fc0 <pxCurrentTCBConst>:
 8008fc0:	20000d74 	.word	0x20000d74
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008fc4:	bf00      	nop
 8008fc6:	bf00      	nop

08008fc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b082      	sub	sp, #8
 8008fcc:	af00      	add	r7, sp, #0
	__asm volatile
 8008fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fd2:	f383 8811 	msr	BASEPRI, r3
 8008fd6:	f3bf 8f6f 	isb	sy
 8008fda:	f3bf 8f4f 	dsb	sy
 8008fde:	607b      	str	r3, [r7, #4]
}
 8008fe0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008fe2:	f7fe fe97 	bl	8007d14 <xTaskIncrementTick>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d003      	beq.n	8008ff4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008fec:	4b06      	ldr	r3, [pc, #24]	@ (8009008 <xPortSysTickHandler+0x40>)
 8008fee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ff2:	601a      	str	r2, [r3, #0]
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	f383 8811 	msr	BASEPRI, r3
}
 8008ffe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009000:	bf00      	nop
 8009002:	3708      	adds	r7, #8
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}
 8009008:	e000ed04 	.word	0xe000ed04

0800900c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800900c:	b480      	push	{r7}
 800900e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009010:	4b0b      	ldr	r3, [pc, #44]	@ (8009040 <vPortSetupTimerInterrupt+0x34>)
 8009012:	2200      	movs	r2, #0
 8009014:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009016:	4b0b      	ldr	r3, [pc, #44]	@ (8009044 <vPortSetupTimerInterrupt+0x38>)
 8009018:	2200      	movs	r2, #0
 800901a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800901c:	4b0a      	ldr	r3, [pc, #40]	@ (8009048 <vPortSetupTimerInterrupt+0x3c>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4a0a      	ldr	r2, [pc, #40]	@ (800904c <vPortSetupTimerInterrupt+0x40>)
 8009022:	fba2 2303 	umull	r2, r3, r2, r3
 8009026:	099b      	lsrs	r3, r3, #6
 8009028:	4a09      	ldr	r2, [pc, #36]	@ (8009050 <vPortSetupTimerInterrupt+0x44>)
 800902a:	3b01      	subs	r3, #1
 800902c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800902e:	4b04      	ldr	r3, [pc, #16]	@ (8009040 <vPortSetupTimerInterrupt+0x34>)
 8009030:	2207      	movs	r2, #7
 8009032:	601a      	str	r2, [r3, #0]
}
 8009034:	bf00      	nop
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr
 800903e:	bf00      	nop
 8009040:	e000e010 	.word	0xe000e010
 8009044:	e000e018 	.word	0xe000e018
 8009048:	20000060 	.word	0x20000060
 800904c:	10624dd3 	.word	0x10624dd3
 8009050:	e000e014 	.word	0xe000e014

08009054 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009054:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009064 <vPortEnableVFP+0x10>
 8009058:	6801      	ldr	r1, [r0, #0]
 800905a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800905e:	6001      	str	r1, [r0, #0]
 8009060:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009062:	bf00      	nop
 8009064:	e000ed88 	.word	0xe000ed88

08009068 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009068:	b480      	push	{r7}
 800906a:	b085      	sub	sp, #20
 800906c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800906e:	f3ef 8305 	mrs	r3, IPSR
 8009072:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2b0f      	cmp	r3, #15
 8009078:	d915      	bls.n	80090a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800907a:	4a18      	ldr	r2, [pc, #96]	@ (80090dc <vPortValidateInterruptPriority+0x74>)
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	4413      	add	r3, r2
 8009080:	781b      	ldrb	r3, [r3, #0]
 8009082:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009084:	4b16      	ldr	r3, [pc, #88]	@ (80090e0 <vPortValidateInterruptPriority+0x78>)
 8009086:	781b      	ldrb	r3, [r3, #0]
 8009088:	7afa      	ldrb	r2, [r7, #11]
 800908a:	429a      	cmp	r2, r3
 800908c:	d20b      	bcs.n	80090a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800908e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009092:	f383 8811 	msr	BASEPRI, r3
 8009096:	f3bf 8f6f 	isb	sy
 800909a:	f3bf 8f4f 	dsb	sy
 800909e:	607b      	str	r3, [r7, #4]
}
 80090a0:	bf00      	nop
 80090a2:	bf00      	nop
 80090a4:	e7fd      	b.n	80090a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80090a6:	4b0f      	ldr	r3, [pc, #60]	@ (80090e4 <vPortValidateInterruptPriority+0x7c>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80090ae:	4b0e      	ldr	r3, [pc, #56]	@ (80090e8 <vPortValidateInterruptPriority+0x80>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d90b      	bls.n	80090ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80090b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090ba:	f383 8811 	msr	BASEPRI, r3
 80090be:	f3bf 8f6f 	isb	sy
 80090c2:	f3bf 8f4f 	dsb	sy
 80090c6:	603b      	str	r3, [r7, #0]
}
 80090c8:	bf00      	nop
 80090ca:	bf00      	nop
 80090cc:	e7fd      	b.n	80090ca <vPortValidateInterruptPriority+0x62>
	}
 80090ce:	bf00      	nop
 80090d0:	3714      	adds	r7, #20
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr
 80090da:	bf00      	nop
 80090dc:	e000e3f0 	.word	0xe000e3f0
 80090e0:	200013a0 	.word	0x200013a0
 80090e4:	e000ed0c 	.word	0xe000ed0c
 80090e8:	200013a4 	.word	0x200013a4

080090ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b08a      	sub	sp, #40	@ 0x28
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80090f4:	2300      	movs	r3, #0
 80090f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80090f8:	f7fe fd50 	bl	8007b9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80090fc:	4b5c      	ldr	r3, [pc, #368]	@ (8009270 <pvPortMalloc+0x184>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d101      	bne.n	8009108 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009104:	f000 f930 	bl	8009368 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009108:	4b5a      	ldr	r3, [pc, #360]	@ (8009274 <pvPortMalloc+0x188>)
 800910a:	681a      	ldr	r2, [r3, #0]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	4013      	ands	r3, r2
 8009110:	2b00      	cmp	r3, #0
 8009112:	f040 8095 	bne.w	8009240 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d01e      	beq.n	800915a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800911c:	2208      	movs	r2, #8
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	4413      	add	r3, r2
 8009122:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f003 0307 	and.w	r3, r3, #7
 800912a:	2b00      	cmp	r3, #0
 800912c:	d015      	beq.n	800915a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f023 0307 	bic.w	r3, r3, #7
 8009134:	3308      	adds	r3, #8
 8009136:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f003 0307 	and.w	r3, r3, #7
 800913e:	2b00      	cmp	r3, #0
 8009140:	d00b      	beq.n	800915a <pvPortMalloc+0x6e>
	__asm volatile
 8009142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009146:	f383 8811 	msr	BASEPRI, r3
 800914a:	f3bf 8f6f 	isb	sy
 800914e:	f3bf 8f4f 	dsb	sy
 8009152:	617b      	str	r3, [r7, #20]
}
 8009154:	bf00      	nop
 8009156:	bf00      	nop
 8009158:	e7fd      	b.n	8009156 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d06f      	beq.n	8009240 <pvPortMalloc+0x154>
 8009160:	4b45      	ldr	r3, [pc, #276]	@ (8009278 <pvPortMalloc+0x18c>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	687a      	ldr	r2, [r7, #4]
 8009166:	429a      	cmp	r2, r3
 8009168:	d86a      	bhi.n	8009240 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800916a:	4b44      	ldr	r3, [pc, #272]	@ (800927c <pvPortMalloc+0x190>)
 800916c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800916e:	4b43      	ldr	r3, [pc, #268]	@ (800927c <pvPortMalloc+0x190>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009174:	e004      	b.n	8009180 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009178:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800917a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	429a      	cmp	r2, r3
 8009188:	d903      	bls.n	8009192 <pvPortMalloc+0xa6>
 800918a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d1f1      	bne.n	8009176 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009192:	4b37      	ldr	r3, [pc, #220]	@ (8009270 <pvPortMalloc+0x184>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009198:	429a      	cmp	r2, r3
 800919a:	d051      	beq.n	8009240 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800919c:	6a3b      	ldr	r3, [r7, #32]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	2208      	movs	r2, #8
 80091a2:	4413      	add	r3, r2
 80091a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80091a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091a8:	681a      	ldr	r2, [r3, #0]
 80091aa:	6a3b      	ldr	r3, [r7, #32]
 80091ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80091ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b0:	685a      	ldr	r2, [r3, #4]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	1ad2      	subs	r2, r2, r3
 80091b6:	2308      	movs	r3, #8
 80091b8:	005b      	lsls	r3, r3, #1
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d920      	bls.n	8009200 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80091be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	4413      	add	r3, r2
 80091c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80091c6:	69bb      	ldr	r3, [r7, #24]
 80091c8:	f003 0307 	and.w	r3, r3, #7
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d00b      	beq.n	80091e8 <pvPortMalloc+0xfc>
	__asm volatile
 80091d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091d4:	f383 8811 	msr	BASEPRI, r3
 80091d8:	f3bf 8f6f 	isb	sy
 80091dc:	f3bf 8f4f 	dsb	sy
 80091e0:	613b      	str	r3, [r7, #16]
}
 80091e2:	bf00      	nop
 80091e4:	bf00      	nop
 80091e6:	e7fd      	b.n	80091e4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80091e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ea:	685a      	ldr	r2, [r3, #4]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	1ad2      	subs	r2, r2, r3
 80091f0:	69bb      	ldr	r3, [r7, #24]
 80091f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80091f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091f6:	687a      	ldr	r2, [r7, #4]
 80091f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80091fa:	69b8      	ldr	r0, [r7, #24]
 80091fc:	f000 f916 	bl	800942c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009200:	4b1d      	ldr	r3, [pc, #116]	@ (8009278 <pvPortMalloc+0x18c>)
 8009202:	681a      	ldr	r2, [r3, #0]
 8009204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009206:	685b      	ldr	r3, [r3, #4]
 8009208:	1ad3      	subs	r3, r2, r3
 800920a:	4a1b      	ldr	r2, [pc, #108]	@ (8009278 <pvPortMalloc+0x18c>)
 800920c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800920e:	4b1a      	ldr	r3, [pc, #104]	@ (8009278 <pvPortMalloc+0x18c>)
 8009210:	681a      	ldr	r2, [r3, #0]
 8009212:	4b1b      	ldr	r3, [pc, #108]	@ (8009280 <pvPortMalloc+0x194>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	429a      	cmp	r2, r3
 8009218:	d203      	bcs.n	8009222 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800921a:	4b17      	ldr	r3, [pc, #92]	@ (8009278 <pvPortMalloc+0x18c>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4a18      	ldr	r2, [pc, #96]	@ (8009280 <pvPortMalloc+0x194>)
 8009220:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009224:	685a      	ldr	r2, [r3, #4]
 8009226:	4b13      	ldr	r3, [pc, #76]	@ (8009274 <pvPortMalloc+0x188>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	431a      	orrs	r2, r3
 800922c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800922e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009232:	2200      	movs	r2, #0
 8009234:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009236:	4b13      	ldr	r3, [pc, #76]	@ (8009284 <pvPortMalloc+0x198>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	3301      	adds	r3, #1
 800923c:	4a11      	ldr	r2, [pc, #68]	@ (8009284 <pvPortMalloc+0x198>)
 800923e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009240:	f7fe fcba 	bl	8007bb8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009244:	69fb      	ldr	r3, [r7, #28]
 8009246:	f003 0307 	and.w	r3, r3, #7
 800924a:	2b00      	cmp	r3, #0
 800924c:	d00b      	beq.n	8009266 <pvPortMalloc+0x17a>
	__asm volatile
 800924e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009252:	f383 8811 	msr	BASEPRI, r3
 8009256:	f3bf 8f6f 	isb	sy
 800925a:	f3bf 8f4f 	dsb	sy
 800925e:	60fb      	str	r3, [r7, #12]
}
 8009260:	bf00      	nop
 8009262:	bf00      	nop
 8009264:	e7fd      	b.n	8009262 <pvPortMalloc+0x176>
	return pvReturn;
 8009266:	69fb      	ldr	r3, [r7, #28]
}
 8009268:	4618      	mov	r0, r3
 800926a:	3728      	adds	r7, #40	@ 0x28
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}
 8009270:	2000dbb0 	.word	0x2000dbb0
 8009274:	2000dbc4 	.word	0x2000dbc4
 8009278:	2000dbb4 	.word	0x2000dbb4
 800927c:	2000dba8 	.word	0x2000dba8
 8009280:	2000dbb8 	.word	0x2000dbb8
 8009284:	2000dbbc 	.word	0x2000dbbc

08009288 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b086      	sub	sp, #24
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d04f      	beq.n	800933a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800929a:	2308      	movs	r3, #8
 800929c:	425b      	negs	r3, r3
 800929e:	697a      	ldr	r2, [r7, #20]
 80092a0:	4413      	add	r3, r2
 80092a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	685a      	ldr	r2, [r3, #4]
 80092ac:	4b25      	ldr	r3, [pc, #148]	@ (8009344 <vPortFree+0xbc>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4013      	ands	r3, r2
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d10b      	bne.n	80092ce <vPortFree+0x46>
	__asm volatile
 80092b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092ba:	f383 8811 	msr	BASEPRI, r3
 80092be:	f3bf 8f6f 	isb	sy
 80092c2:	f3bf 8f4f 	dsb	sy
 80092c6:	60fb      	str	r3, [r7, #12]
}
 80092c8:	bf00      	nop
 80092ca:	bf00      	nop
 80092cc:	e7fd      	b.n	80092ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d00b      	beq.n	80092ee <vPortFree+0x66>
	__asm volatile
 80092d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092da:	f383 8811 	msr	BASEPRI, r3
 80092de:	f3bf 8f6f 	isb	sy
 80092e2:	f3bf 8f4f 	dsb	sy
 80092e6:	60bb      	str	r3, [r7, #8]
}
 80092e8:	bf00      	nop
 80092ea:	bf00      	nop
 80092ec:	e7fd      	b.n	80092ea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	685a      	ldr	r2, [r3, #4]
 80092f2:	4b14      	ldr	r3, [pc, #80]	@ (8009344 <vPortFree+0xbc>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	4013      	ands	r3, r2
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d01e      	beq.n	800933a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d11a      	bne.n	800933a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	685a      	ldr	r2, [r3, #4]
 8009308:	4b0e      	ldr	r3, [pc, #56]	@ (8009344 <vPortFree+0xbc>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	43db      	mvns	r3, r3
 800930e:	401a      	ands	r2, r3
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009314:	f7fe fc42 	bl	8007b9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	685a      	ldr	r2, [r3, #4]
 800931c:	4b0a      	ldr	r3, [pc, #40]	@ (8009348 <vPortFree+0xc0>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4413      	add	r3, r2
 8009322:	4a09      	ldr	r2, [pc, #36]	@ (8009348 <vPortFree+0xc0>)
 8009324:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009326:	6938      	ldr	r0, [r7, #16]
 8009328:	f000 f880 	bl	800942c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800932c:	4b07      	ldr	r3, [pc, #28]	@ (800934c <vPortFree+0xc4>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	3301      	adds	r3, #1
 8009332:	4a06      	ldr	r2, [pc, #24]	@ (800934c <vPortFree+0xc4>)
 8009334:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009336:	f7fe fc3f 	bl	8007bb8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800933a:	bf00      	nop
 800933c:	3718      	adds	r7, #24
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}
 8009342:	bf00      	nop
 8009344:	2000dbc4 	.word	0x2000dbc4
 8009348:	2000dbb4 	.word	0x2000dbb4
 800934c:	2000dbc0 	.word	0x2000dbc0

08009350 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8009350:	b480      	push	{r7}
 8009352:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8009354:	4b03      	ldr	r3, [pc, #12]	@ (8009364 <xPortGetFreeHeapSize+0x14>)
 8009356:	681b      	ldr	r3, [r3, #0]
}
 8009358:	4618      	mov	r0, r3
 800935a:	46bd      	mov	sp, r7
 800935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009360:	4770      	bx	lr
 8009362:	bf00      	nop
 8009364:	2000dbb4 	.word	0x2000dbb4

08009368 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009368:	b480      	push	{r7}
 800936a:	b085      	sub	sp, #20
 800936c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800936e:	f44f 4348 	mov.w	r3, #51200	@ 0xc800
 8009372:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009374:	4b27      	ldr	r3, [pc, #156]	@ (8009414 <prvHeapInit+0xac>)
 8009376:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f003 0307 	and.w	r3, r3, #7
 800937e:	2b00      	cmp	r3, #0
 8009380:	d00c      	beq.n	800939c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	3307      	adds	r3, #7
 8009386:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	f023 0307 	bic.w	r3, r3, #7
 800938e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009390:	68ba      	ldr	r2, [r7, #8]
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	1ad3      	subs	r3, r2, r3
 8009396:	4a1f      	ldr	r2, [pc, #124]	@ (8009414 <prvHeapInit+0xac>)
 8009398:	4413      	add	r3, r2
 800939a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80093a0:	4a1d      	ldr	r2, [pc, #116]	@ (8009418 <prvHeapInit+0xb0>)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80093a6:	4b1c      	ldr	r3, [pc, #112]	@ (8009418 <prvHeapInit+0xb0>)
 80093a8:	2200      	movs	r2, #0
 80093aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	68ba      	ldr	r2, [r7, #8]
 80093b0:	4413      	add	r3, r2
 80093b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80093b4:	2208      	movs	r2, #8
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	1a9b      	subs	r3, r3, r2
 80093ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	f023 0307 	bic.w	r3, r3, #7
 80093c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	4a15      	ldr	r2, [pc, #84]	@ (800941c <prvHeapInit+0xb4>)
 80093c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80093ca:	4b14      	ldr	r3, [pc, #80]	@ (800941c <prvHeapInit+0xb4>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	2200      	movs	r2, #0
 80093d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80093d2:	4b12      	ldr	r3, [pc, #72]	@ (800941c <prvHeapInit+0xb4>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	2200      	movs	r2, #0
 80093d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	68fa      	ldr	r2, [r7, #12]
 80093e2:	1ad2      	subs	r2, r2, r3
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80093e8:	4b0c      	ldr	r3, [pc, #48]	@ (800941c <prvHeapInit+0xb4>)
 80093ea:	681a      	ldr	r2, [r3, #0]
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	4a0a      	ldr	r2, [pc, #40]	@ (8009420 <prvHeapInit+0xb8>)
 80093f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	685b      	ldr	r3, [r3, #4]
 80093fc:	4a09      	ldr	r2, [pc, #36]	@ (8009424 <prvHeapInit+0xbc>)
 80093fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009400:	4b09      	ldr	r3, [pc, #36]	@ (8009428 <prvHeapInit+0xc0>)
 8009402:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009406:	601a      	str	r2, [r3, #0]
}
 8009408:	bf00      	nop
 800940a:	3714      	adds	r7, #20
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr
 8009414:	200013a8 	.word	0x200013a8
 8009418:	2000dba8 	.word	0x2000dba8
 800941c:	2000dbb0 	.word	0x2000dbb0
 8009420:	2000dbb8 	.word	0x2000dbb8
 8009424:	2000dbb4 	.word	0x2000dbb4
 8009428:	2000dbc4 	.word	0x2000dbc4

0800942c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800942c:	b480      	push	{r7}
 800942e:	b085      	sub	sp, #20
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009434:	4b28      	ldr	r3, [pc, #160]	@ (80094d8 <prvInsertBlockIntoFreeList+0xac>)
 8009436:	60fb      	str	r3, [r7, #12]
 8009438:	e002      	b.n	8009440 <prvInsertBlockIntoFreeList+0x14>
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	60fb      	str	r3, [r7, #12]
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	687a      	ldr	r2, [r7, #4]
 8009446:	429a      	cmp	r2, r3
 8009448:	d8f7      	bhi.n	800943a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	68ba      	ldr	r2, [r7, #8]
 8009454:	4413      	add	r3, r2
 8009456:	687a      	ldr	r2, [r7, #4]
 8009458:	429a      	cmp	r2, r3
 800945a:	d108      	bne.n	800946e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	685a      	ldr	r2, [r3, #4]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	441a      	add	r2, r3
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	68ba      	ldr	r2, [r7, #8]
 8009478:	441a      	add	r2, r3
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	429a      	cmp	r2, r3
 8009480:	d118      	bne.n	80094b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681a      	ldr	r2, [r3, #0]
 8009486:	4b15      	ldr	r3, [pc, #84]	@ (80094dc <prvInsertBlockIntoFreeList+0xb0>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	429a      	cmp	r2, r3
 800948c:	d00d      	beq.n	80094aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	685a      	ldr	r2, [r3, #4]
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	685b      	ldr	r3, [r3, #4]
 8009498:	441a      	add	r2, r3
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	681a      	ldr	r2, [r3, #0]
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	601a      	str	r2, [r3, #0]
 80094a8:	e008      	b.n	80094bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80094aa:	4b0c      	ldr	r3, [pc, #48]	@ (80094dc <prvInsertBlockIntoFreeList+0xb0>)
 80094ac:	681a      	ldr	r2, [r3, #0]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	601a      	str	r2, [r3, #0]
 80094b2:	e003      	b.n	80094bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681a      	ldr	r2, [r3, #0]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80094bc:	68fa      	ldr	r2, [r7, #12]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d002      	beq.n	80094ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	687a      	ldr	r2, [r7, #4]
 80094c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094ca:	bf00      	nop
 80094cc:	3714      	adds	r7, #20
 80094ce:	46bd      	mov	sp, r7
 80094d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d4:	4770      	bx	lr
 80094d6:	bf00      	nop
 80094d8:	2000dba8 	.word	0x2000dba8
 80094dc:	2000dbb0 	.word	0x2000dbb0

080094e0 <__NVIC_EnableIRQ>:
{
 80094e0:	b480      	push	{r7}
 80094e2:	b083      	sub	sp, #12
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	4603      	mov	r3, r0
 80094e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80094ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	db0b      	blt.n	800950a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80094f2:	79fb      	ldrb	r3, [r7, #7]
 80094f4:	f003 021f 	and.w	r2, r3, #31
 80094f8:	4907      	ldr	r1, [pc, #28]	@ (8009518 <__NVIC_EnableIRQ+0x38>)
 80094fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80094fe:	095b      	lsrs	r3, r3, #5
 8009500:	2001      	movs	r0, #1
 8009502:	fa00 f202 	lsl.w	r2, r0, r2
 8009506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800950a:	bf00      	nop
 800950c:	370c      	adds	r7, #12
 800950e:	46bd      	mov	sp, r7
 8009510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009514:	4770      	bx	lr
 8009516:	bf00      	nop
 8009518:	e000e100 	.word	0xe000e100

0800951c <__NVIC_SetPriority>:
{
 800951c:	b480      	push	{r7}
 800951e:	b083      	sub	sp, #12
 8009520:	af00      	add	r7, sp, #0
 8009522:	4603      	mov	r3, r0
 8009524:	6039      	str	r1, [r7, #0]
 8009526:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800952c:	2b00      	cmp	r3, #0
 800952e:	db0a      	blt.n	8009546 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	b2da      	uxtb	r2, r3
 8009534:	490c      	ldr	r1, [pc, #48]	@ (8009568 <__NVIC_SetPriority+0x4c>)
 8009536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800953a:	0112      	lsls	r2, r2, #4
 800953c:	b2d2      	uxtb	r2, r2
 800953e:	440b      	add	r3, r1
 8009540:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009544:	e00a      	b.n	800955c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	b2da      	uxtb	r2, r3
 800954a:	4908      	ldr	r1, [pc, #32]	@ (800956c <__NVIC_SetPriority+0x50>)
 800954c:	79fb      	ldrb	r3, [r7, #7]
 800954e:	f003 030f 	and.w	r3, r3, #15
 8009552:	3b04      	subs	r3, #4
 8009554:	0112      	lsls	r2, r2, #4
 8009556:	b2d2      	uxtb	r2, r2
 8009558:	440b      	add	r3, r1
 800955a:	761a      	strb	r2, [r3, #24]
}
 800955c:	bf00      	nop
 800955e:	370c      	adds	r7, #12
 8009560:	46bd      	mov	sp, r7
 8009562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009566:	4770      	bx	lr
 8009568:	e000e100 	.word	0xe000e100
 800956c:	e000ed00 	.word	0xe000ed00

08009570 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 8009570:	b480      	push	{r7}
 8009572:	b083      	sub	sp, #12
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009580:	2b40      	cmp	r3, #64	@ 0x40
 8009582:	bf0c      	ite	eq
 8009584:	2301      	moveq	r3, #1
 8009586:	2300      	movne	r3, #0
 8009588:	b2db      	uxtb	r3, r3
}
 800958a:	4618      	mov	r0, r3
 800958c:	370c      	adds	r7, #12
 800958e:	46bd      	mov	sp, r7
 8009590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009594:	4770      	bx	lr

08009596 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8009596:	b480      	push	{r7}
 8009598:	b083      	sub	sp, #12
 800959a:	af00      	add	r7, sp, #0
 800959c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095a6:	2b80      	cmp	r3, #128	@ 0x80
 80095a8:	bf0c      	ite	eq
 80095aa:	2301      	moveq	r3, #1
 80095ac:	2300      	movne	r3, #0
 80095ae:	b2db      	uxtb	r3, r3
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	370c      	adds	r7, #12
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr

080095bc <LL_USART_ClearFlag_TC>:
  * @rmtoll SR           TC            LL_USART_ClearFlag_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
 80095bc:	b480      	push	{r7}
 80095be:	b083      	sub	sp, #12
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80095ca:	601a      	str	r2, [r3, #0]
}
 80095cc:	bf00      	nop
 80095ce:	370c      	adds	r7, #12
 80095d0:	46bd      	mov	sp, r7
 80095d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d6:	4770      	bx	lr

080095d8 <LL_USART_EnableIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_EnableIT_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TC(USART_TypeDef *USARTx)
{
 80095d8:	b480      	push	{r7}
 80095da:	b089      	sub	sp, #36	@ 0x24
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	330c      	adds	r3, #12
 80095e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	e853 3f00 	ldrex	r3, [r3]
 80095ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095f4:	61fb      	str	r3, [r7, #28]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	330c      	adds	r3, #12
 80095fa:	69fa      	ldr	r2, [r7, #28]
 80095fc:	61ba      	str	r2, [r7, #24]
 80095fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009600:	6979      	ldr	r1, [r7, #20]
 8009602:	69ba      	ldr	r2, [r7, #24]
 8009604:	e841 2300 	strex	r3, r2, [r1]
 8009608:	613b      	str	r3, [r7, #16]
   return(result);
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d1e7      	bne.n	80095e0 <LL_USART_EnableIT_TC+0x8>
}
 8009610:	bf00      	nop
 8009612:	bf00      	nop
 8009614:	3724      	adds	r7, #36	@ 0x24
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr

0800961e <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 800961e:	b480      	push	{r7}
 8009620:	b089      	sub	sp, #36	@ 0x24
 8009622:	af00      	add	r7, sp, #0
 8009624:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	330c      	adds	r3, #12
 800962a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	e853 3f00 	ldrex	r3, [r3]
 8009632:	60bb      	str	r3, [r7, #8]
   return(result);
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800963a:	61fb      	str	r3, [r7, #28]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	330c      	adds	r3, #12
 8009640:	69fa      	ldr	r2, [r7, #28]
 8009642:	61ba      	str	r2, [r7, #24]
 8009644:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009646:	6979      	ldr	r1, [r7, #20]
 8009648:	69ba      	ldr	r2, [r7, #24]
 800964a:	e841 2300 	strex	r3, r2, [r1]
 800964e:	613b      	str	r3, [r7, #16]
   return(result);
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d1e7      	bne.n	8009626 <LL_USART_EnableIT_TXE+0x8>
}
 8009656:	bf00      	nop
 8009658:	bf00      	nop
 800965a:	3724      	adds	r7, #36	@ 0x24
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr

08009664 <LL_USART_DisableIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_DisableIT_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TC(USART_TypeDef *USARTx)
{
 8009664:	b480      	push	{r7}
 8009666:	b089      	sub	sp, #36	@ 0x24
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	330c      	adds	r3, #12
 8009670:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	e853 3f00 	ldrex	r3, [r3]
 8009678:	60bb      	str	r3, [r7, #8]
   return(result);
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009680:	61fb      	str	r3, [r7, #28]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	330c      	adds	r3, #12
 8009686:	69fa      	ldr	r2, [r7, #28]
 8009688:	61ba      	str	r2, [r7, #24]
 800968a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800968c:	6979      	ldr	r1, [r7, #20]
 800968e:	69ba      	ldr	r2, [r7, #24]
 8009690:	e841 2300 	strex	r3, r2, [r1]
 8009694:	613b      	str	r3, [r7, #16]
   return(result);
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d1e7      	bne.n	800966c <LL_USART_DisableIT_TC+0x8>
}
 800969c:	bf00      	nop
 800969e:	bf00      	nop
 80096a0:	3724      	adds	r7, #36	@ 0x24
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr

080096aa <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 80096aa:	b480      	push	{r7}
 80096ac:	b089      	sub	sp, #36	@ 0x24
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	330c      	adds	r3, #12
 80096b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	e853 3f00 	ldrex	r3, [r3]
 80096be:	60bb      	str	r3, [r7, #8]
   return(result);
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80096c6:	61fb      	str	r3, [r7, #28]
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	330c      	adds	r3, #12
 80096cc:	69fa      	ldr	r2, [r7, #28]
 80096ce:	61ba      	str	r2, [r7, #24]
 80096d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096d2:	6979      	ldr	r1, [r7, #20]
 80096d4:	69ba      	ldr	r2, [r7, #24]
 80096d6:	e841 2300 	strex	r3, r2, [r1]
 80096da:	613b      	str	r3, [r7, #16]
   return(result);
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d1e7      	bne.n	80096b2 <LL_USART_DisableIT_TXE+0x8>
}
 80096e2:	bf00      	nop
 80096e4:	bf00      	nop
 80096e6:	3724      	adds	r7, #36	@ 0x24
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr

080096f0 <LL_USART_IsEnabledIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_IsEnabledIT_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TC(const USART_TypeDef *USARTx)
{
 80096f0:	b480      	push	{r7}
 80096f2:	b083      	sub	sp, #12
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE));
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	68db      	ldr	r3, [r3, #12]
 80096fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009700:	2b40      	cmp	r3, #64	@ 0x40
 8009702:	bf0c      	ite	eq
 8009704:	2301      	moveq	r3, #1
 8009706:	2300      	movne	r3, #0
 8009708:	b2db      	uxtb	r3, r3
}
 800970a:	4618      	mov	r0, r3
 800970c:	370c      	adds	r7, #12
 800970e:	46bd      	mov	sp, r7
 8009710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009714:	4770      	bx	lr

08009716 <LL_USART_IsEnabledIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_IsEnabledIT_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE(const USART_TypeDef *USARTx)
{
 8009716:	b480      	push	{r7}
 8009718:	b083      	sub	sp, #12
 800971a:	af00      	add	r7, sp, #0
 800971c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE));
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	68db      	ldr	r3, [r3, #12]
 8009722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009726:	2b80      	cmp	r3, #128	@ 0x80
 8009728:	bf0c      	ite	eq
 800972a:	2301      	moveq	r3, #1
 800972c:	2300      	movne	r3, #0
 800972e:	b2db      	uxtb	r3, r3
}
 8009730:	4618      	mov	r0, r3
 8009732:	370c      	adds	r7, #12
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr

0800973c <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800973c:	b480      	push	{r7}
 800973e:	b083      	sub	sp, #12
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
 8009744:	460b      	mov	r3, r1
 8009746:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8009748:	78fa      	ldrb	r2, [r7, #3]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	605a      	str	r2, [r3, #4]
}
 800974e:	bf00      	nop
 8009750:	370c      	adds	r7, #12
 8009752:	46bd      	mov	sp, r7
 8009754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009758:	4770      	bx	lr
	...

0800975c <uart_ring_buffer_init>:

/**
 * @brief Initialize ring buffer
 */
void uart_ring_buffer_init(void)
{
 800975c:	b480      	push	{r7}
 800975e:	af00      	add	r7, sp, #0
    uart_ring_buffer.head = 0;
 8009760:	4b09      	ldr	r3, [pc, #36]	@ (8009788 <uart_ring_buffer_init+0x2c>)
 8009762:	2200      	movs	r2, #0
 8009764:	f8a3 2200 	strh.w	r2, [r3, #512]	@ 0x200
    uart_ring_buffer.tail = 0;
 8009768:	4b07      	ldr	r3, [pc, #28]	@ (8009788 <uart_ring_buffer_init+0x2c>)
 800976a:	2200      	movs	r2, #0
 800976c:	f8a3 2202 	strh.w	r2, [r3, #514]	@ 0x202
    uart_ring_buffer.count = 0;
 8009770:	4b05      	ldr	r3, [pc, #20]	@ (8009788 <uart_ring_buffer_init+0x2c>)
 8009772:	2200      	movs	r2, #0
 8009774:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204
    uart_tx_busy = 0;
 8009778:	4b04      	ldr	r3, [pc, #16]	@ (800978c <uart_ring_buffer_init+0x30>)
 800977a:	2200      	movs	r2, #0
 800977c:	701a      	strb	r2, [r3, #0]
}
 800977e:	bf00      	nop
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr
 8009788:	2000dbc8 	.word	0x2000dbc8
 800978c:	2000ddce 	.word	0x2000ddce

08009790 <uart_ring_buffer_put>:
 * @param data: Pointer to data
 * @param length: Length of data
 * @return Number of bytes actually written
 */
uint8_t uart_ring_buffer_put(uint8_t* data, uint16_t length)
{
 8009790:	b480      	push	{r7}
 8009792:	b085      	sub	sp, #20
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
 8009798:	460b      	mov	r3, r1
 800979a:	807b      	strh	r3, [r7, #2]
    uint16_t written = 0;
 800979c:	2300      	movs	r3, #0
 800979e:	81fb      	strh	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 80097a0:	b672      	cpsid	i
}
 80097a2:	bf00      	nop

    // Disable interrupts briefly for atomic operation
    __disable_irq();

    for (uint16_t i = 0; i < length; i++)
 80097a4:	2300      	movs	r3, #0
 80097a6:	81bb      	strh	r3, [r7, #12]
 80097a8:	e02f      	b.n	800980a <uart_ring_buffer_put+0x7a>
    {
        // Check if buffer full
        if (uart_ring_buffer.count >= RING_BUFFER_SIZE)
 80097aa:	4b20      	ldr	r3, [pc, #128]	@ (800982c <uart_ring_buffer_put+0x9c>)
 80097ac:	f8b3 3204 	ldrh.w	r3, [r3, #516]	@ 0x204
 80097b0:	b29b      	uxth	r3, r3
 80097b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097b6:	d22d      	bcs.n	8009814 <uart_ring_buffer_put+0x84>
        {
            break; // Buffer full, stop writing
        }

        // Put byte into buffer
        uart_ring_buffer.data[uart_ring_buffer.head] = data[i];
 80097b8:	89bb      	ldrh	r3, [r7, #12]
 80097ba:	687a      	ldr	r2, [r7, #4]
 80097bc:	4413      	add	r3, r2
 80097be:	4a1b      	ldr	r2, [pc, #108]	@ (800982c <uart_ring_buffer_put+0x9c>)
 80097c0:	f8b2 2200 	ldrh.w	r2, [r2, #512]	@ 0x200
 80097c4:	b292      	uxth	r2, r2
 80097c6:	7819      	ldrb	r1, [r3, #0]
 80097c8:	4b18      	ldr	r3, [pc, #96]	@ (800982c <uart_ring_buffer_put+0x9c>)
 80097ca:	5499      	strb	r1, [r3, r2]
        uart_ring_buffer.head = (uart_ring_buffer.head + 1) % RING_BUFFER_SIZE;
 80097cc:	4b17      	ldr	r3, [pc, #92]	@ (800982c <uart_ring_buffer_put+0x9c>)
 80097ce:	f8b3 3200 	ldrh.w	r3, [r3, #512]	@ 0x200
 80097d2:	b29b      	uxth	r3, r3
 80097d4:	3301      	adds	r3, #1
 80097d6:	425a      	negs	r2, r3
 80097d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80097e0:	bf58      	it	pl
 80097e2:	4253      	negpl	r3, r2
 80097e4:	b29a      	uxth	r2, r3
 80097e6:	4b11      	ldr	r3, [pc, #68]	@ (800982c <uart_ring_buffer_put+0x9c>)
 80097e8:	f8a3 2200 	strh.w	r2, [r3, #512]	@ 0x200
        uart_ring_buffer.count++;
 80097ec:	4b0f      	ldr	r3, [pc, #60]	@ (800982c <uart_ring_buffer_put+0x9c>)
 80097ee:	f8b3 3204 	ldrh.w	r3, [r3, #516]	@ 0x204
 80097f2:	b29b      	uxth	r3, r3
 80097f4:	3301      	adds	r3, #1
 80097f6:	b29a      	uxth	r2, r3
 80097f8:	4b0c      	ldr	r3, [pc, #48]	@ (800982c <uart_ring_buffer_put+0x9c>)
 80097fa:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204
        written++;
 80097fe:	89fb      	ldrh	r3, [r7, #14]
 8009800:	3301      	adds	r3, #1
 8009802:	81fb      	strh	r3, [r7, #14]
    for (uint16_t i = 0; i < length; i++)
 8009804:	89bb      	ldrh	r3, [r7, #12]
 8009806:	3301      	adds	r3, #1
 8009808:	81bb      	strh	r3, [r7, #12]
 800980a:	89ba      	ldrh	r2, [r7, #12]
 800980c:	887b      	ldrh	r3, [r7, #2]
 800980e:	429a      	cmp	r2, r3
 8009810:	d3cb      	bcc.n	80097aa <uart_ring_buffer_put+0x1a>
 8009812:	e000      	b.n	8009816 <uart_ring_buffer_put+0x86>
            break; // Buffer full, stop writing
 8009814:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 8009816:	b662      	cpsie	i
}
 8009818:	bf00      	nop
    }

    __enable_irq();

    return written;
 800981a:	89fb      	ldrh	r3, [r7, #14]
 800981c:	b2db      	uxtb	r3, r3
}
 800981e:	4618      	mov	r0, r3
 8009820:	3714      	adds	r7, #20
 8009822:	46bd      	mov	sp, r7
 8009824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009828:	4770      	bx	lr
 800982a:	bf00      	nop
 800982c:	2000dbc8 	.word	0x2000dbc8

08009830 <uart_ring_buffer_get>:
 * @brief Get one byte from ring buffer
 * @param byte: Pointer to store the byte
 * @return 1 if success, 0 if buffer empty
 */
uint8_t uart_ring_buffer_get(uint8_t* byte)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b082      	sub	sp, #8
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
    if (uart_ring_buffer_is_empty())
 8009838:	f000 f82e 	bl	8009898 <uart_ring_buffer_is_empty>
 800983c:	4603      	mov	r3, r0
 800983e:	2b00      	cmp	r3, #0
 8009840:	d001      	beq.n	8009846 <uart_ring_buffer_get+0x16>
    {
        return 0;
 8009842:	2300      	movs	r3, #0
 8009844:	e022      	b.n	800988c <uart_ring_buffer_get+0x5c>
    }

    *byte = uart_ring_buffer.data[uart_ring_buffer.tail];
 8009846:	4b13      	ldr	r3, [pc, #76]	@ (8009894 <uart_ring_buffer_get+0x64>)
 8009848:	f8b3 3202 	ldrh.w	r3, [r3, #514]	@ 0x202
 800984c:	b29b      	uxth	r3, r3
 800984e:	461a      	mov	r2, r3
 8009850:	4b10      	ldr	r3, [pc, #64]	@ (8009894 <uart_ring_buffer_get+0x64>)
 8009852:	5c9a      	ldrb	r2, [r3, r2]
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	701a      	strb	r2, [r3, #0]
    uart_ring_buffer.tail = (uart_ring_buffer.tail + 1) % RING_BUFFER_SIZE;
 8009858:	4b0e      	ldr	r3, [pc, #56]	@ (8009894 <uart_ring_buffer_get+0x64>)
 800985a:	f8b3 3202 	ldrh.w	r3, [r3, #514]	@ 0x202
 800985e:	b29b      	uxth	r3, r3
 8009860:	3301      	adds	r3, #1
 8009862:	425a      	negs	r2, r3
 8009864:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009868:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800986c:	bf58      	it	pl
 800986e:	4253      	negpl	r3, r2
 8009870:	b29a      	uxth	r2, r3
 8009872:	4b08      	ldr	r3, [pc, #32]	@ (8009894 <uart_ring_buffer_get+0x64>)
 8009874:	f8a3 2202 	strh.w	r2, [r3, #514]	@ 0x202
    uart_ring_buffer.count--;
 8009878:	4b06      	ldr	r3, [pc, #24]	@ (8009894 <uart_ring_buffer_get+0x64>)
 800987a:	f8b3 3204 	ldrh.w	r3, [r3, #516]	@ 0x204
 800987e:	b29b      	uxth	r3, r3
 8009880:	3b01      	subs	r3, #1
 8009882:	b29a      	uxth	r2, r3
 8009884:	4b03      	ldr	r3, [pc, #12]	@ (8009894 <uart_ring_buffer_get+0x64>)
 8009886:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204

    return 1;
 800988a:	2301      	movs	r3, #1
}
 800988c:	4618      	mov	r0, r3
 800988e:	3708      	adds	r7, #8
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}
 8009894:	2000dbc8 	.word	0x2000dbc8

08009898 <uart_ring_buffer_is_empty>:

/**
 * @brief Check if ring buffer is empty
 */
uint8_t uart_ring_buffer_is_empty(void)
{
 8009898:	b480      	push	{r7}
 800989a:	af00      	add	r7, sp, #0
    return (uart_ring_buffer.count == 0);
 800989c:	4b06      	ldr	r3, [pc, #24]	@ (80098b8 <uart_ring_buffer_is_empty+0x20>)
 800989e:	f8b3 3204 	ldrh.w	r3, [r3, #516]	@ 0x204
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	bf0c      	ite	eq
 80098a8:	2301      	moveq	r3, #1
 80098aa:	2300      	movne	r3, #0
 80098ac:	b2db      	uxtb	r3, r3
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr
 80098b8:	2000dbc8 	.word	0x2000dbc8

080098bc <task_debug_logging>:
/**
 * @brief Task for processing debug logging
 * Call this in main loop
 */
void task_debug_logging(void)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	af00      	add	r7, sp, #0
    // If UART not busy and buffer has data, start transmission
    if (!uart_tx_busy && !uart_ring_buffer_is_empty())
 80098c0:	4b06      	ldr	r3, [pc, #24]	@ (80098dc <task_debug_logging+0x20>)
 80098c2:	781b      	ldrb	r3, [r3, #0]
 80098c4:	b2db      	uxtb	r3, r3
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d106      	bne.n	80098d8 <task_debug_logging+0x1c>
 80098ca:	f7ff ffe5 	bl	8009898 <uart_ring_buffer_is_empty>
 80098ce:	4603      	mov	r3, r0
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d101      	bne.n	80098d8 <task_debug_logging+0x1c>
    {
        uart_transmit_IT_start();
 80098d4:	f000 f804 	bl	80098e0 <uart_transmit_IT_start>
    }
}
 80098d8:	bf00      	nop
 80098da:	bd80      	pop	{r7, pc}
 80098dc:	2000ddce 	.word	0x2000ddce

080098e0 <uart_transmit_IT_start>:

/**
 * @brief Start UART transmission
 */
void uart_transmit_IT_start(void)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b082      	sub	sp, #8
 80098e4:	af00      	add	r7, sp, #0
    uint8_t first_byte;

    if (uart_ring_buffer_get(&first_byte))
 80098e6:	1dfb      	adds	r3, r7, #7
 80098e8:	4618      	mov	r0, r3
 80098ea:	f7ff ffa1 	bl	8009830 <uart_ring_buffer_get>
 80098ee:	4603      	mov	r3, r0
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d00d      	beq.n	8009910 <uart_transmit_IT_start+0x30>
    {
        uart_tx_busy = 1;
 80098f4:	4b08      	ldr	r3, [pc, #32]	@ (8009918 <uart_transmit_IT_start+0x38>)
 80098f6:	2201      	movs	r2, #1
 80098f8:	701a      	strb	r2, [r3, #0]
        current_tx_count = 1;
 80098fa:	4b08      	ldr	r3, [pc, #32]	@ (800991c <uart_transmit_IT_start+0x3c>)
 80098fc:	2201      	movs	r2, #1
 80098fe:	801a      	strh	r2, [r3, #0]

        // Enable TXE interrupt and send first byte
        LL_USART_TransmitData8(USART6, first_byte);
 8009900:	79fb      	ldrb	r3, [r7, #7]
 8009902:	4619      	mov	r1, r3
 8009904:	4806      	ldr	r0, [pc, #24]	@ (8009920 <uart_transmit_IT_start+0x40>)
 8009906:	f7ff ff19 	bl	800973c <LL_USART_TransmitData8>
        LL_USART_EnableIT_TXE(USART6);
 800990a:	4805      	ldr	r0, [pc, #20]	@ (8009920 <uart_transmit_IT_start+0x40>)
 800990c:	f7ff fe87 	bl	800961e <LL_USART_EnableIT_TXE>

    }
}
 8009910:	bf00      	nop
 8009912:	3708      	adds	r7, #8
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}
 8009918:	2000ddce 	.word	0x2000ddce
 800991c:	2000ddd0 	.word	0x2000ddd0
 8009920:	40011400 	.word	0x40011400

08009924 <uart_IRQ_handler>:
/**
 * @brief UART interrupt handler
 * Call this in UART IRQ handler
 */
void uart_IRQ_handler(void)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b082      	sub	sp, #8
 8009928:	af00      	add	r7, sp, #0
    // TXE interrupt - ready to send next byte
    if (LL_USART_IsActiveFlag_TXE(USART6) && LL_USART_IsEnabledIT_TXE(USART6))
 800992a:	4821      	ldr	r0, [pc, #132]	@ (80099b0 <uart_IRQ_handler+0x8c>)
 800992c:	f7ff fe33 	bl	8009596 <LL_USART_IsActiveFlag_TXE>
 8009930:	4603      	mov	r3, r0
 8009932:	2b00      	cmp	r3, #0
 8009934:	d01f      	beq.n	8009976 <uart_IRQ_handler+0x52>
 8009936:	481e      	ldr	r0, [pc, #120]	@ (80099b0 <uart_IRQ_handler+0x8c>)
 8009938:	f7ff feed 	bl	8009716 <LL_USART_IsEnabledIT_TXE>
 800993c:	4603      	mov	r3, r0
 800993e:	2b00      	cmp	r3, #0
 8009940:	d019      	beq.n	8009976 <uart_IRQ_handler+0x52>
    {
        uint8_t next_byte;

        if (uart_ring_buffer_get(&next_byte))
 8009942:	1dfb      	adds	r3, r7, #7
 8009944:	4618      	mov	r0, r3
 8009946:	f7ff ff73 	bl	8009830 <uart_ring_buffer_get>
 800994a:	4603      	mov	r3, r0
 800994c:	2b00      	cmp	r3, #0
 800994e:	d00c      	beq.n	800996a <uart_IRQ_handler+0x46>
        {
            // Send next byte
            LL_USART_TransmitData8(USART6, next_byte);
 8009950:	79fb      	ldrb	r3, [r7, #7]
 8009952:	4619      	mov	r1, r3
 8009954:	4816      	ldr	r0, [pc, #88]	@ (80099b0 <uart_IRQ_handler+0x8c>)
 8009956:	f7ff fef1 	bl	800973c <LL_USART_TransmitData8>
            current_tx_count++;
 800995a:	4b16      	ldr	r3, [pc, #88]	@ (80099b4 <uart_IRQ_handler+0x90>)
 800995c:	881b      	ldrh	r3, [r3, #0]
 800995e:	b29b      	uxth	r3, r3
 8009960:	3301      	adds	r3, #1
 8009962:	b29a      	uxth	r2, r3
 8009964:	4b13      	ldr	r3, [pc, #76]	@ (80099b4 <uart_IRQ_handler+0x90>)
 8009966:	801a      	strh	r2, [r3, #0]
 8009968:	e005      	b.n	8009976 <uart_IRQ_handler+0x52>
        }
        else
        {
            // No more data, wait for transmission complete
            LL_USART_DisableIT_TXE(USART6);
 800996a:	4811      	ldr	r0, [pc, #68]	@ (80099b0 <uart_IRQ_handler+0x8c>)
 800996c:	f7ff fe9d 	bl	80096aa <LL_USART_DisableIT_TXE>
            LL_USART_EnableIT_TC(USART6);
 8009970:	480f      	ldr	r0, [pc, #60]	@ (80099b0 <uart_IRQ_handler+0x8c>)
 8009972:	f7ff fe31 	bl	80095d8 <LL_USART_EnableIT_TC>
        }
    }

    // TC interrupt - transmission complete
    if (LL_USART_IsActiveFlag_TC(USART6) && LL_USART_IsEnabledIT_TC(USART6))
 8009976:	480e      	ldr	r0, [pc, #56]	@ (80099b0 <uart_IRQ_handler+0x8c>)
 8009978:	f7ff fdfa 	bl	8009570 <LL_USART_IsActiveFlag_TC>
 800997c:	4603      	mov	r3, r0
 800997e:	2b00      	cmp	r3, #0
 8009980:	d011      	beq.n	80099a6 <uart_IRQ_handler+0x82>
 8009982:	480b      	ldr	r0, [pc, #44]	@ (80099b0 <uart_IRQ_handler+0x8c>)
 8009984:	f7ff feb4 	bl	80096f0 <LL_USART_IsEnabledIT_TC>
 8009988:	4603      	mov	r3, r0
 800998a:	2b00      	cmp	r3, #0
 800998c:	d00b      	beq.n	80099a6 <uart_IRQ_handler+0x82>
    {
        LL_USART_ClearFlag_TC(USART6);
 800998e:	4808      	ldr	r0, [pc, #32]	@ (80099b0 <uart_IRQ_handler+0x8c>)
 8009990:	f7ff fe14 	bl	80095bc <LL_USART_ClearFlag_TC>
        LL_USART_DisableIT_TC(USART6);
 8009994:	4806      	ldr	r0, [pc, #24]	@ (80099b0 <uart_IRQ_handler+0x8c>)
 8009996:	f7ff fe65 	bl	8009664 <LL_USART_DisableIT_TC>

        // Mark as not busy
        uart_tx_busy = 0;
 800999a:	4b07      	ldr	r3, [pc, #28]	@ (80099b8 <uart_IRQ_handler+0x94>)
 800999c:	2200      	movs	r2, #0
 800999e:	701a      	strb	r2, [r3, #0]
        current_tx_count = 0;
 80099a0:	4b04      	ldr	r3, [pc, #16]	@ (80099b4 <uart_IRQ_handler+0x90>)
 80099a2:	2200      	movs	r2, #0
 80099a4:	801a      	strh	r2, [r3, #0]
    }
}
 80099a6:	bf00      	nop
 80099a8:	3708      	adds	r7, #8
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}
 80099ae:	bf00      	nop
 80099b0:	40011400 	.word	0x40011400
 80099b4:	2000ddd0 	.word	0x2000ddd0
 80099b8:	2000ddce 	.word	0x2000ddce

080099bc <uart_debug_init>:

/**
 * @brief Initialize debug system
 */
void uart_debug_init(void)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	af00      	add	r7, sp, #0
    uart_ring_buffer_init();
 80099c0:	f7ff fecc 	bl	800975c <uart_ring_buffer_init>

    // Enable UART interrupt
    NVIC_SetPriority(USART6_IRQn, 0);
 80099c4:	2100      	movs	r1, #0
 80099c6:	2047      	movs	r0, #71	@ 0x47
 80099c8:	f7ff fda8 	bl	800951c <__NVIC_SetPriority>
    NVIC_EnableIRQ(USART6_IRQn);
 80099cc:	2047      	movs	r0, #71	@ 0x47
 80099ce:	f7ff fd87 	bl	80094e0 <__NVIC_EnableIRQ>
}
 80099d2:	bf00      	nop
 80099d4:	bd80      	pop	{r7, pc}

080099d6 <csp_transaction>:
   @param[in] outlen length of data in \a outbuf (request)
   @param[out] inbuf user provided buffer for receiving data (reply)
   @param[in] inlen length of expected reply, -1 for unknown size (inbuf MUST be large enough), 0 for no reply.
   @return 1 or reply size on success, 0 on failure (error, incoming length does not match, timeout)
*/
static inline int csp_transaction(uint8_t prio, uint16_t dest, uint8_t port, uint32_t timeout, void * outbuf, int outlen, void * inbuf, int inlen) {
 80099d6:	b580      	push	{r7, lr}
 80099d8:	b088      	sub	sp, #32
 80099da:	af06      	add	r7, sp, #24
 80099dc:	603b      	str	r3, [r7, #0]
 80099de:	4603      	mov	r3, r0
 80099e0:	71fb      	strb	r3, [r7, #7]
 80099e2:	460b      	mov	r3, r1
 80099e4:	80bb      	strh	r3, [r7, #4]
 80099e6:	4613      	mov	r3, r2
 80099e8:	71bb      	strb	r3, [r7, #6]
	return csp_transaction_w_opts(prio, dest, port, timeout, outbuf, outlen, inbuf, inlen, 0);
 80099ea:	79ba      	ldrb	r2, [r7, #6]
 80099ec:	88b9      	ldrh	r1, [r7, #4]
 80099ee:	79f8      	ldrb	r0, [r7, #7]
 80099f0:	2300      	movs	r3, #0
 80099f2:	9304      	str	r3, [sp, #16]
 80099f4:	69fb      	ldr	r3, [r7, #28]
 80099f6:	9303      	str	r3, [sp, #12]
 80099f8:	69bb      	ldr	r3, [r7, #24]
 80099fa:	9302      	str	r3, [sp, #8]
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	9301      	str	r3, [sp, #4]
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	9300      	str	r3, [sp, #0]
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	f7f8 fda1 	bl	800254c <csp_transaction_w_opts>
 8009a0a:	4603      	mov	r3, r0
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3708      	adds	r7, #8
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <CSP_Init>:

/* Add interface(s) */
csp_iface_t csp_if_can = {0};

void CSP_Init(void)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b084      	sub	sp, #16
 8009a18:	af02      	add	r7, sp, #8

  /* Initialising CSP */
uart_ring_buffer_put("Initialising CSP 2.0\r\n", 22);
 8009a1a:	2116      	movs	r1, #22
 8009a1c:	4818      	ldr	r0, [pc, #96]	@ (8009a80 <CSP_Init+0x6c>)
 8009a1e:	f7ff feb7 	bl	8009790 <uart_ring_buffer_put>

csp_if_can.name = CSP_IF_CAN_DEFAULT_NAME,
 8009a22:	4b18      	ldr	r3, [pc, #96]	@ (8009a84 <CSP_Init+0x70>)
 8009a24:	4a18      	ldr	r2, [pc, #96]	@ (8009a88 <CSP_Init+0x74>)
 8009a26:	605a      	str	r2, [r3, #4]
csp_if_can.driver_data = &hcan1,
 8009a28:	4b16      	ldr	r3, [pc, #88]	@ (8009a84 <CSP_Init+0x70>)
 8009a2a:	4a18      	ldr	r2, [pc, #96]	@ (8009a8c <CSP_Init+0x78>)
 8009a2c:	60da      	str	r2, [r3, #12]
//csp_if_can.interface_data
csp_if_can.netmask = (uint16_t)csp_id_get_host_bits(), //thiết lập netmask, giống với subnet mask của IP
 8009a2e:	f7f8 faa7 	bl	8001f80 <csp_id_get_host_bits>
 8009a32:	4603      	mov	r3, r0
 8009a34:	b29a      	uxth	r2, r3
 8009a36:	4b13      	ldr	r3, [pc, #76]	@ (8009a84 <CSP_Init+0x70>)
 8009a38:	805a      	strh	r2, [r3, #2]
//csp_if_can.nexthop = csp_can2_tx,
csp_if_can.interface_data = &Can_data;
 8009a3a:	4b12      	ldr	r3, [pc, #72]	@ (8009a84 <CSP_Init+0x70>)
 8009a3c:	4a14      	ldr	r2, [pc, #80]	@ (8009a90 <CSP_Init+0x7c>)
 8009a3e:	609a      	str	r2, [r3, #8]
csp_if_can.mtu = 64, ///?????????????????
 8009a40:	4b10      	ldr	r3, [pc, #64]	@ (8009a84 <CSP_Init+0x70>)
 8009a42:	2240      	movs	r2, #64	@ 0x40
 8009a44:	829a      	strh	r2, [r3, #20]

  csp_init();
 8009a46:	f7f8 fb65 	bl	8002114 <csp_init>

  csp_can_add_interface(&csp_if_can);
 8009a4a:	480e      	ldr	r0, [pc, #56]	@ (8009a84 <CSP_Init+0x70>)
 8009a4c:	f7f9 ff5a 	bl	8003904 <csp_can_add_interface>

  csp_iface_t *can_iface = &csp_if_can;
 8009a50:	4b0c      	ldr	r3, [pc, #48]	@ (8009a84 <CSP_Init+0x70>)
 8009a52:	607b      	str	r3, [r7, #4]
//  {
//	  csp_log_error("csp_can_stm32_open_and_add_interface() failed, error: %d", error);
//  }
  /* Setting route table */

	  csp_rtable_set(0, 0, can_iface, CSP_NO_VIA_ADDRESS);
 8009a54:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009a58:	687a      	ldr	r2, [r7, #4]
 8009a5a:	2100      	movs	r1, #0
 8009a5c:	2000      	movs	r0, #0
 8009a5e:	f7f9 fa85 	bl	8002f6c <csp_rtable_set>
  /* Start router task with 1000 bytes of stack (priority is only supported on FreeRTOS) */
//  if(csp_route_start_task(1000, 1) != CSP_ERR_NONE)
//  {
//	  csp_log_warn("Failed to start router!");
//  }
	  xTaskCreate(vTaskCspRouter, "CSP_Router", 128 * 4, NULL, osPriorityNormal, &hCspRouter);
 8009a62:	4b0c      	ldr	r3, [pc, #48]	@ (8009a94 <CSP_Init+0x80>)
 8009a64:	9301      	str	r3, [sp, #4]
 8009a66:	2318      	movs	r3, #24
 8009a68:	9300      	str	r3, [sp, #0]
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009a70:	4909      	ldr	r1, [pc, #36]	@ (8009a98 <CSP_Init+0x84>)
 8009a72:	480a      	ldr	r0, [pc, #40]	@ (8009a9c <CSP_Init+0x88>)
 8009a74:	f7fd fe8e 	bl	8007794 <xTaskCreate>
}
 8009a78:	bf00      	nop
 8009a7a:	3708      	adds	r7, #8
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}
 8009a80:	0800e580 	.word	0x0800e580
 8009a84:	2000de34 	.word	0x2000de34
 8009a88:	0800e598 	.word	0x0800e598
 8009a8c:	20000588 	.word	0x20000588
 8009a90:	20000074 	.word	0x20000074
 8009a94:	2000de2c 	.word	0x2000de2c
 8009a98:	0800e59c 	.word	0x0800e59c
 8009a9c:	08009aa1 	.word	0x08009aa1

08009aa0 <vTaskCspRouter>:

void vTaskCspRouter(void *pvParameters)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b082      	sub	sp, #8
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
	uart_ring_buffer_put("Router: Router task started\r\n", 29);
 8009aa8:	211d      	movs	r1, #29
 8009aaa:	4805      	ldr	r0, [pc, #20]	@ (8009ac0 <vTaskCspRouter+0x20>)
 8009aac:	f7ff fe70 	bl	8009790 <uart_ring_buffer_put>
	while (1)
	{
		csp_route_work();
 8009ab0:	f7f8 ffcc 	bl	8002a4c <csp_route_work>
		vTaskDelay(10);
 8009ab4:	200a      	movs	r0, #10
 8009ab6:	f7fd ffcb 	bl	8007a50 <vTaskDelay>
		csp_route_work();
 8009aba:	bf00      	nop
 8009abc:	e7f8      	b.n	8009ab0 <vTaskCspRouter+0x10>
 8009abe:	bf00      	nop
 8009ac0:	0800e5a8 	.word	0x0800e5a8

08009ac4 <vTaskCspSend>:
	}
}


void vTaskCspSend(void *pvParameters)
{
 8009ac4:	b590      	push	{r4, r7, lr}
 8009ac6:	b091      	sub	sp, #68	@ 0x44
 8009ac8:	af04      	add	r7, sp, #16
 8009aca:	6078      	str	r0, [r7, #4]

	uart_ring_buffer_put("Client: Client task started\r\n", 33);
 8009acc:	2121      	movs	r1, #33	@ 0x21
 8009ace:	481f      	ldr	r0, [pc, #124]	@ (8009b4c <vTaskCspSend+0x88>)
 8009ad0:	f7ff fe5e 	bl	8009790 <uart_ring_buffer_put>
	vTaskDelay(10);
 8009ad4:	200a      	movs	r0, #10
 8009ad6:	f7fd ffbb 	bl	8007a50 <vTaskDelay>

	// unsigned int count = 'A';

	for(;;) 
    {
		uart_ring_buffer_put((uint8_t*)"Client: csp_transaction start\r\n", 33);
 8009ada:	2121      	movs	r1, #33	@ 0x21
 8009adc:	481c      	ldr	r0, [pc, #112]	@ (8009b50 <vTaskCspSend+0x8c>)
 8009ade:	f7ff fe57 	bl	8009790 <uart_ring_buffer_put>

        // uint8_t tx_data[4] = {1, 2, 3, 4};
        uint8_t tx_data[] = "Tran Hoang Kien";
 8009ae2:	4b1c      	ldr	r3, [pc, #112]	@ (8009b54 <vTaskCspSend+0x90>)
 8009ae4:	f107 041c 	add.w	r4, r7, #28
 8009ae8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009aea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        uint8_t rx_data[16];
        int len = csp_transaction(CSP_PRIO_NORM, server_address, MY_SERVER_PORT, 1000, tx_data, 18, rx_data, -1);
 8009aee:	4b1a      	ldr	r3, [pc, #104]	@ (8009b58 <vTaskCspSend+0x94>)
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	4619      	mov	r1, r3
 8009af4:	f04f 33ff 	mov.w	r3, #4294967295
 8009af8:	9303      	str	r3, [sp, #12]
 8009afa:	f107 030c 	add.w	r3, r7, #12
 8009afe:	9302      	str	r3, [sp, #8]
 8009b00:	2312      	movs	r3, #18
 8009b02:	9301      	str	r3, [sp, #4]
 8009b04:	f107 031c 	add.w	r3, r7, #28
 8009b08:	9300      	str	r3, [sp, #0]
 8009b0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009b0e:	220a      	movs	r2, #10
 8009b10:	2002      	movs	r0, #2
 8009b12:	f7ff ff60 	bl	80099d6 <csp_transaction>
 8009b16:	62f8      	str	r0, [r7, #44]	@ 0x2c
        if (len > 0) 
 8009b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	dd0c      	ble.n	8009b38 <vTaskCspSend+0x74>
        {
            sprintf((char *)string_debug, "Client: Received %d bytes!\n", len);
 8009b1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b20:	490e      	ldr	r1, [pc, #56]	@ (8009b5c <vTaskCspSend+0x98>)
 8009b22:	480f      	ldr	r0, [pc, #60]	@ (8009b60 <vTaskCspSend+0x9c>)
 8009b24:	f001 f884 	bl	800ac30 <siprintf>
            uart_ring_buffer_put(string_debug, strlen((char *)string_debug));
 8009b28:	480d      	ldr	r0, [pc, #52]	@ (8009b60 <vTaskCspSend+0x9c>)
 8009b2a:	f7f6 fba1 	bl	8000270 <strlen>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	4619      	mov	r1, r3
 8009b32:	480b      	ldr	r0, [pc, #44]	@ (8009b60 <vTaskCspSend+0x9c>)
 8009b34:	f7ff fe2c 	bl	8009790 <uart_ring_buffer_put>
        }
		uart_ring_buffer_put((uint8_t*)"Client: csp_transaction end\r\n", 31);
 8009b38:	211f      	movs	r1, #31
 8009b3a:	480a      	ldr	r0, [pc, #40]	@ (8009b64 <vTaskCspSend+0xa0>)
 8009b3c:	f7ff fe28 	bl	8009790 <uart_ring_buffer_put>
		vTaskDelay(500);
 8009b40:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8009b44:	f7fd ff84 	bl	8007a50 <vTaskDelay>
    {
 8009b48:	e7c7      	b.n	8009ada <vTaskCspSend+0x16>
 8009b4a:	bf00      	nop
 8009b4c:	0800e5c8 	.word	0x0800e5c8
 8009b50:	0800e5e8 	.word	0x0800e5e8
 8009b54:	0800e644 	.word	0x0800e644
 8009b58:	20000070 	.word	0x20000070
 8009b5c:	0800e608 	.word	0x0800e608
 8009b60:	2000ddd4 	.word	0x2000ddd4
 8009b64:	0800e624 	.word	0x0800e624

08009b68 <vTaskCspReceive>:
}



void vTaskCspReceive(void *pvParameters)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b0a4      	sub	sp, #144	@ 0x90
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]

	sprintf(string_debug, "server task started\n");
 8009b70:	493c      	ldr	r1, [pc, #240]	@ (8009c64 <vTaskCspReceive+0xfc>)
 8009b72:	483d      	ldr	r0, [pc, #244]	@ (8009c68 <vTaskCspReceive+0x100>)
 8009b74:	f001 f85c 	bl	800ac30 <siprintf>
	uart_ring_buffer_put(string_debug, strlen((char *)string_debug));
 8009b78:	483b      	ldr	r0, [pc, #236]	@ (8009c68 <vTaskCspReceive+0x100>)
 8009b7a:	f7f6 fb79 	bl	8000270 <strlen>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	4619      	mov	r1, r3
 8009b82:	4839      	ldr	r0, [pc, #228]	@ (8009c68 <vTaskCspReceive+0x100>)
 8009b84:	f7ff fe04 	bl	8009790 <uart_ring_buffer_put>

	/* Create socket with no specific socket options, e.g. accepts CRC32, HMAC, etc. if enabled during compilation */
	csp_socket_t sock = {0};
 8009b88:	f107 0308 	add.w	r3, r7, #8
 8009b8c:	2280      	movs	r2, #128	@ 0x80
 8009b8e:	2100      	movs	r1, #0
 8009b90:	4618      	mov	r0, r3
 8009b92:	f001 f8c2 	bl	800ad1a <memset>
    
	/* Bind socket to all ports, e.g. all incoming connections will be handled here */
	csp_bind(&sock, CSP_ANY);
 8009b96:	f107 0308 	add.w	r3, r7, #8
 8009b9a:	21ff      	movs	r1, #255	@ 0xff
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f7f8 fdff 	bl	80027a0 <csp_bind>

	/* Create a backlog of 10 connections, i.e. up to 10 new connections can be queued */
	csp_listen(&sock, 10);
 8009ba2:	f107 0308 	add.w	r3, r7, #8
 8009ba6:	210a      	movs	r1, #10
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f7f8 fde3 	bl	8002774 <csp_listen>
	for(;;) 
	{

		/* Wait for a new connection, 10000 mS timeout */
		csp_conn_t *conn;
		sprintf(string_debug, "Server: Wait for a new connection\n");
 8009bae:	492f      	ldr	r1, [pc, #188]	@ (8009c6c <vTaskCspReceive+0x104>)
 8009bb0:	482d      	ldr	r0, [pc, #180]	@ (8009c68 <vTaskCspReceive+0x100>)
 8009bb2:	f001 f83d 	bl	800ac30 <siprintf>
		uart_ring_buffer_put(string_debug, strlen((char *)string_debug));
 8009bb6:	482c      	ldr	r0, [pc, #176]	@ (8009c68 <vTaskCspReceive+0x100>)
 8009bb8:	f7f6 fb5a 	bl	8000270 <strlen>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	4619      	mov	r1, r3
 8009bc0:	4829      	ldr	r0, [pc, #164]	@ (8009c68 <vTaskCspReceive+0x100>)
 8009bc2:	f7ff fde5 	bl	8009790 <uart_ring_buffer_put>
		if ((conn = csp_accept(&sock, 10000)) == NULL) 
 8009bc6:	f107 0308 	add.w	r3, r7, #8
 8009bca:	f242 7110 	movw	r1, #10000	@ 0x2710
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f7f8 faaa 	bl	8002128 <csp_accept>
 8009bd4:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 8009bd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d03e      	beq.n	8009c5e <vTaskCspReceive+0xf6>
			continue;
		}

		/* Read packets on connection, timout is 100 mS */
		csp_packet_t *packet;
		while ((packet = csp_read(conn, 50)) != NULL) 
 8009be0:	e029      	b.n	8009c36 <vTaskCspReceive+0xce>
		{
			switch (csp_conn_dport(conn)) {
 8009be2:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8009be6:	f7f7 fe85 	bl	80018f4 <csp_conn_dport>
 8009bea:	4603      	mov	r3, r0
 8009bec:	2b0a      	cmp	r3, #10
 8009bee:	d11d      	bne.n	8009c2c <vTaskCspReceive+0xc4>
			case MY_SERVER_PORT:
				/* Process packet here */
				sprintf(string_debug, "Server: Packet received on MY_SERVER_PORT: %s\n", (const char *) packet->data);
 8009bf0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009bf4:	332c      	adds	r3, #44	@ 0x2c
 8009bf6:	461a      	mov	r2, r3
 8009bf8:	491d      	ldr	r1, [pc, #116]	@ (8009c70 <vTaskCspReceive+0x108>)
 8009bfa:	481b      	ldr	r0, [pc, #108]	@ (8009c68 <vTaskCspReceive+0x100>)
 8009bfc:	f001 f818 	bl	800ac30 <siprintf>
				uart_ring_buffer_put(string_debug, strlen((char *)string_debug));
 8009c00:	4819      	ldr	r0, [pc, #100]	@ (8009c68 <vTaskCspReceive+0x100>)
 8009c02:	f7f6 fb35 	bl	8000270 <strlen>
 8009c06:	4603      	mov	r3, r0
 8009c08:	4619      	mov	r1, r3
 8009c0a:	4817      	ldr	r0, [pc, #92]	@ (8009c68 <vTaskCspReceive+0x100>)
 8009c0c:	f7ff fdc0 	bl	8009790 <uart_ring_buffer_put>
				csp_buffer_free(packet);
 8009c10:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8009c14:	f7f7 fb9a 	bl	800134c <csp_buffer_free>
				++server_received;
 8009c18:	4b16      	ldr	r3, [pc, #88]	@ (8009c74 <vTaskCspReceive+0x10c>)
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	3301      	adds	r3, #1
 8009c1e:	4a15      	ldr	r2, [pc, #84]	@ (8009c74 <vTaskCspReceive+0x10c>)
 8009c20:	6013      	str	r3, [r2, #0]
				vTaskDelay(500);
 8009c22:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8009c26:	f7fd ff13 	bl	8007a50 <vTaskDelay>
				break;
 8009c2a:	e004      	b.n	8009c36 <vTaskCspReceive+0xce>

			default:
				/* Call the default CSP service handler, handle pings, buffer use, etc. */
				csp_service_handler(packet);
 8009c2c:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8009c30:	f7f9 fbe2 	bl	80033f8 <csp_service_handler>
				break;
 8009c34:	bf00      	nop
		while ((packet = csp_read(conn, 50)) != NULL) 
 8009c36:	2132      	movs	r1, #50	@ 0x32
 8009c38:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8009c3c:	f7f8 fa9a 	bl	8002174 <csp_read>
 8009c40:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
 8009c44:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d1ca      	bne.n	8009be2 <vTaskCspReceive+0x7a>
			}
		}

		/* Close current connection */
		csp_close(conn);
 8009c4c:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8009c50:	f7f7 fd70 	bl	8001734 <csp_close>
		vTaskDelay(500);
 8009c54:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8009c58:	f7fd fefa 	bl	8007a50 <vTaskDelay>
 8009c5c:	e7a7      	b.n	8009bae <vTaskCspReceive+0x46>
			continue;
 8009c5e:	bf00      	nop
	{
 8009c60:	e7a5      	b.n	8009bae <vTaskCspReceive+0x46>
 8009c62:	bf00      	nop
 8009c64:	0800e654 	.word	0x0800e654
 8009c68:	2000ddd4 	.word	0x2000ddd4
 8009c6c:	0800e66c 	.word	0x0800e66c
 8009c70:	0800e690 	.word	0x0800e690
 8009c74:	2000de30 	.word	0x2000de30

08009c78 <malloc>:
 8009c78:	4b02      	ldr	r3, [pc, #8]	@ (8009c84 <malloc+0xc>)
 8009c7a:	4601      	mov	r1, r0
 8009c7c:	6818      	ldr	r0, [r3, #0]
 8009c7e:	f000 b825 	b.w	8009ccc <_malloc_r>
 8009c82:	bf00      	nop
 8009c84:	20000090 	.word	0x20000090

08009c88 <sbrk_aligned>:
 8009c88:	b570      	push	{r4, r5, r6, lr}
 8009c8a:	4e0f      	ldr	r6, [pc, #60]	@ (8009cc8 <sbrk_aligned+0x40>)
 8009c8c:	460c      	mov	r4, r1
 8009c8e:	6831      	ldr	r1, [r6, #0]
 8009c90:	4605      	mov	r5, r0
 8009c92:	b911      	cbnz	r1, 8009c9a <sbrk_aligned+0x12>
 8009c94:	f001 f904 	bl	800aea0 <_sbrk_r>
 8009c98:	6030      	str	r0, [r6, #0]
 8009c9a:	4621      	mov	r1, r4
 8009c9c:	4628      	mov	r0, r5
 8009c9e:	f001 f8ff 	bl	800aea0 <_sbrk_r>
 8009ca2:	1c43      	adds	r3, r0, #1
 8009ca4:	d103      	bne.n	8009cae <sbrk_aligned+0x26>
 8009ca6:	f04f 34ff 	mov.w	r4, #4294967295
 8009caa:	4620      	mov	r0, r4
 8009cac:	bd70      	pop	{r4, r5, r6, pc}
 8009cae:	1cc4      	adds	r4, r0, #3
 8009cb0:	f024 0403 	bic.w	r4, r4, #3
 8009cb4:	42a0      	cmp	r0, r4
 8009cb6:	d0f8      	beq.n	8009caa <sbrk_aligned+0x22>
 8009cb8:	1a21      	subs	r1, r4, r0
 8009cba:	4628      	mov	r0, r5
 8009cbc:	f001 f8f0 	bl	800aea0 <_sbrk_r>
 8009cc0:	3001      	adds	r0, #1
 8009cc2:	d1f2      	bne.n	8009caa <sbrk_aligned+0x22>
 8009cc4:	e7ef      	b.n	8009ca6 <sbrk_aligned+0x1e>
 8009cc6:	bf00      	nop
 8009cc8:	2000de78 	.word	0x2000de78

08009ccc <_malloc_r>:
 8009ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cd0:	1ccd      	adds	r5, r1, #3
 8009cd2:	f025 0503 	bic.w	r5, r5, #3
 8009cd6:	3508      	adds	r5, #8
 8009cd8:	2d0c      	cmp	r5, #12
 8009cda:	bf38      	it	cc
 8009cdc:	250c      	movcc	r5, #12
 8009cde:	2d00      	cmp	r5, #0
 8009ce0:	4606      	mov	r6, r0
 8009ce2:	db01      	blt.n	8009ce8 <_malloc_r+0x1c>
 8009ce4:	42a9      	cmp	r1, r5
 8009ce6:	d904      	bls.n	8009cf2 <_malloc_r+0x26>
 8009ce8:	230c      	movs	r3, #12
 8009cea:	6033      	str	r3, [r6, #0]
 8009cec:	2000      	movs	r0, #0
 8009cee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cf2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009dc8 <_malloc_r+0xfc>
 8009cf6:	f000 f869 	bl	8009dcc <__malloc_lock>
 8009cfa:	f8d8 3000 	ldr.w	r3, [r8]
 8009cfe:	461c      	mov	r4, r3
 8009d00:	bb44      	cbnz	r4, 8009d54 <_malloc_r+0x88>
 8009d02:	4629      	mov	r1, r5
 8009d04:	4630      	mov	r0, r6
 8009d06:	f7ff ffbf 	bl	8009c88 <sbrk_aligned>
 8009d0a:	1c43      	adds	r3, r0, #1
 8009d0c:	4604      	mov	r4, r0
 8009d0e:	d158      	bne.n	8009dc2 <_malloc_r+0xf6>
 8009d10:	f8d8 4000 	ldr.w	r4, [r8]
 8009d14:	4627      	mov	r7, r4
 8009d16:	2f00      	cmp	r7, #0
 8009d18:	d143      	bne.n	8009da2 <_malloc_r+0xd6>
 8009d1a:	2c00      	cmp	r4, #0
 8009d1c:	d04b      	beq.n	8009db6 <_malloc_r+0xea>
 8009d1e:	6823      	ldr	r3, [r4, #0]
 8009d20:	4639      	mov	r1, r7
 8009d22:	4630      	mov	r0, r6
 8009d24:	eb04 0903 	add.w	r9, r4, r3
 8009d28:	f001 f8ba 	bl	800aea0 <_sbrk_r>
 8009d2c:	4581      	cmp	r9, r0
 8009d2e:	d142      	bne.n	8009db6 <_malloc_r+0xea>
 8009d30:	6821      	ldr	r1, [r4, #0]
 8009d32:	1a6d      	subs	r5, r5, r1
 8009d34:	4629      	mov	r1, r5
 8009d36:	4630      	mov	r0, r6
 8009d38:	f7ff ffa6 	bl	8009c88 <sbrk_aligned>
 8009d3c:	3001      	adds	r0, #1
 8009d3e:	d03a      	beq.n	8009db6 <_malloc_r+0xea>
 8009d40:	6823      	ldr	r3, [r4, #0]
 8009d42:	442b      	add	r3, r5
 8009d44:	6023      	str	r3, [r4, #0]
 8009d46:	f8d8 3000 	ldr.w	r3, [r8]
 8009d4a:	685a      	ldr	r2, [r3, #4]
 8009d4c:	bb62      	cbnz	r2, 8009da8 <_malloc_r+0xdc>
 8009d4e:	f8c8 7000 	str.w	r7, [r8]
 8009d52:	e00f      	b.n	8009d74 <_malloc_r+0xa8>
 8009d54:	6822      	ldr	r2, [r4, #0]
 8009d56:	1b52      	subs	r2, r2, r5
 8009d58:	d420      	bmi.n	8009d9c <_malloc_r+0xd0>
 8009d5a:	2a0b      	cmp	r2, #11
 8009d5c:	d917      	bls.n	8009d8e <_malloc_r+0xc2>
 8009d5e:	1961      	adds	r1, r4, r5
 8009d60:	42a3      	cmp	r3, r4
 8009d62:	6025      	str	r5, [r4, #0]
 8009d64:	bf18      	it	ne
 8009d66:	6059      	strne	r1, [r3, #4]
 8009d68:	6863      	ldr	r3, [r4, #4]
 8009d6a:	bf08      	it	eq
 8009d6c:	f8c8 1000 	streq.w	r1, [r8]
 8009d70:	5162      	str	r2, [r4, r5]
 8009d72:	604b      	str	r3, [r1, #4]
 8009d74:	4630      	mov	r0, r6
 8009d76:	f000 f82f 	bl	8009dd8 <__malloc_unlock>
 8009d7a:	f104 000b 	add.w	r0, r4, #11
 8009d7e:	1d23      	adds	r3, r4, #4
 8009d80:	f020 0007 	bic.w	r0, r0, #7
 8009d84:	1ac2      	subs	r2, r0, r3
 8009d86:	bf1c      	itt	ne
 8009d88:	1a1b      	subne	r3, r3, r0
 8009d8a:	50a3      	strne	r3, [r4, r2]
 8009d8c:	e7af      	b.n	8009cee <_malloc_r+0x22>
 8009d8e:	6862      	ldr	r2, [r4, #4]
 8009d90:	42a3      	cmp	r3, r4
 8009d92:	bf0c      	ite	eq
 8009d94:	f8c8 2000 	streq.w	r2, [r8]
 8009d98:	605a      	strne	r2, [r3, #4]
 8009d9a:	e7eb      	b.n	8009d74 <_malloc_r+0xa8>
 8009d9c:	4623      	mov	r3, r4
 8009d9e:	6864      	ldr	r4, [r4, #4]
 8009da0:	e7ae      	b.n	8009d00 <_malloc_r+0x34>
 8009da2:	463c      	mov	r4, r7
 8009da4:	687f      	ldr	r7, [r7, #4]
 8009da6:	e7b6      	b.n	8009d16 <_malloc_r+0x4a>
 8009da8:	461a      	mov	r2, r3
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	42a3      	cmp	r3, r4
 8009dae:	d1fb      	bne.n	8009da8 <_malloc_r+0xdc>
 8009db0:	2300      	movs	r3, #0
 8009db2:	6053      	str	r3, [r2, #4]
 8009db4:	e7de      	b.n	8009d74 <_malloc_r+0xa8>
 8009db6:	230c      	movs	r3, #12
 8009db8:	6033      	str	r3, [r6, #0]
 8009dba:	4630      	mov	r0, r6
 8009dbc:	f000 f80c 	bl	8009dd8 <__malloc_unlock>
 8009dc0:	e794      	b.n	8009cec <_malloc_r+0x20>
 8009dc2:	6005      	str	r5, [r0, #0]
 8009dc4:	e7d6      	b.n	8009d74 <_malloc_r+0xa8>
 8009dc6:	bf00      	nop
 8009dc8:	2000de7c 	.word	0x2000de7c

08009dcc <__malloc_lock>:
 8009dcc:	4801      	ldr	r0, [pc, #4]	@ (8009dd4 <__malloc_lock+0x8>)
 8009dce:	f001 b8b4 	b.w	800af3a <__retarget_lock_acquire_recursive>
 8009dd2:	bf00      	nop
 8009dd4:	2000dfc0 	.word	0x2000dfc0

08009dd8 <__malloc_unlock>:
 8009dd8:	4801      	ldr	r0, [pc, #4]	@ (8009de0 <__malloc_unlock+0x8>)
 8009dda:	f001 b8af 	b.w	800af3c <__retarget_lock_release_recursive>
 8009dde:	bf00      	nop
 8009de0:	2000dfc0 	.word	0x2000dfc0

08009de4 <__cvt>:
 8009de4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009de8:	ec57 6b10 	vmov	r6, r7, d0
 8009dec:	2f00      	cmp	r7, #0
 8009dee:	460c      	mov	r4, r1
 8009df0:	4619      	mov	r1, r3
 8009df2:	463b      	mov	r3, r7
 8009df4:	bfbb      	ittet	lt
 8009df6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009dfa:	461f      	movlt	r7, r3
 8009dfc:	2300      	movge	r3, #0
 8009dfe:	232d      	movlt	r3, #45	@ 0x2d
 8009e00:	700b      	strb	r3, [r1, #0]
 8009e02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009e04:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009e08:	4691      	mov	r9, r2
 8009e0a:	f023 0820 	bic.w	r8, r3, #32
 8009e0e:	bfbc      	itt	lt
 8009e10:	4632      	movlt	r2, r6
 8009e12:	4616      	movlt	r6, r2
 8009e14:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009e18:	d005      	beq.n	8009e26 <__cvt+0x42>
 8009e1a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009e1e:	d100      	bne.n	8009e22 <__cvt+0x3e>
 8009e20:	3401      	adds	r4, #1
 8009e22:	2102      	movs	r1, #2
 8009e24:	e000      	b.n	8009e28 <__cvt+0x44>
 8009e26:	2103      	movs	r1, #3
 8009e28:	ab03      	add	r3, sp, #12
 8009e2a:	9301      	str	r3, [sp, #4]
 8009e2c:	ab02      	add	r3, sp, #8
 8009e2e:	9300      	str	r3, [sp, #0]
 8009e30:	ec47 6b10 	vmov	d0, r6, r7
 8009e34:	4653      	mov	r3, sl
 8009e36:	4622      	mov	r2, r4
 8009e38:	f001 f91e 	bl	800b078 <_dtoa_r>
 8009e3c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009e40:	4605      	mov	r5, r0
 8009e42:	d119      	bne.n	8009e78 <__cvt+0x94>
 8009e44:	f019 0f01 	tst.w	r9, #1
 8009e48:	d00e      	beq.n	8009e68 <__cvt+0x84>
 8009e4a:	eb00 0904 	add.w	r9, r0, r4
 8009e4e:	2200      	movs	r2, #0
 8009e50:	2300      	movs	r3, #0
 8009e52:	4630      	mov	r0, r6
 8009e54:	4639      	mov	r1, r7
 8009e56:	f7f6 fe37 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e5a:	b108      	cbz	r0, 8009e60 <__cvt+0x7c>
 8009e5c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009e60:	2230      	movs	r2, #48	@ 0x30
 8009e62:	9b03      	ldr	r3, [sp, #12]
 8009e64:	454b      	cmp	r3, r9
 8009e66:	d31e      	bcc.n	8009ea6 <__cvt+0xc2>
 8009e68:	9b03      	ldr	r3, [sp, #12]
 8009e6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009e6c:	1b5b      	subs	r3, r3, r5
 8009e6e:	4628      	mov	r0, r5
 8009e70:	6013      	str	r3, [r2, #0]
 8009e72:	b004      	add	sp, #16
 8009e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e78:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009e7c:	eb00 0904 	add.w	r9, r0, r4
 8009e80:	d1e5      	bne.n	8009e4e <__cvt+0x6a>
 8009e82:	7803      	ldrb	r3, [r0, #0]
 8009e84:	2b30      	cmp	r3, #48	@ 0x30
 8009e86:	d10a      	bne.n	8009e9e <__cvt+0xba>
 8009e88:	2200      	movs	r2, #0
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	4630      	mov	r0, r6
 8009e8e:	4639      	mov	r1, r7
 8009e90:	f7f6 fe1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e94:	b918      	cbnz	r0, 8009e9e <__cvt+0xba>
 8009e96:	f1c4 0401 	rsb	r4, r4, #1
 8009e9a:	f8ca 4000 	str.w	r4, [sl]
 8009e9e:	f8da 3000 	ldr.w	r3, [sl]
 8009ea2:	4499      	add	r9, r3
 8009ea4:	e7d3      	b.n	8009e4e <__cvt+0x6a>
 8009ea6:	1c59      	adds	r1, r3, #1
 8009ea8:	9103      	str	r1, [sp, #12]
 8009eaa:	701a      	strb	r2, [r3, #0]
 8009eac:	e7d9      	b.n	8009e62 <__cvt+0x7e>

08009eae <__exponent>:
 8009eae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009eb0:	2900      	cmp	r1, #0
 8009eb2:	bfba      	itte	lt
 8009eb4:	4249      	neglt	r1, r1
 8009eb6:	232d      	movlt	r3, #45	@ 0x2d
 8009eb8:	232b      	movge	r3, #43	@ 0x2b
 8009eba:	2909      	cmp	r1, #9
 8009ebc:	7002      	strb	r2, [r0, #0]
 8009ebe:	7043      	strb	r3, [r0, #1]
 8009ec0:	dd29      	ble.n	8009f16 <__exponent+0x68>
 8009ec2:	f10d 0307 	add.w	r3, sp, #7
 8009ec6:	461d      	mov	r5, r3
 8009ec8:	270a      	movs	r7, #10
 8009eca:	461a      	mov	r2, r3
 8009ecc:	fbb1 f6f7 	udiv	r6, r1, r7
 8009ed0:	fb07 1416 	mls	r4, r7, r6, r1
 8009ed4:	3430      	adds	r4, #48	@ 0x30
 8009ed6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009eda:	460c      	mov	r4, r1
 8009edc:	2c63      	cmp	r4, #99	@ 0x63
 8009ede:	f103 33ff 	add.w	r3, r3, #4294967295
 8009ee2:	4631      	mov	r1, r6
 8009ee4:	dcf1      	bgt.n	8009eca <__exponent+0x1c>
 8009ee6:	3130      	adds	r1, #48	@ 0x30
 8009ee8:	1e94      	subs	r4, r2, #2
 8009eea:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009eee:	1c41      	adds	r1, r0, #1
 8009ef0:	4623      	mov	r3, r4
 8009ef2:	42ab      	cmp	r3, r5
 8009ef4:	d30a      	bcc.n	8009f0c <__exponent+0x5e>
 8009ef6:	f10d 0309 	add.w	r3, sp, #9
 8009efa:	1a9b      	subs	r3, r3, r2
 8009efc:	42ac      	cmp	r4, r5
 8009efe:	bf88      	it	hi
 8009f00:	2300      	movhi	r3, #0
 8009f02:	3302      	adds	r3, #2
 8009f04:	4403      	add	r3, r0
 8009f06:	1a18      	subs	r0, r3, r0
 8009f08:	b003      	add	sp, #12
 8009f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f0c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009f10:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009f14:	e7ed      	b.n	8009ef2 <__exponent+0x44>
 8009f16:	2330      	movs	r3, #48	@ 0x30
 8009f18:	3130      	adds	r1, #48	@ 0x30
 8009f1a:	7083      	strb	r3, [r0, #2]
 8009f1c:	70c1      	strb	r1, [r0, #3]
 8009f1e:	1d03      	adds	r3, r0, #4
 8009f20:	e7f1      	b.n	8009f06 <__exponent+0x58>
	...

08009f24 <_printf_float>:
 8009f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f28:	b08d      	sub	sp, #52	@ 0x34
 8009f2a:	460c      	mov	r4, r1
 8009f2c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009f30:	4616      	mov	r6, r2
 8009f32:	461f      	mov	r7, r3
 8009f34:	4605      	mov	r5, r0
 8009f36:	f000 ff1d 	bl	800ad74 <_localeconv_r>
 8009f3a:	6803      	ldr	r3, [r0, #0]
 8009f3c:	9304      	str	r3, [sp, #16]
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f7f6 f996 	bl	8000270 <strlen>
 8009f44:	2300      	movs	r3, #0
 8009f46:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f48:	f8d8 3000 	ldr.w	r3, [r8]
 8009f4c:	9005      	str	r0, [sp, #20]
 8009f4e:	3307      	adds	r3, #7
 8009f50:	f023 0307 	bic.w	r3, r3, #7
 8009f54:	f103 0208 	add.w	r2, r3, #8
 8009f58:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009f5c:	f8d4 b000 	ldr.w	fp, [r4]
 8009f60:	f8c8 2000 	str.w	r2, [r8]
 8009f64:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009f68:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009f6c:	9307      	str	r3, [sp, #28]
 8009f6e:	f8cd 8018 	str.w	r8, [sp, #24]
 8009f72:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009f76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f7a:	4b9c      	ldr	r3, [pc, #624]	@ (800a1ec <_printf_float+0x2c8>)
 8009f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8009f80:	f7f6 fdd4 	bl	8000b2c <__aeabi_dcmpun>
 8009f84:	bb70      	cbnz	r0, 8009fe4 <_printf_float+0xc0>
 8009f86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009f8a:	4b98      	ldr	r3, [pc, #608]	@ (800a1ec <_printf_float+0x2c8>)
 8009f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8009f90:	f7f6 fdae 	bl	8000af0 <__aeabi_dcmple>
 8009f94:	bb30      	cbnz	r0, 8009fe4 <_printf_float+0xc0>
 8009f96:	2200      	movs	r2, #0
 8009f98:	2300      	movs	r3, #0
 8009f9a:	4640      	mov	r0, r8
 8009f9c:	4649      	mov	r1, r9
 8009f9e:	f7f6 fd9d 	bl	8000adc <__aeabi_dcmplt>
 8009fa2:	b110      	cbz	r0, 8009faa <_printf_float+0x86>
 8009fa4:	232d      	movs	r3, #45	@ 0x2d
 8009fa6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009faa:	4a91      	ldr	r2, [pc, #580]	@ (800a1f0 <_printf_float+0x2cc>)
 8009fac:	4b91      	ldr	r3, [pc, #580]	@ (800a1f4 <_printf_float+0x2d0>)
 8009fae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009fb2:	bf8c      	ite	hi
 8009fb4:	4690      	movhi	r8, r2
 8009fb6:	4698      	movls	r8, r3
 8009fb8:	2303      	movs	r3, #3
 8009fba:	6123      	str	r3, [r4, #16]
 8009fbc:	f02b 0304 	bic.w	r3, fp, #4
 8009fc0:	6023      	str	r3, [r4, #0]
 8009fc2:	f04f 0900 	mov.w	r9, #0
 8009fc6:	9700      	str	r7, [sp, #0]
 8009fc8:	4633      	mov	r3, r6
 8009fca:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009fcc:	4621      	mov	r1, r4
 8009fce:	4628      	mov	r0, r5
 8009fd0:	f000 f9d2 	bl	800a378 <_printf_common>
 8009fd4:	3001      	adds	r0, #1
 8009fd6:	f040 808d 	bne.w	800a0f4 <_printf_float+0x1d0>
 8009fda:	f04f 30ff 	mov.w	r0, #4294967295
 8009fde:	b00d      	add	sp, #52	@ 0x34
 8009fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fe4:	4642      	mov	r2, r8
 8009fe6:	464b      	mov	r3, r9
 8009fe8:	4640      	mov	r0, r8
 8009fea:	4649      	mov	r1, r9
 8009fec:	f7f6 fd9e 	bl	8000b2c <__aeabi_dcmpun>
 8009ff0:	b140      	cbz	r0, 800a004 <_printf_float+0xe0>
 8009ff2:	464b      	mov	r3, r9
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	bfbc      	itt	lt
 8009ff8:	232d      	movlt	r3, #45	@ 0x2d
 8009ffa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009ffe:	4a7e      	ldr	r2, [pc, #504]	@ (800a1f8 <_printf_float+0x2d4>)
 800a000:	4b7e      	ldr	r3, [pc, #504]	@ (800a1fc <_printf_float+0x2d8>)
 800a002:	e7d4      	b.n	8009fae <_printf_float+0x8a>
 800a004:	6863      	ldr	r3, [r4, #4]
 800a006:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a00a:	9206      	str	r2, [sp, #24]
 800a00c:	1c5a      	adds	r2, r3, #1
 800a00e:	d13b      	bne.n	800a088 <_printf_float+0x164>
 800a010:	2306      	movs	r3, #6
 800a012:	6063      	str	r3, [r4, #4]
 800a014:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a018:	2300      	movs	r3, #0
 800a01a:	6022      	str	r2, [r4, #0]
 800a01c:	9303      	str	r3, [sp, #12]
 800a01e:	ab0a      	add	r3, sp, #40	@ 0x28
 800a020:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a024:	ab09      	add	r3, sp, #36	@ 0x24
 800a026:	9300      	str	r3, [sp, #0]
 800a028:	6861      	ldr	r1, [r4, #4]
 800a02a:	ec49 8b10 	vmov	d0, r8, r9
 800a02e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a032:	4628      	mov	r0, r5
 800a034:	f7ff fed6 	bl	8009de4 <__cvt>
 800a038:	9b06      	ldr	r3, [sp, #24]
 800a03a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a03c:	2b47      	cmp	r3, #71	@ 0x47
 800a03e:	4680      	mov	r8, r0
 800a040:	d129      	bne.n	800a096 <_printf_float+0x172>
 800a042:	1cc8      	adds	r0, r1, #3
 800a044:	db02      	blt.n	800a04c <_printf_float+0x128>
 800a046:	6863      	ldr	r3, [r4, #4]
 800a048:	4299      	cmp	r1, r3
 800a04a:	dd41      	ble.n	800a0d0 <_printf_float+0x1ac>
 800a04c:	f1aa 0a02 	sub.w	sl, sl, #2
 800a050:	fa5f fa8a 	uxtb.w	sl, sl
 800a054:	3901      	subs	r1, #1
 800a056:	4652      	mov	r2, sl
 800a058:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a05c:	9109      	str	r1, [sp, #36]	@ 0x24
 800a05e:	f7ff ff26 	bl	8009eae <__exponent>
 800a062:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a064:	1813      	adds	r3, r2, r0
 800a066:	2a01      	cmp	r2, #1
 800a068:	4681      	mov	r9, r0
 800a06a:	6123      	str	r3, [r4, #16]
 800a06c:	dc02      	bgt.n	800a074 <_printf_float+0x150>
 800a06e:	6822      	ldr	r2, [r4, #0]
 800a070:	07d2      	lsls	r2, r2, #31
 800a072:	d501      	bpl.n	800a078 <_printf_float+0x154>
 800a074:	3301      	adds	r3, #1
 800a076:	6123      	str	r3, [r4, #16]
 800a078:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d0a2      	beq.n	8009fc6 <_printf_float+0xa2>
 800a080:	232d      	movs	r3, #45	@ 0x2d
 800a082:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a086:	e79e      	b.n	8009fc6 <_printf_float+0xa2>
 800a088:	9a06      	ldr	r2, [sp, #24]
 800a08a:	2a47      	cmp	r2, #71	@ 0x47
 800a08c:	d1c2      	bne.n	800a014 <_printf_float+0xf0>
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d1c0      	bne.n	800a014 <_printf_float+0xf0>
 800a092:	2301      	movs	r3, #1
 800a094:	e7bd      	b.n	800a012 <_printf_float+0xee>
 800a096:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a09a:	d9db      	bls.n	800a054 <_printf_float+0x130>
 800a09c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a0a0:	d118      	bne.n	800a0d4 <_printf_float+0x1b0>
 800a0a2:	2900      	cmp	r1, #0
 800a0a4:	6863      	ldr	r3, [r4, #4]
 800a0a6:	dd0b      	ble.n	800a0c0 <_printf_float+0x19c>
 800a0a8:	6121      	str	r1, [r4, #16]
 800a0aa:	b913      	cbnz	r3, 800a0b2 <_printf_float+0x18e>
 800a0ac:	6822      	ldr	r2, [r4, #0]
 800a0ae:	07d0      	lsls	r0, r2, #31
 800a0b0:	d502      	bpl.n	800a0b8 <_printf_float+0x194>
 800a0b2:	3301      	adds	r3, #1
 800a0b4:	440b      	add	r3, r1
 800a0b6:	6123      	str	r3, [r4, #16]
 800a0b8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a0ba:	f04f 0900 	mov.w	r9, #0
 800a0be:	e7db      	b.n	800a078 <_printf_float+0x154>
 800a0c0:	b913      	cbnz	r3, 800a0c8 <_printf_float+0x1a4>
 800a0c2:	6822      	ldr	r2, [r4, #0]
 800a0c4:	07d2      	lsls	r2, r2, #31
 800a0c6:	d501      	bpl.n	800a0cc <_printf_float+0x1a8>
 800a0c8:	3302      	adds	r3, #2
 800a0ca:	e7f4      	b.n	800a0b6 <_printf_float+0x192>
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	e7f2      	b.n	800a0b6 <_printf_float+0x192>
 800a0d0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a0d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a0d6:	4299      	cmp	r1, r3
 800a0d8:	db05      	blt.n	800a0e6 <_printf_float+0x1c2>
 800a0da:	6823      	ldr	r3, [r4, #0]
 800a0dc:	6121      	str	r1, [r4, #16]
 800a0de:	07d8      	lsls	r0, r3, #31
 800a0e0:	d5ea      	bpl.n	800a0b8 <_printf_float+0x194>
 800a0e2:	1c4b      	adds	r3, r1, #1
 800a0e4:	e7e7      	b.n	800a0b6 <_printf_float+0x192>
 800a0e6:	2900      	cmp	r1, #0
 800a0e8:	bfd4      	ite	le
 800a0ea:	f1c1 0202 	rsble	r2, r1, #2
 800a0ee:	2201      	movgt	r2, #1
 800a0f0:	4413      	add	r3, r2
 800a0f2:	e7e0      	b.n	800a0b6 <_printf_float+0x192>
 800a0f4:	6823      	ldr	r3, [r4, #0]
 800a0f6:	055a      	lsls	r2, r3, #21
 800a0f8:	d407      	bmi.n	800a10a <_printf_float+0x1e6>
 800a0fa:	6923      	ldr	r3, [r4, #16]
 800a0fc:	4642      	mov	r2, r8
 800a0fe:	4631      	mov	r1, r6
 800a100:	4628      	mov	r0, r5
 800a102:	47b8      	blx	r7
 800a104:	3001      	adds	r0, #1
 800a106:	d12b      	bne.n	800a160 <_printf_float+0x23c>
 800a108:	e767      	b.n	8009fda <_printf_float+0xb6>
 800a10a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a10e:	f240 80dd 	bls.w	800a2cc <_printf_float+0x3a8>
 800a112:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a116:	2200      	movs	r2, #0
 800a118:	2300      	movs	r3, #0
 800a11a:	f7f6 fcd5 	bl	8000ac8 <__aeabi_dcmpeq>
 800a11e:	2800      	cmp	r0, #0
 800a120:	d033      	beq.n	800a18a <_printf_float+0x266>
 800a122:	4a37      	ldr	r2, [pc, #220]	@ (800a200 <_printf_float+0x2dc>)
 800a124:	2301      	movs	r3, #1
 800a126:	4631      	mov	r1, r6
 800a128:	4628      	mov	r0, r5
 800a12a:	47b8      	blx	r7
 800a12c:	3001      	adds	r0, #1
 800a12e:	f43f af54 	beq.w	8009fda <_printf_float+0xb6>
 800a132:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a136:	4543      	cmp	r3, r8
 800a138:	db02      	blt.n	800a140 <_printf_float+0x21c>
 800a13a:	6823      	ldr	r3, [r4, #0]
 800a13c:	07d8      	lsls	r0, r3, #31
 800a13e:	d50f      	bpl.n	800a160 <_printf_float+0x23c>
 800a140:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a144:	4631      	mov	r1, r6
 800a146:	4628      	mov	r0, r5
 800a148:	47b8      	blx	r7
 800a14a:	3001      	adds	r0, #1
 800a14c:	f43f af45 	beq.w	8009fda <_printf_float+0xb6>
 800a150:	f04f 0900 	mov.w	r9, #0
 800a154:	f108 38ff 	add.w	r8, r8, #4294967295
 800a158:	f104 0a1a 	add.w	sl, r4, #26
 800a15c:	45c8      	cmp	r8, r9
 800a15e:	dc09      	bgt.n	800a174 <_printf_float+0x250>
 800a160:	6823      	ldr	r3, [r4, #0]
 800a162:	079b      	lsls	r3, r3, #30
 800a164:	f100 8103 	bmi.w	800a36e <_printf_float+0x44a>
 800a168:	68e0      	ldr	r0, [r4, #12]
 800a16a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a16c:	4298      	cmp	r0, r3
 800a16e:	bfb8      	it	lt
 800a170:	4618      	movlt	r0, r3
 800a172:	e734      	b.n	8009fde <_printf_float+0xba>
 800a174:	2301      	movs	r3, #1
 800a176:	4652      	mov	r2, sl
 800a178:	4631      	mov	r1, r6
 800a17a:	4628      	mov	r0, r5
 800a17c:	47b8      	blx	r7
 800a17e:	3001      	adds	r0, #1
 800a180:	f43f af2b 	beq.w	8009fda <_printf_float+0xb6>
 800a184:	f109 0901 	add.w	r9, r9, #1
 800a188:	e7e8      	b.n	800a15c <_printf_float+0x238>
 800a18a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	dc39      	bgt.n	800a204 <_printf_float+0x2e0>
 800a190:	4a1b      	ldr	r2, [pc, #108]	@ (800a200 <_printf_float+0x2dc>)
 800a192:	2301      	movs	r3, #1
 800a194:	4631      	mov	r1, r6
 800a196:	4628      	mov	r0, r5
 800a198:	47b8      	blx	r7
 800a19a:	3001      	adds	r0, #1
 800a19c:	f43f af1d 	beq.w	8009fda <_printf_float+0xb6>
 800a1a0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a1a4:	ea59 0303 	orrs.w	r3, r9, r3
 800a1a8:	d102      	bne.n	800a1b0 <_printf_float+0x28c>
 800a1aa:	6823      	ldr	r3, [r4, #0]
 800a1ac:	07d9      	lsls	r1, r3, #31
 800a1ae:	d5d7      	bpl.n	800a160 <_printf_float+0x23c>
 800a1b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1b4:	4631      	mov	r1, r6
 800a1b6:	4628      	mov	r0, r5
 800a1b8:	47b8      	blx	r7
 800a1ba:	3001      	adds	r0, #1
 800a1bc:	f43f af0d 	beq.w	8009fda <_printf_float+0xb6>
 800a1c0:	f04f 0a00 	mov.w	sl, #0
 800a1c4:	f104 0b1a 	add.w	fp, r4, #26
 800a1c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1ca:	425b      	negs	r3, r3
 800a1cc:	4553      	cmp	r3, sl
 800a1ce:	dc01      	bgt.n	800a1d4 <_printf_float+0x2b0>
 800a1d0:	464b      	mov	r3, r9
 800a1d2:	e793      	b.n	800a0fc <_printf_float+0x1d8>
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	465a      	mov	r2, fp
 800a1d8:	4631      	mov	r1, r6
 800a1da:	4628      	mov	r0, r5
 800a1dc:	47b8      	blx	r7
 800a1de:	3001      	adds	r0, #1
 800a1e0:	f43f aefb 	beq.w	8009fda <_printf_float+0xb6>
 800a1e4:	f10a 0a01 	add.w	sl, sl, #1
 800a1e8:	e7ee      	b.n	800a1c8 <_printf_float+0x2a4>
 800a1ea:	bf00      	nop
 800a1ec:	7fefffff 	.word	0x7fefffff
 800a1f0:	0800eb00 	.word	0x0800eb00
 800a1f4:	0800eafc 	.word	0x0800eafc
 800a1f8:	0800eb08 	.word	0x0800eb08
 800a1fc:	0800eb04 	.word	0x0800eb04
 800a200:	0800eb0c 	.word	0x0800eb0c
 800a204:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a206:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a20a:	4553      	cmp	r3, sl
 800a20c:	bfa8      	it	ge
 800a20e:	4653      	movge	r3, sl
 800a210:	2b00      	cmp	r3, #0
 800a212:	4699      	mov	r9, r3
 800a214:	dc36      	bgt.n	800a284 <_printf_float+0x360>
 800a216:	f04f 0b00 	mov.w	fp, #0
 800a21a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a21e:	f104 021a 	add.w	r2, r4, #26
 800a222:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a224:	9306      	str	r3, [sp, #24]
 800a226:	eba3 0309 	sub.w	r3, r3, r9
 800a22a:	455b      	cmp	r3, fp
 800a22c:	dc31      	bgt.n	800a292 <_printf_float+0x36e>
 800a22e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a230:	459a      	cmp	sl, r3
 800a232:	dc3a      	bgt.n	800a2aa <_printf_float+0x386>
 800a234:	6823      	ldr	r3, [r4, #0]
 800a236:	07da      	lsls	r2, r3, #31
 800a238:	d437      	bmi.n	800a2aa <_printf_float+0x386>
 800a23a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a23c:	ebaa 0903 	sub.w	r9, sl, r3
 800a240:	9b06      	ldr	r3, [sp, #24]
 800a242:	ebaa 0303 	sub.w	r3, sl, r3
 800a246:	4599      	cmp	r9, r3
 800a248:	bfa8      	it	ge
 800a24a:	4699      	movge	r9, r3
 800a24c:	f1b9 0f00 	cmp.w	r9, #0
 800a250:	dc33      	bgt.n	800a2ba <_printf_float+0x396>
 800a252:	f04f 0800 	mov.w	r8, #0
 800a256:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a25a:	f104 0b1a 	add.w	fp, r4, #26
 800a25e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a260:	ebaa 0303 	sub.w	r3, sl, r3
 800a264:	eba3 0309 	sub.w	r3, r3, r9
 800a268:	4543      	cmp	r3, r8
 800a26a:	f77f af79 	ble.w	800a160 <_printf_float+0x23c>
 800a26e:	2301      	movs	r3, #1
 800a270:	465a      	mov	r2, fp
 800a272:	4631      	mov	r1, r6
 800a274:	4628      	mov	r0, r5
 800a276:	47b8      	blx	r7
 800a278:	3001      	adds	r0, #1
 800a27a:	f43f aeae 	beq.w	8009fda <_printf_float+0xb6>
 800a27e:	f108 0801 	add.w	r8, r8, #1
 800a282:	e7ec      	b.n	800a25e <_printf_float+0x33a>
 800a284:	4642      	mov	r2, r8
 800a286:	4631      	mov	r1, r6
 800a288:	4628      	mov	r0, r5
 800a28a:	47b8      	blx	r7
 800a28c:	3001      	adds	r0, #1
 800a28e:	d1c2      	bne.n	800a216 <_printf_float+0x2f2>
 800a290:	e6a3      	b.n	8009fda <_printf_float+0xb6>
 800a292:	2301      	movs	r3, #1
 800a294:	4631      	mov	r1, r6
 800a296:	4628      	mov	r0, r5
 800a298:	9206      	str	r2, [sp, #24]
 800a29a:	47b8      	blx	r7
 800a29c:	3001      	adds	r0, #1
 800a29e:	f43f ae9c 	beq.w	8009fda <_printf_float+0xb6>
 800a2a2:	9a06      	ldr	r2, [sp, #24]
 800a2a4:	f10b 0b01 	add.w	fp, fp, #1
 800a2a8:	e7bb      	b.n	800a222 <_printf_float+0x2fe>
 800a2aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2ae:	4631      	mov	r1, r6
 800a2b0:	4628      	mov	r0, r5
 800a2b2:	47b8      	blx	r7
 800a2b4:	3001      	adds	r0, #1
 800a2b6:	d1c0      	bne.n	800a23a <_printf_float+0x316>
 800a2b8:	e68f      	b.n	8009fda <_printf_float+0xb6>
 800a2ba:	9a06      	ldr	r2, [sp, #24]
 800a2bc:	464b      	mov	r3, r9
 800a2be:	4442      	add	r2, r8
 800a2c0:	4631      	mov	r1, r6
 800a2c2:	4628      	mov	r0, r5
 800a2c4:	47b8      	blx	r7
 800a2c6:	3001      	adds	r0, #1
 800a2c8:	d1c3      	bne.n	800a252 <_printf_float+0x32e>
 800a2ca:	e686      	b.n	8009fda <_printf_float+0xb6>
 800a2cc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a2d0:	f1ba 0f01 	cmp.w	sl, #1
 800a2d4:	dc01      	bgt.n	800a2da <_printf_float+0x3b6>
 800a2d6:	07db      	lsls	r3, r3, #31
 800a2d8:	d536      	bpl.n	800a348 <_printf_float+0x424>
 800a2da:	2301      	movs	r3, #1
 800a2dc:	4642      	mov	r2, r8
 800a2de:	4631      	mov	r1, r6
 800a2e0:	4628      	mov	r0, r5
 800a2e2:	47b8      	blx	r7
 800a2e4:	3001      	adds	r0, #1
 800a2e6:	f43f ae78 	beq.w	8009fda <_printf_float+0xb6>
 800a2ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2ee:	4631      	mov	r1, r6
 800a2f0:	4628      	mov	r0, r5
 800a2f2:	47b8      	blx	r7
 800a2f4:	3001      	adds	r0, #1
 800a2f6:	f43f ae70 	beq.w	8009fda <_printf_float+0xb6>
 800a2fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a2fe:	2200      	movs	r2, #0
 800a300:	2300      	movs	r3, #0
 800a302:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a306:	f7f6 fbdf 	bl	8000ac8 <__aeabi_dcmpeq>
 800a30a:	b9c0      	cbnz	r0, 800a33e <_printf_float+0x41a>
 800a30c:	4653      	mov	r3, sl
 800a30e:	f108 0201 	add.w	r2, r8, #1
 800a312:	4631      	mov	r1, r6
 800a314:	4628      	mov	r0, r5
 800a316:	47b8      	blx	r7
 800a318:	3001      	adds	r0, #1
 800a31a:	d10c      	bne.n	800a336 <_printf_float+0x412>
 800a31c:	e65d      	b.n	8009fda <_printf_float+0xb6>
 800a31e:	2301      	movs	r3, #1
 800a320:	465a      	mov	r2, fp
 800a322:	4631      	mov	r1, r6
 800a324:	4628      	mov	r0, r5
 800a326:	47b8      	blx	r7
 800a328:	3001      	adds	r0, #1
 800a32a:	f43f ae56 	beq.w	8009fda <_printf_float+0xb6>
 800a32e:	f108 0801 	add.w	r8, r8, #1
 800a332:	45d0      	cmp	r8, sl
 800a334:	dbf3      	blt.n	800a31e <_printf_float+0x3fa>
 800a336:	464b      	mov	r3, r9
 800a338:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a33c:	e6df      	b.n	800a0fe <_printf_float+0x1da>
 800a33e:	f04f 0800 	mov.w	r8, #0
 800a342:	f104 0b1a 	add.w	fp, r4, #26
 800a346:	e7f4      	b.n	800a332 <_printf_float+0x40e>
 800a348:	2301      	movs	r3, #1
 800a34a:	4642      	mov	r2, r8
 800a34c:	e7e1      	b.n	800a312 <_printf_float+0x3ee>
 800a34e:	2301      	movs	r3, #1
 800a350:	464a      	mov	r2, r9
 800a352:	4631      	mov	r1, r6
 800a354:	4628      	mov	r0, r5
 800a356:	47b8      	blx	r7
 800a358:	3001      	adds	r0, #1
 800a35a:	f43f ae3e 	beq.w	8009fda <_printf_float+0xb6>
 800a35e:	f108 0801 	add.w	r8, r8, #1
 800a362:	68e3      	ldr	r3, [r4, #12]
 800a364:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a366:	1a5b      	subs	r3, r3, r1
 800a368:	4543      	cmp	r3, r8
 800a36a:	dcf0      	bgt.n	800a34e <_printf_float+0x42a>
 800a36c:	e6fc      	b.n	800a168 <_printf_float+0x244>
 800a36e:	f04f 0800 	mov.w	r8, #0
 800a372:	f104 0919 	add.w	r9, r4, #25
 800a376:	e7f4      	b.n	800a362 <_printf_float+0x43e>

0800a378 <_printf_common>:
 800a378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a37c:	4616      	mov	r6, r2
 800a37e:	4698      	mov	r8, r3
 800a380:	688a      	ldr	r2, [r1, #8]
 800a382:	690b      	ldr	r3, [r1, #16]
 800a384:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a388:	4293      	cmp	r3, r2
 800a38a:	bfb8      	it	lt
 800a38c:	4613      	movlt	r3, r2
 800a38e:	6033      	str	r3, [r6, #0]
 800a390:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a394:	4607      	mov	r7, r0
 800a396:	460c      	mov	r4, r1
 800a398:	b10a      	cbz	r2, 800a39e <_printf_common+0x26>
 800a39a:	3301      	adds	r3, #1
 800a39c:	6033      	str	r3, [r6, #0]
 800a39e:	6823      	ldr	r3, [r4, #0]
 800a3a0:	0699      	lsls	r1, r3, #26
 800a3a2:	bf42      	ittt	mi
 800a3a4:	6833      	ldrmi	r3, [r6, #0]
 800a3a6:	3302      	addmi	r3, #2
 800a3a8:	6033      	strmi	r3, [r6, #0]
 800a3aa:	6825      	ldr	r5, [r4, #0]
 800a3ac:	f015 0506 	ands.w	r5, r5, #6
 800a3b0:	d106      	bne.n	800a3c0 <_printf_common+0x48>
 800a3b2:	f104 0a19 	add.w	sl, r4, #25
 800a3b6:	68e3      	ldr	r3, [r4, #12]
 800a3b8:	6832      	ldr	r2, [r6, #0]
 800a3ba:	1a9b      	subs	r3, r3, r2
 800a3bc:	42ab      	cmp	r3, r5
 800a3be:	dc26      	bgt.n	800a40e <_printf_common+0x96>
 800a3c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a3c4:	6822      	ldr	r2, [r4, #0]
 800a3c6:	3b00      	subs	r3, #0
 800a3c8:	bf18      	it	ne
 800a3ca:	2301      	movne	r3, #1
 800a3cc:	0692      	lsls	r2, r2, #26
 800a3ce:	d42b      	bmi.n	800a428 <_printf_common+0xb0>
 800a3d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a3d4:	4641      	mov	r1, r8
 800a3d6:	4638      	mov	r0, r7
 800a3d8:	47c8      	blx	r9
 800a3da:	3001      	adds	r0, #1
 800a3dc:	d01e      	beq.n	800a41c <_printf_common+0xa4>
 800a3de:	6823      	ldr	r3, [r4, #0]
 800a3e0:	6922      	ldr	r2, [r4, #16]
 800a3e2:	f003 0306 	and.w	r3, r3, #6
 800a3e6:	2b04      	cmp	r3, #4
 800a3e8:	bf02      	ittt	eq
 800a3ea:	68e5      	ldreq	r5, [r4, #12]
 800a3ec:	6833      	ldreq	r3, [r6, #0]
 800a3ee:	1aed      	subeq	r5, r5, r3
 800a3f0:	68a3      	ldr	r3, [r4, #8]
 800a3f2:	bf0c      	ite	eq
 800a3f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a3f8:	2500      	movne	r5, #0
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	bfc4      	itt	gt
 800a3fe:	1a9b      	subgt	r3, r3, r2
 800a400:	18ed      	addgt	r5, r5, r3
 800a402:	2600      	movs	r6, #0
 800a404:	341a      	adds	r4, #26
 800a406:	42b5      	cmp	r5, r6
 800a408:	d11a      	bne.n	800a440 <_printf_common+0xc8>
 800a40a:	2000      	movs	r0, #0
 800a40c:	e008      	b.n	800a420 <_printf_common+0xa8>
 800a40e:	2301      	movs	r3, #1
 800a410:	4652      	mov	r2, sl
 800a412:	4641      	mov	r1, r8
 800a414:	4638      	mov	r0, r7
 800a416:	47c8      	blx	r9
 800a418:	3001      	adds	r0, #1
 800a41a:	d103      	bne.n	800a424 <_printf_common+0xac>
 800a41c:	f04f 30ff 	mov.w	r0, #4294967295
 800a420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a424:	3501      	adds	r5, #1
 800a426:	e7c6      	b.n	800a3b6 <_printf_common+0x3e>
 800a428:	18e1      	adds	r1, r4, r3
 800a42a:	1c5a      	adds	r2, r3, #1
 800a42c:	2030      	movs	r0, #48	@ 0x30
 800a42e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a432:	4422      	add	r2, r4
 800a434:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a438:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a43c:	3302      	adds	r3, #2
 800a43e:	e7c7      	b.n	800a3d0 <_printf_common+0x58>
 800a440:	2301      	movs	r3, #1
 800a442:	4622      	mov	r2, r4
 800a444:	4641      	mov	r1, r8
 800a446:	4638      	mov	r0, r7
 800a448:	47c8      	blx	r9
 800a44a:	3001      	adds	r0, #1
 800a44c:	d0e6      	beq.n	800a41c <_printf_common+0xa4>
 800a44e:	3601      	adds	r6, #1
 800a450:	e7d9      	b.n	800a406 <_printf_common+0x8e>
	...

0800a454 <_printf_i>:
 800a454:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a458:	7e0f      	ldrb	r7, [r1, #24]
 800a45a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a45c:	2f78      	cmp	r7, #120	@ 0x78
 800a45e:	4691      	mov	r9, r2
 800a460:	4680      	mov	r8, r0
 800a462:	460c      	mov	r4, r1
 800a464:	469a      	mov	sl, r3
 800a466:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a46a:	d807      	bhi.n	800a47c <_printf_i+0x28>
 800a46c:	2f62      	cmp	r7, #98	@ 0x62
 800a46e:	d80a      	bhi.n	800a486 <_printf_i+0x32>
 800a470:	2f00      	cmp	r7, #0
 800a472:	f000 80d1 	beq.w	800a618 <_printf_i+0x1c4>
 800a476:	2f58      	cmp	r7, #88	@ 0x58
 800a478:	f000 80b8 	beq.w	800a5ec <_printf_i+0x198>
 800a47c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a480:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a484:	e03a      	b.n	800a4fc <_printf_i+0xa8>
 800a486:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a48a:	2b15      	cmp	r3, #21
 800a48c:	d8f6      	bhi.n	800a47c <_printf_i+0x28>
 800a48e:	a101      	add	r1, pc, #4	@ (adr r1, 800a494 <_printf_i+0x40>)
 800a490:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a494:	0800a4ed 	.word	0x0800a4ed
 800a498:	0800a501 	.word	0x0800a501
 800a49c:	0800a47d 	.word	0x0800a47d
 800a4a0:	0800a47d 	.word	0x0800a47d
 800a4a4:	0800a47d 	.word	0x0800a47d
 800a4a8:	0800a47d 	.word	0x0800a47d
 800a4ac:	0800a501 	.word	0x0800a501
 800a4b0:	0800a47d 	.word	0x0800a47d
 800a4b4:	0800a47d 	.word	0x0800a47d
 800a4b8:	0800a47d 	.word	0x0800a47d
 800a4bc:	0800a47d 	.word	0x0800a47d
 800a4c0:	0800a5ff 	.word	0x0800a5ff
 800a4c4:	0800a52b 	.word	0x0800a52b
 800a4c8:	0800a5b9 	.word	0x0800a5b9
 800a4cc:	0800a47d 	.word	0x0800a47d
 800a4d0:	0800a47d 	.word	0x0800a47d
 800a4d4:	0800a621 	.word	0x0800a621
 800a4d8:	0800a47d 	.word	0x0800a47d
 800a4dc:	0800a52b 	.word	0x0800a52b
 800a4e0:	0800a47d 	.word	0x0800a47d
 800a4e4:	0800a47d 	.word	0x0800a47d
 800a4e8:	0800a5c1 	.word	0x0800a5c1
 800a4ec:	6833      	ldr	r3, [r6, #0]
 800a4ee:	1d1a      	adds	r2, r3, #4
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	6032      	str	r2, [r6, #0]
 800a4f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a4f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	e09c      	b.n	800a63a <_printf_i+0x1e6>
 800a500:	6833      	ldr	r3, [r6, #0]
 800a502:	6820      	ldr	r0, [r4, #0]
 800a504:	1d19      	adds	r1, r3, #4
 800a506:	6031      	str	r1, [r6, #0]
 800a508:	0606      	lsls	r6, r0, #24
 800a50a:	d501      	bpl.n	800a510 <_printf_i+0xbc>
 800a50c:	681d      	ldr	r5, [r3, #0]
 800a50e:	e003      	b.n	800a518 <_printf_i+0xc4>
 800a510:	0645      	lsls	r5, r0, #25
 800a512:	d5fb      	bpl.n	800a50c <_printf_i+0xb8>
 800a514:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a518:	2d00      	cmp	r5, #0
 800a51a:	da03      	bge.n	800a524 <_printf_i+0xd0>
 800a51c:	232d      	movs	r3, #45	@ 0x2d
 800a51e:	426d      	negs	r5, r5
 800a520:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a524:	4858      	ldr	r0, [pc, #352]	@ (800a688 <_printf_i+0x234>)
 800a526:	230a      	movs	r3, #10
 800a528:	e011      	b.n	800a54e <_printf_i+0xfa>
 800a52a:	6821      	ldr	r1, [r4, #0]
 800a52c:	6833      	ldr	r3, [r6, #0]
 800a52e:	0608      	lsls	r0, r1, #24
 800a530:	f853 5b04 	ldr.w	r5, [r3], #4
 800a534:	d402      	bmi.n	800a53c <_printf_i+0xe8>
 800a536:	0649      	lsls	r1, r1, #25
 800a538:	bf48      	it	mi
 800a53a:	b2ad      	uxthmi	r5, r5
 800a53c:	2f6f      	cmp	r7, #111	@ 0x6f
 800a53e:	4852      	ldr	r0, [pc, #328]	@ (800a688 <_printf_i+0x234>)
 800a540:	6033      	str	r3, [r6, #0]
 800a542:	bf14      	ite	ne
 800a544:	230a      	movne	r3, #10
 800a546:	2308      	moveq	r3, #8
 800a548:	2100      	movs	r1, #0
 800a54a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a54e:	6866      	ldr	r6, [r4, #4]
 800a550:	60a6      	str	r6, [r4, #8]
 800a552:	2e00      	cmp	r6, #0
 800a554:	db05      	blt.n	800a562 <_printf_i+0x10e>
 800a556:	6821      	ldr	r1, [r4, #0]
 800a558:	432e      	orrs	r6, r5
 800a55a:	f021 0104 	bic.w	r1, r1, #4
 800a55e:	6021      	str	r1, [r4, #0]
 800a560:	d04b      	beq.n	800a5fa <_printf_i+0x1a6>
 800a562:	4616      	mov	r6, r2
 800a564:	fbb5 f1f3 	udiv	r1, r5, r3
 800a568:	fb03 5711 	mls	r7, r3, r1, r5
 800a56c:	5dc7      	ldrb	r7, [r0, r7]
 800a56e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a572:	462f      	mov	r7, r5
 800a574:	42bb      	cmp	r3, r7
 800a576:	460d      	mov	r5, r1
 800a578:	d9f4      	bls.n	800a564 <_printf_i+0x110>
 800a57a:	2b08      	cmp	r3, #8
 800a57c:	d10b      	bne.n	800a596 <_printf_i+0x142>
 800a57e:	6823      	ldr	r3, [r4, #0]
 800a580:	07df      	lsls	r7, r3, #31
 800a582:	d508      	bpl.n	800a596 <_printf_i+0x142>
 800a584:	6923      	ldr	r3, [r4, #16]
 800a586:	6861      	ldr	r1, [r4, #4]
 800a588:	4299      	cmp	r1, r3
 800a58a:	bfde      	ittt	le
 800a58c:	2330      	movle	r3, #48	@ 0x30
 800a58e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a592:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a596:	1b92      	subs	r2, r2, r6
 800a598:	6122      	str	r2, [r4, #16]
 800a59a:	f8cd a000 	str.w	sl, [sp]
 800a59e:	464b      	mov	r3, r9
 800a5a0:	aa03      	add	r2, sp, #12
 800a5a2:	4621      	mov	r1, r4
 800a5a4:	4640      	mov	r0, r8
 800a5a6:	f7ff fee7 	bl	800a378 <_printf_common>
 800a5aa:	3001      	adds	r0, #1
 800a5ac:	d14a      	bne.n	800a644 <_printf_i+0x1f0>
 800a5ae:	f04f 30ff 	mov.w	r0, #4294967295
 800a5b2:	b004      	add	sp, #16
 800a5b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5b8:	6823      	ldr	r3, [r4, #0]
 800a5ba:	f043 0320 	orr.w	r3, r3, #32
 800a5be:	6023      	str	r3, [r4, #0]
 800a5c0:	4832      	ldr	r0, [pc, #200]	@ (800a68c <_printf_i+0x238>)
 800a5c2:	2778      	movs	r7, #120	@ 0x78
 800a5c4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a5c8:	6823      	ldr	r3, [r4, #0]
 800a5ca:	6831      	ldr	r1, [r6, #0]
 800a5cc:	061f      	lsls	r7, r3, #24
 800a5ce:	f851 5b04 	ldr.w	r5, [r1], #4
 800a5d2:	d402      	bmi.n	800a5da <_printf_i+0x186>
 800a5d4:	065f      	lsls	r7, r3, #25
 800a5d6:	bf48      	it	mi
 800a5d8:	b2ad      	uxthmi	r5, r5
 800a5da:	6031      	str	r1, [r6, #0]
 800a5dc:	07d9      	lsls	r1, r3, #31
 800a5de:	bf44      	itt	mi
 800a5e0:	f043 0320 	orrmi.w	r3, r3, #32
 800a5e4:	6023      	strmi	r3, [r4, #0]
 800a5e6:	b11d      	cbz	r5, 800a5f0 <_printf_i+0x19c>
 800a5e8:	2310      	movs	r3, #16
 800a5ea:	e7ad      	b.n	800a548 <_printf_i+0xf4>
 800a5ec:	4826      	ldr	r0, [pc, #152]	@ (800a688 <_printf_i+0x234>)
 800a5ee:	e7e9      	b.n	800a5c4 <_printf_i+0x170>
 800a5f0:	6823      	ldr	r3, [r4, #0]
 800a5f2:	f023 0320 	bic.w	r3, r3, #32
 800a5f6:	6023      	str	r3, [r4, #0]
 800a5f8:	e7f6      	b.n	800a5e8 <_printf_i+0x194>
 800a5fa:	4616      	mov	r6, r2
 800a5fc:	e7bd      	b.n	800a57a <_printf_i+0x126>
 800a5fe:	6833      	ldr	r3, [r6, #0]
 800a600:	6825      	ldr	r5, [r4, #0]
 800a602:	6961      	ldr	r1, [r4, #20]
 800a604:	1d18      	adds	r0, r3, #4
 800a606:	6030      	str	r0, [r6, #0]
 800a608:	062e      	lsls	r6, r5, #24
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	d501      	bpl.n	800a612 <_printf_i+0x1be>
 800a60e:	6019      	str	r1, [r3, #0]
 800a610:	e002      	b.n	800a618 <_printf_i+0x1c4>
 800a612:	0668      	lsls	r0, r5, #25
 800a614:	d5fb      	bpl.n	800a60e <_printf_i+0x1ba>
 800a616:	8019      	strh	r1, [r3, #0]
 800a618:	2300      	movs	r3, #0
 800a61a:	6123      	str	r3, [r4, #16]
 800a61c:	4616      	mov	r6, r2
 800a61e:	e7bc      	b.n	800a59a <_printf_i+0x146>
 800a620:	6833      	ldr	r3, [r6, #0]
 800a622:	1d1a      	adds	r2, r3, #4
 800a624:	6032      	str	r2, [r6, #0]
 800a626:	681e      	ldr	r6, [r3, #0]
 800a628:	6862      	ldr	r2, [r4, #4]
 800a62a:	2100      	movs	r1, #0
 800a62c:	4630      	mov	r0, r6
 800a62e:	f7f5 fdcf 	bl	80001d0 <memchr>
 800a632:	b108      	cbz	r0, 800a638 <_printf_i+0x1e4>
 800a634:	1b80      	subs	r0, r0, r6
 800a636:	6060      	str	r0, [r4, #4]
 800a638:	6863      	ldr	r3, [r4, #4]
 800a63a:	6123      	str	r3, [r4, #16]
 800a63c:	2300      	movs	r3, #0
 800a63e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a642:	e7aa      	b.n	800a59a <_printf_i+0x146>
 800a644:	6923      	ldr	r3, [r4, #16]
 800a646:	4632      	mov	r2, r6
 800a648:	4649      	mov	r1, r9
 800a64a:	4640      	mov	r0, r8
 800a64c:	47d0      	blx	sl
 800a64e:	3001      	adds	r0, #1
 800a650:	d0ad      	beq.n	800a5ae <_printf_i+0x15a>
 800a652:	6823      	ldr	r3, [r4, #0]
 800a654:	079b      	lsls	r3, r3, #30
 800a656:	d413      	bmi.n	800a680 <_printf_i+0x22c>
 800a658:	68e0      	ldr	r0, [r4, #12]
 800a65a:	9b03      	ldr	r3, [sp, #12]
 800a65c:	4298      	cmp	r0, r3
 800a65e:	bfb8      	it	lt
 800a660:	4618      	movlt	r0, r3
 800a662:	e7a6      	b.n	800a5b2 <_printf_i+0x15e>
 800a664:	2301      	movs	r3, #1
 800a666:	4632      	mov	r2, r6
 800a668:	4649      	mov	r1, r9
 800a66a:	4640      	mov	r0, r8
 800a66c:	47d0      	blx	sl
 800a66e:	3001      	adds	r0, #1
 800a670:	d09d      	beq.n	800a5ae <_printf_i+0x15a>
 800a672:	3501      	adds	r5, #1
 800a674:	68e3      	ldr	r3, [r4, #12]
 800a676:	9903      	ldr	r1, [sp, #12]
 800a678:	1a5b      	subs	r3, r3, r1
 800a67a:	42ab      	cmp	r3, r5
 800a67c:	dcf2      	bgt.n	800a664 <_printf_i+0x210>
 800a67e:	e7eb      	b.n	800a658 <_printf_i+0x204>
 800a680:	2500      	movs	r5, #0
 800a682:	f104 0619 	add.w	r6, r4, #25
 800a686:	e7f5      	b.n	800a674 <_printf_i+0x220>
 800a688:	0800eb0e 	.word	0x0800eb0e
 800a68c:	0800eb1f 	.word	0x0800eb1f

0800a690 <_scanf_float>:
 800a690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a694:	b087      	sub	sp, #28
 800a696:	4691      	mov	r9, r2
 800a698:	9303      	str	r3, [sp, #12]
 800a69a:	688b      	ldr	r3, [r1, #8]
 800a69c:	1e5a      	subs	r2, r3, #1
 800a69e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a6a2:	bf81      	itttt	hi
 800a6a4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a6a8:	eb03 0b05 	addhi.w	fp, r3, r5
 800a6ac:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a6b0:	608b      	strhi	r3, [r1, #8]
 800a6b2:	680b      	ldr	r3, [r1, #0]
 800a6b4:	460a      	mov	r2, r1
 800a6b6:	f04f 0500 	mov.w	r5, #0
 800a6ba:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a6be:	f842 3b1c 	str.w	r3, [r2], #28
 800a6c2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a6c6:	4680      	mov	r8, r0
 800a6c8:	460c      	mov	r4, r1
 800a6ca:	bf98      	it	ls
 800a6cc:	f04f 0b00 	movls.w	fp, #0
 800a6d0:	9201      	str	r2, [sp, #4]
 800a6d2:	4616      	mov	r6, r2
 800a6d4:	46aa      	mov	sl, r5
 800a6d6:	462f      	mov	r7, r5
 800a6d8:	9502      	str	r5, [sp, #8]
 800a6da:	68a2      	ldr	r2, [r4, #8]
 800a6dc:	b15a      	cbz	r2, 800a6f6 <_scanf_float+0x66>
 800a6de:	f8d9 3000 	ldr.w	r3, [r9]
 800a6e2:	781b      	ldrb	r3, [r3, #0]
 800a6e4:	2b4e      	cmp	r3, #78	@ 0x4e
 800a6e6:	d863      	bhi.n	800a7b0 <_scanf_float+0x120>
 800a6e8:	2b40      	cmp	r3, #64	@ 0x40
 800a6ea:	d83b      	bhi.n	800a764 <_scanf_float+0xd4>
 800a6ec:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a6f0:	b2c8      	uxtb	r0, r1
 800a6f2:	280e      	cmp	r0, #14
 800a6f4:	d939      	bls.n	800a76a <_scanf_float+0xda>
 800a6f6:	b11f      	cbz	r7, 800a700 <_scanf_float+0x70>
 800a6f8:	6823      	ldr	r3, [r4, #0]
 800a6fa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a6fe:	6023      	str	r3, [r4, #0]
 800a700:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a704:	f1ba 0f01 	cmp.w	sl, #1
 800a708:	f200 8114 	bhi.w	800a934 <_scanf_float+0x2a4>
 800a70c:	9b01      	ldr	r3, [sp, #4]
 800a70e:	429e      	cmp	r6, r3
 800a710:	f200 8105 	bhi.w	800a91e <_scanf_float+0x28e>
 800a714:	2001      	movs	r0, #1
 800a716:	b007      	add	sp, #28
 800a718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a71c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a720:	2a0d      	cmp	r2, #13
 800a722:	d8e8      	bhi.n	800a6f6 <_scanf_float+0x66>
 800a724:	a101      	add	r1, pc, #4	@ (adr r1, 800a72c <_scanf_float+0x9c>)
 800a726:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a72a:	bf00      	nop
 800a72c:	0800a875 	.word	0x0800a875
 800a730:	0800a6f7 	.word	0x0800a6f7
 800a734:	0800a6f7 	.word	0x0800a6f7
 800a738:	0800a6f7 	.word	0x0800a6f7
 800a73c:	0800a8d1 	.word	0x0800a8d1
 800a740:	0800a8ab 	.word	0x0800a8ab
 800a744:	0800a6f7 	.word	0x0800a6f7
 800a748:	0800a6f7 	.word	0x0800a6f7
 800a74c:	0800a883 	.word	0x0800a883
 800a750:	0800a6f7 	.word	0x0800a6f7
 800a754:	0800a6f7 	.word	0x0800a6f7
 800a758:	0800a6f7 	.word	0x0800a6f7
 800a75c:	0800a6f7 	.word	0x0800a6f7
 800a760:	0800a83f 	.word	0x0800a83f
 800a764:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a768:	e7da      	b.n	800a720 <_scanf_float+0x90>
 800a76a:	290e      	cmp	r1, #14
 800a76c:	d8c3      	bhi.n	800a6f6 <_scanf_float+0x66>
 800a76e:	a001      	add	r0, pc, #4	@ (adr r0, 800a774 <_scanf_float+0xe4>)
 800a770:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a774:	0800a82f 	.word	0x0800a82f
 800a778:	0800a6f7 	.word	0x0800a6f7
 800a77c:	0800a82f 	.word	0x0800a82f
 800a780:	0800a8bf 	.word	0x0800a8bf
 800a784:	0800a6f7 	.word	0x0800a6f7
 800a788:	0800a7d1 	.word	0x0800a7d1
 800a78c:	0800a815 	.word	0x0800a815
 800a790:	0800a815 	.word	0x0800a815
 800a794:	0800a815 	.word	0x0800a815
 800a798:	0800a815 	.word	0x0800a815
 800a79c:	0800a815 	.word	0x0800a815
 800a7a0:	0800a815 	.word	0x0800a815
 800a7a4:	0800a815 	.word	0x0800a815
 800a7a8:	0800a815 	.word	0x0800a815
 800a7ac:	0800a815 	.word	0x0800a815
 800a7b0:	2b6e      	cmp	r3, #110	@ 0x6e
 800a7b2:	d809      	bhi.n	800a7c8 <_scanf_float+0x138>
 800a7b4:	2b60      	cmp	r3, #96	@ 0x60
 800a7b6:	d8b1      	bhi.n	800a71c <_scanf_float+0x8c>
 800a7b8:	2b54      	cmp	r3, #84	@ 0x54
 800a7ba:	d07b      	beq.n	800a8b4 <_scanf_float+0x224>
 800a7bc:	2b59      	cmp	r3, #89	@ 0x59
 800a7be:	d19a      	bne.n	800a6f6 <_scanf_float+0x66>
 800a7c0:	2d07      	cmp	r5, #7
 800a7c2:	d198      	bne.n	800a6f6 <_scanf_float+0x66>
 800a7c4:	2508      	movs	r5, #8
 800a7c6:	e02f      	b.n	800a828 <_scanf_float+0x198>
 800a7c8:	2b74      	cmp	r3, #116	@ 0x74
 800a7ca:	d073      	beq.n	800a8b4 <_scanf_float+0x224>
 800a7cc:	2b79      	cmp	r3, #121	@ 0x79
 800a7ce:	e7f6      	b.n	800a7be <_scanf_float+0x12e>
 800a7d0:	6821      	ldr	r1, [r4, #0]
 800a7d2:	05c8      	lsls	r0, r1, #23
 800a7d4:	d51e      	bpl.n	800a814 <_scanf_float+0x184>
 800a7d6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a7da:	6021      	str	r1, [r4, #0]
 800a7dc:	3701      	adds	r7, #1
 800a7de:	f1bb 0f00 	cmp.w	fp, #0
 800a7e2:	d003      	beq.n	800a7ec <_scanf_float+0x15c>
 800a7e4:	3201      	adds	r2, #1
 800a7e6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a7ea:	60a2      	str	r2, [r4, #8]
 800a7ec:	68a3      	ldr	r3, [r4, #8]
 800a7ee:	3b01      	subs	r3, #1
 800a7f0:	60a3      	str	r3, [r4, #8]
 800a7f2:	6923      	ldr	r3, [r4, #16]
 800a7f4:	3301      	adds	r3, #1
 800a7f6:	6123      	str	r3, [r4, #16]
 800a7f8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800a7fc:	3b01      	subs	r3, #1
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	f8c9 3004 	str.w	r3, [r9, #4]
 800a804:	f340 8082 	ble.w	800a90c <_scanf_float+0x27c>
 800a808:	f8d9 3000 	ldr.w	r3, [r9]
 800a80c:	3301      	adds	r3, #1
 800a80e:	f8c9 3000 	str.w	r3, [r9]
 800a812:	e762      	b.n	800a6da <_scanf_float+0x4a>
 800a814:	eb1a 0105 	adds.w	r1, sl, r5
 800a818:	f47f af6d 	bne.w	800a6f6 <_scanf_float+0x66>
 800a81c:	6822      	ldr	r2, [r4, #0]
 800a81e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a822:	6022      	str	r2, [r4, #0]
 800a824:	460d      	mov	r5, r1
 800a826:	468a      	mov	sl, r1
 800a828:	f806 3b01 	strb.w	r3, [r6], #1
 800a82c:	e7de      	b.n	800a7ec <_scanf_float+0x15c>
 800a82e:	6822      	ldr	r2, [r4, #0]
 800a830:	0610      	lsls	r0, r2, #24
 800a832:	f57f af60 	bpl.w	800a6f6 <_scanf_float+0x66>
 800a836:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a83a:	6022      	str	r2, [r4, #0]
 800a83c:	e7f4      	b.n	800a828 <_scanf_float+0x198>
 800a83e:	f1ba 0f00 	cmp.w	sl, #0
 800a842:	d10c      	bne.n	800a85e <_scanf_float+0x1ce>
 800a844:	b977      	cbnz	r7, 800a864 <_scanf_float+0x1d4>
 800a846:	6822      	ldr	r2, [r4, #0]
 800a848:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a84c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a850:	d108      	bne.n	800a864 <_scanf_float+0x1d4>
 800a852:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a856:	6022      	str	r2, [r4, #0]
 800a858:	f04f 0a01 	mov.w	sl, #1
 800a85c:	e7e4      	b.n	800a828 <_scanf_float+0x198>
 800a85e:	f1ba 0f02 	cmp.w	sl, #2
 800a862:	d050      	beq.n	800a906 <_scanf_float+0x276>
 800a864:	2d01      	cmp	r5, #1
 800a866:	d002      	beq.n	800a86e <_scanf_float+0x1de>
 800a868:	2d04      	cmp	r5, #4
 800a86a:	f47f af44 	bne.w	800a6f6 <_scanf_float+0x66>
 800a86e:	3501      	adds	r5, #1
 800a870:	b2ed      	uxtb	r5, r5
 800a872:	e7d9      	b.n	800a828 <_scanf_float+0x198>
 800a874:	f1ba 0f01 	cmp.w	sl, #1
 800a878:	f47f af3d 	bne.w	800a6f6 <_scanf_float+0x66>
 800a87c:	f04f 0a02 	mov.w	sl, #2
 800a880:	e7d2      	b.n	800a828 <_scanf_float+0x198>
 800a882:	b975      	cbnz	r5, 800a8a2 <_scanf_float+0x212>
 800a884:	2f00      	cmp	r7, #0
 800a886:	f47f af37 	bne.w	800a6f8 <_scanf_float+0x68>
 800a88a:	6822      	ldr	r2, [r4, #0]
 800a88c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a890:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a894:	f040 8103 	bne.w	800aa9e <_scanf_float+0x40e>
 800a898:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a89c:	6022      	str	r2, [r4, #0]
 800a89e:	2501      	movs	r5, #1
 800a8a0:	e7c2      	b.n	800a828 <_scanf_float+0x198>
 800a8a2:	2d03      	cmp	r5, #3
 800a8a4:	d0e3      	beq.n	800a86e <_scanf_float+0x1de>
 800a8a6:	2d05      	cmp	r5, #5
 800a8a8:	e7df      	b.n	800a86a <_scanf_float+0x1da>
 800a8aa:	2d02      	cmp	r5, #2
 800a8ac:	f47f af23 	bne.w	800a6f6 <_scanf_float+0x66>
 800a8b0:	2503      	movs	r5, #3
 800a8b2:	e7b9      	b.n	800a828 <_scanf_float+0x198>
 800a8b4:	2d06      	cmp	r5, #6
 800a8b6:	f47f af1e 	bne.w	800a6f6 <_scanf_float+0x66>
 800a8ba:	2507      	movs	r5, #7
 800a8bc:	e7b4      	b.n	800a828 <_scanf_float+0x198>
 800a8be:	6822      	ldr	r2, [r4, #0]
 800a8c0:	0591      	lsls	r1, r2, #22
 800a8c2:	f57f af18 	bpl.w	800a6f6 <_scanf_float+0x66>
 800a8c6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a8ca:	6022      	str	r2, [r4, #0]
 800a8cc:	9702      	str	r7, [sp, #8]
 800a8ce:	e7ab      	b.n	800a828 <_scanf_float+0x198>
 800a8d0:	6822      	ldr	r2, [r4, #0]
 800a8d2:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a8d6:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a8da:	d005      	beq.n	800a8e8 <_scanf_float+0x258>
 800a8dc:	0550      	lsls	r0, r2, #21
 800a8de:	f57f af0a 	bpl.w	800a6f6 <_scanf_float+0x66>
 800a8e2:	2f00      	cmp	r7, #0
 800a8e4:	f000 80db 	beq.w	800aa9e <_scanf_float+0x40e>
 800a8e8:	0591      	lsls	r1, r2, #22
 800a8ea:	bf58      	it	pl
 800a8ec:	9902      	ldrpl	r1, [sp, #8]
 800a8ee:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a8f2:	bf58      	it	pl
 800a8f4:	1a79      	subpl	r1, r7, r1
 800a8f6:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a8fa:	bf58      	it	pl
 800a8fc:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a900:	6022      	str	r2, [r4, #0]
 800a902:	2700      	movs	r7, #0
 800a904:	e790      	b.n	800a828 <_scanf_float+0x198>
 800a906:	f04f 0a03 	mov.w	sl, #3
 800a90a:	e78d      	b.n	800a828 <_scanf_float+0x198>
 800a90c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a910:	4649      	mov	r1, r9
 800a912:	4640      	mov	r0, r8
 800a914:	4798      	blx	r3
 800a916:	2800      	cmp	r0, #0
 800a918:	f43f aedf 	beq.w	800a6da <_scanf_float+0x4a>
 800a91c:	e6eb      	b.n	800a6f6 <_scanf_float+0x66>
 800a91e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a922:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a926:	464a      	mov	r2, r9
 800a928:	4640      	mov	r0, r8
 800a92a:	4798      	blx	r3
 800a92c:	6923      	ldr	r3, [r4, #16]
 800a92e:	3b01      	subs	r3, #1
 800a930:	6123      	str	r3, [r4, #16]
 800a932:	e6eb      	b.n	800a70c <_scanf_float+0x7c>
 800a934:	1e6b      	subs	r3, r5, #1
 800a936:	2b06      	cmp	r3, #6
 800a938:	d824      	bhi.n	800a984 <_scanf_float+0x2f4>
 800a93a:	2d02      	cmp	r5, #2
 800a93c:	d836      	bhi.n	800a9ac <_scanf_float+0x31c>
 800a93e:	9b01      	ldr	r3, [sp, #4]
 800a940:	429e      	cmp	r6, r3
 800a942:	f67f aee7 	bls.w	800a714 <_scanf_float+0x84>
 800a946:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a94a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a94e:	464a      	mov	r2, r9
 800a950:	4640      	mov	r0, r8
 800a952:	4798      	blx	r3
 800a954:	6923      	ldr	r3, [r4, #16]
 800a956:	3b01      	subs	r3, #1
 800a958:	6123      	str	r3, [r4, #16]
 800a95a:	e7f0      	b.n	800a93e <_scanf_float+0x2ae>
 800a95c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a960:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a964:	464a      	mov	r2, r9
 800a966:	4640      	mov	r0, r8
 800a968:	4798      	blx	r3
 800a96a:	6923      	ldr	r3, [r4, #16]
 800a96c:	3b01      	subs	r3, #1
 800a96e:	6123      	str	r3, [r4, #16]
 800a970:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a974:	fa5f fa8a 	uxtb.w	sl, sl
 800a978:	f1ba 0f02 	cmp.w	sl, #2
 800a97c:	d1ee      	bne.n	800a95c <_scanf_float+0x2cc>
 800a97e:	3d03      	subs	r5, #3
 800a980:	b2ed      	uxtb	r5, r5
 800a982:	1b76      	subs	r6, r6, r5
 800a984:	6823      	ldr	r3, [r4, #0]
 800a986:	05da      	lsls	r2, r3, #23
 800a988:	d530      	bpl.n	800a9ec <_scanf_float+0x35c>
 800a98a:	055b      	lsls	r3, r3, #21
 800a98c:	d511      	bpl.n	800a9b2 <_scanf_float+0x322>
 800a98e:	9b01      	ldr	r3, [sp, #4]
 800a990:	429e      	cmp	r6, r3
 800a992:	f67f aebf 	bls.w	800a714 <_scanf_float+0x84>
 800a996:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a99a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a99e:	464a      	mov	r2, r9
 800a9a0:	4640      	mov	r0, r8
 800a9a2:	4798      	blx	r3
 800a9a4:	6923      	ldr	r3, [r4, #16]
 800a9a6:	3b01      	subs	r3, #1
 800a9a8:	6123      	str	r3, [r4, #16]
 800a9aa:	e7f0      	b.n	800a98e <_scanf_float+0x2fe>
 800a9ac:	46aa      	mov	sl, r5
 800a9ae:	46b3      	mov	fp, r6
 800a9b0:	e7de      	b.n	800a970 <_scanf_float+0x2e0>
 800a9b2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a9b6:	6923      	ldr	r3, [r4, #16]
 800a9b8:	2965      	cmp	r1, #101	@ 0x65
 800a9ba:	f103 33ff 	add.w	r3, r3, #4294967295
 800a9be:	f106 35ff 	add.w	r5, r6, #4294967295
 800a9c2:	6123      	str	r3, [r4, #16]
 800a9c4:	d00c      	beq.n	800a9e0 <_scanf_float+0x350>
 800a9c6:	2945      	cmp	r1, #69	@ 0x45
 800a9c8:	d00a      	beq.n	800a9e0 <_scanf_float+0x350>
 800a9ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a9ce:	464a      	mov	r2, r9
 800a9d0:	4640      	mov	r0, r8
 800a9d2:	4798      	blx	r3
 800a9d4:	6923      	ldr	r3, [r4, #16]
 800a9d6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a9da:	3b01      	subs	r3, #1
 800a9dc:	1eb5      	subs	r5, r6, #2
 800a9de:	6123      	str	r3, [r4, #16]
 800a9e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a9e4:	464a      	mov	r2, r9
 800a9e6:	4640      	mov	r0, r8
 800a9e8:	4798      	blx	r3
 800a9ea:	462e      	mov	r6, r5
 800a9ec:	6822      	ldr	r2, [r4, #0]
 800a9ee:	f012 0210 	ands.w	r2, r2, #16
 800a9f2:	d001      	beq.n	800a9f8 <_scanf_float+0x368>
 800a9f4:	2000      	movs	r0, #0
 800a9f6:	e68e      	b.n	800a716 <_scanf_float+0x86>
 800a9f8:	7032      	strb	r2, [r6, #0]
 800a9fa:	6823      	ldr	r3, [r4, #0]
 800a9fc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800aa00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa04:	d125      	bne.n	800aa52 <_scanf_float+0x3c2>
 800aa06:	9b02      	ldr	r3, [sp, #8]
 800aa08:	429f      	cmp	r7, r3
 800aa0a:	d00a      	beq.n	800aa22 <_scanf_float+0x392>
 800aa0c:	1bda      	subs	r2, r3, r7
 800aa0e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800aa12:	429e      	cmp	r6, r3
 800aa14:	bf28      	it	cs
 800aa16:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800aa1a:	4922      	ldr	r1, [pc, #136]	@ (800aaa4 <_scanf_float+0x414>)
 800aa1c:	4630      	mov	r0, r6
 800aa1e:	f000 f907 	bl	800ac30 <siprintf>
 800aa22:	9901      	ldr	r1, [sp, #4]
 800aa24:	2200      	movs	r2, #0
 800aa26:	4640      	mov	r0, r8
 800aa28:	f002 fbee 	bl	800d208 <_strtod_r>
 800aa2c:	9b03      	ldr	r3, [sp, #12]
 800aa2e:	6821      	ldr	r1, [r4, #0]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f011 0f02 	tst.w	r1, #2
 800aa36:	ec57 6b10 	vmov	r6, r7, d0
 800aa3a:	f103 0204 	add.w	r2, r3, #4
 800aa3e:	d015      	beq.n	800aa6c <_scanf_float+0x3dc>
 800aa40:	9903      	ldr	r1, [sp, #12]
 800aa42:	600a      	str	r2, [r1, #0]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	e9c3 6700 	strd	r6, r7, [r3]
 800aa4a:	68e3      	ldr	r3, [r4, #12]
 800aa4c:	3301      	adds	r3, #1
 800aa4e:	60e3      	str	r3, [r4, #12]
 800aa50:	e7d0      	b.n	800a9f4 <_scanf_float+0x364>
 800aa52:	9b04      	ldr	r3, [sp, #16]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d0e4      	beq.n	800aa22 <_scanf_float+0x392>
 800aa58:	9905      	ldr	r1, [sp, #20]
 800aa5a:	230a      	movs	r3, #10
 800aa5c:	3101      	adds	r1, #1
 800aa5e:	4640      	mov	r0, r8
 800aa60:	f002 fc52 	bl	800d308 <_strtol_r>
 800aa64:	9b04      	ldr	r3, [sp, #16]
 800aa66:	9e05      	ldr	r6, [sp, #20]
 800aa68:	1ac2      	subs	r2, r0, r3
 800aa6a:	e7d0      	b.n	800aa0e <_scanf_float+0x37e>
 800aa6c:	f011 0f04 	tst.w	r1, #4
 800aa70:	9903      	ldr	r1, [sp, #12]
 800aa72:	600a      	str	r2, [r1, #0]
 800aa74:	d1e6      	bne.n	800aa44 <_scanf_float+0x3b4>
 800aa76:	681d      	ldr	r5, [r3, #0]
 800aa78:	4632      	mov	r2, r6
 800aa7a:	463b      	mov	r3, r7
 800aa7c:	4630      	mov	r0, r6
 800aa7e:	4639      	mov	r1, r7
 800aa80:	f7f6 f854 	bl	8000b2c <__aeabi_dcmpun>
 800aa84:	b128      	cbz	r0, 800aa92 <_scanf_float+0x402>
 800aa86:	4808      	ldr	r0, [pc, #32]	@ (800aaa8 <_scanf_float+0x418>)
 800aa88:	f000 fa68 	bl	800af5c <nanf>
 800aa8c:	ed85 0a00 	vstr	s0, [r5]
 800aa90:	e7db      	b.n	800aa4a <_scanf_float+0x3ba>
 800aa92:	4630      	mov	r0, r6
 800aa94:	4639      	mov	r1, r7
 800aa96:	f7f6 f8a7 	bl	8000be8 <__aeabi_d2f>
 800aa9a:	6028      	str	r0, [r5, #0]
 800aa9c:	e7d5      	b.n	800aa4a <_scanf_float+0x3ba>
 800aa9e:	2700      	movs	r7, #0
 800aaa0:	e62e      	b.n	800a700 <_scanf_float+0x70>
 800aaa2:	bf00      	nop
 800aaa4:	0800eb30 	.word	0x0800eb30
 800aaa8:	0800ec71 	.word	0x0800ec71

0800aaac <std>:
 800aaac:	2300      	movs	r3, #0
 800aaae:	b510      	push	{r4, lr}
 800aab0:	4604      	mov	r4, r0
 800aab2:	e9c0 3300 	strd	r3, r3, [r0]
 800aab6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aaba:	6083      	str	r3, [r0, #8]
 800aabc:	8181      	strh	r1, [r0, #12]
 800aabe:	6643      	str	r3, [r0, #100]	@ 0x64
 800aac0:	81c2      	strh	r2, [r0, #14]
 800aac2:	6183      	str	r3, [r0, #24]
 800aac4:	4619      	mov	r1, r3
 800aac6:	2208      	movs	r2, #8
 800aac8:	305c      	adds	r0, #92	@ 0x5c
 800aaca:	f000 f926 	bl	800ad1a <memset>
 800aace:	4b0d      	ldr	r3, [pc, #52]	@ (800ab04 <std+0x58>)
 800aad0:	6263      	str	r3, [r4, #36]	@ 0x24
 800aad2:	4b0d      	ldr	r3, [pc, #52]	@ (800ab08 <std+0x5c>)
 800aad4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800aad6:	4b0d      	ldr	r3, [pc, #52]	@ (800ab0c <std+0x60>)
 800aad8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800aada:	4b0d      	ldr	r3, [pc, #52]	@ (800ab10 <std+0x64>)
 800aadc:	6323      	str	r3, [r4, #48]	@ 0x30
 800aade:	4b0d      	ldr	r3, [pc, #52]	@ (800ab14 <std+0x68>)
 800aae0:	6224      	str	r4, [r4, #32]
 800aae2:	429c      	cmp	r4, r3
 800aae4:	d006      	beq.n	800aaf4 <std+0x48>
 800aae6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800aaea:	4294      	cmp	r4, r2
 800aaec:	d002      	beq.n	800aaf4 <std+0x48>
 800aaee:	33d0      	adds	r3, #208	@ 0xd0
 800aaf0:	429c      	cmp	r4, r3
 800aaf2:	d105      	bne.n	800ab00 <std+0x54>
 800aaf4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800aaf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aafc:	f000 ba1c 	b.w	800af38 <__retarget_lock_init_recursive>
 800ab00:	bd10      	pop	{r4, pc}
 800ab02:	bf00      	nop
 800ab04:	0800ac75 	.word	0x0800ac75
 800ab08:	0800ac97 	.word	0x0800ac97
 800ab0c:	0800accf 	.word	0x0800accf
 800ab10:	0800acf3 	.word	0x0800acf3
 800ab14:	2000de80 	.word	0x2000de80

0800ab18 <stdio_exit_handler>:
 800ab18:	4a02      	ldr	r2, [pc, #8]	@ (800ab24 <stdio_exit_handler+0xc>)
 800ab1a:	4903      	ldr	r1, [pc, #12]	@ (800ab28 <stdio_exit_handler+0x10>)
 800ab1c:	4803      	ldr	r0, [pc, #12]	@ (800ab2c <stdio_exit_handler+0x14>)
 800ab1e:	f000 b869 	b.w	800abf4 <_fwalk_sglue>
 800ab22:	bf00      	nop
 800ab24:	20000084 	.word	0x20000084
 800ab28:	0800d6c5 	.word	0x0800d6c5
 800ab2c:	20000094 	.word	0x20000094

0800ab30 <cleanup_stdio>:
 800ab30:	6841      	ldr	r1, [r0, #4]
 800ab32:	4b0c      	ldr	r3, [pc, #48]	@ (800ab64 <cleanup_stdio+0x34>)
 800ab34:	4299      	cmp	r1, r3
 800ab36:	b510      	push	{r4, lr}
 800ab38:	4604      	mov	r4, r0
 800ab3a:	d001      	beq.n	800ab40 <cleanup_stdio+0x10>
 800ab3c:	f002 fdc2 	bl	800d6c4 <_fflush_r>
 800ab40:	68a1      	ldr	r1, [r4, #8]
 800ab42:	4b09      	ldr	r3, [pc, #36]	@ (800ab68 <cleanup_stdio+0x38>)
 800ab44:	4299      	cmp	r1, r3
 800ab46:	d002      	beq.n	800ab4e <cleanup_stdio+0x1e>
 800ab48:	4620      	mov	r0, r4
 800ab4a:	f002 fdbb 	bl	800d6c4 <_fflush_r>
 800ab4e:	68e1      	ldr	r1, [r4, #12]
 800ab50:	4b06      	ldr	r3, [pc, #24]	@ (800ab6c <cleanup_stdio+0x3c>)
 800ab52:	4299      	cmp	r1, r3
 800ab54:	d004      	beq.n	800ab60 <cleanup_stdio+0x30>
 800ab56:	4620      	mov	r0, r4
 800ab58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab5c:	f002 bdb2 	b.w	800d6c4 <_fflush_r>
 800ab60:	bd10      	pop	{r4, pc}
 800ab62:	bf00      	nop
 800ab64:	2000de80 	.word	0x2000de80
 800ab68:	2000dee8 	.word	0x2000dee8
 800ab6c:	2000df50 	.word	0x2000df50

0800ab70 <global_stdio_init.part.0>:
 800ab70:	b510      	push	{r4, lr}
 800ab72:	4b0b      	ldr	r3, [pc, #44]	@ (800aba0 <global_stdio_init.part.0+0x30>)
 800ab74:	4c0b      	ldr	r4, [pc, #44]	@ (800aba4 <global_stdio_init.part.0+0x34>)
 800ab76:	4a0c      	ldr	r2, [pc, #48]	@ (800aba8 <global_stdio_init.part.0+0x38>)
 800ab78:	601a      	str	r2, [r3, #0]
 800ab7a:	4620      	mov	r0, r4
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	2104      	movs	r1, #4
 800ab80:	f7ff ff94 	bl	800aaac <std>
 800ab84:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ab88:	2201      	movs	r2, #1
 800ab8a:	2109      	movs	r1, #9
 800ab8c:	f7ff ff8e 	bl	800aaac <std>
 800ab90:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ab94:	2202      	movs	r2, #2
 800ab96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab9a:	2112      	movs	r1, #18
 800ab9c:	f7ff bf86 	b.w	800aaac <std>
 800aba0:	2000dfb8 	.word	0x2000dfb8
 800aba4:	2000de80 	.word	0x2000de80
 800aba8:	0800ab19 	.word	0x0800ab19

0800abac <__sfp_lock_acquire>:
 800abac:	4801      	ldr	r0, [pc, #4]	@ (800abb4 <__sfp_lock_acquire+0x8>)
 800abae:	f000 b9c4 	b.w	800af3a <__retarget_lock_acquire_recursive>
 800abb2:	bf00      	nop
 800abb4:	2000dfc1 	.word	0x2000dfc1

0800abb8 <__sfp_lock_release>:
 800abb8:	4801      	ldr	r0, [pc, #4]	@ (800abc0 <__sfp_lock_release+0x8>)
 800abba:	f000 b9bf 	b.w	800af3c <__retarget_lock_release_recursive>
 800abbe:	bf00      	nop
 800abc0:	2000dfc1 	.word	0x2000dfc1

0800abc4 <__sinit>:
 800abc4:	b510      	push	{r4, lr}
 800abc6:	4604      	mov	r4, r0
 800abc8:	f7ff fff0 	bl	800abac <__sfp_lock_acquire>
 800abcc:	6a23      	ldr	r3, [r4, #32]
 800abce:	b11b      	cbz	r3, 800abd8 <__sinit+0x14>
 800abd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abd4:	f7ff bff0 	b.w	800abb8 <__sfp_lock_release>
 800abd8:	4b04      	ldr	r3, [pc, #16]	@ (800abec <__sinit+0x28>)
 800abda:	6223      	str	r3, [r4, #32]
 800abdc:	4b04      	ldr	r3, [pc, #16]	@ (800abf0 <__sinit+0x2c>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d1f5      	bne.n	800abd0 <__sinit+0xc>
 800abe4:	f7ff ffc4 	bl	800ab70 <global_stdio_init.part.0>
 800abe8:	e7f2      	b.n	800abd0 <__sinit+0xc>
 800abea:	bf00      	nop
 800abec:	0800ab31 	.word	0x0800ab31
 800abf0:	2000dfb8 	.word	0x2000dfb8

0800abf4 <_fwalk_sglue>:
 800abf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abf8:	4607      	mov	r7, r0
 800abfa:	4688      	mov	r8, r1
 800abfc:	4614      	mov	r4, r2
 800abfe:	2600      	movs	r6, #0
 800ac00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac04:	f1b9 0901 	subs.w	r9, r9, #1
 800ac08:	d505      	bpl.n	800ac16 <_fwalk_sglue+0x22>
 800ac0a:	6824      	ldr	r4, [r4, #0]
 800ac0c:	2c00      	cmp	r4, #0
 800ac0e:	d1f7      	bne.n	800ac00 <_fwalk_sglue+0xc>
 800ac10:	4630      	mov	r0, r6
 800ac12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac16:	89ab      	ldrh	r3, [r5, #12]
 800ac18:	2b01      	cmp	r3, #1
 800ac1a:	d907      	bls.n	800ac2c <_fwalk_sglue+0x38>
 800ac1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac20:	3301      	adds	r3, #1
 800ac22:	d003      	beq.n	800ac2c <_fwalk_sglue+0x38>
 800ac24:	4629      	mov	r1, r5
 800ac26:	4638      	mov	r0, r7
 800ac28:	47c0      	blx	r8
 800ac2a:	4306      	orrs	r6, r0
 800ac2c:	3568      	adds	r5, #104	@ 0x68
 800ac2e:	e7e9      	b.n	800ac04 <_fwalk_sglue+0x10>

0800ac30 <siprintf>:
 800ac30:	b40e      	push	{r1, r2, r3}
 800ac32:	b510      	push	{r4, lr}
 800ac34:	b09d      	sub	sp, #116	@ 0x74
 800ac36:	ab1f      	add	r3, sp, #124	@ 0x7c
 800ac38:	9002      	str	r0, [sp, #8]
 800ac3a:	9006      	str	r0, [sp, #24]
 800ac3c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ac40:	480a      	ldr	r0, [pc, #40]	@ (800ac6c <siprintf+0x3c>)
 800ac42:	9107      	str	r1, [sp, #28]
 800ac44:	9104      	str	r1, [sp, #16]
 800ac46:	490a      	ldr	r1, [pc, #40]	@ (800ac70 <siprintf+0x40>)
 800ac48:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac4c:	9105      	str	r1, [sp, #20]
 800ac4e:	2400      	movs	r4, #0
 800ac50:	a902      	add	r1, sp, #8
 800ac52:	6800      	ldr	r0, [r0, #0]
 800ac54:	9301      	str	r3, [sp, #4]
 800ac56:	941b      	str	r4, [sp, #108]	@ 0x6c
 800ac58:	f002 fbb4 	bl	800d3c4 <_svfiprintf_r>
 800ac5c:	9b02      	ldr	r3, [sp, #8]
 800ac5e:	701c      	strb	r4, [r3, #0]
 800ac60:	b01d      	add	sp, #116	@ 0x74
 800ac62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac66:	b003      	add	sp, #12
 800ac68:	4770      	bx	lr
 800ac6a:	bf00      	nop
 800ac6c:	20000090 	.word	0x20000090
 800ac70:	ffff0208 	.word	0xffff0208

0800ac74 <__sread>:
 800ac74:	b510      	push	{r4, lr}
 800ac76:	460c      	mov	r4, r1
 800ac78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac7c:	f000 f8fe 	bl	800ae7c <_read_r>
 800ac80:	2800      	cmp	r0, #0
 800ac82:	bfab      	itete	ge
 800ac84:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ac86:	89a3      	ldrhlt	r3, [r4, #12]
 800ac88:	181b      	addge	r3, r3, r0
 800ac8a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ac8e:	bfac      	ite	ge
 800ac90:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ac92:	81a3      	strhlt	r3, [r4, #12]
 800ac94:	bd10      	pop	{r4, pc}

0800ac96 <__swrite>:
 800ac96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac9a:	461f      	mov	r7, r3
 800ac9c:	898b      	ldrh	r3, [r1, #12]
 800ac9e:	05db      	lsls	r3, r3, #23
 800aca0:	4605      	mov	r5, r0
 800aca2:	460c      	mov	r4, r1
 800aca4:	4616      	mov	r6, r2
 800aca6:	d505      	bpl.n	800acb4 <__swrite+0x1e>
 800aca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acac:	2302      	movs	r3, #2
 800acae:	2200      	movs	r2, #0
 800acb0:	f000 f8d2 	bl	800ae58 <_lseek_r>
 800acb4:	89a3      	ldrh	r3, [r4, #12]
 800acb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800acba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800acbe:	81a3      	strh	r3, [r4, #12]
 800acc0:	4632      	mov	r2, r6
 800acc2:	463b      	mov	r3, r7
 800acc4:	4628      	mov	r0, r5
 800acc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acca:	f000 b8f9 	b.w	800aec0 <_write_r>

0800acce <__sseek>:
 800acce:	b510      	push	{r4, lr}
 800acd0:	460c      	mov	r4, r1
 800acd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acd6:	f000 f8bf 	bl	800ae58 <_lseek_r>
 800acda:	1c43      	adds	r3, r0, #1
 800acdc:	89a3      	ldrh	r3, [r4, #12]
 800acde:	bf15      	itete	ne
 800ace0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ace2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ace6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800acea:	81a3      	strheq	r3, [r4, #12]
 800acec:	bf18      	it	ne
 800acee:	81a3      	strhne	r3, [r4, #12]
 800acf0:	bd10      	pop	{r4, pc}

0800acf2 <__sclose>:
 800acf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acf6:	f000 b841 	b.w	800ad7c <_close_r>

0800acfa <memcmp>:
 800acfa:	b510      	push	{r4, lr}
 800acfc:	3901      	subs	r1, #1
 800acfe:	4402      	add	r2, r0
 800ad00:	4290      	cmp	r0, r2
 800ad02:	d101      	bne.n	800ad08 <memcmp+0xe>
 800ad04:	2000      	movs	r0, #0
 800ad06:	e005      	b.n	800ad14 <memcmp+0x1a>
 800ad08:	7803      	ldrb	r3, [r0, #0]
 800ad0a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ad0e:	42a3      	cmp	r3, r4
 800ad10:	d001      	beq.n	800ad16 <memcmp+0x1c>
 800ad12:	1b18      	subs	r0, r3, r4
 800ad14:	bd10      	pop	{r4, pc}
 800ad16:	3001      	adds	r0, #1
 800ad18:	e7f2      	b.n	800ad00 <memcmp+0x6>

0800ad1a <memset>:
 800ad1a:	4402      	add	r2, r0
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	d100      	bne.n	800ad24 <memset+0xa>
 800ad22:	4770      	bx	lr
 800ad24:	f803 1b01 	strb.w	r1, [r3], #1
 800ad28:	e7f9      	b.n	800ad1e <memset+0x4>

0800ad2a <strncmp>:
 800ad2a:	b510      	push	{r4, lr}
 800ad2c:	b16a      	cbz	r2, 800ad4a <strncmp+0x20>
 800ad2e:	3901      	subs	r1, #1
 800ad30:	1884      	adds	r4, r0, r2
 800ad32:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad36:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ad3a:	429a      	cmp	r2, r3
 800ad3c:	d103      	bne.n	800ad46 <strncmp+0x1c>
 800ad3e:	42a0      	cmp	r0, r4
 800ad40:	d001      	beq.n	800ad46 <strncmp+0x1c>
 800ad42:	2a00      	cmp	r2, #0
 800ad44:	d1f5      	bne.n	800ad32 <strncmp+0x8>
 800ad46:	1ad0      	subs	r0, r2, r3
 800ad48:	bd10      	pop	{r4, pc}
 800ad4a:	4610      	mov	r0, r2
 800ad4c:	e7fc      	b.n	800ad48 <strncmp+0x1e>

0800ad4e <strncpy>:
 800ad4e:	b510      	push	{r4, lr}
 800ad50:	3901      	subs	r1, #1
 800ad52:	4603      	mov	r3, r0
 800ad54:	b132      	cbz	r2, 800ad64 <strncpy+0x16>
 800ad56:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ad5a:	f803 4b01 	strb.w	r4, [r3], #1
 800ad5e:	3a01      	subs	r2, #1
 800ad60:	2c00      	cmp	r4, #0
 800ad62:	d1f7      	bne.n	800ad54 <strncpy+0x6>
 800ad64:	441a      	add	r2, r3
 800ad66:	2100      	movs	r1, #0
 800ad68:	4293      	cmp	r3, r2
 800ad6a:	d100      	bne.n	800ad6e <strncpy+0x20>
 800ad6c:	bd10      	pop	{r4, pc}
 800ad6e:	f803 1b01 	strb.w	r1, [r3], #1
 800ad72:	e7f9      	b.n	800ad68 <strncpy+0x1a>

0800ad74 <_localeconv_r>:
 800ad74:	4800      	ldr	r0, [pc, #0]	@ (800ad78 <_localeconv_r+0x4>)
 800ad76:	4770      	bx	lr
 800ad78:	200001d0 	.word	0x200001d0

0800ad7c <_close_r>:
 800ad7c:	b538      	push	{r3, r4, r5, lr}
 800ad7e:	4d06      	ldr	r5, [pc, #24]	@ (800ad98 <_close_r+0x1c>)
 800ad80:	2300      	movs	r3, #0
 800ad82:	4604      	mov	r4, r0
 800ad84:	4608      	mov	r0, r1
 800ad86:	602b      	str	r3, [r5, #0]
 800ad88:	f7f9 fa14 	bl	80041b4 <_close>
 800ad8c:	1c43      	adds	r3, r0, #1
 800ad8e:	d102      	bne.n	800ad96 <_close_r+0x1a>
 800ad90:	682b      	ldr	r3, [r5, #0]
 800ad92:	b103      	cbz	r3, 800ad96 <_close_r+0x1a>
 800ad94:	6023      	str	r3, [r4, #0]
 800ad96:	bd38      	pop	{r3, r4, r5, pc}
 800ad98:	2000dfbc 	.word	0x2000dfbc

0800ad9c <_reclaim_reent>:
 800ad9c:	4b2d      	ldr	r3, [pc, #180]	@ (800ae54 <_reclaim_reent+0xb8>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	4283      	cmp	r3, r0
 800ada2:	b570      	push	{r4, r5, r6, lr}
 800ada4:	4604      	mov	r4, r0
 800ada6:	d053      	beq.n	800ae50 <_reclaim_reent+0xb4>
 800ada8:	69c3      	ldr	r3, [r0, #28]
 800adaa:	b31b      	cbz	r3, 800adf4 <_reclaim_reent+0x58>
 800adac:	68db      	ldr	r3, [r3, #12]
 800adae:	b163      	cbz	r3, 800adca <_reclaim_reent+0x2e>
 800adb0:	2500      	movs	r5, #0
 800adb2:	69e3      	ldr	r3, [r4, #28]
 800adb4:	68db      	ldr	r3, [r3, #12]
 800adb6:	5959      	ldr	r1, [r3, r5]
 800adb8:	b9b1      	cbnz	r1, 800ade8 <_reclaim_reent+0x4c>
 800adba:	3504      	adds	r5, #4
 800adbc:	2d80      	cmp	r5, #128	@ 0x80
 800adbe:	d1f8      	bne.n	800adb2 <_reclaim_reent+0x16>
 800adc0:	69e3      	ldr	r3, [r4, #28]
 800adc2:	4620      	mov	r0, r4
 800adc4:	68d9      	ldr	r1, [r3, #12]
 800adc6:	f000 ff27 	bl	800bc18 <_free_r>
 800adca:	69e3      	ldr	r3, [r4, #28]
 800adcc:	6819      	ldr	r1, [r3, #0]
 800adce:	b111      	cbz	r1, 800add6 <_reclaim_reent+0x3a>
 800add0:	4620      	mov	r0, r4
 800add2:	f000 ff21 	bl	800bc18 <_free_r>
 800add6:	69e3      	ldr	r3, [r4, #28]
 800add8:	689d      	ldr	r5, [r3, #8]
 800adda:	b15d      	cbz	r5, 800adf4 <_reclaim_reent+0x58>
 800addc:	4629      	mov	r1, r5
 800adde:	4620      	mov	r0, r4
 800ade0:	682d      	ldr	r5, [r5, #0]
 800ade2:	f000 ff19 	bl	800bc18 <_free_r>
 800ade6:	e7f8      	b.n	800adda <_reclaim_reent+0x3e>
 800ade8:	680e      	ldr	r6, [r1, #0]
 800adea:	4620      	mov	r0, r4
 800adec:	f000 ff14 	bl	800bc18 <_free_r>
 800adf0:	4631      	mov	r1, r6
 800adf2:	e7e1      	b.n	800adb8 <_reclaim_reent+0x1c>
 800adf4:	6961      	ldr	r1, [r4, #20]
 800adf6:	b111      	cbz	r1, 800adfe <_reclaim_reent+0x62>
 800adf8:	4620      	mov	r0, r4
 800adfa:	f000 ff0d 	bl	800bc18 <_free_r>
 800adfe:	69e1      	ldr	r1, [r4, #28]
 800ae00:	b111      	cbz	r1, 800ae08 <_reclaim_reent+0x6c>
 800ae02:	4620      	mov	r0, r4
 800ae04:	f000 ff08 	bl	800bc18 <_free_r>
 800ae08:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ae0a:	b111      	cbz	r1, 800ae12 <_reclaim_reent+0x76>
 800ae0c:	4620      	mov	r0, r4
 800ae0e:	f000 ff03 	bl	800bc18 <_free_r>
 800ae12:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ae14:	b111      	cbz	r1, 800ae1c <_reclaim_reent+0x80>
 800ae16:	4620      	mov	r0, r4
 800ae18:	f000 fefe 	bl	800bc18 <_free_r>
 800ae1c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800ae1e:	b111      	cbz	r1, 800ae26 <_reclaim_reent+0x8a>
 800ae20:	4620      	mov	r0, r4
 800ae22:	f000 fef9 	bl	800bc18 <_free_r>
 800ae26:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ae28:	b111      	cbz	r1, 800ae30 <_reclaim_reent+0x94>
 800ae2a:	4620      	mov	r0, r4
 800ae2c:	f000 fef4 	bl	800bc18 <_free_r>
 800ae30:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800ae32:	b111      	cbz	r1, 800ae3a <_reclaim_reent+0x9e>
 800ae34:	4620      	mov	r0, r4
 800ae36:	f000 feef 	bl	800bc18 <_free_r>
 800ae3a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ae3c:	b111      	cbz	r1, 800ae44 <_reclaim_reent+0xa8>
 800ae3e:	4620      	mov	r0, r4
 800ae40:	f000 feea 	bl	800bc18 <_free_r>
 800ae44:	6a23      	ldr	r3, [r4, #32]
 800ae46:	b11b      	cbz	r3, 800ae50 <_reclaim_reent+0xb4>
 800ae48:	4620      	mov	r0, r4
 800ae4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ae4e:	4718      	bx	r3
 800ae50:	bd70      	pop	{r4, r5, r6, pc}
 800ae52:	bf00      	nop
 800ae54:	20000090 	.word	0x20000090

0800ae58 <_lseek_r>:
 800ae58:	b538      	push	{r3, r4, r5, lr}
 800ae5a:	4d07      	ldr	r5, [pc, #28]	@ (800ae78 <_lseek_r+0x20>)
 800ae5c:	4604      	mov	r4, r0
 800ae5e:	4608      	mov	r0, r1
 800ae60:	4611      	mov	r1, r2
 800ae62:	2200      	movs	r2, #0
 800ae64:	602a      	str	r2, [r5, #0]
 800ae66:	461a      	mov	r2, r3
 800ae68:	f7f9 f9cb 	bl	8004202 <_lseek>
 800ae6c:	1c43      	adds	r3, r0, #1
 800ae6e:	d102      	bne.n	800ae76 <_lseek_r+0x1e>
 800ae70:	682b      	ldr	r3, [r5, #0]
 800ae72:	b103      	cbz	r3, 800ae76 <_lseek_r+0x1e>
 800ae74:	6023      	str	r3, [r4, #0]
 800ae76:	bd38      	pop	{r3, r4, r5, pc}
 800ae78:	2000dfbc 	.word	0x2000dfbc

0800ae7c <_read_r>:
 800ae7c:	b538      	push	{r3, r4, r5, lr}
 800ae7e:	4d07      	ldr	r5, [pc, #28]	@ (800ae9c <_read_r+0x20>)
 800ae80:	4604      	mov	r4, r0
 800ae82:	4608      	mov	r0, r1
 800ae84:	4611      	mov	r1, r2
 800ae86:	2200      	movs	r2, #0
 800ae88:	602a      	str	r2, [r5, #0]
 800ae8a:	461a      	mov	r2, r3
 800ae8c:	f7f9 f959 	bl	8004142 <_read>
 800ae90:	1c43      	adds	r3, r0, #1
 800ae92:	d102      	bne.n	800ae9a <_read_r+0x1e>
 800ae94:	682b      	ldr	r3, [r5, #0]
 800ae96:	b103      	cbz	r3, 800ae9a <_read_r+0x1e>
 800ae98:	6023      	str	r3, [r4, #0]
 800ae9a:	bd38      	pop	{r3, r4, r5, pc}
 800ae9c:	2000dfbc 	.word	0x2000dfbc

0800aea0 <_sbrk_r>:
 800aea0:	b538      	push	{r3, r4, r5, lr}
 800aea2:	4d06      	ldr	r5, [pc, #24]	@ (800aebc <_sbrk_r+0x1c>)
 800aea4:	2300      	movs	r3, #0
 800aea6:	4604      	mov	r4, r0
 800aea8:	4608      	mov	r0, r1
 800aeaa:	602b      	str	r3, [r5, #0]
 800aeac:	f7f9 f9b6 	bl	800421c <_sbrk>
 800aeb0:	1c43      	adds	r3, r0, #1
 800aeb2:	d102      	bne.n	800aeba <_sbrk_r+0x1a>
 800aeb4:	682b      	ldr	r3, [r5, #0]
 800aeb6:	b103      	cbz	r3, 800aeba <_sbrk_r+0x1a>
 800aeb8:	6023      	str	r3, [r4, #0]
 800aeba:	bd38      	pop	{r3, r4, r5, pc}
 800aebc:	2000dfbc 	.word	0x2000dfbc

0800aec0 <_write_r>:
 800aec0:	b538      	push	{r3, r4, r5, lr}
 800aec2:	4d07      	ldr	r5, [pc, #28]	@ (800aee0 <_write_r+0x20>)
 800aec4:	4604      	mov	r4, r0
 800aec6:	4608      	mov	r0, r1
 800aec8:	4611      	mov	r1, r2
 800aeca:	2200      	movs	r2, #0
 800aecc:	602a      	str	r2, [r5, #0]
 800aece:	461a      	mov	r2, r3
 800aed0:	f7f9 f954 	bl	800417c <_write>
 800aed4:	1c43      	adds	r3, r0, #1
 800aed6:	d102      	bne.n	800aede <_write_r+0x1e>
 800aed8:	682b      	ldr	r3, [r5, #0]
 800aeda:	b103      	cbz	r3, 800aede <_write_r+0x1e>
 800aedc:	6023      	str	r3, [r4, #0]
 800aede:	bd38      	pop	{r3, r4, r5, pc}
 800aee0:	2000dfbc 	.word	0x2000dfbc

0800aee4 <__errno>:
 800aee4:	4b01      	ldr	r3, [pc, #4]	@ (800aeec <__errno+0x8>)
 800aee6:	6818      	ldr	r0, [r3, #0]
 800aee8:	4770      	bx	lr
 800aeea:	bf00      	nop
 800aeec:	20000090 	.word	0x20000090

0800aef0 <__libc_init_array>:
 800aef0:	b570      	push	{r4, r5, r6, lr}
 800aef2:	4d0d      	ldr	r5, [pc, #52]	@ (800af28 <__libc_init_array+0x38>)
 800aef4:	4c0d      	ldr	r4, [pc, #52]	@ (800af2c <__libc_init_array+0x3c>)
 800aef6:	1b64      	subs	r4, r4, r5
 800aef8:	10a4      	asrs	r4, r4, #2
 800aefa:	2600      	movs	r6, #0
 800aefc:	42a6      	cmp	r6, r4
 800aefe:	d109      	bne.n	800af14 <__libc_init_array+0x24>
 800af00:	4d0b      	ldr	r5, [pc, #44]	@ (800af30 <__libc_init_array+0x40>)
 800af02:	4c0c      	ldr	r4, [pc, #48]	@ (800af34 <__libc_init_array+0x44>)
 800af04:	f003 fa9e 	bl	800e444 <_init>
 800af08:	1b64      	subs	r4, r4, r5
 800af0a:	10a4      	asrs	r4, r4, #2
 800af0c:	2600      	movs	r6, #0
 800af0e:	42a6      	cmp	r6, r4
 800af10:	d105      	bne.n	800af1e <__libc_init_array+0x2e>
 800af12:	bd70      	pop	{r4, r5, r6, pc}
 800af14:	f855 3b04 	ldr.w	r3, [r5], #4
 800af18:	4798      	blx	r3
 800af1a:	3601      	adds	r6, #1
 800af1c:	e7ee      	b.n	800aefc <__libc_init_array+0xc>
 800af1e:	f855 3b04 	ldr.w	r3, [r5], #4
 800af22:	4798      	blx	r3
 800af24:	3601      	adds	r6, #1
 800af26:	e7f2      	b.n	800af0e <__libc_init_array+0x1e>
 800af28:	0800ef2c 	.word	0x0800ef2c
 800af2c:	0800ef2c 	.word	0x0800ef2c
 800af30:	0800ef2c 	.word	0x0800ef2c
 800af34:	0800ef30 	.word	0x0800ef30

0800af38 <__retarget_lock_init_recursive>:
 800af38:	4770      	bx	lr

0800af3a <__retarget_lock_acquire_recursive>:
 800af3a:	4770      	bx	lr

0800af3c <__retarget_lock_release_recursive>:
 800af3c:	4770      	bx	lr

0800af3e <memcpy>:
 800af3e:	440a      	add	r2, r1
 800af40:	4291      	cmp	r1, r2
 800af42:	f100 33ff 	add.w	r3, r0, #4294967295
 800af46:	d100      	bne.n	800af4a <memcpy+0xc>
 800af48:	4770      	bx	lr
 800af4a:	b510      	push	{r4, lr}
 800af4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af50:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af54:	4291      	cmp	r1, r2
 800af56:	d1f9      	bne.n	800af4c <memcpy+0xe>
 800af58:	bd10      	pop	{r4, pc}
	...

0800af5c <nanf>:
 800af5c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800af64 <nanf+0x8>
 800af60:	4770      	bx	lr
 800af62:	bf00      	nop
 800af64:	7fc00000 	.word	0x7fc00000

0800af68 <quorem>:
 800af68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af6c:	6903      	ldr	r3, [r0, #16]
 800af6e:	690c      	ldr	r4, [r1, #16]
 800af70:	42a3      	cmp	r3, r4
 800af72:	4607      	mov	r7, r0
 800af74:	db7e      	blt.n	800b074 <quorem+0x10c>
 800af76:	3c01      	subs	r4, #1
 800af78:	f101 0814 	add.w	r8, r1, #20
 800af7c:	00a3      	lsls	r3, r4, #2
 800af7e:	f100 0514 	add.w	r5, r0, #20
 800af82:	9300      	str	r3, [sp, #0]
 800af84:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af88:	9301      	str	r3, [sp, #4]
 800af8a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800af8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af92:	3301      	adds	r3, #1
 800af94:	429a      	cmp	r2, r3
 800af96:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800af9a:	fbb2 f6f3 	udiv	r6, r2, r3
 800af9e:	d32e      	bcc.n	800affe <quorem+0x96>
 800afa0:	f04f 0a00 	mov.w	sl, #0
 800afa4:	46c4      	mov	ip, r8
 800afa6:	46ae      	mov	lr, r5
 800afa8:	46d3      	mov	fp, sl
 800afaa:	f85c 3b04 	ldr.w	r3, [ip], #4
 800afae:	b298      	uxth	r0, r3
 800afb0:	fb06 a000 	mla	r0, r6, r0, sl
 800afb4:	0c02      	lsrs	r2, r0, #16
 800afb6:	0c1b      	lsrs	r3, r3, #16
 800afb8:	fb06 2303 	mla	r3, r6, r3, r2
 800afbc:	f8de 2000 	ldr.w	r2, [lr]
 800afc0:	b280      	uxth	r0, r0
 800afc2:	b292      	uxth	r2, r2
 800afc4:	1a12      	subs	r2, r2, r0
 800afc6:	445a      	add	r2, fp
 800afc8:	f8de 0000 	ldr.w	r0, [lr]
 800afcc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800afd0:	b29b      	uxth	r3, r3
 800afd2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800afd6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800afda:	b292      	uxth	r2, r2
 800afdc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800afe0:	45e1      	cmp	r9, ip
 800afe2:	f84e 2b04 	str.w	r2, [lr], #4
 800afe6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800afea:	d2de      	bcs.n	800afaa <quorem+0x42>
 800afec:	9b00      	ldr	r3, [sp, #0]
 800afee:	58eb      	ldr	r3, [r5, r3]
 800aff0:	b92b      	cbnz	r3, 800affe <quorem+0x96>
 800aff2:	9b01      	ldr	r3, [sp, #4]
 800aff4:	3b04      	subs	r3, #4
 800aff6:	429d      	cmp	r5, r3
 800aff8:	461a      	mov	r2, r3
 800affa:	d32f      	bcc.n	800b05c <quorem+0xf4>
 800affc:	613c      	str	r4, [r7, #16]
 800affe:	4638      	mov	r0, r7
 800b000:	f001 f910 	bl	800c224 <__mcmp>
 800b004:	2800      	cmp	r0, #0
 800b006:	db25      	blt.n	800b054 <quorem+0xec>
 800b008:	4629      	mov	r1, r5
 800b00a:	2000      	movs	r0, #0
 800b00c:	f858 2b04 	ldr.w	r2, [r8], #4
 800b010:	f8d1 c000 	ldr.w	ip, [r1]
 800b014:	fa1f fe82 	uxth.w	lr, r2
 800b018:	fa1f f38c 	uxth.w	r3, ip
 800b01c:	eba3 030e 	sub.w	r3, r3, lr
 800b020:	4403      	add	r3, r0
 800b022:	0c12      	lsrs	r2, r2, #16
 800b024:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b028:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b02c:	b29b      	uxth	r3, r3
 800b02e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b032:	45c1      	cmp	r9, r8
 800b034:	f841 3b04 	str.w	r3, [r1], #4
 800b038:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b03c:	d2e6      	bcs.n	800b00c <quorem+0xa4>
 800b03e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b042:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b046:	b922      	cbnz	r2, 800b052 <quorem+0xea>
 800b048:	3b04      	subs	r3, #4
 800b04a:	429d      	cmp	r5, r3
 800b04c:	461a      	mov	r2, r3
 800b04e:	d30b      	bcc.n	800b068 <quorem+0x100>
 800b050:	613c      	str	r4, [r7, #16]
 800b052:	3601      	adds	r6, #1
 800b054:	4630      	mov	r0, r6
 800b056:	b003      	add	sp, #12
 800b058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b05c:	6812      	ldr	r2, [r2, #0]
 800b05e:	3b04      	subs	r3, #4
 800b060:	2a00      	cmp	r2, #0
 800b062:	d1cb      	bne.n	800affc <quorem+0x94>
 800b064:	3c01      	subs	r4, #1
 800b066:	e7c6      	b.n	800aff6 <quorem+0x8e>
 800b068:	6812      	ldr	r2, [r2, #0]
 800b06a:	3b04      	subs	r3, #4
 800b06c:	2a00      	cmp	r2, #0
 800b06e:	d1ef      	bne.n	800b050 <quorem+0xe8>
 800b070:	3c01      	subs	r4, #1
 800b072:	e7ea      	b.n	800b04a <quorem+0xe2>
 800b074:	2000      	movs	r0, #0
 800b076:	e7ee      	b.n	800b056 <quorem+0xee>

0800b078 <_dtoa_r>:
 800b078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b07c:	69c7      	ldr	r7, [r0, #28]
 800b07e:	b097      	sub	sp, #92	@ 0x5c
 800b080:	ed8d 0b04 	vstr	d0, [sp, #16]
 800b084:	ec55 4b10 	vmov	r4, r5, d0
 800b088:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800b08a:	9107      	str	r1, [sp, #28]
 800b08c:	4681      	mov	r9, r0
 800b08e:	920c      	str	r2, [sp, #48]	@ 0x30
 800b090:	9311      	str	r3, [sp, #68]	@ 0x44
 800b092:	b97f      	cbnz	r7, 800b0b4 <_dtoa_r+0x3c>
 800b094:	2010      	movs	r0, #16
 800b096:	f7fe fdef 	bl	8009c78 <malloc>
 800b09a:	4602      	mov	r2, r0
 800b09c:	f8c9 001c 	str.w	r0, [r9, #28]
 800b0a0:	b920      	cbnz	r0, 800b0ac <_dtoa_r+0x34>
 800b0a2:	4ba9      	ldr	r3, [pc, #676]	@ (800b348 <_dtoa_r+0x2d0>)
 800b0a4:	21ef      	movs	r1, #239	@ 0xef
 800b0a6:	48a9      	ldr	r0, [pc, #676]	@ (800b34c <_dtoa_r+0x2d4>)
 800b0a8:	f002 fb56 	bl	800d758 <__assert_func>
 800b0ac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b0b0:	6007      	str	r7, [r0, #0]
 800b0b2:	60c7      	str	r7, [r0, #12]
 800b0b4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b0b8:	6819      	ldr	r1, [r3, #0]
 800b0ba:	b159      	cbz	r1, 800b0d4 <_dtoa_r+0x5c>
 800b0bc:	685a      	ldr	r2, [r3, #4]
 800b0be:	604a      	str	r2, [r1, #4]
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	4093      	lsls	r3, r2
 800b0c4:	608b      	str	r3, [r1, #8]
 800b0c6:	4648      	mov	r0, r9
 800b0c8:	f000 fe30 	bl	800bd2c <_Bfree>
 800b0cc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	601a      	str	r2, [r3, #0]
 800b0d4:	1e2b      	subs	r3, r5, #0
 800b0d6:	bfb9      	ittee	lt
 800b0d8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b0dc:	9305      	strlt	r3, [sp, #20]
 800b0de:	2300      	movge	r3, #0
 800b0e0:	6033      	strge	r3, [r6, #0]
 800b0e2:	9f05      	ldr	r7, [sp, #20]
 800b0e4:	4b9a      	ldr	r3, [pc, #616]	@ (800b350 <_dtoa_r+0x2d8>)
 800b0e6:	bfbc      	itt	lt
 800b0e8:	2201      	movlt	r2, #1
 800b0ea:	6032      	strlt	r2, [r6, #0]
 800b0ec:	43bb      	bics	r3, r7
 800b0ee:	d112      	bne.n	800b116 <_dtoa_r+0x9e>
 800b0f0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b0f2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b0f6:	6013      	str	r3, [r2, #0]
 800b0f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b0fc:	4323      	orrs	r3, r4
 800b0fe:	f000 855a 	beq.w	800bbb6 <_dtoa_r+0xb3e>
 800b102:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b104:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800b364 <_dtoa_r+0x2ec>
 800b108:	2b00      	cmp	r3, #0
 800b10a:	f000 855c 	beq.w	800bbc6 <_dtoa_r+0xb4e>
 800b10e:	f10a 0303 	add.w	r3, sl, #3
 800b112:	f000 bd56 	b.w	800bbc2 <_dtoa_r+0xb4a>
 800b116:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b11a:	2200      	movs	r2, #0
 800b11c:	ec51 0b17 	vmov	r0, r1, d7
 800b120:	2300      	movs	r3, #0
 800b122:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800b126:	f7f5 fccf 	bl	8000ac8 <__aeabi_dcmpeq>
 800b12a:	4680      	mov	r8, r0
 800b12c:	b158      	cbz	r0, 800b146 <_dtoa_r+0xce>
 800b12e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b130:	2301      	movs	r3, #1
 800b132:	6013      	str	r3, [r2, #0]
 800b134:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b136:	b113      	cbz	r3, 800b13e <_dtoa_r+0xc6>
 800b138:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b13a:	4b86      	ldr	r3, [pc, #536]	@ (800b354 <_dtoa_r+0x2dc>)
 800b13c:	6013      	str	r3, [r2, #0]
 800b13e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800b368 <_dtoa_r+0x2f0>
 800b142:	f000 bd40 	b.w	800bbc6 <_dtoa_r+0xb4e>
 800b146:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800b14a:	aa14      	add	r2, sp, #80	@ 0x50
 800b14c:	a915      	add	r1, sp, #84	@ 0x54
 800b14e:	4648      	mov	r0, r9
 800b150:	f001 f988 	bl	800c464 <__d2b>
 800b154:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b158:	9002      	str	r0, [sp, #8]
 800b15a:	2e00      	cmp	r6, #0
 800b15c:	d078      	beq.n	800b250 <_dtoa_r+0x1d8>
 800b15e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b160:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800b164:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b168:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b16c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b170:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b174:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b178:	4619      	mov	r1, r3
 800b17a:	2200      	movs	r2, #0
 800b17c:	4b76      	ldr	r3, [pc, #472]	@ (800b358 <_dtoa_r+0x2e0>)
 800b17e:	f7f5 f883 	bl	8000288 <__aeabi_dsub>
 800b182:	a36b      	add	r3, pc, #428	@ (adr r3, 800b330 <_dtoa_r+0x2b8>)
 800b184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b188:	f7f5 fa36 	bl	80005f8 <__aeabi_dmul>
 800b18c:	a36a      	add	r3, pc, #424	@ (adr r3, 800b338 <_dtoa_r+0x2c0>)
 800b18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b192:	f7f5 f87b 	bl	800028c <__adddf3>
 800b196:	4604      	mov	r4, r0
 800b198:	4630      	mov	r0, r6
 800b19a:	460d      	mov	r5, r1
 800b19c:	f7f5 f9c2 	bl	8000524 <__aeabi_i2d>
 800b1a0:	a367      	add	r3, pc, #412	@ (adr r3, 800b340 <_dtoa_r+0x2c8>)
 800b1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1a6:	f7f5 fa27 	bl	80005f8 <__aeabi_dmul>
 800b1aa:	4602      	mov	r2, r0
 800b1ac:	460b      	mov	r3, r1
 800b1ae:	4620      	mov	r0, r4
 800b1b0:	4629      	mov	r1, r5
 800b1b2:	f7f5 f86b 	bl	800028c <__adddf3>
 800b1b6:	4604      	mov	r4, r0
 800b1b8:	460d      	mov	r5, r1
 800b1ba:	f7f5 fccd 	bl	8000b58 <__aeabi_d2iz>
 800b1be:	2200      	movs	r2, #0
 800b1c0:	4607      	mov	r7, r0
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	4620      	mov	r0, r4
 800b1c6:	4629      	mov	r1, r5
 800b1c8:	f7f5 fc88 	bl	8000adc <__aeabi_dcmplt>
 800b1cc:	b140      	cbz	r0, 800b1e0 <_dtoa_r+0x168>
 800b1ce:	4638      	mov	r0, r7
 800b1d0:	f7f5 f9a8 	bl	8000524 <__aeabi_i2d>
 800b1d4:	4622      	mov	r2, r4
 800b1d6:	462b      	mov	r3, r5
 800b1d8:	f7f5 fc76 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1dc:	b900      	cbnz	r0, 800b1e0 <_dtoa_r+0x168>
 800b1de:	3f01      	subs	r7, #1
 800b1e0:	2f16      	cmp	r7, #22
 800b1e2:	d852      	bhi.n	800b28a <_dtoa_r+0x212>
 800b1e4:	4b5d      	ldr	r3, [pc, #372]	@ (800b35c <_dtoa_r+0x2e4>)
 800b1e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b1f2:	f7f5 fc73 	bl	8000adc <__aeabi_dcmplt>
 800b1f6:	2800      	cmp	r0, #0
 800b1f8:	d049      	beq.n	800b28e <_dtoa_r+0x216>
 800b1fa:	3f01      	subs	r7, #1
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	9310      	str	r3, [sp, #64]	@ 0x40
 800b200:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b202:	1b9b      	subs	r3, r3, r6
 800b204:	1e5a      	subs	r2, r3, #1
 800b206:	bf45      	ittet	mi
 800b208:	f1c3 0301 	rsbmi	r3, r3, #1
 800b20c:	9300      	strmi	r3, [sp, #0]
 800b20e:	2300      	movpl	r3, #0
 800b210:	2300      	movmi	r3, #0
 800b212:	9206      	str	r2, [sp, #24]
 800b214:	bf54      	ite	pl
 800b216:	9300      	strpl	r3, [sp, #0]
 800b218:	9306      	strmi	r3, [sp, #24]
 800b21a:	2f00      	cmp	r7, #0
 800b21c:	db39      	blt.n	800b292 <_dtoa_r+0x21a>
 800b21e:	9b06      	ldr	r3, [sp, #24]
 800b220:	970d      	str	r7, [sp, #52]	@ 0x34
 800b222:	443b      	add	r3, r7
 800b224:	9306      	str	r3, [sp, #24]
 800b226:	2300      	movs	r3, #0
 800b228:	9308      	str	r3, [sp, #32]
 800b22a:	9b07      	ldr	r3, [sp, #28]
 800b22c:	2b09      	cmp	r3, #9
 800b22e:	d863      	bhi.n	800b2f8 <_dtoa_r+0x280>
 800b230:	2b05      	cmp	r3, #5
 800b232:	bfc4      	itt	gt
 800b234:	3b04      	subgt	r3, #4
 800b236:	9307      	strgt	r3, [sp, #28]
 800b238:	9b07      	ldr	r3, [sp, #28]
 800b23a:	f1a3 0302 	sub.w	r3, r3, #2
 800b23e:	bfcc      	ite	gt
 800b240:	2400      	movgt	r4, #0
 800b242:	2401      	movle	r4, #1
 800b244:	2b03      	cmp	r3, #3
 800b246:	d863      	bhi.n	800b310 <_dtoa_r+0x298>
 800b248:	e8df f003 	tbb	[pc, r3]
 800b24c:	2b375452 	.word	0x2b375452
 800b250:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800b254:	441e      	add	r6, r3
 800b256:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b25a:	2b20      	cmp	r3, #32
 800b25c:	bfc1      	itttt	gt
 800b25e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b262:	409f      	lslgt	r7, r3
 800b264:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b268:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b26c:	bfd6      	itet	le
 800b26e:	f1c3 0320 	rsble	r3, r3, #32
 800b272:	ea47 0003 	orrgt.w	r0, r7, r3
 800b276:	fa04 f003 	lslle.w	r0, r4, r3
 800b27a:	f7f5 f943 	bl	8000504 <__aeabi_ui2d>
 800b27e:	2201      	movs	r2, #1
 800b280:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b284:	3e01      	subs	r6, #1
 800b286:	9212      	str	r2, [sp, #72]	@ 0x48
 800b288:	e776      	b.n	800b178 <_dtoa_r+0x100>
 800b28a:	2301      	movs	r3, #1
 800b28c:	e7b7      	b.n	800b1fe <_dtoa_r+0x186>
 800b28e:	9010      	str	r0, [sp, #64]	@ 0x40
 800b290:	e7b6      	b.n	800b200 <_dtoa_r+0x188>
 800b292:	9b00      	ldr	r3, [sp, #0]
 800b294:	1bdb      	subs	r3, r3, r7
 800b296:	9300      	str	r3, [sp, #0]
 800b298:	427b      	negs	r3, r7
 800b29a:	9308      	str	r3, [sp, #32]
 800b29c:	2300      	movs	r3, #0
 800b29e:	930d      	str	r3, [sp, #52]	@ 0x34
 800b2a0:	e7c3      	b.n	800b22a <_dtoa_r+0x1b2>
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b2a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b2a8:	eb07 0b03 	add.w	fp, r7, r3
 800b2ac:	f10b 0301 	add.w	r3, fp, #1
 800b2b0:	2b01      	cmp	r3, #1
 800b2b2:	9303      	str	r3, [sp, #12]
 800b2b4:	bfb8      	it	lt
 800b2b6:	2301      	movlt	r3, #1
 800b2b8:	e006      	b.n	800b2c8 <_dtoa_r+0x250>
 800b2ba:	2301      	movs	r3, #1
 800b2bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b2be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	dd28      	ble.n	800b316 <_dtoa_r+0x29e>
 800b2c4:	469b      	mov	fp, r3
 800b2c6:	9303      	str	r3, [sp, #12]
 800b2c8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800b2cc:	2100      	movs	r1, #0
 800b2ce:	2204      	movs	r2, #4
 800b2d0:	f102 0514 	add.w	r5, r2, #20
 800b2d4:	429d      	cmp	r5, r3
 800b2d6:	d926      	bls.n	800b326 <_dtoa_r+0x2ae>
 800b2d8:	6041      	str	r1, [r0, #4]
 800b2da:	4648      	mov	r0, r9
 800b2dc:	f000 fce6 	bl	800bcac <_Balloc>
 800b2e0:	4682      	mov	sl, r0
 800b2e2:	2800      	cmp	r0, #0
 800b2e4:	d142      	bne.n	800b36c <_dtoa_r+0x2f4>
 800b2e6:	4b1e      	ldr	r3, [pc, #120]	@ (800b360 <_dtoa_r+0x2e8>)
 800b2e8:	4602      	mov	r2, r0
 800b2ea:	f240 11af 	movw	r1, #431	@ 0x1af
 800b2ee:	e6da      	b.n	800b0a6 <_dtoa_r+0x2e>
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	e7e3      	b.n	800b2bc <_dtoa_r+0x244>
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	e7d5      	b.n	800b2a4 <_dtoa_r+0x22c>
 800b2f8:	2401      	movs	r4, #1
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	9307      	str	r3, [sp, #28]
 800b2fe:	9409      	str	r4, [sp, #36]	@ 0x24
 800b300:	f04f 3bff 	mov.w	fp, #4294967295
 800b304:	2200      	movs	r2, #0
 800b306:	f8cd b00c 	str.w	fp, [sp, #12]
 800b30a:	2312      	movs	r3, #18
 800b30c:	920c      	str	r2, [sp, #48]	@ 0x30
 800b30e:	e7db      	b.n	800b2c8 <_dtoa_r+0x250>
 800b310:	2301      	movs	r3, #1
 800b312:	9309      	str	r3, [sp, #36]	@ 0x24
 800b314:	e7f4      	b.n	800b300 <_dtoa_r+0x288>
 800b316:	f04f 0b01 	mov.w	fp, #1
 800b31a:	f8cd b00c 	str.w	fp, [sp, #12]
 800b31e:	465b      	mov	r3, fp
 800b320:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800b324:	e7d0      	b.n	800b2c8 <_dtoa_r+0x250>
 800b326:	3101      	adds	r1, #1
 800b328:	0052      	lsls	r2, r2, #1
 800b32a:	e7d1      	b.n	800b2d0 <_dtoa_r+0x258>
 800b32c:	f3af 8000 	nop.w
 800b330:	636f4361 	.word	0x636f4361
 800b334:	3fd287a7 	.word	0x3fd287a7
 800b338:	8b60c8b3 	.word	0x8b60c8b3
 800b33c:	3fc68a28 	.word	0x3fc68a28
 800b340:	509f79fb 	.word	0x509f79fb
 800b344:	3fd34413 	.word	0x3fd34413
 800b348:	0800eb42 	.word	0x0800eb42
 800b34c:	0800eb59 	.word	0x0800eb59
 800b350:	7ff00000 	.word	0x7ff00000
 800b354:	0800eb0d 	.word	0x0800eb0d
 800b358:	3ff80000 	.word	0x3ff80000
 800b35c:	0800ed08 	.word	0x0800ed08
 800b360:	0800ebb1 	.word	0x0800ebb1
 800b364:	0800eb3e 	.word	0x0800eb3e
 800b368:	0800eb0c 	.word	0x0800eb0c
 800b36c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b370:	6018      	str	r0, [r3, #0]
 800b372:	9b03      	ldr	r3, [sp, #12]
 800b374:	2b0e      	cmp	r3, #14
 800b376:	f200 80a1 	bhi.w	800b4bc <_dtoa_r+0x444>
 800b37a:	2c00      	cmp	r4, #0
 800b37c:	f000 809e 	beq.w	800b4bc <_dtoa_r+0x444>
 800b380:	2f00      	cmp	r7, #0
 800b382:	dd33      	ble.n	800b3ec <_dtoa_r+0x374>
 800b384:	4b9c      	ldr	r3, [pc, #624]	@ (800b5f8 <_dtoa_r+0x580>)
 800b386:	f007 020f 	and.w	r2, r7, #15
 800b38a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b38e:	ed93 7b00 	vldr	d7, [r3]
 800b392:	05f8      	lsls	r0, r7, #23
 800b394:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800b398:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b39c:	d516      	bpl.n	800b3cc <_dtoa_r+0x354>
 800b39e:	4b97      	ldr	r3, [pc, #604]	@ (800b5fc <_dtoa_r+0x584>)
 800b3a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b3a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b3a8:	f7f5 fa50 	bl	800084c <__aeabi_ddiv>
 800b3ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b3b0:	f004 040f 	and.w	r4, r4, #15
 800b3b4:	2603      	movs	r6, #3
 800b3b6:	4d91      	ldr	r5, [pc, #580]	@ (800b5fc <_dtoa_r+0x584>)
 800b3b8:	b954      	cbnz	r4, 800b3d0 <_dtoa_r+0x358>
 800b3ba:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b3be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b3c2:	f7f5 fa43 	bl	800084c <__aeabi_ddiv>
 800b3c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b3ca:	e028      	b.n	800b41e <_dtoa_r+0x3a6>
 800b3cc:	2602      	movs	r6, #2
 800b3ce:	e7f2      	b.n	800b3b6 <_dtoa_r+0x33e>
 800b3d0:	07e1      	lsls	r1, r4, #31
 800b3d2:	d508      	bpl.n	800b3e6 <_dtoa_r+0x36e>
 800b3d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b3d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b3dc:	f7f5 f90c 	bl	80005f8 <__aeabi_dmul>
 800b3e0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b3e4:	3601      	adds	r6, #1
 800b3e6:	1064      	asrs	r4, r4, #1
 800b3e8:	3508      	adds	r5, #8
 800b3ea:	e7e5      	b.n	800b3b8 <_dtoa_r+0x340>
 800b3ec:	f000 80af 	beq.w	800b54e <_dtoa_r+0x4d6>
 800b3f0:	427c      	negs	r4, r7
 800b3f2:	4b81      	ldr	r3, [pc, #516]	@ (800b5f8 <_dtoa_r+0x580>)
 800b3f4:	4d81      	ldr	r5, [pc, #516]	@ (800b5fc <_dtoa_r+0x584>)
 800b3f6:	f004 020f 	and.w	r2, r4, #15
 800b3fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b402:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b406:	f7f5 f8f7 	bl	80005f8 <__aeabi_dmul>
 800b40a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b40e:	1124      	asrs	r4, r4, #4
 800b410:	2300      	movs	r3, #0
 800b412:	2602      	movs	r6, #2
 800b414:	2c00      	cmp	r4, #0
 800b416:	f040 808f 	bne.w	800b538 <_dtoa_r+0x4c0>
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d1d3      	bne.n	800b3c6 <_dtoa_r+0x34e>
 800b41e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b420:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b424:	2b00      	cmp	r3, #0
 800b426:	f000 8094 	beq.w	800b552 <_dtoa_r+0x4da>
 800b42a:	4b75      	ldr	r3, [pc, #468]	@ (800b600 <_dtoa_r+0x588>)
 800b42c:	2200      	movs	r2, #0
 800b42e:	4620      	mov	r0, r4
 800b430:	4629      	mov	r1, r5
 800b432:	f7f5 fb53 	bl	8000adc <__aeabi_dcmplt>
 800b436:	2800      	cmp	r0, #0
 800b438:	f000 808b 	beq.w	800b552 <_dtoa_r+0x4da>
 800b43c:	9b03      	ldr	r3, [sp, #12]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	f000 8087 	beq.w	800b552 <_dtoa_r+0x4da>
 800b444:	f1bb 0f00 	cmp.w	fp, #0
 800b448:	dd34      	ble.n	800b4b4 <_dtoa_r+0x43c>
 800b44a:	4620      	mov	r0, r4
 800b44c:	4b6d      	ldr	r3, [pc, #436]	@ (800b604 <_dtoa_r+0x58c>)
 800b44e:	2200      	movs	r2, #0
 800b450:	4629      	mov	r1, r5
 800b452:	f7f5 f8d1 	bl	80005f8 <__aeabi_dmul>
 800b456:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b45a:	f107 38ff 	add.w	r8, r7, #4294967295
 800b45e:	3601      	adds	r6, #1
 800b460:	465c      	mov	r4, fp
 800b462:	4630      	mov	r0, r6
 800b464:	f7f5 f85e 	bl	8000524 <__aeabi_i2d>
 800b468:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b46c:	f7f5 f8c4 	bl	80005f8 <__aeabi_dmul>
 800b470:	4b65      	ldr	r3, [pc, #404]	@ (800b608 <_dtoa_r+0x590>)
 800b472:	2200      	movs	r2, #0
 800b474:	f7f4 ff0a 	bl	800028c <__adddf3>
 800b478:	4605      	mov	r5, r0
 800b47a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b47e:	2c00      	cmp	r4, #0
 800b480:	d16a      	bne.n	800b558 <_dtoa_r+0x4e0>
 800b482:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b486:	4b61      	ldr	r3, [pc, #388]	@ (800b60c <_dtoa_r+0x594>)
 800b488:	2200      	movs	r2, #0
 800b48a:	f7f4 fefd 	bl	8000288 <__aeabi_dsub>
 800b48e:	4602      	mov	r2, r0
 800b490:	460b      	mov	r3, r1
 800b492:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b496:	462a      	mov	r2, r5
 800b498:	4633      	mov	r3, r6
 800b49a:	f7f5 fb3d 	bl	8000b18 <__aeabi_dcmpgt>
 800b49e:	2800      	cmp	r0, #0
 800b4a0:	f040 8298 	bne.w	800b9d4 <_dtoa_r+0x95c>
 800b4a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b4a8:	462a      	mov	r2, r5
 800b4aa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b4ae:	f7f5 fb15 	bl	8000adc <__aeabi_dcmplt>
 800b4b2:	bb38      	cbnz	r0, 800b504 <_dtoa_r+0x48c>
 800b4b4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800b4b8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b4bc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	f2c0 8157 	blt.w	800b772 <_dtoa_r+0x6fa>
 800b4c4:	2f0e      	cmp	r7, #14
 800b4c6:	f300 8154 	bgt.w	800b772 <_dtoa_r+0x6fa>
 800b4ca:	4b4b      	ldr	r3, [pc, #300]	@ (800b5f8 <_dtoa_r+0x580>)
 800b4cc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b4d0:	ed93 7b00 	vldr	d7, [r3]
 800b4d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	ed8d 7b00 	vstr	d7, [sp]
 800b4dc:	f280 80e5 	bge.w	800b6aa <_dtoa_r+0x632>
 800b4e0:	9b03      	ldr	r3, [sp, #12]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	f300 80e1 	bgt.w	800b6aa <_dtoa_r+0x632>
 800b4e8:	d10c      	bne.n	800b504 <_dtoa_r+0x48c>
 800b4ea:	4b48      	ldr	r3, [pc, #288]	@ (800b60c <_dtoa_r+0x594>)
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	ec51 0b17 	vmov	r0, r1, d7
 800b4f2:	f7f5 f881 	bl	80005f8 <__aeabi_dmul>
 800b4f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b4fa:	f7f5 fb03 	bl	8000b04 <__aeabi_dcmpge>
 800b4fe:	2800      	cmp	r0, #0
 800b500:	f000 8266 	beq.w	800b9d0 <_dtoa_r+0x958>
 800b504:	2400      	movs	r4, #0
 800b506:	4625      	mov	r5, r4
 800b508:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b50a:	4656      	mov	r6, sl
 800b50c:	ea6f 0803 	mvn.w	r8, r3
 800b510:	2700      	movs	r7, #0
 800b512:	4621      	mov	r1, r4
 800b514:	4648      	mov	r0, r9
 800b516:	f000 fc09 	bl	800bd2c <_Bfree>
 800b51a:	2d00      	cmp	r5, #0
 800b51c:	f000 80bd 	beq.w	800b69a <_dtoa_r+0x622>
 800b520:	b12f      	cbz	r7, 800b52e <_dtoa_r+0x4b6>
 800b522:	42af      	cmp	r7, r5
 800b524:	d003      	beq.n	800b52e <_dtoa_r+0x4b6>
 800b526:	4639      	mov	r1, r7
 800b528:	4648      	mov	r0, r9
 800b52a:	f000 fbff 	bl	800bd2c <_Bfree>
 800b52e:	4629      	mov	r1, r5
 800b530:	4648      	mov	r0, r9
 800b532:	f000 fbfb 	bl	800bd2c <_Bfree>
 800b536:	e0b0      	b.n	800b69a <_dtoa_r+0x622>
 800b538:	07e2      	lsls	r2, r4, #31
 800b53a:	d505      	bpl.n	800b548 <_dtoa_r+0x4d0>
 800b53c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b540:	f7f5 f85a 	bl	80005f8 <__aeabi_dmul>
 800b544:	3601      	adds	r6, #1
 800b546:	2301      	movs	r3, #1
 800b548:	1064      	asrs	r4, r4, #1
 800b54a:	3508      	adds	r5, #8
 800b54c:	e762      	b.n	800b414 <_dtoa_r+0x39c>
 800b54e:	2602      	movs	r6, #2
 800b550:	e765      	b.n	800b41e <_dtoa_r+0x3a6>
 800b552:	9c03      	ldr	r4, [sp, #12]
 800b554:	46b8      	mov	r8, r7
 800b556:	e784      	b.n	800b462 <_dtoa_r+0x3ea>
 800b558:	4b27      	ldr	r3, [pc, #156]	@ (800b5f8 <_dtoa_r+0x580>)
 800b55a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b55c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b560:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b564:	4454      	add	r4, sl
 800b566:	2900      	cmp	r1, #0
 800b568:	d054      	beq.n	800b614 <_dtoa_r+0x59c>
 800b56a:	4929      	ldr	r1, [pc, #164]	@ (800b610 <_dtoa_r+0x598>)
 800b56c:	2000      	movs	r0, #0
 800b56e:	f7f5 f96d 	bl	800084c <__aeabi_ddiv>
 800b572:	4633      	mov	r3, r6
 800b574:	462a      	mov	r2, r5
 800b576:	f7f4 fe87 	bl	8000288 <__aeabi_dsub>
 800b57a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b57e:	4656      	mov	r6, sl
 800b580:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b584:	f7f5 fae8 	bl	8000b58 <__aeabi_d2iz>
 800b588:	4605      	mov	r5, r0
 800b58a:	f7f4 ffcb 	bl	8000524 <__aeabi_i2d>
 800b58e:	4602      	mov	r2, r0
 800b590:	460b      	mov	r3, r1
 800b592:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b596:	f7f4 fe77 	bl	8000288 <__aeabi_dsub>
 800b59a:	3530      	adds	r5, #48	@ 0x30
 800b59c:	4602      	mov	r2, r0
 800b59e:	460b      	mov	r3, r1
 800b5a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b5a4:	f806 5b01 	strb.w	r5, [r6], #1
 800b5a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b5ac:	f7f5 fa96 	bl	8000adc <__aeabi_dcmplt>
 800b5b0:	2800      	cmp	r0, #0
 800b5b2:	d172      	bne.n	800b69a <_dtoa_r+0x622>
 800b5b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b5b8:	4911      	ldr	r1, [pc, #68]	@ (800b600 <_dtoa_r+0x588>)
 800b5ba:	2000      	movs	r0, #0
 800b5bc:	f7f4 fe64 	bl	8000288 <__aeabi_dsub>
 800b5c0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b5c4:	f7f5 fa8a 	bl	8000adc <__aeabi_dcmplt>
 800b5c8:	2800      	cmp	r0, #0
 800b5ca:	f040 80b4 	bne.w	800b736 <_dtoa_r+0x6be>
 800b5ce:	42a6      	cmp	r6, r4
 800b5d0:	f43f af70 	beq.w	800b4b4 <_dtoa_r+0x43c>
 800b5d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b5d8:	4b0a      	ldr	r3, [pc, #40]	@ (800b604 <_dtoa_r+0x58c>)
 800b5da:	2200      	movs	r2, #0
 800b5dc:	f7f5 f80c 	bl	80005f8 <__aeabi_dmul>
 800b5e0:	4b08      	ldr	r3, [pc, #32]	@ (800b604 <_dtoa_r+0x58c>)
 800b5e2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b5ec:	f7f5 f804 	bl	80005f8 <__aeabi_dmul>
 800b5f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b5f4:	e7c4      	b.n	800b580 <_dtoa_r+0x508>
 800b5f6:	bf00      	nop
 800b5f8:	0800ed08 	.word	0x0800ed08
 800b5fc:	0800ece0 	.word	0x0800ece0
 800b600:	3ff00000 	.word	0x3ff00000
 800b604:	40240000 	.word	0x40240000
 800b608:	401c0000 	.word	0x401c0000
 800b60c:	40140000 	.word	0x40140000
 800b610:	3fe00000 	.word	0x3fe00000
 800b614:	4631      	mov	r1, r6
 800b616:	4628      	mov	r0, r5
 800b618:	f7f4 ffee 	bl	80005f8 <__aeabi_dmul>
 800b61c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b620:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b622:	4656      	mov	r6, sl
 800b624:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b628:	f7f5 fa96 	bl	8000b58 <__aeabi_d2iz>
 800b62c:	4605      	mov	r5, r0
 800b62e:	f7f4 ff79 	bl	8000524 <__aeabi_i2d>
 800b632:	4602      	mov	r2, r0
 800b634:	460b      	mov	r3, r1
 800b636:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b63a:	f7f4 fe25 	bl	8000288 <__aeabi_dsub>
 800b63e:	3530      	adds	r5, #48	@ 0x30
 800b640:	f806 5b01 	strb.w	r5, [r6], #1
 800b644:	4602      	mov	r2, r0
 800b646:	460b      	mov	r3, r1
 800b648:	42a6      	cmp	r6, r4
 800b64a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b64e:	f04f 0200 	mov.w	r2, #0
 800b652:	d124      	bne.n	800b69e <_dtoa_r+0x626>
 800b654:	4baf      	ldr	r3, [pc, #700]	@ (800b914 <_dtoa_r+0x89c>)
 800b656:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b65a:	f7f4 fe17 	bl	800028c <__adddf3>
 800b65e:	4602      	mov	r2, r0
 800b660:	460b      	mov	r3, r1
 800b662:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b666:	f7f5 fa57 	bl	8000b18 <__aeabi_dcmpgt>
 800b66a:	2800      	cmp	r0, #0
 800b66c:	d163      	bne.n	800b736 <_dtoa_r+0x6be>
 800b66e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b672:	49a8      	ldr	r1, [pc, #672]	@ (800b914 <_dtoa_r+0x89c>)
 800b674:	2000      	movs	r0, #0
 800b676:	f7f4 fe07 	bl	8000288 <__aeabi_dsub>
 800b67a:	4602      	mov	r2, r0
 800b67c:	460b      	mov	r3, r1
 800b67e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b682:	f7f5 fa2b 	bl	8000adc <__aeabi_dcmplt>
 800b686:	2800      	cmp	r0, #0
 800b688:	f43f af14 	beq.w	800b4b4 <_dtoa_r+0x43c>
 800b68c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b68e:	1e73      	subs	r3, r6, #1
 800b690:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b692:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b696:	2b30      	cmp	r3, #48	@ 0x30
 800b698:	d0f8      	beq.n	800b68c <_dtoa_r+0x614>
 800b69a:	4647      	mov	r7, r8
 800b69c:	e03b      	b.n	800b716 <_dtoa_r+0x69e>
 800b69e:	4b9e      	ldr	r3, [pc, #632]	@ (800b918 <_dtoa_r+0x8a0>)
 800b6a0:	f7f4 ffaa 	bl	80005f8 <__aeabi_dmul>
 800b6a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b6a8:	e7bc      	b.n	800b624 <_dtoa_r+0x5ac>
 800b6aa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b6ae:	4656      	mov	r6, sl
 800b6b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b6b4:	4620      	mov	r0, r4
 800b6b6:	4629      	mov	r1, r5
 800b6b8:	f7f5 f8c8 	bl	800084c <__aeabi_ddiv>
 800b6bc:	f7f5 fa4c 	bl	8000b58 <__aeabi_d2iz>
 800b6c0:	4680      	mov	r8, r0
 800b6c2:	f7f4 ff2f 	bl	8000524 <__aeabi_i2d>
 800b6c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b6ca:	f7f4 ff95 	bl	80005f8 <__aeabi_dmul>
 800b6ce:	4602      	mov	r2, r0
 800b6d0:	460b      	mov	r3, r1
 800b6d2:	4620      	mov	r0, r4
 800b6d4:	4629      	mov	r1, r5
 800b6d6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b6da:	f7f4 fdd5 	bl	8000288 <__aeabi_dsub>
 800b6de:	f806 4b01 	strb.w	r4, [r6], #1
 800b6e2:	9d03      	ldr	r5, [sp, #12]
 800b6e4:	eba6 040a 	sub.w	r4, r6, sl
 800b6e8:	42a5      	cmp	r5, r4
 800b6ea:	4602      	mov	r2, r0
 800b6ec:	460b      	mov	r3, r1
 800b6ee:	d133      	bne.n	800b758 <_dtoa_r+0x6e0>
 800b6f0:	f7f4 fdcc 	bl	800028c <__adddf3>
 800b6f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b6f8:	4604      	mov	r4, r0
 800b6fa:	460d      	mov	r5, r1
 800b6fc:	f7f5 fa0c 	bl	8000b18 <__aeabi_dcmpgt>
 800b700:	b9c0      	cbnz	r0, 800b734 <_dtoa_r+0x6bc>
 800b702:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b706:	4620      	mov	r0, r4
 800b708:	4629      	mov	r1, r5
 800b70a:	f7f5 f9dd 	bl	8000ac8 <__aeabi_dcmpeq>
 800b70e:	b110      	cbz	r0, 800b716 <_dtoa_r+0x69e>
 800b710:	f018 0f01 	tst.w	r8, #1
 800b714:	d10e      	bne.n	800b734 <_dtoa_r+0x6bc>
 800b716:	9902      	ldr	r1, [sp, #8]
 800b718:	4648      	mov	r0, r9
 800b71a:	f000 fb07 	bl	800bd2c <_Bfree>
 800b71e:	2300      	movs	r3, #0
 800b720:	7033      	strb	r3, [r6, #0]
 800b722:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b724:	3701      	adds	r7, #1
 800b726:	601f      	str	r7, [r3, #0]
 800b728:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	f000 824b 	beq.w	800bbc6 <_dtoa_r+0xb4e>
 800b730:	601e      	str	r6, [r3, #0]
 800b732:	e248      	b.n	800bbc6 <_dtoa_r+0xb4e>
 800b734:	46b8      	mov	r8, r7
 800b736:	4633      	mov	r3, r6
 800b738:	461e      	mov	r6, r3
 800b73a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b73e:	2a39      	cmp	r2, #57	@ 0x39
 800b740:	d106      	bne.n	800b750 <_dtoa_r+0x6d8>
 800b742:	459a      	cmp	sl, r3
 800b744:	d1f8      	bne.n	800b738 <_dtoa_r+0x6c0>
 800b746:	2230      	movs	r2, #48	@ 0x30
 800b748:	f108 0801 	add.w	r8, r8, #1
 800b74c:	f88a 2000 	strb.w	r2, [sl]
 800b750:	781a      	ldrb	r2, [r3, #0]
 800b752:	3201      	adds	r2, #1
 800b754:	701a      	strb	r2, [r3, #0]
 800b756:	e7a0      	b.n	800b69a <_dtoa_r+0x622>
 800b758:	4b6f      	ldr	r3, [pc, #444]	@ (800b918 <_dtoa_r+0x8a0>)
 800b75a:	2200      	movs	r2, #0
 800b75c:	f7f4 ff4c 	bl	80005f8 <__aeabi_dmul>
 800b760:	2200      	movs	r2, #0
 800b762:	2300      	movs	r3, #0
 800b764:	4604      	mov	r4, r0
 800b766:	460d      	mov	r5, r1
 800b768:	f7f5 f9ae 	bl	8000ac8 <__aeabi_dcmpeq>
 800b76c:	2800      	cmp	r0, #0
 800b76e:	d09f      	beq.n	800b6b0 <_dtoa_r+0x638>
 800b770:	e7d1      	b.n	800b716 <_dtoa_r+0x69e>
 800b772:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b774:	2a00      	cmp	r2, #0
 800b776:	f000 80ea 	beq.w	800b94e <_dtoa_r+0x8d6>
 800b77a:	9a07      	ldr	r2, [sp, #28]
 800b77c:	2a01      	cmp	r2, #1
 800b77e:	f300 80cd 	bgt.w	800b91c <_dtoa_r+0x8a4>
 800b782:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b784:	2a00      	cmp	r2, #0
 800b786:	f000 80c1 	beq.w	800b90c <_dtoa_r+0x894>
 800b78a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b78e:	9c08      	ldr	r4, [sp, #32]
 800b790:	9e00      	ldr	r6, [sp, #0]
 800b792:	9a00      	ldr	r2, [sp, #0]
 800b794:	441a      	add	r2, r3
 800b796:	9200      	str	r2, [sp, #0]
 800b798:	9a06      	ldr	r2, [sp, #24]
 800b79a:	2101      	movs	r1, #1
 800b79c:	441a      	add	r2, r3
 800b79e:	4648      	mov	r0, r9
 800b7a0:	9206      	str	r2, [sp, #24]
 800b7a2:	f000 fbc1 	bl	800bf28 <__i2b>
 800b7a6:	4605      	mov	r5, r0
 800b7a8:	b166      	cbz	r6, 800b7c4 <_dtoa_r+0x74c>
 800b7aa:	9b06      	ldr	r3, [sp, #24]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	dd09      	ble.n	800b7c4 <_dtoa_r+0x74c>
 800b7b0:	42b3      	cmp	r3, r6
 800b7b2:	9a00      	ldr	r2, [sp, #0]
 800b7b4:	bfa8      	it	ge
 800b7b6:	4633      	movge	r3, r6
 800b7b8:	1ad2      	subs	r2, r2, r3
 800b7ba:	9200      	str	r2, [sp, #0]
 800b7bc:	9a06      	ldr	r2, [sp, #24]
 800b7be:	1af6      	subs	r6, r6, r3
 800b7c0:	1ad3      	subs	r3, r2, r3
 800b7c2:	9306      	str	r3, [sp, #24]
 800b7c4:	9b08      	ldr	r3, [sp, #32]
 800b7c6:	b30b      	cbz	r3, 800b80c <_dtoa_r+0x794>
 800b7c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	f000 80c6 	beq.w	800b95c <_dtoa_r+0x8e4>
 800b7d0:	2c00      	cmp	r4, #0
 800b7d2:	f000 80c0 	beq.w	800b956 <_dtoa_r+0x8de>
 800b7d6:	4629      	mov	r1, r5
 800b7d8:	4622      	mov	r2, r4
 800b7da:	4648      	mov	r0, r9
 800b7dc:	f000 fc5c 	bl	800c098 <__pow5mult>
 800b7e0:	9a02      	ldr	r2, [sp, #8]
 800b7e2:	4601      	mov	r1, r0
 800b7e4:	4605      	mov	r5, r0
 800b7e6:	4648      	mov	r0, r9
 800b7e8:	f000 fbb4 	bl	800bf54 <__multiply>
 800b7ec:	9902      	ldr	r1, [sp, #8]
 800b7ee:	4680      	mov	r8, r0
 800b7f0:	4648      	mov	r0, r9
 800b7f2:	f000 fa9b 	bl	800bd2c <_Bfree>
 800b7f6:	9b08      	ldr	r3, [sp, #32]
 800b7f8:	1b1b      	subs	r3, r3, r4
 800b7fa:	9308      	str	r3, [sp, #32]
 800b7fc:	f000 80b1 	beq.w	800b962 <_dtoa_r+0x8ea>
 800b800:	9a08      	ldr	r2, [sp, #32]
 800b802:	4641      	mov	r1, r8
 800b804:	4648      	mov	r0, r9
 800b806:	f000 fc47 	bl	800c098 <__pow5mult>
 800b80a:	9002      	str	r0, [sp, #8]
 800b80c:	2101      	movs	r1, #1
 800b80e:	4648      	mov	r0, r9
 800b810:	f000 fb8a 	bl	800bf28 <__i2b>
 800b814:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b816:	4604      	mov	r4, r0
 800b818:	2b00      	cmp	r3, #0
 800b81a:	f000 81d8 	beq.w	800bbce <_dtoa_r+0xb56>
 800b81e:	461a      	mov	r2, r3
 800b820:	4601      	mov	r1, r0
 800b822:	4648      	mov	r0, r9
 800b824:	f000 fc38 	bl	800c098 <__pow5mult>
 800b828:	9b07      	ldr	r3, [sp, #28]
 800b82a:	2b01      	cmp	r3, #1
 800b82c:	4604      	mov	r4, r0
 800b82e:	f300 809f 	bgt.w	800b970 <_dtoa_r+0x8f8>
 800b832:	9b04      	ldr	r3, [sp, #16]
 800b834:	2b00      	cmp	r3, #0
 800b836:	f040 8097 	bne.w	800b968 <_dtoa_r+0x8f0>
 800b83a:	9b05      	ldr	r3, [sp, #20]
 800b83c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b840:	2b00      	cmp	r3, #0
 800b842:	f040 8093 	bne.w	800b96c <_dtoa_r+0x8f4>
 800b846:	9b05      	ldr	r3, [sp, #20]
 800b848:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b84c:	0d1b      	lsrs	r3, r3, #20
 800b84e:	051b      	lsls	r3, r3, #20
 800b850:	b133      	cbz	r3, 800b860 <_dtoa_r+0x7e8>
 800b852:	9b00      	ldr	r3, [sp, #0]
 800b854:	3301      	adds	r3, #1
 800b856:	9300      	str	r3, [sp, #0]
 800b858:	9b06      	ldr	r3, [sp, #24]
 800b85a:	3301      	adds	r3, #1
 800b85c:	9306      	str	r3, [sp, #24]
 800b85e:	2301      	movs	r3, #1
 800b860:	9308      	str	r3, [sp, #32]
 800b862:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b864:	2b00      	cmp	r3, #0
 800b866:	f000 81b8 	beq.w	800bbda <_dtoa_r+0xb62>
 800b86a:	6923      	ldr	r3, [r4, #16]
 800b86c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b870:	6918      	ldr	r0, [r3, #16]
 800b872:	f000 fb0d 	bl	800be90 <__hi0bits>
 800b876:	f1c0 0020 	rsb	r0, r0, #32
 800b87a:	9b06      	ldr	r3, [sp, #24]
 800b87c:	4418      	add	r0, r3
 800b87e:	f010 001f 	ands.w	r0, r0, #31
 800b882:	f000 8082 	beq.w	800b98a <_dtoa_r+0x912>
 800b886:	f1c0 0320 	rsb	r3, r0, #32
 800b88a:	2b04      	cmp	r3, #4
 800b88c:	dd73      	ble.n	800b976 <_dtoa_r+0x8fe>
 800b88e:	9b00      	ldr	r3, [sp, #0]
 800b890:	f1c0 001c 	rsb	r0, r0, #28
 800b894:	4403      	add	r3, r0
 800b896:	9300      	str	r3, [sp, #0]
 800b898:	9b06      	ldr	r3, [sp, #24]
 800b89a:	4403      	add	r3, r0
 800b89c:	4406      	add	r6, r0
 800b89e:	9306      	str	r3, [sp, #24]
 800b8a0:	9b00      	ldr	r3, [sp, #0]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	dd05      	ble.n	800b8b2 <_dtoa_r+0x83a>
 800b8a6:	9902      	ldr	r1, [sp, #8]
 800b8a8:	461a      	mov	r2, r3
 800b8aa:	4648      	mov	r0, r9
 800b8ac:	f000 fc4e 	bl	800c14c <__lshift>
 800b8b0:	9002      	str	r0, [sp, #8]
 800b8b2:	9b06      	ldr	r3, [sp, #24]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	dd05      	ble.n	800b8c4 <_dtoa_r+0x84c>
 800b8b8:	4621      	mov	r1, r4
 800b8ba:	461a      	mov	r2, r3
 800b8bc:	4648      	mov	r0, r9
 800b8be:	f000 fc45 	bl	800c14c <__lshift>
 800b8c2:	4604      	mov	r4, r0
 800b8c4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d061      	beq.n	800b98e <_dtoa_r+0x916>
 800b8ca:	9802      	ldr	r0, [sp, #8]
 800b8cc:	4621      	mov	r1, r4
 800b8ce:	f000 fca9 	bl	800c224 <__mcmp>
 800b8d2:	2800      	cmp	r0, #0
 800b8d4:	da5b      	bge.n	800b98e <_dtoa_r+0x916>
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	9902      	ldr	r1, [sp, #8]
 800b8da:	220a      	movs	r2, #10
 800b8dc:	4648      	mov	r0, r9
 800b8de:	f000 fa47 	bl	800bd70 <__multadd>
 800b8e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8e4:	9002      	str	r0, [sp, #8]
 800b8e6:	f107 38ff 	add.w	r8, r7, #4294967295
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	f000 8177 	beq.w	800bbde <_dtoa_r+0xb66>
 800b8f0:	4629      	mov	r1, r5
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	220a      	movs	r2, #10
 800b8f6:	4648      	mov	r0, r9
 800b8f8:	f000 fa3a 	bl	800bd70 <__multadd>
 800b8fc:	f1bb 0f00 	cmp.w	fp, #0
 800b900:	4605      	mov	r5, r0
 800b902:	dc6f      	bgt.n	800b9e4 <_dtoa_r+0x96c>
 800b904:	9b07      	ldr	r3, [sp, #28]
 800b906:	2b02      	cmp	r3, #2
 800b908:	dc49      	bgt.n	800b99e <_dtoa_r+0x926>
 800b90a:	e06b      	b.n	800b9e4 <_dtoa_r+0x96c>
 800b90c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b90e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b912:	e73c      	b.n	800b78e <_dtoa_r+0x716>
 800b914:	3fe00000 	.word	0x3fe00000
 800b918:	40240000 	.word	0x40240000
 800b91c:	9b03      	ldr	r3, [sp, #12]
 800b91e:	1e5c      	subs	r4, r3, #1
 800b920:	9b08      	ldr	r3, [sp, #32]
 800b922:	42a3      	cmp	r3, r4
 800b924:	db09      	blt.n	800b93a <_dtoa_r+0x8c2>
 800b926:	1b1c      	subs	r4, r3, r4
 800b928:	9b03      	ldr	r3, [sp, #12]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	f6bf af30 	bge.w	800b790 <_dtoa_r+0x718>
 800b930:	9b00      	ldr	r3, [sp, #0]
 800b932:	9a03      	ldr	r2, [sp, #12]
 800b934:	1a9e      	subs	r6, r3, r2
 800b936:	2300      	movs	r3, #0
 800b938:	e72b      	b.n	800b792 <_dtoa_r+0x71a>
 800b93a:	9b08      	ldr	r3, [sp, #32]
 800b93c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b93e:	9408      	str	r4, [sp, #32]
 800b940:	1ae3      	subs	r3, r4, r3
 800b942:	441a      	add	r2, r3
 800b944:	9e00      	ldr	r6, [sp, #0]
 800b946:	9b03      	ldr	r3, [sp, #12]
 800b948:	920d      	str	r2, [sp, #52]	@ 0x34
 800b94a:	2400      	movs	r4, #0
 800b94c:	e721      	b.n	800b792 <_dtoa_r+0x71a>
 800b94e:	9c08      	ldr	r4, [sp, #32]
 800b950:	9e00      	ldr	r6, [sp, #0]
 800b952:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800b954:	e728      	b.n	800b7a8 <_dtoa_r+0x730>
 800b956:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800b95a:	e751      	b.n	800b800 <_dtoa_r+0x788>
 800b95c:	9a08      	ldr	r2, [sp, #32]
 800b95e:	9902      	ldr	r1, [sp, #8]
 800b960:	e750      	b.n	800b804 <_dtoa_r+0x78c>
 800b962:	f8cd 8008 	str.w	r8, [sp, #8]
 800b966:	e751      	b.n	800b80c <_dtoa_r+0x794>
 800b968:	2300      	movs	r3, #0
 800b96a:	e779      	b.n	800b860 <_dtoa_r+0x7e8>
 800b96c:	9b04      	ldr	r3, [sp, #16]
 800b96e:	e777      	b.n	800b860 <_dtoa_r+0x7e8>
 800b970:	2300      	movs	r3, #0
 800b972:	9308      	str	r3, [sp, #32]
 800b974:	e779      	b.n	800b86a <_dtoa_r+0x7f2>
 800b976:	d093      	beq.n	800b8a0 <_dtoa_r+0x828>
 800b978:	9a00      	ldr	r2, [sp, #0]
 800b97a:	331c      	adds	r3, #28
 800b97c:	441a      	add	r2, r3
 800b97e:	9200      	str	r2, [sp, #0]
 800b980:	9a06      	ldr	r2, [sp, #24]
 800b982:	441a      	add	r2, r3
 800b984:	441e      	add	r6, r3
 800b986:	9206      	str	r2, [sp, #24]
 800b988:	e78a      	b.n	800b8a0 <_dtoa_r+0x828>
 800b98a:	4603      	mov	r3, r0
 800b98c:	e7f4      	b.n	800b978 <_dtoa_r+0x900>
 800b98e:	9b03      	ldr	r3, [sp, #12]
 800b990:	2b00      	cmp	r3, #0
 800b992:	46b8      	mov	r8, r7
 800b994:	dc20      	bgt.n	800b9d8 <_dtoa_r+0x960>
 800b996:	469b      	mov	fp, r3
 800b998:	9b07      	ldr	r3, [sp, #28]
 800b99a:	2b02      	cmp	r3, #2
 800b99c:	dd1e      	ble.n	800b9dc <_dtoa_r+0x964>
 800b99e:	f1bb 0f00 	cmp.w	fp, #0
 800b9a2:	f47f adb1 	bne.w	800b508 <_dtoa_r+0x490>
 800b9a6:	4621      	mov	r1, r4
 800b9a8:	465b      	mov	r3, fp
 800b9aa:	2205      	movs	r2, #5
 800b9ac:	4648      	mov	r0, r9
 800b9ae:	f000 f9df 	bl	800bd70 <__multadd>
 800b9b2:	4601      	mov	r1, r0
 800b9b4:	4604      	mov	r4, r0
 800b9b6:	9802      	ldr	r0, [sp, #8]
 800b9b8:	f000 fc34 	bl	800c224 <__mcmp>
 800b9bc:	2800      	cmp	r0, #0
 800b9be:	f77f ada3 	ble.w	800b508 <_dtoa_r+0x490>
 800b9c2:	4656      	mov	r6, sl
 800b9c4:	2331      	movs	r3, #49	@ 0x31
 800b9c6:	f806 3b01 	strb.w	r3, [r6], #1
 800b9ca:	f108 0801 	add.w	r8, r8, #1
 800b9ce:	e59f      	b.n	800b510 <_dtoa_r+0x498>
 800b9d0:	9c03      	ldr	r4, [sp, #12]
 800b9d2:	46b8      	mov	r8, r7
 800b9d4:	4625      	mov	r5, r4
 800b9d6:	e7f4      	b.n	800b9c2 <_dtoa_r+0x94a>
 800b9d8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800b9dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	f000 8101 	beq.w	800bbe6 <_dtoa_r+0xb6e>
 800b9e4:	2e00      	cmp	r6, #0
 800b9e6:	dd05      	ble.n	800b9f4 <_dtoa_r+0x97c>
 800b9e8:	4629      	mov	r1, r5
 800b9ea:	4632      	mov	r2, r6
 800b9ec:	4648      	mov	r0, r9
 800b9ee:	f000 fbad 	bl	800c14c <__lshift>
 800b9f2:	4605      	mov	r5, r0
 800b9f4:	9b08      	ldr	r3, [sp, #32]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d05c      	beq.n	800bab4 <_dtoa_r+0xa3c>
 800b9fa:	6869      	ldr	r1, [r5, #4]
 800b9fc:	4648      	mov	r0, r9
 800b9fe:	f000 f955 	bl	800bcac <_Balloc>
 800ba02:	4606      	mov	r6, r0
 800ba04:	b928      	cbnz	r0, 800ba12 <_dtoa_r+0x99a>
 800ba06:	4b82      	ldr	r3, [pc, #520]	@ (800bc10 <_dtoa_r+0xb98>)
 800ba08:	4602      	mov	r2, r0
 800ba0a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ba0e:	f7ff bb4a 	b.w	800b0a6 <_dtoa_r+0x2e>
 800ba12:	692a      	ldr	r2, [r5, #16]
 800ba14:	3202      	adds	r2, #2
 800ba16:	0092      	lsls	r2, r2, #2
 800ba18:	f105 010c 	add.w	r1, r5, #12
 800ba1c:	300c      	adds	r0, #12
 800ba1e:	f7ff fa8e 	bl	800af3e <memcpy>
 800ba22:	2201      	movs	r2, #1
 800ba24:	4631      	mov	r1, r6
 800ba26:	4648      	mov	r0, r9
 800ba28:	f000 fb90 	bl	800c14c <__lshift>
 800ba2c:	f10a 0301 	add.w	r3, sl, #1
 800ba30:	9300      	str	r3, [sp, #0]
 800ba32:	eb0a 030b 	add.w	r3, sl, fp
 800ba36:	9308      	str	r3, [sp, #32]
 800ba38:	9b04      	ldr	r3, [sp, #16]
 800ba3a:	f003 0301 	and.w	r3, r3, #1
 800ba3e:	462f      	mov	r7, r5
 800ba40:	9306      	str	r3, [sp, #24]
 800ba42:	4605      	mov	r5, r0
 800ba44:	9b00      	ldr	r3, [sp, #0]
 800ba46:	9802      	ldr	r0, [sp, #8]
 800ba48:	4621      	mov	r1, r4
 800ba4a:	f103 3bff 	add.w	fp, r3, #4294967295
 800ba4e:	f7ff fa8b 	bl	800af68 <quorem>
 800ba52:	4603      	mov	r3, r0
 800ba54:	3330      	adds	r3, #48	@ 0x30
 800ba56:	9003      	str	r0, [sp, #12]
 800ba58:	4639      	mov	r1, r7
 800ba5a:	9802      	ldr	r0, [sp, #8]
 800ba5c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba5e:	f000 fbe1 	bl	800c224 <__mcmp>
 800ba62:	462a      	mov	r2, r5
 800ba64:	9004      	str	r0, [sp, #16]
 800ba66:	4621      	mov	r1, r4
 800ba68:	4648      	mov	r0, r9
 800ba6a:	f000 fbf7 	bl	800c25c <__mdiff>
 800ba6e:	68c2      	ldr	r2, [r0, #12]
 800ba70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba72:	4606      	mov	r6, r0
 800ba74:	bb02      	cbnz	r2, 800bab8 <_dtoa_r+0xa40>
 800ba76:	4601      	mov	r1, r0
 800ba78:	9802      	ldr	r0, [sp, #8]
 800ba7a:	f000 fbd3 	bl	800c224 <__mcmp>
 800ba7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba80:	4602      	mov	r2, r0
 800ba82:	4631      	mov	r1, r6
 800ba84:	4648      	mov	r0, r9
 800ba86:	920c      	str	r2, [sp, #48]	@ 0x30
 800ba88:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba8a:	f000 f94f 	bl	800bd2c <_Bfree>
 800ba8e:	9b07      	ldr	r3, [sp, #28]
 800ba90:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ba92:	9e00      	ldr	r6, [sp, #0]
 800ba94:	ea42 0103 	orr.w	r1, r2, r3
 800ba98:	9b06      	ldr	r3, [sp, #24]
 800ba9a:	4319      	orrs	r1, r3
 800ba9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba9e:	d10d      	bne.n	800babc <_dtoa_r+0xa44>
 800baa0:	2b39      	cmp	r3, #57	@ 0x39
 800baa2:	d027      	beq.n	800baf4 <_dtoa_r+0xa7c>
 800baa4:	9a04      	ldr	r2, [sp, #16]
 800baa6:	2a00      	cmp	r2, #0
 800baa8:	dd01      	ble.n	800baae <_dtoa_r+0xa36>
 800baaa:	9b03      	ldr	r3, [sp, #12]
 800baac:	3331      	adds	r3, #49	@ 0x31
 800baae:	f88b 3000 	strb.w	r3, [fp]
 800bab2:	e52e      	b.n	800b512 <_dtoa_r+0x49a>
 800bab4:	4628      	mov	r0, r5
 800bab6:	e7b9      	b.n	800ba2c <_dtoa_r+0x9b4>
 800bab8:	2201      	movs	r2, #1
 800baba:	e7e2      	b.n	800ba82 <_dtoa_r+0xa0a>
 800babc:	9904      	ldr	r1, [sp, #16]
 800babe:	2900      	cmp	r1, #0
 800bac0:	db04      	blt.n	800bacc <_dtoa_r+0xa54>
 800bac2:	9807      	ldr	r0, [sp, #28]
 800bac4:	4301      	orrs	r1, r0
 800bac6:	9806      	ldr	r0, [sp, #24]
 800bac8:	4301      	orrs	r1, r0
 800baca:	d120      	bne.n	800bb0e <_dtoa_r+0xa96>
 800bacc:	2a00      	cmp	r2, #0
 800bace:	ddee      	ble.n	800baae <_dtoa_r+0xa36>
 800bad0:	9902      	ldr	r1, [sp, #8]
 800bad2:	9300      	str	r3, [sp, #0]
 800bad4:	2201      	movs	r2, #1
 800bad6:	4648      	mov	r0, r9
 800bad8:	f000 fb38 	bl	800c14c <__lshift>
 800badc:	4621      	mov	r1, r4
 800bade:	9002      	str	r0, [sp, #8]
 800bae0:	f000 fba0 	bl	800c224 <__mcmp>
 800bae4:	2800      	cmp	r0, #0
 800bae6:	9b00      	ldr	r3, [sp, #0]
 800bae8:	dc02      	bgt.n	800baf0 <_dtoa_r+0xa78>
 800baea:	d1e0      	bne.n	800baae <_dtoa_r+0xa36>
 800baec:	07da      	lsls	r2, r3, #31
 800baee:	d5de      	bpl.n	800baae <_dtoa_r+0xa36>
 800baf0:	2b39      	cmp	r3, #57	@ 0x39
 800baf2:	d1da      	bne.n	800baaa <_dtoa_r+0xa32>
 800baf4:	2339      	movs	r3, #57	@ 0x39
 800baf6:	f88b 3000 	strb.w	r3, [fp]
 800bafa:	4633      	mov	r3, r6
 800bafc:	461e      	mov	r6, r3
 800bafe:	3b01      	subs	r3, #1
 800bb00:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bb04:	2a39      	cmp	r2, #57	@ 0x39
 800bb06:	d04e      	beq.n	800bba6 <_dtoa_r+0xb2e>
 800bb08:	3201      	adds	r2, #1
 800bb0a:	701a      	strb	r2, [r3, #0]
 800bb0c:	e501      	b.n	800b512 <_dtoa_r+0x49a>
 800bb0e:	2a00      	cmp	r2, #0
 800bb10:	dd03      	ble.n	800bb1a <_dtoa_r+0xaa2>
 800bb12:	2b39      	cmp	r3, #57	@ 0x39
 800bb14:	d0ee      	beq.n	800baf4 <_dtoa_r+0xa7c>
 800bb16:	3301      	adds	r3, #1
 800bb18:	e7c9      	b.n	800baae <_dtoa_r+0xa36>
 800bb1a:	9a00      	ldr	r2, [sp, #0]
 800bb1c:	9908      	ldr	r1, [sp, #32]
 800bb1e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bb22:	428a      	cmp	r2, r1
 800bb24:	d028      	beq.n	800bb78 <_dtoa_r+0xb00>
 800bb26:	9902      	ldr	r1, [sp, #8]
 800bb28:	2300      	movs	r3, #0
 800bb2a:	220a      	movs	r2, #10
 800bb2c:	4648      	mov	r0, r9
 800bb2e:	f000 f91f 	bl	800bd70 <__multadd>
 800bb32:	42af      	cmp	r7, r5
 800bb34:	9002      	str	r0, [sp, #8]
 800bb36:	f04f 0300 	mov.w	r3, #0
 800bb3a:	f04f 020a 	mov.w	r2, #10
 800bb3e:	4639      	mov	r1, r7
 800bb40:	4648      	mov	r0, r9
 800bb42:	d107      	bne.n	800bb54 <_dtoa_r+0xadc>
 800bb44:	f000 f914 	bl	800bd70 <__multadd>
 800bb48:	4607      	mov	r7, r0
 800bb4a:	4605      	mov	r5, r0
 800bb4c:	9b00      	ldr	r3, [sp, #0]
 800bb4e:	3301      	adds	r3, #1
 800bb50:	9300      	str	r3, [sp, #0]
 800bb52:	e777      	b.n	800ba44 <_dtoa_r+0x9cc>
 800bb54:	f000 f90c 	bl	800bd70 <__multadd>
 800bb58:	4629      	mov	r1, r5
 800bb5a:	4607      	mov	r7, r0
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	220a      	movs	r2, #10
 800bb60:	4648      	mov	r0, r9
 800bb62:	f000 f905 	bl	800bd70 <__multadd>
 800bb66:	4605      	mov	r5, r0
 800bb68:	e7f0      	b.n	800bb4c <_dtoa_r+0xad4>
 800bb6a:	f1bb 0f00 	cmp.w	fp, #0
 800bb6e:	bfcc      	ite	gt
 800bb70:	465e      	movgt	r6, fp
 800bb72:	2601      	movle	r6, #1
 800bb74:	4456      	add	r6, sl
 800bb76:	2700      	movs	r7, #0
 800bb78:	9902      	ldr	r1, [sp, #8]
 800bb7a:	9300      	str	r3, [sp, #0]
 800bb7c:	2201      	movs	r2, #1
 800bb7e:	4648      	mov	r0, r9
 800bb80:	f000 fae4 	bl	800c14c <__lshift>
 800bb84:	4621      	mov	r1, r4
 800bb86:	9002      	str	r0, [sp, #8]
 800bb88:	f000 fb4c 	bl	800c224 <__mcmp>
 800bb8c:	2800      	cmp	r0, #0
 800bb8e:	dcb4      	bgt.n	800bafa <_dtoa_r+0xa82>
 800bb90:	d102      	bne.n	800bb98 <_dtoa_r+0xb20>
 800bb92:	9b00      	ldr	r3, [sp, #0]
 800bb94:	07db      	lsls	r3, r3, #31
 800bb96:	d4b0      	bmi.n	800bafa <_dtoa_r+0xa82>
 800bb98:	4633      	mov	r3, r6
 800bb9a:	461e      	mov	r6, r3
 800bb9c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bba0:	2a30      	cmp	r2, #48	@ 0x30
 800bba2:	d0fa      	beq.n	800bb9a <_dtoa_r+0xb22>
 800bba4:	e4b5      	b.n	800b512 <_dtoa_r+0x49a>
 800bba6:	459a      	cmp	sl, r3
 800bba8:	d1a8      	bne.n	800bafc <_dtoa_r+0xa84>
 800bbaa:	2331      	movs	r3, #49	@ 0x31
 800bbac:	f108 0801 	add.w	r8, r8, #1
 800bbb0:	f88a 3000 	strb.w	r3, [sl]
 800bbb4:	e4ad      	b.n	800b512 <_dtoa_r+0x49a>
 800bbb6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bbb8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800bc14 <_dtoa_r+0xb9c>
 800bbbc:	b11b      	cbz	r3, 800bbc6 <_dtoa_r+0xb4e>
 800bbbe:	f10a 0308 	add.w	r3, sl, #8
 800bbc2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800bbc4:	6013      	str	r3, [r2, #0]
 800bbc6:	4650      	mov	r0, sl
 800bbc8:	b017      	add	sp, #92	@ 0x5c
 800bbca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbce:	9b07      	ldr	r3, [sp, #28]
 800bbd0:	2b01      	cmp	r3, #1
 800bbd2:	f77f ae2e 	ble.w	800b832 <_dtoa_r+0x7ba>
 800bbd6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bbd8:	9308      	str	r3, [sp, #32]
 800bbda:	2001      	movs	r0, #1
 800bbdc:	e64d      	b.n	800b87a <_dtoa_r+0x802>
 800bbde:	f1bb 0f00 	cmp.w	fp, #0
 800bbe2:	f77f aed9 	ble.w	800b998 <_dtoa_r+0x920>
 800bbe6:	4656      	mov	r6, sl
 800bbe8:	9802      	ldr	r0, [sp, #8]
 800bbea:	4621      	mov	r1, r4
 800bbec:	f7ff f9bc 	bl	800af68 <quorem>
 800bbf0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800bbf4:	f806 3b01 	strb.w	r3, [r6], #1
 800bbf8:	eba6 020a 	sub.w	r2, r6, sl
 800bbfc:	4593      	cmp	fp, r2
 800bbfe:	ddb4      	ble.n	800bb6a <_dtoa_r+0xaf2>
 800bc00:	9902      	ldr	r1, [sp, #8]
 800bc02:	2300      	movs	r3, #0
 800bc04:	220a      	movs	r2, #10
 800bc06:	4648      	mov	r0, r9
 800bc08:	f000 f8b2 	bl	800bd70 <__multadd>
 800bc0c:	9002      	str	r0, [sp, #8]
 800bc0e:	e7eb      	b.n	800bbe8 <_dtoa_r+0xb70>
 800bc10:	0800ebb1 	.word	0x0800ebb1
 800bc14:	0800eb35 	.word	0x0800eb35

0800bc18 <_free_r>:
 800bc18:	b538      	push	{r3, r4, r5, lr}
 800bc1a:	4605      	mov	r5, r0
 800bc1c:	2900      	cmp	r1, #0
 800bc1e:	d041      	beq.n	800bca4 <_free_r+0x8c>
 800bc20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc24:	1f0c      	subs	r4, r1, #4
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	bfb8      	it	lt
 800bc2a:	18e4      	addlt	r4, r4, r3
 800bc2c:	f7fe f8ce 	bl	8009dcc <__malloc_lock>
 800bc30:	4a1d      	ldr	r2, [pc, #116]	@ (800bca8 <_free_r+0x90>)
 800bc32:	6813      	ldr	r3, [r2, #0]
 800bc34:	b933      	cbnz	r3, 800bc44 <_free_r+0x2c>
 800bc36:	6063      	str	r3, [r4, #4]
 800bc38:	6014      	str	r4, [r2, #0]
 800bc3a:	4628      	mov	r0, r5
 800bc3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc40:	f7fe b8ca 	b.w	8009dd8 <__malloc_unlock>
 800bc44:	42a3      	cmp	r3, r4
 800bc46:	d908      	bls.n	800bc5a <_free_r+0x42>
 800bc48:	6820      	ldr	r0, [r4, #0]
 800bc4a:	1821      	adds	r1, r4, r0
 800bc4c:	428b      	cmp	r3, r1
 800bc4e:	bf01      	itttt	eq
 800bc50:	6819      	ldreq	r1, [r3, #0]
 800bc52:	685b      	ldreq	r3, [r3, #4]
 800bc54:	1809      	addeq	r1, r1, r0
 800bc56:	6021      	streq	r1, [r4, #0]
 800bc58:	e7ed      	b.n	800bc36 <_free_r+0x1e>
 800bc5a:	461a      	mov	r2, r3
 800bc5c:	685b      	ldr	r3, [r3, #4]
 800bc5e:	b10b      	cbz	r3, 800bc64 <_free_r+0x4c>
 800bc60:	42a3      	cmp	r3, r4
 800bc62:	d9fa      	bls.n	800bc5a <_free_r+0x42>
 800bc64:	6811      	ldr	r1, [r2, #0]
 800bc66:	1850      	adds	r0, r2, r1
 800bc68:	42a0      	cmp	r0, r4
 800bc6a:	d10b      	bne.n	800bc84 <_free_r+0x6c>
 800bc6c:	6820      	ldr	r0, [r4, #0]
 800bc6e:	4401      	add	r1, r0
 800bc70:	1850      	adds	r0, r2, r1
 800bc72:	4283      	cmp	r3, r0
 800bc74:	6011      	str	r1, [r2, #0]
 800bc76:	d1e0      	bne.n	800bc3a <_free_r+0x22>
 800bc78:	6818      	ldr	r0, [r3, #0]
 800bc7a:	685b      	ldr	r3, [r3, #4]
 800bc7c:	6053      	str	r3, [r2, #4]
 800bc7e:	4408      	add	r0, r1
 800bc80:	6010      	str	r0, [r2, #0]
 800bc82:	e7da      	b.n	800bc3a <_free_r+0x22>
 800bc84:	d902      	bls.n	800bc8c <_free_r+0x74>
 800bc86:	230c      	movs	r3, #12
 800bc88:	602b      	str	r3, [r5, #0]
 800bc8a:	e7d6      	b.n	800bc3a <_free_r+0x22>
 800bc8c:	6820      	ldr	r0, [r4, #0]
 800bc8e:	1821      	adds	r1, r4, r0
 800bc90:	428b      	cmp	r3, r1
 800bc92:	bf04      	itt	eq
 800bc94:	6819      	ldreq	r1, [r3, #0]
 800bc96:	685b      	ldreq	r3, [r3, #4]
 800bc98:	6063      	str	r3, [r4, #4]
 800bc9a:	bf04      	itt	eq
 800bc9c:	1809      	addeq	r1, r1, r0
 800bc9e:	6021      	streq	r1, [r4, #0]
 800bca0:	6054      	str	r4, [r2, #4]
 800bca2:	e7ca      	b.n	800bc3a <_free_r+0x22>
 800bca4:	bd38      	pop	{r3, r4, r5, pc}
 800bca6:	bf00      	nop
 800bca8:	2000de7c 	.word	0x2000de7c

0800bcac <_Balloc>:
 800bcac:	b570      	push	{r4, r5, r6, lr}
 800bcae:	69c6      	ldr	r6, [r0, #28]
 800bcb0:	4604      	mov	r4, r0
 800bcb2:	460d      	mov	r5, r1
 800bcb4:	b976      	cbnz	r6, 800bcd4 <_Balloc+0x28>
 800bcb6:	2010      	movs	r0, #16
 800bcb8:	f7fd ffde 	bl	8009c78 <malloc>
 800bcbc:	4602      	mov	r2, r0
 800bcbe:	61e0      	str	r0, [r4, #28]
 800bcc0:	b920      	cbnz	r0, 800bccc <_Balloc+0x20>
 800bcc2:	4b18      	ldr	r3, [pc, #96]	@ (800bd24 <_Balloc+0x78>)
 800bcc4:	4818      	ldr	r0, [pc, #96]	@ (800bd28 <_Balloc+0x7c>)
 800bcc6:	216b      	movs	r1, #107	@ 0x6b
 800bcc8:	f001 fd46 	bl	800d758 <__assert_func>
 800bccc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bcd0:	6006      	str	r6, [r0, #0]
 800bcd2:	60c6      	str	r6, [r0, #12]
 800bcd4:	69e6      	ldr	r6, [r4, #28]
 800bcd6:	68f3      	ldr	r3, [r6, #12]
 800bcd8:	b183      	cbz	r3, 800bcfc <_Balloc+0x50>
 800bcda:	69e3      	ldr	r3, [r4, #28]
 800bcdc:	68db      	ldr	r3, [r3, #12]
 800bcde:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bce2:	b9b8      	cbnz	r0, 800bd14 <_Balloc+0x68>
 800bce4:	2101      	movs	r1, #1
 800bce6:	fa01 f605 	lsl.w	r6, r1, r5
 800bcea:	1d72      	adds	r2, r6, #5
 800bcec:	0092      	lsls	r2, r2, #2
 800bcee:	4620      	mov	r0, r4
 800bcf0:	f001 fd50 	bl	800d794 <_calloc_r>
 800bcf4:	b160      	cbz	r0, 800bd10 <_Balloc+0x64>
 800bcf6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bcfa:	e00e      	b.n	800bd1a <_Balloc+0x6e>
 800bcfc:	2221      	movs	r2, #33	@ 0x21
 800bcfe:	2104      	movs	r1, #4
 800bd00:	4620      	mov	r0, r4
 800bd02:	f001 fd47 	bl	800d794 <_calloc_r>
 800bd06:	69e3      	ldr	r3, [r4, #28]
 800bd08:	60f0      	str	r0, [r6, #12]
 800bd0a:	68db      	ldr	r3, [r3, #12]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d1e4      	bne.n	800bcda <_Balloc+0x2e>
 800bd10:	2000      	movs	r0, #0
 800bd12:	bd70      	pop	{r4, r5, r6, pc}
 800bd14:	6802      	ldr	r2, [r0, #0]
 800bd16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bd20:	e7f7      	b.n	800bd12 <_Balloc+0x66>
 800bd22:	bf00      	nop
 800bd24:	0800eb42 	.word	0x0800eb42
 800bd28:	0800ebc2 	.word	0x0800ebc2

0800bd2c <_Bfree>:
 800bd2c:	b570      	push	{r4, r5, r6, lr}
 800bd2e:	69c6      	ldr	r6, [r0, #28]
 800bd30:	4605      	mov	r5, r0
 800bd32:	460c      	mov	r4, r1
 800bd34:	b976      	cbnz	r6, 800bd54 <_Bfree+0x28>
 800bd36:	2010      	movs	r0, #16
 800bd38:	f7fd ff9e 	bl	8009c78 <malloc>
 800bd3c:	4602      	mov	r2, r0
 800bd3e:	61e8      	str	r0, [r5, #28]
 800bd40:	b920      	cbnz	r0, 800bd4c <_Bfree+0x20>
 800bd42:	4b09      	ldr	r3, [pc, #36]	@ (800bd68 <_Bfree+0x3c>)
 800bd44:	4809      	ldr	r0, [pc, #36]	@ (800bd6c <_Bfree+0x40>)
 800bd46:	218f      	movs	r1, #143	@ 0x8f
 800bd48:	f001 fd06 	bl	800d758 <__assert_func>
 800bd4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd50:	6006      	str	r6, [r0, #0]
 800bd52:	60c6      	str	r6, [r0, #12]
 800bd54:	b13c      	cbz	r4, 800bd66 <_Bfree+0x3a>
 800bd56:	69eb      	ldr	r3, [r5, #28]
 800bd58:	6862      	ldr	r2, [r4, #4]
 800bd5a:	68db      	ldr	r3, [r3, #12]
 800bd5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bd60:	6021      	str	r1, [r4, #0]
 800bd62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bd66:	bd70      	pop	{r4, r5, r6, pc}
 800bd68:	0800eb42 	.word	0x0800eb42
 800bd6c:	0800ebc2 	.word	0x0800ebc2

0800bd70 <__multadd>:
 800bd70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd74:	690d      	ldr	r5, [r1, #16]
 800bd76:	4607      	mov	r7, r0
 800bd78:	460c      	mov	r4, r1
 800bd7a:	461e      	mov	r6, r3
 800bd7c:	f101 0c14 	add.w	ip, r1, #20
 800bd80:	2000      	movs	r0, #0
 800bd82:	f8dc 3000 	ldr.w	r3, [ip]
 800bd86:	b299      	uxth	r1, r3
 800bd88:	fb02 6101 	mla	r1, r2, r1, r6
 800bd8c:	0c1e      	lsrs	r6, r3, #16
 800bd8e:	0c0b      	lsrs	r3, r1, #16
 800bd90:	fb02 3306 	mla	r3, r2, r6, r3
 800bd94:	b289      	uxth	r1, r1
 800bd96:	3001      	adds	r0, #1
 800bd98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bd9c:	4285      	cmp	r5, r0
 800bd9e:	f84c 1b04 	str.w	r1, [ip], #4
 800bda2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bda6:	dcec      	bgt.n	800bd82 <__multadd+0x12>
 800bda8:	b30e      	cbz	r6, 800bdee <__multadd+0x7e>
 800bdaa:	68a3      	ldr	r3, [r4, #8]
 800bdac:	42ab      	cmp	r3, r5
 800bdae:	dc19      	bgt.n	800bde4 <__multadd+0x74>
 800bdb0:	6861      	ldr	r1, [r4, #4]
 800bdb2:	4638      	mov	r0, r7
 800bdb4:	3101      	adds	r1, #1
 800bdb6:	f7ff ff79 	bl	800bcac <_Balloc>
 800bdba:	4680      	mov	r8, r0
 800bdbc:	b928      	cbnz	r0, 800bdca <__multadd+0x5a>
 800bdbe:	4602      	mov	r2, r0
 800bdc0:	4b0c      	ldr	r3, [pc, #48]	@ (800bdf4 <__multadd+0x84>)
 800bdc2:	480d      	ldr	r0, [pc, #52]	@ (800bdf8 <__multadd+0x88>)
 800bdc4:	21ba      	movs	r1, #186	@ 0xba
 800bdc6:	f001 fcc7 	bl	800d758 <__assert_func>
 800bdca:	6922      	ldr	r2, [r4, #16]
 800bdcc:	3202      	adds	r2, #2
 800bdce:	f104 010c 	add.w	r1, r4, #12
 800bdd2:	0092      	lsls	r2, r2, #2
 800bdd4:	300c      	adds	r0, #12
 800bdd6:	f7ff f8b2 	bl	800af3e <memcpy>
 800bdda:	4621      	mov	r1, r4
 800bddc:	4638      	mov	r0, r7
 800bdde:	f7ff ffa5 	bl	800bd2c <_Bfree>
 800bde2:	4644      	mov	r4, r8
 800bde4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bde8:	3501      	adds	r5, #1
 800bdea:	615e      	str	r6, [r3, #20]
 800bdec:	6125      	str	r5, [r4, #16]
 800bdee:	4620      	mov	r0, r4
 800bdf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdf4:	0800ebb1 	.word	0x0800ebb1
 800bdf8:	0800ebc2 	.word	0x0800ebc2

0800bdfc <__s2b>:
 800bdfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be00:	460c      	mov	r4, r1
 800be02:	4615      	mov	r5, r2
 800be04:	461f      	mov	r7, r3
 800be06:	2209      	movs	r2, #9
 800be08:	3308      	adds	r3, #8
 800be0a:	4606      	mov	r6, r0
 800be0c:	fb93 f3f2 	sdiv	r3, r3, r2
 800be10:	2100      	movs	r1, #0
 800be12:	2201      	movs	r2, #1
 800be14:	429a      	cmp	r2, r3
 800be16:	db09      	blt.n	800be2c <__s2b+0x30>
 800be18:	4630      	mov	r0, r6
 800be1a:	f7ff ff47 	bl	800bcac <_Balloc>
 800be1e:	b940      	cbnz	r0, 800be32 <__s2b+0x36>
 800be20:	4602      	mov	r2, r0
 800be22:	4b19      	ldr	r3, [pc, #100]	@ (800be88 <__s2b+0x8c>)
 800be24:	4819      	ldr	r0, [pc, #100]	@ (800be8c <__s2b+0x90>)
 800be26:	21d3      	movs	r1, #211	@ 0xd3
 800be28:	f001 fc96 	bl	800d758 <__assert_func>
 800be2c:	0052      	lsls	r2, r2, #1
 800be2e:	3101      	adds	r1, #1
 800be30:	e7f0      	b.n	800be14 <__s2b+0x18>
 800be32:	9b08      	ldr	r3, [sp, #32]
 800be34:	6143      	str	r3, [r0, #20]
 800be36:	2d09      	cmp	r5, #9
 800be38:	f04f 0301 	mov.w	r3, #1
 800be3c:	6103      	str	r3, [r0, #16]
 800be3e:	dd16      	ble.n	800be6e <__s2b+0x72>
 800be40:	f104 0909 	add.w	r9, r4, #9
 800be44:	46c8      	mov	r8, r9
 800be46:	442c      	add	r4, r5
 800be48:	f818 3b01 	ldrb.w	r3, [r8], #1
 800be4c:	4601      	mov	r1, r0
 800be4e:	3b30      	subs	r3, #48	@ 0x30
 800be50:	220a      	movs	r2, #10
 800be52:	4630      	mov	r0, r6
 800be54:	f7ff ff8c 	bl	800bd70 <__multadd>
 800be58:	45a0      	cmp	r8, r4
 800be5a:	d1f5      	bne.n	800be48 <__s2b+0x4c>
 800be5c:	f1a5 0408 	sub.w	r4, r5, #8
 800be60:	444c      	add	r4, r9
 800be62:	1b2d      	subs	r5, r5, r4
 800be64:	1963      	adds	r3, r4, r5
 800be66:	42bb      	cmp	r3, r7
 800be68:	db04      	blt.n	800be74 <__s2b+0x78>
 800be6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be6e:	340a      	adds	r4, #10
 800be70:	2509      	movs	r5, #9
 800be72:	e7f6      	b.n	800be62 <__s2b+0x66>
 800be74:	f814 3b01 	ldrb.w	r3, [r4], #1
 800be78:	4601      	mov	r1, r0
 800be7a:	3b30      	subs	r3, #48	@ 0x30
 800be7c:	220a      	movs	r2, #10
 800be7e:	4630      	mov	r0, r6
 800be80:	f7ff ff76 	bl	800bd70 <__multadd>
 800be84:	e7ee      	b.n	800be64 <__s2b+0x68>
 800be86:	bf00      	nop
 800be88:	0800ebb1 	.word	0x0800ebb1
 800be8c:	0800ebc2 	.word	0x0800ebc2

0800be90 <__hi0bits>:
 800be90:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800be94:	4603      	mov	r3, r0
 800be96:	bf36      	itet	cc
 800be98:	0403      	lslcc	r3, r0, #16
 800be9a:	2000      	movcs	r0, #0
 800be9c:	2010      	movcc	r0, #16
 800be9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bea2:	bf3c      	itt	cc
 800bea4:	021b      	lslcc	r3, r3, #8
 800bea6:	3008      	addcc	r0, #8
 800bea8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800beac:	bf3c      	itt	cc
 800beae:	011b      	lslcc	r3, r3, #4
 800beb0:	3004      	addcc	r0, #4
 800beb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800beb6:	bf3c      	itt	cc
 800beb8:	009b      	lslcc	r3, r3, #2
 800beba:	3002      	addcc	r0, #2
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	db05      	blt.n	800becc <__hi0bits+0x3c>
 800bec0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bec4:	f100 0001 	add.w	r0, r0, #1
 800bec8:	bf08      	it	eq
 800beca:	2020      	moveq	r0, #32
 800becc:	4770      	bx	lr

0800bece <__lo0bits>:
 800bece:	6803      	ldr	r3, [r0, #0]
 800bed0:	4602      	mov	r2, r0
 800bed2:	f013 0007 	ands.w	r0, r3, #7
 800bed6:	d00b      	beq.n	800bef0 <__lo0bits+0x22>
 800bed8:	07d9      	lsls	r1, r3, #31
 800beda:	d421      	bmi.n	800bf20 <__lo0bits+0x52>
 800bedc:	0798      	lsls	r0, r3, #30
 800bede:	bf49      	itett	mi
 800bee0:	085b      	lsrmi	r3, r3, #1
 800bee2:	089b      	lsrpl	r3, r3, #2
 800bee4:	2001      	movmi	r0, #1
 800bee6:	6013      	strmi	r3, [r2, #0]
 800bee8:	bf5c      	itt	pl
 800beea:	6013      	strpl	r3, [r2, #0]
 800beec:	2002      	movpl	r0, #2
 800beee:	4770      	bx	lr
 800bef0:	b299      	uxth	r1, r3
 800bef2:	b909      	cbnz	r1, 800bef8 <__lo0bits+0x2a>
 800bef4:	0c1b      	lsrs	r3, r3, #16
 800bef6:	2010      	movs	r0, #16
 800bef8:	b2d9      	uxtb	r1, r3
 800befa:	b909      	cbnz	r1, 800bf00 <__lo0bits+0x32>
 800befc:	3008      	adds	r0, #8
 800befe:	0a1b      	lsrs	r3, r3, #8
 800bf00:	0719      	lsls	r1, r3, #28
 800bf02:	bf04      	itt	eq
 800bf04:	091b      	lsreq	r3, r3, #4
 800bf06:	3004      	addeq	r0, #4
 800bf08:	0799      	lsls	r1, r3, #30
 800bf0a:	bf04      	itt	eq
 800bf0c:	089b      	lsreq	r3, r3, #2
 800bf0e:	3002      	addeq	r0, #2
 800bf10:	07d9      	lsls	r1, r3, #31
 800bf12:	d403      	bmi.n	800bf1c <__lo0bits+0x4e>
 800bf14:	085b      	lsrs	r3, r3, #1
 800bf16:	f100 0001 	add.w	r0, r0, #1
 800bf1a:	d003      	beq.n	800bf24 <__lo0bits+0x56>
 800bf1c:	6013      	str	r3, [r2, #0]
 800bf1e:	4770      	bx	lr
 800bf20:	2000      	movs	r0, #0
 800bf22:	4770      	bx	lr
 800bf24:	2020      	movs	r0, #32
 800bf26:	4770      	bx	lr

0800bf28 <__i2b>:
 800bf28:	b510      	push	{r4, lr}
 800bf2a:	460c      	mov	r4, r1
 800bf2c:	2101      	movs	r1, #1
 800bf2e:	f7ff febd 	bl	800bcac <_Balloc>
 800bf32:	4602      	mov	r2, r0
 800bf34:	b928      	cbnz	r0, 800bf42 <__i2b+0x1a>
 800bf36:	4b05      	ldr	r3, [pc, #20]	@ (800bf4c <__i2b+0x24>)
 800bf38:	4805      	ldr	r0, [pc, #20]	@ (800bf50 <__i2b+0x28>)
 800bf3a:	f240 1145 	movw	r1, #325	@ 0x145
 800bf3e:	f001 fc0b 	bl	800d758 <__assert_func>
 800bf42:	2301      	movs	r3, #1
 800bf44:	6144      	str	r4, [r0, #20]
 800bf46:	6103      	str	r3, [r0, #16]
 800bf48:	bd10      	pop	{r4, pc}
 800bf4a:	bf00      	nop
 800bf4c:	0800ebb1 	.word	0x0800ebb1
 800bf50:	0800ebc2 	.word	0x0800ebc2

0800bf54 <__multiply>:
 800bf54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf58:	4617      	mov	r7, r2
 800bf5a:	690a      	ldr	r2, [r1, #16]
 800bf5c:	693b      	ldr	r3, [r7, #16]
 800bf5e:	429a      	cmp	r2, r3
 800bf60:	bfa8      	it	ge
 800bf62:	463b      	movge	r3, r7
 800bf64:	4689      	mov	r9, r1
 800bf66:	bfa4      	itt	ge
 800bf68:	460f      	movge	r7, r1
 800bf6a:	4699      	movge	r9, r3
 800bf6c:	693d      	ldr	r5, [r7, #16]
 800bf6e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	6879      	ldr	r1, [r7, #4]
 800bf76:	eb05 060a 	add.w	r6, r5, sl
 800bf7a:	42b3      	cmp	r3, r6
 800bf7c:	b085      	sub	sp, #20
 800bf7e:	bfb8      	it	lt
 800bf80:	3101      	addlt	r1, #1
 800bf82:	f7ff fe93 	bl	800bcac <_Balloc>
 800bf86:	b930      	cbnz	r0, 800bf96 <__multiply+0x42>
 800bf88:	4602      	mov	r2, r0
 800bf8a:	4b41      	ldr	r3, [pc, #260]	@ (800c090 <__multiply+0x13c>)
 800bf8c:	4841      	ldr	r0, [pc, #260]	@ (800c094 <__multiply+0x140>)
 800bf8e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bf92:	f001 fbe1 	bl	800d758 <__assert_func>
 800bf96:	f100 0414 	add.w	r4, r0, #20
 800bf9a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800bf9e:	4623      	mov	r3, r4
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	4573      	cmp	r3, lr
 800bfa4:	d320      	bcc.n	800bfe8 <__multiply+0x94>
 800bfa6:	f107 0814 	add.w	r8, r7, #20
 800bfaa:	f109 0114 	add.w	r1, r9, #20
 800bfae:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800bfb2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800bfb6:	9302      	str	r3, [sp, #8]
 800bfb8:	1beb      	subs	r3, r5, r7
 800bfba:	3b15      	subs	r3, #21
 800bfbc:	f023 0303 	bic.w	r3, r3, #3
 800bfc0:	3304      	adds	r3, #4
 800bfc2:	3715      	adds	r7, #21
 800bfc4:	42bd      	cmp	r5, r7
 800bfc6:	bf38      	it	cc
 800bfc8:	2304      	movcc	r3, #4
 800bfca:	9301      	str	r3, [sp, #4]
 800bfcc:	9b02      	ldr	r3, [sp, #8]
 800bfce:	9103      	str	r1, [sp, #12]
 800bfd0:	428b      	cmp	r3, r1
 800bfd2:	d80c      	bhi.n	800bfee <__multiply+0x9a>
 800bfd4:	2e00      	cmp	r6, #0
 800bfd6:	dd03      	ble.n	800bfe0 <__multiply+0x8c>
 800bfd8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d055      	beq.n	800c08c <__multiply+0x138>
 800bfe0:	6106      	str	r6, [r0, #16]
 800bfe2:	b005      	add	sp, #20
 800bfe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfe8:	f843 2b04 	str.w	r2, [r3], #4
 800bfec:	e7d9      	b.n	800bfa2 <__multiply+0x4e>
 800bfee:	f8b1 a000 	ldrh.w	sl, [r1]
 800bff2:	f1ba 0f00 	cmp.w	sl, #0
 800bff6:	d01f      	beq.n	800c038 <__multiply+0xe4>
 800bff8:	46c4      	mov	ip, r8
 800bffa:	46a1      	mov	r9, r4
 800bffc:	2700      	movs	r7, #0
 800bffe:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c002:	f8d9 3000 	ldr.w	r3, [r9]
 800c006:	fa1f fb82 	uxth.w	fp, r2
 800c00a:	b29b      	uxth	r3, r3
 800c00c:	fb0a 330b 	mla	r3, sl, fp, r3
 800c010:	443b      	add	r3, r7
 800c012:	f8d9 7000 	ldr.w	r7, [r9]
 800c016:	0c12      	lsrs	r2, r2, #16
 800c018:	0c3f      	lsrs	r7, r7, #16
 800c01a:	fb0a 7202 	mla	r2, sl, r2, r7
 800c01e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800c022:	b29b      	uxth	r3, r3
 800c024:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c028:	4565      	cmp	r5, ip
 800c02a:	f849 3b04 	str.w	r3, [r9], #4
 800c02e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800c032:	d8e4      	bhi.n	800bffe <__multiply+0xaa>
 800c034:	9b01      	ldr	r3, [sp, #4]
 800c036:	50e7      	str	r7, [r4, r3]
 800c038:	9b03      	ldr	r3, [sp, #12]
 800c03a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c03e:	3104      	adds	r1, #4
 800c040:	f1b9 0f00 	cmp.w	r9, #0
 800c044:	d020      	beq.n	800c088 <__multiply+0x134>
 800c046:	6823      	ldr	r3, [r4, #0]
 800c048:	4647      	mov	r7, r8
 800c04a:	46a4      	mov	ip, r4
 800c04c:	f04f 0a00 	mov.w	sl, #0
 800c050:	f8b7 b000 	ldrh.w	fp, [r7]
 800c054:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800c058:	fb09 220b 	mla	r2, r9, fp, r2
 800c05c:	4452      	add	r2, sl
 800c05e:	b29b      	uxth	r3, r3
 800c060:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c064:	f84c 3b04 	str.w	r3, [ip], #4
 800c068:	f857 3b04 	ldr.w	r3, [r7], #4
 800c06c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c070:	f8bc 3000 	ldrh.w	r3, [ip]
 800c074:	fb09 330a 	mla	r3, r9, sl, r3
 800c078:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800c07c:	42bd      	cmp	r5, r7
 800c07e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c082:	d8e5      	bhi.n	800c050 <__multiply+0xfc>
 800c084:	9a01      	ldr	r2, [sp, #4]
 800c086:	50a3      	str	r3, [r4, r2]
 800c088:	3404      	adds	r4, #4
 800c08a:	e79f      	b.n	800bfcc <__multiply+0x78>
 800c08c:	3e01      	subs	r6, #1
 800c08e:	e7a1      	b.n	800bfd4 <__multiply+0x80>
 800c090:	0800ebb1 	.word	0x0800ebb1
 800c094:	0800ebc2 	.word	0x0800ebc2

0800c098 <__pow5mult>:
 800c098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c09c:	4615      	mov	r5, r2
 800c09e:	f012 0203 	ands.w	r2, r2, #3
 800c0a2:	4607      	mov	r7, r0
 800c0a4:	460e      	mov	r6, r1
 800c0a6:	d007      	beq.n	800c0b8 <__pow5mult+0x20>
 800c0a8:	4c25      	ldr	r4, [pc, #148]	@ (800c140 <__pow5mult+0xa8>)
 800c0aa:	3a01      	subs	r2, #1
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c0b2:	f7ff fe5d 	bl	800bd70 <__multadd>
 800c0b6:	4606      	mov	r6, r0
 800c0b8:	10ad      	asrs	r5, r5, #2
 800c0ba:	d03d      	beq.n	800c138 <__pow5mult+0xa0>
 800c0bc:	69fc      	ldr	r4, [r7, #28]
 800c0be:	b97c      	cbnz	r4, 800c0e0 <__pow5mult+0x48>
 800c0c0:	2010      	movs	r0, #16
 800c0c2:	f7fd fdd9 	bl	8009c78 <malloc>
 800c0c6:	4602      	mov	r2, r0
 800c0c8:	61f8      	str	r0, [r7, #28]
 800c0ca:	b928      	cbnz	r0, 800c0d8 <__pow5mult+0x40>
 800c0cc:	4b1d      	ldr	r3, [pc, #116]	@ (800c144 <__pow5mult+0xac>)
 800c0ce:	481e      	ldr	r0, [pc, #120]	@ (800c148 <__pow5mult+0xb0>)
 800c0d0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c0d4:	f001 fb40 	bl	800d758 <__assert_func>
 800c0d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c0dc:	6004      	str	r4, [r0, #0]
 800c0de:	60c4      	str	r4, [r0, #12]
 800c0e0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c0e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c0e8:	b94c      	cbnz	r4, 800c0fe <__pow5mult+0x66>
 800c0ea:	f240 2171 	movw	r1, #625	@ 0x271
 800c0ee:	4638      	mov	r0, r7
 800c0f0:	f7ff ff1a 	bl	800bf28 <__i2b>
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	f8c8 0008 	str.w	r0, [r8, #8]
 800c0fa:	4604      	mov	r4, r0
 800c0fc:	6003      	str	r3, [r0, #0]
 800c0fe:	f04f 0900 	mov.w	r9, #0
 800c102:	07eb      	lsls	r3, r5, #31
 800c104:	d50a      	bpl.n	800c11c <__pow5mult+0x84>
 800c106:	4631      	mov	r1, r6
 800c108:	4622      	mov	r2, r4
 800c10a:	4638      	mov	r0, r7
 800c10c:	f7ff ff22 	bl	800bf54 <__multiply>
 800c110:	4631      	mov	r1, r6
 800c112:	4680      	mov	r8, r0
 800c114:	4638      	mov	r0, r7
 800c116:	f7ff fe09 	bl	800bd2c <_Bfree>
 800c11a:	4646      	mov	r6, r8
 800c11c:	106d      	asrs	r5, r5, #1
 800c11e:	d00b      	beq.n	800c138 <__pow5mult+0xa0>
 800c120:	6820      	ldr	r0, [r4, #0]
 800c122:	b938      	cbnz	r0, 800c134 <__pow5mult+0x9c>
 800c124:	4622      	mov	r2, r4
 800c126:	4621      	mov	r1, r4
 800c128:	4638      	mov	r0, r7
 800c12a:	f7ff ff13 	bl	800bf54 <__multiply>
 800c12e:	6020      	str	r0, [r4, #0]
 800c130:	f8c0 9000 	str.w	r9, [r0]
 800c134:	4604      	mov	r4, r0
 800c136:	e7e4      	b.n	800c102 <__pow5mult+0x6a>
 800c138:	4630      	mov	r0, r6
 800c13a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c13e:	bf00      	nop
 800c140:	0800ecd4 	.word	0x0800ecd4
 800c144:	0800eb42 	.word	0x0800eb42
 800c148:	0800ebc2 	.word	0x0800ebc2

0800c14c <__lshift>:
 800c14c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c150:	460c      	mov	r4, r1
 800c152:	6849      	ldr	r1, [r1, #4]
 800c154:	6923      	ldr	r3, [r4, #16]
 800c156:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c15a:	68a3      	ldr	r3, [r4, #8]
 800c15c:	4607      	mov	r7, r0
 800c15e:	4691      	mov	r9, r2
 800c160:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c164:	f108 0601 	add.w	r6, r8, #1
 800c168:	42b3      	cmp	r3, r6
 800c16a:	db0b      	blt.n	800c184 <__lshift+0x38>
 800c16c:	4638      	mov	r0, r7
 800c16e:	f7ff fd9d 	bl	800bcac <_Balloc>
 800c172:	4605      	mov	r5, r0
 800c174:	b948      	cbnz	r0, 800c18a <__lshift+0x3e>
 800c176:	4602      	mov	r2, r0
 800c178:	4b28      	ldr	r3, [pc, #160]	@ (800c21c <__lshift+0xd0>)
 800c17a:	4829      	ldr	r0, [pc, #164]	@ (800c220 <__lshift+0xd4>)
 800c17c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c180:	f001 faea 	bl	800d758 <__assert_func>
 800c184:	3101      	adds	r1, #1
 800c186:	005b      	lsls	r3, r3, #1
 800c188:	e7ee      	b.n	800c168 <__lshift+0x1c>
 800c18a:	2300      	movs	r3, #0
 800c18c:	f100 0114 	add.w	r1, r0, #20
 800c190:	f100 0210 	add.w	r2, r0, #16
 800c194:	4618      	mov	r0, r3
 800c196:	4553      	cmp	r3, sl
 800c198:	db33      	blt.n	800c202 <__lshift+0xb6>
 800c19a:	6920      	ldr	r0, [r4, #16]
 800c19c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c1a0:	f104 0314 	add.w	r3, r4, #20
 800c1a4:	f019 091f 	ands.w	r9, r9, #31
 800c1a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c1ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c1b0:	d02b      	beq.n	800c20a <__lshift+0xbe>
 800c1b2:	f1c9 0e20 	rsb	lr, r9, #32
 800c1b6:	468a      	mov	sl, r1
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	6818      	ldr	r0, [r3, #0]
 800c1bc:	fa00 f009 	lsl.w	r0, r0, r9
 800c1c0:	4310      	orrs	r0, r2
 800c1c2:	f84a 0b04 	str.w	r0, [sl], #4
 800c1c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1ca:	459c      	cmp	ip, r3
 800c1cc:	fa22 f20e 	lsr.w	r2, r2, lr
 800c1d0:	d8f3      	bhi.n	800c1ba <__lshift+0x6e>
 800c1d2:	ebac 0304 	sub.w	r3, ip, r4
 800c1d6:	3b15      	subs	r3, #21
 800c1d8:	f023 0303 	bic.w	r3, r3, #3
 800c1dc:	3304      	adds	r3, #4
 800c1de:	f104 0015 	add.w	r0, r4, #21
 800c1e2:	4560      	cmp	r0, ip
 800c1e4:	bf88      	it	hi
 800c1e6:	2304      	movhi	r3, #4
 800c1e8:	50ca      	str	r2, [r1, r3]
 800c1ea:	b10a      	cbz	r2, 800c1f0 <__lshift+0xa4>
 800c1ec:	f108 0602 	add.w	r6, r8, #2
 800c1f0:	3e01      	subs	r6, #1
 800c1f2:	4638      	mov	r0, r7
 800c1f4:	612e      	str	r6, [r5, #16]
 800c1f6:	4621      	mov	r1, r4
 800c1f8:	f7ff fd98 	bl	800bd2c <_Bfree>
 800c1fc:	4628      	mov	r0, r5
 800c1fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c202:	f842 0f04 	str.w	r0, [r2, #4]!
 800c206:	3301      	adds	r3, #1
 800c208:	e7c5      	b.n	800c196 <__lshift+0x4a>
 800c20a:	3904      	subs	r1, #4
 800c20c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c210:	f841 2f04 	str.w	r2, [r1, #4]!
 800c214:	459c      	cmp	ip, r3
 800c216:	d8f9      	bhi.n	800c20c <__lshift+0xc0>
 800c218:	e7ea      	b.n	800c1f0 <__lshift+0xa4>
 800c21a:	bf00      	nop
 800c21c:	0800ebb1 	.word	0x0800ebb1
 800c220:	0800ebc2 	.word	0x0800ebc2

0800c224 <__mcmp>:
 800c224:	690a      	ldr	r2, [r1, #16]
 800c226:	4603      	mov	r3, r0
 800c228:	6900      	ldr	r0, [r0, #16]
 800c22a:	1a80      	subs	r0, r0, r2
 800c22c:	b530      	push	{r4, r5, lr}
 800c22e:	d10e      	bne.n	800c24e <__mcmp+0x2a>
 800c230:	3314      	adds	r3, #20
 800c232:	3114      	adds	r1, #20
 800c234:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c238:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c23c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c240:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c244:	4295      	cmp	r5, r2
 800c246:	d003      	beq.n	800c250 <__mcmp+0x2c>
 800c248:	d205      	bcs.n	800c256 <__mcmp+0x32>
 800c24a:	f04f 30ff 	mov.w	r0, #4294967295
 800c24e:	bd30      	pop	{r4, r5, pc}
 800c250:	42a3      	cmp	r3, r4
 800c252:	d3f3      	bcc.n	800c23c <__mcmp+0x18>
 800c254:	e7fb      	b.n	800c24e <__mcmp+0x2a>
 800c256:	2001      	movs	r0, #1
 800c258:	e7f9      	b.n	800c24e <__mcmp+0x2a>
	...

0800c25c <__mdiff>:
 800c25c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c260:	4689      	mov	r9, r1
 800c262:	4606      	mov	r6, r0
 800c264:	4611      	mov	r1, r2
 800c266:	4648      	mov	r0, r9
 800c268:	4614      	mov	r4, r2
 800c26a:	f7ff ffdb 	bl	800c224 <__mcmp>
 800c26e:	1e05      	subs	r5, r0, #0
 800c270:	d112      	bne.n	800c298 <__mdiff+0x3c>
 800c272:	4629      	mov	r1, r5
 800c274:	4630      	mov	r0, r6
 800c276:	f7ff fd19 	bl	800bcac <_Balloc>
 800c27a:	4602      	mov	r2, r0
 800c27c:	b928      	cbnz	r0, 800c28a <__mdiff+0x2e>
 800c27e:	4b3f      	ldr	r3, [pc, #252]	@ (800c37c <__mdiff+0x120>)
 800c280:	f240 2137 	movw	r1, #567	@ 0x237
 800c284:	483e      	ldr	r0, [pc, #248]	@ (800c380 <__mdiff+0x124>)
 800c286:	f001 fa67 	bl	800d758 <__assert_func>
 800c28a:	2301      	movs	r3, #1
 800c28c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c290:	4610      	mov	r0, r2
 800c292:	b003      	add	sp, #12
 800c294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c298:	bfbc      	itt	lt
 800c29a:	464b      	movlt	r3, r9
 800c29c:	46a1      	movlt	r9, r4
 800c29e:	4630      	mov	r0, r6
 800c2a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c2a4:	bfba      	itte	lt
 800c2a6:	461c      	movlt	r4, r3
 800c2a8:	2501      	movlt	r5, #1
 800c2aa:	2500      	movge	r5, #0
 800c2ac:	f7ff fcfe 	bl	800bcac <_Balloc>
 800c2b0:	4602      	mov	r2, r0
 800c2b2:	b918      	cbnz	r0, 800c2bc <__mdiff+0x60>
 800c2b4:	4b31      	ldr	r3, [pc, #196]	@ (800c37c <__mdiff+0x120>)
 800c2b6:	f240 2145 	movw	r1, #581	@ 0x245
 800c2ba:	e7e3      	b.n	800c284 <__mdiff+0x28>
 800c2bc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c2c0:	6926      	ldr	r6, [r4, #16]
 800c2c2:	60c5      	str	r5, [r0, #12]
 800c2c4:	f109 0310 	add.w	r3, r9, #16
 800c2c8:	f109 0514 	add.w	r5, r9, #20
 800c2cc:	f104 0e14 	add.w	lr, r4, #20
 800c2d0:	f100 0b14 	add.w	fp, r0, #20
 800c2d4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c2d8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c2dc:	9301      	str	r3, [sp, #4]
 800c2de:	46d9      	mov	r9, fp
 800c2e0:	f04f 0c00 	mov.w	ip, #0
 800c2e4:	9b01      	ldr	r3, [sp, #4]
 800c2e6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c2ea:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c2ee:	9301      	str	r3, [sp, #4]
 800c2f0:	fa1f f38a 	uxth.w	r3, sl
 800c2f4:	4619      	mov	r1, r3
 800c2f6:	b283      	uxth	r3, r0
 800c2f8:	1acb      	subs	r3, r1, r3
 800c2fa:	0c00      	lsrs	r0, r0, #16
 800c2fc:	4463      	add	r3, ip
 800c2fe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c302:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c306:	b29b      	uxth	r3, r3
 800c308:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c30c:	4576      	cmp	r6, lr
 800c30e:	f849 3b04 	str.w	r3, [r9], #4
 800c312:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c316:	d8e5      	bhi.n	800c2e4 <__mdiff+0x88>
 800c318:	1b33      	subs	r3, r6, r4
 800c31a:	3b15      	subs	r3, #21
 800c31c:	f023 0303 	bic.w	r3, r3, #3
 800c320:	3415      	adds	r4, #21
 800c322:	3304      	adds	r3, #4
 800c324:	42a6      	cmp	r6, r4
 800c326:	bf38      	it	cc
 800c328:	2304      	movcc	r3, #4
 800c32a:	441d      	add	r5, r3
 800c32c:	445b      	add	r3, fp
 800c32e:	461e      	mov	r6, r3
 800c330:	462c      	mov	r4, r5
 800c332:	4544      	cmp	r4, r8
 800c334:	d30e      	bcc.n	800c354 <__mdiff+0xf8>
 800c336:	f108 0103 	add.w	r1, r8, #3
 800c33a:	1b49      	subs	r1, r1, r5
 800c33c:	f021 0103 	bic.w	r1, r1, #3
 800c340:	3d03      	subs	r5, #3
 800c342:	45a8      	cmp	r8, r5
 800c344:	bf38      	it	cc
 800c346:	2100      	movcc	r1, #0
 800c348:	440b      	add	r3, r1
 800c34a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c34e:	b191      	cbz	r1, 800c376 <__mdiff+0x11a>
 800c350:	6117      	str	r7, [r2, #16]
 800c352:	e79d      	b.n	800c290 <__mdiff+0x34>
 800c354:	f854 1b04 	ldr.w	r1, [r4], #4
 800c358:	46e6      	mov	lr, ip
 800c35a:	0c08      	lsrs	r0, r1, #16
 800c35c:	fa1c fc81 	uxtah	ip, ip, r1
 800c360:	4471      	add	r1, lr
 800c362:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c366:	b289      	uxth	r1, r1
 800c368:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c36c:	f846 1b04 	str.w	r1, [r6], #4
 800c370:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c374:	e7dd      	b.n	800c332 <__mdiff+0xd6>
 800c376:	3f01      	subs	r7, #1
 800c378:	e7e7      	b.n	800c34a <__mdiff+0xee>
 800c37a:	bf00      	nop
 800c37c:	0800ebb1 	.word	0x0800ebb1
 800c380:	0800ebc2 	.word	0x0800ebc2

0800c384 <__ulp>:
 800c384:	b082      	sub	sp, #8
 800c386:	ed8d 0b00 	vstr	d0, [sp]
 800c38a:	9a01      	ldr	r2, [sp, #4]
 800c38c:	4b0f      	ldr	r3, [pc, #60]	@ (800c3cc <__ulp+0x48>)
 800c38e:	4013      	ands	r3, r2
 800c390:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c394:	2b00      	cmp	r3, #0
 800c396:	dc08      	bgt.n	800c3aa <__ulp+0x26>
 800c398:	425b      	negs	r3, r3
 800c39a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c39e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c3a2:	da04      	bge.n	800c3ae <__ulp+0x2a>
 800c3a4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c3a8:	4113      	asrs	r3, r2
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	e008      	b.n	800c3c0 <__ulp+0x3c>
 800c3ae:	f1a2 0314 	sub.w	r3, r2, #20
 800c3b2:	2b1e      	cmp	r3, #30
 800c3b4:	bfda      	itte	le
 800c3b6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c3ba:	40da      	lsrle	r2, r3
 800c3bc:	2201      	movgt	r2, #1
 800c3be:	2300      	movs	r3, #0
 800c3c0:	4619      	mov	r1, r3
 800c3c2:	4610      	mov	r0, r2
 800c3c4:	ec41 0b10 	vmov	d0, r0, r1
 800c3c8:	b002      	add	sp, #8
 800c3ca:	4770      	bx	lr
 800c3cc:	7ff00000 	.word	0x7ff00000

0800c3d0 <__b2d>:
 800c3d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3d4:	6906      	ldr	r6, [r0, #16]
 800c3d6:	f100 0814 	add.w	r8, r0, #20
 800c3da:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c3de:	1f37      	subs	r7, r6, #4
 800c3e0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c3e4:	4610      	mov	r0, r2
 800c3e6:	f7ff fd53 	bl	800be90 <__hi0bits>
 800c3ea:	f1c0 0320 	rsb	r3, r0, #32
 800c3ee:	280a      	cmp	r0, #10
 800c3f0:	600b      	str	r3, [r1, #0]
 800c3f2:	491b      	ldr	r1, [pc, #108]	@ (800c460 <__b2d+0x90>)
 800c3f4:	dc15      	bgt.n	800c422 <__b2d+0x52>
 800c3f6:	f1c0 0c0b 	rsb	ip, r0, #11
 800c3fa:	fa22 f30c 	lsr.w	r3, r2, ip
 800c3fe:	45b8      	cmp	r8, r7
 800c400:	ea43 0501 	orr.w	r5, r3, r1
 800c404:	bf34      	ite	cc
 800c406:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c40a:	2300      	movcs	r3, #0
 800c40c:	3015      	adds	r0, #21
 800c40e:	fa02 f000 	lsl.w	r0, r2, r0
 800c412:	fa23 f30c 	lsr.w	r3, r3, ip
 800c416:	4303      	orrs	r3, r0
 800c418:	461c      	mov	r4, r3
 800c41a:	ec45 4b10 	vmov	d0, r4, r5
 800c41e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c422:	45b8      	cmp	r8, r7
 800c424:	bf3a      	itte	cc
 800c426:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c42a:	f1a6 0708 	subcc.w	r7, r6, #8
 800c42e:	2300      	movcs	r3, #0
 800c430:	380b      	subs	r0, #11
 800c432:	d012      	beq.n	800c45a <__b2d+0x8a>
 800c434:	f1c0 0120 	rsb	r1, r0, #32
 800c438:	fa23 f401 	lsr.w	r4, r3, r1
 800c43c:	4082      	lsls	r2, r0
 800c43e:	4322      	orrs	r2, r4
 800c440:	4547      	cmp	r7, r8
 800c442:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c446:	bf8c      	ite	hi
 800c448:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c44c:	2200      	movls	r2, #0
 800c44e:	4083      	lsls	r3, r0
 800c450:	40ca      	lsrs	r2, r1
 800c452:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c456:	4313      	orrs	r3, r2
 800c458:	e7de      	b.n	800c418 <__b2d+0x48>
 800c45a:	ea42 0501 	orr.w	r5, r2, r1
 800c45e:	e7db      	b.n	800c418 <__b2d+0x48>
 800c460:	3ff00000 	.word	0x3ff00000

0800c464 <__d2b>:
 800c464:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c468:	460f      	mov	r7, r1
 800c46a:	2101      	movs	r1, #1
 800c46c:	ec59 8b10 	vmov	r8, r9, d0
 800c470:	4616      	mov	r6, r2
 800c472:	f7ff fc1b 	bl	800bcac <_Balloc>
 800c476:	4604      	mov	r4, r0
 800c478:	b930      	cbnz	r0, 800c488 <__d2b+0x24>
 800c47a:	4602      	mov	r2, r0
 800c47c:	4b23      	ldr	r3, [pc, #140]	@ (800c50c <__d2b+0xa8>)
 800c47e:	4824      	ldr	r0, [pc, #144]	@ (800c510 <__d2b+0xac>)
 800c480:	f240 310f 	movw	r1, #783	@ 0x30f
 800c484:	f001 f968 	bl	800d758 <__assert_func>
 800c488:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c48c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c490:	b10d      	cbz	r5, 800c496 <__d2b+0x32>
 800c492:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c496:	9301      	str	r3, [sp, #4]
 800c498:	f1b8 0300 	subs.w	r3, r8, #0
 800c49c:	d023      	beq.n	800c4e6 <__d2b+0x82>
 800c49e:	4668      	mov	r0, sp
 800c4a0:	9300      	str	r3, [sp, #0]
 800c4a2:	f7ff fd14 	bl	800bece <__lo0bits>
 800c4a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c4aa:	b1d0      	cbz	r0, 800c4e2 <__d2b+0x7e>
 800c4ac:	f1c0 0320 	rsb	r3, r0, #32
 800c4b0:	fa02 f303 	lsl.w	r3, r2, r3
 800c4b4:	430b      	orrs	r3, r1
 800c4b6:	40c2      	lsrs	r2, r0
 800c4b8:	6163      	str	r3, [r4, #20]
 800c4ba:	9201      	str	r2, [sp, #4]
 800c4bc:	9b01      	ldr	r3, [sp, #4]
 800c4be:	61a3      	str	r3, [r4, #24]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	bf0c      	ite	eq
 800c4c4:	2201      	moveq	r2, #1
 800c4c6:	2202      	movne	r2, #2
 800c4c8:	6122      	str	r2, [r4, #16]
 800c4ca:	b1a5      	cbz	r5, 800c4f6 <__d2b+0x92>
 800c4cc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c4d0:	4405      	add	r5, r0
 800c4d2:	603d      	str	r5, [r7, #0]
 800c4d4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c4d8:	6030      	str	r0, [r6, #0]
 800c4da:	4620      	mov	r0, r4
 800c4dc:	b003      	add	sp, #12
 800c4de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c4e2:	6161      	str	r1, [r4, #20]
 800c4e4:	e7ea      	b.n	800c4bc <__d2b+0x58>
 800c4e6:	a801      	add	r0, sp, #4
 800c4e8:	f7ff fcf1 	bl	800bece <__lo0bits>
 800c4ec:	9b01      	ldr	r3, [sp, #4]
 800c4ee:	6163      	str	r3, [r4, #20]
 800c4f0:	3020      	adds	r0, #32
 800c4f2:	2201      	movs	r2, #1
 800c4f4:	e7e8      	b.n	800c4c8 <__d2b+0x64>
 800c4f6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c4fa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c4fe:	6038      	str	r0, [r7, #0]
 800c500:	6918      	ldr	r0, [r3, #16]
 800c502:	f7ff fcc5 	bl	800be90 <__hi0bits>
 800c506:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c50a:	e7e5      	b.n	800c4d8 <__d2b+0x74>
 800c50c:	0800ebb1 	.word	0x0800ebb1
 800c510:	0800ebc2 	.word	0x0800ebc2

0800c514 <__ratio>:
 800c514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c518:	b085      	sub	sp, #20
 800c51a:	e9cd 1000 	strd	r1, r0, [sp]
 800c51e:	a902      	add	r1, sp, #8
 800c520:	f7ff ff56 	bl	800c3d0 <__b2d>
 800c524:	9800      	ldr	r0, [sp, #0]
 800c526:	a903      	add	r1, sp, #12
 800c528:	ec55 4b10 	vmov	r4, r5, d0
 800c52c:	f7ff ff50 	bl	800c3d0 <__b2d>
 800c530:	9b01      	ldr	r3, [sp, #4]
 800c532:	6919      	ldr	r1, [r3, #16]
 800c534:	9b00      	ldr	r3, [sp, #0]
 800c536:	691b      	ldr	r3, [r3, #16]
 800c538:	1ac9      	subs	r1, r1, r3
 800c53a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c53e:	1a9b      	subs	r3, r3, r2
 800c540:	ec5b ab10 	vmov	sl, fp, d0
 800c544:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c548:	2b00      	cmp	r3, #0
 800c54a:	bfce      	itee	gt
 800c54c:	462a      	movgt	r2, r5
 800c54e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c552:	465a      	movle	r2, fp
 800c554:	462f      	mov	r7, r5
 800c556:	46d9      	mov	r9, fp
 800c558:	bfcc      	ite	gt
 800c55a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c55e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c562:	464b      	mov	r3, r9
 800c564:	4652      	mov	r2, sl
 800c566:	4620      	mov	r0, r4
 800c568:	4639      	mov	r1, r7
 800c56a:	f7f4 f96f 	bl	800084c <__aeabi_ddiv>
 800c56e:	ec41 0b10 	vmov	d0, r0, r1
 800c572:	b005      	add	sp, #20
 800c574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c578 <__copybits>:
 800c578:	3901      	subs	r1, #1
 800c57a:	b570      	push	{r4, r5, r6, lr}
 800c57c:	1149      	asrs	r1, r1, #5
 800c57e:	6914      	ldr	r4, [r2, #16]
 800c580:	3101      	adds	r1, #1
 800c582:	f102 0314 	add.w	r3, r2, #20
 800c586:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c58a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c58e:	1f05      	subs	r5, r0, #4
 800c590:	42a3      	cmp	r3, r4
 800c592:	d30c      	bcc.n	800c5ae <__copybits+0x36>
 800c594:	1aa3      	subs	r3, r4, r2
 800c596:	3b11      	subs	r3, #17
 800c598:	f023 0303 	bic.w	r3, r3, #3
 800c59c:	3211      	adds	r2, #17
 800c59e:	42a2      	cmp	r2, r4
 800c5a0:	bf88      	it	hi
 800c5a2:	2300      	movhi	r3, #0
 800c5a4:	4418      	add	r0, r3
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	4288      	cmp	r0, r1
 800c5aa:	d305      	bcc.n	800c5b8 <__copybits+0x40>
 800c5ac:	bd70      	pop	{r4, r5, r6, pc}
 800c5ae:	f853 6b04 	ldr.w	r6, [r3], #4
 800c5b2:	f845 6f04 	str.w	r6, [r5, #4]!
 800c5b6:	e7eb      	b.n	800c590 <__copybits+0x18>
 800c5b8:	f840 3b04 	str.w	r3, [r0], #4
 800c5bc:	e7f4      	b.n	800c5a8 <__copybits+0x30>

0800c5be <__any_on>:
 800c5be:	f100 0214 	add.w	r2, r0, #20
 800c5c2:	6900      	ldr	r0, [r0, #16]
 800c5c4:	114b      	asrs	r3, r1, #5
 800c5c6:	4298      	cmp	r0, r3
 800c5c8:	b510      	push	{r4, lr}
 800c5ca:	db11      	blt.n	800c5f0 <__any_on+0x32>
 800c5cc:	dd0a      	ble.n	800c5e4 <__any_on+0x26>
 800c5ce:	f011 011f 	ands.w	r1, r1, #31
 800c5d2:	d007      	beq.n	800c5e4 <__any_on+0x26>
 800c5d4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c5d8:	fa24 f001 	lsr.w	r0, r4, r1
 800c5dc:	fa00 f101 	lsl.w	r1, r0, r1
 800c5e0:	428c      	cmp	r4, r1
 800c5e2:	d10b      	bne.n	800c5fc <__any_on+0x3e>
 800c5e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c5e8:	4293      	cmp	r3, r2
 800c5ea:	d803      	bhi.n	800c5f4 <__any_on+0x36>
 800c5ec:	2000      	movs	r0, #0
 800c5ee:	bd10      	pop	{r4, pc}
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	e7f7      	b.n	800c5e4 <__any_on+0x26>
 800c5f4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c5f8:	2900      	cmp	r1, #0
 800c5fa:	d0f5      	beq.n	800c5e8 <__any_on+0x2a>
 800c5fc:	2001      	movs	r0, #1
 800c5fe:	e7f6      	b.n	800c5ee <__any_on+0x30>

0800c600 <sulp>:
 800c600:	b570      	push	{r4, r5, r6, lr}
 800c602:	4604      	mov	r4, r0
 800c604:	460d      	mov	r5, r1
 800c606:	ec45 4b10 	vmov	d0, r4, r5
 800c60a:	4616      	mov	r6, r2
 800c60c:	f7ff feba 	bl	800c384 <__ulp>
 800c610:	ec51 0b10 	vmov	r0, r1, d0
 800c614:	b17e      	cbz	r6, 800c636 <sulp+0x36>
 800c616:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c61a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c61e:	2b00      	cmp	r3, #0
 800c620:	dd09      	ble.n	800c636 <sulp+0x36>
 800c622:	051b      	lsls	r3, r3, #20
 800c624:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c628:	2400      	movs	r4, #0
 800c62a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c62e:	4622      	mov	r2, r4
 800c630:	462b      	mov	r3, r5
 800c632:	f7f3 ffe1 	bl	80005f8 <__aeabi_dmul>
 800c636:	ec41 0b10 	vmov	d0, r0, r1
 800c63a:	bd70      	pop	{r4, r5, r6, pc}
 800c63c:	0000      	movs	r0, r0
	...

0800c640 <_strtod_l>:
 800c640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c644:	b09f      	sub	sp, #124	@ 0x7c
 800c646:	460c      	mov	r4, r1
 800c648:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c64a:	2200      	movs	r2, #0
 800c64c:	921a      	str	r2, [sp, #104]	@ 0x68
 800c64e:	9005      	str	r0, [sp, #20]
 800c650:	f04f 0a00 	mov.w	sl, #0
 800c654:	f04f 0b00 	mov.w	fp, #0
 800c658:	460a      	mov	r2, r1
 800c65a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c65c:	7811      	ldrb	r1, [r2, #0]
 800c65e:	292b      	cmp	r1, #43	@ 0x2b
 800c660:	d04a      	beq.n	800c6f8 <_strtod_l+0xb8>
 800c662:	d838      	bhi.n	800c6d6 <_strtod_l+0x96>
 800c664:	290d      	cmp	r1, #13
 800c666:	d832      	bhi.n	800c6ce <_strtod_l+0x8e>
 800c668:	2908      	cmp	r1, #8
 800c66a:	d832      	bhi.n	800c6d2 <_strtod_l+0x92>
 800c66c:	2900      	cmp	r1, #0
 800c66e:	d03b      	beq.n	800c6e8 <_strtod_l+0xa8>
 800c670:	2200      	movs	r2, #0
 800c672:	920e      	str	r2, [sp, #56]	@ 0x38
 800c674:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c676:	782a      	ldrb	r2, [r5, #0]
 800c678:	2a30      	cmp	r2, #48	@ 0x30
 800c67a:	f040 80b2 	bne.w	800c7e2 <_strtod_l+0x1a2>
 800c67e:	786a      	ldrb	r2, [r5, #1]
 800c680:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c684:	2a58      	cmp	r2, #88	@ 0x58
 800c686:	d16e      	bne.n	800c766 <_strtod_l+0x126>
 800c688:	9302      	str	r3, [sp, #8]
 800c68a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c68c:	9301      	str	r3, [sp, #4]
 800c68e:	ab1a      	add	r3, sp, #104	@ 0x68
 800c690:	9300      	str	r3, [sp, #0]
 800c692:	4a8f      	ldr	r2, [pc, #572]	@ (800c8d0 <_strtod_l+0x290>)
 800c694:	9805      	ldr	r0, [sp, #20]
 800c696:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c698:	a919      	add	r1, sp, #100	@ 0x64
 800c69a:	f001 f8f7 	bl	800d88c <__gethex>
 800c69e:	f010 060f 	ands.w	r6, r0, #15
 800c6a2:	4604      	mov	r4, r0
 800c6a4:	d005      	beq.n	800c6b2 <_strtod_l+0x72>
 800c6a6:	2e06      	cmp	r6, #6
 800c6a8:	d128      	bne.n	800c6fc <_strtod_l+0xbc>
 800c6aa:	3501      	adds	r5, #1
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	9519      	str	r5, [sp, #100]	@ 0x64
 800c6b0:	930e      	str	r3, [sp, #56]	@ 0x38
 800c6b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	f040 858e 	bne.w	800d1d6 <_strtod_l+0xb96>
 800c6ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c6bc:	b1cb      	cbz	r3, 800c6f2 <_strtod_l+0xb2>
 800c6be:	4652      	mov	r2, sl
 800c6c0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c6c4:	ec43 2b10 	vmov	d0, r2, r3
 800c6c8:	b01f      	add	sp, #124	@ 0x7c
 800c6ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6ce:	2920      	cmp	r1, #32
 800c6d0:	d1ce      	bne.n	800c670 <_strtod_l+0x30>
 800c6d2:	3201      	adds	r2, #1
 800c6d4:	e7c1      	b.n	800c65a <_strtod_l+0x1a>
 800c6d6:	292d      	cmp	r1, #45	@ 0x2d
 800c6d8:	d1ca      	bne.n	800c670 <_strtod_l+0x30>
 800c6da:	2101      	movs	r1, #1
 800c6dc:	910e      	str	r1, [sp, #56]	@ 0x38
 800c6de:	1c51      	adds	r1, r2, #1
 800c6e0:	9119      	str	r1, [sp, #100]	@ 0x64
 800c6e2:	7852      	ldrb	r2, [r2, #1]
 800c6e4:	2a00      	cmp	r2, #0
 800c6e6:	d1c5      	bne.n	800c674 <_strtod_l+0x34>
 800c6e8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c6ea:	9419      	str	r4, [sp, #100]	@ 0x64
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	f040 8570 	bne.w	800d1d2 <_strtod_l+0xb92>
 800c6f2:	4652      	mov	r2, sl
 800c6f4:	465b      	mov	r3, fp
 800c6f6:	e7e5      	b.n	800c6c4 <_strtod_l+0x84>
 800c6f8:	2100      	movs	r1, #0
 800c6fa:	e7ef      	b.n	800c6dc <_strtod_l+0x9c>
 800c6fc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c6fe:	b13a      	cbz	r2, 800c710 <_strtod_l+0xd0>
 800c700:	2135      	movs	r1, #53	@ 0x35
 800c702:	a81c      	add	r0, sp, #112	@ 0x70
 800c704:	f7ff ff38 	bl	800c578 <__copybits>
 800c708:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c70a:	9805      	ldr	r0, [sp, #20]
 800c70c:	f7ff fb0e 	bl	800bd2c <_Bfree>
 800c710:	3e01      	subs	r6, #1
 800c712:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c714:	2e04      	cmp	r6, #4
 800c716:	d806      	bhi.n	800c726 <_strtod_l+0xe6>
 800c718:	e8df f006 	tbb	[pc, r6]
 800c71c:	201d0314 	.word	0x201d0314
 800c720:	14          	.byte	0x14
 800c721:	00          	.byte	0x00
 800c722:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c726:	05e1      	lsls	r1, r4, #23
 800c728:	bf48      	it	mi
 800c72a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c72e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c732:	0d1b      	lsrs	r3, r3, #20
 800c734:	051b      	lsls	r3, r3, #20
 800c736:	2b00      	cmp	r3, #0
 800c738:	d1bb      	bne.n	800c6b2 <_strtod_l+0x72>
 800c73a:	f7fe fbd3 	bl	800aee4 <__errno>
 800c73e:	2322      	movs	r3, #34	@ 0x22
 800c740:	6003      	str	r3, [r0, #0]
 800c742:	e7b6      	b.n	800c6b2 <_strtod_l+0x72>
 800c744:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c748:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c74c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c750:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c754:	e7e7      	b.n	800c726 <_strtod_l+0xe6>
 800c756:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800c8d8 <_strtod_l+0x298>
 800c75a:	e7e4      	b.n	800c726 <_strtod_l+0xe6>
 800c75c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c760:	f04f 3aff 	mov.w	sl, #4294967295
 800c764:	e7df      	b.n	800c726 <_strtod_l+0xe6>
 800c766:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c768:	1c5a      	adds	r2, r3, #1
 800c76a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c76c:	785b      	ldrb	r3, [r3, #1]
 800c76e:	2b30      	cmp	r3, #48	@ 0x30
 800c770:	d0f9      	beq.n	800c766 <_strtod_l+0x126>
 800c772:	2b00      	cmp	r3, #0
 800c774:	d09d      	beq.n	800c6b2 <_strtod_l+0x72>
 800c776:	2301      	movs	r3, #1
 800c778:	2700      	movs	r7, #0
 800c77a:	9308      	str	r3, [sp, #32]
 800c77c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c77e:	930c      	str	r3, [sp, #48]	@ 0x30
 800c780:	970b      	str	r7, [sp, #44]	@ 0x2c
 800c782:	46b9      	mov	r9, r7
 800c784:	220a      	movs	r2, #10
 800c786:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c788:	7805      	ldrb	r5, [r0, #0]
 800c78a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c78e:	b2d9      	uxtb	r1, r3
 800c790:	2909      	cmp	r1, #9
 800c792:	d928      	bls.n	800c7e6 <_strtod_l+0x1a6>
 800c794:	494f      	ldr	r1, [pc, #316]	@ (800c8d4 <_strtod_l+0x294>)
 800c796:	2201      	movs	r2, #1
 800c798:	f7fe fac7 	bl	800ad2a <strncmp>
 800c79c:	2800      	cmp	r0, #0
 800c79e:	d032      	beq.n	800c806 <_strtod_l+0x1c6>
 800c7a0:	2000      	movs	r0, #0
 800c7a2:	462a      	mov	r2, r5
 800c7a4:	900a      	str	r0, [sp, #40]	@ 0x28
 800c7a6:	464d      	mov	r5, r9
 800c7a8:	4603      	mov	r3, r0
 800c7aa:	2a65      	cmp	r2, #101	@ 0x65
 800c7ac:	d001      	beq.n	800c7b2 <_strtod_l+0x172>
 800c7ae:	2a45      	cmp	r2, #69	@ 0x45
 800c7b0:	d114      	bne.n	800c7dc <_strtod_l+0x19c>
 800c7b2:	b91d      	cbnz	r5, 800c7bc <_strtod_l+0x17c>
 800c7b4:	9a08      	ldr	r2, [sp, #32]
 800c7b6:	4302      	orrs	r2, r0
 800c7b8:	d096      	beq.n	800c6e8 <_strtod_l+0xa8>
 800c7ba:	2500      	movs	r5, #0
 800c7bc:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c7be:	1c62      	adds	r2, r4, #1
 800c7c0:	9219      	str	r2, [sp, #100]	@ 0x64
 800c7c2:	7862      	ldrb	r2, [r4, #1]
 800c7c4:	2a2b      	cmp	r2, #43	@ 0x2b
 800c7c6:	d07a      	beq.n	800c8be <_strtod_l+0x27e>
 800c7c8:	2a2d      	cmp	r2, #45	@ 0x2d
 800c7ca:	d07e      	beq.n	800c8ca <_strtod_l+0x28a>
 800c7cc:	f04f 0c00 	mov.w	ip, #0
 800c7d0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c7d4:	2909      	cmp	r1, #9
 800c7d6:	f240 8085 	bls.w	800c8e4 <_strtod_l+0x2a4>
 800c7da:	9419      	str	r4, [sp, #100]	@ 0x64
 800c7dc:	f04f 0800 	mov.w	r8, #0
 800c7e0:	e0a5      	b.n	800c92e <_strtod_l+0x2ee>
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	e7c8      	b.n	800c778 <_strtod_l+0x138>
 800c7e6:	f1b9 0f08 	cmp.w	r9, #8
 800c7ea:	bfd8      	it	le
 800c7ec:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800c7ee:	f100 0001 	add.w	r0, r0, #1
 800c7f2:	bfda      	itte	le
 800c7f4:	fb02 3301 	mlale	r3, r2, r1, r3
 800c7f8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800c7fa:	fb02 3707 	mlagt	r7, r2, r7, r3
 800c7fe:	f109 0901 	add.w	r9, r9, #1
 800c802:	9019      	str	r0, [sp, #100]	@ 0x64
 800c804:	e7bf      	b.n	800c786 <_strtod_l+0x146>
 800c806:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c808:	1c5a      	adds	r2, r3, #1
 800c80a:	9219      	str	r2, [sp, #100]	@ 0x64
 800c80c:	785a      	ldrb	r2, [r3, #1]
 800c80e:	f1b9 0f00 	cmp.w	r9, #0
 800c812:	d03b      	beq.n	800c88c <_strtod_l+0x24c>
 800c814:	900a      	str	r0, [sp, #40]	@ 0x28
 800c816:	464d      	mov	r5, r9
 800c818:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c81c:	2b09      	cmp	r3, #9
 800c81e:	d912      	bls.n	800c846 <_strtod_l+0x206>
 800c820:	2301      	movs	r3, #1
 800c822:	e7c2      	b.n	800c7aa <_strtod_l+0x16a>
 800c824:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c826:	1c5a      	adds	r2, r3, #1
 800c828:	9219      	str	r2, [sp, #100]	@ 0x64
 800c82a:	785a      	ldrb	r2, [r3, #1]
 800c82c:	3001      	adds	r0, #1
 800c82e:	2a30      	cmp	r2, #48	@ 0x30
 800c830:	d0f8      	beq.n	800c824 <_strtod_l+0x1e4>
 800c832:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c836:	2b08      	cmp	r3, #8
 800c838:	f200 84d2 	bhi.w	800d1e0 <_strtod_l+0xba0>
 800c83c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c83e:	900a      	str	r0, [sp, #40]	@ 0x28
 800c840:	2000      	movs	r0, #0
 800c842:	930c      	str	r3, [sp, #48]	@ 0x30
 800c844:	4605      	mov	r5, r0
 800c846:	3a30      	subs	r2, #48	@ 0x30
 800c848:	f100 0301 	add.w	r3, r0, #1
 800c84c:	d018      	beq.n	800c880 <_strtod_l+0x240>
 800c84e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c850:	4419      	add	r1, r3
 800c852:	910a      	str	r1, [sp, #40]	@ 0x28
 800c854:	462e      	mov	r6, r5
 800c856:	f04f 0e0a 	mov.w	lr, #10
 800c85a:	1c71      	adds	r1, r6, #1
 800c85c:	eba1 0c05 	sub.w	ip, r1, r5
 800c860:	4563      	cmp	r3, ip
 800c862:	dc15      	bgt.n	800c890 <_strtod_l+0x250>
 800c864:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800c868:	182b      	adds	r3, r5, r0
 800c86a:	2b08      	cmp	r3, #8
 800c86c:	f105 0501 	add.w	r5, r5, #1
 800c870:	4405      	add	r5, r0
 800c872:	dc1a      	bgt.n	800c8aa <_strtod_l+0x26a>
 800c874:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c876:	230a      	movs	r3, #10
 800c878:	fb03 2301 	mla	r3, r3, r1, r2
 800c87c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c87e:	2300      	movs	r3, #0
 800c880:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c882:	1c51      	adds	r1, r2, #1
 800c884:	9119      	str	r1, [sp, #100]	@ 0x64
 800c886:	7852      	ldrb	r2, [r2, #1]
 800c888:	4618      	mov	r0, r3
 800c88a:	e7c5      	b.n	800c818 <_strtod_l+0x1d8>
 800c88c:	4648      	mov	r0, r9
 800c88e:	e7ce      	b.n	800c82e <_strtod_l+0x1ee>
 800c890:	2e08      	cmp	r6, #8
 800c892:	dc05      	bgt.n	800c8a0 <_strtod_l+0x260>
 800c894:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800c896:	fb0e f606 	mul.w	r6, lr, r6
 800c89a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800c89c:	460e      	mov	r6, r1
 800c89e:	e7dc      	b.n	800c85a <_strtod_l+0x21a>
 800c8a0:	2910      	cmp	r1, #16
 800c8a2:	bfd8      	it	le
 800c8a4:	fb0e f707 	mulle.w	r7, lr, r7
 800c8a8:	e7f8      	b.n	800c89c <_strtod_l+0x25c>
 800c8aa:	2b0f      	cmp	r3, #15
 800c8ac:	bfdc      	itt	le
 800c8ae:	230a      	movle	r3, #10
 800c8b0:	fb03 2707 	mlale	r7, r3, r7, r2
 800c8b4:	e7e3      	b.n	800c87e <_strtod_l+0x23e>
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	930a      	str	r3, [sp, #40]	@ 0x28
 800c8ba:	2301      	movs	r3, #1
 800c8bc:	e77a      	b.n	800c7b4 <_strtod_l+0x174>
 800c8be:	f04f 0c00 	mov.w	ip, #0
 800c8c2:	1ca2      	adds	r2, r4, #2
 800c8c4:	9219      	str	r2, [sp, #100]	@ 0x64
 800c8c6:	78a2      	ldrb	r2, [r4, #2]
 800c8c8:	e782      	b.n	800c7d0 <_strtod_l+0x190>
 800c8ca:	f04f 0c01 	mov.w	ip, #1
 800c8ce:	e7f8      	b.n	800c8c2 <_strtod_l+0x282>
 800c8d0:	0800ede4 	.word	0x0800ede4
 800c8d4:	0800ec1b 	.word	0x0800ec1b
 800c8d8:	7ff00000 	.word	0x7ff00000
 800c8dc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c8de:	1c51      	adds	r1, r2, #1
 800c8e0:	9119      	str	r1, [sp, #100]	@ 0x64
 800c8e2:	7852      	ldrb	r2, [r2, #1]
 800c8e4:	2a30      	cmp	r2, #48	@ 0x30
 800c8e6:	d0f9      	beq.n	800c8dc <_strtod_l+0x29c>
 800c8e8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800c8ec:	2908      	cmp	r1, #8
 800c8ee:	f63f af75 	bhi.w	800c7dc <_strtod_l+0x19c>
 800c8f2:	3a30      	subs	r2, #48	@ 0x30
 800c8f4:	9209      	str	r2, [sp, #36]	@ 0x24
 800c8f6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c8f8:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c8fa:	f04f 080a 	mov.w	r8, #10
 800c8fe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800c900:	1c56      	adds	r6, r2, #1
 800c902:	9619      	str	r6, [sp, #100]	@ 0x64
 800c904:	7852      	ldrb	r2, [r2, #1]
 800c906:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800c90a:	f1be 0f09 	cmp.w	lr, #9
 800c90e:	d939      	bls.n	800c984 <_strtod_l+0x344>
 800c910:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c912:	1a76      	subs	r6, r6, r1
 800c914:	2e08      	cmp	r6, #8
 800c916:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800c91a:	dc03      	bgt.n	800c924 <_strtod_l+0x2e4>
 800c91c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c91e:	4588      	cmp	r8, r1
 800c920:	bfa8      	it	ge
 800c922:	4688      	movge	r8, r1
 800c924:	f1bc 0f00 	cmp.w	ip, #0
 800c928:	d001      	beq.n	800c92e <_strtod_l+0x2ee>
 800c92a:	f1c8 0800 	rsb	r8, r8, #0
 800c92e:	2d00      	cmp	r5, #0
 800c930:	d14e      	bne.n	800c9d0 <_strtod_l+0x390>
 800c932:	9908      	ldr	r1, [sp, #32]
 800c934:	4308      	orrs	r0, r1
 800c936:	f47f aebc 	bne.w	800c6b2 <_strtod_l+0x72>
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	f47f aed4 	bne.w	800c6e8 <_strtod_l+0xa8>
 800c940:	2a69      	cmp	r2, #105	@ 0x69
 800c942:	d028      	beq.n	800c996 <_strtod_l+0x356>
 800c944:	dc25      	bgt.n	800c992 <_strtod_l+0x352>
 800c946:	2a49      	cmp	r2, #73	@ 0x49
 800c948:	d025      	beq.n	800c996 <_strtod_l+0x356>
 800c94a:	2a4e      	cmp	r2, #78	@ 0x4e
 800c94c:	f47f aecc 	bne.w	800c6e8 <_strtod_l+0xa8>
 800c950:	499a      	ldr	r1, [pc, #616]	@ (800cbbc <_strtod_l+0x57c>)
 800c952:	a819      	add	r0, sp, #100	@ 0x64
 800c954:	f001 f9bc 	bl	800dcd0 <__match>
 800c958:	2800      	cmp	r0, #0
 800c95a:	f43f aec5 	beq.w	800c6e8 <_strtod_l+0xa8>
 800c95e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c960:	781b      	ldrb	r3, [r3, #0]
 800c962:	2b28      	cmp	r3, #40	@ 0x28
 800c964:	d12e      	bne.n	800c9c4 <_strtod_l+0x384>
 800c966:	4996      	ldr	r1, [pc, #600]	@ (800cbc0 <_strtod_l+0x580>)
 800c968:	aa1c      	add	r2, sp, #112	@ 0x70
 800c96a:	a819      	add	r0, sp, #100	@ 0x64
 800c96c:	f001 f9c4 	bl	800dcf8 <__hexnan>
 800c970:	2805      	cmp	r0, #5
 800c972:	d127      	bne.n	800c9c4 <_strtod_l+0x384>
 800c974:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c976:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800c97a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800c97e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800c982:	e696      	b.n	800c6b2 <_strtod_l+0x72>
 800c984:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c986:	fb08 2101 	mla	r1, r8, r1, r2
 800c98a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800c98e:	9209      	str	r2, [sp, #36]	@ 0x24
 800c990:	e7b5      	b.n	800c8fe <_strtod_l+0x2be>
 800c992:	2a6e      	cmp	r2, #110	@ 0x6e
 800c994:	e7da      	b.n	800c94c <_strtod_l+0x30c>
 800c996:	498b      	ldr	r1, [pc, #556]	@ (800cbc4 <_strtod_l+0x584>)
 800c998:	a819      	add	r0, sp, #100	@ 0x64
 800c99a:	f001 f999 	bl	800dcd0 <__match>
 800c99e:	2800      	cmp	r0, #0
 800c9a0:	f43f aea2 	beq.w	800c6e8 <_strtod_l+0xa8>
 800c9a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c9a6:	4988      	ldr	r1, [pc, #544]	@ (800cbc8 <_strtod_l+0x588>)
 800c9a8:	3b01      	subs	r3, #1
 800c9aa:	a819      	add	r0, sp, #100	@ 0x64
 800c9ac:	9319      	str	r3, [sp, #100]	@ 0x64
 800c9ae:	f001 f98f 	bl	800dcd0 <__match>
 800c9b2:	b910      	cbnz	r0, 800c9ba <_strtod_l+0x37a>
 800c9b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c9b6:	3301      	adds	r3, #1
 800c9b8:	9319      	str	r3, [sp, #100]	@ 0x64
 800c9ba:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800cbd8 <_strtod_l+0x598>
 800c9be:	f04f 0a00 	mov.w	sl, #0
 800c9c2:	e676      	b.n	800c6b2 <_strtod_l+0x72>
 800c9c4:	4881      	ldr	r0, [pc, #516]	@ (800cbcc <_strtod_l+0x58c>)
 800c9c6:	f000 febf 	bl	800d748 <nan>
 800c9ca:	ec5b ab10 	vmov	sl, fp, d0
 800c9ce:	e670      	b.n	800c6b2 <_strtod_l+0x72>
 800c9d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c9d2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800c9d4:	eba8 0303 	sub.w	r3, r8, r3
 800c9d8:	f1b9 0f00 	cmp.w	r9, #0
 800c9dc:	bf08      	it	eq
 800c9de:	46a9      	moveq	r9, r5
 800c9e0:	2d10      	cmp	r5, #16
 800c9e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c9e4:	462c      	mov	r4, r5
 800c9e6:	bfa8      	it	ge
 800c9e8:	2410      	movge	r4, #16
 800c9ea:	f7f3 fd8b 	bl	8000504 <__aeabi_ui2d>
 800c9ee:	2d09      	cmp	r5, #9
 800c9f0:	4682      	mov	sl, r0
 800c9f2:	468b      	mov	fp, r1
 800c9f4:	dc13      	bgt.n	800ca1e <_strtod_l+0x3de>
 800c9f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	f43f ae5a 	beq.w	800c6b2 <_strtod_l+0x72>
 800c9fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca00:	dd78      	ble.n	800caf4 <_strtod_l+0x4b4>
 800ca02:	2b16      	cmp	r3, #22
 800ca04:	dc5f      	bgt.n	800cac6 <_strtod_l+0x486>
 800ca06:	4972      	ldr	r1, [pc, #456]	@ (800cbd0 <_strtod_l+0x590>)
 800ca08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ca0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca10:	4652      	mov	r2, sl
 800ca12:	465b      	mov	r3, fp
 800ca14:	f7f3 fdf0 	bl	80005f8 <__aeabi_dmul>
 800ca18:	4682      	mov	sl, r0
 800ca1a:	468b      	mov	fp, r1
 800ca1c:	e649      	b.n	800c6b2 <_strtod_l+0x72>
 800ca1e:	4b6c      	ldr	r3, [pc, #432]	@ (800cbd0 <_strtod_l+0x590>)
 800ca20:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ca24:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ca28:	f7f3 fde6 	bl	80005f8 <__aeabi_dmul>
 800ca2c:	4682      	mov	sl, r0
 800ca2e:	4638      	mov	r0, r7
 800ca30:	468b      	mov	fp, r1
 800ca32:	f7f3 fd67 	bl	8000504 <__aeabi_ui2d>
 800ca36:	4602      	mov	r2, r0
 800ca38:	460b      	mov	r3, r1
 800ca3a:	4650      	mov	r0, sl
 800ca3c:	4659      	mov	r1, fp
 800ca3e:	f7f3 fc25 	bl	800028c <__adddf3>
 800ca42:	2d0f      	cmp	r5, #15
 800ca44:	4682      	mov	sl, r0
 800ca46:	468b      	mov	fp, r1
 800ca48:	ddd5      	ble.n	800c9f6 <_strtod_l+0x3b6>
 800ca4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ca4c:	1b2c      	subs	r4, r5, r4
 800ca4e:	441c      	add	r4, r3
 800ca50:	2c00      	cmp	r4, #0
 800ca52:	f340 8093 	ble.w	800cb7c <_strtod_l+0x53c>
 800ca56:	f014 030f 	ands.w	r3, r4, #15
 800ca5a:	d00a      	beq.n	800ca72 <_strtod_l+0x432>
 800ca5c:	495c      	ldr	r1, [pc, #368]	@ (800cbd0 <_strtod_l+0x590>)
 800ca5e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ca62:	4652      	mov	r2, sl
 800ca64:	465b      	mov	r3, fp
 800ca66:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca6a:	f7f3 fdc5 	bl	80005f8 <__aeabi_dmul>
 800ca6e:	4682      	mov	sl, r0
 800ca70:	468b      	mov	fp, r1
 800ca72:	f034 040f 	bics.w	r4, r4, #15
 800ca76:	d073      	beq.n	800cb60 <_strtod_l+0x520>
 800ca78:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ca7c:	dd49      	ble.n	800cb12 <_strtod_l+0x4d2>
 800ca7e:	2400      	movs	r4, #0
 800ca80:	46a0      	mov	r8, r4
 800ca82:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ca84:	46a1      	mov	r9, r4
 800ca86:	9a05      	ldr	r2, [sp, #20]
 800ca88:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800cbd8 <_strtod_l+0x598>
 800ca8c:	2322      	movs	r3, #34	@ 0x22
 800ca8e:	6013      	str	r3, [r2, #0]
 800ca90:	f04f 0a00 	mov.w	sl, #0
 800ca94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	f43f ae0b 	beq.w	800c6b2 <_strtod_l+0x72>
 800ca9c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ca9e:	9805      	ldr	r0, [sp, #20]
 800caa0:	f7ff f944 	bl	800bd2c <_Bfree>
 800caa4:	9805      	ldr	r0, [sp, #20]
 800caa6:	4649      	mov	r1, r9
 800caa8:	f7ff f940 	bl	800bd2c <_Bfree>
 800caac:	9805      	ldr	r0, [sp, #20]
 800caae:	4641      	mov	r1, r8
 800cab0:	f7ff f93c 	bl	800bd2c <_Bfree>
 800cab4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cab6:	9805      	ldr	r0, [sp, #20]
 800cab8:	f7ff f938 	bl	800bd2c <_Bfree>
 800cabc:	9805      	ldr	r0, [sp, #20]
 800cabe:	4621      	mov	r1, r4
 800cac0:	f7ff f934 	bl	800bd2c <_Bfree>
 800cac4:	e5f5      	b.n	800c6b2 <_strtod_l+0x72>
 800cac6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cac8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800cacc:	4293      	cmp	r3, r2
 800cace:	dbbc      	blt.n	800ca4a <_strtod_l+0x40a>
 800cad0:	4c3f      	ldr	r4, [pc, #252]	@ (800cbd0 <_strtod_l+0x590>)
 800cad2:	f1c5 050f 	rsb	r5, r5, #15
 800cad6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800cada:	4652      	mov	r2, sl
 800cadc:	465b      	mov	r3, fp
 800cade:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cae2:	f7f3 fd89 	bl	80005f8 <__aeabi_dmul>
 800cae6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cae8:	1b5d      	subs	r5, r3, r5
 800caea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800caee:	e9d4 2300 	ldrd	r2, r3, [r4]
 800caf2:	e78f      	b.n	800ca14 <_strtod_l+0x3d4>
 800caf4:	3316      	adds	r3, #22
 800caf6:	dba8      	blt.n	800ca4a <_strtod_l+0x40a>
 800caf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cafa:	eba3 0808 	sub.w	r8, r3, r8
 800cafe:	4b34      	ldr	r3, [pc, #208]	@ (800cbd0 <_strtod_l+0x590>)
 800cb00:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800cb04:	e9d8 2300 	ldrd	r2, r3, [r8]
 800cb08:	4650      	mov	r0, sl
 800cb0a:	4659      	mov	r1, fp
 800cb0c:	f7f3 fe9e 	bl	800084c <__aeabi_ddiv>
 800cb10:	e782      	b.n	800ca18 <_strtod_l+0x3d8>
 800cb12:	2300      	movs	r3, #0
 800cb14:	4f2f      	ldr	r7, [pc, #188]	@ (800cbd4 <_strtod_l+0x594>)
 800cb16:	1124      	asrs	r4, r4, #4
 800cb18:	4650      	mov	r0, sl
 800cb1a:	4659      	mov	r1, fp
 800cb1c:	461e      	mov	r6, r3
 800cb1e:	2c01      	cmp	r4, #1
 800cb20:	dc21      	bgt.n	800cb66 <_strtod_l+0x526>
 800cb22:	b10b      	cbz	r3, 800cb28 <_strtod_l+0x4e8>
 800cb24:	4682      	mov	sl, r0
 800cb26:	468b      	mov	fp, r1
 800cb28:	492a      	ldr	r1, [pc, #168]	@ (800cbd4 <_strtod_l+0x594>)
 800cb2a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800cb2e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800cb32:	4652      	mov	r2, sl
 800cb34:	465b      	mov	r3, fp
 800cb36:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb3a:	f7f3 fd5d 	bl	80005f8 <__aeabi_dmul>
 800cb3e:	4b26      	ldr	r3, [pc, #152]	@ (800cbd8 <_strtod_l+0x598>)
 800cb40:	460a      	mov	r2, r1
 800cb42:	400b      	ands	r3, r1
 800cb44:	4925      	ldr	r1, [pc, #148]	@ (800cbdc <_strtod_l+0x59c>)
 800cb46:	428b      	cmp	r3, r1
 800cb48:	4682      	mov	sl, r0
 800cb4a:	d898      	bhi.n	800ca7e <_strtod_l+0x43e>
 800cb4c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800cb50:	428b      	cmp	r3, r1
 800cb52:	bf86      	itte	hi
 800cb54:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800cbe0 <_strtod_l+0x5a0>
 800cb58:	f04f 3aff 	movhi.w	sl, #4294967295
 800cb5c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800cb60:	2300      	movs	r3, #0
 800cb62:	9308      	str	r3, [sp, #32]
 800cb64:	e076      	b.n	800cc54 <_strtod_l+0x614>
 800cb66:	07e2      	lsls	r2, r4, #31
 800cb68:	d504      	bpl.n	800cb74 <_strtod_l+0x534>
 800cb6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb6e:	f7f3 fd43 	bl	80005f8 <__aeabi_dmul>
 800cb72:	2301      	movs	r3, #1
 800cb74:	3601      	adds	r6, #1
 800cb76:	1064      	asrs	r4, r4, #1
 800cb78:	3708      	adds	r7, #8
 800cb7a:	e7d0      	b.n	800cb1e <_strtod_l+0x4de>
 800cb7c:	d0f0      	beq.n	800cb60 <_strtod_l+0x520>
 800cb7e:	4264      	negs	r4, r4
 800cb80:	f014 020f 	ands.w	r2, r4, #15
 800cb84:	d00a      	beq.n	800cb9c <_strtod_l+0x55c>
 800cb86:	4b12      	ldr	r3, [pc, #72]	@ (800cbd0 <_strtod_l+0x590>)
 800cb88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cb8c:	4650      	mov	r0, sl
 800cb8e:	4659      	mov	r1, fp
 800cb90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb94:	f7f3 fe5a 	bl	800084c <__aeabi_ddiv>
 800cb98:	4682      	mov	sl, r0
 800cb9a:	468b      	mov	fp, r1
 800cb9c:	1124      	asrs	r4, r4, #4
 800cb9e:	d0df      	beq.n	800cb60 <_strtod_l+0x520>
 800cba0:	2c1f      	cmp	r4, #31
 800cba2:	dd1f      	ble.n	800cbe4 <_strtod_l+0x5a4>
 800cba4:	2400      	movs	r4, #0
 800cba6:	46a0      	mov	r8, r4
 800cba8:	940b      	str	r4, [sp, #44]	@ 0x2c
 800cbaa:	46a1      	mov	r9, r4
 800cbac:	9a05      	ldr	r2, [sp, #20]
 800cbae:	2322      	movs	r3, #34	@ 0x22
 800cbb0:	f04f 0a00 	mov.w	sl, #0
 800cbb4:	f04f 0b00 	mov.w	fp, #0
 800cbb8:	6013      	str	r3, [r2, #0]
 800cbba:	e76b      	b.n	800ca94 <_strtod_l+0x454>
 800cbbc:	0800eb09 	.word	0x0800eb09
 800cbc0:	0800edd0 	.word	0x0800edd0
 800cbc4:	0800eb01 	.word	0x0800eb01
 800cbc8:	0800eb38 	.word	0x0800eb38
 800cbcc:	0800ec71 	.word	0x0800ec71
 800cbd0:	0800ed08 	.word	0x0800ed08
 800cbd4:	0800ece0 	.word	0x0800ece0
 800cbd8:	7ff00000 	.word	0x7ff00000
 800cbdc:	7ca00000 	.word	0x7ca00000
 800cbe0:	7fefffff 	.word	0x7fefffff
 800cbe4:	f014 0310 	ands.w	r3, r4, #16
 800cbe8:	bf18      	it	ne
 800cbea:	236a      	movne	r3, #106	@ 0x6a
 800cbec:	4ea9      	ldr	r6, [pc, #676]	@ (800ce94 <_strtod_l+0x854>)
 800cbee:	9308      	str	r3, [sp, #32]
 800cbf0:	4650      	mov	r0, sl
 800cbf2:	4659      	mov	r1, fp
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	07e7      	lsls	r7, r4, #31
 800cbf8:	d504      	bpl.n	800cc04 <_strtod_l+0x5c4>
 800cbfa:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cbfe:	f7f3 fcfb 	bl	80005f8 <__aeabi_dmul>
 800cc02:	2301      	movs	r3, #1
 800cc04:	1064      	asrs	r4, r4, #1
 800cc06:	f106 0608 	add.w	r6, r6, #8
 800cc0a:	d1f4      	bne.n	800cbf6 <_strtod_l+0x5b6>
 800cc0c:	b10b      	cbz	r3, 800cc12 <_strtod_l+0x5d2>
 800cc0e:	4682      	mov	sl, r0
 800cc10:	468b      	mov	fp, r1
 800cc12:	9b08      	ldr	r3, [sp, #32]
 800cc14:	b1b3      	cbz	r3, 800cc44 <_strtod_l+0x604>
 800cc16:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800cc1a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	4659      	mov	r1, fp
 800cc22:	dd0f      	ble.n	800cc44 <_strtod_l+0x604>
 800cc24:	2b1f      	cmp	r3, #31
 800cc26:	dd56      	ble.n	800ccd6 <_strtod_l+0x696>
 800cc28:	2b34      	cmp	r3, #52	@ 0x34
 800cc2a:	bfde      	ittt	le
 800cc2c:	f04f 33ff 	movle.w	r3, #4294967295
 800cc30:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800cc34:	4093      	lslle	r3, r2
 800cc36:	f04f 0a00 	mov.w	sl, #0
 800cc3a:	bfcc      	ite	gt
 800cc3c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800cc40:	ea03 0b01 	andle.w	fp, r3, r1
 800cc44:	2200      	movs	r2, #0
 800cc46:	2300      	movs	r3, #0
 800cc48:	4650      	mov	r0, sl
 800cc4a:	4659      	mov	r1, fp
 800cc4c:	f7f3 ff3c 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc50:	2800      	cmp	r0, #0
 800cc52:	d1a7      	bne.n	800cba4 <_strtod_l+0x564>
 800cc54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cc56:	9300      	str	r3, [sp, #0]
 800cc58:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800cc5a:	9805      	ldr	r0, [sp, #20]
 800cc5c:	462b      	mov	r3, r5
 800cc5e:	464a      	mov	r2, r9
 800cc60:	f7ff f8cc 	bl	800bdfc <__s2b>
 800cc64:	900b      	str	r0, [sp, #44]	@ 0x2c
 800cc66:	2800      	cmp	r0, #0
 800cc68:	f43f af09 	beq.w	800ca7e <_strtod_l+0x43e>
 800cc6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cc6e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cc70:	2a00      	cmp	r2, #0
 800cc72:	eba3 0308 	sub.w	r3, r3, r8
 800cc76:	bfa8      	it	ge
 800cc78:	2300      	movge	r3, #0
 800cc7a:	9312      	str	r3, [sp, #72]	@ 0x48
 800cc7c:	2400      	movs	r4, #0
 800cc7e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800cc82:	9316      	str	r3, [sp, #88]	@ 0x58
 800cc84:	46a0      	mov	r8, r4
 800cc86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cc88:	9805      	ldr	r0, [sp, #20]
 800cc8a:	6859      	ldr	r1, [r3, #4]
 800cc8c:	f7ff f80e 	bl	800bcac <_Balloc>
 800cc90:	4681      	mov	r9, r0
 800cc92:	2800      	cmp	r0, #0
 800cc94:	f43f aef7 	beq.w	800ca86 <_strtod_l+0x446>
 800cc98:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cc9a:	691a      	ldr	r2, [r3, #16]
 800cc9c:	3202      	adds	r2, #2
 800cc9e:	f103 010c 	add.w	r1, r3, #12
 800cca2:	0092      	lsls	r2, r2, #2
 800cca4:	300c      	adds	r0, #12
 800cca6:	f7fe f94a 	bl	800af3e <memcpy>
 800ccaa:	ec4b ab10 	vmov	d0, sl, fp
 800ccae:	9805      	ldr	r0, [sp, #20]
 800ccb0:	aa1c      	add	r2, sp, #112	@ 0x70
 800ccb2:	a91b      	add	r1, sp, #108	@ 0x6c
 800ccb4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800ccb8:	f7ff fbd4 	bl	800c464 <__d2b>
 800ccbc:	901a      	str	r0, [sp, #104]	@ 0x68
 800ccbe:	2800      	cmp	r0, #0
 800ccc0:	f43f aee1 	beq.w	800ca86 <_strtod_l+0x446>
 800ccc4:	9805      	ldr	r0, [sp, #20]
 800ccc6:	2101      	movs	r1, #1
 800ccc8:	f7ff f92e 	bl	800bf28 <__i2b>
 800cccc:	4680      	mov	r8, r0
 800ccce:	b948      	cbnz	r0, 800cce4 <_strtod_l+0x6a4>
 800ccd0:	f04f 0800 	mov.w	r8, #0
 800ccd4:	e6d7      	b.n	800ca86 <_strtod_l+0x446>
 800ccd6:	f04f 32ff 	mov.w	r2, #4294967295
 800ccda:	fa02 f303 	lsl.w	r3, r2, r3
 800ccde:	ea03 0a0a 	and.w	sl, r3, sl
 800cce2:	e7af      	b.n	800cc44 <_strtod_l+0x604>
 800cce4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800cce6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800cce8:	2d00      	cmp	r5, #0
 800ccea:	bfab      	itete	ge
 800ccec:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ccee:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ccf0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ccf2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ccf4:	bfac      	ite	ge
 800ccf6:	18ef      	addge	r7, r5, r3
 800ccf8:	1b5e      	sublt	r6, r3, r5
 800ccfa:	9b08      	ldr	r3, [sp, #32]
 800ccfc:	1aed      	subs	r5, r5, r3
 800ccfe:	4415      	add	r5, r2
 800cd00:	4b65      	ldr	r3, [pc, #404]	@ (800ce98 <_strtod_l+0x858>)
 800cd02:	3d01      	subs	r5, #1
 800cd04:	429d      	cmp	r5, r3
 800cd06:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800cd0a:	da50      	bge.n	800cdae <_strtod_l+0x76e>
 800cd0c:	1b5b      	subs	r3, r3, r5
 800cd0e:	2b1f      	cmp	r3, #31
 800cd10:	eba2 0203 	sub.w	r2, r2, r3
 800cd14:	f04f 0101 	mov.w	r1, #1
 800cd18:	dc3d      	bgt.n	800cd96 <_strtod_l+0x756>
 800cd1a:	fa01 f303 	lsl.w	r3, r1, r3
 800cd1e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cd20:	2300      	movs	r3, #0
 800cd22:	9310      	str	r3, [sp, #64]	@ 0x40
 800cd24:	18bd      	adds	r5, r7, r2
 800cd26:	9b08      	ldr	r3, [sp, #32]
 800cd28:	42af      	cmp	r7, r5
 800cd2a:	4416      	add	r6, r2
 800cd2c:	441e      	add	r6, r3
 800cd2e:	463b      	mov	r3, r7
 800cd30:	bfa8      	it	ge
 800cd32:	462b      	movge	r3, r5
 800cd34:	42b3      	cmp	r3, r6
 800cd36:	bfa8      	it	ge
 800cd38:	4633      	movge	r3, r6
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	bfc2      	ittt	gt
 800cd3e:	1aed      	subgt	r5, r5, r3
 800cd40:	1af6      	subgt	r6, r6, r3
 800cd42:	1aff      	subgt	r7, r7, r3
 800cd44:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	dd16      	ble.n	800cd78 <_strtod_l+0x738>
 800cd4a:	4641      	mov	r1, r8
 800cd4c:	9805      	ldr	r0, [sp, #20]
 800cd4e:	461a      	mov	r2, r3
 800cd50:	f7ff f9a2 	bl	800c098 <__pow5mult>
 800cd54:	4680      	mov	r8, r0
 800cd56:	2800      	cmp	r0, #0
 800cd58:	d0ba      	beq.n	800ccd0 <_strtod_l+0x690>
 800cd5a:	4601      	mov	r1, r0
 800cd5c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cd5e:	9805      	ldr	r0, [sp, #20]
 800cd60:	f7ff f8f8 	bl	800bf54 <__multiply>
 800cd64:	900a      	str	r0, [sp, #40]	@ 0x28
 800cd66:	2800      	cmp	r0, #0
 800cd68:	f43f ae8d 	beq.w	800ca86 <_strtod_l+0x446>
 800cd6c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cd6e:	9805      	ldr	r0, [sp, #20]
 800cd70:	f7fe ffdc 	bl	800bd2c <_Bfree>
 800cd74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd76:	931a      	str	r3, [sp, #104]	@ 0x68
 800cd78:	2d00      	cmp	r5, #0
 800cd7a:	dc1d      	bgt.n	800cdb8 <_strtod_l+0x778>
 800cd7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	dd23      	ble.n	800cdca <_strtod_l+0x78a>
 800cd82:	4649      	mov	r1, r9
 800cd84:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800cd86:	9805      	ldr	r0, [sp, #20]
 800cd88:	f7ff f986 	bl	800c098 <__pow5mult>
 800cd8c:	4681      	mov	r9, r0
 800cd8e:	b9e0      	cbnz	r0, 800cdca <_strtod_l+0x78a>
 800cd90:	f04f 0900 	mov.w	r9, #0
 800cd94:	e677      	b.n	800ca86 <_strtod_l+0x446>
 800cd96:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800cd9a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800cd9e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800cda2:	35e2      	adds	r5, #226	@ 0xe2
 800cda4:	fa01 f305 	lsl.w	r3, r1, r5
 800cda8:	9310      	str	r3, [sp, #64]	@ 0x40
 800cdaa:	9113      	str	r1, [sp, #76]	@ 0x4c
 800cdac:	e7ba      	b.n	800cd24 <_strtod_l+0x6e4>
 800cdae:	2300      	movs	r3, #0
 800cdb0:	9310      	str	r3, [sp, #64]	@ 0x40
 800cdb2:	2301      	movs	r3, #1
 800cdb4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cdb6:	e7b5      	b.n	800cd24 <_strtod_l+0x6e4>
 800cdb8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cdba:	9805      	ldr	r0, [sp, #20]
 800cdbc:	462a      	mov	r2, r5
 800cdbe:	f7ff f9c5 	bl	800c14c <__lshift>
 800cdc2:	901a      	str	r0, [sp, #104]	@ 0x68
 800cdc4:	2800      	cmp	r0, #0
 800cdc6:	d1d9      	bne.n	800cd7c <_strtod_l+0x73c>
 800cdc8:	e65d      	b.n	800ca86 <_strtod_l+0x446>
 800cdca:	2e00      	cmp	r6, #0
 800cdcc:	dd07      	ble.n	800cdde <_strtod_l+0x79e>
 800cdce:	4649      	mov	r1, r9
 800cdd0:	9805      	ldr	r0, [sp, #20]
 800cdd2:	4632      	mov	r2, r6
 800cdd4:	f7ff f9ba 	bl	800c14c <__lshift>
 800cdd8:	4681      	mov	r9, r0
 800cdda:	2800      	cmp	r0, #0
 800cddc:	d0d8      	beq.n	800cd90 <_strtod_l+0x750>
 800cdde:	2f00      	cmp	r7, #0
 800cde0:	dd08      	ble.n	800cdf4 <_strtod_l+0x7b4>
 800cde2:	4641      	mov	r1, r8
 800cde4:	9805      	ldr	r0, [sp, #20]
 800cde6:	463a      	mov	r2, r7
 800cde8:	f7ff f9b0 	bl	800c14c <__lshift>
 800cdec:	4680      	mov	r8, r0
 800cdee:	2800      	cmp	r0, #0
 800cdf0:	f43f ae49 	beq.w	800ca86 <_strtod_l+0x446>
 800cdf4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cdf6:	9805      	ldr	r0, [sp, #20]
 800cdf8:	464a      	mov	r2, r9
 800cdfa:	f7ff fa2f 	bl	800c25c <__mdiff>
 800cdfe:	4604      	mov	r4, r0
 800ce00:	2800      	cmp	r0, #0
 800ce02:	f43f ae40 	beq.w	800ca86 <_strtod_l+0x446>
 800ce06:	68c3      	ldr	r3, [r0, #12]
 800ce08:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	60c3      	str	r3, [r0, #12]
 800ce0e:	4641      	mov	r1, r8
 800ce10:	f7ff fa08 	bl	800c224 <__mcmp>
 800ce14:	2800      	cmp	r0, #0
 800ce16:	da45      	bge.n	800cea4 <_strtod_l+0x864>
 800ce18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce1a:	ea53 030a 	orrs.w	r3, r3, sl
 800ce1e:	d16b      	bne.n	800cef8 <_strtod_l+0x8b8>
 800ce20:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d167      	bne.n	800cef8 <_strtod_l+0x8b8>
 800ce28:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ce2c:	0d1b      	lsrs	r3, r3, #20
 800ce2e:	051b      	lsls	r3, r3, #20
 800ce30:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ce34:	d960      	bls.n	800cef8 <_strtod_l+0x8b8>
 800ce36:	6963      	ldr	r3, [r4, #20]
 800ce38:	b913      	cbnz	r3, 800ce40 <_strtod_l+0x800>
 800ce3a:	6923      	ldr	r3, [r4, #16]
 800ce3c:	2b01      	cmp	r3, #1
 800ce3e:	dd5b      	ble.n	800cef8 <_strtod_l+0x8b8>
 800ce40:	4621      	mov	r1, r4
 800ce42:	2201      	movs	r2, #1
 800ce44:	9805      	ldr	r0, [sp, #20]
 800ce46:	f7ff f981 	bl	800c14c <__lshift>
 800ce4a:	4641      	mov	r1, r8
 800ce4c:	4604      	mov	r4, r0
 800ce4e:	f7ff f9e9 	bl	800c224 <__mcmp>
 800ce52:	2800      	cmp	r0, #0
 800ce54:	dd50      	ble.n	800cef8 <_strtod_l+0x8b8>
 800ce56:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ce5a:	9a08      	ldr	r2, [sp, #32]
 800ce5c:	0d1b      	lsrs	r3, r3, #20
 800ce5e:	051b      	lsls	r3, r3, #20
 800ce60:	2a00      	cmp	r2, #0
 800ce62:	d06a      	beq.n	800cf3a <_strtod_l+0x8fa>
 800ce64:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ce68:	d867      	bhi.n	800cf3a <_strtod_l+0x8fa>
 800ce6a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ce6e:	f67f ae9d 	bls.w	800cbac <_strtod_l+0x56c>
 800ce72:	4b0a      	ldr	r3, [pc, #40]	@ (800ce9c <_strtod_l+0x85c>)
 800ce74:	4650      	mov	r0, sl
 800ce76:	4659      	mov	r1, fp
 800ce78:	2200      	movs	r2, #0
 800ce7a:	f7f3 fbbd 	bl	80005f8 <__aeabi_dmul>
 800ce7e:	4b08      	ldr	r3, [pc, #32]	@ (800cea0 <_strtod_l+0x860>)
 800ce80:	400b      	ands	r3, r1
 800ce82:	4682      	mov	sl, r0
 800ce84:	468b      	mov	fp, r1
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	f47f ae08 	bne.w	800ca9c <_strtod_l+0x45c>
 800ce8c:	9a05      	ldr	r2, [sp, #20]
 800ce8e:	2322      	movs	r3, #34	@ 0x22
 800ce90:	6013      	str	r3, [r2, #0]
 800ce92:	e603      	b.n	800ca9c <_strtod_l+0x45c>
 800ce94:	0800edf8 	.word	0x0800edf8
 800ce98:	fffffc02 	.word	0xfffffc02
 800ce9c:	39500000 	.word	0x39500000
 800cea0:	7ff00000 	.word	0x7ff00000
 800cea4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800cea8:	d165      	bne.n	800cf76 <_strtod_l+0x936>
 800ceaa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ceac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ceb0:	b35a      	cbz	r2, 800cf0a <_strtod_l+0x8ca>
 800ceb2:	4a9f      	ldr	r2, [pc, #636]	@ (800d130 <_strtod_l+0xaf0>)
 800ceb4:	4293      	cmp	r3, r2
 800ceb6:	d12b      	bne.n	800cf10 <_strtod_l+0x8d0>
 800ceb8:	9b08      	ldr	r3, [sp, #32]
 800ceba:	4651      	mov	r1, sl
 800cebc:	b303      	cbz	r3, 800cf00 <_strtod_l+0x8c0>
 800cebe:	4b9d      	ldr	r3, [pc, #628]	@ (800d134 <_strtod_l+0xaf4>)
 800cec0:	465a      	mov	r2, fp
 800cec2:	4013      	ands	r3, r2
 800cec4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800cec8:	f04f 32ff 	mov.w	r2, #4294967295
 800cecc:	d81b      	bhi.n	800cf06 <_strtod_l+0x8c6>
 800cece:	0d1b      	lsrs	r3, r3, #20
 800ced0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ced4:	fa02 f303 	lsl.w	r3, r2, r3
 800ced8:	4299      	cmp	r1, r3
 800ceda:	d119      	bne.n	800cf10 <_strtod_l+0x8d0>
 800cedc:	4b96      	ldr	r3, [pc, #600]	@ (800d138 <_strtod_l+0xaf8>)
 800cede:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cee0:	429a      	cmp	r2, r3
 800cee2:	d102      	bne.n	800ceea <_strtod_l+0x8aa>
 800cee4:	3101      	adds	r1, #1
 800cee6:	f43f adce 	beq.w	800ca86 <_strtod_l+0x446>
 800ceea:	4b92      	ldr	r3, [pc, #584]	@ (800d134 <_strtod_l+0xaf4>)
 800ceec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ceee:	401a      	ands	r2, r3
 800cef0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800cef4:	f04f 0a00 	mov.w	sl, #0
 800cef8:	9b08      	ldr	r3, [sp, #32]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d1b9      	bne.n	800ce72 <_strtod_l+0x832>
 800cefe:	e5cd      	b.n	800ca9c <_strtod_l+0x45c>
 800cf00:	f04f 33ff 	mov.w	r3, #4294967295
 800cf04:	e7e8      	b.n	800ced8 <_strtod_l+0x898>
 800cf06:	4613      	mov	r3, r2
 800cf08:	e7e6      	b.n	800ced8 <_strtod_l+0x898>
 800cf0a:	ea53 030a 	orrs.w	r3, r3, sl
 800cf0e:	d0a2      	beq.n	800ce56 <_strtod_l+0x816>
 800cf10:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cf12:	b1db      	cbz	r3, 800cf4c <_strtod_l+0x90c>
 800cf14:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cf16:	4213      	tst	r3, r2
 800cf18:	d0ee      	beq.n	800cef8 <_strtod_l+0x8b8>
 800cf1a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cf1c:	9a08      	ldr	r2, [sp, #32]
 800cf1e:	4650      	mov	r0, sl
 800cf20:	4659      	mov	r1, fp
 800cf22:	b1bb      	cbz	r3, 800cf54 <_strtod_l+0x914>
 800cf24:	f7ff fb6c 	bl	800c600 <sulp>
 800cf28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cf2c:	ec53 2b10 	vmov	r2, r3, d0
 800cf30:	f7f3 f9ac 	bl	800028c <__adddf3>
 800cf34:	4682      	mov	sl, r0
 800cf36:	468b      	mov	fp, r1
 800cf38:	e7de      	b.n	800cef8 <_strtod_l+0x8b8>
 800cf3a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800cf3e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800cf42:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800cf46:	f04f 3aff 	mov.w	sl, #4294967295
 800cf4a:	e7d5      	b.n	800cef8 <_strtod_l+0x8b8>
 800cf4c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cf4e:	ea13 0f0a 	tst.w	r3, sl
 800cf52:	e7e1      	b.n	800cf18 <_strtod_l+0x8d8>
 800cf54:	f7ff fb54 	bl	800c600 <sulp>
 800cf58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cf5c:	ec53 2b10 	vmov	r2, r3, d0
 800cf60:	f7f3 f992 	bl	8000288 <__aeabi_dsub>
 800cf64:	2200      	movs	r2, #0
 800cf66:	2300      	movs	r3, #0
 800cf68:	4682      	mov	sl, r0
 800cf6a:	468b      	mov	fp, r1
 800cf6c:	f7f3 fdac 	bl	8000ac8 <__aeabi_dcmpeq>
 800cf70:	2800      	cmp	r0, #0
 800cf72:	d0c1      	beq.n	800cef8 <_strtod_l+0x8b8>
 800cf74:	e61a      	b.n	800cbac <_strtod_l+0x56c>
 800cf76:	4641      	mov	r1, r8
 800cf78:	4620      	mov	r0, r4
 800cf7a:	f7ff facb 	bl	800c514 <__ratio>
 800cf7e:	ec57 6b10 	vmov	r6, r7, d0
 800cf82:	2200      	movs	r2, #0
 800cf84:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800cf88:	4630      	mov	r0, r6
 800cf8a:	4639      	mov	r1, r7
 800cf8c:	f7f3 fdb0 	bl	8000af0 <__aeabi_dcmple>
 800cf90:	2800      	cmp	r0, #0
 800cf92:	d06f      	beq.n	800d074 <_strtod_l+0xa34>
 800cf94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d17a      	bne.n	800d090 <_strtod_l+0xa50>
 800cf9a:	f1ba 0f00 	cmp.w	sl, #0
 800cf9e:	d158      	bne.n	800d052 <_strtod_l+0xa12>
 800cfa0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cfa2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d15a      	bne.n	800d060 <_strtod_l+0xa20>
 800cfaa:	4b64      	ldr	r3, [pc, #400]	@ (800d13c <_strtod_l+0xafc>)
 800cfac:	2200      	movs	r2, #0
 800cfae:	4630      	mov	r0, r6
 800cfb0:	4639      	mov	r1, r7
 800cfb2:	f7f3 fd93 	bl	8000adc <__aeabi_dcmplt>
 800cfb6:	2800      	cmp	r0, #0
 800cfb8:	d159      	bne.n	800d06e <_strtod_l+0xa2e>
 800cfba:	4630      	mov	r0, r6
 800cfbc:	4639      	mov	r1, r7
 800cfbe:	4b60      	ldr	r3, [pc, #384]	@ (800d140 <_strtod_l+0xb00>)
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	f7f3 fb19 	bl	80005f8 <__aeabi_dmul>
 800cfc6:	4606      	mov	r6, r0
 800cfc8:	460f      	mov	r7, r1
 800cfca:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800cfce:	9606      	str	r6, [sp, #24]
 800cfd0:	9307      	str	r3, [sp, #28]
 800cfd2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cfd6:	4d57      	ldr	r5, [pc, #348]	@ (800d134 <_strtod_l+0xaf4>)
 800cfd8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800cfdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cfde:	401d      	ands	r5, r3
 800cfe0:	4b58      	ldr	r3, [pc, #352]	@ (800d144 <_strtod_l+0xb04>)
 800cfe2:	429d      	cmp	r5, r3
 800cfe4:	f040 80b2 	bne.w	800d14c <_strtod_l+0xb0c>
 800cfe8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cfea:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800cfee:	ec4b ab10 	vmov	d0, sl, fp
 800cff2:	f7ff f9c7 	bl	800c384 <__ulp>
 800cff6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cffa:	ec51 0b10 	vmov	r0, r1, d0
 800cffe:	f7f3 fafb 	bl	80005f8 <__aeabi_dmul>
 800d002:	4652      	mov	r2, sl
 800d004:	465b      	mov	r3, fp
 800d006:	f7f3 f941 	bl	800028c <__adddf3>
 800d00a:	460b      	mov	r3, r1
 800d00c:	4949      	ldr	r1, [pc, #292]	@ (800d134 <_strtod_l+0xaf4>)
 800d00e:	4a4e      	ldr	r2, [pc, #312]	@ (800d148 <_strtod_l+0xb08>)
 800d010:	4019      	ands	r1, r3
 800d012:	4291      	cmp	r1, r2
 800d014:	4682      	mov	sl, r0
 800d016:	d942      	bls.n	800d09e <_strtod_l+0xa5e>
 800d018:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d01a:	4b47      	ldr	r3, [pc, #284]	@ (800d138 <_strtod_l+0xaf8>)
 800d01c:	429a      	cmp	r2, r3
 800d01e:	d103      	bne.n	800d028 <_strtod_l+0x9e8>
 800d020:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d022:	3301      	adds	r3, #1
 800d024:	f43f ad2f 	beq.w	800ca86 <_strtod_l+0x446>
 800d028:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d138 <_strtod_l+0xaf8>
 800d02c:	f04f 3aff 	mov.w	sl, #4294967295
 800d030:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d032:	9805      	ldr	r0, [sp, #20]
 800d034:	f7fe fe7a 	bl	800bd2c <_Bfree>
 800d038:	9805      	ldr	r0, [sp, #20]
 800d03a:	4649      	mov	r1, r9
 800d03c:	f7fe fe76 	bl	800bd2c <_Bfree>
 800d040:	9805      	ldr	r0, [sp, #20]
 800d042:	4641      	mov	r1, r8
 800d044:	f7fe fe72 	bl	800bd2c <_Bfree>
 800d048:	9805      	ldr	r0, [sp, #20]
 800d04a:	4621      	mov	r1, r4
 800d04c:	f7fe fe6e 	bl	800bd2c <_Bfree>
 800d050:	e619      	b.n	800cc86 <_strtod_l+0x646>
 800d052:	f1ba 0f01 	cmp.w	sl, #1
 800d056:	d103      	bne.n	800d060 <_strtod_l+0xa20>
 800d058:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	f43f ada6 	beq.w	800cbac <_strtod_l+0x56c>
 800d060:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d110 <_strtod_l+0xad0>
 800d064:	4f35      	ldr	r7, [pc, #212]	@ (800d13c <_strtod_l+0xafc>)
 800d066:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d06a:	2600      	movs	r6, #0
 800d06c:	e7b1      	b.n	800cfd2 <_strtod_l+0x992>
 800d06e:	4f34      	ldr	r7, [pc, #208]	@ (800d140 <_strtod_l+0xb00>)
 800d070:	2600      	movs	r6, #0
 800d072:	e7aa      	b.n	800cfca <_strtod_l+0x98a>
 800d074:	4b32      	ldr	r3, [pc, #200]	@ (800d140 <_strtod_l+0xb00>)
 800d076:	4630      	mov	r0, r6
 800d078:	4639      	mov	r1, r7
 800d07a:	2200      	movs	r2, #0
 800d07c:	f7f3 fabc 	bl	80005f8 <__aeabi_dmul>
 800d080:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d082:	4606      	mov	r6, r0
 800d084:	460f      	mov	r7, r1
 800d086:	2b00      	cmp	r3, #0
 800d088:	d09f      	beq.n	800cfca <_strtod_l+0x98a>
 800d08a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d08e:	e7a0      	b.n	800cfd2 <_strtod_l+0x992>
 800d090:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d118 <_strtod_l+0xad8>
 800d094:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d098:	ec57 6b17 	vmov	r6, r7, d7
 800d09c:	e799      	b.n	800cfd2 <_strtod_l+0x992>
 800d09e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d0a2:	9b08      	ldr	r3, [sp, #32]
 800d0a4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d1c1      	bne.n	800d030 <_strtod_l+0x9f0>
 800d0ac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d0b0:	0d1b      	lsrs	r3, r3, #20
 800d0b2:	051b      	lsls	r3, r3, #20
 800d0b4:	429d      	cmp	r5, r3
 800d0b6:	d1bb      	bne.n	800d030 <_strtod_l+0x9f0>
 800d0b8:	4630      	mov	r0, r6
 800d0ba:	4639      	mov	r1, r7
 800d0bc:	f7f3 fdfc 	bl	8000cb8 <__aeabi_d2lz>
 800d0c0:	f7f3 fa6c 	bl	800059c <__aeabi_l2d>
 800d0c4:	4602      	mov	r2, r0
 800d0c6:	460b      	mov	r3, r1
 800d0c8:	4630      	mov	r0, r6
 800d0ca:	4639      	mov	r1, r7
 800d0cc:	f7f3 f8dc 	bl	8000288 <__aeabi_dsub>
 800d0d0:	460b      	mov	r3, r1
 800d0d2:	4602      	mov	r2, r0
 800d0d4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d0d8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d0dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d0de:	ea46 060a 	orr.w	r6, r6, sl
 800d0e2:	431e      	orrs	r6, r3
 800d0e4:	d06f      	beq.n	800d1c6 <_strtod_l+0xb86>
 800d0e6:	a30e      	add	r3, pc, #56	@ (adr r3, 800d120 <_strtod_l+0xae0>)
 800d0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ec:	f7f3 fcf6 	bl	8000adc <__aeabi_dcmplt>
 800d0f0:	2800      	cmp	r0, #0
 800d0f2:	f47f acd3 	bne.w	800ca9c <_strtod_l+0x45c>
 800d0f6:	a30c      	add	r3, pc, #48	@ (adr r3, 800d128 <_strtod_l+0xae8>)
 800d0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d100:	f7f3 fd0a 	bl	8000b18 <__aeabi_dcmpgt>
 800d104:	2800      	cmp	r0, #0
 800d106:	d093      	beq.n	800d030 <_strtod_l+0x9f0>
 800d108:	e4c8      	b.n	800ca9c <_strtod_l+0x45c>
 800d10a:	bf00      	nop
 800d10c:	f3af 8000 	nop.w
 800d110:	00000000 	.word	0x00000000
 800d114:	bff00000 	.word	0xbff00000
 800d118:	00000000 	.word	0x00000000
 800d11c:	3ff00000 	.word	0x3ff00000
 800d120:	94a03595 	.word	0x94a03595
 800d124:	3fdfffff 	.word	0x3fdfffff
 800d128:	35afe535 	.word	0x35afe535
 800d12c:	3fe00000 	.word	0x3fe00000
 800d130:	000fffff 	.word	0x000fffff
 800d134:	7ff00000 	.word	0x7ff00000
 800d138:	7fefffff 	.word	0x7fefffff
 800d13c:	3ff00000 	.word	0x3ff00000
 800d140:	3fe00000 	.word	0x3fe00000
 800d144:	7fe00000 	.word	0x7fe00000
 800d148:	7c9fffff 	.word	0x7c9fffff
 800d14c:	9b08      	ldr	r3, [sp, #32]
 800d14e:	b323      	cbz	r3, 800d19a <_strtod_l+0xb5a>
 800d150:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d154:	d821      	bhi.n	800d19a <_strtod_l+0xb5a>
 800d156:	a328      	add	r3, pc, #160	@ (adr r3, 800d1f8 <_strtod_l+0xbb8>)
 800d158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d15c:	4630      	mov	r0, r6
 800d15e:	4639      	mov	r1, r7
 800d160:	f7f3 fcc6 	bl	8000af0 <__aeabi_dcmple>
 800d164:	b1a0      	cbz	r0, 800d190 <_strtod_l+0xb50>
 800d166:	4639      	mov	r1, r7
 800d168:	4630      	mov	r0, r6
 800d16a:	f7f3 fd1d 	bl	8000ba8 <__aeabi_d2uiz>
 800d16e:	2801      	cmp	r0, #1
 800d170:	bf38      	it	cc
 800d172:	2001      	movcc	r0, #1
 800d174:	f7f3 f9c6 	bl	8000504 <__aeabi_ui2d>
 800d178:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d17a:	4606      	mov	r6, r0
 800d17c:	460f      	mov	r7, r1
 800d17e:	b9fb      	cbnz	r3, 800d1c0 <_strtod_l+0xb80>
 800d180:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d184:	9014      	str	r0, [sp, #80]	@ 0x50
 800d186:	9315      	str	r3, [sp, #84]	@ 0x54
 800d188:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d18c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d190:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d192:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d196:	1b5b      	subs	r3, r3, r5
 800d198:	9311      	str	r3, [sp, #68]	@ 0x44
 800d19a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d19e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d1a2:	f7ff f8ef 	bl	800c384 <__ulp>
 800d1a6:	4650      	mov	r0, sl
 800d1a8:	ec53 2b10 	vmov	r2, r3, d0
 800d1ac:	4659      	mov	r1, fp
 800d1ae:	f7f3 fa23 	bl	80005f8 <__aeabi_dmul>
 800d1b2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d1b6:	f7f3 f869 	bl	800028c <__adddf3>
 800d1ba:	4682      	mov	sl, r0
 800d1bc:	468b      	mov	fp, r1
 800d1be:	e770      	b.n	800d0a2 <_strtod_l+0xa62>
 800d1c0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d1c4:	e7e0      	b.n	800d188 <_strtod_l+0xb48>
 800d1c6:	a30e      	add	r3, pc, #56	@ (adr r3, 800d200 <_strtod_l+0xbc0>)
 800d1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1cc:	f7f3 fc86 	bl	8000adc <__aeabi_dcmplt>
 800d1d0:	e798      	b.n	800d104 <_strtod_l+0xac4>
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	930e      	str	r3, [sp, #56]	@ 0x38
 800d1d6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d1d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d1da:	6013      	str	r3, [r2, #0]
 800d1dc:	f7ff ba6d 	b.w	800c6ba <_strtod_l+0x7a>
 800d1e0:	2a65      	cmp	r2, #101	@ 0x65
 800d1e2:	f43f ab68 	beq.w	800c8b6 <_strtod_l+0x276>
 800d1e6:	2a45      	cmp	r2, #69	@ 0x45
 800d1e8:	f43f ab65 	beq.w	800c8b6 <_strtod_l+0x276>
 800d1ec:	2301      	movs	r3, #1
 800d1ee:	f7ff bba0 	b.w	800c932 <_strtod_l+0x2f2>
 800d1f2:	bf00      	nop
 800d1f4:	f3af 8000 	nop.w
 800d1f8:	ffc00000 	.word	0xffc00000
 800d1fc:	41dfffff 	.word	0x41dfffff
 800d200:	94a03595 	.word	0x94a03595
 800d204:	3fcfffff 	.word	0x3fcfffff

0800d208 <_strtod_r>:
 800d208:	4b01      	ldr	r3, [pc, #4]	@ (800d210 <_strtod_r+0x8>)
 800d20a:	f7ff ba19 	b.w	800c640 <_strtod_l>
 800d20e:	bf00      	nop
 800d210:	200000e0 	.word	0x200000e0

0800d214 <_strtol_l.isra.0>:
 800d214:	2b24      	cmp	r3, #36	@ 0x24
 800d216:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d21a:	4686      	mov	lr, r0
 800d21c:	4690      	mov	r8, r2
 800d21e:	d801      	bhi.n	800d224 <_strtol_l.isra.0+0x10>
 800d220:	2b01      	cmp	r3, #1
 800d222:	d106      	bne.n	800d232 <_strtol_l.isra.0+0x1e>
 800d224:	f7fd fe5e 	bl	800aee4 <__errno>
 800d228:	2316      	movs	r3, #22
 800d22a:	6003      	str	r3, [r0, #0]
 800d22c:	2000      	movs	r0, #0
 800d22e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d232:	4834      	ldr	r0, [pc, #208]	@ (800d304 <_strtol_l.isra.0+0xf0>)
 800d234:	460d      	mov	r5, r1
 800d236:	462a      	mov	r2, r5
 800d238:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d23c:	5d06      	ldrb	r6, [r0, r4]
 800d23e:	f016 0608 	ands.w	r6, r6, #8
 800d242:	d1f8      	bne.n	800d236 <_strtol_l.isra.0+0x22>
 800d244:	2c2d      	cmp	r4, #45	@ 0x2d
 800d246:	d110      	bne.n	800d26a <_strtol_l.isra.0+0x56>
 800d248:	782c      	ldrb	r4, [r5, #0]
 800d24a:	2601      	movs	r6, #1
 800d24c:	1c95      	adds	r5, r2, #2
 800d24e:	f033 0210 	bics.w	r2, r3, #16
 800d252:	d115      	bne.n	800d280 <_strtol_l.isra.0+0x6c>
 800d254:	2c30      	cmp	r4, #48	@ 0x30
 800d256:	d10d      	bne.n	800d274 <_strtol_l.isra.0+0x60>
 800d258:	782a      	ldrb	r2, [r5, #0]
 800d25a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d25e:	2a58      	cmp	r2, #88	@ 0x58
 800d260:	d108      	bne.n	800d274 <_strtol_l.isra.0+0x60>
 800d262:	786c      	ldrb	r4, [r5, #1]
 800d264:	3502      	adds	r5, #2
 800d266:	2310      	movs	r3, #16
 800d268:	e00a      	b.n	800d280 <_strtol_l.isra.0+0x6c>
 800d26a:	2c2b      	cmp	r4, #43	@ 0x2b
 800d26c:	bf04      	itt	eq
 800d26e:	782c      	ldrbeq	r4, [r5, #0]
 800d270:	1c95      	addeq	r5, r2, #2
 800d272:	e7ec      	b.n	800d24e <_strtol_l.isra.0+0x3a>
 800d274:	2b00      	cmp	r3, #0
 800d276:	d1f6      	bne.n	800d266 <_strtol_l.isra.0+0x52>
 800d278:	2c30      	cmp	r4, #48	@ 0x30
 800d27a:	bf14      	ite	ne
 800d27c:	230a      	movne	r3, #10
 800d27e:	2308      	moveq	r3, #8
 800d280:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d284:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d288:	2200      	movs	r2, #0
 800d28a:	fbbc f9f3 	udiv	r9, ip, r3
 800d28e:	4610      	mov	r0, r2
 800d290:	fb03 ca19 	mls	sl, r3, r9, ip
 800d294:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d298:	2f09      	cmp	r7, #9
 800d29a:	d80f      	bhi.n	800d2bc <_strtol_l.isra.0+0xa8>
 800d29c:	463c      	mov	r4, r7
 800d29e:	42a3      	cmp	r3, r4
 800d2a0:	dd1b      	ble.n	800d2da <_strtol_l.isra.0+0xc6>
 800d2a2:	1c57      	adds	r7, r2, #1
 800d2a4:	d007      	beq.n	800d2b6 <_strtol_l.isra.0+0xa2>
 800d2a6:	4581      	cmp	r9, r0
 800d2a8:	d314      	bcc.n	800d2d4 <_strtol_l.isra.0+0xc0>
 800d2aa:	d101      	bne.n	800d2b0 <_strtol_l.isra.0+0x9c>
 800d2ac:	45a2      	cmp	sl, r4
 800d2ae:	db11      	blt.n	800d2d4 <_strtol_l.isra.0+0xc0>
 800d2b0:	fb00 4003 	mla	r0, r0, r3, r4
 800d2b4:	2201      	movs	r2, #1
 800d2b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d2ba:	e7eb      	b.n	800d294 <_strtol_l.isra.0+0x80>
 800d2bc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d2c0:	2f19      	cmp	r7, #25
 800d2c2:	d801      	bhi.n	800d2c8 <_strtol_l.isra.0+0xb4>
 800d2c4:	3c37      	subs	r4, #55	@ 0x37
 800d2c6:	e7ea      	b.n	800d29e <_strtol_l.isra.0+0x8a>
 800d2c8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d2cc:	2f19      	cmp	r7, #25
 800d2ce:	d804      	bhi.n	800d2da <_strtol_l.isra.0+0xc6>
 800d2d0:	3c57      	subs	r4, #87	@ 0x57
 800d2d2:	e7e4      	b.n	800d29e <_strtol_l.isra.0+0x8a>
 800d2d4:	f04f 32ff 	mov.w	r2, #4294967295
 800d2d8:	e7ed      	b.n	800d2b6 <_strtol_l.isra.0+0xa2>
 800d2da:	1c53      	adds	r3, r2, #1
 800d2dc:	d108      	bne.n	800d2f0 <_strtol_l.isra.0+0xdc>
 800d2de:	2322      	movs	r3, #34	@ 0x22
 800d2e0:	f8ce 3000 	str.w	r3, [lr]
 800d2e4:	4660      	mov	r0, ip
 800d2e6:	f1b8 0f00 	cmp.w	r8, #0
 800d2ea:	d0a0      	beq.n	800d22e <_strtol_l.isra.0+0x1a>
 800d2ec:	1e69      	subs	r1, r5, #1
 800d2ee:	e006      	b.n	800d2fe <_strtol_l.isra.0+0xea>
 800d2f0:	b106      	cbz	r6, 800d2f4 <_strtol_l.isra.0+0xe0>
 800d2f2:	4240      	negs	r0, r0
 800d2f4:	f1b8 0f00 	cmp.w	r8, #0
 800d2f8:	d099      	beq.n	800d22e <_strtol_l.isra.0+0x1a>
 800d2fa:	2a00      	cmp	r2, #0
 800d2fc:	d1f6      	bne.n	800d2ec <_strtol_l.isra.0+0xd8>
 800d2fe:	f8c8 1000 	str.w	r1, [r8]
 800d302:	e794      	b.n	800d22e <_strtol_l.isra.0+0x1a>
 800d304:	0800ee21 	.word	0x0800ee21

0800d308 <_strtol_r>:
 800d308:	f7ff bf84 	b.w	800d214 <_strtol_l.isra.0>

0800d30c <__ssputs_r>:
 800d30c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d310:	688e      	ldr	r6, [r1, #8]
 800d312:	461f      	mov	r7, r3
 800d314:	42be      	cmp	r6, r7
 800d316:	680b      	ldr	r3, [r1, #0]
 800d318:	4682      	mov	sl, r0
 800d31a:	460c      	mov	r4, r1
 800d31c:	4690      	mov	r8, r2
 800d31e:	d82d      	bhi.n	800d37c <__ssputs_r+0x70>
 800d320:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d324:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d328:	d026      	beq.n	800d378 <__ssputs_r+0x6c>
 800d32a:	6965      	ldr	r5, [r4, #20]
 800d32c:	6909      	ldr	r1, [r1, #16]
 800d32e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d332:	eba3 0901 	sub.w	r9, r3, r1
 800d336:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d33a:	1c7b      	adds	r3, r7, #1
 800d33c:	444b      	add	r3, r9
 800d33e:	106d      	asrs	r5, r5, #1
 800d340:	429d      	cmp	r5, r3
 800d342:	bf38      	it	cc
 800d344:	461d      	movcc	r5, r3
 800d346:	0553      	lsls	r3, r2, #21
 800d348:	d527      	bpl.n	800d39a <__ssputs_r+0x8e>
 800d34a:	4629      	mov	r1, r5
 800d34c:	f7fc fcbe 	bl	8009ccc <_malloc_r>
 800d350:	4606      	mov	r6, r0
 800d352:	b360      	cbz	r0, 800d3ae <__ssputs_r+0xa2>
 800d354:	6921      	ldr	r1, [r4, #16]
 800d356:	464a      	mov	r2, r9
 800d358:	f7fd fdf1 	bl	800af3e <memcpy>
 800d35c:	89a3      	ldrh	r3, [r4, #12]
 800d35e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d362:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d366:	81a3      	strh	r3, [r4, #12]
 800d368:	6126      	str	r6, [r4, #16]
 800d36a:	6165      	str	r5, [r4, #20]
 800d36c:	444e      	add	r6, r9
 800d36e:	eba5 0509 	sub.w	r5, r5, r9
 800d372:	6026      	str	r6, [r4, #0]
 800d374:	60a5      	str	r5, [r4, #8]
 800d376:	463e      	mov	r6, r7
 800d378:	42be      	cmp	r6, r7
 800d37a:	d900      	bls.n	800d37e <__ssputs_r+0x72>
 800d37c:	463e      	mov	r6, r7
 800d37e:	6820      	ldr	r0, [r4, #0]
 800d380:	4632      	mov	r2, r6
 800d382:	4641      	mov	r1, r8
 800d384:	f000 f9c6 	bl	800d714 <memmove>
 800d388:	68a3      	ldr	r3, [r4, #8]
 800d38a:	1b9b      	subs	r3, r3, r6
 800d38c:	60a3      	str	r3, [r4, #8]
 800d38e:	6823      	ldr	r3, [r4, #0]
 800d390:	4433      	add	r3, r6
 800d392:	6023      	str	r3, [r4, #0]
 800d394:	2000      	movs	r0, #0
 800d396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d39a:	462a      	mov	r2, r5
 800d39c:	f000 fd59 	bl	800de52 <_realloc_r>
 800d3a0:	4606      	mov	r6, r0
 800d3a2:	2800      	cmp	r0, #0
 800d3a4:	d1e0      	bne.n	800d368 <__ssputs_r+0x5c>
 800d3a6:	6921      	ldr	r1, [r4, #16]
 800d3a8:	4650      	mov	r0, sl
 800d3aa:	f7fe fc35 	bl	800bc18 <_free_r>
 800d3ae:	230c      	movs	r3, #12
 800d3b0:	f8ca 3000 	str.w	r3, [sl]
 800d3b4:	89a3      	ldrh	r3, [r4, #12]
 800d3b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d3ba:	81a3      	strh	r3, [r4, #12]
 800d3bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d3c0:	e7e9      	b.n	800d396 <__ssputs_r+0x8a>
	...

0800d3c4 <_svfiprintf_r>:
 800d3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3c8:	4698      	mov	r8, r3
 800d3ca:	898b      	ldrh	r3, [r1, #12]
 800d3cc:	061b      	lsls	r3, r3, #24
 800d3ce:	b09d      	sub	sp, #116	@ 0x74
 800d3d0:	4607      	mov	r7, r0
 800d3d2:	460d      	mov	r5, r1
 800d3d4:	4614      	mov	r4, r2
 800d3d6:	d510      	bpl.n	800d3fa <_svfiprintf_r+0x36>
 800d3d8:	690b      	ldr	r3, [r1, #16]
 800d3da:	b973      	cbnz	r3, 800d3fa <_svfiprintf_r+0x36>
 800d3dc:	2140      	movs	r1, #64	@ 0x40
 800d3de:	f7fc fc75 	bl	8009ccc <_malloc_r>
 800d3e2:	6028      	str	r0, [r5, #0]
 800d3e4:	6128      	str	r0, [r5, #16]
 800d3e6:	b930      	cbnz	r0, 800d3f6 <_svfiprintf_r+0x32>
 800d3e8:	230c      	movs	r3, #12
 800d3ea:	603b      	str	r3, [r7, #0]
 800d3ec:	f04f 30ff 	mov.w	r0, #4294967295
 800d3f0:	b01d      	add	sp, #116	@ 0x74
 800d3f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3f6:	2340      	movs	r3, #64	@ 0x40
 800d3f8:	616b      	str	r3, [r5, #20]
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3fe:	2320      	movs	r3, #32
 800d400:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d404:	f8cd 800c 	str.w	r8, [sp, #12]
 800d408:	2330      	movs	r3, #48	@ 0x30
 800d40a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d5a8 <_svfiprintf_r+0x1e4>
 800d40e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d412:	f04f 0901 	mov.w	r9, #1
 800d416:	4623      	mov	r3, r4
 800d418:	469a      	mov	sl, r3
 800d41a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d41e:	b10a      	cbz	r2, 800d424 <_svfiprintf_r+0x60>
 800d420:	2a25      	cmp	r2, #37	@ 0x25
 800d422:	d1f9      	bne.n	800d418 <_svfiprintf_r+0x54>
 800d424:	ebba 0b04 	subs.w	fp, sl, r4
 800d428:	d00b      	beq.n	800d442 <_svfiprintf_r+0x7e>
 800d42a:	465b      	mov	r3, fp
 800d42c:	4622      	mov	r2, r4
 800d42e:	4629      	mov	r1, r5
 800d430:	4638      	mov	r0, r7
 800d432:	f7ff ff6b 	bl	800d30c <__ssputs_r>
 800d436:	3001      	adds	r0, #1
 800d438:	f000 80a7 	beq.w	800d58a <_svfiprintf_r+0x1c6>
 800d43c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d43e:	445a      	add	r2, fp
 800d440:	9209      	str	r2, [sp, #36]	@ 0x24
 800d442:	f89a 3000 	ldrb.w	r3, [sl]
 800d446:	2b00      	cmp	r3, #0
 800d448:	f000 809f 	beq.w	800d58a <_svfiprintf_r+0x1c6>
 800d44c:	2300      	movs	r3, #0
 800d44e:	f04f 32ff 	mov.w	r2, #4294967295
 800d452:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d456:	f10a 0a01 	add.w	sl, sl, #1
 800d45a:	9304      	str	r3, [sp, #16]
 800d45c:	9307      	str	r3, [sp, #28]
 800d45e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d462:	931a      	str	r3, [sp, #104]	@ 0x68
 800d464:	4654      	mov	r4, sl
 800d466:	2205      	movs	r2, #5
 800d468:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d46c:	484e      	ldr	r0, [pc, #312]	@ (800d5a8 <_svfiprintf_r+0x1e4>)
 800d46e:	f7f2 feaf 	bl	80001d0 <memchr>
 800d472:	9a04      	ldr	r2, [sp, #16]
 800d474:	b9d8      	cbnz	r0, 800d4ae <_svfiprintf_r+0xea>
 800d476:	06d0      	lsls	r0, r2, #27
 800d478:	bf44      	itt	mi
 800d47a:	2320      	movmi	r3, #32
 800d47c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d480:	0711      	lsls	r1, r2, #28
 800d482:	bf44      	itt	mi
 800d484:	232b      	movmi	r3, #43	@ 0x2b
 800d486:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d48a:	f89a 3000 	ldrb.w	r3, [sl]
 800d48e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d490:	d015      	beq.n	800d4be <_svfiprintf_r+0xfa>
 800d492:	9a07      	ldr	r2, [sp, #28]
 800d494:	4654      	mov	r4, sl
 800d496:	2000      	movs	r0, #0
 800d498:	f04f 0c0a 	mov.w	ip, #10
 800d49c:	4621      	mov	r1, r4
 800d49e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d4a2:	3b30      	subs	r3, #48	@ 0x30
 800d4a4:	2b09      	cmp	r3, #9
 800d4a6:	d94b      	bls.n	800d540 <_svfiprintf_r+0x17c>
 800d4a8:	b1b0      	cbz	r0, 800d4d8 <_svfiprintf_r+0x114>
 800d4aa:	9207      	str	r2, [sp, #28]
 800d4ac:	e014      	b.n	800d4d8 <_svfiprintf_r+0x114>
 800d4ae:	eba0 0308 	sub.w	r3, r0, r8
 800d4b2:	fa09 f303 	lsl.w	r3, r9, r3
 800d4b6:	4313      	orrs	r3, r2
 800d4b8:	9304      	str	r3, [sp, #16]
 800d4ba:	46a2      	mov	sl, r4
 800d4bc:	e7d2      	b.n	800d464 <_svfiprintf_r+0xa0>
 800d4be:	9b03      	ldr	r3, [sp, #12]
 800d4c0:	1d19      	adds	r1, r3, #4
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	9103      	str	r1, [sp, #12]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	bfbb      	ittet	lt
 800d4ca:	425b      	neglt	r3, r3
 800d4cc:	f042 0202 	orrlt.w	r2, r2, #2
 800d4d0:	9307      	strge	r3, [sp, #28]
 800d4d2:	9307      	strlt	r3, [sp, #28]
 800d4d4:	bfb8      	it	lt
 800d4d6:	9204      	strlt	r2, [sp, #16]
 800d4d8:	7823      	ldrb	r3, [r4, #0]
 800d4da:	2b2e      	cmp	r3, #46	@ 0x2e
 800d4dc:	d10a      	bne.n	800d4f4 <_svfiprintf_r+0x130>
 800d4de:	7863      	ldrb	r3, [r4, #1]
 800d4e0:	2b2a      	cmp	r3, #42	@ 0x2a
 800d4e2:	d132      	bne.n	800d54a <_svfiprintf_r+0x186>
 800d4e4:	9b03      	ldr	r3, [sp, #12]
 800d4e6:	1d1a      	adds	r2, r3, #4
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	9203      	str	r2, [sp, #12]
 800d4ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d4f0:	3402      	adds	r4, #2
 800d4f2:	9305      	str	r3, [sp, #20]
 800d4f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d5b8 <_svfiprintf_r+0x1f4>
 800d4f8:	7821      	ldrb	r1, [r4, #0]
 800d4fa:	2203      	movs	r2, #3
 800d4fc:	4650      	mov	r0, sl
 800d4fe:	f7f2 fe67 	bl	80001d0 <memchr>
 800d502:	b138      	cbz	r0, 800d514 <_svfiprintf_r+0x150>
 800d504:	9b04      	ldr	r3, [sp, #16]
 800d506:	eba0 000a 	sub.w	r0, r0, sl
 800d50a:	2240      	movs	r2, #64	@ 0x40
 800d50c:	4082      	lsls	r2, r0
 800d50e:	4313      	orrs	r3, r2
 800d510:	3401      	adds	r4, #1
 800d512:	9304      	str	r3, [sp, #16]
 800d514:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d518:	4824      	ldr	r0, [pc, #144]	@ (800d5ac <_svfiprintf_r+0x1e8>)
 800d51a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d51e:	2206      	movs	r2, #6
 800d520:	f7f2 fe56 	bl	80001d0 <memchr>
 800d524:	2800      	cmp	r0, #0
 800d526:	d036      	beq.n	800d596 <_svfiprintf_r+0x1d2>
 800d528:	4b21      	ldr	r3, [pc, #132]	@ (800d5b0 <_svfiprintf_r+0x1ec>)
 800d52a:	bb1b      	cbnz	r3, 800d574 <_svfiprintf_r+0x1b0>
 800d52c:	9b03      	ldr	r3, [sp, #12]
 800d52e:	3307      	adds	r3, #7
 800d530:	f023 0307 	bic.w	r3, r3, #7
 800d534:	3308      	adds	r3, #8
 800d536:	9303      	str	r3, [sp, #12]
 800d538:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d53a:	4433      	add	r3, r6
 800d53c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d53e:	e76a      	b.n	800d416 <_svfiprintf_r+0x52>
 800d540:	fb0c 3202 	mla	r2, ip, r2, r3
 800d544:	460c      	mov	r4, r1
 800d546:	2001      	movs	r0, #1
 800d548:	e7a8      	b.n	800d49c <_svfiprintf_r+0xd8>
 800d54a:	2300      	movs	r3, #0
 800d54c:	3401      	adds	r4, #1
 800d54e:	9305      	str	r3, [sp, #20]
 800d550:	4619      	mov	r1, r3
 800d552:	f04f 0c0a 	mov.w	ip, #10
 800d556:	4620      	mov	r0, r4
 800d558:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d55c:	3a30      	subs	r2, #48	@ 0x30
 800d55e:	2a09      	cmp	r2, #9
 800d560:	d903      	bls.n	800d56a <_svfiprintf_r+0x1a6>
 800d562:	2b00      	cmp	r3, #0
 800d564:	d0c6      	beq.n	800d4f4 <_svfiprintf_r+0x130>
 800d566:	9105      	str	r1, [sp, #20]
 800d568:	e7c4      	b.n	800d4f4 <_svfiprintf_r+0x130>
 800d56a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d56e:	4604      	mov	r4, r0
 800d570:	2301      	movs	r3, #1
 800d572:	e7f0      	b.n	800d556 <_svfiprintf_r+0x192>
 800d574:	ab03      	add	r3, sp, #12
 800d576:	9300      	str	r3, [sp, #0]
 800d578:	462a      	mov	r2, r5
 800d57a:	4b0e      	ldr	r3, [pc, #56]	@ (800d5b4 <_svfiprintf_r+0x1f0>)
 800d57c:	a904      	add	r1, sp, #16
 800d57e:	4638      	mov	r0, r7
 800d580:	f7fc fcd0 	bl	8009f24 <_printf_float>
 800d584:	1c42      	adds	r2, r0, #1
 800d586:	4606      	mov	r6, r0
 800d588:	d1d6      	bne.n	800d538 <_svfiprintf_r+0x174>
 800d58a:	89ab      	ldrh	r3, [r5, #12]
 800d58c:	065b      	lsls	r3, r3, #25
 800d58e:	f53f af2d 	bmi.w	800d3ec <_svfiprintf_r+0x28>
 800d592:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d594:	e72c      	b.n	800d3f0 <_svfiprintf_r+0x2c>
 800d596:	ab03      	add	r3, sp, #12
 800d598:	9300      	str	r3, [sp, #0]
 800d59a:	462a      	mov	r2, r5
 800d59c:	4b05      	ldr	r3, [pc, #20]	@ (800d5b4 <_svfiprintf_r+0x1f0>)
 800d59e:	a904      	add	r1, sp, #16
 800d5a0:	4638      	mov	r0, r7
 800d5a2:	f7fc ff57 	bl	800a454 <_printf_i>
 800d5a6:	e7ed      	b.n	800d584 <_svfiprintf_r+0x1c0>
 800d5a8:	0800ec1d 	.word	0x0800ec1d
 800d5ac:	0800ec27 	.word	0x0800ec27
 800d5b0:	08009f25 	.word	0x08009f25
 800d5b4:	0800d30d 	.word	0x0800d30d
 800d5b8:	0800ec23 	.word	0x0800ec23

0800d5bc <__sflush_r>:
 800d5bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d5c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5c4:	0716      	lsls	r6, r2, #28
 800d5c6:	4605      	mov	r5, r0
 800d5c8:	460c      	mov	r4, r1
 800d5ca:	d454      	bmi.n	800d676 <__sflush_r+0xba>
 800d5cc:	684b      	ldr	r3, [r1, #4]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	dc02      	bgt.n	800d5d8 <__sflush_r+0x1c>
 800d5d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	dd48      	ble.n	800d66a <__sflush_r+0xae>
 800d5d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d5da:	2e00      	cmp	r6, #0
 800d5dc:	d045      	beq.n	800d66a <__sflush_r+0xae>
 800d5de:	2300      	movs	r3, #0
 800d5e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d5e4:	682f      	ldr	r7, [r5, #0]
 800d5e6:	6a21      	ldr	r1, [r4, #32]
 800d5e8:	602b      	str	r3, [r5, #0]
 800d5ea:	d030      	beq.n	800d64e <__sflush_r+0x92>
 800d5ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d5ee:	89a3      	ldrh	r3, [r4, #12]
 800d5f0:	0759      	lsls	r1, r3, #29
 800d5f2:	d505      	bpl.n	800d600 <__sflush_r+0x44>
 800d5f4:	6863      	ldr	r3, [r4, #4]
 800d5f6:	1ad2      	subs	r2, r2, r3
 800d5f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d5fa:	b10b      	cbz	r3, 800d600 <__sflush_r+0x44>
 800d5fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d5fe:	1ad2      	subs	r2, r2, r3
 800d600:	2300      	movs	r3, #0
 800d602:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d604:	6a21      	ldr	r1, [r4, #32]
 800d606:	4628      	mov	r0, r5
 800d608:	47b0      	blx	r6
 800d60a:	1c43      	adds	r3, r0, #1
 800d60c:	89a3      	ldrh	r3, [r4, #12]
 800d60e:	d106      	bne.n	800d61e <__sflush_r+0x62>
 800d610:	6829      	ldr	r1, [r5, #0]
 800d612:	291d      	cmp	r1, #29
 800d614:	d82b      	bhi.n	800d66e <__sflush_r+0xb2>
 800d616:	4a2a      	ldr	r2, [pc, #168]	@ (800d6c0 <__sflush_r+0x104>)
 800d618:	40ca      	lsrs	r2, r1
 800d61a:	07d6      	lsls	r6, r2, #31
 800d61c:	d527      	bpl.n	800d66e <__sflush_r+0xb2>
 800d61e:	2200      	movs	r2, #0
 800d620:	6062      	str	r2, [r4, #4]
 800d622:	04d9      	lsls	r1, r3, #19
 800d624:	6922      	ldr	r2, [r4, #16]
 800d626:	6022      	str	r2, [r4, #0]
 800d628:	d504      	bpl.n	800d634 <__sflush_r+0x78>
 800d62a:	1c42      	adds	r2, r0, #1
 800d62c:	d101      	bne.n	800d632 <__sflush_r+0x76>
 800d62e:	682b      	ldr	r3, [r5, #0]
 800d630:	b903      	cbnz	r3, 800d634 <__sflush_r+0x78>
 800d632:	6560      	str	r0, [r4, #84]	@ 0x54
 800d634:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d636:	602f      	str	r7, [r5, #0]
 800d638:	b1b9      	cbz	r1, 800d66a <__sflush_r+0xae>
 800d63a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d63e:	4299      	cmp	r1, r3
 800d640:	d002      	beq.n	800d648 <__sflush_r+0x8c>
 800d642:	4628      	mov	r0, r5
 800d644:	f7fe fae8 	bl	800bc18 <_free_r>
 800d648:	2300      	movs	r3, #0
 800d64a:	6363      	str	r3, [r4, #52]	@ 0x34
 800d64c:	e00d      	b.n	800d66a <__sflush_r+0xae>
 800d64e:	2301      	movs	r3, #1
 800d650:	4628      	mov	r0, r5
 800d652:	47b0      	blx	r6
 800d654:	4602      	mov	r2, r0
 800d656:	1c50      	adds	r0, r2, #1
 800d658:	d1c9      	bne.n	800d5ee <__sflush_r+0x32>
 800d65a:	682b      	ldr	r3, [r5, #0]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d0c6      	beq.n	800d5ee <__sflush_r+0x32>
 800d660:	2b1d      	cmp	r3, #29
 800d662:	d001      	beq.n	800d668 <__sflush_r+0xac>
 800d664:	2b16      	cmp	r3, #22
 800d666:	d11e      	bne.n	800d6a6 <__sflush_r+0xea>
 800d668:	602f      	str	r7, [r5, #0]
 800d66a:	2000      	movs	r0, #0
 800d66c:	e022      	b.n	800d6b4 <__sflush_r+0xf8>
 800d66e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d672:	b21b      	sxth	r3, r3
 800d674:	e01b      	b.n	800d6ae <__sflush_r+0xf2>
 800d676:	690f      	ldr	r7, [r1, #16]
 800d678:	2f00      	cmp	r7, #0
 800d67a:	d0f6      	beq.n	800d66a <__sflush_r+0xae>
 800d67c:	0793      	lsls	r3, r2, #30
 800d67e:	680e      	ldr	r6, [r1, #0]
 800d680:	bf08      	it	eq
 800d682:	694b      	ldreq	r3, [r1, #20]
 800d684:	600f      	str	r7, [r1, #0]
 800d686:	bf18      	it	ne
 800d688:	2300      	movne	r3, #0
 800d68a:	eba6 0807 	sub.w	r8, r6, r7
 800d68e:	608b      	str	r3, [r1, #8]
 800d690:	f1b8 0f00 	cmp.w	r8, #0
 800d694:	dde9      	ble.n	800d66a <__sflush_r+0xae>
 800d696:	6a21      	ldr	r1, [r4, #32]
 800d698:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d69a:	4643      	mov	r3, r8
 800d69c:	463a      	mov	r2, r7
 800d69e:	4628      	mov	r0, r5
 800d6a0:	47b0      	blx	r6
 800d6a2:	2800      	cmp	r0, #0
 800d6a4:	dc08      	bgt.n	800d6b8 <__sflush_r+0xfc>
 800d6a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d6ae:	81a3      	strh	r3, [r4, #12]
 800d6b0:	f04f 30ff 	mov.w	r0, #4294967295
 800d6b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6b8:	4407      	add	r7, r0
 800d6ba:	eba8 0800 	sub.w	r8, r8, r0
 800d6be:	e7e7      	b.n	800d690 <__sflush_r+0xd4>
 800d6c0:	20400001 	.word	0x20400001

0800d6c4 <_fflush_r>:
 800d6c4:	b538      	push	{r3, r4, r5, lr}
 800d6c6:	690b      	ldr	r3, [r1, #16]
 800d6c8:	4605      	mov	r5, r0
 800d6ca:	460c      	mov	r4, r1
 800d6cc:	b913      	cbnz	r3, 800d6d4 <_fflush_r+0x10>
 800d6ce:	2500      	movs	r5, #0
 800d6d0:	4628      	mov	r0, r5
 800d6d2:	bd38      	pop	{r3, r4, r5, pc}
 800d6d4:	b118      	cbz	r0, 800d6de <_fflush_r+0x1a>
 800d6d6:	6a03      	ldr	r3, [r0, #32]
 800d6d8:	b90b      	cbnz	r3, 800d6de <_fflush_r+0x1a>
 800d6da:	f7fd fa73 	bl	800abc4 <__sinit>
 800d6de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d0f3      	beq.n	800d6ce <_fflush_r+0xa>
 800d6e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d6e8:	07d0      	lsls	r0, r2, #31
 800d6ea:	d404      	bmi.n	800d6f6 <_fflush_r+0x32>
 800d6ec:	0599      	lsls	r1, r3, #22
 800d6ee:	d402      	bmi.n	800d6f6 <_fflush_r+0x32>
 800d6f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d6f2:	f7fd fc22 	bl	800af3a <__retarget_lock_acquire_recursive>
 800d6f6:	4628      	mov	r0, r5
 800d6f8:	4621      	mov	r1, r4
 800d6fa:	f7ff ff5f 	bl	800d5bc <__sflush_r>
 800d6fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d700:	07da      	lsls	r2, r3, #31
 800d702:	4605      	mov	r5, r0
 800d704:	d4e4      	bmi.n	800d6d0 <_fflush_r+0xc>
 800d706:	89a3      	ldrh	r3, [r4, #12]
 800d708:	059b      	lsls	r3, r3, #22
 800d70a:	d4e1      	bmi.n	800d6d0 <_fflush_r+0xc>
 800d70c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d70e:	f7fd fc15 	bl	800af3c <__retarget_lock_release_recursive>
 800d712:	e7dd      	b.n	800d6d0 <_fflush_r+0xc>

0800d714 <memmove>:
 800d714:	4288      	cmp	r0, r1
 800d716:	b510      	push	{r4, lr}
 800d718:	eb01 0402 	add.w	r4, r1, r2
 800d71c:	d902      	bls.n	800d724 <memmove+0x10>
 800d71e:	4284      	cmp	r4, r0
 800d720:	4623      	mov	r3, r4
 800d722:	d807      	bhi.n	800d734 <memmove+0x20>
 800d724:	1e43      	subs	r3, r0, #1
 800d726:	42a1      	cmp	r1, r4
 800d728:	d008      	beq.n	800d73c <memmove+0x28>
 800d72a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d72e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d732:	e7f8      	b.n	800d726 <memmove+0x12>
 800d734:	4402      	add	r2, r0
 800d736:	4601      	mov	r1, r0
 800d738:	428a      	cmp	r2, r1
 800d73a:	d100      	bne.n	800d73e <memmove+0x2a>
 800d73c:	bd10      	pop	{r4, pc}
 800d73e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d742:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d746:	e7f7      	b.n	800d738 <memmove+0x24>

0800d748 <nan>:
 800d748:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d750 <nan+0x8>
 800d74c:	4770      	bx	lr
 800d74e:	bf00      	nop
 800d750:	00000000 	.word	0x00000000
 800d754:	7ff80000 	.word	0x7ff80000

0800d758 <__assert_func>:
 800d758:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d75a:	4614      	mov	r4, r2
 800d75c:	461a      	mov	r2, r3
 800d75e:	4b09      	ldr	r3, [pc, #36]	@ (800d784 <__assert_func+0x2c>)
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	4605      	mov	r5, r0
 800d764:	68d8      	ldr	r0, [r3, #12]
 800d766:	b14c      	cbz	r4, 800d77c <__assert_func+0x24>
 800d768:	4b07      	ldr	r3, [pc, #28]	@ (800d788 <__assert_func+0x30>)
 800d76a:	9100      	str	r1, [sp, #0]
 800d76c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d770:	4906      	ldr	r1, [pc, #24]	@ (800d78c <__assert_func+0x34>)
 800d772:	462b      	mov	r3, r5
 800d774:	f000 fba8 	bl	800dec8 <fiprintf>
 800d778:	f000 fbb8 	bl	800deec <abort>
 800d77c:	4b04      	ldr	r3, [pc, #16]	@ (800d790 <__assert_func+0x38>)
 800d77e:	461c      	mov	r4, r3
 800d780:	e7f3      	b.n	800d76a <__assert_func+0x12>
 800d782:	bf00      	nop
 800d784:	20000090 	.word	0x20000090
 800d788:	0800ec36 	.word	0x0800ec36
 800d78c:	0800ec43 	.word	0x0800ec43
 800d790:	0800ec71 	.word	0x0800ec71

0800d794 <_calloc_r>:
 800d794:	b570      	push	{r4, r5, r6, lr}
 800d796:	fba1 5402 	umull	r5, r4, r1, r2
 800d79a:	b934      	cbnz	r4, 800d7aa <_calloc_r+0x16>
 800d79c:	4629      	mov	r1, r5
 800d79e:	f7fc fa95 	bl	8009ccc <_malloc_r>
 800d7a2:	4606      	mov	r6, r0
 800d7a4:	b928      	cbnz	r0, 800d7b2 <_calloc_r+0x1e>
 800d7a6:	4630      	mov	r0, r6
 800d7a8:	bd70      	pop	{r4, r5, r6, pc}
 800d7aa:	220c      	movs	r2, #12
 800d7ac:	6002      	str	r2, [r0, #0]
 800d7ae:	2600      	movs	r6, #0
 800d7b0:	e7f9      	b.n	800d7a6 <_calloc_r+0x12>
 800d7b2:	462a      	mov	r2, r5
 800d7b4:	4621      	mov	r1, r4
 800d7b6:	f7fd fab0 	bl	800ad1a <memset>
 800d7ba:	e7f4      	b.n	800d7a6 <_calloc_r+0x12>

0800d7bc <rshift>:
 800d7bc:	6903      	ldr	r3, [r0, #16]
 800d7be:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d7c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d7c6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d7ca:	f100 0414 	add.w	r4, r0, #20
 800d7ce:	dd45      	ble.n	800d85c <rshift+0xa0>
 800d7d0:	f011 011f 	ands.w	r1, r1, #31
 800d7d4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d7d8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d7dc:	d10c      	bne.n	800d7f8 <rshift+0x3c>
 800d7de:	f100 0710 	add.w	r7, r0, #16
 800d7e2:	4629      	mov	r1, r5
 800d7e4:	42b1      	cmp	r1, r6
 800d7e6:	d334      	bcc.n	800d852 <rshift+0x96>
 800d7e8:	1a9b      	subs	r3, r3, r2
 800d7ea:	009b      	lsls	r3, r3, #2
 800d7ec:	1eea      	subs	r2, r5, #3
 800d7ee:	4296      	cmp	r6, r2
 800d7f0:	bf38      	it	cc
 800d7f2:	2300      	movcc	r3, #0
 800d7f4:	4423      	add	r3, r4
 800d7f6:	e015      	b.n	800d824 <rshift+0x68>
 800d7f8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d7fc:	f1c1 0820 	rsb	r8, r1, #32
 800d800:	40cf      	lsrs	r7, r1
 800d802:	f105 0e04 	add.w	lr, r5, #4
 800d806:	46a1      	mov	r9, r4
 800d808:	4576      	cmp	r6, lr
 800d80a:	46f4      	mov	ip, lr
 800d80c:	d815      	bhi.n	800d83a <rshift+0x7e>
 800d80e:	1a9a      	subs	r2, r3, r2
 800d810:	0092      	lsls	r2, r2, #2
 800d812:	3a04      	subs	r2, #4
 800d814:	3501      	adds	r5, #1
 800d816:	42ae      	cmp	r6, r5
 800d818:	bf38      	it	cc
 800d81a:	2200      	movcc	r2, #0
 800d81c:	18a3      	adds	r3, r4, r2
 800d81e:	50a7      	str	r7, [r4, r2]
 800d820:	b107      	cbz	r7, 800d824 <rshift+0x68>
 800d822:	3304      	adds	r3, #4
 800d824:	1b1a      	subs	r2, r3, r4
 800d826:	42a3      	cmp	r3, r4
 800d828:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d82c:	bf08      	it	eq
 800d82e:	2300      	moveq	r3, #0
 800d830:	6102      	str	r2, [r0, #16]
 800d832:	bf08      	it	eq
 800d834:	6143      	streq	r3, [r0, #20]
 800d836:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d83a:	f8dc c000 	ldr.w	ip, [ip]
 800d83e:	fa0c fc08 	lsl.w	ip, ip, r8
 800d842:	ea4c 0707 	orr.w	r7, ip, r7
 800d846:	f849 7b04 	str.w	r7, [r9], #4
 800d84a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d84e:	40cf      	lsrs	r7, r1
 800d850:	e7da      	b.n	800d808 <rshift+0x4c>
 800d852:	f851 cb04 	ldr.w	ip, [r1], #4
 800d856:	f847 cf04 	str.w	ip, [r7, #4]!
 800d85a:	e7c3      	b.n	800d7e4 <rshift+0x28>
 800d85c:	4623      	mov	r3, r4
 800d85e:	e7e1      	b.n	800d824 <rshift+0x68>

0800d860 <__hexdig_fun>:
 800d860:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d864:	2b09      	cmp	r3, #9
 800d866:	d802      	bhi.n	800d86e <__hexdig_fun+0xe>
 800d868:	3820      	subs	r0, #32
 800d86a:	b2c0      	uxtb	r0, r0
 800d86c:	4770      	bx	lr
 800d86e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d872:	2b05      	cmp	r3, #5
 800d874:	d801      	bhi.n	800d87a <__hexdig_fun+0x1a>
 800d876:	3847      	subs	r0, #71	@ 0x47
 800d878:	e7f7      	b.n	800d86a <__hexdig_fun+0xa>
 800d87a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d87e:	2b05      	cmp	r3, #5
 800d880:	d801      	bhi.n	800d886 <__hexdig_fun+0x26>
 800d882:	3827      	subs	r0, #39	@ 0x27
 800d884:	e7f1      	b.n	800d86a <__hexdig_fun+0xa>
 800d886:	2000      	movs	r0, #0
 800d888:	4770      	bx	lr
	...

0800d88c <__gethex>:
 800d88c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d890:	b085      	sub	sp, #20
 800d892:	468a      	mov	sl, r1
 800d894:	9302      	str	r3, [sp, #8]
 800d896:	680b      	ldr	r3, [r1, #0]
 800d898:	9001      	str	r0, [sp, #4]
 800d89a:	4690      	mov	r8, r2
 800d89c:	1c9c      	adds	r4, r3, #2
 800d89e:	46a1      	mov	r9, r4
 800d8a0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d8a4:	2830      	cmp	r0, #48	@ 0x30
 800d8a6:	d0fa      	beq.n	800d89e <__gethex+0x12>
 800d8a8:	eba9 0303 	sub.w	r3, r9, r3
 800d8ac:	f1a3 0b02 	sub.w	fp, r3, #2
 800d8b0:	f7ff ffd6 	bl	800d860 <__hexdig_fun>
 800d8b4:	4605      	mov	r5, r0
 800d8b6:	2800      	cmp	r0, #0
 800d8b8:	d168      	bne.n	800d98c <__gethex+0x100>
 800d8ba:	49a0      	ldr	r1, [pc, #640]	@ (800db3c <__gethex+0x2b0>)
 800d8bc:	2201      	movs	r2, #1
 800d8be:	4648      	mov	r0, r9
 800d8c0:	f7fd fa33 	bl	800ad2a <strncmp>
 800d8c4:	4607      	mov	r7, r0
 800d8c6:	2800      	cmp	r0, #0
 800d8c8:	d167      	bne.n	800d99a <__gethex+0x10e>
 800d8ca:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d8ce:	4626      	mov	r6, r4
 800d8d0:	f7ff ffc6 	bl	800d860 <__hexdig_fun>
 800d8d4:	2800      	cmp	r0, #0
 800d8d6:	d062      	beq.n	800d99e <__gethex+0x112>
 800d8d8:	4623      	mov	r3, r4
 800d8da:	7818      	ldrb	r0, [r3, #0]
 800d8dc:	2830      	cmp	r0, #48	@ 0x30
 800d8de:	4699      	mov	r9, r3
 800d8e0:	f103 0301 	add.w	r3, r3, #1
 800d8e4:	d0f9      	beq.n	800d8da <__gethex+0x4e>
 800d8e6:	f7ff ffbb 	bl	800d860 <__hexdig_fun>
 800d8ea:	fab0 f580 	clz	r5, r0
 800d8ee:	096d      	lsrs	r5, r5, #5
 800d8f0:	f04f 0b01 	mov.w	fp, #1
 800d8f4:	464a      	mov	r2, r9
 800d8f6:	4616      	mov	r6, r2
 800d8f8:	3201      	adds	r2, #1
 800d8fa:	7830      	ldrb	r0, [r6, #0]
 800d8fc:	f7ff ffb0 	bl	800d860 <__hexdig_fun>
 800d900:	2800      	cmp	r0, #0
 800d902:	d1f8      	bne.n	800d8f6 <__gethex+0x6a>
 800d904:	498d      	ldr	r1, [pc, #564]	@ (800db3c <__gethex+0x2b0>)
 800d906:	2201      	movs	r2, #1
 800d908:	4630      	mov	r0, r6
 800d90a:	f7fd fa0e 	bl	800ad2a <strncmp>
 800d90e:	2800      	cmp	r0, #0
 800d910:	d13f      	bne.n	800d992 <__gethex+0x106>
 800d912:	b944      	cbnz	r4, 800d926 <__gethex+0x9a>
 800d914:	1c74      	adds	r4, r6, #1
 800d916:	4622      	mov	r2, r4
 800d918:	4616      	mov	r6, r2
 800d91a:	3201      	adds	r2, #1
 800d91c:	7830      	ldrb	r0, [r6, #0]
 800d91e:	f7ff ff9f 	bl	800d860 <__hexdig_fun>
 800d922:	2800      	cmp	r0, #0
 800d924:	d1f8      	bne.n	800d918 <__gethex+0x8c>
 800d926:	1ba4      	subs	r4, r4, r6
 800d928:	00a7      	lsls	r7, r4, #2
 800d92a:	7833      	ldrb	r3, [r6, #0]
 800d92c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d930:	2b50      	cmp	r3, #80	@ 0x50
 800d932:	d13e      	bne.n	800d9b2 <__gethex+0x126>
 800d934:	7873      	ldrb	r3, [r6, #1]
 800d936:	2b2b      	cmp	r3, #43	@ 0x2b
 800d938:	d033      	beq.n	800d9a2 <__gethex+0x116>
 800d93a:	2b2d      	cmp	r3, #45	@ 0x2d
 800d93c:	d034      	beq.n	800d9a8 <__gethex+0x11c>
 800d93e:	1c71      	adds	r1, r6, #1
 800d940:	2400      	movs	r4, #0
 800d942:	7808      	ldrb	r0, [r1, #0]
 800d944:	f7ff ff8c 	bl	800d860 <__hexdig_fun>
 800d948:	1e43      	subs	r3, r0, #1
 800d94a:	b2db      	uxtb	r3, r3
 800d94c:	2b18      	cmp	r3, #24
 800d94e:	d830      	bhi.n	800d9b2 <__gethex+0x126>
 800d950:	f1a0 0210 	sub.w	r2, r0, #16
 800d954:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d958:	f7ff ff82 	bl	800d860 <__hexdig_fun>
 800d95c:	f100 3cff 	add.w	ip, r0, #4294967295
 800d960:	fa5f fc8c 	uxtb.w	ip, ip
 800d964:	f1bc 0f18 	cmp.w	ip, #24
 800d968:	f04f 030a 	mov.w	r3, #10
 800d96c:	d91e      	bls.n	800d9ac <__gethex+0x120>
 800d96e:	b104      	cbz	r4, 800d972 <__gethex+0xe6>
 800d970:	4252      	negs	r2, r2
 800d972:	4417      	add	r7, r2
 800d974:	f8ca 1000 	str.w	r1, [sl]
 800d978:	b1ed      	cbz	r5, 800d9b6 <__gethex+0x12a>
 800d97a:	f1bb 0f00 	cmp.w	fp, #0
 800d97e:	bf0c      	ite	eq
 800d980:	2506      	moveq	r5, #6
 800d982:	2500      	movne	r5, #0
 800d984:	4628      	mov	r0, r5
 800d986:	b005      	add	sp, #20
 800d988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d98c:	2500      	movs	r5, #0
 800d98e:	462c      	mov	r4, r5
 800d990:	e7b0      	b.n	800d8f4 <__gethex+0x68>
 800d992:	2c00      	cmp	r4, #0
 800d994:	d1c7      	bne.n	800d926 <__gethex+0x9a>
 800d996:	4627      	mov	r7, r4
 800d998:	e7c7      	b.n	800d92a <__gethex+0x9e>
 800d99a:	464e      	mov	r6, r9
 800d99c:	462f      	mov	r7, r5
 800d99e:	2501      	movs	r5, #1
 800d9a0:	e7c3      	b.n	800d92a <__gethex+0x9e>
 800d9a2:	2400      	movs	r4, #0
 800d9a4:	1cb1      	adds	r1, r6, #2
 800d9a6:	e7cc      	b.n	800d942 <__gethex+0xb6>
 800d9a8:	2401      	movs	r4, #1
 800d9aa:	e7fb      	b.n	800d9a4 <__gethex+0x118>
 800d9ac:	fb03 0002 	mla	r0, r3, r2, r0
 800d9b0:	e7ce      	b.n	800d950 <__gethex+0xc4>
 800d9b2:	4631      	mov	r1, r6
 800d9b4:	e7de      	b.n	800d974 <__gethex+0xe8>
 800d9b6:	eba6 0309 	sub.w	r3, r6, r9
 800d9ba:	3b01      	subs	r3, #1
 800d9bc:	4629      	mov	r1, r5
 800d9be:	2b07      	cmp	r3, #7
 800d9c0:	dc0a      	bgt.n	800d9d8 <__gethex+0x14c>
 800d9c2:	9801      	ldr	r0, [sp, #4]
 800d9c4:	f7fe f972 	bl	800bcac <_Balloc>
 800d9c8:	4604      	mov	r4, r0
 800d9ca:	b940      	cbnz	r0, 800d9de <__gethex+0x152>
 800d9cc:	4b5c      	ldr	r3, [pc, #368]	@ (800db40 <__gethex+0x2b4>)
 800d9ce:	4602      	mov	r2, r0
 800d9d0:	21e4      	movs	r1, #228	@ 0xe4
 800d9d2:	485c      	ldr	r0, [pc, #368]	@ (800db44 <__gethex+0x2b8>)
 800d9d4:	f7ff fec0 	bl	800d758 <__assert_func>
 800d9d8:	3101      	adds	r1, #1
 800d9da:	105b      	asrs	r3, r3, #1
 800d9dc:	e7ef      	b.n	800d9be <__gethex+0x132>
 800d9de:	f100 0a14 	add.w	sl, r0, #20
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	4655      	mov	r5, sl
 800d9e6:	469b      	mov	fp, r3
 800d9e8:	45b1      	cmp	r9, r6
 800d9ea:	d337      	bcc.n	800da5c <__gethex+0x1d0>
 800d9ec:	f845 bb04 	str.w	fp, [r5], #4
 800d9f0:	eba5 050a 	sub.w	r5, r5, sl
 800d9f4:	10ad      	asrs	r5, r5, #2
 800d9f6:	6125      	str	r5, [r4, #16]
 800d9f8:	4658      	mov	r0, fp
 800d9fa:	f7fe fa49 	bl	800be90 <__hi0bits>
 800d9fe:	016d      	lsls	r5, r5, #5
 800da00:	f8d8 6000 	ldr.w	r6, [r8]
 800da04:	1a2d      	subs	r5, r5, r0
 800da06:	42b5      	cmp	r5, r6
 800da08:	dd54      	ble.n	800dab4 <__gethex+0x228>
 800da0a:	1bad      	subs	r5, r5, r6
 800da0c:	4629      	mov	r1, r5
 800da0e:	4620      	mov	r0, r4
 800da10:	f7fe fdd5 	bl	800c5be <__any_on>
 800da14:	4681      	mov	r9, r0
 800da16:	b178      	cbz	r0, 800da38 <__gethex+0x1ac>
 800da18:	1e6b      	subs	r3, r5, #1
 800da1a:	1159      	asrs	r1, r3, #5
 800da1c:	f003 021f 	and.w	r2, r3, #31
 800da20:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800da24:	f04f 0901 	mov.w	r9, #1
 800da28:	fa09 f202 	lsl.w	r2, r9, r2
 800da2c:	420a      	tst	r2, r1
 800da2e:	d003      	beq.n	800da38 <__gethex+0x1ac>
 800da30:	454b      	cmp	r3, r9
 800da32:	dc36      	bgt.n	800daa2 <__gethex+0x216>
 800da34:	f04f 0902 	mov.w	r9, #2
 800da38:	4629      	mov	r1, r5
 800da3a:	4620      	mov	r0, r4
 800da3c:	f7ff febe 	bl	800d7bc <rshift>
 800da40:	442f      	add	r7, r5
 800da42:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800da46:	42bb      	cmp	r3, r7
 800da48:	da42      	bge.n	800dad0 <__gethex+0x244>
 800da4a:	9801      	ldr	r0, [sp, #4]
 800da4c:	4621      	mov	r1, r4
 800da4e:	f7fe f96d 	bl	800bd2c <_Bfree>
 800da52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800da54:	2300      	movs	r3, #0
 800da56:	6013      	str	r3, [r2, #0]
 800da58:	25a3      	movs	r5, #163	@ 0xa3
 800da5a:	e793      	b.n	800d984 <__gethex+0xf8>
 800da5c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800da60:	2a2e      	cmp	r2, #46	@ 0x2e
 800da62:	d012      	beq.n	800da8a <__gethex+0x1fe>
 800da64:	2b20      	cmp	r3, #32
 800da66:	d104      	bne.n	800da72 <__gethex+0x1e6>
 800da68:	f845 bb04 	str.w	fp, [r5], #4
 800da6c:	f04f 0b00 	mov.w	fp, #0
 800da70:	465b      	mov	r3, fp
 800da72:	7830      	ldrb	r0, [r6, #0]
 800da74:	9303      	str	r3, [sp, #12]
 800da76:	f7ff fef3 	bl	800d860 <__hexdig_fun>
 800da7a:	9b03      	ldr	r3, [sp, #12]
 800da7c:	f000 000f 	and.w	r0, r0, #15
 800da80:	4098      	lsls	r0, r3
 800da82:	ea4b 0b00 	orr.w	fp, fp, r0
 800da86:	3304      	adds	r3, #4
 800da88:	e7ae      	b.n	800d9e8 <__gethex+0x15c>
 800da8a:	45b1      	cmp	r9, r6
 800da8c:	d8ea      	bhi.n	800da64 <__gethex+0x1d8>
 800da8e:	492b      	ldr	r1, [pc, #172]	@ (800db3c <__gethex+0x2b0>)
 800da90:	9303      	str	r3, [sp, #12]
 800da92:	2201      	movs	r2, #1
 800da94:	4630      	mov	r0, r6
 800da96:	f7fd f948 	bl	800ad2a <strncmp>
 800da9a:	9b03      	ldr	r3, [sp, #12]
 800da9c:	2800      	cmp	r0, #0
 800da9e:	d1e1      	bne.n	800da64 <__gethex+0x1d8>
 800daa0:	e7a2      	b.n	800d9e8 <__gethex+0x15c>
 800daa2:	1ea9      	subs	r1, r5, #2
 800daa4:	4620      	mov	r0, r4
 800daa6:	f7fe fd8a 	bl	800c5be <__any_on>
 800daaa:	2800      	cmp	r0, #0
 800daac:	d0c2      	beq.n	800da34 <__gethex+0x1a8>
 800daae:	f04f 0903 	mov.w	r9, #3
 800dab2:	e7c1      	b.n	800da38 <__gethex+0x1ac>
 800dab4:	da09      	bge.n	800daca <__gethex+0x23e>
 800dab6:	1b75      	subs	r5, r6, r5
 800dab8:	4621      	mov	r1, r4
 800daba:	9801      	ldr	r0, [sp, #4]
 800dabc:	462a      	mov	r2, r5
 800dabe:	f7fe fb45 	bl	800c14c <__lshift>
 800dac2:	1b7f      	subs	r7, r7, r5
 800dac4:	4604      	mov	r4, r0
 800dac6:	f100 0a14 	add.w	sl, r0, #20
 800daca:	f04f 0900 	mov.w	r9, #0
 800dace:	e7b8      	b.n	800da42 <__gethex+0x1b6>
 800dad0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800dad4:	42bd      	cmp	r5, r7
 800dad6:	dd6f      	ble.n	800dbb8 <__gethex+0x32c>
 800dad8:	1bed      	subs	r5, r5, r7
 800dada:	42ae      	cmp	r6, r5
 800dadc:	dc34      	bgt.n	800db48 <__gethex+0x2bc>
 800dade:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dae2:	2b02      	cmp	r3, #2
 800dae4:	d022      	beq.n	800db2c <__gethex+0x2a0>
 800dae6:	2b03      	cmp	r3, #3
 800dae8:	d024      	beq.n	800db34 <__gethex+0x2a8>
 800daea:	2b01      	cmp	r3, #1
 800daec:	d115      	bne.n	800db1a <__gethex+0x28e>
 800daee:	42ae      	cmp	r6, r5
 800daf0:	d113      	bne.n	800db1a <__gethex+0x28e>
 800daf2:	2e01      	cmp	r6, #1
 800daf4:	d10b      	bne.n	800db0e <__gethex+0x282>
 800daf6:	9a02      	ldr	r2, [sp, #8]
 800daf8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800dafc:	6013      	str	r3, [r2, #0]
 800dafe:	2301      	movs	r3, #1
 800db00:	6123      	str	r3, [r4, #16]
 800db02:	f8ca 3000 	str.w	r3, [sl]
 800db06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800db08:	2562      	movs	r5, #98	@ 0x62
 800db0a:	601c      	str	r4, [r3, #0]
 800db0c:	e73a      	b.n	800d984 <__gethex+0xf8>
 800db0e:	1e71      	subs	r1, r6, #1
 800db10:	4620      	mov	r0, r4
 800db12:	f7fe fd54 	bl	800c5be <__any_on>
 800db16:	2800      	cmp	r0, #0
 800db18:	d1ed      	bne.n	800daf6 <__gethex+0x26a>
 800db1a:	9801      	ldr	r0, [sp, #4]
 800db1c:	4621      	mov	r1, r4
 800db1e:	f7fe f905 	bl	800bd2c <_Bfree>
 800db22:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800db24:	2300      	movs	r3, #0
 800db26:	6013      	str	r3, [r2, #0]
 800db28:	2550      	movs	r5, #80	@ 0x50
 800db2a:	e72b      	b.n	800d984 <__gethex+0xf8>
 800db2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d1f3      	bne.n	800db1a <__gethex+0x28e>
 800db32:	e7e0      	b.n	800daf6 <__gethex+0x26a>
 800db34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db36:	2b00      	cmp	r3, #0
 800db38:	d1dd      	bne.n	800daf6 <__gethex+0x26a>
 800db3a:	e7ee      	b.n	800db1a <__gethex+0x28e>
 800db3c:	0800ec1b 	.word	0x0800ec1b
 800db40:	0800ebb1 	.word	0x0800ebb1
 800db44:	0800ec72 	.word	0x0800ec72
 800db48:	1e6f      	subs	r7, r5, #1
 800db4a:	f1b9 0f00 	cmp.w	r9, #0
 800db4e:	d130      	bne.n	800dbb2 <__gethex+0x326>
 800db50:	b127      	cbz	r7, 800db5c <__gethex+0x2d0>
 800db52:	4639      	mov	r1, r7
 800db54:	4620      	mov	r0, r4
 800db56:	f7fe fd32 	bl	800c5be <__any_on>
 800db5a:	4681      	mov	r9, r0
 800db5c:	117a      	asrs	r2, r7, #5
 800db5e:	2301      	movs	r3, #1
 800db60:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800db64:	f007 071f 	and.w	r7, r7, #31
 800db68:	40bb      	lsls	r3, r7
 800db6a:	4213      	tst	r3, r2
 800db6c:	4629      	mov	r1, r5
 800db6e:	4620      	mov	r0, r4
 800db70:	bf18      	it	ne
 800db72:	f049 0902 	orrne.w	r9, r9, #2
 800db76:	f7ff fe21 	bl	800d7bc <rshift>
 800db7a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800db7e:	1b76      	subs	r6, r6, r5
 800db80:	2502      	movs	r5, #2
 800db82:	f1b9 0f00 	cmp.w	r9, #0
 800db86:	d047      	beq.n	800dc18 <__gethex+0x38c>
 800db88:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800db8c:	2b02      	cmp	r3, #2
 800db8e:	d015      	beq.n	800dbbc <__gethex+0x330>
 800db90:	2b03      	cmp	r3, #3
 800db92:	d017      	beq.n	800dbc4 <__gethex+0x338>
 800db94:	2b01      	cmp	r3, #1
 800db96:	d109      	bne.n	800dbac <__gethex+0x320>
 800db98:	f019 0f02 	tst.w	r9, #2
 800db9c:	d006      	beq.n	800dbac <__gethex+0x320>
 800db9e:	f8da 3000 	ldr.w	r3, [sl]
 800dba2:	ea49 0903 	orr.w	r9, r9, r3
 800dba6:	f019 0f01 	tst.w	r9, #1
 800dbaa:	d10e      	bne.n	800dbca <__gethex+0x33e>
 800dbac:	f045 0510 	orr.w	r5, r5, #16
 800dbb0:	e032      	b.n	800dc18 <__gethex+0x38c>
 800dbb2:	f04f 0901 	mov.w	r9, #1
 800dbb6:	e7d1      	b.n	800db5c <__gethex+0x2d0>
 800dbb8:	2501      	movs	r5, #1
 800dbba:	e7e2      	b.n	800db82 <__gethex+0x2f6>
 800dbbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dbbe:	f1c3 0301 	rsb	r3, r3, #1
 800dbc2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dbc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d0f0      	beq.n	800dbac <__gethex+0x320>
 800dbca:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800dbce:	f104 0314 	add.w	r3, r4, #20
 800dbd2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800dbd6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800dbda:	f04f 0c00 	mov.w	ip, #0
 800dbde:	4618      	mov	r0, r3
 800dbe0:	f853 2b04 	ldr.w	r2, [r3], #4
 800dbe4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800dbe8:	d01b      	beq.n	800dc22 <__gethex+0x396>
 800dbea:	3201      	adds	r2, #1
 800dbec:	6002      	str	r2, [r0, #0]
 800dbee:	2d02      	cmp	r5, #2
 800dbf0:	f104 0314 	add.w	r3, r4, #20
 800dbf4:	d13c      	bne.n	800dc70 <__gethex+0x3e4>
 800dbf6:	f8d8 2000 	ldr.w	r2, [r8]
 800dbfa:	3a01      	subs	r2, #1
 800dbfc:	42b2      	cmp	r2, r6
 800dbfe:	d109      	bne.n	800dc14 <__gethex+0x388>
 800dc00:	1171      	asrs	r1, r6, #5
 800dc02:	2201      	movs	r2, #1
 800dc04:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dc08:	f006 061f 	and.w	r6, r6, #31
 800dc0c:	fa02 f606 	lsl.w	r6, r2, r6
 800dc10:	421e      	tst	r6, r3
 800dc12:	d13a      	bne.n	800dc8a <__gethex+0x3fe>
 800dc14:	f045 0520 	orr.w	r5, r5, #32
 800dc18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dc1a:	601c      	str	r4, [r3, #0]
 800dc1c:	9b02      	ldr	r3, [sp, #8]
 800dc1e:	601f      	str	r7, [r3, #0]
 800dc20:	e6b0      	b.n	800d984 <__gethex+0xf8>
 800dc22:	4299      	cmp	r1, r3
 800dc24:	f843 cc04 	str.w	ip, [r3, #-4]
 800dc28:	d8d9      	bhi.n	800dbde <__gethex+0x352>
 800dc2a:	68a3      	ldr	r3, [r4, #8]
 800dc2c:	459b      	cmp	fp, r3
 800dc2e:	db17      	blt.n	800dc60 <__gethex+0x3d4>
 800dc30:	6861      	ldr	r1, [r4, #4]
 800dc32:	9801      	ldr	r0, [sp, #4]
 800dc34:	3101      	adds	r1, #1
 800dc36:	f7fe f839 	bl	800bcac <_Balloc>
 800dc3a:	4681      	mov	r9, r0
 800dc3c:	b918      	cbnz	r0, 800dc46 <__gethex+0x3ba>
 800dc3e:	4b1a      	ldr	r3, [pc, #104]	@ (800dca8 <__gethex+0x41c>)
 800dc40:	4602      	mov	r2, r0
 800dc42:	2184      	movs	r1, #132	@ 0x84
 800dc44:	e6c5      	b.n	800d9d2 <__gethex+0x146>
 800dc46:	6922      	ldr	r2, [r4, #16]
 800dc48:	3202      	adds	r2, #2
 800dc4a:	f104 010c 	add.w	r1, r4, #12
 800dc4e:	0092      	lsls	r2, r2, #2
 800dc50:	300c      	adds	r0, #12
 800dc52:	f7fd f974 	bl	800af3e <memcpy>
 800dc56:	4621      	mov	r1, r4
 800dc58:	9801      	ldr	r0, [sp, #4]
 800dc5a:	f7fe f867 	bl	800bd2c <_Bfree>
 800dc5e:	464c      	mov	r4, r9
 800dc60:	6923      	ldr	r3, [r4, #16]
 800dc62:	1c5a      	adds	r2, r3, #1
 800dc64:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dc68:	6122      	str	r2, [r4, #16]
 800dc6a:	2201      	movs	r2, #1
 800dc6c:	615a      	str	r2, [r3, #20]
 800dc6e:	e7be      	b.n	800dbee <__gethex+0x362>
 800dc70:	6922      	ldr	r2, [r4, #16]
 800dc72:	455a      	cmp	r2, fp
 800dc74:	dd0b      	ble.n	800dc8e <__gethex+0x402>
 800dc76:	2101      	movs	r1, #1
 800dc78:	4620      	mov	r0, r4
 800dc7a:	f7ff fd9f 	bl	800d7bc <rshift>
 800dc7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dc82:	3701      	adds	r7, #1
 800dc84:	42bb      	cmp	r3, r7
 800dc86:	f6ff aee0 	blt.w	800da4a <__gethex+0x1be>
 800dc8a:	2501      	movs	r5, #1
 800dc8c:	e7c2      	b.n	800dc14 <__gethex+0x388>
 800dc8e:	f016 061f 	ands.w	r6, r6, #31
 800dc92:	d0fa      	beq.n	800dc8a <__gethex+0x3fe>
 800dc94:	4453      	add	r3, sl
 800dc96:	f1c6 0620 	rsb	r6, r6, #32
 800dc9a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800dc9e:	f7fe f8f7 	bl	800be90 <__hi0bits>
 800dca2:	42b0      	cmp	r0, r6
 800dca4:	dbe7      	blt.n	800dc76 <__gethex+0x3ea>
 800dca6:	e7f0      	b.n	800dc8a <__gethex+0x3fe>
 800dca8:	0800ebb1 	.word	0x0800ebb1

0800dcac <L_shift>:
 800dcac:	f1c2 0208 	rsb	r2, r2, #8
 800dcb0:	0092      	lsls	r2, r2, #2
 800dcb2:	b570      	push	{r4, r5, r6, lr}
 800dcb4:	f1c2 0620 	rsb	r6, r2, #32
 800dcb8:	6843      	ldr	r3, [r0, #4]
 800dcba:	6804      	ldr	r4, [r0, #0]
 800dcbc:	fa03 f506 	lsl.w	r5, r3, r6
 800dcc0:	432c      	orrs	r4, r5
 800dcc2:	40d3      	lsrs	r3, r2
 800dcc4:	6004      	str	r4, [r0, #0]
 800dcc6:	f840 3f04 	str.w	r3, [r0, #4]!
 800dcca:	4288      	cmp	r0, r1
 800dccc:	d3f4      	bcc.n	800dcb8 <L_shift+0xc>
 800dcce:	bd70      	pop	{r4, r5, r6, pc}

0800dcd0 <__match>:
 800dcd0:	b530      	push	{r4, r5, lr}
 800dcd2:	6803      	ldr	r3, [r0, #0]
 800dcd4:	3301      	adds	r3, #1
 800dcd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dcda:	b914      	cbnz	r4, 800dce2 <__match+0x12>
 800dcdc:	6003      	str	r3, [r0, #0]
 800dcde:	2001      	movs	r0, #1
 800dce0:	bd30      	pop	{r4, r5, pc}
 800dce2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dce6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800dcea:	2d19      	cmp	r5, #25
 800dcec:	bf98      	it	ls
 800dcee:	3220      	addls	r2, #32
 800dcf0:	42a2      	cmp	r2, r4
 800dcf2:	d0f0      	beq.n	800dcd6 <__match+0x6>
 800dcf4:	2000      	movs	r0, #0
 800dcf6:	e7f3      	b.n	800dce0 <__match+0x10>

0800dcf8 <__hexnan>:
 800dcf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcfc:	680b      	ldr	r3, [r1, #0]
 800dcfe:	6801      	ldr	r1, [r0, #0]
 800dd00:	115e      	asrs	r6, r3, #5
 800dd02:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800dd06:	f013 031f 	ands.w	r3, r3, #31
 800dd0a:	b087      	sub	sp, #28
 800dd0c:	bf18      	it	ne
 800dd0e:	3604      	addne	r6, #4
 800dd10:	2500      	movs	r5, #0
 800dd12:	1f37      	subs	r7, r6, #4
 800dd14:	4682      	mov	sl, r0
 800dd16:	4690      	mov	r8, r2
 800dd18:	9301      	str	r3, [sp, #4]
 800dd1a:	f846 5c04 	str.w	r5, [r6, #-4]
 800dd1e:	46b9      	mov	r9, r7
 800dd20:	463c      	mov	r4, r7
 800dd22:	9502      	str	r5, [sp, #8]
 800dd24:	46ab      	mov	fp, r5
 800dd26:	784a      	ldrb	r2, [r1, #1]
 800dd28:	1c4b      	adds	r3, r1, #1
 800dd2a:	9303      	str	r3, [sp, #12]
 800dd2c:	b342      	cbz	r2, 800dd80 <__hexnan+0x88>
 800dd2e:	4610      	mov	r0, r2
 800dd30:	9105      	str	r1, [sp, #20]
 800dd32:	9204      	str	r2, [sp, #16]
 800dd34:	f7ff fd94 	bl	800d860 <__hexdig_fun>
 800dd38:	2800      	cmp	r0, #0
 800dd3a:	d151      	bne.n	800dde0 <__hexnan+0xe8>
 800dd3c:	9a04      	ldr	r2, [sp, #16]
 800dd3e:	9905      	ldr	r1, [sp, #20]
 800dd40:	2a20      	cmp	r2, #32
 800dd42:	d818      	bhi.n	800dd76 <__hexnan+0x7e>
 800dd44:	9b02      	ldr	r3, [sp, #8]
 800dd46:	459b      	cmp	fp, r3
 800dd48:	dd13      	ble.n	800dd72 <__hexnan+0x7a>
 800dd4a:	454c      	cmp	r4, r9
 800dd4c:	d206      	bcs.n	800dd5c <__hexnan+0x64>
 800dd4e:	2d07      	cmp	r5, #7
 800dd50:	dc04      	bgt.n	800dd5c <__hexnan+0x64>
 800dd52:	462a      	mov	r2, r5
 800dd54:	4649      	mov	r1, r9
 800dd56:	4620      	mov	r0, r4
 800dd58:	f7ff ffa8 	bl	800dcac <L_shift>
 800dd5c:	4544      	cmp	r4, r8
 800dd5e:	d952      	bls.n	800de06 <__hexnan+0x10e>
 800dd60:	2300      	movs	r3, #0
 800dd62:	f1a4 0904 	sub.w	r9, r4, #4
 800dd66:	f844 3c04 	str.w	r3, [r4, #-4]
 800dd6a:	f8cd b008 	str.w	fp, [sp, #8]
 800dd6e:	464c      	mov	r4, r9
 800dd70:	461d      	mov	r5, r3
 800dd72:	9903      	ldr	r1, [sp, #12]
 800dd74:	e7d7      	b.n	800dd26 <__hexnan+0x2e>
 800dd76:	2a29      	cmp	r2, #41	@ 0x29
 800dd78:	d157      	bne.n	800de2a <__hexnan+0x132>
 800dd7a:	3102      	adds	r1, #2
 800dd7c:	f8ca 1000 	str.w	r1, [sl]
 800dd80:	f1bb 0f00 	cmp.w	fp, #0
 800dd84:	d051      	beq.n	800de2a <__hexnan+0x132>
 800dd86:	454c      	cmp	r4, r9
 800dd88:	d206      	bcs.n	800dd98 <__hexnan+0xa0>
 800dd8a:	2d07      	cmp	r5, #7
 800dd8c:	dc04      	bgt.n	800dd98 <__hexnan+0xa0>
 800dd8e:	462a      	mov	r2, r5
 800dd90:	4649      	mov	r1, r9
 800dd92:	4620      	mov	r0, r4
 800dd94:	f7ff ff8a 	bl	800dcac <L_shift>
 800dd98:	4544      	cmp	r4, r8
 800dd9a:	d936      	bls.n	800de0a <__hexnan+0x112>
 800dd9c:	f1a8 0204 	sub.w	r2, r8, #4
 800dda0:	4623      	mov	r3, r4
 800dda2:	f853 1b04 	ldr.w	r1, [r3], #4
 800dda6:	f842 1f04 	str.w	r1, [r2, #4]!
 800ddaa:	429f      	cmp	r7, r3
 800ddac:	d2f9      	bcs.n	800dda2 <__hexnan+0xaa>
 800ddae:	1b3b      	subs	r3, r7, r4
 800ddb0:	f023 0303 	bic.w	r3, r3, #3
 800ddb4:	3304      	adds	r3, #4
 800ddb6:	3401      	adds	r4, #1
 800ddb8:	3e03      	subs	r6, #3
 800ddba:	42b4      	cmp	r4, r6
 800ddbc:	bf88      	it	hi
 800ddbe:	2304      	movhi	r3, #4
 800ddc0:	4443      	add	r3, r8
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	f843 2b04 	str.w	r2, [r3], #4
 800ddc8:	429f      	cmp	r7, r3
 800ddca:	d2fb      	bcs.n	800ddc4 <__hexnan+0xcc>
 800ddcc:	683b      	ldr	r3, [r7, #0]
 800ddce:	b91b      	cbnz	r3, 800ddd8 <__hexnan+0xe0>
 800ddd0:	4547      	cmp	r7, r8
 800ddd2:	d128      	bne.n	800de26 <__hexnan+0x12e>
 800ddd4:	2301      	movs	r3, #1
 800ddd6:	603b      	str	r3, [r7, #0]
 800ddd8:	2005      	movs	r0, #5
 800ddda:	b007      	add	sp, #28
 800dddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dde0:	3501      	adds	r5, #1
 800dde2:	2d08      	cmp	r5, #8
 800dde4:	f10b 0b01 	add.w	fp, fp, #1
 800dde8:	dd06      	ble.n	800ddf8 <__hexnan+0x100>
 800ddea:	4544      	cmp	r4, r8
 800ddec:	d9c1      	bls.n	800dd72 <__hexnan+0x7a>
 800ddee:	2300      	movs	r3, #0
 800ddf0:	f844 3c04 	str.w	r3, [r4, #-4]
 800ddf4:	2501      	movs	r5, #1
 800ddf6:	3c04      	subs	r4, #4
 800ddf8:	6822      	ldr	r2, [r4, #0]
 800ddfa:	f000 000f 	and.w	r0, r0, #15
 800ddfe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800de02:	6020      	str	r0, [r4, #0]
 800de04:	e7b5      	b.n	800dd72 <__hexnan+0x7a>
 800de06:	2508      	movs	r5, #8
 800de08:	e7b3      	b.n	800dd72 <__hexnan+0x7a>
 800de0a:	9b01      	ldr	r3, [sp, #4]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d0dd      	beq.n	800ddcc <__hexnan+0xd4>
 800de10:	f1c3 0320 	rsb	r3, r3, #32
 800de14:	f04f 32ff 	mov.w	r2, #4294967295
 800de18:	40da      	lsrs	r2, r3
 800de1a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800de1e:	4013      	ands	r3, r2
 800de20:	f846 3c04 	str.w	r3, [r6, #-4]
 800de24:	e7d2      	b.n	800ddcc <__hexnan+0xd4>
 800de26:	3f04      	subs	r7, #4
 800de28:	e7d0      	b.n	800ddcc <__hexnan+0xd4>
 800de2a:	2004      	movs	r0, #4
 800de2c:	e7d5      	b.n	800ddda <__hexnan+0xe2>

0800de2e <__ascii_mbtowc>:
 800de2e:	b082      	sub	sp, #8
 800de30:	b901      	cbnz	r1, 800de34 <__ascii_mbtowc+0x6>
 800de32:	a901      	add	r1, sp, #4
 800de34:	b142      	cbz	r2, 800de48 <__ascii_mbtowc+0x1a>
 800de36:	b14b      	cbz	r3, 800de4c <__ascii_mbtowc+0x1e>
 800de38:	7813      	ldrb	r3, [r2, #0]
 800de3a:	600b      	str	r3, [r1, #0]
 800de3c:	7812      	ldrb	r2, [r2, #0]
 800de3e:	1e10      	subs	r0, r2, #0
 800de40:	bf18      	it	ne
 800de42:	2001      	movne	r0, #1
 800de44:	b002      	add	sp, #8
 800de46:	4770      	bx	lr
 800de48:	4610      	mov	r0, r2
 800de4a:	e7fb      	b.n	800de44 <__ascii_mbtowc+0x16>
 800de4c:	f06f 0001 	mvn.w	r0, #1
 800de50:	e7f8      	b.n	800de44 <__ascii_mbtowc+0x16>

0800de52 <_realloc_r>:
 800de52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de56:	4607      	mov	r7, r0
 800de58:	4614      	mov	r4, r2
 800de5a:	460d      	mov	r5, r1
 800de5c:	b921      	cbnz	r1, 800de68 <_realloc_r+0x16>
 800de5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de62:	4611      	mov	r1, r2
 800de64:	f7fb bf32 	b.w	8009ccc <_malloc_r>
 800de68:	b92a      	cbnz	r2, 800de76 <_realloc_r+0x24>
 800de6a:	f7fd fed5 	bl	800bc18 <_free_r>
 800de6e:	4625      	mov	r5, r4
 800de70:	4628      	mov	r0, r5
 800de72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de76:	f000 f840 	bl	800defa <_malloc_usable_size_r>
 800de7a:	4284      	cmp	r4, r0
 800de7c:	4606      	mov	r6, r0
 800de7e:	d802      	bhi.n	800de86 <_realloc_r+0x34>
 800de80:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800de84:	d8f4      	bhi.n	800de70 <_realloc_r+0x1e>
 800de86:	4621      	mov	r1, r4
 800de88:	4638      	mov	r0, r7
 800de8a:	f7fb ff1f 	bl	8009ccc <_malloc_r>
 800de8e:	4680      	mov	r8, r0
 800de90:	b908      	cbnz	r0, 800de96 <_realloc_r+0x44>
 800de92:	4645      	mov	r5, r8
 800de94:	e7ec      	b.n	800de70 <_realloc_r+0x1e>
 800de96:	42b4      	cmp	r4, r6
 800de98:	4622      	mov	r2, r4
 800de9a:	4629      	mov	r1, r5
 800de9c:	bf28      	it	cs
 800de9e:	4632      	movcs	r2, r6
 800dea0:	f7fd f84d 	bl	800af3e <memcpy>
 800dea4:	4629      	mov	r1, r5
 800dea6:	4638      	mov	r0, r7
 800dea8:	f7fd feb6 	bl	800bc18 <_free_r>
 800deac:	e7f1      	b.n	800de92 <_realloc_r+0x40>

0800deae <__ascii_wctomb>:
 800deae:	4603      	mov	r3, r0
 800deb0:	4608      	mov	r0, r1
 800deb2:	b141      	cbz	r1, 800dec6 <__ascii_wctomb+0x18>
 800deb4:	2aff      	cmp	r2, #255	@ 0xff
 800deb6:	d904      	bls.n	800dec2 <__ascii_wctomb+0x14>
 800deb8:	228a      	movs	r2, #138	@ 0x8a
 800deba:	601a      	str	r2, [r3, #0]
 800debc:	f04f 30ff 	mov.w	r0, #4294967295
 800dec0:	4770      	bx	lr
 800dec2:	700a      	strb	r2, [r1, #0]
 800dec4:	2001      	movs	r0, #1
 800dec6:	4770      	bx	lr

0800dec8 <fiprintf>:
 800dec8:	b40e      	push	{r1, r2, r3}
 800deca:	b503      	push	{r0, r1, lr}
 800decc:	4601      	mov	r1, r0
 800dece:	ab03      	add	r3, sp, #12
 800ded0:	4805      	ldr	r0, [pc, #20]	@ (800dee8 <fiprintf+0x20>)
 800ded2:	f853 2b04 	ldr.w	r2, [r3], #4
 800ded6:	6800      	ldr	r0, [r0, #0]
 800ded8:	9301      	str	r3, [sp, #4]
 800deda:	f000 f83f 	bl	800df5c <_vfiprintf_r>
 800dede:	b002      	add	sp, #8
 800dee0:	f85d eb04 	ldr.w	lr, [sp], #4
 800dee4:	b003      	add	sp, #12
 800dee6:	4770      	bx	lr
 800dee8:	20000090 	.word	0x20000090

0800deec <abort>:
 800deec:	b508      	push	{r3, lr}
 800deee:	2006      	movs	r0, #6
 800def0:	f000 fa08 	bl	800e304 <raise>
 800def4:	2001      	movs	r0, #1
 800def6:	f7f6 f919 	bl	800412c <_exit>

0800defa <_malloc_usable_size_r>:
 800defa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800defe:	1f18      	subs	r0, r3, #4
 800df00:	2b00      	cmp	r3, #0
 800df02:	bfbc      	itt	lt
 800df04:	580b      	ldrlt	r3, [r1, r0]
 800df06:	18c0      	addlt	r0, r0, r3
 800df08:	4770      	bx	lr

0800df0a <__sfputc_r>:
 800df0a:	6893      	ldr	r3, [r2, #8]
 800df0c:	3b01      	subs	r3, #1
 800df0e:	2b00      	cmp	r3, #0
 800df10:	b410      	push	{r4}
 800df12:	6093      	str	r3, [r2, #8]
 800df14:	da08      	bge.n	800df28 <__sfputc_r+0x1e>
 800df16:	6994      	ldr	r4, [r2, #24]
 800df18:	42a3      	cmp	r3, r4
 800df1a:	db01      	blt.n	800df20 <__sfputc_r+0x16>
 800df1c:	290a      	cmp	r1, #10
 800df1e:	d103      	bne.n	800df28 <__sfputc_r+0x1e>
 800df20:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df24:	f000 b932 	b.w	800e18c <__swbuf_r>
 800df28:	6813      	ldr	r3, [r2, #0]
 800df2a:	1c58      	adds	r0, r3, #1
 800df2c:	6010      	str	r0, [r2, #0]
 800df2e:	7019      	strb	r1, [r3, #0]
 800df30:	4608      	mov	r0, r1
 800df32:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df36:	4770      	bx	lr

0800df38 <__sfputs_r>:
 800df38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df3a:	4606      	mov	r6, r0
 800df3c:	460f      	mov	r7, r1
 800df3e:	4614      	mov	r4, r2
 800df40:	18d5      	adds	r5, r2, r3
 800df42:	42ac      	cmp	r4, r5
 800df44:	d101      	bne.n	800df4a <__sfputs_r+0x12>
 800df46:	2000      	movs	r0, #0
 800df48:	e007      	b.n	800df5a <__sfputs_r+0x22>
 800df4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df4e:	463a      	mov	r2, r7
 800df50:	4630      	mov	r0, r6
 800df52:	f7ff ffda 	bl	800df0a <__sfputc_r>
 800df56:	1c43      	adds	r3, r0, #1
 800df58:	d1f3      	bne.n	800df42 <__sfputs_r+0xa>
 800df5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800df5c <_vfiprintf_r>:
 800df5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df60:	460d      	mov	r5, r1
 800df62:	b09d      	sub	sp, #116	@ 0x74
 800df64:	4614      	mov	r4, r2
 800df66:	4698      	mov	r8, r3
 800df68:	4606      	mov	r6, r0
 800df6a:	b118      	cbz	r0, 800df74 <_vfiprintf_r+0x18>
 800df6c:	6a03      	ldr	r3, [r0, #32]
 800df6e:	b90b      	cbnz	r3, 800df74 <_vfiprintf_r+0x18>
 800df70:	f7fc fe28 	bl	800abc4 <__sinit>
 800df74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800df76:	07d9      	lsls	r1, r3, #31
 800df78:	d405      	bmi.n	800df86 <_vfiprintf_r+0x2a>
 800df7a:	89ab      	ldrh	r3, [r5, #12]
 800df7c:	059a      	lsls	r2, r3, #22
 800df7e:	d402      	bmi.n	800df86 <_vfiprintf_r+0x2a>
 800df80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800df82:	f7fc ffda 	bl	800af3a <__retarget_lock_acquire_recursive>
 800df86:	89ab      	ldrh	r3, [r5, #12]
 800df88:	071b      	lsls	r3, r3, #28
 800df8a:	d501      	bpl.n	800df90 <_vfiprintf_r+0x34>
 800df8c:	692b      	ldr	r3, [r5, #16]
 800df8e:	b99b      	cbnz	r3, 800dfb8 <_vfiprintf_r+0x5c>
 800df90:	4629      	mov	r1, r5
 800df92:	4630      	mov	r0, r6
 800df94:	f000 f938 	bl	800e208 <__swsetup_r>
 800df98:	b170      	cbz	r0, 800dfb8 <_vfiprintf_r+0x5c>
 800df9a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800df9c:	07dc      	lsls	r4, r3, #31
 800df9e:	d504      	bpl.n	800dfaa <_vfiprintf_r+0x4e>
 800dfa0:	f04f 30ff 	mov.w	r0, #4294967295
 800dfa4:	b01d      	add	sp, #116	@ 0x74
 800dfa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfaa:	89ab      	ldrh	r3, [r5, #12]
 800dfac:	0598      	lsls	r0, r3, #22
 800dfae:	d4f7      	bmi.n	800dfa0 <_vfiprintf_r+0x44>
 800dfb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dfb2:	f7fc ffc3 	bl	800af3c <__retarget_lock_release_recursive>
 800dfb6:	e7f3      	b.n	800dfa0 <_vfiprintf_r+0x44>
 800dfb8:	2300      	movs	r3, #0
 800dfba:	9309      	str	r3, [sp, #36]	@ 0x24
 800dfbc:	2320      	movs	r3, #32
 800dfbe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dfc2:	f8cd 800c 	str.w	r8, [sp, #12]
 800dfc6:	2330      	movs	r3, #48	@ 0x30
 800dfc8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e178 <_vfiprintf_r+0x21c>
 800dfcc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dfd0:	f04f 0901 	mov.w	r9, #1
 800dfd4:	4623      	mov	r3, r4
 800dfd6:	469a      	mov	sl, r3
 800dfd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dfdc:	b10a      	cbz	r2, 800dfe2 <_vfiprintf_r+0x86>
 800dfde:	2a25      	cmp	r2, #37	@ 0x25
 800dfe0:	d1f9      	bne.n	800dfd6 <_vfiprintf_r+0x7a>
 800dfe2:	ebba 0b04 	subs.w	fp, sl, r4
 800dfe6:	d00b      	beq.n	800e000 <_vfiprintf_r+0xa4>
 800dfe8:	465b      	mov	r3, fp
 800dfea:	4622      	mov	r2, r4
 800dfec:	4629      	mov	r1, r5
 800dfee:	4630      	mov	r0, r6
 800dff0:	f7ff ffa2 	bl	800df38 <__sfputs_r>
 800dff4:	3001      	adds	r0, #1
 800dff6:	f000 80a7 	beq.w	800e148 <_vfiprintf_r+0x1ec>
 800dffa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dffc:	445a      	add	r2, fp
 800dffe:	9209      	str	r2, [sp, #36]	@ 0x24
 800e000:	f89a 3000 	ldrb.w	r3, [sl]
 800e004:	2b00      	cmp	r3, #0
 800e006:	f000 809f 	beq.w	800e148 <_vfiprintf_r+0x1ec>
 800e00a:	2300      	movs	r3, #0
 800e00c:	f04f 32ff 	mov.w	r2, #4294967295
 800e010:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e014:	f10a 0a01 	add.w	sl, sl, #1
 800e018:	9304      	str	r3, [sp, #16]
 800e01a:	9307      	str	r3, [sp, #28]
 800e01c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e020:	931a      	str	r3, [sp, #104]	@ 0x68
 800e022:	4654      	mov	r4, sl
 800e024:	2205      	movs	r2, #5
 800e026:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e02a:	4853      	ldr	r0, [pc, #332]	@ (800e178 <_vfiprintf_r+0x21c>)
 800e02c:	f7f2 f8d0 	bl	80001d0 <memchr>
 800e030:	9a04      	ldr	r2, [sp, #16]
 800e032:	b9d8      	cbnz	r0, 800e06c <_vfiprintf_r+0x110>
 800e034:	06d1      	lsls	r1, r2, #27
 800e036:	bf44      	itt	mi
 800e038:	2320      	movmi	r3, #32
 800e03a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e03e:	0713      	lsls	r3, r2, #28
 800e040:	bf44      	itt	mi
 800e042:	232b      	movmi	r3, #43	@ 0x2b
 800e044:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e048:	f89a 3000 	ldrb.w	r3, [sl]
 800e04c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e04e:	d015      	beq.n	800e07c <_vfiprintf_r+0x120>
 800e050:	9a07      	ldr	r2, [sp, #28]
 800e052:	4654      	mov	r4, sl
 800e054:	2000      	movs	r0, #0
 800e056:	f04f 0c0a 	mov.w	ip, #10
 800e05a:	4621      	mov	r1, r4
 800e05c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e060:	3b30      	subs	r3, #48	@ 0x30
 800e062:	2b09      	cmp	r3, #9
 800e064:	d94b      	bls.n	800e0fe <_vfiprintf_r+0x1a2>
 800e066:	b1b0      	cbz	r0, 800e096 <_vfiprintf_r+0x13a>
 800e068:	9207      	str	r2, [sp, #28]
 800e06a:	e014      	b.n	800e096 <_vfiprintf_r+0x13a>
 800e06c:	eba0 0308 	sub.w	r3, r0, r8
 800e070:	fa09 f303 	lsl.w	r3, r9, r3
 800e074:	4313      	orrs	r3, r2
 800e076:	9304      	str	r3, [sp, #16]
 800e078:	46a2      	mov	sl, r4
 800e07a:	e7d2      	b.n	800e022 <_vfiprintf_r+0xc6>
 800e07c:	9b03      	ldr	r3, [sp, #12]
 800e07e:	1d19      	adds	r1, r3, #4
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	9103      	str	r1, [sp, #12]
 800e084:	2b00      	cmp	r3, #0
 800e086:	bfbb      	ittet	lt
 800e088:	425b      	neglt	r3, r3
 800e08a:	f042 0202 	orrlt.w	r2, r2, #2
 800e08e:	9307      	strge	r3, [sp, #28]
 800e090:	9307      	strlt	r3, [sp, #28]
 800e092:	bfb8      	it	lt
 800e094:	9204      	strlt	r2, [sp, #16]
 800e096:	7823      	ldrb	r3, [r4, #0]
 800e098:	2b2e      	cmp	r3, #46	@ 0x2e
 800e09a:	d10a      	bne.n	800e0b2 <_vfiprintf_r+0x156>
 800e09c:	7863      	ldrb	r3, [r4, #1]
 800e09e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e0a0:	d132      	bne.n	800e108 <_vfiprintf_r+0x1ac>
 800e0a2:	9b03      	ldr	r3, [sp, #12]
 800e0a4:	1d1a      	adds	r2, r3, #4
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	9203      	str	r2, [sp, #12]
 800e0aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e0ae:	3402      	adds	r4, #2
 800e0b0:	9305      	str	r3, [sp, #20]
 800e0b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e188 <_vfiprintf_r+0x22c>
 800e0b6:	7821      	ldrb	r1, [r4, #0]
 800e0b8:	2203      	movs	r2, #3
 800e0ba:	4650      	mov	r0, sl
 800e0bc:	f7f2 f888 	bl	80001d0 <memchr>
 800e0c0:	b138      	cbz	r0, 800e0d2 <_vfiprintf_r+0x176>
 800e0c2:	9b04      	ldr	r3, [sp, #16]
 800e0c4:	eba0 000a 	sub.w	r0, r0, sl
 800e0c8:	2240      	movs	r2, #64	@ 0x40
 800e0ca:	4082      	lsls	r2, r0
 800e0cc:	4313      	orrs	r3, r2
 800e0ce:	3401      	adds	r4, #1
 800e0d0:	9304      	str	r3, [sp, #16]
 800e0d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0d6:	4829      	ldr	r0, [pc, #164]	@ (800e17c <_vfiprintf_r+0x220>)
 800e0d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e0dc:	2206      	movs	r2, #6
 800e0de:	f7f2 f877 	bl	80001d0 <memchr>
 800e0e2:	2800      	cmp	r0, #0
 800e0e4:	d03f      	beq.n	800e166 <_vfiprintf_r+0x20a>
 800e0e6:	4b26      	ldr	r3, [pc, #152]	@ (800e180 <_vfiprintf_r+0x224>)
 800e0e8:	bb1b      	cbnz	r3, 800e132 <_vfiprintf_r+0x1d6>
 800e0ea:	9b03      	ldr	r3, [sp, #12]
 800e0ec:	3307      	adds	r3, #7
 800e0ee:	f023 0307 	bic.w	r3, r3, #7
 800e0f2:	3308      	adds	r3, #8
 800e0f4:	9303      	str	r3, [sp, #12]
 800e0f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0f8:	443b      	add	r3, r7
 800e0fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800e0fc:	e76a      	b.n	800dfd4 <_vfiprintf_r+0x78>
 800e0fe:	fb0c 3202 	mla	r2, ip, r2, r3
 800e102:	460c      	mov	r4, r1
 800e104:	2001      	movs	r0, #1
 800e106:	e7a8      	b.n	800e05a <_vfiprintf_r+0xfe>
 800e108:	2300      	movs	r3, #0
 800e10a:	3401      	adds	r4, #1
 800e10c:	9305      	str	r3, [sp, #20]
 800e10e:	4619      	mov	r1, r3
 800e110:	f04f 0c0a 	mov.w	ip, #10
 800e114:	4620      	mov	r0, r4
 800e116:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e11a:	3a30      	subs	r2, #48	@ 0x30
 800e11c:	2a09      	cmp	r2, #9
 800e11e:	d903      	bls.n	800e128 <_vfiprintf_r+0x1cc>
 800e120:	2b00      	cmp	r3, #0
 800e122:	d0c6      	beq.n	800e0b2 <_vfiprintf_r+0x156>
 800e124:	9105      	str	r1, [sp, #20]
 800e126:	e7c4      	b.n	800e0b2 <_vfiprintf_r+0x156>
 800e128:	fb0c 2101 	mla	r1, ip, r1, r2
 800e12c:	4604      	mov	r4, r0
 800e12e:	2301      	movs	r3, #1
 800e130:	e7f0      	b.n	800e114 <_vfiprintf_r+0x1b8>
 800e132:	ab03      	add	r3, sp, #12
 800e134:	9300      	str	r3, [sp, #0]
 800e136:	462a      	mov	r2, r5
 800e138:	4b12      	ldr	r3, [pc, #72]	@ (800e184 <_vfiprintf_r+0x228>)
 800e13a:	a904      	add	r1, sp, #16
 800e13c:	4630      	mov	r0, r6
 800e13e:	f7fb fef1 	bl	8009f24 <_printf_float>
 800e142:	4607      	mov	r7, r0
 800e144:	1c78      	adds	r0, r7, #1
 800e146:	d1d6      	bne.n	800e0f6 <_vfiprintf_r+0x19a>
 800e148:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e14a:	07d9      	lsls	r1, r3, #31
 800e14c:	d405      	bmi.n	800e15a <_vfiprintf_r+0x1fe>
 800e14e:	89ab      	ldrh	r3, [r5, #12]
 800e150:	059a      	lsls	r2, r3, #22
 800e152:	d402      	bmi.n	800e15a <_vfiprintf_r+0x1fe>
 800e154:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e156:	f7fc fef1 	bl	800af3c <__retarget_lock_release_recursive>
 800e15a:	89ab      	ldrh	r3, [r5, #12]
 800e15c:	065b      	lsls	r3, r3, #25
 800e15e:	f53f af1f 	bmi.w	800dfa0 <_vfiprintf_r+0x44>
 800e162:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e164:	e71e      	b.n	800dfa4 <_vfiprintf_r+0x48>
 800e166:	ab03      	add	r3, sp, #12
 800e168:	9300      	str	r3, [sp, #0]
 800e16a:	462a      	mov	r2, r5
 800e16c:	4b05      	ldr	r3, [pc, #20]	@ (800e184 <_vfiprintf_r+0x228>)
 800e16e:	a904      	add	r1, sp, #16
 800e170:	4630      	mov	r0, r6
 800e172:	f7fc f96f 	bl	800a454 <_printf_i>
 800e176:	e7e4      	b.n	800e142 <_vfiprintf_r+0x1e6>
 800e178:	0800ec1d 	.word	0x0800ec1d
 800e17c:	0800ec27 	.word	0x0800ec27
 800e180:	08009f25 	.word	0x08009f25
 800e184:	0800df39 	.word	0x0800df39
 800e188:	0800ec23 	.word	0x0800ec23

0800e18c <__swbuf_r>:
 800e18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e18e:	460e      	mov	r6, r1
 800e190:	4614      	mov	r4, r2
 800e192:	4605      	mov	r5, r0
 800e194:	b118      	cbz	r0, 800e19e <__swbuf_r+0x12>
 800e196:	6a03      	ldr	r3, [r0, #32]
 800e198:	b90b      	cbnz	r3, 800e19e <__swbuf_r+0x12>
 800e19a:	f7fc fd13 	bl	800abc4 <__sinit>
 800e19e:	69a3      	ldr	r3, [r4, #24]
 800e1a0:	60a3      	str	r3, [r4, #8]
 800e1a2:	89a3      	ldrh	r3, [r4, #12]
 800e1a4:	071a      	lsls	r2, r3, #28
 800e1a6:	d501      	bpl.n	800e1ac <__swbuf_r+0x20>
 800e1a8:	6923      	ldr	r3, [r4, #16]
 800e1aa:	b943      	cbnz	r3, 800e1be <__swbuf_r+0x32>
 800e1ac:	4621      	mov	r1, r4
 800e1ae:	4628      	mov	r0, r5
 800e1b0:	f000 f82a 	bl	800e208 <__swsetup_r>
 800e1b4:	b118      	cbz	r0, 800e1be <__swbuf_r+0x32>
 800e1b6:	f04f 37ff 	mov.w	r7, #4294967295
 800e1ba:	4638      	mov	r0, r7
 800e1bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1be:	6823      	ldr	r3, [r4, #0]
 800e1c0:	6922      	ldr	r2, [r4, #16]
 800e1c2:	1a98      	subs	r0, r3, r2
 800e1c4:	6963      	ldr	r3, [r4, #20]
 800e1c6:	b2f6      	uxtb	r6, r6
 800e1c8:	4283      	cmp	r3, r0
 800e1ca:	4637      	mov	r7, r6
 800e1cc:	dc05      	bgt.n	800e1da <__swbuf_r+0x4e>
 800e1ce:	4621      	mov	r1, r4
 800e1d0:	4628      	mov	r0, r5
 800e1d2:	f7ff fa77 	bl	800d6c4 <_fflush_r>
 800e1d6:	2800      	cmp	r0, #0
 800e1d8:	d1ed      	bne.n	800e1b6 <__swbuf_r+0x2a>
 800e1da:	68a3      	ldr	r3, [r4, #8]
 800e1dc:	3b01      	subs	r3, #1
 800e1de:	60a3      	str	r3, [r4, #8]
 800e1e0:	6823      	ldr	r3, [r4, #0]
 800e1e2:	1c5a      	adds	r2, r3, #1
 800e1e4:	6022      	str	r2, [r4, #0]
 800e1e6:	701e      	strb	r6, [r3, #0]
 800e1e8:	6962      	ldr	r2, [r4, #20]
 800e1ea:	1c43      	adds	r3, r0, #1
 800e1ec:	429a      	cmp	r2, r3
 800e1ee:	d004      	beq.n	800e1fa <__swbuf_r+0x6e>
 800e1f0:	89a3      	ldrh	r3, [r4, #12]
 800e1f2:	07db      	lsls	r3, r3, #31
 800e1f4:	d5e1      	bpl.n	800e1ba <__swbuf_r+0x2e>
 800e1f6:	2e0a      	cmp	r6, #10
 800e1f8:	d1df      	bne.n	800e1ba <__swbuf_r+0x2e>
 800e1fa:	4621      	mov	r1, r4
 800e1fc:	4628      	mov	r0, r5
 800e1fe:	f7ff fa61 	bl	800d6c4 <_fflush_r>
 800e202:	2800      	cmp	r0, #0
 800e204:	d0d9      	beq.n	800e1ba <__swbuf_r+0x2e>
 800e206:	e7d6      	b.n	800e1b6 <__swbuf_r+0x2a>

0800e208 <__swsetup_r>:
 800e208:	b538      	push	{r3, r4, r5, lr}
 800e20a:	4b29      	ldr	r3, [pc, #164]	@ (800e2b0 <__swsetup_r+0xa8>)
 800e20c:	4605      	mov	r5, r0
 800e20e:	6818      	ldr	r0, [r3, #0]
 800e210:	460c      	mov	r4, r1
 800e212:	b118      	cbz	r0, 800e21c <__swsetup_r+0x14>
 800e214:	6a03      	ldr	r3, [r0, #32]
 800e216:	b90b      	cbnz	r3, 800e21c <__swsetup_r+0x14>
 800e218:	f7fc fcd4 	bl	800abc4 <__sinit>
 800e21c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e220:	0719      	lsls	r1, r3, #28
 800e222:	d422      	bmi.n	800e26a <__swsetup_r+0x62>
 800e224:	06da      	lsls	r2, r3, #27
 800e226:	d407      	bmi.n	800e238 <__swsetup_r+0x30>
 800e228:	2209      	movs	r2, #9
 800e22a:	602a      	str	r2, [r5, #0]
 800e22c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e230:	81a3      	strh	r3, [r4, #12]
 800e232:	f04f 30ff 	mov.w	r0, #4294967295
 800e236:	e033      	b.n	800e2a0 <__swsetup_r+0x98>
 800e238:	0758      	lsls	r0, r3, #29
 800e23a:	d512      	bpl.n	800e262 <__swsetup_r+0x5a>
 800e23c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e23e:	b141      	cbz	r1, 800e252 <__swsetup_r+0x4a>
 800e240:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e244:	4299      	cmp	r1, r3
 800e246:	d002      	beq.n	800e24e <__swsetup_r+0x46>
 800e248:	4628      	mov	r0, r5
 800e24a:	f7fd fce5 	bl	800bc18 <_free_r>
 800e24e:	2300      	movs	r3, #0
 800e250:	6363      	str	r3, [r4, #52]	@ 0x34
 800e252:	89a3      	ldrh	r3, [r4, #12]
 800e254:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e258:	81a3      	strh	r3, [r4, #12]
 800e25a:	2300      	movs	r3, #0
 800e25c:	6063      	str	r3, [r4, #4]
 800e25e:	6923      	ldr	r3, [r4, #16]
 800e260:	6023      	str	r3, [r4, #0]
 800e262:	89a3      	ldrh	r3, [r4, #12]
 800e264:	f043 0308 	orr.w	r3, r3, #8
 800e268:	81a3      	strh	r3, [r4, #12]
 800e26a:	6923      	ldr	r3, [r4, #16]
 800e26c:	b94b      	cbnz	r3, 800e282 <__swsetup_r+0x7a>
 800e26e:	89a3      	ldrh	r3, [r4, #12]
 800e270:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e274:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e278:	d003      	beq.n	800e282 <__swsetup_r+0x7a>
 800e27a:	4621      	mov	r1, r4
 800e27c:	4628      	mov	r0, r5
 800e27e:	f000 f883 	bl	800e388 <__smakebuf_r>
 800e282:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e286:	f013 0201 	ands.w	r2, r3, #1
 800e28a:	d00a      	beq.n	800e2a2 <__swsetup_r+0x9a>
 800e28c:	2200      	movs	r2, #0
 800e28e:	60a2      	str	r2, [r4, #8]
 800e290:	6962      	ldr	r2, [r4, #20]
 800e292:	4252      	negs	r2, r2
 800e294:	61a2      	str	r2, [r4, #24]
 800e296:	6922      	ldr	r2, [r4, #16]
 800e298:	b942      	cbnz	r2, 800e2ac <__swsetup_r+0xa4>
 800e29a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e29e:	d1c5      	bne.n	800e22c <__swsetup_r+0x24>
 800e2a0:	bd38      	pop	{r3, r4, r5, pc}
 800e2a2:	0799      	lsls	r1, r3, #30
 800e2a4:	bf58      	it	pl
 800e2a6:	6962      	ldrpl	r2, [r4, #20]
 800e2a8:	60a2      	str	r2, [r4, #8]
 800e2aa:	e7f4      	b.n	800e296 <__swsetup_r+0x8e>
 800e2ac:	2000      	movs	r0, #0
 800e2ae:	e7f7      	b.n	800e2a0 <__swsetup_r+0x98>
 800e2b0:	20000090 	.word	0x20000090

0800e2b4 <_raise_r>:
 800e2b4:	291f      	cmp	r1, #31
 800e2b6:	b538      	push	{r3, r4, r5, lr}
 800e2b8:	4605      	mov	r5, r0
 800e2ba:	460c      	mov	r4, r1
 800e2bc:	d904      	bls.n	800e2c8 <_raise_r+0x14>
 800e2be:	2316      	movs	r3, #22
 800e2c0:	6003      	str	r3, [r0, #0]
 800e2c2:	f04f 30ff 	mov.w	r0, #4294967295
 800e2c6:	bd38      	pop	{r3, r4, r5, pc}
 800e2c8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e2ca:	b112      	cbz	r2, 800e2d2 <_raise_r+0x1e>
 800e2cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e2d0:	b94b      	cbnz	r3, 800e2e6 <_raise_r+0x32>
 800e2d2:	4628      	mov	r0, r5
 800e2d4:	f000 f830 	bl	800e338 <_getpid_r>
 800e2d8:	4622      	mov	r2, r4
 800e2da:	4601      	mov	r1, r0
 800e2dc:	4628      	mov	r0, r5
 800e2de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e2e2:	f000 b817 	b.w	800e314 <_kill_r>
 800e2e6:	2b01      	cmp	r3, #1
 800e2e8:	d00a      	beq.n	800e300 <_raise_r+0x4c>
 800e2ea:	1c59      	adds	r1, r3, #1
 800e2ec:	d103      	bne.n	800e2f6 <_raise_r+0x42>
 800e2ee:	2316      	movs	r3, #22
 800e2f0:	6003      	str	r3, [r0, #0]
 800e2f2:	2001      	movs	r0, #1
 800e2f4:	e7e7      	b.n	800e2c6 <_raise_r+0x12>
 800e2f6:	2100      	movs	r1, #0
 800e2f8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e2fc:	4620      	mov	r0, r4
 800e2fe:	4798      	blx	r3
 800e300:	2000      	movs	r0, #0
 800e302:	e7e0      	b.n	800e2c6 <_raise_r+0x12>

0800e304 <raise>:
 800e304:	4b02      	ldr	r3, [pc, #8]	@ (800e310 <raise+0xc>)
 800e306:	4601      	mov	r1, r0
 800e308:	6818      	ldr	r0, [r3, #0]
 800e30a:	f7ff bfd3 	b.w	800e2b4 <_raise_r>
 800e30e:	bf00      	nop
 800e310:	20000090 	.word	0x20000090

0800e314 <_kill_r>:
 800e314:	b538      	push	{r3, r4, r5, lr}
 800e316:	4d07      	ldr	r5, [pc, #28]	@ (800e334 <_kill_r+0x20>)
 800e318:	2300      	movs	r3, #0
 800e31a:	4604      	mov	r4, r0
 800e31c:	4608      	mov	r0, r1
 800e31e:	4611      	mov	r1, r2
 800e320:	602b      	str	r3, [r5, #0]
 800e322:	f7f5 fef3 	bl	800410c <_kill>
 800e326:	1c43      	adds	r3, r0, #1
 800e328:	d102      	bne.n	800e330 <_kill_r+0x1c>
 800e32a:	682b      	ldr	r3, [r5, #0]
 800e32c:	b103      	cbz	r3, 800e330 <_kill_r+0x1c>
 800e32e:	6023      	str	r3, [r4, #0]
 800e330:	bd38      	pop	{r3, r4, r5, pc}
 800e332:	bf00      	nop
 800e334:	2000dfbc 	.word	0x2000dfbc

0800e338 <_getpid_r>:
 800e338:	f7f5 bee0 	b.w	80040fc <_getpid>

0800e33c <__swhatbuf_r>:
 800e33c:	b570      	push	{r4, r5, r6, lr}
 800e33e:	460c      	mov	r4, r1
 800e340:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e344:	2900      	cmp	r1, #0
 800e346:	b096      	sub	sp, #88	@ 0x58
 800e348:	4615      	mov	r5, r2
 800e34a:	461e      	mov	r6, r3
 800e34c:	da0d      	bge.n	800e36a <__swhatbuf_r+0x2e>
 800e34e:	89a3      	ldrh	r3, [r4, #12]
 800e350:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e354:	f04f 0100 	mov.w	r1, #0
 800e358:	bf14      	ite	ne
 800e35a:	2340      	movne	r3, #64	@ 0x40
 800e35c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e360:	2000      	movs	r0, #0
 800e362:	6031      	str	r1, [r6, #0]
 800e364:	602b      	str	r3, [r5, #0]
 800e366:	b016      	add	sp, #88	@ 0x58
 800e368:	bd70      	pop	{r4, r5, r6, pc}
 800e36a:	466a      	mov	r2, sp
 800e36c:	f000 f848 	bl	800e400 <_fstat_r>
 800e370:	2800      	cmp	r0, #0
 800e372:	dbec      	blt.n	800e34e <__swhatbuf_r+0x12>
 800e374:	9901      	ldr	r1, [sp, #4]
 800e376:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e37a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e37e:	4259      	negs	r1, r3
 800e380:	4159      	adcs	r1, r3
 800e382:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e386:	e7eb      	b.n	800e360 <__swhatbuf_r+0x24>

0800e388 <__smakebuf_r>:
 800e388:	898b      	ldrh	r3, [r1, #12]
 800e38a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e38c:	079d      	lsls	r5, r3, #30
 800e38e:	4606      	mov	r6, r0
 800e390:	460c      	mov	r4, r1
 800e392:	d507      	bpl.n	800e3a4 <__smakebuf_r+0x1c>
 800e394:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e398:	6023      	str	r3, [r4, #0]
 800e39a:	6123      	str	r3, [r4, #16]
 800e39c:	2301      	movs	r3, #1
 800e39e:	6163      	str	r3, [r4, #20]
 800e3a0:	b003      	add	sp, #12
 800e3a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3a4:	ab01      	add	r3, sp, #4
 800e3a6:	466a      	mov	r2, sp
 800e3a8:	f7ff ffc8 	bl	800e33c <__swhatbuf_r>
 800e3ac:	9f00      	ldr	r7, [sp, #0]
 800e3ae:	4605      	mov	r5, r0
 800e3b0:	4639      	mov	r1, r7
 800e3b2:	4630      	mov	r0, r6
 800e3b4:	f7fb fc8a 	bl	8009ccc <_malloc_r>
 800e3b8:	b948      	cbnz	r0, 800e3ce <__smakebuf_r+0x46>
 800e3ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e3be:	059a      	lsls	r2, r3, #22
 800e3c0:	d4ee      	bmi.n	800e3a0 <__smakebuf_r+0x18>
 800e3c2:	f023 0303 	bic.w	r3, r3, #3
 800e3c6:	f043 0302 	orr.w	r3, r3, #2
 800e3ca:	81a3      	strh	r3, [r4, #12]
 800e3cc:	e7e2      	b.n	800e394 <__smakebuf_r+0xc>
 800e3ce:	89a3      	ldrh	r3, [r4, #12]
 800e3d0:	6020      	str	r0, [r4, #0]
 800e3d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e3d6:	81a3      	strh	r3, [r4, #12]
 800e3d8:	9b01      	ldr	r3, [sp, #4]
 800e3da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e3de:	b15b      	cbz	r3, 800e3f8 <__smakebuf_r+0x70>
 800e3e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e3e4:	4630      	mov	r0, r6
 800e3e6:	f000 f81d 	bl	800e424 <_isatty_r>
 800e3ea:	b128      	cbz	r0, 800e3f8 <__smakebuf_r+0x70>
 800e3ec:	89a3      	ldrh	r3, [r4, #12]
 800e3ee:	f023 0303 	bic.w	r3, r3, #3
 800e3f2:	f043 0301 	orr.w	r3, r3, #1
 800e3f6:	81a3      	strh	r3, [r4, #12]
 800e3f8:	89a3      	ldrh	r3, [r4, #12]
 800e3fa:	431d      	orrs	r5, r3
 800e3fc:	81a5      	strh	r5, [r4, #12]
 800e3fe:	e7cf      	b.n	800e3a0 <__smakebuf_r+0x18>

0800e400 <_fstat_r>:
 800e400:	b538      	push	{r3, r4, r5, lr}
 800e402:	4d07      	ldr	r5, [pc, #28]	@ (800e420 <_fstat_r+0x20>)
 800e404:	2300      	movs	r3, #0
 800e406:	4604      	mov	r4, r0
 800e408:	4608      	mov	r0, r1
 800e40a:	4611      	mov	r1, r2
 800e40c:	602b      	str	r3, [r5, #0]
 800e40e:	f7f5 fedd 	bl	80041cc <_fstat>
 800e412:	1c43      	adds	r3, r0, #1
 800e414:	d102      	bne.n	800e41c <_fstat_r+0x1c>
 800e416:	682b      	ldr	r3, [r5, #0]
 800e418:	b103      	cbz	r3, 800e41c <_fstat_r+0x1c>
 800e41a:	6023      	str	r3, [r4, #0]
 800e41c:	bd38      	pop	{r3, r4, r5, pc}
 800e41e:	bf00      	nop
 800e420:	2000dfbc 	.word	0x2000dfbc

0800e424 <_isatty_r>:
 800e424:	b538      	push	{r3, r4, r5, lr}
 800e426:	4d06      	ldr	r5, [pc, #24]	@ (800e440 <_isatty_r+0x1c>)
 800e428:	2300      	movs	r3, #0
 800e42a:	4604      	mov	r4, r0
 800e42c:	4608      	mov	r0, r1
 800e42e:	602b      	str	r3, [r5, #0]
 800e430:	f7f5 fedc 	bl	80041ec <_isatty>
 800e434:	1c43      	adds	r3, r0, #1
 800e436:	d102      	bne.n	800e43e <_isatty_r+0x1a>
 800e438:	682b      	ldr	r3, [r5, #0]
 800e43a:	b103      	cbz	r3, 800e43e <_isatty_r+0x1a>
 800e43c:	6023      	str	r3, [r4, #0]
 800e43e:	bd38      	pop	{r3, r4, r5, pc}
 800e440:	2000dfbc 	.word	0x2000dfbc

0800e444 <_init>:
 800e444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e446:	bf00      	nop
 800e448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e44a:	bc08      	pop	{r3}
 800e44c:	469e      	mov	lr, r3
 800e44e:	4770      	bx	lr

0800e450 <_fini>:
 800e450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e452:	bf00      	nop
 800e454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e456:	bc08      	pop	{r3}
 800e458:	469e      	mov	lr, r3
 800e45a:	4770      	bx	lr
