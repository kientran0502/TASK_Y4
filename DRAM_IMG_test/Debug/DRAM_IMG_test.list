
DRAM_IMG_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010390  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000474  08010560  08010560  00011560  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080109d4  080109d4  000122d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080109d4  080109d4  000119d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080109dc  080109dc  000122d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080109dc  080109dc  000119dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080109e0  080109e0  000119e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d8  20000000  080109e4  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000fa90  200002d8  08010cbc  000122d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000fd68  08010cbc  00012d68  2**0
                  ALLOC
 11 .sdram        00800000  c0000000  c0000000  00013000  2**2
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000122d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000271cc  00000000  00000000  00012308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000063d0  00000000  00000000  000394d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002200  00000000  00000000  0003f8a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000019c8  00000000  00000000  00041aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002de85  00000000  00000000  00043470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002ad42  00000000  00000000  000712f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00110265  00000000  00000000  0009c037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001ac29c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009ccc  00000000  00000000  001ac2e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000047  00000000  00000000  001b5fac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002d8 	.word	0x200002d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08010548 	.word	0x08010548

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200002dc 	.word	0x200002dc
 800020c:	08010548 	.word	0x08010548

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b988 	b.w	8000f30 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	468e      	mov	lr, r1
 8000c40:	4604      	mov	r4, r0
 8000c42:	4688      	mov	r8, r1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d14a      	bne.n	8000cde <__udivmoddi4+0xa6>
 8000c48:	428a      	cmp	r2, r1
 8000c4a:	4617      	mov	r7, r2
 8000c4c:	d962      	bls.n	8000d14 <__udivmoddi4+0xdc>
 8000c4e:	fab2 f682 	clz	r6, r2
 8000c52:	b14e      	cbz	r6, 8000c68 <__udivmoddi4+0x30>
 8000c54:	f1c6 0320 	rsb	r3, r6, #32
 8000c58:	fa01 f806 	lsl.w	r8, r1, r6
 8000c5c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c60:	40b7      	lsls	r7, r6
 8000c62:	ea43 0808 	orr.w	r8, r3, r8
 8000c66:	40b4      	lsls	r4, r6
 8000c68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c6c:	fa1f fc87 	uxth.w	ip, r7
 8000c70:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c74:	0c23      	lsrs	r3, r4, #16
 8000c76:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c7a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c7e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0x62>
 8000c86:	18fb      	adds	r3, r7, r3
 8000c88:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c8c:	f080 80ea 	bcs.w	8000e64 <__udivmoddi4+0x22c>
 8000c90:	429a      	cmp	r2, r3
 8000c92:	f240 80e7 	bls.w	8000e64 <__udivmoddi4+0x22c>
 8000c96:	3902      	subs	r1, #2
 8000c98:	443b      	add	r3, r7
 8000c9a:	1a9a      	subs	r2, r3, r2
 8000c9c:	b2a3      	uxth	r3, r4
 8000c9e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ca2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ca6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000caa:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cae:	459c      	cmp	ip, r3
 8000cb0:	d909      	bls.n	8000cc6 <__udivmoddi4+0x8e>
 8000cb2:	18fb      	adds	r3, r7, r3
 8000cb4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cb8:	f080 80d6 	bcs.w	8000e68 <__udivmoddi4+0x230>
 8000cbc:	459c      	cmp	ip, r3
 8000cbe:	f240 80d3 	bls.w	8000e68 <__udivmoddi4+0x230>
 8000cc2:	443b      	add	r3, r7
 8000cc4:	3802      	subs	r0, #2
 8000cc6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cca:	eba3 030c 	sub.w	r3, r3, ip
 8000cce:	2100      	movs	r1, #0
 8000cd0:	b11d      	cbz	r5, 8000cda <__udivmoddi4+0xa2>
 8000cd2:	40f3      	lsrs	r3, r6
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d905      	bls.n	8000cee <__udivmoddi4+0xb6>
 8000ce2:	b10d      	cbz	r5, 8000ce8 <__udivmoddi4+0xb0>
 8000ce4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4608      	mov	r0, r1
 8000cec:	e7f5      	b.n	8000cda <__udivmoddi4+0xa2>
 8000cee:	fab3 f183 	clz	r1, r3
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	d146      	bne.n	8000d84 <__udivmoddi4+0x14c>
 8000cf6:	4573      	cmp	r3, lr
 8000cf8:	d302      	bcc.n	8000d00 <__udivmoddi4+0xc8>
 8000cfa:	4282      	cmp	r2, r0
 8000cfc:	f200 8105 	bhi.w	8000f0a <__udivmoddi4+0x2d2>
 8000d00:	1a84      	subs	r4, r0, r2
 8000d02:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d06:	2001      	movs	r0, #1
 8000d08:	4690      	mov	r8, r2
 8000d0a:	2d00      	cmp	r5, #0
 8000d0c:	d0e5      	beq.n	8000cda <__udivmoddi4+0xa2>
 8000d0e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d12:	e7e2      	b.n	8000cda <__udivmoddi4+0xa2>
 8000d14:	2a00      	cmp	r2, #0
 8000d16:	f000 8090 	beq.w	8000e3a <__udivmoddi4+0x202>
 8000d1a:	fab2 f682 	clz	r6, r2
 8000d1e:	2e00      	cmp	r6, #0
 8000d20:	f040 80a4 	bne.w	8000e6c <__udivmoddi4+0x234>
 8000d24:	1a8a      	subs	r2, r1, r2
 8000d26:	0c03      	lsrs	r3, r0, #16
 8000d28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d2c:	b280      	uxth	r0, r0
 8000d2e:	b2bc      	uxth	r4, r7
 8000d30:	2101      	movs	r1, #1
 8000d32:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d36:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d3e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d907      	bls.n	8000d56 <__udivmoddi4+0x11e>
 8000d46:	18fb      	adds	r3, r7, r3
 8000d48:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d4c:	d202      	bcs.n	8000d54 <__udivmoddi4+0x11c>
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	f200 80e0 	bhi.w	8000f14 <__udivmoddi4+0x2dc>
 8000d54:	46c4      	mov	ip, r8
 8000d56:	1a9b      	subs	r3, r3, r2
 8000d58:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d5c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d60:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d64:	fb02 f404 	mul.w	r4, r2, r4
 8000d68:	429c      	cmp	r4, r3
 8000d6a:	d907      	bls.n	8000d7c <__udivmoddi4+0x144>
 8000d6c:	18fb      	adds	r3, r7, r3
 8000d6e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0x142>
 8000d74:	429c      	cmp	r4, r3
 8000d76:	f200 80ca 	bhi.w	8000f0e <__udivmoddi4+0x2d6>
 8000d7a:	4602      	mov	r2, r0
 8000d7c:	1b1b      	subs	r3, r3, r4
 8000d7e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d82:	e7a5      	b.n	8000cd0 <__udivmoddi4+0x98>
 8000d84:	f1c1 0620 	rsb	r6, r1, #32
 8000d88:	408b      	lsls	r3, r1
 8000d8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d8e:	431f      	orrs	r7, r3
 8000d90:	fa0e f401 	lsl.w	r4, lr, r1
 8000d94:	fa20 f306 	lsr.w	r3, r0, r6
 8000d98:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d9c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000da0:	4323      	orrs	r3, r4
 8000da2:	fa00 f801 	lsl.w	r8, r0, r1
 8000da6:	fa1f fc87 	uxth.w	ip, r7
 8000daa:	fbbe f0f9 	udiv	r0, lr, r9
 8000dae:	0c1c      	lsrs	r4, r3, #16
 8000db0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000db4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000db8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dbc:	45a6      	cmp	lr, r4
 8000dbe:	fa02 f201 	lsl.w	r2, r2, r1
 8000dc2:	d909      	bls.n	8000dd8 <__udivmoddi4+0x1a0>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dca:	f080 809c 	bcs.w	8000f06 <__udivmoddi4+0x2ce>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f240 8099 	bls.w	8000f06 <__udivmoddi4+0x2ce>
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	443c      	add	r4, r7
 8000dd8:	eba4 040e 	sub.w	r4, r4, lr
 8000ddc:	fa1f fe83 	uxth.w	lr, r3
 8000de0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de4:	fb09 4413 	mls	r4, r9, r3, r4
 8000de8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dec:	fb03 fc0c 	mul.w	ip, r3, ip
 8000df0:	45a4      	cmp	ip, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x1ce>
 8000df4:	193c      	adds	r4, r7, r4
 8000df6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dfa:	f080 8082 	bcs.w	8000f02 <__udivmoddi4+0x2ca>
 8000dfe:	45a4      	cmp	ip, r4
 8000e00:	d97f      	bls.n	8000f02 <__udivmoddi4+0x2ca>
 8000e02:	3b02      	subs	r3, #2
 8000e04:	443c      	add	r4, r7
 8000e06:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e0a:	eba4 040c 	sub.w	r4, r4, ip
 8000e0e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e12:	4564      	cmp	r4, ip
 8000e14:	4673      	mov	r3, lr
 8000e16:	46e1      	mov	r9, ip
 8000e18:	d362      	bcc.n	8000ee0 <__udivmoddi4+0x2a8>
 8000e1a:	d05f      	beq.n	8000edc <__udivmoddi4+0x2a4>
 8000e1c:	b15d      	cbz	r5, 8000e36 <__udivmoddi4+0x1fe>
 8000e1e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e22:	eb64 0409 	sbc.w	r4, r4, r9
 8000e26:	fa04 f606 	lsl.w	r6, r4, r6
 8000e2a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e2e:	431e      	orrs	r6, r3
 8000e30:	40cc      	lsrs	r4, r1
 8000e32:	e9c5 6400 	strd	r6, r4, [r5]
 8000e36:	2100      	movs	r1, #0
 8000e38:	e74f      	b.n	8000cda <__udivmoddi4+0xa2>
 8000e3a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e3e:	0c01      	lsrs	r1, r0, #16
 8000e40:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e44:	b280      	uxth	r0, r0
 8000e46:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e4a:	463b      	mov	r3, r7
 8000e4c:	4638      	mov	r0, r7
 8000e4e:	463c      	mov	r4, r7
 8000e50:	46b8      	mov	r8, r7
 8000e52:	46be      	mov	lr, r7
 8000e54:	2620      	movs	r6, #32
 8000e56:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e5a:	eba2 0208 	sub.w	r2, r2, r8
 8000e5e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e62:	e766      	b.n	8000d32 <__udivmoddi4+0xfa>
 8000e64:	4601      	mov	r1, r0
 8000e66:	e718      	b.n	8000c9a <__udivmoddi4+0x62>
 8000e68:	4610      	mov	r0, r2
 8000e6a:	e72c      	b.n	8000cc6 <__udivmoddi4+0x8e>
 8000e6c:	f1c6 0220 	rsb	r2, r6, #32
 8000e70:	fa2e f302 	lsr.w	r3, lr, r2
 8000e74:	40b7      	lsls	r7, r6
 8000e76:	40b1      	lsls	r1, r6
 8000e78:	fa20 f202 	lsr.w	r2, r0, r2
 8000e7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e80:	430a      	orrs	r2, r1
 8000e82:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e86:	b2bc      	uxth	r4, r7
 8000e88:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e8c:	0c11      	lsrs	r1, r2, #16
 8000e8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e92:	fb08 f904 	mul.w	r9, r8, r4
 8000e96:	40b0      	lsls	r0, r6
 8000e98:	4589      	cmp	r9, r1
 8000e9a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e9e:	b280      	uxth	r0, r0
 8000ea0:	d93e      	bls.n	8000f20 <__udivmoddi4+0x2e8>
 8000ea2:	1879      	adds	r1, r7, r1
 8000ea4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ea8:	d201      	bcs.n	8000eae <__udivmoddi4+0x276>
 8000eaa:	4589      	cmp	r9, r1
 8000eac:	d81f      	bhi.n	8000eee <__udivmoddi4+0x2b6>
 8000eae:	eba1 0109 	sub.w	r1, r1, r9
 8000eb2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eb6:	fb09 f804 	mul.w	r8, r9, r4
 8000eba:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ebe:	b292      	uxth	r2, r2
 8000ec0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ec4:	4542      	cmp	r2, r8
 8000ec6:	d229      	bcs.n	8000f1c <__udivmoddi4+0x2e4>
 8000ec8:	18ba      	adds	r2, r7, r2
 8000eca:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ece:	d2c4      	bcs.n	8000e5a <__udivmoddi4+0x222>
 8000ed0:	4542      	cmp	r2, r8
 8000ed2:	d2c2      	bcs.n	8000e5a <__udivmoddi4+0x222>
 8000ed4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ed8:	443a      	add	r2, r7
 8000eda:	e7be      	b.n	8000e5a <__udivmoddi4+0x222>
 8000edc:	45f0      	cmp	r8, lr
 8000ede:	d29d      	bcs.n	8000e1c <__udivmoddi4+0x1e4>
 8000ee0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ee4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ee8:	3801      	subs	r0, #1
 8000eea:	46e1      	mov	r9, ip
 8000eec:	e796      	b.n	8000e1c <__udivmoddi4+0x1e4>
 8000eee:	eba7 0909 	sub.w	r9, r7, r9
 8000ef2:	4449      	add	r1, r9
 8000ef4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ef8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000efc:	fb09 f804 	mul.w	r8, r9, r4
 8000f00:	e7db      	b.n	8000eba <__udivmoddi4+0x282>
 8000f02:	4673      	mov	r3, lr
 8000f04:	e77f      	b.n	8000e06 <__udivmoddi4+0x1ce>
 8000f06:	4650      	mov	r0, sl
 8000f08:	e766      	b.n	8000dd8 <__udivmoddi4+0x1a0>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e6fd      	b.n	8000d0a <__udivmoddi4+0xd2>
 8000f0e:	443b      	add	r3, r7
 8000f10:	3a02      	subs	r2, #2
 8000f12:	e733      	b.n	8000d7c <__udivmoddi4+0x144>
 8000f14:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f18:	443b      	add	r3, r7
 8000f1a:	e71c      	b.n	8000d56 <__udivmoddi4+0x11e>
 8000f1c:	4649      	mov	r1, r9
 8000f1e:	e79c      	b.n	8000e5a <__udivmoddi4+0x222>
 8000f20:	eba1 0109 	sub.w	r1, r1, r9
 8000f24:	46c4      	mov	ip, r8
 8000f26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f2a:	fb09 f804 	mul.w	r8, r9, r4
 8000f2e:	e7c4      	b.n	8000eba <__udivmoddi4+0x282>

08000f30 <__aeabi_idiv0>:
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop

08000f34 <CRC_HW_Calculation>:
	return CRC->CR;
}


uint32_t CRC_HW_Calculation(uint8_t *data_buffer, uint32_t length)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
    if (length == 0) return 0;
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d101      	bne.n	8000f48 <CRC_HW_Calculation+0x14>
 8000f44:	2300      	movs	r3, #0
 8000f46:	e017      	b.n	8000f78 <CRC_HW_Calculation+0x44>
    uint8_t* p_data = data_buffer;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	60fb      	str	r3, [r7, #12]

    CRC->CR = CRC_CR_RESET;
 8000f4c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f84 <CRC_HW_Calculation+0x50>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	609a      	str	r2, [r3, #8]

    for (uint32_t i = 0; i < length; i ++)
 8000f52:	2300      	movs	r3, #0
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	e009      	b.n	8000f6c <CRC_HW_Calculation+0x38>
    {
    	CRC->DR = *p_data;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	781a      	ldrb	r2, [r3, #0]
 8000f5c:	4b09      	ldr	r3, [pc, #36]	@ (8000f84 <CRC_HW_Calculation+0x50>)
 8000f5e:	601a      	str	r2, [r3, #0]
    	p_data ++ ;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	3301      	adds	r3, #1
 8000f64:	60fb      	str	r3, [r7, #12]
    for (uint32_t i = 0; i < length; i ++)
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	68ba      	ldr	r2, [r7, #8]
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d3f1      	bcc.n	8000f58 <CRC_HW_Calculation+0x24>
    }
    return CRC->DR;
 8000f74:	4b03      	ldr	r3, [pc, #12]	@ (8000f84 <CRC_HW_Calculation+0x50>)
 8000f76:	681b      	ldr	r3, [r3, #0]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3714      	adds	r7, #20
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	40023000 	.word	0x40023000

08000f88 <Timer_Get_Counter>:
//    HAL_TIM_Base_Start(&htim3);  // chỉ chạy timer, không enable interrupt
//}

// Lấy giá trị hiện tại của timer (0.1ms)
uint32_t Timer_Get_Counter(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
    return __HAL_TIM_GET_COUNTER(&htim3);
 8000f8c:	4b03      	ldr	r3, [pc, #12]	@ (8000f9c <Timer_Get_Counter+0x14>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	20000324 	.word	0x20000324

08000fa0 <Timer_Start_Counter>:

uint32_t Timer_Start_Counter(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
	start = Timer_Get_Counter();
 8000fa4:	f7ff fff0 	bl	8000f88 <Timer_Get_Counter>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	4a03      	ldr	r2, [pc, #12]	@ (8000fb8 <Timer_Start_Counter+0x18>)
 8000fac:	6013      	str	r3, [r2, #0]
	return start;
 8000fae:	4b02      	ldr	r3, [pc, #8]	@ (8000fb8 <Timer_Start_Counter+0x18>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	200002f4 	.word	0x200002f4

08000fbc <Timer_End_Counter>:

uint32_t Timer_End_Counter(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
	end = Timer_Get_Counter();
 8000fc0:	f7ff ffe2 	bl	8000f88 <Timer_Get_Counter>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	4a03      	ldr	r2, [pc, #12]	@ (8000fd4 <Timer_End_Counter+0x18>)
 8000fc8:	6013      	str	r3, [r2, #0]
	return end;
 8000fca:	4b02      	ldr	r3, [pc, #8]	@ (8000fd4 <Timer_End_Counter+0x18>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	200002f8 	.word	0x200002f8

08000fd8 <Timer_Get_Duration>:


// Tính thời gian giữa 2 lần đọc đơn vị milis
uint32_t Timer_Get_Duration(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
    if (end >= start)
 8000fdc:	4b11      	ldr	r3, [pc, #68]	@ (8001024 <Timer_Get_Duration+0x4c>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4b11      	ldr	r3, [pc, #68]	@ (8001028 <Timer_Get_Duration+0x50>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d30b      	bcc.n	8001000 <Timer_Get_Duration+0x28>
        return duration = (end - start)/10;
 8000fe8:	4b0e      	ldr	r3, [pc, #56]	@ (8001024 <Timer_Get_Duration+0x4c>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	4b0e      	ldr	r3, [pc, #56]	@ (8001028 <Timer_Get_Duration+0x50>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	4a0e      	ldr	r2, [pc, #56]	@ (800102c <Timer_Get_Duration+0x54>)
 8000ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ff8:	08db      	lsrs	r3, r3, #3
 8000ffa:	4a0d      	ldr	r2, [pc, #52]	@ (8001030 <Timer_Get_Duration+0x58>)
 8000ffc:	6013      	str	r3, [r2, #0]
 8000ffe:	e00c      	b.n	800101a <Timer_Get_Duration+0x42>
    else
        return duration = ((0xFFFF - start + 1) + end)/10;  // xử lý khi timer bị tràn
 8001000:	4b08      	ldr	r3, [pc, #32]	@ (8001024 <Timer_Get_Duration+0x4c>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	4b08      	ldr	r3, [pc, #32]	@ (8001028 <Timer_Get_Duration+0x50>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800100e:	4a07      	ldr	r2, [pc, #28]	@ (800102c <Timer_Get_Duration+0x54>)
 8001010:	fba2 2303 	umull	r2, r3, r2, r3
 8001014:	08db      	lsrs	r3, r3, #3
 8001016:	4a06      	ldr	r2, [pc, #24]	@ (8001030 <Timer_Get_Duration+0x58>)
 8001018:	6013      	str	r3, [r2, #0]
}
 800101a:	4618      	mov	r0, r3
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	200002f8 	.word	0x200002f8
 8001028:	200002f4 	.word	0x200002f4
 800102c:	cccccccd 	.word	0xcccccccd
 8001030:	200002fc 	.word	0x200002fc

08001034 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001038:	4b04      	ldr	r3, [pc, #16]	@ (800104c <__NVIC_GetPriorityGrouping+0x18>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	0a1b      	lsrs	r3, r3, #8
 800103e:	f003 0307 	and.w	r3, r3, #7
}
 8001042:	4618      	mov	r0, r3
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	2b00      	cmp	r3, #0
 8001060:	db0b      	blt.n	800107a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	f003 021f 	and.w	r2, r3, #31
 8001068:	4907      	ldr	r1, [pc, #28]	@ (8001088 <__NVIC_EnableIRQ+0x38>)
 800106a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106e:	095b      	lsrs	r3, r3, #5
 8001070:	2001      	movs	r0, #1
 8001072:	fa00 f202 	lsl.w	r2, r0, r2
 8001076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	e000e100 	.word	0xe000e100

0800108c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	6039      	str	r1, [r7, #0]
 8001096:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109c:	2b00      	cmp	r3, #0
 800109e:	db0a      	blt.n	80010b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	490c      	ldr	r1, [pc, #48]	@ (80010d8 <__NVIC_SetPriority+0x4c>)
 80010a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010aa:	0112      	lsls	r2, r2, #4
 80010ac:	b2d2      	uxtb	r2, r2
 80010ae:	440b      	add	r3, r1
 80010b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010b4:	e00a      	b.n	80010cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	b2da      	uxtb	r2, r3
 80010ba:	4908      	ldr	r1, [pc, #32]	@ (80010dc <__NVIC_SetPriority+0x50>)
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	f003 030f 	and.w	r3, r3, #15
 80010c2:	3b04      	subs	r3, #4
 80010c4:	0112      	lsls	r2, r2, #4
 80010c6:	b2d2      	uxtb	r2, r2
 80010c8:	440b      	add	r3, r1
 80010ca:	761a      	strb	r2, [r3, #24]
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000e100 	.word	0xe000e100
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b089      	sub	sp, #36	@ 0x24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f003 0307 	and.w	r3, r3, #7
 80010f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	f1c3 0307 	rsb	r3, r3, #7
 80010fa:	2b04      	cmp	r3, #4
 80010fc:	bf28      	it	cs
 80010fe:	2304      	movcs	r3, #4
 8001100:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	3304      	adds	r3, #4
 8001106:	2b06      	cmp	r3, #6
 8001108:	d902      	bls.n	8001110 <NVIC_EncodePriority+0x30>
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	3b03      	subs	r3, #3
 800110e:	e000      	b.n	8001112 <NVIC_EncodePriority+0x32>
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001114:	f04f 32ff 	mov.w	r2, #4294967295
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43da      	mvns	r2, r3
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	401a      	ands	r2, r3
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001128:	f04f 31ff 	mov.w	r1, #4294967295
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	fa01 f303 	lsl.w	r3, r1, r3
 8001132:	43d9      	mvns	r1, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001138:	4313      	orrs	r3, r2
         );
}
 800113a:	4618      	mov	r0, r3
 800113c:	3724      	adds	r7, #36	@ 0x24
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001146:	b480      	push	{r7}
 8001148:	b083      	sub	sp, #12
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f043 0201 	orr.w	r2, r3, #1
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	601a      	str	r2, [r3, #0]
}
 800115a:	bf00      	nop
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001166:	b480      	push	{r7}
 8001168:	b083      	sub	sp, #12
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	609a      	str	r2, [r3, #8]
}
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
	...

08001194 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800119c:	4b08      	ldr	r3, [pc, #32]	@ (80011c0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800119e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80011a0:	4907      	ldr	r1, [pc, #28]	@ (80011c0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80011a8:	4b05      	ldr	r3, [pc, #20]	@ (80011c0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80011aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4013      	ands	r3, r2
 80011b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011b2:	68fb      	ldr	r3, [r7, #12]
}
 80011b4:	bf00      	nop
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	40023800 	.word	0x40023800

080011c4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80011cc:	4b08      	ldr	r3, [pc, #32]	@ (80011f0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80011ce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80011d0:	4907      	ldr	r1, [pc, #28]	@ (80011f0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80011d8:	4b05      	ldr	r3, [pc, #20]	@ (80011f0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80011da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4013      	ands	r3, r2
 80011e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011e2:	68fb      	ldr	r3, [r7, #12]
}
 80011e4:	bf00      	nop
 80011e6:	3714      	adds	r7, #20
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	40023800 	.word	0x40023800

080011f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011fa:	f000 fd90 	bl	8001d1e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011fe:	f000 f86d 	bl	80012dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001202:	f000 fa9d 	bl	8001740 <MX_GPIO_Init>
  MX_FMC_Init();
 8001206:	f000 f9e1 	bl	80015cc <MX_FMC_Init>
  MX_TIM3_Init();
 800120a:	f000 f8f5 	bl	80013f8 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 800120e:	f000 f943 	bl	8001498 <MX_USART6_UART_Init>
  MX_CRC_Init();
 8001212:	f000 f8cf 	bl	80013b4 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  Queue_Init(&usb_rx_cmd_queue, command_buffer, sizeof(command_buffer));
 8001216:	2240      	movs	r2, #64	@ 0x40
 8001218:	4920      	ldr	r1, [pc, #128]	@ (800129c <main+0xa8>)
 800121a:	4821      	ldr	r0, [pc, #132]	@ (80012a0 <main+0xac>)
 800121c:	f00b faec 	bl	800c7f8 <Queue_Init>
  Queue_Init(&usb_rx_file_queue, file_buffer, sizeof(file_buffer));
 8001220:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001224:	491f      	ldr	r1, [pc, #124]	@ (80012a4 <main+0xb0>)
 8001226:	4820      	ldr	r0, [pc, #128]	@ (80012a8 <main+0xb4>)
 8001228:	f00b fae6 	bl	800c7f8 <Queue_Init>

  MX_USB_DEVICE_Init();
 800122c:	f00b fea2 	bl	800cf74 <MX_USB_DEVICE_Init>

  HAL_TIM_Base_Start(&htim3);
 8001230:	481e      	ldr	r0, [pc, #120]	@ (80012ac <main+0xb8>)
 8001232:	f003 fded 	bl	8004e10 <HAL_TIM_Base_Start>
//  command_buffer[0] = 0;
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001236:	f008 fb4b 	bl	80098d0 <osKernelInitialize>
  //Init
//  Chunk_Init();
//  File_Init();


  xTaskCreate(TaskBlinkLED, "BlinkTask", 256, NULL, osPriorityNormal + 1, NULL);
 800123a:	2300      	movs	r3, #0
 800123c:	9301      	str	r3, [sp, #4]
 800123e:	2319      	movs	r3, #25
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	2300      	movs	r3, #0
 8001244:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001248:	4919      	ldr	r1, [pc, #100]	@ (80012b0 <main+0xbc>)
 800124a:	481a      	ldr	r0, [pc, #104]	@ (80012b4 <main+0xc0>)
 800124c:	f009 fa12 	bl	800a674 <xTaskCreate>
  xTaskCreate(Task_Command, "Command", 512, NULL, 4, &hTaskCommand);
 8001250:	4b19      	ldr	r3, [pc, #100]	@ (80012b8 <main+0xc4>)
 8001252:	9301      	str	r3, [sp, #4]
 8001254:	2304      	movs	r3, #4
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	2300      	movs	r3, #0
 800125a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800125e:	4917      	ldr	r1, [pc, #92]	@ (80012bc <main+0xc8>)
 8001260:	4817      	ldr	r0, [pc, #92]	@ (80012c0 <main+0xcc>)
 8001262:	f009 fa07 	bl	800a674 <xTaskCreate>
//  Transmit_Init(0);
  xTaskCreate(TaskSendImage, "TaskSendImage", 1024, NULL, 2, &hTaskSend);
 8001266:	4b17      	ldr	r3, [pc, #92]	@ (80012c4 <main+0xd0>)
 8001268:	9301      	str	r3, [sp, #4]
 800126a:	2302      	movs	r3, #2
 800126c:	9300      	str	r3, [sp, #0]
 800126e:	2300      	movs	r3, #0
 8001270:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001274:	4914      	ldr	r1, [pc, #80]	@ (80012c8 <main+0xd4>)
 8001276:	4815      	ldr	r0, [pc, #84]	@ (80012cc <main+0xd8>)
 8001278:	f009 f9fc 	bl	800a674 <xTaskCreate>
  xTaskCreate(Task_Receive, "Receive", 1024*5, NULL, 3, &hTaskReceive);   //có thể  giảm
 800127c:	4b14      	ldr	r3, [pc, #80]	@ (80012d0 <main+0xdc>)
 800127e:	9301      	str	r3, [sp, #4]
 8001280:	2303      	movs	r3, #3
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	2300      	movs	r3, #0
 8001286:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 800128a:	4912      	ldr	r1, [pc, #72]	@ (80012d4 <main+0xe0>)
 800128c:	4812      	ldr	r0, [pc, #72]	@ (80012d8 <main+0xe4>)
 800128e:	f009 f9f1 	bl	800a674 <xTaskCreate>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001292:	f008 fb51 	bl	8009938 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001296:	bf00      	nop
 8001298:	e7fd      	b.n	8001296 <main+0xa2>
 800129a:	bf00      	nop
 800129c:	200003a4 	.word	0x200003a4
 80012a0:	200003e4 	.word	0x200003e4
 80012a4:	c0000000 	.word	0xc0000000
 80012a8:	200003f4 	.word	0x200003f4
 80012ac:	20000324 	.word	0x20000324
 80012b0:	0801056c 	.word	0x0801056c
 80012b4:	08001865 	.word	0x08001865
 80012b8:	2000e200 	.word	0x2000e200
 80012bc:	08010578 	.word	0x08010578
 80012c0:	0800cb19 	.word	0x0800cb19
 80012c4:	2000e208 	.word	0x2000e208
 80012c8:	08010580 	.word	0x08010580
 80012cc:	0800cde5 	.word	0x0800cde5
 80012d0:	2000e204 	.word	0x2000e204
 80012d4:	08010590 	.word	0x08010590
 80012d8:	0800cc15 	.word	0x0800cc15

080012dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b094      	sub	sp, #80	@ 0x50
 80012e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012e2:	f107 0320 	add.w	r3, r7, #32
 80012e6:	2230      	movs	r2, #48	@ 0x30
 80012e8:	2100      	movs	r1, #0
 80012ea:	4618      	mov	r0, r3
 80012ec:	f00d fa5d 	bl	800e7aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f0:	f107 030c 	add.w	r3, r7, #12
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001300:	4b2a      	ldr	r3, [pc, #168]	@ (80013ac <SystemClock_Config+0xd0>)
 8001302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001304:	4a29      	ldr	r2, [pc, #164]	@ (80013ac <SystemClock_Config+0xd0>)
 8001306:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800130a:	6413      	str	r3, [r2, #64]	@ 0x40
 800130c:	4b27      	ldr	r3, [pc, #156]	@ (80013ac <SystemClock_Config+0xd0>)
 800130e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001310:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001314:	60bb      	str	r3, [r7, #8]
 8001316:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001318:	4b25      	ldr	r3, [pc, #148]	@ (80013b0 <SystemClock_Config+0xd4>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a24      	ldr	r2, [pc, #144]	@ (80013b0 <SystemClock_Config+0xd4>)
 800131e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001322:	6013      	str	r3, [r2, #0]
 8001324:	4b22      	ldr	r3, [pc, #136]	@ (80013b0 <SystemClock_Config+0xd4>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800132c:	607b      	str	r3, [r7, #4]
 800132e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001330:	2302      	movs	r3, #2
 8001332:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001334:	2301      	movs	r3, #1
 8001336:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001338:	2310      	movs	r3, #16
 800133a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800133c:	2302      	movs	r3, #2
 800133e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001340:	2300      	movs	r3, #0
 8001342:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001344:	2308      	movs	r3, #8
 8001346:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 200;
 8001348:	23c8      	movs	r3, #200	@ 0xc8
 800134a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800134c:	2302      	movs	r3, #2
 800134e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001350:	2302      	movs	r3, #2
 8001352:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001354:	f107 0320 	add.w	r3, r7, #32
 8001358:	4618      	mov	r0, r3
 800135a:	f002 fc1f 	bl	8003b9c <HAL_RCC_OscConfig>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001364:	f000 fa99 	bl	800189a <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001368:	f002 fbc8 	bl	8003afc <HAL_PWREx_EnableOverDrive>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001372:	f000 fa92 	bl	800189a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001376:	230f      	movs	r3, #15
 8001378:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800137a:	2302      	movs	r3, #2
 800137c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001382:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001386:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001388:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800138c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800138e:	f107 030c 	add.w	r3, r7, #12
 8001392:	2106      	movs	r1, #6
 8001394:	4618      	mov	r0, r3
 8001396:	f002 fea5 	bl	80040e4 <HAL_RCC_ClockConfig>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80013a0:	f000 fa7b 	bl	800189a <Error_Handler>
  }
}
 80013a4:	bf00      	nop
 80013a6:	3750      	adds	r7, #80	@ 0x50
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40007000 	.word	0x40007000

080013b4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80013b8:	4b0d      	ldr	r3, [pc, #52]	@ (80013f0 <MX_CRC_Init+0x3c>)
 80013ba:	4a0e      	ldr	r2, [pc, #56]	@ (80013f4 <MX_CRC_Init+0x40>)
 80013bc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80013be:	4b0c      	ldr	r3, [pc, #48]	@ (80013f0 <MX_CRC_Init+0x3c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80013c4:	4b0a      	ldr	r3, [pc, #40]	@ (80013f0 <MX_CRC_Init+0x3c>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80013ca:	4b09      	ldr	r3, [pc, #36]	@ (80013f0 <MX_CRC_Init+0x3c>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80013d0:	4b07      	ldr	r3, [pc, #28]	@ (80013f0 <MX_CRC_Init+0x3c>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80013d6:	4b06      	ldr	r3, [pc, #24]	@ (80013f0 <MX_CRC_Init+0x3c>)
 80013d8:	2201      	movs	r2, #1
 80013da:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80013dc:	4804      	ldr	r0, [pc, #16]	@ (80013f0 <MX_CRC_Init+0x3c>)
 80013de:	f000 fe31 	bl	8002044 <HAL_CRC_Init>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80013e8:	f000 fa57 	bl	800189a <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80013ec:	bf00      	nop
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20000300 	.word	0x20000300
 80013f4:	40023000 	.word	0x40023000

080013f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b088      	sub	sp, #32
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013fe:	f107 0310 	add.w	r3, r7, #16
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	605a      	str	r2, [r3, #4]
 8001408:	609a      	str	r2, [r3, #8]
 800140a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800140c:	1d3b      	adds	r3, r7, #4
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001416:	4b1e      	ldr	r3, [pc, #120]	@ (8001490 <MX_TIM3_Init+0x98>)
 8001418:	4a1e      	ldr	r2, [pc, #120]	@ (8001494 <MX_TIM3_Init+0x9c>)
 800141a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9999;
 800141c:	4b1c      	ldr	r3, [pc, #112]	@ (8001490 <MX_TIM3_Init+0x98>)
 800141e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001422:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001424:	4b1a      	ldr	r3, [pc, #104]	@ (8001490 <MX_TIM3_Init+0x98>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800142a:	4b19      	ldr	r3, [pc, #100]	@ (8001490 <MX_TIM3_Init+0x98>)
 800142c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001430:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001432:	4b17      	ldr	r3, [pc, #92]	@ (8001490 <MX_TIM3_Init+0x98>)
 8001434:	2200      	movs	r2, #0
 8001436:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001438:	4b15      	ldr	r3, [pc, #84]	@ (8001490 <MX_TIM3_Init+0x98>)
 800143a:	2200      	movs	r2, #0
 800143c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800143e:	4814      	ldr	r0, [pc, #80]	@ (8001490 <MX_TIM3_Init+0x98>)
 8001440:	f003 fc8f 	bl	8004d62 <HAL_TIM_Base_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800144a:	f000 fa26 	bl	800189a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800144e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001452:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001454:	f107 0310 	add.w	r3, r7, #16
 8001458:	4619      	mov	r1, r3
 800145a:	480d      	ldr	r0, [pc, #52]	@ (8001490 <MX_TIM3_Init+0x98>)
 800145c:	f003 fd48 	bl	8004ef0 <HAL_TIM_ConfigClockSource>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001466:	f000 fa18 	bl	800189a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800146a:	2300      	movs	r3, #0
 800146c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001472:	1d3b      	adds	r3, r7, #4
 8001474:	4619      	mov	r1, r3
 8001476:	4806      	ldr	r0, [pc, #24]	@ (8001490 <MX_TIM3_Init+0x98>)
 8001478:	f003 ff44 	bl	8005304 <HAL_TIMEx_MasterConfigSynchronization>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001482:	f000 fa0a 	bl	800189a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001486:	bf00      	nop
 8001488:	3720      	adds	r7, #32
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000324 	.word	0x20000324
 8001494:	40000400 	.word	0x40000400

08001498 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b0ae      	sub	sp, #184	@ 0xb8
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 800149e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	605a      	str	r2, [r3, #4]
 80014a8:	609a      	str	r2, [r3, #8]
 80014aa:	60da      	str	r2, [r3, #12]
 80014ac:	611a      	str	r2, [r3, #16]
 80014ae:	615a      	str	r2, [r3, #20]
 80014b0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b2:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	609a      	str	r2, [r3, #8]
 80014be:	60da      	str	r2, [r3, #12]
 80014c0:	611a      	str	r2, [r3, #16]
 80014c2:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014c4:	463b      	mov	r3, r7
 80014c6:	2284      	movs	r2, #132	@ 0x84
 80014c8:	2100      	movs	r1, #0
 80014ca:	4618      	mov	r0, r3
 80014cc:	f00d f96d 	bl	800e7aa <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80014d0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80014d4:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80014d6:	2300      	movs	r3, #0
 80014d8:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014da:	463b      	mov	r3, r7
 80014dc:	4618      	mov	r0, r3
 80014de:	f002 ffbf 	bl	8004460 <HAL_RCCEx_PeriphCLKConfig>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_USART6_UART_Init+0x54>
  {
    Error_Handler();
 80014e8:	f000 f9d7 	bl	800189a <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 80014ec:	2020      	movs	r0, #32
 80014ee:	f7ff fe69 	bl	80011c4 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80014f2:	2004      	movs	r0, #4
 80014f4:	f7ff fe4e 	bl	8001194 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC7   ------> USART6_RX
  PC6   ------> USART6_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80014f8:	2380      	movs	r3, #128	@ 0x80
 80014fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80014fe:	2302      	movs	r3, #2
 8001500:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001504:	2303      	movs	r3, #3
 8001506:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001510:	2300      	movs	r3, #0
 8001512:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8001516:	2308      	movs	r3, #8
 8001518:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800151c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001520:	4619      	mov	r1, r3
 8001522:	4828      	ldr	r0, [pc, #160]	@ (80015c4 <MX_USART6_UART_Init+0x12c>)
 8001524:	f004 f983 	bl	800582e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8001528:	2340      	movs	r3, #64	@ 0x40
 800152a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800152e:	2302      	movs	r3, #2
 8001530:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001534:	2303      	movs	r3, #3
 8001536:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001540:	2300      	movs	r3, #0
 8001542:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8001546:	2308      	movs	r3, #8
 8001548:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800154c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001550:	4619      	mov	r1, r3
 8001552:	481c      	ldr	r0, [pc, #112]	@ (80015c4 <MX_USART6_UART_Init+0x12c>)
 8001554:	f004 f96b 	bl	800582e <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8001558:	f7ff fd6c 	bl	8001034 <__NVIC_GetPriorityGrouping>
 800155c:	4603      	mov	r3, r0
 800155e:	2200      	movs	r2, #0
 8001560:	2105      	movs	r1, #5
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff fdbc 	bl	80010e0 <NVIC_EncodePriority>
 8001568:	4603      	mov	r3, r0
 800156a:	4619      	mov	r1, r3
 800156c:	2047      	movs	r0, #71	@ 0x47
 800156e:	f7ff fd8d 	bl	800108c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 8001572:	2047      	movs	r0, #71	@ 0x47
 8001574:	f7ff fd6c 	bl	8001050 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001578:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800157c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001580:	2300      	movs	r3, #0
 8001582:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001586:	2300      	movs	r3, #0
 8001588:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800158c:	2300      	movs	r3, #0
 800158e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001592:	230c      	movs	r3, #12
 8001594:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001598:	2300      	movs	r3, #0
 800159a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800159e:	2300      	movs	r3, #0
 80015a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  LL_USART_Init(USART6, &USART_InitStruct);
 80015a4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80015a8:	4619      	mov	r1, r3
 80015aa:	4807      	ldr	r0, [pc, #28]	@ (80015c8 <MX_USART6_UART_Init+0x130>)
 80015ac:	f004 fd8a 	bl	80060c4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 80015b0:	4805      	ldr	r0, [pc, #20]	@ (80015c8 <MX_USART6_UART_Init+0x130>)
 80015b2:	f7ff fdd8 	bl	8001166 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 80015b6:	4804      	ldr	r0, [pc, #16]	@ (80015c8 <MX_USART6_UART_Init+0x130>)
 80015b8:	f7ff fdc5 	bl	8001146 <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80015bc:	bf00      	nop
 80015be:	37b8      	adds	r7, #184	@ 0xb8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40020800 	.word	0x40020800
 80015c8:	40011400 	.word	0x40011400

080015cc <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08e      	sub	sp, #56	@ 0x38
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */
	const uint32_t RefreshCount = 0x0603; // tại 100MHz
 80015d2:	f240 6303 	movw	r3, #1539	@ 0x603
 80015d6:	637b      	str	r3, [r7, #52]	@ 0x34
  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80015d8:	f107 0318 	add.w	r3, r7, #24
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]
 80015e8:	615a      	str	r2, [r3, #20]
 80015ea:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80015ec:	4b51      	ldr	r3, [pc, #324]	@ (8001734 <MX_FMC_Init+0x168>)
 80015ee:	4a52      	ldr	r2, [pc, #328]	@ (8001738 <MX_FMC_Init+0x16c>)
 80015f0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80015f2:	4b50      	ldr	r3, [pc, #320]	@ (8001734 <MX_FMC_Init+0x168>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80015f8:	4b4e      	ldr	r3, [pc, #312]	@ (8001734 <MX_FMC_Init+0x168>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80015fe:	4b4d      	ldr	r3, [pc, #308]	@ (8001734 <MX_FMC_Init+0x168>)
 8001600:	2204      	movs	r2, #4
 8001602:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001604:	4b4b      	ldr	r3, [pc, #300]	@ (8001734 <MX_FMC_Init+0x168>)
 8001606:	2210      	movs	r2, #16
 8001608:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800160a:	4b4a      	ldr	r3, [pc, #296]	@ (8001734 <MX_FMC_Init+0x168>)
 800160c:	2240      	movs	r2, #64	@ 0x40
 800160e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8001610:	4b48      	ldr	r3, [pc, #288]	@ (8001734 <MX_FMC_Init+0x168>)
 8001612:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001616:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001618:	4b46      	ldr	r3, [pc, #280]	@ (8001734 <MX_FMC_Init+0x168>)
 800161a:	2200      	movs	r2, #0
 800161c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800161e:	4b45      	ldr	r3, [pc, #276]	@ (8001734 <MX_FMC_Init+0x168>)
 8001620:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001624:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001626:	4b43      	ldr	r3, [pc, #268]	@ (8001734 <MX_FMC_Init+0x168>)
 8001628:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800162c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 800162e:	4b41      	ldr	r3, [pc, #260]	@ (8001734 <MX_FMC_Init+0x168>)
 8001630:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001634:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001636:	2302      	movs	r3, #2
 8001638:	61bb      	str	r3, [r7, #24]
  SdramTiming.ExitSelfRefreshDelay = 8;
 800163a:	2308      	movs	r3, #8
 800163c:	61fb      	str	r3, [r7, #28]
  SdramTiming.SelfRefreshTime = 6;
 800163e:	2306      	movs	r3, #6
 8001640:	623b      	str	r3, [r7, #32]
  SdramTiming.RowCycleDelay = 7;
 8001642:	2307      	movs	r3, #7
 8001644:	627b      	str	r3, [r7, #36]	@ 0x24
  SdramTiming.WriteRecoveryTime = 12;
 8001646:	230c      	movs	r3, #12
 8001648:	62bb      	str	r3, [r7, #40]	@ 0x28
  SdramTiming.RPDelay = 2;
 800164a:	2302      	movs	r3, #2
 800164c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SdramTiming.RCDDelay = 2;
 800164e:	2302      	movs	r3, #2
 8001650:	633b      	str	r3, [r7, #48]	@ 0x30

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001652:	f107 0318 	add.w	r3, r7, #24
 8001656:	4619      	mov	r1, r3
 8001658:	4836      	ldr	r0, [pc, #216]	@ (8001734 <MX_FMC_Init+0x168>)
 800165a:	f003 faf1 	bl	8004c40 <HAL_SDRAM_Init>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_FMC_Init+0x9c>
  {
    Error_Handler( );
 8001664:	f000 f919 	bl	800189a <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  FMC_SDRAM_CommandTypeDef Command = {0};
 8001668:	f107 0308 	add.w	r3, r7, #8
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
  __IO uint32_t tmpmrd = 0;
 8001676:	2300      	movs	r3, #0
 8001678:	607b      	str	r3, [r7, #4]

  /* Khởi tạo SDRAM */
  __HAL_RCC_FMC_CLK_ENABLE();
 800167a:	4b30      	ldr	r3, [pc, #192]	@ (800173c <MX_FMC_Init+0x170>)
 800167c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800167e:	4a2f      	ldr	r2, [pc, #188]	@ (800173c <MX_FMC_Init+0x170>)
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	6393      	str	r3, [r2, #56]	@ 0x38
 8001686:	4b2d      	ldr	r3, [pc, #180]	@ (800173c <MX_FMC_Init+0x170>)
 8001688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	603b      	str	r3, [r7, #0]
 8001690:	683b      	ldr	r3, [r7, #0]



  Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8001692:	2301      	movs	r3, #1
 8001694:	60bb      	str	r3, [r7, #8]
  Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001696:	2310      	movs	r3, #16
 8001698:	60fb      	str	r3, [r7, #12]
  Command.AutoRefreshNumber = 1;
 800169a:	2301      	movs	r3, #1
 800169c:	613b      	str	r3, [r7, #16]
  Command.ModeRegisterDefinition = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	617b      	str	r3, [r7, #20]
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80016a2:	f107 0308 	add.w	r3, r7, #8
 80016a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016aa:	4619      	mov	r1, r3
 80016ac:	4821      	ldr	r0, [pc, #132]	@ (8001734 <MX_FMC_Init+0x168>)
 80016ae:	f003 fafb 	bl	8004ca8 <HAL_SDRAM_SendCommand>
  HAL_Delay(1); // Delay 1ms (tối thiểu 100µs)
 80016b2:	2001      	movs	r0, #1
 80016b4:	f000 fb90 	bl	8001dd8 <HAL_Delay>


  Command.CommandMode = FMC_SDRAM_CMD_PALL;
 80016b8:	2302      	movs	r3, #2
 80016ba:	60bb      	str	r3, [r7, #8]
  Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80016bc:	2310      	movs	r3, #16
 80016be:	60fb      	str	r3, [r7, #12]
  Command.AutoRefreshNumber = 1;
 80016c0:	2301      	movs	r3, #1
 80016c2:	613b      	str	r3, [r7, #16]
  Command.ModeRegisterDefinition = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]
  HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xFFFF);
 80016c8:	f107 0308 	add.w	r3, r7, #8
 80016cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016d0:	4619      	mov	r1, r3
 80016d2:	4818      	ldr	r0, [pc, #96]	@ (8001734 <MX_FMC_Init+0x168>)
 80016d4:	f003 fae8 	bl	8004ca8 <HAL_SDRAM_SendCommand>
  HAL_Delay(1); // Đợi một thời gian ngắn
 80016d8:	2001      	movs	r0, #1
 80016da:	f000 fb7d 	bl	8001dd8 <HAL_Delay>



  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80016de:	2303      	movs	r3, #3
 80016e0:	60bb      	str	r3, [r7, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80016e2:	2310      	movs	r3, #16
 80016e4:	60fb      	str	r3, [r7, #12]
  Command.AutoRefreshNumber      = 8;
 80016e6:	2308      	movs	r3, #8
 80016e8:	613b      	str	r3, [r7, #16]
  Command.ModeRegisterDefinition = 0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80016ee:	f107 0308 	add.w	r3, r7, #8
 80016f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016f6:	4619      	mov	r1, r3
 80016f8:	480e      	ldr	r0, [pc, #56]	@ (8001734 <MX_FMC_Init+0x168>)
 80016fa:	f003 fad5 	bl	8004ca8 <HAL_SDRAM_SendCommand>

  // Bước 4: Gửi lệnh Mode Register Set (MRS)
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80016fe:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8001702:	607b      	str	r3, [r7, #4]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8001704:	2304      	movs	r3, #4
 8001706:	60bb      	str	r3, [r7, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001708:	2310      	movs	r3, #16
 800170a:	60fb      	str	r3, [r7, #12]
  Command.AutoRefreshNumber      = 1;
 800170c:	2301      	movs	r3, #1
 800170e:	613b      	str	r3, [r7, #16]
  Command.ModeRegisterDefinition = tmpmrd;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	617b      	str	r3, [r7, #20]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001714:	f107 0308 	add.w	r3, r7, #8
 8001718:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800171c:	4619      	mov	r1, r3
 800171e:	4805      	ldr	r0, [pc, #20]	@ (8001734 <MX_FMC_Init+0x168>)
 8001720:	f003 fac2 	bl	8004ca8 <HAL_SDRAM_SendCommand>

  // Bước 5: Cấu hình tần số refresh
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, RefreshCount);
 8001724:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001726:	4803      	ldr	r0, [pc, #12]	@ (8001734 <MX_FMC_Init+0x168>)
 8001728:	f003 faf3 	bl	8004d12 <HAL_SDRAM_ProgramRefreshRate>

  /* USER CODE END FMC_Init 2 */
}
 800172c:	bf00      	nop
 800172e:	3738      	adds	r7, #56	@ 0x38
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20000370 	.word	0x20000370
 8001738:	a0000140 	.word	0xa0000140
 800173c:	40023800 	.word	0x40023800

08001740 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b08e      	sub	sp, #56	@ 0x38
 8001744:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001746:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	609a      	str	r2, [r3, #8]
 8001752:	60da      	str	r2, [r3, #12]
 8001754:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001756:	4b41      	ldr	r3, [pc, #260]	@ (800185c <MX_GPIO_Init+0x11c>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175a:	4a40      	ldr	r2, [pc, #256]	@ (800185c <MX_GPIO_Init+0x11c>)
 800175c:	f043 0302 	orr.w	r3, r3, #2
 8001760:	6313      	str	r3, [r2, #48]	@ 0x30
 8001762:	4b3e      	ldr	r3, [pc, #248]	@ (800185c <MX_GPIO_Init+0x11c>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	623b      	str	r3, [r7, #32]
 800176c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800176e:	4b3b      	ldr	r3, [pc, #236]	@ (800185c <MX_GPIO_Init+0x11c>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001772:	4a3a      	ldr	r2, [pc, #232]	@ (800185c <MX_GPIO_Init+0x11c>)
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	6313      	str	r3, [r2, #48]	@ 0x30
 800177a:	4b38      	ldr	r3, [pc, #224]	@ (800185c <MX_GPIO_Init+0x11c>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	61fb      	str	r3, [r7, #28]
 8001784:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001786:	4b35      	ldr	r3, [pc, #212]	@ (800185c <MX_GPIO_Init+0x11c>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178a:	4a34      	ldr	r2, [pc, #208]	@ (800185c <MX_GPIO_Init+0x11c>)
 800178c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001790:	6313      	str	r3, [r2, #48]	@ 0x30
 8001792:	4b32      	ldr	r3, [pc, #200]	@ (800185c <MX_GPIO_Init+0x11c>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001796:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800179a:	61bb      	str	r3, [r7, #24]
 800179c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800179e:	4b2f      	ldr	r3, [pc, #188]	@ (800185c <MX_GPIO_Init+0x11c>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a2:	4a2e      	ldr	r2, [pc, #184]	@ (800185c <MX_GPIO_Init+0x11c>)
 80017a4:	f043 0308 	orr.w	r3, r3, #8
 80017a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017aa:	4b2c      	ldr	r3, [pc, #176]	@ (800185c <MX_GPIO_Init+0x11c>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ae:	f003 0308 	and.w	r3, r3, #8
 80017b2:	617b      	str	r3, [r7, #20]
 80017b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017b6:	4b29      	ldr	r3, [pc, #164]	@ (800185c <MX_GPIO_Init+0x11c>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ba:	4a28      	ldr	r2, [pc, #160]	@ (800185c <MX_GPIO_Init+0x11c>)
 80017bc:	f043 0320 	orr.w	r3, r3, #32
 80017c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017c2:	4b26      	ldr	r3, [pc, #152]	@ (800185c <MX_GPIO_Init+0x11c>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c6:	f003 0320 	and.w	r3, r3, #32
 80017ca:	613b      	str	r3, [r7, #16]
 80017cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80017ce:	4b23      	ldr	r3, [pc, #140]	@ (800185c <MX_GPIO_Init+0x11c>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d2:	4a22      	ldr	r2, [pc, #136]	@ (800185c <MX_GPIO_Init+0x11c>)
 80017d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017da:	4b20      	ldr	r3, [pc, #128]	@ (800185c <MX_GPIO_Init+0x11c>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017e6:	4b1d      	ldr	r3, [pc, #116]	@ (800185c <MX_GPIO_Init+0x11c>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ea:	4a1c      	ldr	r2, [pc, #112]	@ (800185c <MX_GPIO_Init+0x11c>)
 80017ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017f2:	4b1a      	ldr	r3, [pc, #104]	@ (800185c <MX_GPIO_Init+0x11c>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017fa:	60bb      	str	r3, [r7, #8]
 80017fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017fe:	4b17      	ldr	r3, [pc, #92]	@ (800185c <MX_GPIO_Init+0x11c>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001802:	4a16      	ldr	r2, [pc, #88]	@ (800185c <MX_GPIO_Init+0x11c>)
 8001804:	f043 0304 	orr.w	r3, r3, #4
 8001808:	6313      	str	r3, [r2, #48]	@ 0x30
 800180a:	4b14      	ldr	r3, [pc, #80]	@ (800185c <MX_GPIO_Init+0x11c>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180e:	f003 0304 	and.w	r3, r3, #4
 8001812:	607b      	str	r3, [r7, #4]
 8001814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001816:	4b11      	ldr	r3, [pc, #68]	@ (800185c <MX_GPIO_Init+0x11c>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181a:	4a10      	ldr	r2, [pc, #64]	@ (800185c <MX_GPIO_Init+0x11c>)
 800181c:	f043 0310 	orr.w	r3, r3, #16
 8001820:	6313      	str	r3, [r2, #48]	@ 0x30
 8001822:	4b0e      	ldr	r3, [pc, #56]	@ (800185c <MX_GPIO_Init+0x11c>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001826:	f003 0310 	and.w	r3, r3, #16
 800182a:	603b      	str	r3, [r7, #0]
 800182c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 800182e:	2200      	movs	r2, #0
 8001830:	2102      	movs	r1, #2
 8001832:	480b      	ldr	r0, [pc, #44]	@ (8001860 <MX_GPIO_Init+0x120>)
 8001834:	f000 fea4 	bl	8002580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001838:	2302      	movs	r3, #2
 800183a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183c:	2301      	movs	r3, #1
 800183e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001844:	2300      	movs	r3, #0
 8001846:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001848:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800184c:	4619      	mov	r1, r3
 800184e:	4804      	ldr	r0, [pc, #16]	@ (8001860 <MX_GPIO_Init+0x120>)
 8001850:	f000 fcea 	bl	8002228 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001854:	bf00      	nop
 8001856:	3738      	adds	r7, #56	@ 0x38
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40023800 	.word	0x40023800
 8001860:	40022000 	.word	0x40022000

08001864 <TaskBlinkLED>:

/* USER CODE BEGIN 4 */

void TaskBlinkLED(void *pvParameters)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
    while (1)
    {
//    	Timer_Start_Counter();
    	HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_1);
 800186c:	2102      	movs	r1, #2
 800186e:	4804      	ldr	r0, [pc, #16]	@ (8001880 <TaskBlinkLED+0x1c>)
 8001870:	f000 fe9f 	bl	80025b2 <HAL_GPIO_TogglePin>
//    	uart_ring_buffer_put("LED Toggle\n", 11);
        vTaskDelay(pdMS_TO_TICKS(500));
 8001874:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001878:	f009 f85c 	bl	800a934 <vTaskDelay>
    	HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_1);
 800187c:	bf00      	nop
 800187e:	e7f5      	b.n	800186c <TaskBlinkLED+0x8>
 8001880:	40022000 	.word	0x40022000

08001884 <vApplicationStackOverflowHook>:
		vTaskDelay(50);
	}
}

void vApplicationStackOverflowHook (TaskHandle_t xTask, signed char *pcTaskName)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]

}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800189a:	b480      	push	{r7}
 800189c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800189e:	b672      	cpsid	i
}
 80018a0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018a2:	bf00      	nop
 80018a4:	e7fd      	b.n	80018a2 <Error_Handler+0x8>
	...

080018a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80018ae:	4b11      	ldr	r3, [pc, #68]	@ (80018f4 <HAL_MspInit+0x4c>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b2:	4a10      	ldr	r2, [pc, #64]	@ (80018f4 <HAL_MspInit+0x4c>)
 80018b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ba:	4b0e      	ldr	r3, [pc, #56]	@ (80018f4 <HAL_MspInit+0x4c>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018c2:	607b      	str	r3, [r7, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c6:	4b0b      	ldr	r3, [pc, #44]	@ (80018f4 <HAL_MspInit+0x4c>)
 80018c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ca:	4a0a      	ldr	r2, [pc, #40]	@ (80018f4 <HAL_MspInit+0x4c>)
 80018cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80018d2:	4b08      	ldr	r3, [pc, #32]	@ (80018f4 <HAL_MspInit+0x4c>)
 80018d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018da:	603b      	str	r3, [r7, #0]
 80018dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018de:	2200      	movs	r2, #0
 80018e0:	210f      	movs	r1, #15
 80018e2:	f06f 0001 	mvn.w	r0, #1
 80018e6:	f000 fb76 	bl	8001fd6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40023800 	.word	0x40023800

080018f8 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a0a      	ldr	r2, [pc, #40]	@ (8001930 <HAL_CRC_MspInit+0x38>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d10b      	bne.n	8001922 <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800190a:	4b0a      	ldr	r3, [pc, #40]	@ (8001934 <HAL_CRC_MspInit+0x3c>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190e:	4a09      	ldr	r2, [pc, #36]	@ (8001934 <HAL_CRC_MspInit+0x3c>)
 8001910:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001914:	6313      	str	r3, [r2, #48]	@ 0x30
 8001916:	4b07      	ldr	r3, [pc, #28]	@ (8001934 <HAL_CRC_MspInit+0x3c>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8001922:	bf00      	nop
 8001924:	3714      	adds	r7, #20
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	40023000 	.word	0x40023000
 8001934:	40023800 	.word	0x40023800

08001938 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a0a      	ldr	r2, [pc, #40]	@ (8001970 <HAL_TIM_Base_MspInit+0x38>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d10b      	bne.n	8001962 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800194a:	4b0a      	ldr	r3, [pc, #40]	@ (8001974 <HAL_TIM_Base_MspInit+0x3c>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194e:	4a09      	ldr	r2, [pc, #36]	@ (8001974 <HAL_TIM_Base_MspInit+0x3c>)
 8001950:	f043 0302 	orr.w	r3, r3, #2
 8001954:	6413      	str	r3, [r2, #64]	@ 0x40
 8001956:	4b07      	ldr	r3, [pc, #28]	@ (8001974 <HAL_TIM_Base_MspInit+0x3c>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001962:	bf00      	nop
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	40000400 	.word	0x40000400
 8001974:	40023800 	.word	0x40023800

08001978 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800197e:	1d3b      	adds	r3, r7, #4
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800198c:	4b3a      	ldr	r3, [pc, #232]	@ (8001a78 <HAL_FMC_MspInit+0x100>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d16d      	bne.n	8001a70 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8001994:	4b38      	ldr	r3, [pc, #224]	@ (8001a78 <HAL_FMC_MspInit+0x100>)
 8001996:	2201      	movs	r2, #1
 8001998:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800199a:	4b38      	ldr	r3, [pc, #224]	@ (8001a7c <HAL_FMC_MspInit+0x104>)
 800199c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800199e:	4a37      	ldr	r2, [pc, #220]	@ (8001a7c <HAL_FMC_MspInit+0x104>)
 80019a0:	f043 0301 	orr.w	r3, r3, #1
 80019a4:	6393      	str	r3, [r2, #56]	@ 0x38
 80019a6:	4b35      	ldr	r3, [pc, #212]	@ (8001a7c <HAL_FMC_MspInit+0x104>)
 80019a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	603b      	str	r3, [r7, #0]
 80019b0:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 80019b2:	f248 1333 	movw	r3, #33075	@ 0x8133
 80019b6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b8:	2302      	movs	r3, #2
 80019ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c0:	2303      	movs	r3, #3
 80019c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019c4:	230c      	movs	r3, #12
 80019c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019c8:	1d3b      	adds	r3, r7, #4
 80019ca:	4619      	mov	r1, r3
 80019cc:	482c      	ldr	r0, [pc, #176]	@ (8001a80 <HAL_FMC_MspInit+0x108>)
 80019ce:	f000 fc2b 	bl	8002228 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 80019d2:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80019d6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d8:	2302      	movs	r3, #2
 80019da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e0:	2303      	movs	r3, #3
 80019e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019e4:	230c      	movs	r3, #12
 80019e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019e8:	1d3b      	adds	r3, r7, #4
 80019ea:	4619      	mov	r1, r3
 80019ec:	4825      	ldr	r0, [pc, #148]	@ (8001a84 <HAL_FMC_MspInit+0x10c>)
 80019ee:	f000 fc1b 	bl	8002228 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80019f2:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80019f6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f8:	2302      	movs	r3, #2
 80019fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a00:	2303      	movs	r3, #3
 8001a02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a04:	230c      	movs	r3, #12
 8001a06:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a08:	1d3b      	adds	r3, r7, #4
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	481e      	ldr	r0, [pc, #120]	@ (8001a88 <HAL_FMC_MspInit+0x110>)
 8001a0e:	f000 fc0b 	bl	8002228 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 8001a12:	2328      	movs	r3, #40	@ 0x28
 8001a14:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a16:	2302      	movs	r3, #2
 8001a18:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a22:	230c      	movs	r3, #12
 8001a24:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001a26:	1d3b      	adds	r3, r7, #4
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4818      	ldr	r0, [pc, #96]	@ (8001a8c <HAL_FMC_MspInit+0x114>)
 8001a2c:	f000 fbfc 	bl	8002228 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a30:	2308      	movs	r3, #8
 8001a32:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a34:	2302      	movs	r3, #2
 8001a36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a40:	230c      	movs	r3, #12
 8001a42:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a44:	1d3b      	adds	r3, r7, #4
 8001a46:	4619      	mov	r1, r3
 8001a48:	4811      	ldr	r0, [pc, #68]	@ (8001a90 <HAL_FMC_MspInit+0x118>)
 8001a4a:	f000 fbed 	bl	8002228 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14
 8001a4e:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8001a52:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a54:	2302      	movs	r3, #2
 8001a56:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a60:	230c      	movs	r3, #12
 8001a62:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a64:	1d3b      	adds	r3, r7, #4
 8001a66:	4619      	mov	r1, r3
 8001a68:	480a      	ldr	r0, [pc, #40]	@ (8001a94 <HAL_FMC_MspInit+0x11c>)
 8001a6a:	f000 fbdd 	bl	8002228 <HAL_GPIO_Init>
 8001a6e:	e000      	b.n	8001a72 <HAL_FMC_MspInit+0xfa>
    return;
 8001a70:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20000404 	.word	0x20000404
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	40021800 	.word	0x40021800
 8001a84:	40020c00 	.word	0x40020c00
 8001a88:	40021400 	.word	0x40021400
 8001a8c:	40021c00 	.word	0x40021c00
 8001a90:	40020800 	.word	0x40020800
 8001a94:	40021000 	.word	0x40021000

08001a98 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001aa0:	f7ff ff6a 	bl	8001978 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001aa4:	bf00      	nop
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ab0:	bf00      	nop
 8001ab2:	e7fd      	b.n	8001ab0 <NMI_Handler+0x4>

08001ab4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ab8:	bf00      	nop
 8001aba:	e7fd      	b.n	8001ab8 <HardFault_Handler+0x4>

08001abc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ac0:	bf00      	nop
 8001ac2:	e7fd      	b.n	8001ac0 <MemManage_Handler+0x4>

08001ac4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ac8:	bf00      	nop
 8001aca:	e7fd      	b.n	8001ac8 <BusFault_Handler+0x4>

08001acc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ad0:	bf00      	nop
 8001ad2:	e7fd      	b.n	8001ad0 <UsageFault_Handler+0x4>

08001ad4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ae6:	f000 f957 	bl	8001d98 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001aea:	f009 fcb3 	bl	800b454 <xTaskGetSchedulerState>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d001      	beq.n	8001af8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001af4:	f00a faa0 	bl	800c038 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001af8:	bf00      	nop
 8001afa:	bd80      	pop	{r7, pc}

08001afc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	uart_IRQ_handler();
 8001b00:	f00a fe2e 	bl	800c760 <uart_IRQ_handler>
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001b04:	bf00      	nop
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001b0c:	4802      	ldr	r0, [pc, #8]	@ (8001b18 <OTG_HS_IRQHandler+0x10>)
 8001b0e:	f000 fea2 	bl	8002856 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	2000f73c 	.word	0x2000f73c

08001b1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  return 1;
 8001b20:	2301      	movs	r3, #1
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <_kill>:

int _kill(int pid, int sig)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b36:	f00c fef9 	bl	800e92c <__errno>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2216      	movs	r2, #22
 8001b3e:	601a      	str	r2, [r3, #0]
  return -1;
 8001b40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <_exit>:

void _exit (int status)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b54:	f04f 31ff 	mov.w	r1, #4294967295
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f7ff ffe7 	bl	8001b2c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b5e:	bf00      	nop
 8001b60:	e7fd      	b.n	8001b5e <_exit+0x12>

08001b62 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b086      	sub	sp, #24
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	60f8      	str	r0, [r7, #12]
 8001b6a:	60b9      	str	r1, [r7, #8]
 8001b6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b6e:	2300      	movs	r3, #0
 8001b70:	617b      	str	r3, [r7, #20]
 8001b72:	e00a      	b.n	8001b8a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b74:	f3af 8000 	nop.w
 8001b78:	4601      	mov	r1, r0
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	1c5a      	adds	r2, r3, #1
 8001b7e:	60ba      	str	r2, [r7, #8]
 8001b80:	b2ca      	uxtb	r2, r1
 8001b82:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	3301      	adds	r3, #1
 8001b88:	617b      	str	r3, [r7, #20]
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	dbf0      	blt.n	8001b74 <_read+0x12>
  }

  return len;
 8001b92:	687b      	ldr	r3, [r7, #4]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3718      	adds	r7, #24
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]
 8001bac:	e009      	b.n	8001bc2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	1c5a      	adds	r2, r3, #1
 8001bb2:	60ba      	str	r2, [r7, #8]
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	617b      	str	r3, [r7, #20]
 8001bc2:	697a      	ldr	r2, [r7, #20]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	dbf1      	blt.n	8001bae <_write+0x12>
  }
  return len;
 8001bca:	687b      	ldr	r3, [r7, #4]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3718      	adds	r7, #24
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <_close>:

int _close(int file)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bdc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bfc:	605a      	str	r2, [r3, #4]
  return 0;
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <_isatty>:

int _isatty(int file)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c14:	2301      	movs	r3, #1
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b085      	sub	sp, #20
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	60f8      	str	r0, [r7, #12]
 8001c2a:	60b9      	str	r1, [r7, #8]
 8001c2c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3714      	adds	r7, #20
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c44:	4a14      	ldr	r2, [pc, #80]	@ (8001c98 <_sbrk+0x5c>)
 8001c46:	4b15      	ldr	r3, [pc, #84]	@ (8001c9c <_sbrk+0x60>)
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c50:	4b13      	ldr	r3, [pc, #76]	@ (8001ca0 <_sbrk+0x64>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d102      	bne.n	8001c5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c58:	4b11      	ldr	r3, [pc, #68]	@ (8001ca0 <_sbrk+0x64>)
 8001c5a:	4a12      	ldr	r2, [pc, #72]	@ (8001ca4 <_sbrk+0x68>)
 8001c5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c5e:	4b10      	ldr	r3, [pc, #64]	@ (8001ca0 <_sbrk+0x64>)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4413      	add	r3, r2
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d207      	bcs.n	8001c7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c6c:	f00c fe5e 	bl	800e92c <__errno>
 8001c70:	4603      	mov	r3, r0
 8001c72:	220c      	movs	r2, #12
 8001c74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c76:	f04f 33ff 	mov.w	r3, #4294967295
 8001c7a:	e009      	b.n	8001c90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c7c:	4b08      	ldr	r3, [pc, #32]	@ (8001ca0 <_sbrk+0x64>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c82:	4b07      	ldr	r3, [pc, #28]	@ (8001ca0 <_sbrk+0x64>)
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4413      	add	r3, r2
 8001c8a:	4a05      	ldr	r2, [pc, #20]	@ (8001ca0 <_sbrk+0x64>)
 8001c8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3718      	adds	r7, #24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20050000 	.word	0x20050000
 8001c9c:	00000400 	.word	0x00000400
 8001ca0:	20000408 	.word	0x20000408
 8001ca4:	2000fd68 	.word	0x2000fd68

08001ca8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cac:	4b06      	ldr	r3, [pc, #24]	@ (8001cc8 <SystemInit+0x20>)
 8001cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cb2:	4a05      	ldr	r2, [pc, #20]	@ (8001cc8 <SystemInit+0x20>)
 8001cb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	e000ed00 	.word	0xe000ed00

08001ccc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ccc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d04 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cd0:	f7ff ffea 	bl	8001ca8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cd4:	480c      	ldr	r0, [pc, #48]	@ (8001d08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cd6:	490d      	ldr	r1, [pc, #52]	@ (8001d0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cd8:	4a0d      	ldr	r2, [pc, #52]	@ (8001d10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cdc:	e002      	b.n	8001ce4 <LoopCopyDataInit>

08001cde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ce0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ce2:	3304      	adds	r3, #4

08001ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ce4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ce6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ce8:	d3f9      	bcc.n	8001cde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cea:	4a0a      	ldr	r2, [pc, #40]	@ (8001d14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cec:	4c0a      	ldr	r4, [pc, #40]	@ (8001d18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cf0:	e001      	b.n	8001cf6 <LoopFillZerobss>

08001cf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cf4:	3204      	adds	r2, #4

08001cf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cf8:	d3fb      	bcc.n	8001cf2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001cfa:	f00c fe1d 	bl	800e938 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cfe:	f7ff fa79 	bl	80011f4 <main>
  bx  lr    
 8001d02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d04:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001d08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d0c:	200002d8 	.word	0x200002d8
  ldr r2, =_sidata
 8001d10:	080109e4 	.word	0x080109e4
  ldr r2, =_sbss
 8001d14:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 8001d18:	2000fd68 	.word	0x2000fd68

08001d1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d1c:	e7fe      	b.n	8001d1c <ADC_IRQHandler>

08001d1e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d22:	2003      	movs	r0, #3
 8001d24:	f000 f94c 	bl	8001fc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d28:	200f      	movs	r0, #15
 8001d2a:	f000 f805 	bl	8001d38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d2e:	f7ff fdbb 	bl	80018a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d40:	4b12      	ldr	r3, [pc, #72]	@ (8001d8c <HAL_InitTick+0x54>)
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	4b12      	ldr	r3, [pc, #72]	@ (8001d90 <HAL_InitTick+0x58>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	4619      	mov	r1, r3
 8001d4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d56:	4618      	mov	r0, r3
 8001d58:	f000 f967 	bl	800202a <HAL_SYSTICK_Config>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e00e      	b.n	8001d84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2b0f      	cmp	r3, #15
 8001d6a:	d80a      	bhi.n	8001d82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	6879      	ldr	r1, [r7, #4]
 8001d70:	f04f 30ff 	mov.w	r0, #4294967295
 8001d74:	f000 f92f 	bl	8001fd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d78:	4a06      	ldr	r2, [pc, #24]	@ (8001d94 <HAL_InitTick+0x5c>)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	e000      	b.n	8001d84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	20000000 	.word	0x20000000
 8001d90:	20000008 	.word	0x20000008
 8001d94:	20000004 	.word	0x20000004

08001d98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d9c:	4b06      	ldr	r3, [pc, #24]	@ (8001db8 <HAL_IncTick+0x20>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	461a      	mov	r2, r3
 8001da2:	4b06      	ldr	r3, [pc, #24]	@ (8001dbc <HAL_IncTick+0x24>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4413      	add	r3, r2
 8001da8:	4a04      	ldr	r2, [pc, #16]	@ (8001dbc <HAL_IncTick+0x24>)
 8001daa:	6013      	str	r3, [r2, #0]
}
 8001dac:	bf00      	nop
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	20000008 	.word	0x20000008
 8001dbc:	2000040c 	.word	0x2000040c

08001dc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8001dc4:	4b03      	ldr	r3, [pc, #12]	@ (8001dd4 <HAL_GetTick+0x14>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	2000040c 	.word	0x2000040c

08001dd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001de0:	f7ff ffee 	bl	8001dc0 <HAL_GetTick>
 8001de4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df0:	d005      	beq.n	8001dfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001df2:	4b0a      	ldr	r3, [pc, #40]	@ (8001e1c <HAL_Delay+0x44>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	461a      	mov	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001dfe:	bf00      	nop
 8001e00:	f7ff ffde 	bl	8001dc0 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d8f7      	bhi.n	8001e00 <HAL_Delay+0x28>
  {
  }
}
 8001e10:	bf00      	nop
 8001e12:	bf00      	nop
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	20000008 	.word	0x20000008

08001e20 <__NVIC_SetPriorityGrouping>:
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e30:	4b0b      	ldr	r3, [pc, #44]	@ (8001e60 <__NVIC_SetPriorityGrouping+0x40>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e36:	68ba      	ldr	r2, [r7, #8]
 8001e38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e48:	4b06      	ldr	r3, [pc, #24]	@ (8001e64 <__NVIC_SetPriorityGrouping+0x44>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e4e:	4a04      	ldr	r2, [pc, #16]	@ (8001e60 <__NVIC_SetPriorityGrouping+0x40>)
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	60d3      	str	r3, [r2, #12]
}
 8001e54:	bf00      	nop
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr
 8001e60:	e000ed00 	.word	0xe000ed00
 8001e64:	05fa0000 	.word	0x05fa0000

08001e68 <__NVIC_GetPriorityGrouping>:
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e6c:	4b04      	ldr	r3, [pc, #16]	@ (8001e80 <__NVIC_GetPriorityGrouping+0x18>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	0a1b      	lsrs	r3, r3, #8
 8001e72:	f003 0307 	and.w	r3, r3, #7
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <__NVIC_EnableIRQ>:
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	db0b      	blt.n	8001eae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	f003 021f 	and.w	r2, r3, #31
 8001e9c:	4907      	ldr	r1, [pc, #28]	@ (8001ebc <__NVIC_EnableIRQ+0x38>)
 8001e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea2:	095b      	lsrs	r3, r3, #5
 8001ea4:	2001      	movs	r0, #1
 8001ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001eae:	bf00      	nop
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	e000e100 	.word	0xe000e100

08001ec0 <__NVIC_SetPriority>:
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	6039      	str	r1, [r7, #0]
 8001eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	db0a      	blt.n	8001eea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	b2da      	uxtb	r2, r3
 8001ed8:	490c      	ldr	r1, [pc, #48]	@ (8001f0c <__NVIC_SetPriority+0x4c>)
 8001eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ede:	0112      	lsls	r2, r2, #4
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	440b      	add	r3, r1
 8001ee4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001ee8:	e00a      	b.n	8001f00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	b2da      	uxtb	r2, r3
 8001eee:	4908      	ldr	r1, [pc, #32]	@ (8001f10 <__NVIC_SetPriority+0x50>)
 8001ef0:	79fb      	ldrb	r3, [r7, #7]
 8001ef2:	f003 030f 	and.w	r3, r3, #15
 8001ef6:	3b04      	subs	r3, #4
 8001ef8:	0112      	lsls	r2, r2, #4
 8001efa:	b2d2      	uxtb	r2, r2
 8001efc:	440b      	add	r3, r1
 8001efe:	761a      	strb	r2, [r3, #24]
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	e000e100 	.word	0xe000e100
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <NVIC_EncodePriority>:
{
 8001f14:	b480      	push	{r7}
 8001f16:	b089      	sub	sp, #36	@ 0x24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	f1c3 0307 	rsb	r3, r3, #7
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	bf28      	it	cs
 8001f32:	2304      	movcs	r3, #4
 8001f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	3304      	adds	r3, #4
 8001f3a:	2b06      	cmp	r3, #6
 8001f3c:	d902      	bls.n	8001f44 <NVIC_EncodePriority+0x30>
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	3b03      	subs	r3, #3
 8001f42:	e000      	b.n	8001f46 <NVIC_EncodePriority+0x32>
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f48:	f04f 32ff 	mov.w	r2, #4294967295
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43da      	mvns	r2, r3
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	401a      	ands	r2, r3
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	fa01 f303 	lsl.w	r3, r1, r3
 8001f66:	43d9      	mvns	r1, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f6c:	4313      	orrs	r3, r2
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3724      	adds	r7, #36	@ 0x24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
	...

08001f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3b01      	subs	r3, #1
 8001f88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f8c:	d301      	bcc.n	8001f92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e00f      	b.n	8001fb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f92:	4a0a      	ldr	r2, [pc, #40]	@ (8001fbc <SysTick_Config+0x40>)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3b01      	subs	r3, #1
 8001f98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f9a:	210f      	movs	r1, #15
 8001f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa0:	f7ff ff8e 	bl	8001ec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fa4:	4b05      	ldr	r3, [pc, #20]	@ (8001fbc <SysTick_Config+0x40>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001faa:	4b04      	ldr	r3, [pc, #16]	@ (8001fbc <SysTick_Config+0x40>)
 8001fac:	2207      	movs	r2, #7
 8001fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	e000e010 	.word	0xe000e010

08001fc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f7ff ff29 	bl	8001e20 <__NVIC_SetPriorityGrouping>
}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b086      	sub	sp, #24
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	4603      	mov	r3, r0
 8001fde:	60b9      	str	r1, [r7, #8]
 8001fe0:	607a      	str	r2, [r7, #4]
 8001fe2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fe8:	f7ff ff3e 	bl	8001e68 <__NVIC_GetPriorityGrouping>
 8001fec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	68b9      	ldr	r1, [r7, #8]
 8001ff2:	6978      	ldr	r0, [r7, #20]
 8001ff4:	f7ff ff8e 	bl	8001f14 <NVIC_EncodePriority>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ffe:	4611      	mov	r1, r2
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff ff5d 	bl	8001ec0 <__NVIC_SetPriority>
}
 8002006:	bf00      	nop
 8002008:	3718      	adds	r7, #24
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
 8002014:	4603      	mov	r3, r0
 8002016:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff ff31 	bl	8001e84 <__NVIC_EnableIRQ>
}
 8002022:	bf00      	nop
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b082      	sub	sp, #8
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f7ff ffa2 	bl	8001f7c <SysTick_Config>
 8002038:	4603      	mov	r3, r0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
	...

08002044 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e054      	b.n	8002100 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	7f5b      	ldrb	r3, [r3, #29]
 800205a:	b2db      	uxtb	r3, r3
 800205c:	2b00      	cmp	r3, #0
 800205e:	d105      	bne.n	800206c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7ff fc46 	bl	80018f8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2202      	movs	r2, #2
 8002070:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	791b      	ldrb	r3, [r3, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d10c      	bne.n	8002094 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a22      	ldr	r2, [pc, #136]	@ (8002108 <HAL_CRC_Init+0xc4>)
 8002080:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 0218 	bic.w	r2, r2, #24
 8002090:	609a      	str	r2, [r3, #8]
 8002092:	e00c      	b.n	80020ae <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6899      	ldr	r1, [r3, #8]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	461a      	mov	r2, r3
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f834 	bl	800210c <HAL_CRCEx_Polynomial_Set>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e028      	b.n	8002100 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	795b      	ldrb	r3, [r3, #5]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d105      	bne.n	80020c2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f04f 32ff 	mov.w	r2, #4294967295
 80020be:	611a      	str	r2, [r3, #16]
 80020c0:	e004      	b.n	80020cc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	6912      	ldr	r2, [r2, #16]
 80020ca:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	695a      	ldr	r2, [r3, #20]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	430a      	orrs	r2, r1
 80020e0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	699a      	ldr	r2, [r3, #24]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	430a      	orrs	r2, r1
 80020f6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	04c11db7 	.word	0x04c11db7

0800210c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800210c:	b480      	push	{r7}
 800210e:	b087      	sub	sp, #28
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002118:	2300      	movs	r3, #0
 800211a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800211c:	231f      	movs	r3, #31
 800211e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	2b00      	cmp	r3, #0
 8002128:	d102      	bne.n	8002130 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	75fb      	strb	r3, [r7, #23]
 800212e:	e063      	b.n	80021f8 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002130:	bf00      	nop
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1e5a      	subs	r2, r3, #1
 8002136:	613a      	str	r2, [r7, #16]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d009      	beq.n	8002150 <HAL_CRCEx_Polynomial_Set+0x44>
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	f003 031f 	and.w	r3, r3, #31
 8002142:	68ba      	ldr	r2, [r7, #8]
 8002144:	fa22 f303 	lsr.w	r3, r2, r3
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	2b00      	cmp	r3, #0
 800214e:	d0f0      	beq.n	8002132 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b18      	cmp	r3, #24
 8002154:	d846      	bhi.n	80021e4 <HAL_CRCEx_Polynomial_Set+0xd8>
 8002156:	a201      	add	r2, pc, #4	@ (adr r2, 800215c <HAL_CRCEx_Polynomial_Set+0x50>)
 8002158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800215c:	080021eb 	.word	0x080021eb
 8002160:	080021e5 	.word	0x080021e5
 8002164:	080021e5 	.word	0x080021e5
 8002168:	080021e5 	.word	0x080021e5
 800216c:	080021e5 	.word	0x080021e5
 8002170:	080021e5 	.word	0x080021e5
 8002174:	080021e5 	.word	0x080021e5
 8002178:	080021e5 	.word	0x080021e5
 800217c:	080021d9 	.word	0x080021d9
 8002180:	080021e5 	.word	0x080021e5
 8002184:	080021e5 	.word	0x080021e5
 8002188:	080021e5 	.word	0x080021e5
 800218c:	080021e5 	.word	0x080021e5
 8002190:	080021e5 	.word	0x080021e5
 8002194:	080021e5 	.word	0x080021e5
 8002198:	080021e5 	.word	0x080021e5
 800219c:	080021cd 	.word	0x080021cd
 80021a0:	080021e5 	.word	0x080021e5
 80021a4:	080021e5 	.word	0x080021e5
 80021a8:	080021e5 	.word	0x080021e5
 80021ac:	080021e5 	.word	0x080021e5
 80021b0:	080021e5 	.word	0x080021e5
 80021b4:	080021e5 	.word	0x080021e5
 80021b8:	080021e5 	.word	0x080021e5
 80021bc:	080021c1 	.word	0x080021c1
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	2b06      	cmp	r3, #6
 80021c4:	d913      	bls.n	80021ee <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80021ca:	e010      	b.n	80021ee <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	2b07      	cmp	r3, #7
 80021d0:	d90f      	bls.n	80021f2 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80021d6:	e00c      	b.n	80021f2 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	2b0f      	cmp	r3, #15
 80021dc:	d90b      	bls.n	80021f6 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80021e2:	e008      	b.n	80021f6 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	75fb      	strb	r3, [r7, #23]
        break;
 80021e8:	e006      	b.n	80021f8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80021ea:	bf00      	nop
 80021ec:	e004      	b.n	80021f8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80021ee:	bf00      	nop
 80021f0:	e002      	b.n	80021f8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80021f2:	bf00      	nop
 80021f4:	e000      	b.n	80021f8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80021f6:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80021f8:	7dfb      	ldrb	r3, [r7, #23]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d10d      	bne.n	800221a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68ba      	ldr	r2, [r7, #8]
 8002204:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f023 0118 	bic.w	r1, r3, #24
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	430a      	orrs	r2, r1
 8002218:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800221a:	7dfb      	ldrb	r3, [r7, #23]
}
 800221c:	4618      	mov	r0, r3
 800221e:	371c      	adds	r7, #28
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002228:	b480      	push	{r7}
 800222a:	b089      	sub	sp, #36	@ 0x24
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002232:	2300      	movs	r3, #0
 8002234:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002236:	2300      	movs	r3, #0
 8002238:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800223a:	2300      	movs	r3, #0
 800223c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800223e:	2300      	movs	r3, #0
 8002240:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002242:	2300      	movs	r3, #0
 8002244:	61fb      	str	r3, [r7, #28]
 8002246:	e175      	b.n	8002534 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002248:	2201      	movs	r2, #1
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	697a      	ldr	r2, [r7, #20]
 8002258:	4013      	ands	r3, r2
 800225a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	429a      	cmp	r2, r3
 8002262:	f040 8164 	bne.w	800252e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f003 0303 	and.w	r3, r3, #3
 800226e:	2b01      	cmp	r3, #1
 8002270:	d005      	beq.n	800227e <HAL_GPIO_Init+0x56>
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d130      	bne.n	80022e0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	2203      	movs	r2, #3
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	43db      	mvns	r3, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4013      	ands	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	68da      	ldr	r2, [r3, #12]
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022b4:	2201      	movs	r2, #1
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	43db      	mvns	r3, r3
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4013      	ands	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	091b      	lsrs	r3, r3, #4
 80022ca:	f003 0201 	and.w	r2, r3, #1
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f003 0303 	and.w	r3, r3, #3
 80022e8:	2b03      	cmp	r3, #3
 80022ea:	d017      	beq.n	800231c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	2203      	movs	r2, #3
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	43db      	mvns	r3, r3
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4013      	ands	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	689a      	ldr	r2, [r3, #8]
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4313      	orrs	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f003 0303 	and.w	r3, r3, #3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d123      	bne.n	8002370 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	08da      	lsrs	r2, r3, #3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3208      	adds	r2, #8
 8002330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	f003 0307 	and.w	r3, r3, #7
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	220f      	movs	r2, #15
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	43db      	mvns	r3, r3
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4013      	ands	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	691a      	ldr	r2, [r3, #16]
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	f003 0307 	and.w	r3, r3, #7
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4313      	orrs	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	08da      	lsrs	r2, r3, #3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	3208      	adds	r2, #8
 800236a:	69b9      	ldr	r1, [r7, #24]
 800236c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	2203      	movs	r2, #3
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	43db      	mvns	r3, r3
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4013      	ands	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f003 0203 	and.w	r2, r3, #3
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	4313      	orrs	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 80be 	beq.w	800252e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023b2:	4b66      	ldr	r3, [pc, #408]	@ (800254c <HAL_GPIO_Init+0x324>)
 80023b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b6:	4a65      	ldr	r2, [pc, #404]	@ (800254c <HAL_GPIO_Init+0x324>)
 80023b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80023be:	4b63      	ldr	r3, [pc, #396]	@ (800254c <HAL_GPIO_Init+0x324>)
 80023c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80023ca:	4a61      	ldr	r2, [pc, #388]	@ (8002550 <HAL_GPIO_Init+0x328>)
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	089b      	lsrs	r3, r3, #2
 80023d0:	3302      	adds	r3, #2
 80023d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	f003 0303 	and.w	r3, r3, #3
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	220f      	movs	r2, #15
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	43db      	mvns	r3, r3
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	4013      	ands	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a58      	ldr	r2, [pc, #352]	@ (8002554 <HAL_GPIO_Init+0x32c>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d037      	beq.n	8002466 <HAL_GPIO_Init+0x23e>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a57      	ldr	r2, [pc, #348]	@ (8002558 <HAL_GPIO_Init+0x330>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d031      	beq.n	8002462 <HAL_GPIO_Init+0x23a>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a56      	ldr	r2, [pc, #344]	@ (800255c <HAL_GPIO_Init+0x334>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d02b      	beq.n	800245e <HAL_GPIO_Init+0x236>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a55      	ldr	r2, [pc, #340]	@ (8002560 <HAL_GPIO_Init+0x338>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d025      	beq.n	800245a <HAL_GPIO_Init+0x232>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a54      	ldr	r2, [pc, #336]	@ (8002564 <HAL_GPIO_Init+0x33c>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d01f      	beq.n	8002456 <HAL_GPIO_Init+0x22e>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a53      	ldr	r2, [pc, #332]	@ (8002568 <HAL_GPIO_Init+0x340>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d019      	beq.n	8002452 <HAL_GPIO_Init+0x22a>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a52      	ldr	r2, [pc, #328]	@ (800256c <HAL_GPIO_Init+0x344>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d013      	beq.n	800244e <HAL_GPIO_Init+0x226>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a51      	ldr	r2, [pc, #324]	@ (8002570 <HAL_GPIO_Init+0x348>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d00d      	beq.n	800244a <HAL_GPIO_Init+0x222>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a50      	ldr	r2, [pc, #320]	@ (8002574 <HAL_GPIO_Init+0x34c>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d007      	beq.n	8002446 <HAL_GPIO_Init+0x21e>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a4f      	ldr	r2, [pc, #316]	@ (8002578 <HAL_GPIO_Init+0x350>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d101      	bne.n	8002442 <HAL_GPIO_Init+0x21a>
 800243e:	2309      	movs	r3, #9
 8002440:	e012      	b.n	8002468 <HAL_GPIO_Init+0x240>
 8002442:	230a      	movs	r3, #10
 8002444:	e010      	b.n	8002468 <HAL_GPIO_Init+0x240>
 8002446:	2308      	movs	r3, #8
 8002448:	e00e      	b.n	8002468 <HAL_GPIO_Init+0x240>
 800244a:	2307      	movs	r3, #7
 800244c:	e00c      	b.n	8002468 <HAL_GPIO_Init+0x240>
 800244e:	2306      	movs	r3, #6
 8002450:	e00a      	b.n	8002468 <HAL_GPIO_Init+0x240>
 8002452:	2305      	movs	r3, #5
 8002454:	e008      	b.n	8002468 <HAL_GPIO_Init+0x240>
 8002456:	2304      	movs	r3, #4
 8002458:	e006      	b.n	8002468 <HAL_GPIO_Init+0x240>
 800245a:	2303      	movs	r3, #3
 800245c:	e004      	b.n	8002468 <HAL_GPIO_Init+0x240>
 800245e:	2302      	movs	r3, #2
 8002460:	e002      	b.n	8002468 <HAL_GPIO_Init+0x240>
 8002462:	2301      	movs	r3, #1
 8002464:	e000      	b.n	8002468 <HAL_GPIO_Init+0x240>
 8002466:	2300      	movs	r3, #0
 8002468:	69fa      	ldr	r2, [r7, #28]
 800246a:	f002 0203 	and.w	r2, r2, #3
 800246e:	0092      	lsls	r2, r2, #2
 8002470:	4093      	lsls	r3, r2
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4313      	orrs	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002478:	4935      	ldr	r1, [pc, #212]	@ (8002550 <HAL_GPIO_Init+0x328>)
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	089b      	lsrs	r3, r3, #2
 800247e:	3302      	adds	r3, #2
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002486:	4b3d      	ldr	r3, [pc, #244]	@ (800257c <HAL_GPIO_Init+0x354>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	43db      	mvns	r3, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4013      	ands	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024aa:	4a34      	ldr	r2, [pc, #208]	@ (800257c <HAL_GPIO_Init+0x354>)
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024b0:	4b32      	ldr	r3, [pc, #200]	@ (800257c <HAL_GPIO_Init+0x354>)
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	43db      	mvns	r3, r3
 80024ba:	69ba      	ldr	r2, [r7, #24]
 80024bc:	4013      	ands	r3, r2
 80024be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d003      	beq.n	80024d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024d4:	4a29      	ldr	r2, [pc, #164]	@ (800257c <HAL_GPIO_Init+0x354>)
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024da:	4b28      	ldr	r3, [pc, #160]	@ (800257c <HAL_GPIO_Init+0x354>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	43db      	mvns	r3, r3
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	4013      	ands	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024fe:	4a1f      	ldr	r2, [pc, #124]	@ (800257c <HAL_GPIO_Init+0x354>)
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002504:	4b1d      	ldr	r3, [pc, #116]	@ (800257c <HAL_GPIO_Init+0x354>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	43db      	mvns	r3, r3
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4013      	ands	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d003      	beq.n	8002528 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	4313      	orrs	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002528:	4a14      	ldr	r2, [pc, #80]	@ (800257c <HAL_GPIO_Init+0x354>)
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	3301      	adds	r3, #1
 8002532:	61fb      	str	r3, [r7, #28]
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	2b0f      	cmp	r3, #15
 8002538:	f67f ae86 	bls.w	8002248 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800253c:	bf00      	nop
 800253e:	bf00      	nop
 8002540:	3724      	adds	r7, #36	@ 0x24
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	40023800 	.word	0x40023800
 8002550:	40013800 	.word	0x40013800
 8002554:	40020000 	.word	0x40020000
 8002558:	40020400 	.word	0x40020400
 800255c:	40020800 	.word	0x40020800
 8002560:	40020c00 	.word	0x40020c00
 8002564:	40021000 	.word	0x40021000
 8002568:	40021400 	.word	0x40021400
 800256c:	40021800 	.word	0x40021800
 8002570:	40021c00 	.word	0x40021c00
 8002574:	40022000 	.word	0x40022000
 8002578:	40022400 	.word	0x40022400
 800257c:	40013c00 	.word	0x40013c00

08002580 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	460b      	mov	r3, r1
 800258a:	807b      	strh	r3, [r7, #2]
 800258c:	4613      	mov	r3, r2
 800258e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002590:	787b      	ldrb	r3, [r7, #1]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002596:	887a      	ldrh	r2, [r7, #2]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800259c:	e003      	b.n	80025a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800259e:	887b      	ldrh	r3, [r7, #2]
 80025a0:	041a      	lsls	r2, r3, #16
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	619a      	str	r2, [r3, #24]
}
 80025a6:	bf00      	nop
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr

080025b2 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025b2:	b480      	push	{r7}
 80025b4:	b085      	sub	sp, #20
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
 80025ba:	460b      	mov	r3, r1
 80025bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025c4:	887a      	ldrh	r2, [r7, #2]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	4013      	ands	r3, r2
 80025ca:	041a      	lsls	r2, r3, #16
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	43d9      	mvns	r1, r3
 80025d0:	887b      	ldrh	r3, [r7, #2]
 80025d2:	400b      	ands	r3, r1
 80025d4:	431a      	orrs	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	619a      	str	r2, [r3, #24]
}
 80025da:	bf00      	nop
 80025dc:	3714      	adds	r7, #20
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b086      	sub	sp, #24
 80025ea:	af02      	add	r7, sp, #8
 80025ec:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d101      	bne.n	80025f8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e108      	b.n	800280a <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d106      	bne.n	8002618 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f00a fefa 	bl	800d40c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2203      	movs	r2, #3
 800261c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002626:	d102      	bne.n	800262e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f003 fef3 	bl	800641e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6818      	ldr	r0, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	7c1a      	ldrb	r2, [r3, #16]
 8002640:	f88d 2000 	strb.w	r2, [sp]
 8002644:	3304      	adds	r3, #4
 8002646:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002648:	f003 fddc 	bl	8006204 <USB_CoreInit>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d005      	beq.n	800265e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2202      	movs	r2, #2
 8002656:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e0d5      	b.n	800280a <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2100      	movs	r1, #0
 8002664:	4618      	mov	r0, r3
 8002666:	f003 feeb 	bl	8006440 <USB_SetCurrentMode>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d005      	beq.n	800267c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2202      	movs	r2, #2
 8002674:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e0c6      	b.n	800280a <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800267c:	2300      	movs	r3, #0
 800267e:	73fb      	strb	r3, [r7, #15]
 8002680:	e04a      	b.n	8002718 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002682:	7bfa      	ldrb	r2, [r7, #15]
 8002684:	6879      	ldr	r1, [r7, #4]
 8002686:	4613      	mov	r3, r2
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	4413      	add	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	440b      	add	r3, r1
 8002690:	3315      	adds	r3, #21
 8002692:	2201      	movs	r2, #1
 8002694:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002696:	7bfa      	ldrb	r2, [r7, #15]
 8002698:	6879      	ldr	r1, [r7, #4]
 800269a:	4613      	mov	r3, r2
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	4413      	add	r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	440b      	add	r3, r1
 80026a4:	3314      	adds	r3, #20
 80026a6:	7bfa      	ldrb	r2, [r7, #15]
 80026a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80026aa:	7bfa      	ldrb	r2, [r7, #15]
 80026ac:	7bfb      	ldrb	r3, [r7, #15]
 80026ae:	b298      	uxth	r0, r3
 80026b0:	6879      	ldr	r1, [r7, #4]
 80026b2:	4613      	mov	r3, r2
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	4413      	add	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	440b      	add	r3, r1
 80026bc:	332e      	adds	r3, #46	@ 0x2e
 80026be:	4602      	mov	r2, r0
 80026c0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80026c2:	7bfa      	ldrb	r2, [r7, #15]
 80026c4:	6879      	ldr	r1, [r7, #4]
 80026c6:	4613      	mov	r3, r2
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	4413      	add	r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	440b      	add	r3, r1
 80026d0:	3318      	adds	r3, #24
 80026d2:	2200      	movs	r2, #0
 80026d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80026d6:	7bfa      	ldrb	r2, [r7, #15]
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	4613      	mov	r3, r2
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	4413      	add	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	440b      	add	r3, r1
 80026e4:	331c      	adds	r3, #28
 80026e6:	2200      	movs	r2, #0
 80026e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80026ea:	7bfa      	ldrb	r2, [r7, #15]
 80026ec:	6879      	ldr	r1, [r7, #4]
 80026ee:	4613      	mov	r3, r2
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	4413      	add	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	440b      	add	r3, r1
 80026f8:	3320      	adds	r3, #32
 80026fa:	2200      	movs	r2, #0
 80026fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80026fe:	7bfa      	ldrb	r2, [r7, #15]
 8002700:	6879      	ldr	r1, [r7, #4]
 8002702:	4613      	mov	r3, r2
 8002704:	00db      	lsls	r3, r3, #3
 8002706:	4413      	add	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	440b      	add	r3, r1
 800270c:	3324      	adds	r3, #36	@ 0x24
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002712:	7bfb      	ldrb	r3, [r7, #15]
 8002714:	3301      	adds	r3, #1
 8002716:	73fb      	strb	r3, [r7, #15]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	791b      	ldrb	r3, [r3, #4]
 800271c:	7bfa      	ldrb	r2, [r7, #15]
 800271e:	429a      	cmp	r2, r3
 8002720:	d3af      	bcc.n	8002682 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002722:	2300      	movs	r3, #0
 8002724:	73fb      	strb	r3, [r7, #15]
 8002726:	e044      	b.n	80027b2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002728:	7bfa      	ldrb	r2, [r7, #15]
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	4613      	mov	r3, r2
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	4413      	add	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	440b      	add	r3, r1
 8002736:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800273a:	2200      	movs	r2, #0
 800273c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800273e:	7bfa      	ldrb	r2, [r7, #15]
 8002740:	6879      	ldr	r1, [r7, #4]
 8002742:	4613      	mov	r3, r2
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	4413      	add	r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	440b      	add	r3, r1
 800274c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002750:	7bfa      	ldrb	r2, [r7, #15]
 8002752:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002754:	7bfa      	ldrb	r2, [r7, #15]
 8002756:	6879      	ldr	r1, [r7, #4]
 8002758:	4613      	mov	r3, r2
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	4413      	add	r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	440b      	add	r3, r1
 8002762:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002766:	2200      	movs	r2, #0
 8002768:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800276a:	7bfa      	ldrb	r2, [r7, #15]
 800276c:	6879      	ldr	r1, [r7, #4]
 800276e:	4613      	mov	r3, r2
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	4413      	add	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	440b      	add	r3, r1
 8002778:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002780:	7bfa      	ldrb	r2, [r7, #15]
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	4613      	mov	r3, r2
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	4413      	add	r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	440b      	add	r3, r1
 800278e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002792:	2200      	movs	r2, #0
 8002794:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002796:	7bfa      	ldrb	r2, [r7, #15]
 8002798:	6879      	ldr	r1, [r7, #4]
 800279a:	4613      	mov	r3, r2
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	4413      	add	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	440b      	add	r3, r1
 80027a4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027ac:	7bfb      	ldrb	r3, [r7, #15]
 80027ae:	3301      	adds	r3, #1
 80027b0:	73fb      	strb	r3, [r7, #15]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	791b      	ldrb	r3, [r3, #4]
 80027b6:	7bfa      	ldrb	r2, [r7, #15]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d3b5      	bcc.n	8002728 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6818      	ldr	r0, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	7c1a      	ldrb	r2, [r3, #16]
 80027c4:	f88d 2000 	strb.w	r2, [sp]
 80027c8:	3304      	adds	r3, #4
 80027ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027cc:	f003 fe84 	bl	80064d8 <USB_DevInit>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d005      	beq.n	80027e2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2202      	movs	r2, #2
 80027da:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e013      	b.n	800280a <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	7b1b      	ldrb	r3, [r3, #12]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d102      	bne.n	80027fe <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f001 f95b 	bl	8003ab4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f004 fec7 	bl	8007596 <USB_DevDisconnect>

  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b082      	sub	sp, #8
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002820:	2b01      	cmp	r3, #1
 8002822:	d101      	bne.n	8002828 <HAL_PCD_Start+0x16>
 8002824:	2302      	movs	r3, #2
 8002826:	e012      	b.n	800284e <HAL_PCD_Start+0x3c>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_ENABLE(hpcd);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4618      	mov	r0, r3
 8002836:	f003 fde1 	bl	80063fc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f004 fe88 	bl	8007554 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002856:	b590      	push	{r4, r7, lr}
 8002858:	b08d      	sub	sp, #52	@ 0x34
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002864:	6a3b      	ldr	r3, [r7, #32]
 8002866:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4618      	mov	r0, r3
 800286e:	f004 ff46 	bl	80076fe <USB_GetMode>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	f040 84b9 	bne.w	80031ec <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f004 feaa 	bl	80075d8 <USB_ReadInterrupts>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	f000 84af 	beq.w	80031ea <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	0a1b      	lsrs	r3, r3, #8
 8002896:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f004 fe97 	bl	80075d8 <USB_ReadInterrupts>
 80028aa:	4603      	mov	r3, r0
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d107      	bne.n	80028c4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	695a      	ldr	r2, [r3, #20]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f002 0202 	and.w	r2, r2, #2
 80028c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f004 fe85 	bl	80075d8 <USB_ReadInterrupts>
 80028ce:	4603      	mov	r3, r0
 80028d0:	f003 0310 	and.w	r3, r3, #16
 80028d4:	2b10      	cmp	r3, #16
 80028d6:	d161      	bne.n	800299c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	699a      	ldr	r2, [r3, #24]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 0210 	bic.w	r2, r2, #16
 80028e6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80028e8:	6a3b      	ldr	r3, [r7, #32]
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	f003 020f 	and.w	r2, r3, #15
 80028f4:	4613      	mov	r3, r2
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	4413      	add	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	4413      	add	r3, r2
 8002904:	3304      	adds	r3, #4
 8002906:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800290e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002912:	d124      	bne.n	800295e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800291a:	4013      	ands	r3, r2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d035      	beq.n	800298c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	091b      	lsrs	r3, r3, #4
 8002928:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800292a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800292e:	b29b      	uxth	r3, r3
 8002930:	461a      	mov	r2, r3
 8002932:	6a38      	ldr	r0, [r7, #32]
 8002934:	f004 fcbc 	bl	80072b0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	68da      	ldr	r2, [r3, #12]
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	091b      	lsrs	r3, r3, #4
 8002940:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002944:	441a      	add	r2, r3
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	695a      	ldr	r2, [r3, #20]
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	091b      	lsrs	r3, r3, #4
 8002952:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002956:	441a      	add	r2, r3
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	615a      	str	r2, [r3, #20]
 800295c:	e016      	b.n	800298c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8002964:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002968:	d110      	bne.n	800298c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002970:	2208      	movs	r2, #8
 8002972:	4619      	mov	r1, r3
 8002974:	6a38      	ldr	r0, [r7, #32]
 8002976:	f004 fc9b 	bl	80072b0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	695a      	ldr	r2, [r3, #20]
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	091b      	lsrs	r3, r3, #4
 8002982:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002986:	441a      	add	r2, r3
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	699a      	ldr	r2, [r3, #24]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f042 0210 	orr.w	r2, r2, #16
 800299a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f004 fe19 	bl	80075d8 <USB_ReadInterrupts>
 80029a6:	4603      	mov	r3, r0
 80029a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029ac:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80029b0:	f040 80a7 	bne.w	8002b02 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80029b4:	2300      	movs	r3, #0
 80029b6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4618      	mov	r0, r3
 80029be:	f004 fe1e 	bl	80075fe <USB_ReadDevAllOutEpInterrupt>
 80029c2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80029c4:	e099      	b.n	8002afa <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80029c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 808e 	beq.w	8002aee <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029d8:	b2d2      	uxtb	r2, r2
 80029da:	4611      	mov	r1, r2
 80029dc:	4618      	mov	r0, r3
 80029de:	f004 fe42 	bl	8007666 <USB_ReadDevOutEPInterrupt>
 80029e2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00c      	beq.n	8002a08 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80029ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f0:	015a      	lsls	r2, r3, #5
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	4413      	add	r3, r2
 80029f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029fa:	461a      	mov	r2, r3
 80029fc:	2301      	movs	r3, #1
 80029fe:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002a00:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 fed0 	bl	80037a8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	f003 0308 	and.w	r3, r3, #8
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00c      	beq.n	8002a2c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a14:	015a      	lsls	r2, r3, #5
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	4413      	add	r3, r2
 8002a1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a1e:	461a      	mov	r2, r3
 8002a20:	2308      	movs	r3, #8
 8002a22:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002a24:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 ffa6 	bl	8003978 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	f003 0310 	and.w	r3, r3, #16
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d008      	beq.n	8002a48 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a38:	015a      	lsls	r2, r3, #5
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a42:	461a      	mov	r2, r3
 8002a44:	2310      	movs	r3, #16
 8002a46:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d030      	beq.n	8002ab4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002a52:	6a3b      	ldr	r3, [r7, #32]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a5a:	2b80      	cmp	r3, #128	@ 0x80
 8002a5c:	d109      	bne.n	8002a72 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	69fa      	ldr	r2, [r7, #28]
 8002a68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a6c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a70:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002a72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a74:	4613      	mov	r3, r2
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	4413      	add	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	4413      	add	r3, r2
 8002a84:	3304      	adds	r3, #4
 8002a86:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	78db      	ldrb	r3, [r3, #3]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d108      	bne.n	8002aa2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	2200      	movs	r2, #0
 8002a94:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f00a fe1b 	bl	800d6d8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa4:	015a      	lsls	r2, r3, #5
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002aae:	461a      	mov	r2, r3
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	f003 0320 	and.w	r3, r3, #32
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d008      	beq.n	8002ad0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac0:	015a      	lsls	r2, r3, #5
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002aca:	461a      	mov	r2, r3
 8002acc:	2320      	movs	r3, #32
 8002ace:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d009      	beq.n	8002aee <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002adc:	015a      	lsls	r2, r3, #5
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002aec:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af0:	3301      	adds	r3, #1
 8002af2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002af6:	085b      	lsrs	r3, r3, #1
 8002af8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f47f af62 	bne.w	80029c6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f004 fd66 	bl	80075d8 <USB_ReadInterrupts>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b12:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002b16:	f040 80db 	bne.w	8002cd0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f004 fd87 	bl	8007632 <USB_ReadDevAllInEpInterrupt>
 8002b24:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002b26:	2300      	movs	r3, #0
 8002b28:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002b2a:	e0cd      	b.n	8002cc8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f000 80c2 	beq.w	8002cbc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b3e:	b2d2      	uxtb	r2, r2
 8002b40:	4611      	mov	r1, r2
 8002b42:	4618      	mov	r0, r3
 8002b44:	f004 fdad 	bl	80076a2 <USB_ReadDevInEPInterrupt>
 8002b48:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d057      	beq.n	8002c04 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b56:	f003 030f 	and.w	r3, r3, #15
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	69f9      	ldr	r1, [r7, #28]
 8002b70:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002b74:	4013      	ands	r3, r2
 8002b76:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7a:	015a      	lsls	r2, r3, #5
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	4413      	add	r3, r2
 8002b80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b84:	461a      	mov	r2, r3
 8002b86:	2301      	movs	r3, #1
 8002b88:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	799b      	ldrb	r3, [r3, #6]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d132      	bne.n	8002bf8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b96:	4613      	mov	r3, r2
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	4413      	add	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	440b      	add	r3, r1
 8002ba0:	3320      	adds	r3, #32
 8002ba2:	6819      	ldr	r1, [r3, #0]
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ba8:	4613      	mov	r3, r2
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	4413      	add	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4403      	add	r3, r0
 8002bb2:	331c      	adds	r3, #28
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4419      	add	r1, r3
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	4413      	add	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4403      	add	r3, r0
 8002bc6:	3320      	adds	r3, #32
 8002bc8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d113      	bne.n	8002bf8 <HAL_PCD_IRQHandler+0x3a2>
 8002bd0:	6879      	ldr	r1, [r7, #4]
 8002bd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	4413      	add	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	440b      	add	r3, r1
 8002bde:	3324      	adds	r3, #36	@ 0x24
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d108      	bne.n	8002bf8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6818      	ldr	r0, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	f004 fdb6 	bl	8007764 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f00a fce5 	bl	800d5ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	f003 0308 	and.w	r3, r3, #8
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d008      	beq.n	8002c20 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c10:	015a      	lsls	r2, r3, #5
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	4413      	add	r3, r2
 8002c16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	2308      	movs	r3, #8
 8002c1e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	f003 0310 	and.w	r3, r3, #16
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d008      	beq.n	8002c3c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2c:	015a      	lsls	r2, r3, #5
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	4413      	add	r3, r2
 8002c32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c36:	461a      	mov	r2, r3
 8002c38:	2310      	movs	r3, #16
 8002c3a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d008      	beq.n	8002c58 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c48:	015a      	lsls	r2, r3, #5
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c52:	461a      	mov	r2, r3
 8002c54:	2340      	movs	r3, #64	@ 0x40
 8002c56:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d023      	beq.n	8002caa <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002c62:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c64:	6a38      	ldr	r0, [r7, #32]
 8002c66:	f003 fd95 	bl	8006794 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002c6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	4413      	add	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	3310      	adds	r3, #16
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	4413      	add	r3, r2
 8002c7a:	3304      	adds	r3, #4
 8002c7c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	78db      	ldrb	r3, [r3, #3]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d108      	bne.n	8002c98 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	4619      	mov	r1, r3
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f00a fd32 	bl	800d6fc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9a:	015a      	lsls	r2, r3, #5
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d003      	beq.n	8002cbc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002cb4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 fcea 	bl	8003690 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cc4:	085b      	lsrs	r3, r3, #1
 8002cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f47f af2e 	bne.w	8002b2c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f004 fc7f 	bl	80075d8 <USB_ReadInterrupts>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002ce0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002ce4:	d122      	bne.n	8002d2c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	69fa      	ldr	r2, [r7, #28]
 8002cf0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002cf4:	f023 0301 	bic.w	r3, r3, #1
 8002cf8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d108      	bne.n	8002d16 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f00a feb2 	bl	800da78 <HAL_PCDEx_LPM_Callback>
 8002d14:	e002      	b.n	8002d1c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f00a fcd0 	bl	800d6bc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	695a      	ldr	r2, [r3, #20]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002d2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f004 fc51 	bl	80075d8 <USB_ReadInterrupts>
 8002d36:	4603      	mov	r3, r0
 8002d38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d40:	d112      	bne.n	8002d68 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d102      	bne.n	8002d58 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f00a fc8c 	bl	800d670 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	695a      	ldr	r2, [r3, #20]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002d66:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f004 fc33 	bl	80075d8 <USB_ReadInterrupts>
 8002d72:	4603      	mov	r3, r0
 8002d74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d7c:	d121      	bne.n	8002dc2 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	695a      	ldr	r2, [r3, #20]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8002d8c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d111      	bne.n	8002dbc <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002da6:	089b      	lsrs	r3, r3, #2
 8002da8:	f003 020f 	and.w	r2, r3, #15
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002db2:	2101      	movs	r1, #1
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f00a fe5f 	bl	800da78 <HAL_PCDEx_LPM_Callback>
 8002dba:	e002      	b.n	8002dc2 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f00a fc57 	bl	800d670 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f004 fc06 	bl	80075d8 <USB_ReadInterrupts>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002dd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dd6:	f040 80b7 	bne.w	8002f48 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	69fa      	ldr	r2, [r7, #28]
 8002de4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002de8:	f023 0301 	bic.w	r3, r3, #1
 8002dec:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2110      	movs	r1, #16
 8002df4:	4618      	mov	r0, r3
 8002df6:	f003 fccd 	bl	8006794 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002dfe:	e046      	b.n	8002e8e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e02:	015a      	lsls	r2, r3, #5
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	4413      	add	r3, r2
 8002e08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002e12:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e16:	015a      	lsls	r2, r3, #5
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e24:	0151      	lsls	r1, r2, #5
 8002e26:	69fa      	ldr	r2, [r7, #28]
 8002e28:	440a      	add	r2, r1
 8002e2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002e2e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002e32:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e36:	015a      	lsls	r2, r3, #5
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e40:	461a      	mov	r2, r3
 8002e42:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002e46:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e4a:	015a      	lsls	r2, r3, #5
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	4413      	add	r3, r2
 8002e50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e58:	0151      	lsls	r1, r2, #5
 8002e5a:	69fa      	ldr	r2, [r7, #28]
 8002e5c:	440a      	add	r2, r1
 8002e5e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002e62:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002e66:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e6a:	015a      	lsls	r2, r3, #5
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	4413      	add	r3, r2
 8002e70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e78:	0151      	lsls	r1, r2, #5
 8002e7a:	69fa      	ldr	r2, [r7, #28]
 8002e7c:	440a      	add	r2, r1
 8002e7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002e82:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002e86:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	791b      	ldrb	r3, [r3, #4]
 8002e92:	461a      	mov	r2, r3
 8002e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d3b2      	bcc.n	8002e00 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ea0:	69db      	ldr	r3, [r3, #28]
 8002ea2:	69fa      	ldr	r2, [r7, #28]
 8002ea4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ea8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002eac:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	7bdb      	ldrb	r3, [r3, #15]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d016      	beq.n	8002ee4 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ebc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ec0:	69fa      	ldr	r2, [r7, #28]
 8002ec2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ec6:	f043 030b 	orr.w	r3, r3, #11
 8002eca:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed6:	69fa      	ldr	r2, [r7, #28]
 8002ed8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002edc:	f043 030b 	orr.w	r3, r3, #11
 8002ee0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ee2:	e015      	b.n	8002f10 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002eea:	695a      	ldr	r2, [r3, #20]
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	f242 032b 	movw	r3, #8235	@ 0x202b
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	69fa      	ldr	r2, [r7, #28]
 8002f06:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f0a:	f043 030b 	orr.w	r3, r3, #11
 8002f0e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	69fa      	ldr	r2, [r7, #28]
 8002f1a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f1e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002f22:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6818      	ldr	r0, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f32:	461a      	mov	r2, r3
 8002f34:	f004 fc16 	bl	8007764 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695a      	ldr	r2, [r3, #20]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002f46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f004 fb43 	bl	80075d8 <USB_ReadInterrupts>
 8002f52:	4603      	mov	r3, r0
 8002f54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f5c:	d123      	bne.n	8002fa6 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f004 fbda 	bl	800771c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f003 fc8a 	bl	8006886 <USB_GetDevSpeed>
 8002f72:	4603      	mov	r3, r0
 8002f74:	461a      	mov	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681c      	ldr	r4, [r3, #0]
 8002f7e:	f001 fa63 	bl	8004448 <HAL_RCC_GetHCLKFreq>
 8002f82:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f88:	461a      	mov	r2, r3
 8002f8a:	4620      	mov	r0, r4
 8002f8c:	f003 f994 	bl	80062b8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f00a fb44 	bl	800d61e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	695a      	ldr	r2, [r3, #20]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002fa4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f004 fb14 	bl	80075d8 <USB_ReadInterrupts>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	f003 0308 	and.w	r3, r3, #8
 8002fb6:	2b08      	cmp	r3, #8
 8002fb8:	d10a      	bne.n	8002fd0 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f00a fb21 	bl	800d602 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	695a      	ldr	r2, [r3, #20]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f002 0208 	and.w	r2, r2, #8
 8002fce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f004 faff 	bl	80075d8 <USB_ReadInterrupts>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fe0:	2b80      	cmp	r3, #128	@ 0x80
 8002fe2:	d123      	bne.n	800302c <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002fe4:	6a3b      	ldr	r3, [r7, #32]
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002fec:	6a3b      	ldr	r3, [r7, #32]
 8002fee:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ff4:	e014      	b.n	8003020 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002ff6:	6879      	ldr	r1, [r7, #4]
 8002ff8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	4413      	add	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	440b      	add	r3, r1
 8003004:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d105      	bne.n	800301a <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800300e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003010:	b2db      	uxtb	r3, r3
 8003012:	4619      	mov	r1, r3
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 fb0a 	bl	800362e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800301a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800301c:	3301      	adds	r3, #1
 800301e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	791b      	ldrb	r3, [r3, #4]
 8003024:	461a      	mov	r2, r3
 8003026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003028:	4293      	cmp	r3, r2
 800302a:	d3e4      	bcc.n	8002ff6 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4618      	mov	r0, r3
 8003032:	f004 fad1 	bl	80075d8 <USB_ReadInterrupts>
 8003036:	4603      	mov	r3, r0
 8003038:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800303c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003040:	d13c      	bne.n	80030bc <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003042:	2301      	movs	r3, #1
 8003044:	627b      	str	r3, [r7, #36]	@ 0x24
 8003046:	e02b      	b.n	80030a0 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304a:	015a      	lsls	r2, r3, #5
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	4413      	add	r3, r2
 8003050:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003058:	6879      	ldr	r1, [r7, #4]
 800305a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800305c:	4613      	mov	r3, r2
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	4413      	add	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	440b      	add	r3, r1
 8003066:	3318      	adds	r3, #24
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d115      	bne.n	800309a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800306e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003070:	2b00      	cmp	r3, #0
 8003072:	da12      	bge.n	800309a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003074:	6879      	ldr	r1, [r7, #4]
 8003076:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003078:	4613      	mov	r3, r2
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	4413      	add	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	440b      	add	r3, r1
 8003082:	3317      	adds	r3, #23
 8003084:	2201      	movs	r2, #1
 8003086:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800308a:	b2db      	uxtb	r3, r3
 800308c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003090:	b2db      	uxtb	r3, r3
 8003092:	4619      	mov	r1, r3
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 faca 	bl	800362e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800309a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800309c:	3301      	adds	r3, #1
 800309e:	627b      	str	r3, [r7, #36]	@ 0x24
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	791b      	ldrb	r3, [r3, #4]
 80030a4:	461a      	mov	r2, r3
 80030a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d3cd      	bcc.n	8003048 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	695a      	ldr	r2, [r3, #20]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80030ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f004 fa89 	bl	80075d8 <USB_ReadInterrupts>
 80030c6:	4603      	mov	r3, r0
 80030c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80030d0:	d156      	bne.n	8003180 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030d2:	2301      	movs	r3, #1
 80030d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80030d6:	e045      	b.n	8003164 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80030d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030da:	015a      	lsls	r2, r3, #5
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	4413      	add	r3, r2
 80030e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80030e8:	6879      	ldr	r1, [r7, #4]
 80030ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030ec:	4613      	mov	r3, r2
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	4413      	add	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	440b      	add	r3, r1
 80030f6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d12e      	bne.n	800315e <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003100:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003102:	2b00      	cmp	r3, #0
 8003104:	da2b      	bge.n	800315e <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	0c1a      	lsrs	r2, r3, #16
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003110:	4053      	eors	r3, r2
 8003112:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003116:	2b00      	cmp	r3, #0
 8003118:	d121      	bne.n	800315e <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800311a:	6879      	ldr	r1, [r7, #4]
 800311c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800311e:	4613      	mov	r3, r2
 8003120:	00db      	lsls	r3, r3, #3
 8003122:	4413      	add	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	440b      	add	r3, r1
 8003128:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800312c:	2201      	movs	r2, #1
 800312e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003130:	6a3b      	ldr	r3, [r7, #32]
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003138:	6a3b      	ldr	r3, [r7, #32]
 800313a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800313c:	6a3b      	ldr	r3, [r7, #32]
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003144:	2b00      	cmp	r3, #0
 8003146:	d10a      	bne.n	800315e <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	69fa      	ldr	r2, [r7, #28]
 8003152:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003156:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800315a:	6053      	str	r3, [r2, #4]
            break;
 800315c:	e008      	b.n	8003170 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800315e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003160:	3301      	adds	r3, #1
 8003162:	627b      	str	r3, [r7, #36]	@ 0x24
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	791b      	ldrb	r3, [r3, #4]
 8003168:	461a      	mov	r2, r3
 800316a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800316c:	4293      	cmp	r3, r2
 800316e:	d3b3      	bcc.n	80030d8 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	695a      	ldr	r2, [r3, #20]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800317e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4618      	mov	r0, r3
 8003186:	f004 fa27 	bl	80075d8 <USB_ReadInterrupts>
 800318a:	4603      	mov	r3, r0
 800318c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003190:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003194:	d10a      	bne.n	80031ac <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f00a fac2 	bl	800d720 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	695a      	ldr	r2, [r3, #20]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80031aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f004 fa11 	bl	80075d8 <USB_ReadInterrupts>
 80031b6:	4603      	mov	r3, r0
 80031b8:	f003 0304 	and.w	r3, r3, #4
 80031bc:	2b04      	cmp	r3, #4
 80031be:	d115      	bne.n	80031ec <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	f003 0304 	and.w	r3, r3, #4
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d002      	beq.n	80031d8 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f00a fab2 	bl	800d73c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6859      	ldr	r1, [r3, #4]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	430a      	orrs	r2, r1
 80031e6:	605a      	str	r2, [r3, #4]
 80031e8:	e000      	b.n	80031ec <HAL_PCD_IRQHandler+0x996>
      return;
 80031ea:	bf00      	nop
    }
  }
}
 80031ec:	3734      	adds	r7, #52	@ 0x34
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd90      	pop	{r4, r7, pc}

080031f2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b082      	sub	sp, #8
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
 80031fa:	460b      	mov	r3, r1
 80031fc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003204:	2b01      	cmp	r3, #1
 8003206:	d101      	bne.n	800320c <HAL_PCD_SetAddress+0x1a>
 8003208:	2302      	movs	r3, #2
 800320a:	e012      	b.n	8003232 <HAL_PCD_SetAddress+0x40>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	78fa      	ldrb	r2, [r7, #3]
 8003218:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	78fa      	ldrb	r2, [r7, #3]
 8003220:	4611      	mov	r1, r2
 8003222:	4618      	mov	r0, r3
 8003224:	f004 f970 	bl	8007508 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800323a:	b580      	push	{r7, lr}
 800323c:	b084      	sub	sp, #16
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
 8003242:	4608      	mov	r0, r1
 8003244:	4611      	mov	r1, r2
 8003246:	461a      	mov	r2, r3
 8003248:	4603      	mov	r3, r0
 800324a:	70fb      	strb	r3, [r7, #3]
 800324c:	460b      	mov	r3, r1
 800324e:	803b      	strh	r3, [r7, #0]
 8003250:	4613      	mov	r3, r2
 8003252:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003254:	2300      	movs	r3, #0
 8003256:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003258:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800325c:	2b00      	cmp	r3, #0
 800325e:	da0f      	bge.n	8003280 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003260:	78fb      	ldrb	r3, [r7, #3]
 8003262:	f003 020f 	and.w	r2, r3, #15
 8003266:	4613      	mov	r3, r2
 8003268:	00db      	lsls	r3, r3, #3
 800326a:	4413      	add	r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	3310      	adds	r3, #16
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	4413      	add	r3, r2
 8003274:	3304      	adds	r3, #4
 8003276:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2201      	movs	r2, #1
 800327c:	705a      	strb	r2, [r3, #1]
 800327e:	e00f      	b.n	80032a0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003280:	78fb      	ldrb	r3, [r7, #3]
 8003282:	f003 020f 	and.w	r2, r3, #15
 8003286:	4613      	mov	r3, r2
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	4413      	add	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	4413      	add	r3, r2
 8003296:	3304      	adds	r3, #4
 8003298:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2200      	movs	r2, #0
 800329e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80032a0:	78fb      	ldrb	r3, [r7, #3]
 80032a2:	f003 030f 	and.w	r3, r3, #15
 80032a6:	b2da      	uxtb	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80032ac:	883b      	ldrh	r3, [r7, #0]
 80032ae:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	78ba      	ldrb	r2, [r7, #2]
 80032ba:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	785b      	ldrb	r3, [r3, #1]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d004      	beq.n	80032ce <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	461a      	mov	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80032ce:	78bb      	ldrb	r3, [r7, #2]
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d102      	bne.n	80032da <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2200      	movs	r2, #0
 80032d8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d101      	bne.n	80032e8 <HAL_PCD_EP_Open+0xae>
 80032e4:	2302      	movs	r3, #2
 80032e6:	e00e      	b.n	8003306 <HAL_PCD_EP_Open+0xcc>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68f9      	ldr	r1, [r7, #12]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f003 faea 	bl	80068d0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003304:	7afb      	ldrb	r3, [r7, #11]
}
 8003306:	4618      	mov	r0, r3
 8003308:	3710      	adds	r7, #16
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}

0800330e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b084      	sub	sp, #16
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
 8003316:	460b      	mov	r3, r1
 8003318:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800331a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800331e:	2b00      	cmp	r3, #0
 8003320:	da0f      	bge.n	8003342 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003322:	78fb      	ldrb	r3, [r7, #3]
 8003324:	f003 020f 	and.w	r2, r3, #15
 8003328:	4613      	mov	r3, r2
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	4413      	add	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	3310      	adds	r3, #16
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	4413      	add	r3, r2
 8003336:	3304      	adds	r3, #4
 8003338:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2201      	movs	r2, #1
 800333e:	705a      	strb	r2, [r3, #1]
 8003340:	e00f      	b.n	8003362 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003342:	78fb      	ldrb	r3, [r7, #3]
 8003344:	f003 020f 	and.w	r2, r3, #15
 8003348:	4613      	mov	r3, r2
 800334a:	00db      	lsls	r3, r3, #3
 800334c:	4413      	add	r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	4413      	add	r3, r2
 8003358:	3304      	adds	r3, #4
 800335a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003362:	78fb      	ldrb	r3, [r7, #3]
 8003364:	f003 030f 	and.w	r3, r3, #15
 8003368:	b2da      	uxtb	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003374:	2b01      	cmp	r3, #1
 8003376:	d101      	bne.n	800337c <HAL_PCD_EP_Close+0x6e>
 8003378:	2302      	movs	r3, #2
 800337a:	e00e      	b.n	800339a <HAL_PCD_EP_Close+0x8c>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68f9      	ldr	r1, [r7, #12]
 800338a:	4618      	mov	r0, r3
 800338c:	f003 fb28 	bl	80069e0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b086      	sub	sp, #24
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	60f8      	str	r0, [r7, #12]
 80033aa:	607a      	str	r2, [r7, #4]
 80033ac:	603b      	str	r3, [r7, #0]
 80033ae:	460b      	mov	r3, r1
 80033b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033b2:	7afb      	ldrb	r3, [r7, #11]
 80033b4:	f003 020f 	and.w	r2, r3, #15
 80033b8:	4613      	mov	r3, r2
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	4413      	add	r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	4413      	add	r3, r2
 80033c8:	3304      	adds	r3, #4
 80033ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	683a      	ldr	r2, [r7, #0]
 80033d6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	2200      	movs	r2, #0
 80033dc:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	2200      	movs	r2, #0
 80033e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033e4:	7afb      	ldrb	r3, [r7, #11]
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	b2da      	uxtb	r2, r3
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	799b      	ldrb	r3, [r3, #6]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d102      	bne.n	80033fe <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6818      	ldr	r0, [r3, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	799b      	ldrb	r3, [r3, #6]
 8003406:	461a      	mov	r2, r3
 8003408:	6979      	ldr	r1, [r7, #20]
 800340a:	f003 fbc5 	bl	8006b98 <USB_EPStartXfer>

  return HAL_OK;
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	3718      	adds	r7, #24
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	460b      	mov	r3, r1
 8003422:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003424:	78fb      	ldrb	r3, [r7, #3]
 8003426:	f003 020f 	and.w	r2, r3, #15
 800342a:	6879      	ldr	r1, [r7, #4]
 800342c:	4613      	mov	r3, r2
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	4413      	add	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	440b      	add	r3, r1
 8003436:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800343a:	681b      	ldr	r3, [r3, #0]
}
 800343c:	4618      	mov	r0, r3
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	607a      	str	r2, [r7, #4]
 8003452:	603b      	str	r3, [r7, #0]
 8003454:	460b      	mov	r3, r1
 8003456:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003458:	7afb      	ldrb	r3, [r7, #11]
 800345a:	f003 020f 	and.w	r2, r3, #15
 800345e:	4613      	mov	r3, r2
 8003460:	00db      	lsls	r3, r3, #3
 8003462:	4413      	add	r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	3310      	adds	r3, #16
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	4413      	add	r3, r2
 800346c:	3304      	adds	r3, #4
 800346e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	2200      	movs	r2, #0
 8003480:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	2201      	movs	r2, #1
 8003486:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003488:	7afb      	ldrb	r3, [r7, #11]
 800348a:	f003 030f 	and.w	r3, r3, #15
 800348e:	b2da      	uxtb	r2, r3
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	799b      	ldrb	r3, [r3, #6]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d102      	bne.n	80034a2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6818      	ldr	r0, [r3, #0]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	799b      	ldrb	r3, [r3, #6]
 80034aa:	461a      	mov	r2, r3
 80034ac:	6979      	ldr	r1, [r7, #20]
 80034ae:	f003 fb73 	bl	8006b98 <USB_EPStartXfer>

  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3718      	adds	r7, #24
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	460b      	mov	r3, r1
 80034c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80034c8:	78fb      	ldrb	r3, [r7, #3]
 80034ca:	f003 030f 	and.w	r3, r3, #15
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	7912      	ldrb	r2, [r2, #4]
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d901      	bls.n	80034da <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e04f      	b.n	800357a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80034da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	da0f      	bge.n	8003502 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034e2:	78fb      	ldrb	r3, [r7, #3]
 80034e4:	f003 020f 	and.w	r2, r3, #15
 80034e8:	4613      	mov	r3, r2
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	4413      	add	r3, r2
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	3310      	adds	r3, #16
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	4413      	add	r3, r2
 80034f6:	3304      	adds	r3, #4
 80034f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2201      	movs	r2, #1
 80034fe:	705a      	strb	r2, [r3, #1]
 8003500:	e00d      	b.n	800351e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003502:	78fa      	ldrb	r2, [r7, #3]
 8003504:	4613      	mov	r3, r2
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	4413      	add	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	4413      	add	r3, r2
 8003514:	3304      	adds	r3, #4
 8003516:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2201      	movs	r2, #1
 8003522:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003524:	78fb      	ldrb	r3, [r7, #3]
 8003526:	f003 030f 	and.w	r3, r3, #15
 800352a:	b2da      	uxtb	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003536:	2b01      	cmp	r3, #1
 8003538:	d101      	bne.n	800353e <HAL_PCD_EP_SetStall+0x82>
 800353a:	2302      	movs	r3, #2
 800353c:	e01d      	b.n	800357a <HAL_PCD_EP_SetStall+0xbe>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2201      	movs	r2, #1
 8003542:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68f9      	ldr	r1, [r7, #12]
 800354c:	4618      	mov	r0, r3
 800354e:	f003 ff07 	bl	8007360 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003552:	78fb      	ldrb	r3, [r7, #3]
 8003554:	f003 030f 	and.w	r3, r3, #15
 8003558:	2b00      	cmp	r3, #0
 800355a:	d109      	bne.n	8003570 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6818      	ldr	r0, [r3, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	7999      	ldrb	r1, [r3, #6]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800356a:	461a      	mov	r2, r3
 800356c:	f004 f8fa 	bl	8007764 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b084      	sub	sp, #16
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
 800358a:	460b      	mov	r3, r1
 800358c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800358e:	78fb      	ldrb	r3, [r7, #3]
 8003590:	f003 030f 	and.w	r3, r3, #15
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	7912      	ldrb	r2, [r2, #4]
 8003598:	4293      	cmp	r3, r2
 800359a:	d901      	bls.n	80035a0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e042      	b.n	8003626 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80035a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	da0f      	bge.n	80035c8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035a8:	78fb      	ldrb	r3, [r7, #3]
 80035aa:	f003 020f 	and.w	r2, r3, #15
 80035ae:	4613      	mov	r3, r2
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	4413      	add	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	3310      	adds	r3, #16
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	4413      	add	r3, r2
 80035bc:	3304      	adds	r3, #4
 80035be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2201      	movs	r2, #1
 80035c4:	705a      	strb	r2, [r3, #1]
 80035c6:	e00f      	b.n	80035e8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035c8:	78fb      	ldrb	r3, [r7, #3]
 80035ca:	f003 020f 	and.w	r2, r3, #15
 80035ce:	4613      	mov	r3, r2
 80035d0:	00db      	lsls	r3, r3, #3
 80035d2:	4413      	add	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	4413      	add	r3, r2
 80035de:	3304      	adds	r3, #4
 80035e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035ee:	78fb      	ldrb	r3, [r7, #3]
 80035f0:	f003 030f 	and.w	r3, r3, #15
 80035f4:	b2da      	uxtb	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003600:	2b01      	cmp	r3, #1
 8003602:	d101      	bne.n	8003608 <HAL_PCD_EP_ClrStall+0x86>
 8003604:	2302      	movs	r3, #2
 8003606:	e00e      	b.n	8003626 <HAL_PCD_EP_ClrStall+0xa4>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68f9      	ldr	r1, [r7, #12]
 8003616:	4618      	mov	r0, r3
 8003618:	f003 ff10 	bl	800743c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b084      	sub	sp, #16
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
 8003636:	460b      	mov	r3, r1
 8003638:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800363a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800363e:	2b00      	cmp	r3, #0
 8003640:	da0c      	bge.n	800365c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003642:	78fb      	ldrb	r3, [r7, #3]
 8003644:	f003 020f 	and.w	r2, r3, #15
 8003648:	4613      	mov	r3, r2
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	4413      	add	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	3310      	adds	r3, #16
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	4413      	add	r3, r2
 8003656:	3304      	adds	r3, #4
 8003658:	60fb      	str	r3, [r7, #12]
 800365a:	e00c      	b.n	8003676 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800365c:	78fb      	ldrb	r3, [r7, #3]
 800365e:	f003 020f 	and.w	r2, r3, #15
 8003662:	4613      	mov	r3, r2
 8003664:	00db      	lsls	r3, r3, #3
 8003666:	4413      	add	r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	4413      	add	r3, r2
 8003672:	3304      	adds	r3, #4
 8003674:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68f9      	ldr	r1, [r7, #12]
 800367c:	4618      	mov	r0, r3
 800367e:	f003 fd2f 	bl	80070e0 <USB_EPStopXfer>
 8003682:	4603      	mov	r3, r0
 8003684:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003686:	7afb      	ldrb	r3, [r7, #11]
}
 8003688:	4618      	mov	r0, r3
 800368a:	3710      	adds	r7, #16
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b08a      	sub	sp, #40	@ 0x28
 8003694:	af02      	add	r7, sp, #8
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	4613      	mov	r3, r2
 80036a8:	00db      	lsls	r3, r3, #3
 80036aa:	4413      	add	r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	3310      	adds	r3, #16
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	4413      	add	r3, r2
 80036b4:	3304      	adds	r3, #4
 80036b6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	695a      	ldr	r2, [r3, #20]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d901      	bls.n	80036c8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e06b      	b.n	80037a0 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	691a      	ldr	r2, [r3, #16]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	695b      	ldr	r3, [r3, #20]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	69fa      	ldr	r2, [r7, #28]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d902      	bls.n	80036e4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	3303      	adds	r3, #3
 80036e8:	089b      	lsrs	r3, r3, #2
 80036ea:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036ec:	e02a      	b.n	8003744 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	691a      	ldr	r2, [r3, #16]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	69fa      	ldr	r2, [r7, #28]
 8003700:	429a      	cmp	r2, r3
 8003702:	d902      	bls.n	800370a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	3303      	adds	r3, #3
 800370e:	089b      	lsrs	r3, r3, #2
 8003710:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	68d9      	ldr	r1, [r3, #12]
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	b2da      	uxtb	r2, r3
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003722:	9300      	str	r3, [sp, #0]
 8003724:	4603      	mov	r3, r0
 8003726:	6978      	ldr	r0, [r7, #20]
 8003728:	f003 fd84 	bl	8007234 <USB_WritePacket>

    ep->xfer_buff  += len;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	68da      	ldr	r2, [r3, #12]
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	441a      	add	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	695a      	ldr	r2, [r3, #20]
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	441a      	add	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	015a      	lsls	r2, r3, #5
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	4413      	add	r3, r2
 800374c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	429a      	cmp	r2, r3
 8003758:	d809      	bhi.n	800376e <PCD_WriteEmptyTxFifo+0xde>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	695a      	ldr	r2, [r3, #20]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003762:	429a      	cmp	r2, r3
 8003764:	d203      	bcs.n	800376e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1bf      	bne.n	80036ee <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	691a      	ldr	r2, [r3, #16]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	429a      	cmp	r2, r3
 8003778:	d811      	bhi.n	800379e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	f003 030f 	and.w	r3, r3, #15
 8003780:	2201      	movs	r2, #1
 8003782:	fa02 f303 	lsl.w	r3, r2, r3
 8003786:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800378e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	43db      	mvns	r3, r3
 8003794:	6939      	ldr	r1, [r7, #16]
 8003796:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800379a:	4013      	ands	r3, r2
 800379c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3720      	adds	r7, #32
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b088      	sub	sp, #32
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	333c      	adds	r3, #60	@ 0x3c
 80037c0:	3304      	adds	r3, #4
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	015a      	lsls	r2, r3, #5
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	4413      	add	r3, r2
 80037ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	799b      	ldrb	r3, [r3, #6]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d17b      	bne.n	80038d6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	f003 0308 	and.w	r3, r3, #8
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d015      	beq.n	8003814 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	4a61      	ldr	r2, [pc, #388]	@ (8003970 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	f240 80b9 	bls.w	8003964 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	f000 80b3 	beq.w	8003964 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	015a      	lsls	r2, r3, #5
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	4413      	add	r3, r2
 8003806:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800380a:	461a      	mov	r2, r3
 800380c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003810:	6093      	str	r3, [r2, #8]
 8003812:	e0a7      	b.n	8003964 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	f003 0320 	and.w	r3, r3, #32
 800381a:	2b00      	cmp	r3, #0
 800381c:	d009      	beq.n	8003832 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	015a      	lsls	r2, r3, #5
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	4413      	add	r3, r2
 8003826:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800382a:	461a      	mov	r2, r3
 800382c:	2320      	movs	r3, #32
 800382e:	6093      	str	r3, [r2, #8]
 8003830:	e098      	b.n	8003964 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003838:	2b00      	cmp	r3, #0
 800383a:	f040 8093 	bne.w	8003964 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	4a4b      	ldr	r2, [pc, #300]	@ (8003970 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d90f      	bls.n	8003866 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00a      	beq.n	8003866 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	015a      	lsls	r2, r3, #5
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	4413      	add	r3, r2
 8003858:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800385c:	461a      	mov	r2, r3
 800385e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003862:	6093      	str	r3, [r2, #8]
 8003864:	e07e      	b.n	8003964 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	4613      	mov	r3, r2
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	4413      	add	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	4413      	add	r3, r2
 8003878:	3304      	adds	r3, #4
 800387a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6a1a      	ldr	r2, [r3, #32]
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	0159      	lsls	r1, r3, #5
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	440b      	add	r3, r1
 8003888:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003892:	1ad2      	subs	r2, r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d114      	bne.n	80038c8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d109      	bne.n	80038ba <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6818      	ldr	r0, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80038b0:	461a      	mov	r2, r3
 80038b2:	2101      	movs	r1, #1
 80038b4:	f003 ff56 	bl	8007764 <USB_EP0_OutStart>
 80038b8:	e006      	b.n	80038c8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	68da      	ldr	r2, [r3, #12]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	441a      	add	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	4619      	mov	r1, r3
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f009 fe62 	bl	800d598 <HAL_PCD_DataOutStageCallback>
 80038d4:	e046      	b.n	8003964 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	4a26      	ldr	r2, [pc, #152]	@ (8003974 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d124      	bne.n	8003928 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00a      	beq.n	80038fe <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	015a      	lsls	r2, r3, #5
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	4413      	add	r3, r2
 80038f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038f4:	461a      	mov	r2, r3
 80038f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038fa:	6093      	str	r3, [r2, #8]
 80038fc:	e032      	b.n	8003964 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	f003 0320 	and.w	r3, r3, #32
 8003904:	2b00      	cmp	r3, #0
 8003906:	d008      	beq.n	800391a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	015a      	lsls	r2, r3, #5
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	4413      	add	r3, r2
 8003910:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003914:	461a      	mov	r2, r3
 8003916:	2320      	movs	r3, #32
 8003918:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	b2db      	uxtb	r3, r3
 800391e:	4619      	mov	r1, r3
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f009 fe39 	bl	800d598 <HAL_PCD_DataOutStageCallback>
 8003926:	e01d      	b.n	8003964 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d114      	bne.n	8003958 <PCD_EP_OutXfrComplete_int+0x1b0>
 800392e:	6879      	ldr	r1, [r7, #4]
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	4613      	mov	r3, r2
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	4413      	add	r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	440b      	add	r3, r1
 800393c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d108      	bne.n	8003958 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6818      	ldr	r0, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003950:	461a      	mov	r2, r3
 8003952:	2100      	movs	r1, #0
 8003954:	f003 ff06 	bl	8007764 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	b2db      	uxtb	r3, r3
 800395c:	4619      	mov	r1, r3
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f009 fe1a 	bl	800d598 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3720      	adds	r7, #32
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	4f54300a 	.word	0x4f54300a
 8003974:	4f54310a 	.word	0x4f54310a

08003978 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	333c      	adds	r3, #60	@ 0x3c
 8003990:	3304      	adds	r3, #4
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	015a      	lsls	r2, r3, #5
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	4413      	add	r3, r2
 800399e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	4a15      	ldr	r2, [pc, #84]	@ (8003a00 <PCD_EP_OutSetupPacket_int+0x88>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d90e      	bls.n	80039cc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d009      	beq.n	80039cc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	015a      	lsls	r2, r3, #5
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	4413      	add	r3, r2
 80039c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039c4:	461a      	mov	r2, r3
 80039c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039ca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f009 fdd1 	bl	800d574 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	4a0a      	ldr	r2, [pc, #40]	@ (8003a00 <PCD_EP_OutSetupPacket_int+0x88>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d90c      	bls.n	80039f4 <PCD_EP_OutSetupPacket_int+0x7c>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	799b      	ldrb	r3, [r3, #6]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d108      	bne.n	80039f4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6818      	ldr	r0, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80039ec:	461a      	mov	r2, r3
 80039ee:	2101      	movs	r1, #1
 80039f0:	f003 feb8 	bl	8007764 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3718      	adds	r7, #24
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	4f54300a 	.word	0x4f54300a

08003a04 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	70fb      	strb	r3, [r7, #3]
 8003a10:	4613      	mov	r3, r2
 8003a12:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003a1c:	78fb      	ldrb	r3, [r7, #3]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d107      	bne.n	8003a32 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003a22:	883b      	ldrh	r3, [r7, #0]
 8003a24:	0419      	lsls	r1, r3, #16
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68ba      	ldr	r2, [r7, #8]
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a30:	e028      	b.n	8003a84 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a38:	0c1b      	lsrs	r3, r3, #16
 8003a3a:	68ba      	ldr	r2, [r7, #8]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a40:	2300      	movs	r3, #0
 8003a42:	73fb      	strb	r3, [r7, #15]
 8003a44:	e00d      	b.n	8003a62 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	7bfb      	ldrb	r3, [r7, #15]
 8003a4c:	3340      	adds	r3, #64	@ 0x40
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4413      	add	r3, r2
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	0c1b      	lsrs	r3, r3, #16
 8003a56:	68ba      	ldr	r2, [r7, #8]
 8003a58:	4413      	add	r3, r2
 8003a5a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003a5c:	7bfb      	ldrb	r3, [r7, #15]
 8003a5e:	3301      	adds	r3, #1
 8003a60:	73fb      	strb	r3, [r7, #15]
 8003a62:	7bfa      	ldrb	r2, [r7, #15]
 8003a64:	78fb      	ldrb	r3, [r7, #3]
 8003a66:	3b01      	subs	r3, #1
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d3ec      	bcc.n	8003a46 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003a6c:	883b      	ldrh	r3, [r7, #0]
 8003a6e:	0418      	lsls	r0, r3, #16
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6819      	ldr	r1, [r3, #0]
 8003a74:	78fb      	ldrb	r3, [r7, #3]
 8003a76:	3b01      	subs	r3, #1
 8003a78:	68ba      	ldr	r2, [r7, #8]
 8003a7a:	4302      	orrs	r2, r0
 8003a7c:	3340      	adds	r3, #64	@ 0x40
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	440b      	add	r3, r1
 8003a82:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3714      	adds	r7, #20
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr

08003a92 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003a92:	b480      	push	{r7}
 8003a94:	b083      	sub	sp, #12
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	887a      	ldrh	r2, [r7, #2]
 8003aa4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003ae2:	4b05      	ldr	r3, [pc, #20]	@ (8003af8 <HAL_PCDEx_ActivateLPM+0x44>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3714      	adds	r7, #20
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr
 8003af8:	10000003 	.word	0x10000003

08003afc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003b02:	2300      	movs	r3, #0
 8003b04:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003b06:	4b23      	ldr	r3, [pc, #140]	@ (8003b94 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b0a:	4a22      	ldr	r2, [pc, #136]	@ (8003b94 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b10:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b12:	4b20      	ldr	r3, [pc, #128]	@ (8003b94 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b1a:	603b      	str	r3, [r7, #0]
 8003b1c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003b1e:	4b1e      	ldr	r3, [pc, #120]	@ (8003b98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a1d      	ldr	r2, [pc, #116]	@ (8003b98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b28:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b2a:	f7fe f949 	bl	8001dc0 <HAL_GetTick>
 8003b2e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b30:	e009      	b.n	8003b46 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b32:	f7fe f945 	bl	8001dc0 <HAL_GetTick>
 8003b36:	4602      	mov	r2, r0
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003b40:	d901      	bls.n	8003b46 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e022      	b.n	8003b8c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b46:	4b14      	ldr	r3, [pc, #80]	@ (8003b98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b52:	d1ee      	bne.n	8003b32 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003b54:	4b10      	ldr	r3, [pc, #64]	@ (8003b98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a0f      	ldr	r2, [pc, #60]	@ (8003b98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b5e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b60:	f7fe f92e 	bl	8001dc0 <HAL_GetTick>
 8003b64:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b66:	e009      	b.n	8003b7c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b68:	f7fe f92a 	bl	8001dc0 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003b76:	d901      	bls.n	8003b7c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e007      	b.n	8003b8c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b7c:	4b06      	ldr	r3, [pc, #24]	@ (8003b98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b88:	d1ee      	bne.n	8003b68 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3708      	adds	r7, #8
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	40023800 	.word	0x40023800
 8003b98:	40007000 	.word	0x40007000

08003b9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d101      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e291      	b.n	80040d6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	f000 8087 	beq.w	8003cce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003bc0:	4b96      	ldr	r3, [pc, #600]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f003 030c 	and.w	r3, r3, #12
 8003bc8:	2b04      	cmp	r3, #4
 8003bca:	d00c      	beq.n	8003be6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bcc:	4b93      	ldr	r3, [pc, #588]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f003 030c 	and.w	r3, r3, #12
 8003bd4:	2b08      	cmp	r3, #8
 8003bd6:	d112      	bne.n	8003bfe <HAL_RCC_OscConfig+0x62>
 8003bd8:	4b90      	ldr	r3, [pc, #576]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003be0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003be4:	d10b      	bne.n	8003bfe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003be6:	4b8d      	ldr	r3, [pc, #564]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d06c      	beq.n	8003ccc <HAL_RCC_OscConfig+0x130>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d168      	bne.n	8003ccc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e26b      	b.n	80040d6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c06:	d106      	bne.n	8003c16 <HAL_RCC_OscConfig+0x7a>
 8003c08:	4b84      	ldr	r3, [pc, #528]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a83      	ldr	r2, [pc, #524]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003c0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c12:	6013      	str	r3, [r2, #0]
 8003c14:	e02e      	b.n	8003c74 <HAL_RCC_OscConfig+0xd8>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10c      	bne.n	8003c38 <HAL_RCC_OscConfig+0x9c>
 8003c1e:	4b7f      	ldr	r3, [pc, #508]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a7e      	ldr	r2, [pc, #504]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003c24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c28:	6013      	str	r3, [r2, #0]
 8003c2a:	4b7c      	ldr	r3, [pc, #496]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a7b      	ldr	r2, [pc, #492]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003c30:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c34:	6013      	str	r3, [r2, #0]
 8003c36:	e01d      	b.n	8003c74 <HAL_RCC_OscConfig+0xd8>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c40:	d10c      	bne.n	8003c5c <HAL_RCC_OscConfig+0xc0>
 8003c42:	4b76      	ldr	r3, [pc, #472]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a75      	ldr	r2, [pc, #468]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003c48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c4c:	6013      	str	r3, [r2, #0]
 8003c4e:	4b73      	ldr	r3, [pc, #460]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a72      	ldr	r2, [pc, #456]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003c54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c58:	6013      	str	r3, [r2, #0]
 8003c5a:	e00b      	b.n	8003c74 <HAL_RCC_OscConfig+0xd8>
 8003c5c:	4b6f      	ldr	r3, [pc, #444]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a6e      	ldr	r2, [pc, #440]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003c62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c66:	6013      	str	r3, [r2, #0]
 8003c68:	4b6c      	ldr	r3, [pc, #432]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a6b      	ldr	r2, [pc, #428]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003c6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d013      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c7c:	f7fe f8a0 	bl	8001dc0 <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c84:	f7fe f89c 	bl	8001dc0 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b64      	cmp	r3, #100	@ 0x64
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e21f      	b.n	80040d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c96:	4b61      	ldr	r3, [pc, #388]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d0f0      	beq.n	8003c84 <HAL_RCC_OscConfig+0xe8>
 8003ca2:	e014      	b.n	8003cce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca4:	f7fe f88c 	bl	8001dc0 <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cac:	f7fe f888 	bl	8001dc0 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b64      	cmp	r3, #100	@ 0x64
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e20b      	b.n	80040d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cbe:	4b57      	ldr	r3, [pc, #348]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1f0      	bne.n	8003cac <HAL_RCC_OscConfig+0x110>
 8003cca:	e000      	b.n	8003cce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ccc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d069      	beq.n	8003dae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cda:	4b50      	ldr	r3, [pc, #320]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f003 030c 	and.w	r3, r3, #12
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00b      	beq.n	8003cfe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ce6:	4b4d      	ldr	r3, [pc, #308]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f003 030c 	and.w	r3, r3, #12
 8003cee:	2b08      	cmp	r3, #8
 8003cf0:	d11c      	bne.n	8003d2c <HAL_RCC_OscConfig+0x190>
 8003cf2:	4b4a      	ldr	r3, [pc, #296]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d116      	bne.n	8003d2c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cfe:	4b47      	ldr	r3, [pc, #284]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d005      	beq.n	8003d16 <HAL_RCC_OscConfig+0x17a>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d001      	beq.n	8003d16 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e1df      	b.n	80040d6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d16:	4b41      	ldr	r3, [pc, #260]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	00db      	lsls	r3, r3, #3
 8003d24:	493d      	ldr	r1, [pc, #244]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d2a:	e040      	b.n	8003dae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d023      	beq.n	8003d7c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d34:	4b39      	ldr	r3, [pc, #228]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a38      	ldr	r2, [pc, #224]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003d3a:	f043 0301 	orr.w	r3, r3, #1
 8003d3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d40:	f7fe f83e 	bl	8001dc0 <HAL_GetTick>
 8003d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d46:	e008      	b.n	8003d5a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d48:	f7fe f83a 	bl	8001dc0 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e1bd      	b.n	80040d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d5a:	4b30      	ldr	r3, [pc, #192]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d0f0      	beq.n	8003d48 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d66:	4b2d      	ldr	r3, [pc, #180]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	00db      	lsls	r3, r3, #3
 8003d74:	4929      	ldr	r1, [pc, #164]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	600b      	str	r3, [r1, #0]
 8003d7a:	e018      	b.n	8003dae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d7c:	4b27      	ldr	r3, [pc, #156]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a26      	ldr	r2, [pc, #152]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003d82:	f023 0301 	bic.w	r3, r3, #1
 8003d86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d88:	f7fe f81a 	bl	8001dc0 <HAL_GetTick>
 8003d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d8e:	e008      	b.n	8003da2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d90:	f7fe f816 	bl	8001dc0 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e199      	b.n	80040d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003da2:	4b1e      	ldr	r3, [pc, #120]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1f0      	bne.n	8003d90 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0308 	and.w	r3, r3, #8
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d038      	beq.n	8003e2c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d019      	beq.n	8003df6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dc2:	4b16      	ldr	r3, [pc, #88]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003dc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dc6:	4a15      	ldr	r2, [pc, #84]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003dc8:	f043 0301 	orr.w	r3, r3, #1
 8003dcc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dce:	f7fd fff7 	bl	8001dc0 <HAL_GetTick>
 8003dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dd4:	e008      	b.n	8003de8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dd6:	f7fd fff3 	bl	8001dc0 <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d901      	bls.n	8003de8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e176      	b.n	80040d6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003de8:	4b0c      	ldr	r3, [pc, #48]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003dea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d0f0      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x23a>
 8003df4:	e01a      	b.n	8003e2c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003df6:	4b09      	ldr	r3, [pc, #36]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003df8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dfa:	4a08      	ldr	r2, [pc, #32]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003dfc:	f023 0301 	bic.w	r3, r3, #1
 8003e00:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e02:	f7fd ffdd 	bl	8001dc0 <HAL_GetTick>
 8003e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e08:	e00a      	b.n	8003e20 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e0a:	f7fd ffd9 	bl	8001dc0 <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d903      	bls.n	8003e20 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e15c      	b.n	80040d6 <HAL_RCC_OscConfig+0x53a>
 8003e1c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e20:	4b91      	ldr	r3, [pc, #580]	@ (8004068 <HAL_RCC_OscConfig+0x4cc>)
 8003e22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e24:	f003 0302 	and.w	r3, r3, #2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1ee      	bne.n	8003e0a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0304 	and.w	r3, r3, #4
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f000 80a4 	beq.w	8003f82 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e3a:	4b8b      	ldr	r3, [pc, #556]	@ (8004068 <HAL_RCC_OscConfig+0x4cc>)
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10d      	bne.n	8003e62 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e46:	4b88      	ldr	r3, [pc, #544]	@ (8004068 <HAL_RCC_OscConfig+0x4cc>)
 8003e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4a:	4a87      	ldr	r2, [pc, #540]	@ (8004068 <HAL_RCC_OscConfig+0x4cc>)
 8003e4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e50:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e52:	4b85      	ldr	r3, [pc, #532]	@ (8004068 <HAL_RCC_OscConfig+0x4cc>)
 8003e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e5a:	60bb      	str	r3, [r7, #8]
 8003e5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e62:	4b82      	ldr	r3, [pc, #520]	@ (800406c <HAL_RCC_OscConfig+0x4d0>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d118      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003e6e:	4b7f      	ldr	r3, [pc, #508]	@ (800406c <HAL_RCC_OscConfig+0x4d0>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a7e      	ldr	r2, [pc, #504]	@ (800406c <HAL_RCC_OscConfig+0x4d0>)
 8003e74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e7a:	f7fd ffa1 	bl	8001dc0 <HAL_GetTick>
 8003e7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e80:	e008      	b.n	8003e94 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e82:	f7fd ff9d 	bl	8001dc0 <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	2b64      	cmp	r3, #100	@ 0x64
 8003e8e:	d901      	bls.n	8003e94 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e120      	b.n	80040d6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e94:	4b75      	ldr	r3, [pc, #468]	@ (800406c <HAL_RCC_OscConfig+0x4d0>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d0f0      	beq.n	8003e82 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d106      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x31a>
 8003ea8:	4b6f      	ldr	r3, [pc, #444]	@ (8004068 <HAL_RCC_OscConfig+0x4cc>)
 8003eaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eac:	4a6e      	ldr	r2, [pc, #440]	@ (8004068 <HAL_RCC_OscConfig+0x4cc>)
 8003eae:	f043 0301 	orr.w	r3, r3, #1
 8003eb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003eb4:	e02d      	b.n	8003f12 <HAL_RCC_OscConfig+0x376>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d10c      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x33c>
 8003ebe:	4b6a      	ldr	r3, [pc, #424]	@ (8004068 <HAL_RCC_OscConfig+0x4cc>)
 8003ec0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ec2:	4a69      	ldr	r2, [pc, #420]	@ (8004068 <HAL_RCC_OscConfig+0x4cc>)
 8003ec4:	f023 0301 	bic.w	r3, r3, #1
 8003ec8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003eca:	4b67      	ldr	r3, [pc, #412]	@ (8004068 <HAL_RCC_OscConfig+0x4cc>)
 8003ecc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ece:	4a66      	ldr	r2, [pc, #408]	@ (8004068 <HAL_RCC_OscConfig+0x4cc>)
 8003ed0:	f023 0304 	bic.w	r3, r3, #4
 8003ed4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ed6:	e01c      	b.n	8003f12 <HAL_RCC_OscConfig+0x376>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	2b05      	cmp	r3, #5
 8003ede:	d10c      	bne.n	8003efa <HAL_RCC_OscConfig+0x35e>
 8003ee0:	4b61      	ldr	r3, [pc, #388]	@ (8004068 <HAL_RCC_OscConfig+0x4cc>)
 8003ee2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ee4:	4a60      	ldr	r2, [pc, #384]	@ (8004068 <HAL_RCC_OscConfig+0x4cc>)
 8003ee6:	f043 0304 	orr.w	r3, r3, #4
 8003eea:	6713      	str	r3, [r2, #112]	@ 0x70
 8003eec:	4b5e      	ldr	r3, [pc, #376]	@ (8004068 <HAL_RCC_OscConfig+0x4cc>)
 8003eee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ef0:	4a5d      	ldr	r2, [pc, #372]	@ (8004068 <HAL_RCC_OscConfig+0x4cc>)
 8003ef2:	f043 0301 	orr.w	r3, r3, #1
 8003ef6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ef8:	e00b      	b.n	8003f12 <HAL_RCC_OscConfig+0x376>
 8003efa:	4b5b      	ldr	r3, [pc, #364]	@ (8004068 <HAL_RCC_OscConfig+0x4cc>)
 8003efc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003efe:	4a5a      	ldr	r2, [pc, #360]	@ (8004068 <HAL_RCC_OscConfig+0x4cc>)
 8003f00:	f023 0301 	bic.w	r3, r3, #1
 8003f04:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f06:	4b58      	ldr	r3, [pc, #352]	@ (8004068 <HAL_RCC_OscConfig+0x4cc>)
 8003f08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f0a:	4a57      	ldr	r2, [pc, #348]	@ (8004068 <HAL_RCC_OscConfig+0x4cc>)
 8003f0c:	f023 0304 	bic.w	r3, r3, #4
 8003f10:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d015      	beq.n	8003f46 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f1a:	f7fd ff51 	bl	8001dc0 <HAL_GetTick>
 8003f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f20:	e00a      	b.n	8003f38 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f22:	f7fd ff4d 	bl	8001dc0 <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d901      	bls.n	8003f38 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e0ce      	b.n	80040d6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f38:	4b4b      	ldr	r3, [pc, #300]	@ (8004068 <HAL_RCC_OscConfig+0x4cc>)
 8003f3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d0ee      	beq.n	8003f22 <HAL_RCC_OscConfig+0x386>
 8003f44:	e014      	b.n	8003f70 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f46:	f7fd ff3b 	bl	8001dc0 <HAL_GetTick>
 8003f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f4c:	e00a      	b.n	8003f64 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f4e:	f7fd ff37 	bl	8001dc0 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d901      	bls.n	8003f64 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e0b8      	b.n	80040d6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f64:	4b40      	ldr	r3, [pc, #256]	@ (8004068 <HAL_RCC_OscConfig+0x4cc>)
 8003f66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f68:	f003 0302 	and.w	r3, r3, #2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1ee      	bne.n	8003f4e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f70:	7dfb      	ldrb	r3, [r7, #23]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d105      	bne.n	8003f82 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f76:	4b3c      	ldr	r3, [pc, #240]	@ (8004068 <HAL_RCC_OscConfig+0x4cc>)
 8003f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7a:	4a3b      	ldr	r2, [pc, #236]	@ (8004068 <HAL_RCC_OscConfig+0x4cc>)
 8003f7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f80:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	f000 80a4 	beq.w	80040d4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f8c:	4b36      	ldr	r3, [pc, #216]	@ (8004068 <HAL_RCC_OscConfig+0x4cc>)
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f003 030c 	and.w	r3, r3, #12
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	d06b      	beq.n	8004070 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d149      	bne.n	8004034 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fa0:	4b31      	ldr	r3, [pc, #196]	@ (8004068 <HAL_RCC_OscConfig+0x4cc>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a30      	ldr	r2, [pc, #192]	@ (8004068 <HAL_RCC_OscConfig+0x4cc>)
 8003fa6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003faa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fac:	f7fd ff08 	bl	8001dc0 <HAL_GetTick>
 8003fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fb2:	e008      	b.n	8003fc6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fb4:	f7fd ff04 	bl	8001dc0 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e087      	b.n	80040d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fc6:	4b28      	ldr	r3, [pc, #160]	@ (8004068 <HAL_RCC_OscConfig+0x4cc>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1f0      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	69da      	ldr	r2, [r3, #28]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	431a      	orrs	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe0:	019b      	lsls	r3, r3, #6
 8003fe2:	431a      	orrs	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fe8:	085b      	lsrs	r3, r3, #1
 8003fea:	3b01      	subs	r3, #1
 8003fec:	041b      	lsls	r3, r3, #16
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff4:	061b      	lsls	r3, r3, #24
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	4a1b      	ldr	r2, [pc, #108]	@ (8004068 <HAL_RCC_OscConfig+0x4cc>)
 8003ffa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003ffe:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004000:	4b19      	ldr	r3, [pc, #100]	@ (8004068 <HAL_RCC_OscConfig+0x4cc>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a18      	ldr	r2, [pc, #96]	@ (8004068 <HAL_RCC_OscConfig+0x4cc>)
 8004006:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800400a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800400c:	f7fd fed8 	bl	8001dc0 <HAL_GetTick>
 8004010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004012:	e008      	b.n	8004026 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004014:	f7fd fed4 	bl	8001dc0 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e057      	b.n	80040d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004026:	4b10      	ldr	r3, [pc, #64]	@ (8004068 <HAL_RCC_OscConfig+0x4cc>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d0f0      	beq.n	8004014 <HAL_RCC_OscConfig+0x478>
 8004032:	e04f      	b.n	80040d4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004034:	4b0c      	ldr	r3, [pc, #48]	@ (8004068 <HAL_RCC_OscConfig+0x4cc>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a0b      	ldr	r2, [pc, #44]	@ (8004068 <HAL_RCC_OscConfig+0x4cc>)
 800403a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800403e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004040:	f7fd febe 	bl	8001dc0 <HAL_GetTick>
 8004044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004046:	e008      	b.n	800405a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004048:	f7fd feba 	bl	8001dc0 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b02      	cmp	r3, #2
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e03d      	b.n	80040d6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800405a:	4b03      	ldr	r3, [pc, #12]	@ (8004068 <HAL_RCC_OscConfig+0x4cc>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1f0      	bne.n	8004048 <HAL_RCC_OscConfig+0x4ac>
 8004066:	e035      	b.n	80040d4 <HAL_RCC_OscConfig+0x538>
 8004068:	40023800 	.word	0x40023800
 800406c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004070:	4b1b      	ldr	r3, [pc, #108]	@ (80040e0 <HAL_RCC_OscConfig+0x544>)
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d028      	beq.n	80040d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004088:	429a      	cmp	r2, r3
 800408a:	d121      	bne.n	80040d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004096:	429a      	cmp	r2, r3
 8004098:	d11a      	bne.n	80040d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80040a0:	4013      	ands	r3, r2
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80040a6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d111      	bne.n	80040d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040b6:	085b      	lsrs	r3, r3, #1
 80040b8:	3b01      	subs	r3, #1
 80040ba:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040bc:	429a      	cmp	r2, r3
 80040be:	d107      	bne.n	80040d0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ca:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d001      	beq.n	80040d4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e000      	b.n	80040d6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3718      	adds	r7, #24
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	40023800 	.word	0x40023800

080040e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80040ee:	2300      	movs	r3, #0
 80040f0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d101      	bne.n	80040fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e0d0      	b.n	800429e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040fc:	4b6a      	ldr	r3, [pc, #424]	@ (80042a8 <HAL_RCC_ClockConfig+0x1c4>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 030f 	and.w	r3, r3, #15
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	429a      	cmp	r2, r3
 8004108:	d910      	bls.n	800412c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800410a:	4b67      	ldr	r3, [pc, #412]	@ (80042a8 <HAL_RCC_ClockConfig+0x1c4>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f023 020f 	bic.w	r2, r3, #15
 8004112:	4965      	ldr	r1, [pc, #404]	@ (80042a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	4313      	orrs	r3, r2
 8004118:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800411a:	4b63      	ldr	r3, [pc, #396]	@ (80042a8 <HAL_RCC_ClockConfig+0x1c4>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 030f 	and.w	r3, r3, #15
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	429a      	cmp	r2, r3
 8004126:	d001      	beq.n	800412c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e0b8      	b.n	800429e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b00      	cmp	r3, #0
 8004136:	d020      	beq.n	800417a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0304 	and.w	r3, r3, #4
 8004140:	2b00      	cmp	r3, #0
 8004142:	d005      	beq.n	8004150 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004144:	4b59      	ldr	r3, [pc, #356]	@ (80042ac <HAL_RCC_ClockConfig+0x1c8>)
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	4a58      	ldr	r2, [pc, #352]	@ (80042ac <HAL_RCC_ClockConfig+0x1c8>)
 800414a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800414e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0308 	and.w	r3, r3, #8
 8004158:	2b00      	cmp	r3, #0
 800415a:	d005      	beq.n	8004168 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800415c:	4b53      	ldr	r3, [pc, #332]	@ (80042ac <HAL_RCC_ClockConfig+0x1c8>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	4a52      	ldr	r2, [pc, #328]	@ (80042ac <HAL_RCC_ClockConfig+0x1c8>)
 8004162:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004166:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004168:	4b50      	ldr	r3, [pc, #320]	@ (80042ac <HAL_RCC_ClockConfig+0x1c8>)
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	494d      	ldr	r1, [pc, #308]	@ (80042ac <HAL_RCC_ClockConfig+0x1c8>)
 8004176:	4313      	orrs	r3, r2
 8004178:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	2b00      	cmp	r3, #0
 8004184:	d040      	beq.n	8004208 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	2b01      	cmp	r3, #1
 800418c:	d107      	bne.n	800419e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800418e:	4b47      	ldr	r3, [pc, #284]	@ (80042ac <HAL_RCC_ClockConfig+0x1c8>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d115      	bne.n	80041c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e07f      	b.n	800429e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d107      	bne.n	80041b6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041a6:	4b41      	ldr	r3, [pc, #260]	@ (80042ac <HAL_RCC_ClockConfig+0x1c8>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d109      	bne.n	80041c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e073      	b.n	800429e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041b6:	4b3d      	ldr	r3, [pc, #244]	@ (80042ac <HAL_RCC_ClockConfig+0x1c8>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d101      	bne.n	80041c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e06b      	b.n	800429e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041c6:	4b39      	ldr	r3, [pc, #228]	@ (80042ac <HAL_RCC_ClockConfig+0x1c8>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f023 0203 	bic.w	r2, r3, #3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	4936      	ldr	r1, [pc, #216]	@ (80042ac <HAL_RCC_ClockConfig+0x1c8>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041d8:	f7fd fdf2 	bl	8001dc0 <HAL_GetTick>
 80041dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041de:	e00a      	b.n	80041f6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041e0:	f7fd fdee 	bl	8001dc0 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e053      	b.n	800429e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041f6:	4b2d      	ldr	r3, [pc, #180]	@ (80042ac <HAL_RCC_ClockConfig+0x1c8>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f003 020c 	and.w	r2, r3, #12
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	429a      	cmp	r2, r3
 8004206:	d1eb      	bne.n	80041e0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004208:	4b27      	ldr	r3, [pc, #156]	@ (80042a8 <HAL_RCC_ClockConfig+0x1c4>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 030f 	and.w	r3, r3, #15
 8004210:	683a      	ldr	r2, [r7, #0]
 8004212:	429a      	cmp	r2, r3
 8004214:	d210      	bcs.n	8004238 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004216:	4b24      	ldr	r3, [pc, #144]	@ (80042a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f023 020f 	bic.w	r2, r3, #15
 800421e:	4922      	ldr	r1, [pc, #136]	@ (80042a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	4313      	orrs	r3, r2
 8004224:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004226:	4b20      	ldr	r3, [pc, #128]	@ (80042a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 030f 	and.w	r3, r3, #15
 800422e:	683a      	ldr	r2, [r7, #0]
 8004230:	429a      	cmp	r2, r3
 8004232:	d001      	beq.n	8004238 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e032      	b.n	800429e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0304 	and.w	r3, r3, #4
 8004240:	2b00      	cmp	r3, #0
 8004242:	d008      	beq.n	8004256 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004244:	4b19      	ldr	r3, [pc, #100]	@ (80042ac <HAL_RCC_ClockConfig+0x1c8>)
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	4916      	ldr	r1, [pc, #88]	@ (80042ac <HAL_RCC_ClockConfig+0x1c8>)
 8004252:	4313      	orrs	r3, r2
 8004254:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0308 	and.w	r3, r3, #8
 800425e:	2b00      	cmp	r3, #0
 8004260:	d009      	beq.n	8004276 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004262:	4b12      	ldr	r3, [pc, #72]	@ (80042ac <HAL_RCC_ClockConfig+0x1c8>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	00db      	lsls	r3, r3, #3
 8004270:	490e      	ldr	r1, [pc, #56]	@ (80042ac <HAL_RCC_ClockConfig+0x1c8>)
 8004272:	4313      	orrs	r3, r2
 8004274:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004276:	f000 f821 	bl	80042bc <HAL_RCC_GetSysClockFreq>
 800427a:	4602      	mov	r2, r0
 800427c:	4b0b      	ldr	r3, [pc, #44]	@ (80042ac <HAL_RCC_ClockConfig+0x1c8>)
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	091b      	lsrs	r3, r3, #4
 8004282:	f003 030f 	and.w	r3, r3, #15
 8004286:	490a      	ldr	r1, [pc, #40]	@ (80042b0 <HAL_RCC_ClockConfig+0x1cc>)
 8004288:	5ccb      	ldrb	r3, [r1, r3]
 800428a:	fa22 f303 	lsr.w	r3, r2, r3
 800428e:	4a09      	ldr	r2, [pc, #36]	@ (80042b4 <HAL_RCC_ClockConfig+0x1d0>)
 8004290:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004292:	4b09      	ldr	r3, [pc, #36]	@ (80042b8 <HAL_RCC_ClockConfig+0x1d4>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4618      	mov	r0, r3
 8004298:	f7fd fd4e 	bl	8001d38 <HAL_InitTick>

  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3710      	adds	r7, #16
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	40023c00 	.word	0x40023c00
 80042ac:	40023800 	.word	0x40023800
 80042b0:	08010648 	.word	0x08010648
 80042b4:	20000000 	.word	0x20000000
 80042b8:	20000004 	.word	0x20000004

080042bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042c0:	b090      	sub	sp, #64	@ 0x40
 80042c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80042c4:	2300      	movs	r3, #0
 80042c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80042c8:	2300      	movs	r3, #0
 80042ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042cc:	2300      	movs	r3, #0
 80042ce:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80042d0:	2300      	movs	r3, #0
 80042d2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042d4:	4b59      	ldr	r3, [pc, #356]	@ (800443c <HAL_RCC_GetSysClockFreq+0x180>)
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f003 030c 	and.w	r3, r3, #12
 80042dc:	2b08      	cmp	r3, #8
 80042de:	d00d      	beq.n	80042fc <HAL_RCC_GetSysClockFreq+0x40>
 80042e0:	2b08      	cmp	r3, #8
 80042e2:	f200 80a1 	bhi.w	8004428 <HAL_RCC_GetSysClockFreq+0x16c>
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d002      	beq.n	80042f0 <HAL_RCC_GetSysClockFreq+0x34>
 80042ea:	2b04      	cmp	r3, #4
 80042ec:	d003      	beq.n	80042f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80042ee:	e09b      	b.n	8004428 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042f0:	4b53      	ldr	r3, [pc, #332]	@ (8004440 <HAL_RCC_GetSysClockFreq+0x184>)
 80042f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80042f4:	e09b      	b.n	800442e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042f6:	4b53      	ldr	r3, [pc, #332]	@ (8004444 <HAL_RCC_GetSysClockFreq+0x188>)
 80042f8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80042fa:	e098      	b.n	800442e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042fc:	4b4f      	ldr	r3, [pc, #316]	@ (800443c <HAL_RCC_GetSysClockFreq+0x180>)
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004304:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004306:	4b4d      	ldr	r3, [pc, #308]	@ (800443c <HAL_RCC_GetSysClockFreq+0x180>)
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d028      	beq.n	8004364 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004312:	4b4a      	ldr	r3, [pc, #296]	@ (800443c <HAL_RCC_GetSysClockFreq+0x180>)
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	099b      	lsrs	r3, r3, #6
 8004318:	2200      	movs	r2, #0
 800431a:	623b      	str	r3, [r7, #32]
 800431c:	627a      	str	r2, [r7, #36]	@ 0x24
 800431e:	6a3b      	ldr	r3, [r7, #32]
 8004320:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004324:	2100      	movs	r1, #0
 8004326:	4b47      	ldr	r3, [pc, #284]	@ (8004444 <HAL_RCC_GetSysClockFreq+0x188>)
 8004328:	fb03 f201 	mul.w	r2, r3, r1
 800432c:	2300      	movs	r3, #0
 800432e:	fb00 f303 	mul.w	r3, r0, r3
 8004332:	4413      	add	r3, r2
 8004334:	4a43      	ldr	r2, [pc, #268]	@ (8004444 <HAL_RCC_GetSysClockFreq+0x188>)
 8004336:	fba0 1202 	umull	r1, r2, r0, r2
 800433a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800433c:	460a      	mov	r2, r1
 800433e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004340:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004342:	4413      	add	r3, r2
 8004344:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004348:	2200      	movs	r2, #0
 800434a:	61bb      	str	r3, [r7, #24]
 800434c:	61fa      	str	r2, [r7, #28]
 800434e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004352:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004356:	f7fc fc57 	bl	8000c08 <__aeabi_uldivmod>
 800435a:	4602      	mov	r2, r0
 800435c:	460b      	mov	r3, r1
 800435e:	4613      	mov	r3, r2
 8004360:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004362:	e053      	b.n	800440c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004364:	4b35      	ldr	r3, [pc, #212]	@ (800443c <HAL_RCC_GetSysClockFreq+0x180>)
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	099b      	lsrs	r3, r3, #6
 800436a:	2200      	movs	r2, #0
 800436c:	613b      	str	r3, [r7, #16]
 800436e:	617a      	str	r2, [r7, #20]
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004376:	f04f 0b00 	mov.w	fp, #0
 800437a:	4652      	mov	r2, sl
 800437c:	465b      	mov	r3, fp
 800437e:	f04f 0000 	mov.w	r0, #0
 8004382:	f04f 0100 	mov.w	r1, #0
 8004386:	0159      	lsls	r1, r3, #5
 8004388:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800438c:	0150      	lsls	r0, r2, #5
 800438e:	4602      	mov	r2, r0
 8004390:	460b      	mov	r3, r1
 8004392:	ebb2 080a 	subs.w	r8, r2, sl
 8004396:	eb63 090b 	sbc.w	r9, r3, fp
 800439a:	f04f 0200 	mov.w	r2, #0
 800439e:	f04f 0300 	mov.w	r3, #0
 80043a2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80043a6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80043aa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80043ae:	ebb2 0408 	subs.w	r4, r2, r8
 80043b2:	eb63 0509 	sbc.w	r5, r3, r9
 80043b6:	f04f 0200 	mov.w	r2, #0
 80043ba:	f04f 0300 	mov.w	r3, #0
 80043be:	00eb      	lsls	r3, r5, #3
 80043c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043c4:	00e2      	lsls	r2, r4, #3
 80043c6:	4614      	mov	r4, r2
 80043c8:	461d      	mov	r5, r3
 80043ca:	eb14 030a 	adds.w	r3, r4, sl
 80043ce:	603b      	str	r3, [r7, #0]
 80043d0:	eb45 030b 	adc.w	r3, r5, fp
 80043d4:	607b      	str	r3, [r7, #4]
 80043d6:	f04f 0200 	mov.w	r2, #0
 80043da:	f04f 0300 	mov.w	r3, #0
 80043de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043e2:	4629      	mov	r1, r5
 80043e4:	028b      	lsls	r3, r1, #10
 80043e6:	4621      	mov	r1, r4
 80043e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043ec:	4621      	mov	r1, r4
 80043ee:	028a      	lsls	r2, r1, #10
 80043f0:	4610      	mov	r0, r2
 80043f2:	4619      	mov	r1, r3
 80043f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043f6:	2200      	movs	r2, #0
 80043f8:	60bb      	str	r3, [r7, #8]
 80043fa:	60fa      	str	r2, [r7, #12]
 80043fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004400:	f7fc fc02 	bl	8000c08 <__aeabi_uldivmod>
 8004404:	4602      	mov	r2, r0
 8004406:	460b      	mov	r3, r1
 8004408:	4613      	mov	r3, r2
 800440a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800440c:	4b0b      	ldr	r3, [pc, #44]	@ (800443c <HAL_RCC_GetSysClockFreq+0x180>)
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	0c1b      	lsrs	r3, r3, #16
 8004412:	f003 0303 	and.w	r3, r3, #3
 8004416:	3301      	adds	r3, #1
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800441c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800441e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004420:	fbb2 f3f3 	udiv	r3, r2, r3
 8004424:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004426:	e002      	b.n	800442e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004428:	4b05      	ldr	r3, [pc, #20]	@ (8004440 <HAL_RCC_GetSysClockFreq+0x184>)
 800442a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800442c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800442e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004430:	4618      	mov	r0, r3
 8004432:	3740      	adds	r7, #64	@ 0x40
 8004434:	46bd      	mov	sp, r7
 8004436:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800443a:	bf00      	nop
 800443c:	40023800 	.word	0x40023800
 8004440:	00f42400 	.word	0x00f42400
 8004444:	017d7840 	.word	0x017d7840

08004448 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004448:	b480      	push	{r7}
 800444a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800444c:	4b03      	ldr	r3, [pc, #12]	@ (800445c <HAL_RCC_GetHCLKFreq+0x14>)
 800444e:	681b      	ldr	r3, [r3, #0]
}
 8004450:	4618      	mov	r0, r3
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	20000000 	.word	0x20000000

08004460 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b088      	sub	sp, #32
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004468:	2300      	movs	r3, #0
 800446a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800446c:	2300      	movs	r3, #0
 800446e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004470:	2300      	movs	r3, #0
 8004472:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004474:	2300      	movs	r3, #0
 8004476:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004478:	2300      	movs	r3, #0
 800447a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0301 	and.w	r3, r3, #1
 8004484:	2b00      	cmp	r3, #0
 8004486:	d012      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004488:	4b69      	ldr	r3, [pc, #420]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	4a68      	ldr	r2, [pc, #416]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800448e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004492:	6093      	str	r3, [r2, #8]
 8004494:	4b66      	ldr	r3, [pc, #408]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004496:	689a      	ldr	r2, [r3, #8]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800449c:	4964      	ldr	r1, [pc, #400]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80044aa:	2301      	movs	r3, #1
 80044ac:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d017      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044ba:	4b5d      	ldr	r3, [pc, #372]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044c0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044c8:	4959      	ldr	r1, [pc, #356]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044d8:	d101      	bne.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80044da:	2301      	movs	r3, #1
 80044dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80044e6:	2301      	movs	r3, #1
 80044e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d017      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80044f6:	4b4e      	ldr	r3, [pc, #312]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044fc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004504:	494a      	ldr	r1, [pc, #296]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004506:	4313      	orrs	r3, r2
 8004508:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004510:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004514:	d101      	bne.n	800451a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004516:	2301      	movs	r3, #1
 8004518:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004522:	2301      	movs	r3, #1
 8004524:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d001      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004532:	2301      	movs	r3, #1
 8004534:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0320 	and.w	r3, r3, #32
 800453e:	2b00      	cmp	r3, #0
 8004540:	f000 808b 	beq.w	800465a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004544:	4b3a      	ldr	r3, [pc, #232]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004548:	4a39      	ldr	r2, [pc, #228]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800454a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800454e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004550:	4b37      	ldr	r3, [pc, #220]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004554:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004558:	60bb      	str	r3, [r7, #8]
 800455a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800455c:	4b35      	ldr	r3, [pc, #212]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a34      	ldr	r2, [pc, #208]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004562:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004566:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004568:	f7fd fc2a 	bl	8001dc0 <HAL_GetTick>
 800456c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800456e:	e008      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004570:	f7fd fc26 	bl	8001dc0 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b64      	cmp	r3, #100	@ 0x64
 800457c:	d901      	bls.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e357      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004582:	4b2c      	ldr	r3, [pc, #176]	@ (8004634 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800458a:	2b00      	cmp	r3, #0
 800458c:	d0f0      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800458e:	4b28      	ldr	r3, [pc, #160]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004592:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004596:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d035      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d02e      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045ac:	4b20      	ldr	r3, [pc, #128]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045b4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045b6:	4b1e      	ldr	r3, [pc, #120]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045ba:	4a1d      	ldr	r2, [pc, #116]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045c0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045c2:	4b1b      	ldr	r3, [pc, #108]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045c6:	4a1a      	ldr	r2, [pc, #104]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045cc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80045ce:	4a18      	ldr	r2, [pc, #96]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80045d4:	4b16      	ldr	r3, [pc, #88]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d114      	bne.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e0:	f7fd fbee 	bl	8001dc0 <HAL_GetTick>
 80045e4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045e6:	e00a      	b.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045e8:	f7fd fbea 	bl	8001dc0 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d901      	bls.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e319      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045fe:	4b0c      	ldr	r3, [pc, #48]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d0ee      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800460e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004612:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004616:	d111      	bne.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004618:	4b05      	ldr	r3, [pc, #20]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004624:	4b04      	ldr	r3, [pc, #16]	@ (8004638 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004626:	400b      	ands	r3, r1
 8004628:	4901      	ldr	r1, [pc, #4]	@ (8004630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800462a:	4313      	orrs	r3, r2
 800462c:	608b      	str	r3, [r1, #8]
 800462e:	e00b      	b.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004630:	40023800 	.word	0x40023800
 8004634:	40007000 	.word	0x40007000
 8004638:	0ffffcff 	.word	0x0ffffcff
 800463c:	4baa      	ldr	r3, [pc, #680]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	4aa9      	ldr	r2, [pc, #676]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004642:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004646:	6093      	str	r3, [r2, #8]
 8004648:	4ba7      	ldr	r3, [pc, #668]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800464a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004650:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004654:	49a4      	ldr	r1, [pc, #656]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004656:	4313      	orrs	r3, r2
 8004658:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0310 	and.w	r3, r3, #16
 8004662:	2b00      	cmp	r3, #0
 8004664:	d010      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004666:	4ba0      	ldr	r3, [pc, #640]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004668:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800466c:	4a9e      	ldr	r2, [pc, #632]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800466e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004672:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004676:	4b9c      	ldr	r3, [pc, #624]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004678:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004680:	4999      	ldr	r1, [pc, #612]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004682:	4313      	orrs	r3, r2
 8004684:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00a      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004694:	4b94      	ldr	r3, [pc, #592]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004696:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800469a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80046a2:	4991      	ldr	r1, [pc, #580]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00a      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046b6:	4b8c      	ldr	r3, [pc, #560]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046bc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046c4:	4988      	ldr	r1, [pc, #544]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d00a      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046d8:	4b83      	ldr	r3, [pc, #524]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046e6:	4980      	ldr	r1, [pc, #512]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00a      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80046fa:	4b7b      	ldr	r3, [pc, #492]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004700:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004708:	4977      	ldr	r1, [pc, #476]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800470a:	4313      	orrs	r3, r2
 800470c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00a      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800471c:	4b72      	ldr	r3, [pc, #456]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800471e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004722:	f023 0203 	bic.w	r2, r3, #3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800472a:	496f      	ldr	r1, [pc, #444]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800472c:	4313      	orrs	r3, r2
 800472e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00a      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800473e:	4b6a      	ldr	r3, [pc, #424]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004740:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004744:	f023 020c 	bic.w	r2, r3, #12
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800474c:	4966      	ldr	r1, [pc, #408]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800474e:	4313      	orrs	r3, r2
 8004750:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00a      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004760:	4b61      	ldr	r3, [pc, #388]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004762:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004766:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800476e:	495e      	ldr	r1, [pc, #376]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004770:	4313      	orrs	r3, r2
 8004772:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00a      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004782:	4b59      	ldr	r3, [pc, #356]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004784:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004788:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004790:	4955      	ldr	r1, [pc, #340]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004792:	4313      	orrs	r3, r2
 8004794:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00a      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80047a4:	4b50      	ldr	r3, [pc, #320]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047aa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047b2:	494d      	ldr	r1, [pc, #308]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00a      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80047c6:	4b48      	ldr	r3, [pc, #288]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047cc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047d4:	4944      	ldr	r1, [pc, #272]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00a      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80047e8:	4b3f      	ldr	r3, [pc, #252]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047ee:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047f6:	493c      	ldr	r1, [pc, #240]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00a      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800480a:	4b37      	ldr	r3, [pc, #220]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800480c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004810:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004818:	4933      	ldr	r1, [pc, #204]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800481a:	4313      	orrs	r3, r2
 800481c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d00a      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800482c:	4b2e      	ldr	r3, [pc, #184]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800482e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004832:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800483a:	492b      	ldr	r1, [pc, #172]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800483c:	4313      	orrs	r3, r2
 800483e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d011      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800484e:	4b26      	ldr	r3, [pc, #152]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004850:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004854:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800485c:	4922      	ldr	r1, [pc, #136]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800485e:	4313      	orrs	r3, r2
 8004860:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004868:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800486c:	d101      	bne.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800486e:	2301      	movs	r3, #1
 8004870:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0308 	and.w	r3, r3, #8
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800487e:	2301      	movs	r3, #1
 8004880:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00a      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800488e:	4b16      	ldr	r3, [pc, #88]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004890:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004894:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800489c:	4912      	ldr	r1, [pc, #72]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00b      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80048b0:	4b0d      	ldr	r3, [pc, #52]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048b6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048c0:	4909      	ldr	r1, [pc, #36]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d006      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	f000 80d9 	beq.w	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80048dc:	4b02      	ldr	r3, [pc, #8]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a01      	ldr	r2, [pc, #4]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80048e6:	e001      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80048e8:	40023800 	.word	0x40023800
 80048ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048ee:	f7fd fa67 	bl	8001dc0 <HAL_GetTick>
 80048f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048f4:	e008      	b.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80048f6:	f7fd fa63 	bl	8001dc0 <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	2b64      	cmp	r3, #100	@ 0x64
 8004902:	d901      	bls.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e194      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004908:	4b6c      	ldr	r3, [pc, #432]	@ (8004abc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1f0      	bne.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0301 	and.w	r3, r3, #1
 800491c:	2b00      	cmp	r3, #0
 800491e:	d021      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004924:	2b00      	cmp	r3, #0
 8004926:	d11d      	bne.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004928:	4b64      	ldr	r3, [pc, #400]	@ (8004abc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800492a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800492e:	0c1b      	lsrs	r3, r3, #16
 8004930:	f003 0303 	and.w	r3, r3, #3
 8004934:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004936:	4b61      	ldr	r3, [pc, #388]	@ (8004abc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004938:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800493c:	0e1b      	lsrs	r3, r3, #24
 800493e:	f003 030f 	and.w	r3, r3, #15
 8004942:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	019a      	lsls	r2, r3, #6
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	041b      	lsls	r3, r3, #16
 800494e:	431a      	orrs	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	061b      	lsls	r3, r3, #24
 8004954:	431a      	orrs	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	071b      	lsls	r3, r3, #28
 800495c:	4957      	ldr	r1, [pc, #348]	@ (8004abc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800495e:	4313      	orrs	r3, r2
 8004960:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d004      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004974:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004978:	d00a      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004982:	2b00      	cmp	r3, #0
 8004984:	d02e      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800498a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800498e:	d129      	bne.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004990:	4b4a      	ldr	r3, [pc, #296]	@ (8004abc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004992:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004996:	0c1b      	lsrs	r3, r3, #16
 8004998:	f003 0303 	and.w	r3, r3, #3
 800499c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800499e:	4b47      	ldr	r3, [pc, #284]	@ (8004abc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049a4:	0f1b      	lsrs	r3, r3, #28
 80049a6:	f003 0307 	and.w	r3, r3, #7
 80049aa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	019a      	lsls	r2, r3, #6
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	041b      	lsls	r3, r3, #16
 80049b6:	431a      	orrs	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	061b      	lsls	r3, r3, #24
 80049be:	431a      	orrs	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	071b      	lsls	r3, r3, #28
 80049c4:	493d      	ldr	r1, [pc, #244]	@ (8004abc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80049cc:	4b3b      	ldr	r3, [pc, #236]	@ (8004abc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049d2:	f023 021f 	bic.w	r2, r3, #31
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049da:	3b01      	subs	r3, #1
 80049dc:	4937      	ldr	r1, [pc, #220]	@ (8004abc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d01d      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80049f0:	4b32      	ldr	r3, [pc, #200]	@ (8004abc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049f6:	0e1b      	lsrs	r3, r3, #24
 80049f8:	f003 030f 	and.w	r3, r3, #15
 80049fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80049fe:	4b2f      	ldr	r3, [pc, #188]	@ (8004abc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a04:	0f1b      	lsrs	r3, r3, #28
 8004a06:	f003 0307 	and.w	r3, r3, #7
 8004a0a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	019a      	lsls	r2, r3, #6
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	041b      	lsls	r3, r3, #16
 8004a18:	431a      	orrs	r2, r3
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	061b      	lsls	r3, r3, #24
 8004a1e:	431a      	orrs	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	071b      	lsls	r3, r3, #28
 8004a24:	4925      	ldr	r1, [pc, #148]	@ (8004abc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d011      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	019a      	lsls	r2, r3, #6
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	041b      	lsls	r3, r3, #16
 8004a44:	431a      	orrs	r2, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	061b      	lsls	r3, r3, #24
 8004a4c:	431a      	orrs	r2, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	071b      	lsls	r3, r3, #28
 8004a54:	4919      	ldr	r1, [pc, #100]	@ (8004abc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a5c:	4b17      	ldr	r3, [pc, #92]	@ (8004abc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a16      	ldr	r2, [pc, #88]	@ (8004abc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a62:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004a66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a68:	f7fd f9aa 	bl	8001dc0 <HAL_GetTick>
 8004a6c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a6e:	e008      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a70:	f7fd f9a6 	bl	8001dc0 <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	2b64      	cmp	r3, #100	@ 0x64
 8004a7c:	d901      	bls.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e0d7      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a82:	4b0e      	ldr	r3, [pc, #56]	@ (8004abc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d0f0      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	f040 80cd 	bne.w	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004a96:	4b09      	ldr	r3, [pc, #36]	@ (8004abc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a08      	ldr	r2, [pc, #32]	@ (8004abc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004aa0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aa2:	f7fd f98d 	bl	8001dc0 <HAL_GetTick>
 8004aa6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004aa8:	e00a      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004aaa:	f7fd f989 	bl	8001dc0 <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	2b64      	cmp	r3, #100	@ 0x64
 8004ab6:	d903      	bls.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e0ba      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004abc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ac0:	4b5e      	ldr	r3, [pc, #376]	@ (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ac8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004acc:	d0ed      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d003      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d009      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d02e      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d12a      	bne.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004af6:	4b51      	ldr	r3, [pc, #324]	@ (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004afc:	0c1b      	lsrs	r3, r3, #16
 8004afe:	f003 0303 	and.w	r3, r3, #3
 8004b02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b04:	4b4d      	ldr	r3, [pc, #308]	@ (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b0a:	0f1b      	lsrs	r3, r3, #28
 8004b0c:	f003 0307 	and.w	r3, r3, #7
 8004b10:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	695b      	ldr	r3, [r3, #20]
 8004b16:	019a      	lsls	r2, r3, #6
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	041b      	lsls	r3, r3, #16
 8004b1c:	431a      	orrs	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	061b      	lsls	r3, r3, #24
 8004b24:	431a      	orrs	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	071b      	lsls	r3, r3, #28
 8004b2a:	4944      	ldr	r1, [pc, #272]	@ (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004b32:	4b42      	ldr	r3, [pc, #264]	@ (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b38:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b40:	3b01      	subs	r3, #1
 8004b42:	021b      	lsls	r3, r3, #8
 8004b44:	493d      	ldr	r1, [pc, #244]	@ (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d022      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b60:	d11d      	bne.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b62:	4b36      	ldr	r3, [pc, #216]	@ (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b68:	0e1b      	lsrs	r3, r3, #24
 8004b6a:	f003 030f 	and.w	r3, r3, #15
 8004b6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b70:	4b32      	ldr	r3, [pc, #200]	@ (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b76:	0f1b      	lsrs	r3, r3, #28
 8004b78:	f003 0307 	and.w	r3, r3, #7
 8004b7c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	019a      	lsls	r2, r3, #6
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a1b      	ldr	r3, [r3, #32]
 8004b88:	041b      	lsls	r3, r3, #16
 8004b8a:	431a      	orrs	r2, r3
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	061b      	lsls	r3, r3, #24
 8004b90:	431a      	orrs	r2, r3
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	071b      	lsls	r3, r3, #28
 8004b96:	4929      	ldr	r1, [pc, #164]	@ (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0308 	and.w	r3, r3, #8
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d028      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004baa:	4b24      	ldr	r3, [pc, #144]	@ (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bb0:	0e1b      	lsrs	r3, r3, #24
 8004bb2:	f003 030f 	and.w	r3, r3, #15
 8004bb6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004bb8:	4b20      	ldr	r3, [pc, #128]	@ (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bbe:	0c1b      	lsrs	r3, r3, #16
 8004bc0:	f003 0303 	and.w	r3, r3, #3
 8004bc4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	019a      	lsls	r2, r3, #6
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	041b      	lsls	r3, r3, #16
 8004bd0:	431a      	orrs	r2, r3
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	061b      	lsls	r3, r3, #24
 8004bd6:	431a      	orrs	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	69db      	ldr	r3, [r3, #28]
 8004bdc:	071b      	lsls	r3, r3, #28
 8004bde:	4917      	ldr	r1, [pc, #92]	@ (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004be6:	4b15      	ldr	r3, [pc, #84]	@ (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004be8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004bec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf4:	4911      	ldr	r1, [pc, #68]	@ (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004bfc:	4b0f      	ldr	r3, [pc, #60]	@ (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a0e      	ldr	r2, [pc, #56]	@ (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c08:	f7fd f8da 	bl	8001dc0 <HAL_GetTick>
 8004c0c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c0e:	e008      	b.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c10:	f7fd f8d6 	bl	8001dc0 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b64      	cmp	r3, #100	@ 0x64
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e007      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c22:	4b06      	ldr	r3, [pc, #24]	@ (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c2e:	d1ef      	bne.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3720      	adds	r7, #32
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	40023800 	.word	0x40023800

08004c40 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d101      	bne.n	8004c54 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e025      	b.n	8004ca0 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d106      	bne.n	8004c6e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f7fc ff15 	bl	8001a98 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2202      	movs	r2, #2
 8004c72:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	3304      	adds	r3, #4
 8004c7e:	4619      	mov	r1, r3
 8004c80:	4610      	mov	r0, r2
 8004c82:	f000 fbcd 	bl	8005420 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6818      	ldr	r0, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	461a      	mov	r2, r3
 8004c90:	6839      	ldr	r1, [r7, #0]
 8004c92:	f000 fc21 	bl	80054d8 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3708      	adds	r7, #8
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b086      	sub	sp, #24
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004cba:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8004cbc:	7dfb      	ldrb	r3, [r7, #23]
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d101      	bne.n	8004cc6 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	e021      	b.n	8004d0a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8004cc6:	7dfb      	ldrb	r3, [r7, #23]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d002      	beq.n	8004cd2 <HAL_SDRAM_SendCommand+0x2a>
 8004ccc:	7dfb      	ldrb	r3, [r7, #23]
 8004cce:	2b05      	cmp	r3, #5
 8004cd0:	d118      	bne.n	8004d04 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2202      	movs	r2, #2
 8004cd6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	68b9      	ldr	r1, [r7, #8]
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f000 fc62 	bl	80055ac <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d104      	bne.n	8004cfa <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2205      	movs	r2, #5
 8004cf4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004cf8:	e006      	b.n	8004d08 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004d02:	e001      	b.n	8004d08 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e000      	b.n	8004d0a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3718      	adds	r7, #24
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8004d12:	b580      	push	{r7, lr}
 8004d14:	b082      	sub	sp, #8
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
 8004d1a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d101      	bne.n	8004d2c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8004d28:	2302      	movs	r3, #2
 8004d2a:	e016      	b.n	8004d5a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d10f      	bne.n	8004d58 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2202      	movs	r2, #2
 8004d3c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	6839      	ldr	r1, [r7, #0]
 8004d46:	4618      	mov	r0, r3
 8004d48:	f000 fc54 	bl	80055f4 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
 8004d56:	e000      	b.n	8004d5a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3708      	adds	r7, #8
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d62:	b580      	push	{r7, lr}
 8004d64:	b082      	sub	sp, #8
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d101      	bne.n	8004d74 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e049      	b.n	8004e08 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d106      	bne.n	8004d8e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f7fc fdd5 	bl	8001938 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2202      	movs	r2, #2
 8004d92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	3304      	adds	r3, #4
 8004d9e:	4619      	mov	r1, r3
 8004da0:	4610      	mov	r0, r2
 8004da2:	f000 f96f 	bl	8005084 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2201      	movs	r2, #1
 8004daa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2201      	movs	r2, #1
 8004db2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2201      	movs	r2, #1
 8004dba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2201      	movs	r2, #1
 8004de2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2201      	movs	r2, #1
 8004df2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2201      	movs	r2, #1
 8004e02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3708      	adds	r7, #8
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b085      	sub	sp, #20
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d001      	beq.n	8004e28 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e04c      	b.n	8004ec2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a26      	ldr	r2, [pc, #152]	@ (8004ed0 <HAL_TIM_Base_Start+0xc0>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d022      	beq.n	8004e80 <HAL_TIM_Base_Start+0x70>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e42:	d01d      	beq.n	8004e80 <HAL_TIM_Base_Start+0x70>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a22      	ldr	r2, [pc, #136]	@ (8004ed4 <HAL_TIM_Base_Start+0xc4>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d018      	beq.n	8004e80 <HAL_TIM_Base_Start+0x70>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a21      	ldr	r2, [pc, #132]	@ (8004ed8 <HAL_TIM_Base_Start+0xc8>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d013      	beq.n	8004e80 <HAL_TIM_Base_Start+0x70>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a1f      	ldr	r2, [pc, #124]	@ (8004edc <HAL_TIM_Base_Start+0xcc>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d00e      	beq.n	8004e80 <HAL_TIM_Base_Start+0x70>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a1e      	ldr	r2, [pc, #120]	@ (8004ee0 <HAL_TIM_Base_Start+0xd0>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d009      	beq.n	8004e80 <HAL_TIM_Base_Start+0x70>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a1c      	ldr	r2, [pc, #112]	@ (8004ee4 <HAL_TIM_Base_Start+0xd4>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d004      	beq.n	8004e80 <HAL_TIM_Base_Start+0x70>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a1b      	ldr	r2, [pc, #108]	@ (8004ee8 <HAL_TIM_Base_Start+0xd8>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d115      	bne.n	8004eac <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	689a      	ldr	r2, [r3, #8]
 8004e86:	4b19      	ldr	r3, [pc, #100]	@ (8004eec <HAL_TIM_Base_Start+0xdc>)
 8004e88:	4013      	ands	r3, r2
 8004e8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2b06      	cmp	r3, #6
 8004e90:	d015      	beq.n	8004ebe <HAL_TIM_Base_Start+0xae>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e98:	d011      	beq.n	8004ebe <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f042 0201 	orr.w	r2, r2, #1
 8004ea8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eaa:	e008      	b.n	8004ebe <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f042 0201 	orr.w	r2, r2, #1
 8004eba:	601a      	str	r2, [r3, #0]
 8004ebc:	e000      	b.n	8004ec0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ebe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3714      	adds	r7, #20
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	40010000 	.word	0x40010000
 8004ed4:	40000400 	.word	0x40000400
 8004ed8:	40000800 	.word	0x40000800
 8004edc:	40000c00 	.word	0x40000c00
 8004ee0:	40010400 	.word	0x40010400
 8004ee4:	40014000 	.word	0x40014000
 8004ee8:	40001800 	.word	0x40001800
 8004eec:	00010007 	.word	0x00010007

08004ef0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004efa:	2300      	movs	r3, #0
 8004efc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d101      	bne.n	8004f0c <HAL_TIM_ConfigClockSource+0x1c>
 8004f08:	2302      	movs	r3, #2
 8004f0a:	e0b4      	b.n	8005076 <HAL_TIM_ConfigClockSource+0x186>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2202      	movs	r2, #2
 8004f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f24:	68ba      	ldr	r2, [r7, #8]
 8004f26:	4b56      	ldr	r3, [pc, #344]	@ (8005080 <HAL_TIM_ConfigClockSource+0x190>)
 8004f28:	4013      	ands	r3, r2
 8004f2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68ba      	ldr	r2, [r7, #8]
 8004f3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f44:	d03e      	beq.n	8004fc4 <HAL_TIM_ConfigClockSource+0xd4>
 8004f46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f4a:	f200 8087 	bhi.w	800505c <HAL_TIM_ConfigClockSource+0x16c>
 8004f4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f52:	f000 8086 	beq.w	8005062 <HAL_TIM_ConfigClockSource+0x172>
 8004f56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f5a:	d87f      	bhi.n	800505c <HAL_TIM_ConfigClockSource+0x16c>
 8004f5c:	2b70      	cmp	r3, #112	@ 0x70
 8004f5e:	d01a      	beq.n	8004f96 <HAL_TIM_ConfigClockSource+0xa6>
 8004f60:	2b70      	cmp	r3, #112	@ 0x70
 8004f62:	d87b      	bhi.n	800505c <HAL_TIM_ConfigClockSource+0x16c>
 8004f64:	2b60      	cmp	r3, #96	@ 0x60
 8004f66:	d050      	beq.n	800500a <HAL_TIM_ConfigClockSource+0x11a>
 8004f68:	2b60      	cmp	r3, #96	@ 0x60
 8004f6a:	d877      	bhi.n	800505c <HAL_TIM_ConfigClockSource+0x16c>
 8004f6c:	2b50      	cmp	r3, #80	@ 0x50
 8004f6e:	d03c      	beq.n	8004fea <HAL_TIM_ConfigClockSource+0xfa>
 8004f70:	2b50      	cmp	r3, #80	@ 0x50
 8004f72:	d873      	bhi.n	800505c <HAL_TIM_ConfigClockSource+0x16c>
 8004f74:	2b40      	cmp	r3, #64	@ 0x40
 8004f76:	d058      	beq.n	800502a <HAL_TIM_ConfigClockSource+0x13a>
 8004f78:	2b40      	cmp	r3, #64	@ 0x40
 8004f7a:	d86f      	bhi.n	800505c <HAL_TIM_ConfigClockSource+0x16c>
 8004f7c:	2b30      	cmp	r3, #48	@ 0x30
 8004f7e:	d064      	beq.n	800504a <HAL_TIM_ConfigClockSource+0x15a>
 8004f80:	2b30      	cmp	r3, #48	@ 0x30
 8004f82:	d86b      	bhi.n	800505c <HAL_TIM_ConfigClockSource+0x16c>
 8004f84:	2b20      	cmp	r3, #32
 8004f86:	d060      	beq.n	800504a <HAL_TIM_ConfigClockSource+0x15a>
 8004f88:	2b20      	cmp	r3, #32
 8004f8a:	d867      	bhi.n	800505c <HAL_TIM_ConfigClockSource+0x16c>
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d05c      	beq.n	800504a <HAL_TIM_ConfigClockSource+0x15a>
 8004f90:	2b10      	cmp	r3, #16
 8004f92:	d05a      	beq.n	800504a <HAL_TIM_ConfigClockSource+0x15a>
 8004f94:	e062      	b.n	800505c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004fa6:	f000 f98d 	bl	80052c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004fb8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68ba      	ldr	r2, [r7, #8]
 8004fc0:	609a      	str	r2, [r3, #8]
      break;
 8004fc2:	e04f      	b.n	8005064 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004fd4:	f000 f976 	bl	80052c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	689a      	ldr	r2, [r3, #8]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004fe6:	609a      	str	r2, [r3, #8]
      break;
 8004fe8:	e03c      	b.n	8005064 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	f000 f8ea 	bl	80051d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2150      	movs	r1, #80	@ 0x50
 8005002:	4618      	mov	r0, r3
 8005004:	f000 f943 	bl	800528e <TIM_ITRx_SetConfig>
      break;
 8005008:	e02c      	b.n	8005064 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005016:	461a      	mov	r2, r3
 8005018:	f000 f909 	bl	800522e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2160      	movs	r1, #96	@ 0x60
 8005022:	4618      	mov	r0, r3
 8005024:	f000 f933 	bl	800528e <TIM_ITRx_SetConfig>
      break;
 8005028:	e01c      	b.n	8005064 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005036:	461a      	mov	r2, r3
 8005038:	f000 f8ca 	bl	80051d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2140      	movs	r1, #64	@ 0x40
 8005042:	4618      	mov	r0, r3
 8005044:	f000 f923 	bl	800528e <TIM_ITRx_SetConfig>
      break;
 8005048:	e00c      	b.n	8005064 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4619      	mov	r1, r3
 8005054:	4610      	mov	r0, r2
 8005056:	f000 f91a 	bl	800528e <TIM_ITRx_SetConfig>
      break;
 800505a:	e003      	b.n	8005064 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	73fb      	strb	r3, [r7, #15]
      break;
 8005060:	e000      	b.n	8005064 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005062:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005074:	7bfb      	ldrb	r3, [r7, #15]
}
 8005076:	4618      	mov	r0, r3
 8005078:	3710      	adds	r7, #16
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	fffeff88 	.word	0xfffeff88

08005084 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005084:	b480      	push	{r7}
 8005086:	b085      	sub	sp, #20
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a43      	ldr	r2, [pc, #268]	@ (80051a4 <TIM_Base_SetConfig+0x120>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d013      	beq.n	80050c4 <TIM_Base_SetConfig+0x40>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050a2:	d00f      	beq.n	80050c4 <TIM_Base_SetConfig+0x40>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a40      	ldr	r2, [pc, #256]	@ (80051a8 <TIM_Base_SetConfig+0x124>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d00b      	beq.n	80050c4 <TIM_Base_SetConfig+0x40>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a3f      	ldr	r2, [pc, #252]	@ (80051ac <TIM_Base_SetConfig+0x128>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d007      	beq.n	80050c4 <TIM_Base_SetConfig+0x40>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a3e      	ldr	r2, [pc, #248]	@ (80051b0 <TIM_Base_SetConfig+0x12c>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d003      	beq.n	80050c4 <TIM_Base_SetConfig+0x40>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a3d      	ldr	r2, [pc, #244]	@ (80051b4 <TIM_Base_SetConfig+0x130>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d108      	bne.n	80050d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a32      	ldr	r2, [pc, #200]	@ (80051a4 <TIM_Base_SetConfig+0x120>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d02b      	beq.n	8005136 <TIM_Base_SetConfig+0xb2>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050e4:	d027      	beq.n	8005136 <TIM_Base_SetConfig+0xb2>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a2f      	ldr	r2, [pc, #188]	@ (80051a8 <TIM_Base_SetConfig+0x124>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d023      	beq.n	8005136 <TIM_Base_SetConfig+0xb2>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a2e      	ldr	r2, [pc, #184]	@ (80051ac <TIM_Base_SetConfig+0x128>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d01f      	beq.n	8005136 <TIM_Base_SetConfig+0xb2>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a2d      	ldr	r2, [pc, #180]	@ (80051b0 <TIM_Base_SetConfig+0x12c>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d01b      	beq.n	8005136 <TIM_Base_SetConfig+0xb2>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a2c      	ldr	r2, [pc, #176]	@ (80051b4 <TIM_Base_SetConfig+0x130>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d017      	beq.n	8005136 <TIM_Base_SetConfig+0xb2>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a2b      	ldr	r2, [pc, #172]	@ (80051b8 <TIM_Base_SetConfig+0x134>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d013      	beq.n	8005136 <TIM_Base_SetConfig+0xb2>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a2a      	ldr	r2, [pc, #168]	@ (80051bc <TIM_Base_SetConfig+0x138>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d00f      	beq.n	8005136 <TIM_Base_SetConfig+0xb2>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a29      	ldr	r2, [pc, #164]	@ (80051c0 <TIM_Base_SetConfig+0x13c>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d00b      	beq.n	8005136 <TIM_Base_SetConfig+0xb2>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a28      	ldr	r2, [pc, #160]	@ (80051c4 <TIM_Base_SetConfig+0x140>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d007      	beq.n	8005136 <TIM_Base_SetConfig+0xb2>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a27      	ldr	r2, [pc, #156]	@ (80051c8 <TIM_Base_SetConfig+0x144>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d003      	beq.n	8005136 <TIM_Base_SetConfig+0xb2>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a26      	ldr	r2, [pc, #152]	@ (80051cc <TIM_Base_SetConfig+0x148>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d108      	bne.n	8005148 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800513c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	4313      	orrs	r3, r2
 8005146:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	4313      	orrs	r3, r2
 8005154:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	689a      	ldr	r2, [r3, #8]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a0e      	ldr	r2, [pc, #56]	@ (80051a4 <TIM_Base_SetConfig+0x120>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d003      	beq.n	8005176 <TIM_Base_SetConfig+0xf2>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a10      	ldr	r2, [pc, #64]	@ (80051b4 <TIM_Base_SetConfig+0x130>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d103      	bne.n	800517e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	691a      	ldr	r2, [r3, #16]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f043 0204 	orr.w	r2, r3, #4
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2201      	movs	r2, #1
 800518e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	601a      	str	r2, [r3, #0]
}
 8005196:	bf00      	nop
 8005198:	3714      	adds	r7, #20
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	40010000 	.word	0x40010000
 80051a8:	40000400 	.word	0x40000400
 80051ac:	40000800 	.word	0x40000800
 80051b0:	40000c00 	.word	0x40000c00
 80051b4:	40010400 	.word	0x40010400
 80051b8:	40014000 	.word	0x40014000
 80051bc:	40014400 	.word	0x40014400
 80051c0:	40014800 	.word	0x40014800
 80051c4:	40001800 	.word	0x40001800
 80051c8:	40001c00 	.word	0x40001c00
 80051cc:	40002000 	.word	0x40002000

080051d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b087      	sub	sp, #28
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6a1b      	ldr	r3, [r3, #32]
 80051e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	f023 0201 	bic.w	r2, r3, #1
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80051fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	011b      	lsls	r3, r3, #4
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	4313      	orrs	r3, r2
 8005204:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	f023 030a 	bic.w	r3, r3, #10
 800520c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	4313      	orrs	r3, r2
 8005214:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	621a      	str	r2, [r3, #32]
}
 8005222:	bf00      	nop
 8005224:	371c      	adds	r7, #28
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr

0800522e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800522e:	b480      	push	{r7}
 8005230:	b087      	sub	sp, #28
 8005232:	af00      	add	r7, sp, #0
 8005234:	60f8      	str	r0, [r7, #12]
 8005236:	60b9      	str	r1, [r7, #8]
 8005238:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6a1b      	ldr	r3, [r3, #32]
 800523e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6a1b      	ldr	r3, [r3, #32]
 8005244:	f023 0210 	bic.w	r2, r3, #16
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005258:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	031b      	lsls	r3, r3, #12
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	4313      	orrs	r3, r2
 8005262:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800526a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	011b      	lsls	r3, r3, #4
 8005270:	697a      	ldr	r2, [r7, #20]
 8005272:	4313      	orrs	r3, r2
 8005274:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	693a      	ldr	r2, [r7, #16]
 800527a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	621a      	str	r2, [r3, #32]
}
 8005282:	bf00      	nop
 8005284:	371c      	adds	r7, #28
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr

0800528e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800528e:	b480      	push	{r7}
 8005290:	b085      	sub	sp, #20
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
 8005296:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052a6:	683a      	ldr	r2, [r7, #0]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	f043 0307 	orr.w	r3, r3, #7
 80052b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	609a      	str	r2, [r3, #8]
}
 80052b8:	bf00      	nop
 80052ba:	3714      	adds	r7, #20
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b087      	sub	sp, #28
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
 80052d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80052de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	021a      	lsls	r2, r3, #8
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	431a      	orrs	r2, r3
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	697a      	ldr	r2, [r7, #20]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	697a      	ldr	r2, [r7, #20]
 80052f6:	609a      	str	r2, [r3, #8]
}
 80052f8:	bf00      	nop
 80052fa:	371c      	adds	r7, #28
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005314:	2b01      	cmp	r3, #1
 8005316:	d101      	bne.n	800531c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005318:	2302      	movs	r3, #2
 800531a:	e06d      	b.n	80053f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2202      	movs	r2, #2
 8005328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a30      	ldr	r2, [pc, #192]	@ (8005404 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d004      	beq.n	8005350 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a2f      	ldr	r2, [pc, #188]	@ (8005408 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d108      	bne.n	8005362 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005356:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	4313      	orrs	r3, r2
 8005360:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005368:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	4313      	orrs	r3, r2
 8005372:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a20      	ldr	r2, [pc, #128]	@ (8005404 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d022      	beq.n	80053cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800538e:	d01d      	beq.n	80053cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a1d      	ldr	r2, [pc, #116]	@ (800540c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d018      	beq.n	80053cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a1c      	ldr	r2, [pc, #112]	@ (8005410 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d013      	beq.n	80053cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a1a      	ldr	r2, [pc, #104]	@ (8005414 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d00e      	beq.n	80053cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a15      	ldr	r2, [pc, #84]	@ (8005408 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d009      	beq.n	80053cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a16      	ldr	r2, [pc, #88]	@ (8005418 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d004      	beq.n	80053cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a15      	ldr	r2, [pc, #84]	@ (800541c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d10c      	bne.n	80053e6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	68ba      	ldr	r2, [r7, #8]
 80053da:	4313      	orrs	r3, r2
 80053dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68ba      	ldr	r2, [r7, #8]
 80053e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3714      	adds	r7, #20
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr
 8005404:	40010000 	.word	0x40010000
 8005408:	40010400 	.word	0x40010400
 800540c:	40000400 	.word	0x40000400
 8005410:	40000800 	.word	0x40000800
 8005414:	40000c00 	.word	0x40000c00
 8005418:	40014000 	.word	0x40014000
 800541c:	40001800 	.word	0x40001800

08005420 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d121      	bne.n	8005476 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	4b27      	ldr	r3, [pc, #156]	@ (80054d4 <FMC_SDRAM_Init+0xb4>)
 8005438:	4013      	ands	r3, r2
 800543a:	683a      	ldr	r2, [r7, #0]
 800543c:	6851      	ldr	r1, [r2, #4]
 800543e:	683a      	ldr	r2, [r7, #0]
 8005440:	6892      	ldr	r2, [r2, #8]
 8005442:	4311      	orrs	r1, r2
 8005444:	683a      	ldr	r2, [r7, #0]
 8005446:	68d2      	ldr	r2, [r2, #12]
 8005448:	4311      	orrs	r1, r2
 800544a:	683a      	ldr	r2, [r7, #0]
 800544c:	6912      	ldr	r2, [r2, #16]
 800544e:	4311      	orrs	r1, r2
 8005450:	683a      	ldr	r2, [r7, #0]
 8005452:	6952      	ldr	r2, [r2, #20]
 8005454:	4311      	orrs	r1, r2
 8005456:	683a      	ldr	r2, [r7, #0]
 8005458:	6992      	ldr	r2, [r2, #24]
 800545a:	4311      	orrs	r1, r2
 800545c:	683a      	ldr	r2, [r7, #0]
 800545e:	69d2      	ldr	r2, [r2, #28]
 8005460:	4311      	orrs	r1, r2
 8005462:	683a      	ldr	r2, [r7, #0]
 8005464:	6a12      	ldr	r2, [r2, #32]
 8005466:	4311      	orrs	r1, r2
 8005468:	683a      	ldr	r2, [r7, #0]
 800546a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800546c:	430a      	orrs	r2, r1
 800546e:	431a      	orrs	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	601a      	str	r2, [r3, #0]
 8005474:	e026      	b.n	80054c4 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	69d9      	ldr	r1, [r3, #28]
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	6a1b      	ldr	r3, [r3, #32]
 8005486:	4319      	orrs	r1, r3
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800548c:	430b      	orrs	r3, r1
 800548e:	431a      	orrs	r2, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	685a      	ldr	r2, [r3, #4]
 8005498:	4b0e      	ldr	r3, [pc, #56]	@ (80054d4 <FMC_SDRAM_Init+0xb4>)
 800549a:	4013      	ands	r3, r2
 800549c:	683a      	ldr	r2, [r7, #0]
 800549e:	6851      	ldr	r1, [r2, #4]
 80054a0:	683a      	ldr	r2, [r7, #0]
 80054a2:	6892      	ldr	r2, [r2, #8]
 80054a4:	4311      	orrs	r1, r2
 80054a6:	683a      	ldr	r2, [r7, #0]
 80054a8:	68d2      	ldr	r2, [r2, #12]
 80054aa:	4311      	orrs	r1, r2
 80054ac:	683a      	ldr	r2, [r7, #0]
 80054ae:	6912      	ldr	r2, [r2, #16]
 80054b0:	4311      	orrs	r1, r2
 80054b2:	683a      	ldr	r2, [r7, #0]
 80054b4:	6952      	ldr	r2, [r2, #20]
 80054b6:	4311      	orrs	r1, r2
 80054b8:	683a      	ldr	r2, [r7, #0]
 80054ba:	6992      	ldr	r2, [r2, #24]
 80054bc:	430a      	orrs	r2, r1
 80054be:	431a      	orrs	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	ffff8000 	.word	0xffff8000

080054d8 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80054d8:	b480      	push	{r7}
 80054da:	b085      	sub	sp, #20
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d128      	bne.n	800553c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	1e59      	subs	r1, r3, #1
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	3b01      	subs	r3, #1
 80054fe:	011b      	lsls	r3, r3, #4
 8005500:	4319      	orrs	r1, r3
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	3b01      	subs	r3, #1
 8005508:	021b      	lsls	r3, r3, #8
 800550a:	4319      	orrs	r1, r3
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	3b01      	subs	r3, #1
 8005512:	031b      	lsls	r3, r3, #12
 8005514:	4319      	orrs	r1, r3
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	3b01      	subs	r3, #1
 800551c:	041b      	lsls	r3, r3, #16
 800551e:	4319      	orrs	r1, r3
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	695b      	ldr	r3, [r3, #20]
 8005524:	3b01      	subs	r3, #1
 8005526:	051b      	lsls	r3, r3, #20
 8005528:	4319      	orrs	r1, r3
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	3b01      	subs	r3, #1
 8005530:	061b      	lsls	r3, r3, #24
 8005532:	430b      	orrs	r3, r1
 8005534:	431a      	orrs	r2, r3
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	609a      	str	r2, [r3, #8]
 800553a:	e02d      	b.n	8005598 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	689a      	ldr	r2, [r3, #8]
 8005540:	4b19      	ldr	r3, [pc, #100]	@ (80055a8 <FMC_SDRAM_Timing_Init+0xd0>)
 8005542:	4013      	ands	r3, r2
 8005544:	68ba      	ldr	r2, [r7, #8]
 8005546:	68d2      	ldr	r2, [r2, #12]
 8005548:	3a01      	subs	r2, #1
 800554a:	0311      	lsls	r1, r2, #12
 800554c:	68ba      	ldr	r2, [r7, #8]
 800554e:	6952      	ldr	r2, [r2, #20]
 8005550:	3a01      	subs	r2, #1
 8005552:	0512      	lsls	r2, r2, #20
 8005554:	430a      	orrs	r2, r1
 8005556:	431a      	orrs	r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	1e59      	subs	r1, r3, #1
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	3b01      	subs	r3, #1
 8005570:	011b      	lsls	r3, r3, #4
 8005572:	4319      	orrs	r1, r3
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	3b01      	subs	r3, #1
 800557a:	021b      	lsls	r3, r3, #8
 800557c:	4319      	orrs	r1, r3
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	3b01      	subs	r3, #1
 8005584:	041b      	lsls	r3, r3, #16
 8005586:	4319      	orrs	r1, r3
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	699b      	ldr	r3, [r3, #24]
 800558c:	3b01      	subs	r3, #1
 800558e:	061b      	lsls	r3, r3, #24
 8005590:	430b      	orrs	r3, r1
 8005592:	431a      	orrs	r2, r3
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	3714      	adds	r7, #20
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	ff0f0fff 	.word	0xff0f0fff

080055ac <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b085      	sub	sp, #20
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	691a      	ldr	r2, [r3, #16]
 80055bc:	4b0c      	ldr	r3, [pc, #48]	@ (80055f0 <FMC_SDRAM_SendCommand+0x44>)
 80055be:	4013      	ands	r3, r2
 80055c0:	68ba      	ldr	r2, [r7, #8]
 80055c2:	6811      	ldr	r1, [r2, #0]
 80055c4:	68ba      	ldr	r2, [r7, #8]
 80055c6:	6852      	ldr	r2, [r2, #4]
 80055c8:	4311      	orrs	r1, r2
 80055ca:	68ba      	ldr	r2, [r7, #8]
 80055cc:	6892      	ldr	r2, [r2, #8]
 80055ce:	3a01      	subs	r2, #1
 80055d0:	0152      	lsls	r2, r2, #5
 80055d2:	4311      	orrs	r1, r2
 80055d4:	68ba      	ldr	r2, [r7, #8]
 80055d6:	68d2      	ldr	r2, [r2, #12]
 80055d8:	0252      	lsls	r2, r2, #9
 80055da:	430a      	orrs	r2, r1
 80055dc:	431a      	orrs	r2, r3
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 80055e2:	2300      	movs	r3, #0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3714      	adds	r7, #20
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr
 80055f0:	ffc00000 	.word	0xffc00000

080055f4 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	695a      	ldr	r2, [r3, #20]
 8005602:	4b07      	ldr	r3, [pc, #28]	@ (8005620 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8005604:	4013      	ands	r3, r2
 8005606:	683a      	ldr	r2, [r7, #0]
 8005608:	0052      	lsls	r2, r2, #1
 800560a:	431a      	orrs	r2, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	370c      	adds	r7, #12
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	ffffc001 	.word	0xffffc001

08005624 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8005624:	b480      	push	{r7}
 8005626:	b089      	sub	sp, #36	@ 0x24
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	fa93 f3a3 	rbit	r3, r3
 800563e:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	fab3 f383 	clz	r3, r3
 8005646:	b2db      	uxtb	r3, r3
 8005648:	005b      	lsls	r3, r3, #1
 800564a:	2103      	movs	r1, #3
 800564c:	fa01 f303 	lsl.w	r3, r1, r3
 8005650:	43db      	mvns	r3, r3
 8005652:	401a      	ands	r2, r3
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	fa93 f3a3 	rbit	r3, r3
 800565e:	61bb      	str	r3, [r7, #24]
  return result;
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	fab3 f383 	clz	r3, r3
 8005666:	b2db      	uxtb	r3, r3
 8005668:	005b      	lsls	r3, r3, #1
 800566a:	6879      	ldr	r1, [r7, #4]
 800566c:	fa01 f303 	lsl.w	r3, r1, r3
 8005670:	431a      	orrs	r2, r3
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	601a      	str	r2, [r3, #0]
}
 8005676:	bf00      	nop
 8005678:	3724      	adds	r7, #36	@ 0x24
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr

08005682 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8005682:	b480      	push	{r7}
 8005684:	b085      	sub	sp, #20
 8005686:	af00      	add	r7, sp, #0
 8005688:	60f8      	str	r0, [r7, #12]
 800568a:	60b9      	str	r1, [r7, #8]
 800568c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	685a      	ldr	r2, [r3, #4]
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	43db      	mvns	r3, r3
 8005696:	401a      	ands	r2, r3
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	6879      	ldr	r1, [r7, #4]
 800569c:	fb01 f303 	mul.w	r3, r1, r3
 80056a0:	431a      	orrs	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	605a      	str	r2, [r3, #4]
}
 80056a6:	bf00      	nop
 80056a8:	3714      	adds	r7, #20
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr

080056b2 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80056b2:	b480      	push	{r7}
 80056b4:	b089      	sub	sp, #36	@ 0x24
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	60f8      	str	r0, [r7, #12]
 80056ba:	60b9      	str	r1, [r7, #8]
 80056bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	689a      	ldr	r2, [r3, #8]
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	fa93 f3a3 	rbit	r3, r3
 80056cc:	613b      	str	r3, [r7, #16]
  return result;
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	fab3 f383 	clz	r3, r3
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	005b      	lsls	r3, r3, #1
 80056d8:	2103      	movs	r1, #3
 80056da:	fa01 f303 	lsl.w	r3, r1, r3
 80056de:	43db      	mvns	r3, r3
 80056e0:	401a      	ands	r2, r3
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	fa93 f3a3 	rbit	r3, r3
 80056ec:	61bb      	str	r3, [r7, #24]
  return result;
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	fab3 f383 	clz	r3, r3
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	005b      	lsls	r3, r3, #1
 80056f8:	6879      	ldr	r1, [r7, #4]
 80056fa:	fa01 f303 	lsl.w	r3, r1, r3
 80056fe:	431a      	orrs	r2, r3
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8005704:	bf00      	nop
 8005706:	3724      	adds	r7, #36	@ 0x24
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8005710:	b480      	push	{r7}
 8005712:	b089      	sub	sp, #36	@ 0x24
 8005714:	af00      	add	r7, sp, #0
 8005716:	60f8      	str	r0, [r7, #12]
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	68da      	ldr	r2, [r3, #12]
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	fa93 f3a3 	rbit	r3, r3
 800572a:	613b      	str	r3, [r7, #16]
  return result;
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	fab3 f383 	clz	r3, r3
 8005732:	b2db      	uxtb	r3, r3
 8005734:	005b      	lsls	r3, r3, #1
 8005736:	2103      	movs	r1, #3
 8005738:	fa01 f303 	lsl.w	r3, r1, r3
 800573c:	43db      	mvns	r3, r3
 800573e:	401a      	ands	r2, r3
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	fa93 f3a3 	rbit	r3, r3
 800574a:	61bb      	str	r3, [r7, #24]
  return result;
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	fab3 f383 	clz	r3, r3
 8005752:	b2db      	uxtb	r3, r3
 8005754:	005b      	lsls	r3, r3, #1
 8005756:	6879      	ldr	r1, [r7, #4]
 8005758:	fa01 f303 	lsl.w	r3, r1, r3
 800575c:	431a      	orrs	r2, r3
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	60da      	str	r2, [r3, #12]
}
 8005762:	bf00      	nop
 8005764:	3724      	adds	r7, #36	@ 0x24
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr

0800576e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800576e:	b480      	push	{r7}
 8005770:	b089      	sub	sp, #36	@ 0x24
 8005772:	af00      	add	r7, sp, #0
 8005774:	60f8      	str	r0, [r7, #12]
 8005776:	60b9      	str	r1, [r7, #8]
 8005778:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6a1a      	ldr	r2, [r3, #32]
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	fa93 f3a3 	rbit	r3, r3
 8005788:	613b      	str	r3, [r7, #16]
  return result;
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	fab3 f383 	clz	r3, r3
 8005790:	b2db      	uxtb	r3, r3
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	210f      	movs	r1, #15
 8005796:	fa01 f303 	lsl.w	r3, r1, r3
 800579a:	43db      	mvns	r3, r3
 800579c:	401a      	ands	r2, r3
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	fa93 f3a3 	rbit	r3, r3
 80057a8:	61bb      	str	r3, [r7, #24]
  return result;
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	fab3 f383 	clz	r3, r3
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	6879      	ldr	r1, [r7, #4]
 80057b6:	fa01 f303 	lsl.w	r3, r1, r3
 80057ba:	431a      	orrs	r2, r3
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80057c0:	bf00      	nop
 80057c2:	3724      	adds	r7, #36	@ 0x24
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b089      	sub	sp, #36	@ 0x24
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	0a1b      	lsrs	r3, r3, #8
 80057e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	fa93 f3a3 	rbit	r3, r3
 80057e8:	613b      	str	r3, [r7, #16]
  return result;
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	fab3 f383 	clz	r3, r3
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	210f      	movs	r1, #15
 80057f6:	fa01 f303 	lsl.w	r3, r1, r3
 80057fa:	43db      	mvns	r3, r3
 80057fc:	401a      	ands	r2, r3
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	0a1b      	lsrs	r3, r3, #8
 8005802:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	fa93 f3a3 	rbit	r3, r3
 800580a:	61bb      	str	r3, [r7, #24]
  return result;
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	fab3 f383 	clz	r3, r3
 8005812:	b2db      	uxtb	r3, r3
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	6879      	ldr	r1, [r7, #4]
 8005818:	fa01 f303 	lsl.w	r3, r1, r3
 800581c:	431a      	orrs	r2, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8005822:	bf00      	nop
 8005824:	3724      	adds	r7, #36	@ 0x24
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr

0800582e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800582e:	b580      	push	{r7, lr}
 8005830:	b088      	sub	sp, #32
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
 8005836:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8005838:	2300      	movs	r3, #0
 800583a:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 800583c:	2300      	movs	r3, #0
 800583e:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	fa93 f3a3 	rbit	r3, r3
 800584c:	613b      	str	r3, [r7, #16]
  return result;
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	fab3 f383 	clz	r3, r3
 8005854:	b2db      	uxtb	r3, r3
 8005856:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005858:	e051      	b.n	80058fe <LL_GPIO_Init+0xd0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	2101      	movs	r1, #1
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	fa01 f303 	lsl.w	r3, r1, r3
 8005866:	4013      	ands	r3, r2
 8005868:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d043      	beq.n	80058f8 <LL_GPIO_Init+0xca>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d003      	beq.n	8005880 <LL_GPIO_Init+0x52>
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	2b02      	cmp	r3, #2
 800587e:	d10e      	bne.n	800589e <LL_GPIO_Init+0x70>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	461a      	mov	r2, r3
 8005886:	69b9      	ldr	r1, [r7, #24]
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f7ff ff12 	bl	80056b2 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	6819      	ldr	r1, [r3, #0]
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	461a      	mov	r2, r3
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f7ff fef2 	bl	8005682 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	461a      	mov	r2, r3
 80058a4:	69b9      	ldr	r1, [r7, #24]
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f7ff ff32 	bl	8005710 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d11a      	bne.n	80058ea <LL_GPIO_Init+0xbc>
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	fa93 f3a3 	rbit	r3, r3
 80058be:	60bb      	str	r3, [r7, #8]
  return result;
 80058c0:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80058c2:	fab3 f383 	clz	r3, r3
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	2b07      	cmp	r3, #7
 80058ca:	d807      	bhi.n	80058dc <LL_GPIO_Init+0xae>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	695b      	ldr	r3, [r3, #20]
 80058d0:	461a      	mov	r2, r3
 80058d2:	69b9      	ldr	r1, [r7, #24]
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f7ff ff4a 	bl	800576e <LL_GPIO_SetAFPin_0_7>
 80058da:	e006      	b.n	80058ea <LL_GPIO_Init+0xbc>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	695b      	ldr	r3, [r3, #20]
 80058e0:	461a      	mov	r2, r3
 80058e2:	69b9      	ldr	r1, [r7, #24]
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f7ff ff71 	bl	80057cc <LL_GPIO_SetAFPin_8_15>
        }
      }
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	461a      	mov	r2, r3
 80058f0:	69b9      	ldr	r1, [r7, #24]
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f7ff fe96 	bl	8005624 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	3301      	adds	r3, #1
 80058fc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	fa22 f303 	lsr.w	r3, r2, r3
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1a6      	bne.n	800585a <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3720      	adds	r7, #32
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
	...

08005918 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8005918:	b480      	push	{r7}
 800591a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800591c:	4b06      	ldr	r3, [pc, #24]	@ (8005938 <LL_RCC_HSI_IsReady+0x20>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0302 	and.w	r3, r3, #2
 8005924:	2b02      	cmp	r3, #2
 8005926:	bf0c      	ite	eq
 8005928:	2301      	moveq	r3, #1
 800592a:	2300      	movne	r3, #0
 800592c:	b2db      	uxtb	r3, r3
}
 800592e:	4618      	mov	r0, r3
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr
 8005938:	40023800 	.word	0x40023800

0800593c <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800593c:	b480      	push	{r7}
 800593e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8005940:	4b06      	ldr	r3, [pc, #24]	@ (800595c <LL_RCC_LSE_IsReady+0x20>)
 8005942:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005944:	f003 0302 	and.w	r3, r3, #2
 8005948:	2b02      	cmp	r3, #2
 800594a:	bf0c      	ite	eq
 800594c:	2301      	moveq	r3, #1
 800594e:	2300      	movne	r3, #0
 8005950:	b2db      	uxtb	r3, r3
}
 8005952:	4618      	mov	r0, r3
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr
 800595c:	40023800 	.word	0x40023800

08005960 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8005960:	b480      	push	{r7}
 8005962:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005964:	4b04      	ldr	r3, [pc, #16]	@ (8005978 <LL_RCC_GetSysClkSource+0x18>)
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f003 030c 	and.w	r3, r3, #12
}
 800596c:	4618      	mov	r0, r3
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	40023800 	.word	0x40023800

0800597c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800597c:	b480      	push	{r7}
 800597e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005980:	4b04      	ldr	r3, [pc, #16]	@ (8005994 <LL_RCC_GetAHBPrescaler+0x18>)
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005988:	4618      	mov	r0, r3
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	40023800 	.word	0x40023800

08005998 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005998:	b480      	push	{r7}
 800599a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800599c:	4b04      	ldr	r3, [pc, #16]	@ (80059b0 <LL_RCC_GetAPB1Prescaler+0x18>)
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	40023800 	.word	0x40023800

080059b4 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80059b4:	b480      	push	{r7}
 80059b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80059b8:	4b04      	ldr	r3, [pc, #16]	@ (80059cc <LL_RCC_GetAPB2Prescaler+0x18>)
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	40023800 	.word	0x40023800

080059d0 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART6_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_USART6_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART6_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->DCKCFGR2, USARTx) | (USARTx << 16U));
 80059d8:	4b06      	ldr	r3, [pc, #24]	@ (80059f4 <LL_RCC_GetUSARTClockSource+0x24>)
 80059da:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	401a      	ands	r2, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	041b      	lsls	r3, r3, #16
 80059e6:	4313      	orrs	r3, r2
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	370c      	adds	r7, #12
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr
 80059f4:	40023800 	.word	0x40023800

080059f8 <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART8_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_UART8_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_UART8_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->DCKCFGR2, UARTx) | (UARTx << 16U));
 8005a00:	4b06      	ldr	r3, [pc, #24]	@ (8005a1c <LL_RCC_GetUARTClockSource+0x24>)
 8005a02:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	401a      	ands	r2, r3
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	041b      	lsls	r3, r3, #16
 8005a0e:	4313      	orrs	r3, r2
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr
 8005a1c:	40023800 	.word	0x40023800

08005a20 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005a20:	b480      	push	{r7}
 8005a22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005a24:	4b04      	ldr	r3, [pc, #16]	@ (8005a38 <LL_RCC_PLL_GetMainSource+0x18>)
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	40023800 	.word	0x40023800

08005a3c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 50 and 432
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8005a40:	4b04      	ldr	r3, [pc, #16]	@ (8005a54 <LL_RCC_PLL_GetN+0x18>)
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	099b      	lsrs	r3, r3, #6
 8005a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr
 8005a54:	40023800 	.word	0x40023800

08005a58 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8005a5c:	4b04      	ldr	r3, [pc, #16]	@ (8005a70 <LL_RCC_PLL_GetP+0x18>)
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop
 8005a70:	40023800 	.word	0x40023800

08005a74 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005a74:	b480      	push	{r7}
 8005a76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005a78:	4b04      	ldr	r3, [pc, #16]	@ (8005a8c <LL_RCC_PLL_GetDivider+0x18>)
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	40023800 	.word	0x40023800

08005a90 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART6_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2b03      	cmp	r3, #3
 8005aa0:	d133      	bne.n	8005b0a <LL_RCC_GetUSARTClockFreq+0x7a>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f7ff ff94 	bl	80059d0 <LL_RCC_GetUSARTClockSource>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	f1b3 1f03 	cmp.w	r3, #196611	@ 0x30003
 8005aae:	d016      	beq.n	8005ade <LL_RCC_GetUSARTClockFreq+0x4e>
 8005ab0:	f1b3 1f03 	cmp.w	r3, #196611	@ 0x30003
 8005ab4:	d81d      	bhi.n	8005af2 <LL_RCC_GetUSARTClockFreq+0x62>
 8005ab6:	4a70      	ldr	r2, [pc, #448]	@ (8005c78 <LL_RCC_GetUSARTClockFreq+0x1e8>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d003      	beq.n	8005ac4 <LL_RCC_GetUSARTClockFreq+0x34>
 8005abc:	4a6f      	ldr	r2, [pc, #444]	@ (8005c7c <LL_RCC_GetUSARTClockFreq+0x1ec>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d004      	beq.n	8005acc <LL_RCC_GetUSARTClockFreq+0x3c>
 8005ac2:	e016      	b.n	8005af2 <LL_RCC_GetUSARTClockFreq+0x62>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8005ac4:	f000 f9f2 	bl	8005eac <RCC_GetSystemClockFreq>
 8005ac8:	60f8      	str	r0, [r7, #12]
        break;
 8005aca:	e0cf      	b.n	8005c6c <LL_RCC_GetUSARTClockFreq+0x1dc>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8005acc:	f7ff ff24 	bl	8005918 <LL_RCC_HSI_IsReady>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	f000 80bb 	beq.w	8005c4e <LL_RCC_GetUSARTClockFreq+0x1be>
        {
          usart_frequency = HSI_VALUE;
 8005ad8:	4b69      	ldr	r3, [pc, #420]	@ (8005c80 <LL_RCC_GetUSARTClockFreq+0x1f0>)
 8005ada:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005adc:	e0b7      	b.n	8005c4e <LL_RCC_GetUSARTClockFreq+0x1be>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8005ade:	f7ff ff2d 	bl	800593c <LL_RCC_LSE_IsReady>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	f000 80b4 	beq.w	8005c52 <LL_RCC_GetUSARTClockFreq+0x1c2>
        {
          usart_frequency = LSE_VALUE;
 8005aea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005aee:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005af0:	e0af      	b.n	8005c52 <LL_RCC_GetUSARTClockFreq+0x1c2>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005af2:	f000 f9db 	bl	8005eac <RCC_GetSystemClockFreq>
 8005af6:	4603      	mov	r3, r0
 8005af8:	4618      	mov	r0, r3
 8005afa:	f000 f9ff 	bl	8005efc <RCC_GetHCLKClockFreq>
 8005afe:	4603      	mov	r3, r0
 8005b00:	4618      	mov	r0, r3
 8005b02:	f000 fa25 	bl	8005f50 <RCC_GetPCLK2ClockFreq>
 8005b06:	60f8      	str	r0, [r7, #12]
        break;
 8005b08:	e0b0      	b.n	8005c6c <LL_RCC_GetUSARTClockFreq+0x1dc>
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2b0c      	cmp	r3, #12
 8005b0e:	d133      	bne.n	8005b78 <LL_RCC_GetUSARTClockFreq+0xe8>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f7ff ff5d 	bl	80059d0 <LL_RCC_GetUSARTClockSource>
 8005b16:	4603      	mov	r3, r0
 8005b18:	f1b3 1f0c 	cmp.w	r3, #786444	@ 0xc000c
 8005b1c:	d016      	beq.n	8005b4c <LL_RCC_GetUSARTClockFreq+0xbc>
 8005b1e:	f1b3 1f0c 	cmp.w	r3, #786444	@ 0xc000c
 8005b22:	d81d      	bhi.n	8005b60 <LL_RCC_GetUSARTClockFreq+0xd0>
 8005b24:	4a57      	ldr	r2, [pc, #348]	@ (8005c84 <LL_RCC_GetUSARTClockFreq+0x1f4>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d003      	beq.n	8005b32 <LL_RCC_GetUSARTClockFreq+0xa2>
 8005b2a:	4a57      	ldr	r2, [pc, #348]	@ (8005c88 <LL_RCC_GetUSARTClockFreq+0x1f8>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d004      	beq.n	8005b3a <LL_RCC_GetUSARTClockFreq+0xaa>
 8005b30:	e016      	b.n	8005b60 <LL_RCC_GetUSARTClockFreq+0xd0>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8005b32:	f000 f9bb 	bl	8005eac <RCC_GetSystemClockFreq>
 8005b36:	60f8      	str	r0, [r7, #12]
        break;
 8005b38:	e098      	b.n	8005c6c <LL_RCC_GetUSARTClockFreq+0x1dc>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8005b3a:	f7ff feed 	bl	8005918 <LL_RCC_HSI_IsReady>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f000 8088 	beq.w	8005c56 <LL_RCC_GetUSARTClockFreq+0x1c6>
        {
          usart_frequency = HSI_VALUE;
 8005b46:	4b4e      	ldr	r3, [pc, #312]	@ (8005c80 <LL_RCC_GetUSARTClockFreq+0x1f0>)
 8005b48:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005b4a:	e084      	b.n	8005c56 <LL_RCC_GetUSARTClockFreq+0x1c6>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8005b4c:	f7ff fef6 	bl	800593c <LL_RCC_LSE_IsReady>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	f000 8081 	beq.w	8005c5a <LL_RCC_GetUSARTClockFreq+0x1ca>
        {
          usart_frequency = LSE_VALUE;
 8005b58:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b5c:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005b5e:	e07c      	b.n	8005c5a <LL_RCC_GetUSARTClockFreq+0x1ca>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005b60:	f000 f9a4 	bl	8005eac <RCC_GetSystemClockFreq>
 8005b64:	4603      	mov	r3, r0
 8005b66:	4618      	mov	r0, r3
 8005b68:	f000 f9c8 	bl	8005efc <RCC_GetHCLKClockFreq>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f000 f9da 	bl	8005f28 <RCC_GetPCLK1ClockFreq>
 8005b74:	60f8      	str	r0, [r7, #12]
        break;
 8005b76:	e079      	b.n	8005c6c <LL_RCC_GetUSARTClockFreq+0x1dc>
    }
  }
  else if (USARTxSource == LL_RCC_USART6_CLKSOURCE)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005b7e:	d131      	bne.n	8005be4 <LL_RCC_GetUSARTClockFreq+0x154>
  {
    /* USART6CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f7ff ff25 	bl	80059d0 <LL_RCC_GetUSARTClockSource>
 8005b86:	4603      	mov	r3, r0
 8005b88:	f1b3 2f0c 	cmp.w	r3, #201329664	@ 0xc000c00
 8005b8c:	d015      	beq.n	8005bba <LL_RCC_GetUSARTClockFreq+0x12a>
 8005b8e:	f1b3 2f0c 	cmp.w	r3, #201329664	@ 0xc000c00
 8005b92:	d81b      	bhi.n	8005bcc <LL_RCC_GetUSARTClockFreq+0x13c>
 8005b94:	4a3d      	ldr	r2, [pc, #244]	@ (8005c8c <LL_RCC_GetUSARTClockFreq+0x1fc>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d003      	beq.n	8005ba2 <LL_RCC_GetUSARTClockFreq+0x112>
 8005b9a:	4a3d      	ldr	r2, [pc, #244]	@ (8005c90 <LL_RCC_GetUSARTClockFreq+0x200>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d004      	beq.n	8005baa <LL_RCC_GetUSARTClockFreq+0x11a>
 8005ba0:	e014      	b.n	8005bcc <LL_RCC_GetUSARTClockFreq+0x13c>
    {
      case LL_RCC_USART6_CLKSOURCE_SYSCLK: /* USART6 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8005ba2:	f000 f983 	bl	8005eac <RCC_GetSystemClockFreq>
 8005ba6:	60f8      	str	r0, [r7, #12]
        break;
 8005ba8:	e060      	b.n	8005c6c <LL_RCC_GetUSARTClockFreq+0x1dc>

      case LL_RCC_USART6_CLKSOURCE_HSI:    /* USART6 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8005baa:	f7ff feb5 	bl	8005918 <LL_RCC_HSI_IsReady>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d054      	beq.n	8005c5e <LL_RCC_GetUSARTClockFreq+0x1ce>
        {
          usart_frequency = HSI_VALUE;
 8005bb4:	4b32      	ldr	r3, [pc, #200]	@ (8005c80 <LL_RCC_GetUSARTClockFreq+0x1f0>)
 8005bb6:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005bb8:	e051      	b.n	8005c5e <LL_RCC_GetUSARTClockFreq+0x1ce>

      case LL_RCC_USART6_CLKSOURCE_LSE:    /* USART6 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8005bba:	f7ff febf 	bl	800593c <LL_RCC_LSE_IsReady>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d04e      	beq.n	8005c62 <LL_RCC_GetUSARTClockFreq+0x1d2>
        {
          usart_frequency = LSE_VALUE;
 8005bc4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bc8:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005bca:	e04a      	b.n	8005c62 <LL_RCC_GetUSARTClockFreq+0x1d2>

      case LL_RCC_USART6_CLKSOURCE_PCLK2:  /* USART6 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005bcc:	f000 f96e 	bl	8005eac <RCC_GetSystemClockFreq>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f000 f992 	bl	8005efc <RCC_GetHCLKClockFreq>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f000 f9b8 	bl	8005f50 <RCC_GetPCLK2ClockFreq>
 8005be0:	60f8      	str	r0, [r7, #12]
        break;
 8005be2:	e043      	b.n	8005c6c <LL_RCC_GetUSARTClockFreq+0x1dc>
    }
  }
  else
  {
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b30      	cmp	r3, #48	@ 0x30
 8005be8:	d140      	bne.n	8005c6c <LL_RCC_GetUSARTClockFreq+0x1dc>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f7ff fef0 	bl	80059d0 <LL_RCC_GetUSARTClockSource>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 8005bf6:	d015      	beq.n	8005c24 <LL_RCC_GetUSARTClockFreq+0x194>
 8005bf8:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 8005bfc:	d81b      	bhi.n	8005c36 <LL_RCC_GetUSARTClockFreq+0x1a6>
 8005bfe:	4a25      	ldr	r2, [pc, #148]	@ (8005c94 <LL_RCC_GetUSARTClockFreq+0x204>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d003      	beq.n	8005c0c <LL_RCC_GetUSARTClockFreq+0x17c>
 8005c04:	4a24      	ldr	r2, [pc, #144]	@ (8005c98 <LL_RCC_GetUSARTClockFreq+0x208>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d004      	beq.n	8005c14 <LL_RCC_GetUSARTClockFreq+0x184>
 8005c0a:	e014      	b.n	8005c36 <LL_RCC_GetUSARTClockFreq+0x1a6>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 8005c0c:	f000 f94e 	bl	8005eac <RCC_GetSystemClockFreq>
 8005c10:	60f8      	str	r0, [r7, #12]
          break;
 8005c12:	e02b      	b.n	8005c6c <LL_RCC_GetUSARTClockFreq+0x1dc>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady())
 8005c14:	f7ff fe80 	bl	8005918 <LL_RCC_HSI_IsReady>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d023      	beq.n	8005c66 <LL_RCC_GetUSARTClockFreq+0x1d6>
          {
            usart_frequency = HSI_VALUE;
 8005c1e:	4b18      	ldr	r3, [pc, #96]	@ (8005c80 <LL_RCC_GetUSARTClockFreq+0x1f0>)
 8005c20:	60fb      	str	r3, [r7, #12]
          }
          break;
 8005c22:	e020      	b.n	8005c66 <LL_RCC_GetUSARTClockFreq+0x1d6>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady())
 8005c24:	f7ff fe8a 	bl	800593c <LL_RCC_LSE_IsReady>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d01d      	beq.n	8005c6a <LL_RCC_GetUSARTClockFreq+0x1da>
          {
            usart_frequency = LSE_VALUE;
 8005c2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c32:	60fb      	str	r3, [r7, #12]
          }
          break;
 8005c34:	e019      	b.n	8005c6a <LL_RCC_GetUSARTClockFreq+0x1da>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
        default:
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005c36:	f000 f939 	bl	8005eac <RCC_GetSystemClockFreq>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f000 f95d 	bl	8005efc <RCC_GetHCLKClockFreq>
 8005c42:	4603      	mov	r3, r0
 8005c44:	4618      	mov	r0, r3
 8005c46:	f000 f96f 	bl	8005f28 <RCC_GetPCLK1ClockFreq>
 8005c4a:	60f8      	str	r0, [r7, #12]
          break;
 8005c4c:	e00e      	b.n	8005c6c <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 8005c4e:	bf00      	nop
 8005c50:	e00c      	b.n	8005c6c <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 8005c52:	bf00      	nop
 8005c54:	e00a      	b.n	8005c6c <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 8005c56:	bf00      	nop
 8005c58:	e008      	b.n	8005c6c <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 8005c5a:	bf00      	nop
 8005c5c:	e006      	b.n	8005c6c <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 8005c5e:	bf00      	nop
 8005c60:	e004      	b.n	8005c6c <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 8005c62:	bf00      	nop
 8005c64:	e002      	b.n	8005c6c <LL_RCC_GetUSARTClockFreq+0x1dc>
          break;
 8005c66:	bf00      	nop
 8005c68:	e000      	b.n	8005c6c <LL_RCC_GetUSARTClockFreq+0x1dc>
          break;
 8005c6a:	bf00      	nop
      }
    }
  }
  return usart_frequency;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3710      	adds	r7, #16
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	00030001 	.word	0x00030001
 8005c7c:	00030002 	.word	0x00030002
 8005c80:	00f42400 	.word	0x00f42400
 8005c84:	000c0004 	.word	0x000c0004
 8005c88:	000c0008 	.word	0x000c0008
 8005c8c:	0c000400 	.word	0x0c000400
 8005c90:	0c000800 	.word	0x0c000800
 8005c94:	00300010 	.word	0x00300010
 8005c98:	00300020 	.word	0x00300020

08005c9c <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART8_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2bc0      	cmp	r3, #192	@ 0xc0
 8005cac:	d133      	bne.n	8005d16 <LL_RCC_GetUARTClockFreq+0x7a>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f7ff fea2 	bl	80059f8 <LL_RCC_GetUARTClockSource>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 8005cba:	d016      	beq.n	8005cea <LL_RCC_GetUARTClockFreq+0x4e>
 8005cbc:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 8005cc0:	d81d      	bhi.n	8005cfe <LL_RCC_GetUARTClockFreq+0x62>
 8005cc2:	4a71      	ldr	r2, [pc, #452]	@ (8005e88 <LL_RCC_GetUARTClockFreq+0x1ec>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d003      	beq.n	8005cd0 <LL_RCC_GetUARTClockFreq+0x34>
 8005cc8:	4a70      	ldr	r2, [pc, #448]	@ (8005e8c <LL_RCC_GetUARTClockFreq+0x1f0>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d004      	beq.n	8005cd8 <LL_RCC_GetUARTClockFreq+0x3c>
 8005cce:	e016      	b.n	8005cfe <LL_RCC_GetUARTClockFreq+0x62>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8005cd0:	f000 f8ec 	bl	8005eac <RCC_GetSystemClockFreq>
 8005cd4:	60f8      	str	r0, [r7, #12]
        break;
 8005cd6:	e0d1      	b.n	8005e7c <LL_RCC_GetUARTClockFreq+0x1e0>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8005cd8:	f7ff fe1e 	bl	8005918 <LL_RCC_HSI_IsReady>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	f000 80bd 	beq.w	8005e5e <LL_RCC_GetUARTClockFreq+0x1c2>
        {
          uart_frequency = HSI_VALUE;
 8005ce4:	4b6a      	ldr	r3, [pc, #424]	@ (8005e90 <LL_RCC_GetUARTClockFreq+0x1f4>)
 8005ce6:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005ce8:	e0b9      	b.n	8005e5e <LL_RCC_GetUARTClockFreq+0x1c2>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8005cea:	f7ff fe27 	bl	800593c <LL_RCC_LSE_IsReady>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	f000 80b6 	beq.w	8005e62 <LL_RCC_GetUARTClockFreq+0x1c6>
        {
          uart_frequency = LSE_VALUE;
 8005cf6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cfa:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005cfc:	e0b1      	b.n	8005e62 <LL_RCC_GetUARTClockFreq+0x1c6>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005cfe:	f000 f8d5 	bl	8005eac <RCC_GetSystemClockFreq>
 8005d02:	4603      	mov	r3, r0
 8005d04:	4618      	mov	r0, r3
 8005d06:	f000 f8f9 	bl	8005efc <RCC_GetHCLKClockFreq>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f000 f90b 	bl	8005f28 <RCC_GetPCLK1ClockFreq>
 8005d12:	60f8      	str	r0, [r7, #12]
        break;
 8005d14:	e0b2      	b.n	8005e7c <LL_RCC_GetUARTClockFreq+0x1e0>
    }
  }
  else if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d1c:	d133      	bne.n	8005d86 <LL_RCC_GetUARTClockFreq+0xea>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f7ff fe6a 	bl	80059f8 <LL_RCC_GetUARTClockSource>
 8005d24:	4603      	mov	r3, r0
 8005d26:	f1b3 2f03 	cmp.w	r3, #50332416	@ 0x3000300
 8005d2a:	d016      	beq.n	8005d5a <LL_RCC_GetUARTClockFreq+0xbe>
 8005d2c:	f1b3 2f03 	cmp.w	r3, #50332416	@ 0x3000300
 8005d30:	d81d      	bhi.n	8005d6e <LL_RCC_GetUARTClockFreq+0xd2>
 8005d32:	4a58      	ldr	r2, [pc, #352]	@ (8005e94 <LL_RCC_GetUARTClockFreq+0x1f8>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d003      	beq.n	8005d40 <LL_RCC_GetUARTClockFreq+0xa4>
 8005d38:	4a57      	ldr	r2, [pc, #348]	@ (8005e98 <LL_RCC_GetUARTClockFreq+0x1fc>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d004      	beq.n	8005d48 <LL_RCC_GetUARTClockFreq+0xac>
 8005d3e:	e016      	b.n	8005d6e <LL_RCC_GetUARTClockFreq+0xd2>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8005d40:	f000 f8b4 	bl	8005eac <RCC_GetSystemClockFreq>
 8005d44:	60f8      	str	r0, [r7, #12]
        break;
 8005d46:	e099      	b.n	8005e7c <LL_RCC_GetUARTClockFreq+0x1e0>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8005d48:	f7ff fde6 	bl	8005918 <LL_RCC_HSI_IsReady>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	f000 8089 	beq.w	8005e66 <LL_RCC_GetUARTClockFreq+0x1ca>
        {
          uart_frequency = HSI_VALUE;
 8005d54:	4b4e      	ldr	r3, [pc, #312]	@ (8005e90 <LL_RCC_GetUARTClockFreq+0x1f4>)
 8005d56:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005d58:	e085      	b.n	8005e66 <LL_RCC_GetUARTClockFreq+0x1ca>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8005d5a:	f7ff fdef 	bl	800593c <LL_RCC_LSE_IsReady>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f000 8082 	beq.w	8005e6a <LL_RCC_GetUARTClockFreq+0x1ce>
        {
          uart_frequency = LSE_VALUE;
 8005d66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d6a:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005d6c:	e07d      	b.n	8005e6a <LL_RCC_GetUARTClockFreq+0x1ce>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005d6e:	f000 f89d 	bl	8005eac <RCC_GetSystemClockFreq>
 8005d72:	4603      	mov	r3, r0
 8005d74:	4618      	mov	r0, r3
 8005d76:	f000 f8c1 	bl	8005efc <RCC_GetHCLKClockFreq>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f000 f8d3 	bl	8005f28 <RCC_GetPCLK1ClockFreq>
 8005d82:	60f8      	str	r0, [r7, #12]
        break;
 8005d84:	e07a      	b.n	8005e7c <LL_RCC_GetUARTClockFreq+0x1e0>
    }
  }
  else if (UARTxSource == LL_RCC_UART7_CLKSOURCE)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005d8c:	d131      	bne.n	8005df2 <LL_RCC_GetUARTClockFreq+0x156>
  {
    /* UART7CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f7ff fe32 	bl	80059f8 <LL_RCC_GetUARTClockSource>
 8005d94:	4603      	mov	r3, r0
 8005d96:	f1b3 2f30 	cmp.w	r3, #805318656	@ 0x30003000
 8005d9a:	d015      	beq.n	8005dc8 <LL_RCC_GetUARTClockFreq+0x12c>
 8005d9c:	f1b3 2f30 	cmp.w	r3, #805318656	@ 0x30003000
 8005da0:	d81b      	bhi.n	8005dda <LL_RCC_GetUARTClockFreq+0x13e>
 8005da2:	4a3e      	ldr	r2, [pc, #248]	@ (8005e9c <LL_RCC_GetUARTClockFreq+0x200>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d003      	beq.n	8005db0 <LL_RCC_GetUARTClockFreq+0x114>
 8005da8:	4a3d      	ldr	r2, [pc, #244]	@ (8005ea0 <LL_RCC_GetUARTClockFreq+0x204>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d004      	beq.n	8005db8 <LL_RCC_GetUARTClockFreq+0x11c>
 8005dae:	e014      	b.n	8005dda <LL_RCC_GetUARTClockFreq+0x13e>
    {
      case LL_RCC_UART7_CLKSOURCE_SYSCLK: /* UART7 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8005db0:	f000 f87c 	bl	8005eac <RCC_GetSystemClockFreq>
 8005db4:	60f8      	str	r0, [r7, #12]
        break;
 8005db6:	e061      	b.n	8005e7c <LL_RCC_GetUARTClockFreq+0x1e0>

      case LL_RCC_UART7_CLKSOURCE_HSI:    /* UART7 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8005db8:	f7ff fdae 	bl	8005918 <LL_RCC_HSI_IsReady>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d055      	beq.n	8005e6e <LL_RCC_GetUARTClockFreq+0x1d2>
        {
          uart_frequency = HSI_VALUE;
 8005dc2:	4b33      	ldr	r3, [pc, #204]	@ (8005e90 <LL_RCC_GetUARTClockFreq+0x1f4>)
 8005dc4:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005dc6:	e052      	b.n	8005e6e <LL_RCC_GetUARTClockFreq+0x1d2>

      case LL_RCC_UART7_CLKSOURCE_LSE:    /* UART7 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8005dc8:	f7ff fdb8 	bl	800593c <LL_RCC_LSE_IsReady>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d04f      	beq.n	8005e72 <LL_RCC_GetUARTClockFreq+0x1d6>
        {
          uart_frequency = LSE_VALUE;
 8005dd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005dd6:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005dd8:	e04b      	b.n	8005e72 <LL_RCC_GetUARTClockFreq+0x1d6>

      case LL_RCC_UART7_CLKSOURCE_PCLK1:  /* UART7 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005dda:	f000 f867 	bl	8005eac <RCC_GetSystemClockFreq>
 8005dde:	4603      	mov	r3, r0
 8005de0:	4618      	mov	r0, r3
 8005de2:	f000 f88b 	bl	8005efc <RCC_GetHCLKClockFreq>
 8005de6:	4603      	mov	r3, r0
 8005de8:	4618      	mov	r0, r3
 8005dea:	f000 f89d 	bl	8005f28 <RCC_GetPCLK1ClockFreq>
 8005dee:	60f8      	str	r0, [r7, #12]
        break;
 8005df0:	e044      	b.n	8005e7c <LL_RCC_GetUARTClockFreq+0x1e0>
    }
  }
  else
  {
    if (UARTxSource == LL_RCC_UART8_CLKSOURCE)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005df8:	d140      	bne.n	8005e7c <LL_RCC_GetUARTClockFreq+0x1e0>
    {
      /* UART8CLK clock frequency */
      switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f7ff fdfc 	bl	80059f8 <LL_RCC_GetUARTClockSource>
 8005e00:	4603      	mov	r3, r0
 8005e02:	f1b3 2fc0 	cmp.w	r3, #3221274624	@ 0xc000c000
 8005e06:	d015      	beq.n	8005e34 <LL_RCC_GetUARTClockFreq+0x198>
 8005e08:	f1b3 2fc0 	cmp.w	r3, #3221274624	@ 0xc000c000
 8005e0c:	d81b      	bhi.n	8005e46 <LL_RCC_GetUARTClockFreq+0x1aa>
 8005e0e:	4a25      	ldr	r2, [pc, #148]	@ (8005ea4 <LL_RCC_GetUARTClockFreq+0x208>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d003      	beq.n	8005e1c <LL_RCC_GetUARTClockFreq+0x180>
 8005e14:	4a24      	ldr	r2, [pc, #144]	@ (8005ea8 <LL_RCC_GetUARTClockFreq+0x20c>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d004      	beq.n	8005e24 <LL_RCC_GetUARTClockFreq+0x188>
 8005e1a:	e014      	b.n	8005e46 <LL_RCC_GetUARTClockFreq+0x1aa>
      {
        case LL_RCC_UART8_CLKSOURCE_SYSCLK: /* UART8 Clock is System Clock */
          uart_frequency = RCC_GetSystemClockFreq();
 8005e1c:	f000 f846 	bl	8005eac <RCC_GetSystemClockFreq>
 8005e20:	60f8      	str	r0, [r7, #12]
          break;
 8005e22:	e02b      	b.n	8005e7c <LL_RCC_GetUARTClockFreq+0x1e0>

        case LL_RCC_UART8_CLKSOURCE_HSI:    /* UART8 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady())
 8005e24:	f7ff fd78 	bl	8005918 <LL_RCC_HSI_IsReady>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d023      	beq.n	8005e76 <LL_RCC_GetUARTClockFreq+0x1da>
          {
            uart_frequency = HSI_VALUE;
 8005e2e:	4b18      	ldr	r3, [pc, #96]	@ (8005e90 <LL_RCC_GetUARTClockFreq+0x1f4>)
 8005e30:	60fb      	str	r3, [r7, #12]
          }
          break;
 8005e32:	e020      	b.n	8005e76 <LL_RCC_GetUARTClockFreq+0x1da>

        case LL_RCC_UART8_CLKSOURCE_LSE:    /* UART8 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady())
 8005e34:	f7ff fd82 	bl	800593c <LL_RCC_LSE_IsReady>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d01d      	beq.n	8005e7a <LL_RCC_GetUARTClockFreq+0x1de>
          {
            uart_frequency = LSE_VALUE;
 8005e3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e42:	60fb      	str	r3, [r7, #12]
          }
          break;
 8005e44:	e019      	b.n	8005e7a <LL_RCC_GetUARTClockFreq+0x1de>

        case LL_RCC_UART8_CLKSOURCE_PCLK1:  /* UART8 Clock is PCLK1 */
        default:
          uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005e46:	f000 f831 	bl	8005eac <RCC_GetSystemClockFreq>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f000 f855 	bl	8005efc <RCC_GetHCLKClockFreq>
 8005e52:	4603      	mov	r3, r0
 8005e54:	4618      	mov	r0, r3
 8005e56:	f000 f867 	bl	8005f28 <RCC_GetPCLK1ClockFreq>
 8005e5a:	60f8      	str	r0, [r7, #12]
          break;
 8005e5c:	e00e      	b.n	8005e7c <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 8005e5e:	bf00      	nop
 8005e60:	e00c      	b.n	8005e7c <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 8005e62:	bf00      	nop
 8005e64:	e00a      	b.n	8005e7c <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 8005e66:	bf00      	nop
 8005e68:	e008      	b.n	8005e7c <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 8005e6a:	bf00      	nop
 8005e6c:	e006      	b.n	8005e7c <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 8005e6e:	bf00      	nop
 8005e70:	e004      	b.n	8005e7c <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 8005e72:	bf00      	nop
 8005e74:	e002      	b.n	8005e7c <LL_RCC_GetUARTClockFreq+0x1e0>
          break;
 8005e76:	bf00      	nop
 8005e78:	e000      	b.n	8005e7c <LL_RCC_GetUARTClockFreq+0x1e0>
          break;
 8005e7a:	bf00      	nop
      }
    }
  }
  return uart_frequency;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3710      	adds	r7, #16
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	00c00040 	.word	0x00c00040
 8005e8c:	00c00080 	.word	0x00c00080
 8005e90:	00f42400 	.word	0x00f42400
 8005e94:	03000100 	.word	0x03000100
 8005e98:	03000200 	.word	0x03000200
 8005e9c:	30001000 	.word	0x30001000
 8005ea0:	30002000 	.word	0x30002000
 8005ea4:	c0004000 	.word	0xc0004000
 8005ea8:	c0008000 	.word	0xc0008000

08005eac <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b082      	sub	sp, #8
 8005eb0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8005eb6:	f7ff fd53 	bl	8005960 <LL_RCC_GetSysClkSource>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b08      	cmp	r3, #8
 8005ebe:	d00c      	beq.n	8005eda <RCC_GetSystemClockFreq+0x2e>
 8005ec0:	2b08      	cmp	r3, #8
 8005ec2:	d80e      	bhi.n	8005ee2 <RCC_GetSystemClockFreq+0x36>
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d002      	beq.n	8005ece <RCC_GetSystemClockFreq+0x22>
 8005ec8:	2b04      	cmp	r3, #4
 8005eca:	d003      	beq.n	8005ed4 <RCC_GetSystemClockFreq+0x28>
 8005ecc:	e009      	b.n	8005ee2 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8005ece:	4b09      	ldr	r3, [pc, #36]	@ (8005ef4 <RCC_GetSystemClockFreq+0x48>)
 8005ed0:	607b      	str	r3, [r7, #4]
      break;
 8005ed2:	e009      	b.n	8005ee8 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8005ed4:	4b08      	ldr	r3, [pc, #32]	@ (8005ef8 <RCC_GetSystemClockFreq+0x4c>)
 8005ed6:	607b      	str	r3, [r7, #4]
      break;
 8005ed8:	e006      	b.n	8005ee8 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8005eda:	f000 f84d 	bl	8005f78 <RCC_PLL_GetFreqDomain_SYS>
 8005ede:	6078      	str	r0, [r7, #4]
      break;
 8005ee0:	e002      	b.n	8005ee8 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8005ee2:	4b04      	ldr	r3, [pc, #16]	@ (8005ef4 <RCC_GetSystemClockFreq+0x48>)
 8005ee4:	607b      	str	r3, [r7, #4]
      break;
 8005ee6:	bf00      	nop
  }

  return frequency;
 8005ee8:	687b      	ldr	r3, [r7, #4]
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3708      	adds	r7, #8
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	00f42400 	.word	0x00f42400
 8005ef8:	017d7840 	.word	0x017d7840

08005efc <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8005f04:	f7ff fd3a 	bl	800597c <LL_RCC_GetAHBPrescaler>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	091b      	lsrs	r3, r3, #4
 8005f0c:	f003 030f 	and.w	r3, r3, #15
 8005f10:	4a04      	ldr	r2, [pc, #16]	@ (8005f24 <RCC_GetHCLKClockFreq+0x28>)
 8005f12:	5cd3      	ldrb	r3, [r2, r3]
 8005f14:	461a      	mov	r2, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	40d3      	lsrs	r3, r2
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3708      	adds	r7, #8
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	08010648 	.word	0x08010648

08005f28 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8005f30:	f7ff fd32 	bl	8005998 <LL_RCC_GetAPB1Prescaler>
 8005f34:	4603      	mov	r3, r0
 8005f36:	0a9b      	lsrs	r3, r3, #10
 8005f38:	4a04      	ldr	r2, [pc, #16]	@ (8005f4c <RCC_GetPCLK1ClockFreq+0x24>)
 8005f3a:	5cd3      	ldrb	r3, [r2, r3]
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	40d3      	lsrs	r3, r2
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3708      	adds	r7, #8
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	08010658 	.word	0x08010658

08005f50 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8005f58:	f7ff fd2c 	bl	80059b4 <LL_RCC_GetAPB2Prescaler>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	0b5b      	lsrs	r3, r3, #13
 8005f60:	4a04      	ldr	r2, [pc, #16]	@ (8005f74 <RCC_GetPCLK2ClockFreq+0x24>)
 8005f62:	5cd3      	ldrb	r3, [r2, r3]
 8005f64:	461a      	mov	r2, r3
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	40d3      	lsrs	r3, r2
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3708      	adds	r7, #8
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	08010658 	.word	0x08010658

08005f78 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8005f78:	b590      	push	{r4, r7, lr}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	607b      	str	r3, [r7, #4]
 8005f82:	2300      	movs	r3, #0
 8005f84:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8005f86:	f7ff fd4b 	bl	8005a20 <LL_RCC_PLL_GetMainSource>
 8005f8a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d004      	beq.n	8005f9c <RCC_PLL_GetFreqDomain_SYS+0x24>
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f98:	d003      	beq.n	8005fa2 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8005f9a:	e005      	b.n	8005fa8 <RCC_PLL_GetFreqDomain_SYS+0x30>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8005f9c:	4b0f      	ldr	r3, [pc, #60]	@ (8005fdc <RCC_PLL_GetFreqDomain_SYS+0x64>)
 8005f9e:	607b      	str	r3, [r7, #4]
      break;
 8005fa0:	e005      	b.n	8005fae <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8005fa2:	4b0f      	ldr	r3, [pc, #60]	@ (8005fe0 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 8005fa4:	607b      	str	r3, [r7, #4]
      break;
 8005fa6:	e002      	b.n	8005fae <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
      pllinputfreq = HSI_VALUE;
 8005fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8005fdc <RCC_PLL_GetFreqDomain_SYS+0x64>)
 8005faa:	607b      	str	r3, [r7, #4]
      break;
 8005fac:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005fae:	f7ff fd61 	bl	8005a74 <LL_RCC_PLL_GetDivider>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	fbb3 f4f2 	udiv	r4, r3, r2
 8005fba:	f7ff fd3f 	bl	8005a3c <LL_RCC_PLL_GetN>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	fb03 f404 	mul.w	r4, r3, r4
 8005fc4:	f7ff fd48 	bl	8005a58 <LL_RCC_PLL_GetP>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	0c1b      	lsrs	r3, r3, #16
 8005fcc:	3301      	adds	r3, #1
 8005fce:	005b      	lsls	r3, r3, #1
 8005fd0:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd90      	pop	{r4, r7, pc}
 8005fdc:	00f42400 	.word	0x00f42400
 8005fe0:	017d7840 	.word	0x017d7840

08005fe4 <LL_USART_IsEnabled>:
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 0301 	and.w	r3, r3, #1
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d101      	bne.n	8005ffc <LL_USART_IsEnabled+0x18>
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e000      	b.n	8005ffe <LL_USART_IsEnabled+0x1a>
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	370c      	adds	r7, #12
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr

0800600a <LL_USART_SetStopBitsLength>:
{
 800600a:	b480      	push	{r7}
 800600c:	b083      	sub	sp, #12
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
 8006012:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	431a      	orrs	r2, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	605a      	str	r2, [r3, #4]
}
 8006024:	bf00      	nop
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <LL_USART_SetHWFlowCtrl>:
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	431a      	orrs	r2, r3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	609a      	str	r2, [r3, #8]
}
 800604a:	bf00      	nop
 800604c:	370c      	adds	r7, #12
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr

08006056 <LL_USART_SetBaudRate>:
{
 8006056:	b480      	push	{r7}
 8006058:	b087      	sub	sp, #28
 800605a:	af00      	add	r7, sp, #0
 800605c:	60f8      	str	r0, [r7, #12]
 800605e:	60b9      	str	r1, [r7, #8]
 8006060:	607a      	str	r2, [r7, #4]
 8006062:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800606a:	d11a      	bne.n	80060a2 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	005a      	lsls	r2, r3, #1
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	085b      	lsrs	r3, r3, #1
 8006074:	441a      	add	r2, r3
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	fbb2 f3f3 	udiv	r3, r2, r3
 800607c:	b29b      	uxth	r3, r3
 800607e:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8006080:	697a      	ldr	r2, [r7, #20]
 8006082:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8006086:	4013      	ands	r3, r2
 8006088:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	085b      	lsrs	r3, r3, #1
 800608e:	b29b      	uxth	r3, r3
 8006090:	f003 0307 	and.w	r3, r3, #7
 8006094:	693a      	ldr	r2, [r7, #16]
 8006096:	4313      	orrs	r3, r2
 8006098:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	693a      	ldr	r2, [r7, #16]
 800609e:	60da      	str	r2, [r3, #12]
}
 80060a0:	e00a      	b.n	80060b8 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	085a      	lsrs	r2, r3, #1
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	441a      	add	r2, r3
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	461a      	mov	r2, r3
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	60da      	str	r2, [r3, #12]
}
 80060b8:	bf00      	nop
 80060ba:	371c      	adds	r7, #28
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80060d2:	2300      	movs	r3, #0
 80060d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f7ff ff84 	bl	8005fe4 <LL_USART_IsEnabled>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d179      	bne.n	80061d6 <LL_USART_Init+0x112>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	4b3e      	ldr	r3, [pc, #248]	@ (80061e0 <LL_USART_Init+0x11c>)
 80060e8:	4013      	ands	r3, r2
 80060ea:	683a      	ldr	r2, [r7, #0]
 80060ec:	6851      	ldr	r1, [r2, #4]
 80060ee:	683a      	ldr	r2, [r7, #0]
 80060f0:	68d2      	ldr	r2, [r2, #12]
 80060f2:	4311      	orrs	r1, r2
 80060f4:	683a      	ldr	r2, [r7, #0]
 80060f6:	6912      	ldr	r2, [r2, #16]
 80060f8:	4311      	orrs	r1, r2
 80060fa:	683a      	ldr	r2, [r7, #0]
 80060fc:	6992      	ldr	r2, [r2, #24]
 80060fe:	430a      	orrs	r2, r1
 8006100:	431a      	orrs	r2, r3
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	4619      	mov	r1, r3
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f7ff ff7c 	bl	800600a <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	695b      	ldr	r3, [r3, #20]
 8006116:	4619      	mov	r1, r3
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f7ff ff89 	bl	8006030 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a30      	ldr	r2, [pc, #192]	@ (80061e4 <LL_USART_Init+0x120>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d104      	bne.n	8006130 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8006126:	2003      	movs	r0, #3
 8006128:	f7ff fcb2 	bl	8005a90 <LL_RCC_GetUSARTClockFreq>
 800612c:	60b8      	str	r0, [r7, #8]
 800612e:	e041      	b.n	80061b4 <LL_USART_Init+0xf0>
    }
    else if (USARTx == USART2)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4a2d      	ldr	r2, [pc, #180]	@ (80061e8 <LL_USART_Init+0x124>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d104      	bne.n	8006142 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8006138:	200c      	movs	r0, #12
 800613a:	f7ff fca9 	bl	8005a90 <LL_RCC_GetUSARTClockFreq>
 800613e:	60b8      	str	r0, [r7, #8]
 8006140:	e038      	b.n	80061b4 <LL_USART_Init+0xf0>
    }
    else if (USARTx == USART3)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a29      	ldr	r2, [pc, #164]	@ (80061ec <LL_USART_Init+0x128>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d104      	bne.n	8006154 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 800614a:	2030      	movs	r0, #48	@ 0x30
 800614c:	f7ff fca0 	bl	8005a90 <LL_RCC_GetUSARTClockFreq>
 8006150:	60b8      	str	r0, [r7, #8]
 8006152:	e02f      	b.n	80061b4 <LL_USART_Init+0xf0>
    }
    else if (USARTx == UART4)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a26      	ldr	r2, [pc, #152]	@ (80061f0 <LL_USART_Init+0x12c>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d104      	bne.n	8006166 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 800615c:	20c0      	movs	r0, #192	@ 0xc0
 800615e:	f7ff fd9d 	bl	8005c9c <LL_RCC_GetUARTClockFreq>
 8006162:	60b8      	str	r0, [r7, #8]
 8006164:	e026      	b.n	80061b4 <LL_USART_Init+0xf0>
    }
    else if (USARTx == UART5)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a22      	ldr	r2, [pc, #136]	@ (80061f4 <LL_USART_Init+0x130>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d105      	bne.n	800617a <LL_USART_Init+0xb6>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 800616e:	f44f 7040 	mov.w	r0, #768	@ 0x300
 8006172:	f7ff fd93 	bl	8005c9c <LL_RCC_GetUARTClockFreq>
 8006176:	60b8      	str	r0, [r7, #8]
 8006178:	e01c      	b.n	80061b4 <LL_USART_Init+0xf0>
    }
    else if (USARTx == USART6)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4a1e      	ldr	r2, [pc, #120]	@ (80061f8 <LL_USART_Init+0x134>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d105      	bne.n	800618e <LL_USART_Init+0xca>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART6_CLKSOURCE);
 8006182:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8006186:	f7ff fc83 	bl	8005a90 <LL_RCC_GetUSARTClockFreq>
 800618a:	60b8      	str	r0, [r7, #8]
 800618c:	e012      	b.n	80061b4 <LL_USART_Init+0xf0>
    }
    else if (USARTx == UART7)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a1a      	ldr	r2, [pc, #104]	@ (80061fc <LL_USART_Init+0x138>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d105      	bne.n	80061a2 <LL_USART_Init+0xde>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART7_CLKSOURCE);
 8006196:	f44f 5040 	mov.w	r0, #12288	@ 0x3000
 800619a:	f7ff fd7f 	bl	8005c9c <LL_RCC_GetUARTClockFreq>
 800619e:	60b8      	str	r0, [r7, #8]
 80061a0:	e008      	b.n	80061b4 <LL_USART_Init+0xf0>
    }
    else if (USARTx == UART8)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a16      	ldr	r2, [pc, #88]	@ (8006200 <LL_USART_Init+0x13c>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d104      	bne.n	80061b4 <LL_USART_Init+0xf0>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART8_CLKSOURCE);
 80061aa:	f44f 4040 	mov.w	r0, #49152	@ 0xc000
 80061ae:	f7ff fd75 	bl	8005c9c <LL_RCC_GetUARTClockFreq>
 80061b2:	60b8      	str	r0, [r7, #8]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d00d      	beq.n	80061d6 <LL_USART_Init+0x112>
        && (USART_InitStruct->BaudRate != 0U))
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d009      	beq.n	80061d6 <LL_USART_Init+0x112>
    {
      status = SUCCESS;
 80061c2:	2300      	movs	r3, #0
 80061c4:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80061ce:	68b9      	ldr	r1, [r7, #8]
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f7ff ff40 	bl	8006056 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80061d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3710      	adds	r7, #16
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	efff69f3 	.word	0xefff69f3
 80061e4:	40011000 	.word	0x40011000
 80061e8:	40004400 	.word	0x40004400
 80061ec:	40004800 	.word	0x40004800
 80061f0:	40004c00 	.word	0x40004c00
 80061f4:	40005000 	.word	0x40005000
 80061f8:	40011400 	.word	0x40011400
 80061fc:	40007800 	.word	0x40007800
 8006200:	40007c00 	.word	0x40007c00

08006204 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006204:	b084      	sub	sp, #16
 8006206:	b580      	push	{r7, lr}
 8006208:	b084      	sub	sp, #16
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
 800620e:	f107 001c 	add.w	r0, r7, #28
 8006212:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006216:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800621a:	2b01      	cmp	r3, #1
 800621c:	d121      	bne.n	8006262 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006222:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	68da      	ldr	r2, [r3, #12]
 800622e:	4b21      	ldr	r3, [pc, #132]	@ (80062b4 <USB_CoreInit+0xb0>)
 8006230:	4013      	ands	r3, r2
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006242:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006246:	2b01      	cmp	r3, #1
 8006248:	d105      	bne.n	8006256 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f001 fae2 	bl	8007820 <USB_CoreReset>
 800625c:	4603      	mov	r3, r0
 800625e:	73fb      	strb	r3, [r7, #15]
 8006260:	e010      	b.n	8006284 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f001 fad6 	bl	8007820 <USB_CoreReset>
 8006274:	4603      	mov	r3, r0
 8006276:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800627c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8006284:	7fbb      	ldrb	r3, [r7, #30]
 8006286:	2b01      	cmp	r3, #1
 8006288:	d10b      	bne.n	80062a2 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	f043 0206 	orr.w	r2, r3, #6
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	f043 0220 	orr.w	r2, r3, #32
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80062a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3710      	adds	r7, #16
 80062a8:	46bd      	mov	sp, r7
 80062aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062ae:	b004      	add	sp, #16
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	ffbdffbf 	.word	0xffbdffbf

080062b8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b087      	sub	sp, #28
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	4613      	mov	r3, r2
 80062c4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80062c6:	79fb      	ldrb	r3, [r7, #7]
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	d165      	bne.n	8006398 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	4a41      	ldr	r2, [pc, #260]	@ (80063d4 <USB_SetTurnaroundTime+0x11c>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d906      	bls.n	80062e2 <USB_SetTurnaroundTime+0x2a>
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	4a40      	ldr	r2, [pc, #256]	@ (80063d8 <USB_SetTurnaroundTime+0x120>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d202      	bcs.n	80062e2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80062dc:	230f      	movs	r3, #15
 80062de:	617b      	str	r3, [r7, #20]
 80062e0:	e062      	b.n	80063a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	4a3c      	ldr	r2, [pc, #240]	@ (80063d8 <USB_SetTurnaroundTime+0x120>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d306      	bcc.n	80062f8 <USB_SetTurnaroundTime+0x40>
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	4a3b      	ldr	r2, [pc, #236]	@ (80063dc <USB_SetTurnaroundTime+0x124>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d202      	bcs.n	80062f8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80062f2:	230e      	movs	r3, #14
 80062f4:	617b      	str	r3, [r7, #20]
 80062f6:	e057      	b.n	80063a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	4a38      	ldr	r2, [pc, #224]	@ (80063dc <USB_SetTurnaroundTime+0x124>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d306      	bcc.n	800630e <USB_SetTurnaroundTime+0x56>
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	4a37      	ldr	r2, [pc, #220]	@ (80063e0 <USB_SetTurnaroundTime+0x128>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d202      	bcs.n	800630e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006308:	230d      	movs	r3, #13
 800630a:	617b      	str	r3, [r7, #20]
 800630c:	e04c      	b.n	80063a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	4a33      	ldr	r2, [pc, #204]	@ (80063e0 <USB_SetTurnaroundTime+0x128>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d306      	bcc.n	8006324 <USB_SetTurnaroundTime+0x6c>
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	4a32      	ldr	r2, [pc, #200]	@ (80063e4 <USB_SetTurnaroundTime+0x12c>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d802      	bhi.n	8006324 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800631e:	230c      	movs	r3, #12
 8006320:	617b      	str	r3, [r7, #20]
 8006322:	e041      	b.n	80063a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	4a2f      	ldr	r2, [pc, #188]	@ (80063e4 <USB_SetTurnaroundTime+0x12c>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d906      	bls.n	800633a <USB_SetTurnaroundTime+0x82>
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	4a2e      	ldr	r2, [pc, #184]	@ (80063e8 <USB_SetTurnaroundTime+0x130>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d802      	bhi.n	800633a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006334:	230b      	movs	r3, #11
 8006336:	617b      	str	r3, [r7, #20]
 8006338:	e036      	b.n	80063a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	4a2a      	ldr	r2, [pc, #168]	@ (80063e8 <USB_SetTurnaroundTime+0x130>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d906      	bls.n	8006350 <USB_SetTurnaroundTime+0x98>
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	4a29      	ldr	r2, [pc, #164]	@ (80063ec <USB_SetTurnaroundTime+0x134>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d802      	bhi.n	8006350 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800634a:	230a      	movs	r3, #10
 800634c:	617b      	str	r3, [r7, #20]
 800634e:	e02b      	b.n	80063a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	4a26      	ldr	r2, [pc, #152]	@ (80063ec <USB_SetTurnaroundTime+0x134>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d906      	bls.n	8006366 <USB_SetTurnaroundTime+0xae>
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	4a25      	ldr	r2, [pc, #148]	@ (80063f0 <USB_SetTurnaroundTime+0x138>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d202      	bcs.n	8006366 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006360:	2309      	movs	r3, #9
 8006362:	617b      	str	r3, [r7, #20]
 8006364:	e020      	b.n	80063a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	4a21      	ldr	r2, [pc, #132]	@ (80063f0 <USB_SetTurnaroundTime+0x138>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d306      	bcc.n	800637c <USB_SetTurnaroundTime+0xc4>
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	4a20      	ldr	r2, [pc, #128]	@ (80063f4 <USB_SetTurnaroundTime+0x13c>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d802      	bhi.n	800637c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006376:	2308      	movs	r3, #8
 8006378:	617b      	str	r3, [r7, #20]
 800637a:	e015      	b.n	80063a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	4a1d      	ldr	r2, [pc, #116]	@ (80063f4 <USB_SetTurnaroundTime+0x13c>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d906      	bls.n	8006392 <USB_SetTurnaroundTime+0xda>
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	4a1c      	ldr	r2, [pc, #112]	@ (80063f8 <USB_SetTurnaroundTime+0x140>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d202      	bcs.n	8006392 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800638c:	2307      	movs	r3, #7
 800638e:	617b      	str	r3, [r7, #20]
 8006390:	e00a      	b.n	80063a8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006392:	2306      	movs	r3, #6
 8006394:	617b      	str	r3, [r7, #20]
 8006396:	e007      	b.n	80063a8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006398:	79fb      	ldrb	r3, [r7, #7]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d102      	bne.n	80063a4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800639e:	2309      	movs	r3, #9
 80063a0:	617b      	str	r3, [r7, #20]
 80063a2:	e001      	b.n	80063a8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80063a4:	2309      	movs	r3, #9
 80063a6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	68da      	ldr	r2, [r3, #12]
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	029b      	lsls	r3, r3, #10
 80063bc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80063c0:	431a      	orrs	r2, r3
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	371c      	adds	r7, #28
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr
 80063d4:	00d8acbf 	.word	0x00d8acbf
 80063d8:	00e4e1c0 	.word	0x00e4e1c0
 80063dc:	00f42400 	.word	0x00f42400
 80063e0:	01067380 	.word	0x01067380
 80063e4:	011a499f 	.word	0x011a499f
 80063e8:	01312cff 	.word	0x01312cff
 80063ec:	014ca43f 	.word	0x014ca43f
 80063f0:	016e3600 	.word	0x016e3600
 80063f4:	01a6ab1f 	.word	0x01a6ab1f
 80063f8:	01e84800 	.word	0x01e84800

080063fc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	f043 0201 	orr.w	r2, r3, #1
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	370c      	adds	r7, #12
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr

0800641e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800641e:	b480      	push	{r7}
 8006420:	b083      	sub	sp, #12
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f023 0201 	bic.w	r2, r3, #1
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006432:	2300      	movs	r3, #0
}
 8006434:	4618      	mov	r0, r3
 8006436:	370c      	adds	r7, #12
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	460b      	mov	r3, r1
 800644a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800644c:	2300      	movs	r3, #0
 800644e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800645c:	78fb      	ldrb	r3, [r7, #3]
 800645e:	2b01      	cmp	r3, #1
 8006460:	d115      	bne.n	800648e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	68db      	ldr	r3, [r3, #12]
 8006466:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800646e:	200a      	movs	r0, #10
 8006470:	f7fb fcb2 	bl	8001dd8 <HAL_Delay>
      ms += 10U;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	330a      	adds	r3, #10
 8006478:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f001 f93f 	bl	80076fe <USB_GetMode>
 8006480:	4603      	mov	r3, r0
 8006482:	2b01      	cmp	r3, #1
 8006484:	d01e      	beq.n	80064c4 <USB_SetCurrentMode+0x84>
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2bc7      	cmp	r3, #199	@ 0xc7
 800648a:	d9f0      	bls.n	800646e <USB_SetCurrentMode+0x2e>
 800648c:	e01a      	b.n	80064c4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800648e:	78fb      	ldrb	r3, [r7, #3]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d115      	bne.n	80064c0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80064a0:	200a      	movs	r0, #10
 80064a2:	f7fb fc99 	bl	8001dd8 <HAL_Delay>
      ms += 10U;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	330a      	adds	r3, #10
 80064aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f001 f926 	bl	80076fe <USB_GetMode>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d005      	beq.n	80064c4 <USB_SetCurrentMode+0x84>
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2bc7      	cmp	r3, #199	@ 0xc7
 80064bc:	d9f0      	bls.n	80064a0 <USB_SetCurrentMode+0x60>
 80064be:	e001      	b.n	80064c4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	e005      	b.n	80064d0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2bc8      	cmp	r3, #200	@ 0xc8
 80064c8:	d101      	bne.n	80064ce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	e000      	b.n	80064d0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3710      	adds	r7, #16
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80064d8:	b084      	sub	sp, #16
 80064da:	b580      	push	{r7, lr}
 80064dc:	b086      	sub	sp, #24
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
 80064e2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80064e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80064ea:	2300      	movs	r3, #0
 80064ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80064f2:	2300      	movs	r3, #0
 80064f4:	613b      	str	r3, [r7, #16]
 80064f6:	e009      	b.n	800650c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	3340      	adds	r3, #64	@ 0x40
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4413      	add	r3, r2
 8006502:	2200      	movs	r2, #0
 8006504:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	3301      	adds	r3, #1
 800650a:	613b      	str	r3, [r7, #16]
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	2b0e      	cmp	r3, #14
 8006510:	d9f2      	bls.n	80064f8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006512:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006516:	2b00      	cmp	r3, #0
 8006518:	d11c      	bne.n	8006554 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006528:	f043 0302 	orr.w	r3, r3, #2
 800652c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006532:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	601a      	str	r2, [r3, #0]
 8006552:	e005      	b.n	8006560 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006558:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006566:	461a      	mov	r2, r3
 8006568:	2300      	movs	r3, #0
 800656a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800656c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006570:	2b01      	cmp	r3, #1
 8006572:	d10d      	bne.n	8006590 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006574:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006578:	2b00      	cmp	r3, #0
 800657a:	d104      	bne.n	8006586 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800657c:	2100      	movs	r1, #0
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 f968 	bl	8006854 <USB_SetDevSpeed>
 8006584:	e008      	b.n	8006598 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006586:	2101      	movs	r1, #1
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 f963 	bl	8006854 <USB_SetDevSpeed>
 800658e:	e003      	b.n	8006598 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006590:	2103      	movs	r1, #3
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 f95e 	bl	8006854 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006598:	2110      	movs	r1, #16
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 f8fa 	bl	8006794 <USB_FlushTxFifo>
 80065a0:	4603      	mov	r3, r0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d001      	beq.n	80065aa <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 f924 	bl	80067f8 <USB_FlushRxFifo>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d001      	beq.n	80065ba <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065c0:	461a      	mov	r2, r3
 80065c2:	2300      	movs	r3, #0
 80065c4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065cc:	461a      	mov	r2, r3
 80065ce:	2300      	movs	r3, #0
 80065d0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065d8:	461a      	mov	r2, r3
 80065da:	2300      	movs	r3, #0
 80065dc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065de:	2300      	movs	r3, #0
 80065e0:	613b      	str	r3, [r7, #16]
 80065e2:	e043      	b.n	800666c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	015a      	lsls	r2, r3, #5
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	4413      	add	r3, r2
 80065ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80065f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80065fa:	d118      	bne.n	800662e <USB_DevInit+0x156>
    {
      if (i == 0U)
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d10a      	bne.n	8006618 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	015a      	lsls	r2, r3, #5
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	4413      	add	r3, r2
 800660a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800660e:	461a      	mov	r2, r3
 8006610:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006614:	6013      	str	r3, [r2, #0]
 8006616:	e013      	b.n	8006640 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	015a      	lsls	r2, r3, #5
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	4413      	add	r3, r2
 8006620:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006624:	461a      	mov	r2, r3
 8006626:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800662a:	6013      	str	r3, [r2, #0]
 800662c:	e008      	b.n	8006640 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	015a      	lsls	r2, r3, #5
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	4413      	add	r3, r2
 8006636:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800663a:	461a      	mov	r2, r3
 800663c:	2300      	movs	r3, #0
 800663e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	015a      	lsls	r2, r3, #5
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	4413      	add	r3, r2
 8006648:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800664c:	461a      	mov	r2, r3
 800664e:	2300      	movs	r3, #0
 8006650:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	015a      	lsls	r2, r3, #5
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	4413      	add	r3, r2
 800665a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800665e:	461a      	mov	r2, r3
 8006660:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006664:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	3301      	adds	r3, #1
 800666a:	613b      	str	r3, [r7, #16]
 800666c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006670:	461a      	mov	r2, r3
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	4293      	cmp	r3, r2
 8006676:	d3b5      	bcc.n	80065e4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006678:	2300      	movs	r3, #0
 800667a:	613b      	str	r3, [r7, #16]
 800667c:	e043      	b.n	8006706 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	015a      	lsls	r2, r3, #5
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	4413      	add	r3, r2
 8006686:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006690:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006694:	d118      	bne.n	80066c8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d10a      	bne.n	80066b2 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	015a      	lsls	r2, r3, #5
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	4413      	add	r3, r2
 80066a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066a8:	461a      	mov	r2, r3
 80066aa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80066ae:	6013      	str	r3, [r2, #0]
 80066b0:	e013      	b.n	80066da <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	015a      	lsls	r2, r3, #5
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	4413      	add	r3, r2
 80066ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066be:	461a      	mov	r2, r3
 80066c0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80066c4:	6013      	str	r3, [r2, #0]
 80066c6:	e008      	b.n	80066da <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	015a      	lsls	r2, r3, #5
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	4413      	add	r3, r2
 80066d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066d4:	461a      	mov	r2, r3
 80066d6:	2300      	movs	r3, #0
 80066d8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	015a      	lsls	r2, r3, #5
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	4413      	add	r3, r2
 80066e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066e6:	461a      	mov	r2, r3
 80066e8:	2300      	movs	r3, #0
 80066ea:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	015a      	lsls	r2, r3, #5
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	4413      	add	r3, r2
 80066f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066f8:	461a      	mov	r2, r3
 80066fa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80066fe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	3301      	adds	r3, #1
 8006704:	613b      	str	r3, [r7, #16]
 8006706:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800670a:	461a      	mov	r2, r3
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	4293      	cmp	r3, r2
 8006710:	d3b5      	bcc.n	800667e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	68fa      	ldr	r2, [r7, #12]
 800671c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006720:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006724:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006732:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006734:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006738:	2b00      	cmp	r3, #0
 800673a:	d105      	bne.n	8006748 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	699b      	ldr	r3, [r3, #24]
 8006740:	f043 0210 	orr.w	r2, r3, #16
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	699a      	ldr	r2, [r3, #24]
 800674c:	4b0f      	ldr	r3, [pc, #60]	@ (800678c <USB_DevInit+0x2b4>)
 800674e:	4313      	orrs	r3, r2
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006754:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006758:	2b00      	cmp	r3, #0
 800675a:	d005      	beq.n	8006768 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	699b      	ldr	r3, [r3, #24]
 8006760:	f043 0208 	orr.w	r2, r3, #8
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006768:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800676c:	2b01      	cmp	r3, #1
 800676e:	d105      	bne.n	800677c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	699a      	ldr	r2, [r3, #24]
 8006774:	4b06      	ldr	r3, [pc, #24]	@ (8006790 <USB_DevInit+0x2b8>)
 8006776:	4313      	orrs	r3, r2
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800677c:	7dfb      	ldrb	r3, [r7, #23]
}
 800677e:	4618      	mov	r0, r3
 8006780:	3718      	adds	r7, #24
 8006782:	46bd      	mov	sp, r7
 8006784:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006788:	b004      	add	sp, #16
 800678a:	4770      	bx	lr
 800678c:	803c3800 	.word	0x803c3800
 8006790:	40000004 	.word	0x40000004

08006794 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006794:	b480      	push	{r7}
 8006796:	b085      	sub	sp, #20
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800679e:	2300      	movs	r3, #0
 80067a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	3301      	adds	r3, #1
 80067a6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80067ae:	d901      	bls.n	80067b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80067b0:	2303      	movs	r3, #3
 80067b2:	e01b      	b.n	80067ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	daf2      	bge.n	80067a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80067bc:	2300      	movs	r3, #0
 80067be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	019b      	lsls	r3, r3, #6
 80067c4:	f043 0220 	orr.w	r2, r3, #32
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	3301      	adds	r3, #1
 80067d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80067d8:	d901      	bls.n	80067de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80067da:	2303      	movs	r3, #3
 80067dc:	e006      	b.n	80067ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	691b      	ldr	r3, [r3, #16]
 80067e2:	f003 0320 	and.w	r3, r3, #32
 80067e6:	2b20      	cmp	r3, #32
 80067e8:	d0f0      	beq.n	80067cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80067ea:	2300      	movs	r3, #0
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3714      	adds	r7, #20
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b085      	sub	sp, #20
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006800:	2300      	movs	r3, #0
 8006802:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	3301      	adds	r3, #1
 8006808:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006810:	d901      	bls.n	8006816 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006812:	2303      	movs	r3, #3
 8006814:	e018      	b.n	8006848 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	2b00      	cmp	r3, #0
 800681c:	daf2      	bge.n	8006804 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800681e:	2300      	movs	r3, #0
 8006820:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2210      	movs	r2, #16
 8006826:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	3301      	adds	r3, #1
 800682c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006834:	d901      	bls.n	800683a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006836:	2303      	movs	r3, #3
 8006838:	e006      	b.n	8006848 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	f003 0310 	and.w	r3, r3, #16
 8006842:	2b10      	cmp	r3, #16
 8006844:	d0f0      	beq.n	8006828 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006846:	2300      	movs	r3, #0
}
 8006848:	4618      	mov	r0, r3
 800684a:	3714      	adds	r7, #20
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006854:	b480      	push	{r7}
 8006856:	b085      	sub	sp, #20
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	460b      	mov	r3, r1
 800685e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	78fb      	ldrb	r3, [r7, #3]
 800686e:	68f9      	ldr	r1, [r7, #12]
 8006870:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006874:	4313      	orrs	r3, r2
 8006876:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3714      	adds	r7, #20
 800687e:	46bd      	mov	sp, r7
 8006880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006884:	4770      	bx	lr

08006886 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006886:	b480      	push	{r7}
 8006888:	b087      	sub	sp, #28
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	f003 0306 	and.w	r3, r3, #6
 800689e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d102      	bne.n	80068ac <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80068a6:	2300      	movs	r3, #0
 80068a8:	75fb      	strb	r3, [r7, #23]
 80068aa:	e00a      	b.n	80068c2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2b02      	cmp	r3, #2
 80068b0:	d002      	beq.n	80068b8 <USB_GetDevSpeed+0x32>
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2b06      	cmp	r3, #6
 80068b6:	d102      	bne.n	80068be <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80068b8:	2302      	movs	r3, #2
 80068ba:	75fb      	strb	r3, [r7, #23]
 80068bc:	e001      	b.n	80068c2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80068be:	230f      	movs	r3, #15
 80068c0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80068c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	371c      	adds	r7, #28
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b085      	sub	sp, #20
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	785b      	ldrb	r3, [r3, #1]
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d139      	bne.n	8006960 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068f2:	69da      	ldr	r2, [r3, #28]
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	f003 030f 	and.w	r3, r3, #15
 80068fc:	2101      	movs	r1, #1
 80068fe:	fa01 f303 	lsl.w	r3, r1, r3
 8006902:	b29b      	uxth	r3, r3
 8006904:	68f9      	ldr	r1, [r7, #12]
 8006906:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800690a:	4313      	orrs	r3, r2
 800690c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	015a      	lsls	r2, r3, #5
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	4413      	add	r3, r2
 8006916:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006920:	2b00      	cmp	r3, #0
 8006922:	d153      	bne.n	80069cc <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	015a      	lsls	r2, r3, #5
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	4413      	add	r3, r2
 800692c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	791b      	ldrb	r3, [r3, #4]
 800693e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006940:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	059b      	lsls	r3, r3, #22
 8006946:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006948:	431a      	orrs	r2, r3
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	0159      	lsls	r1, r3, #5
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	440b      	add	r3, r1
 8006952:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006956:	4619      	mov	r1, r3
 8006958:	4b20      	ldr	r3, [pc, #128]	@ (80069dc <USB_ActivateEndpoint+0x10c>)
 800695a:	4313      	orrs	r3, r2
 800695c:	600b      	str	r3, [r1, #0]
 800695e:	e035      	b.n	80069cc <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006966:	69da      	ldr	r2, [r3, #28]
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	f003 030f 	and.w	r3, r3, #15
 8006970:	2101      	movs	r1, #1
 8006972:	fa01 f303 	lsl.w	r3, r1, r3
 8006976:	041b      	lsls	r3, r3, #16
 8006978:	68f9      	ldr	r1, [r7, #12]
 800697a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800697e:	4313      	orrs	r3, r2
 8006980:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	015a      	lsls	r2, r3, #5
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	4413      	add	r3, r2
 800698a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006994:	2b00      	cmp	r3, #0
 8006996:	d119      	bne.n	80069cc <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	015a      	lsls	r2, r3, #5
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	4413      	add	r3, r2
 80069a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	791b      	ldrb	r3, [r3, #4]
 80069b2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80069b4:	430b      	orrs	r3, r1
 80069b6:	431a      	orrs	r2, r3
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	0159      	lsls	r1, r3, #5
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	440b      	add	r3, r1
 80069c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069c4:	4619      	mov	r1, r3
 80069c6:	4b05      	ldr	r3, [pc, #20]	@ (80069dc <USB_ActivateEndpoint+0x10c>)
 80069c8:	4313      	orrs	r3, r2
 80069ca:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80069cc:	2300      	movs	r3, #0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3714      	adds	r7, #20
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop
 80069dc:	10008000 	.word	0x10008000

080069e0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	785b      	ldrb	r3, [r3, #1]
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d161      	bne.n	8006ac0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	015a      	lsls	r2, r3, #5
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	4413      	add	r3, r2
 8006a04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a12:	d11f      	bne.n	8006a54 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	015a      	lsls	r2, r3, #5
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	68ba      	ldr	r2, [r7, #8]
 8006a24:	0151      	lsls	r1, r2, #5
 8006a26:	68fa      	ldr	r2, [r7, #12]
 8006a28:	440a      	add	r2, r1
 8006a2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a2e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006a32:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	015a      	lsls	r2, r3, #5
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	4413      	add	r3, r2
 8006a3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68ba      	ldr	r2, [r7, #8]
 8006a44:	0151      	lsls	r1, r2, #5
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	440a      	add	r2, r1
 8006a4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a4e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006a52:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	f003 030f 	and.w	r3, r3, #15
 8006a64:	2101      	movs	r1, #1
 8006a66:	fa01 f303 	lsl.w	r3, r1, r3
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	43db      	mvns	r3, r3
 8006a6e:	68f9      	ldr	r1, [r7, #12]
 8006a70:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a74:	4013      	ands	r3, r2
 8006a76:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a7e:	69da      	ldr	r2, [r3, #28]
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	f003 030f 	and.w	r3, r3, #15
 8006a88:	2101      	movs	r1, #1
 8006a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	43db      	mvns	r3, r3
 8006a92:	68f9      	ldr	r1, [r7, #12]
 8006a94:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a98:	4013      	ands	r3, r2
 8006a9a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	015a      	lsls	r2, r3, #5
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	4413      	add	r3, r2
 8006aa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	0159      	lsls	r1, r3, #5
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	440b      	add	r3, r1
 8006ab2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	4b35      	ldr	r3, [pc, #212]	@ (8006b90 <USB_DeactivateEndpoint+0x1b0>)
 8006aba:	4013      	ands	r3, r2
 8006abc:	600b      	str	r3, [r1, #0]
 8006abe:	e060      	b.n	8006b82 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	015a      	lsls	r2, r3, #5
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	4413      	add	r3, r2
 8006ac8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ad2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ad6:	d11f      	bne.n	8006b18 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	015a      	lsls	r2, r3, #5
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	4413      	add	r3, r2
 8006ae0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	68ba      	ldr	r2, [r7, #8]
 8006ae8:	0151      	lsls	r1, r2, #5
 8006aea:	68fa      	ldr	r2, [r7, #12]
 8006aec:	440a      	add	r2, r1
 8006aee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006af2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006af6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	015a      	lsls	r2, r3, #5
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	4413      	add	r3, r2
 8006b00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	68ba      	ldr	r2, [r7, #8]
 8006b08:	0151      	lsls	r1, r2, #5
 8006b0a:	68fa      	ldr	r2, [r7, #12]
 8006b0c:	440a      	add	r2, r1
 8006b0e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b12:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b16:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	f003 030f 	and.w	r3, r3, #15
 8006b28:	2101      	movs	r1, #1
 8006b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8006b2e:	041b      	lsls	r3, r3, #16
 8006b30:	43db      	mvns	r3, r3
 8006b32:	68f9      	ldr	r1, [r7, #12]
 8006b34:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b38:	4013      	ands	r3, r2
 8006b3a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b42:	69da      	ldr	r2, [r3, #28]
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	f003 030f 	and.w	r3, r3, #15
 8006b4c:	2101      	movs	r1, #1
 8006b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8006b52:	041b      	lsls	r3, r3, #16
 8006b54:	43db      	mvns	r3, r3
 8006b56:	68f9      	ldr	r1, [r7, #12]
 8006b58:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b5c:	4013      	ands	r3, r2
 8006b5e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	015a      	lsls	r2, r3, #5
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	4413      	add	r3, r2
 8006b68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	0159      	lsls	r1, r3, #5
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	440b      	add	r3, r1
 8006b76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	4b05      	ldr	r3, [pc, #20]	@ (8006b94 <USB_DeactivateEndpoint+0x1b4>)
 8006b7e:	4013      	ands	r3, r2
 8006b80:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006b82:	2300      	movs	r3, #0
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3714      	adds	r7, #20
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr
 8006b90:	ec337800 	.word	0xec337800
 8006b94:	eff37800 	.word	0xeff37800

08006b98 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b08a      	sub	sp, #40	@ 0x28
 8006b9c:	af02      	add	r7, sp, #8
 8006b9e:	60f8      	str	r0, [r7, #12]
 8006ba0:	60b9      	str	r1, [r7, #8]
 8006ba2:	4613      	mov	r3, r2
 8006ba4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	785b      	ldrb	r3, [r3, #1]
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	f040 8185 	bne.w	8006ec4 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d132      	bne.n	8006c28 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	015a      	lsls	r2, r3, #5
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	4413      	add	r3, r2
 8006bca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bce:	691a      	ldr	r2, [r3, #16]
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	0159      	lsls	r1, r3, #5
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	440b      	add	r3, r1
 8006bd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bdc:	4619      	mov	r1, r3
 8006bde:	4ba7      	ldr	r3, [pc, #668]	@ (8006e7c <USB_EPStartXfer+0x2e4>)
 8006be0:	4013      	ands	r3, r2
 8006be2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	015a      	lsls	r2, r3, #5
 8006be8:	69fb      	ldr	r3, [r7, #28]
 8006bea:	4413      	add	r3, r2
 8006bec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	69ba      	ldr	r2, [r7, #24]
 8006bf4:	0151      	lsls	r1, r2, #5
 8006bf6:	69fa      	ldr	r2, [r7, #28]
 8006bf8:	440a      	add	r2, r1
 8006bfa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006bfe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006c02:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	015a      	lsls	r2, r3, #5
 8006c08:	69fb      	ldr	r3, [r7, #28]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c10:	691a      	ldr	r2, [r3, #16]
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	0159      	lsls	r1, r3, #5
 8006c16:	69fb      	ldr	r3, [r7, #28]
 8006c18:	440b      	add	r3, r1
 8006c1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c1e:	4619      	mov	r1, r3
 8006c20:	4b97      	ldr	r3, [pc, #604]	@ (8006e80 <USB_EPStartXfer+0x2e8>)
 8006c22:	4013      	ands	r3, r2
 8006c24:	610b      	str	r3, [r1, #16]
 8006c26:	e097      	b.n	8006d58 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	015a      	lsls	r2, r3, #5
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	4413      	add	r3, r2
 8006c30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c34:	691a      	ldr	r2, [r3, #16]
 8006c36:	69bb      	ldr	r3, [r7, #24]
 8006c38:	0159      	lsls	r1, r3, #5
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	440b      	add	r3, r1
 8006c3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c42:	4619      	mov	r1, r3
 8006c44:	4b8e      	ldr	r3, [pc, #568]	@ (8006e80 <USB_EPStartXfer+0x2e8>)
 8006c46:	4013      	ands	r3, r2
 8006c48:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006c4a:	69bb      	ldr	r3, [r7, #24]
 8006c4c:	015a      	lsls	r2, r3, #5
 8006c4e:	69fb      	ldr	r3, [r7, #28]
 8006c50:	4413      	add	r3, r2
 8006c52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c56:	691a      	ldr	r2, [r3, #16]
 8006c58:	69bb      	ldr	r3, [r7, #24]
 8006c5a:	0159      	lsls	r1, r3, #5
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	440b      	add	r3, r1
 8006c60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c64:	4619      	mov	r1, r3
 8006c66:	4b85      	ldr	r3, [pc, #532]	@ (8006e7c <USB_EPStartXfer+0x2e4>)
 8006c68:	4013      	ands	r3, r2
 8006c6a:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d11a      	bne.n	8006ca8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	691a      	ldr	r2, [r3, #16]
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d903      	bls.n	8006c86 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	689a      	ldr	r2, [r3, #8]
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	015a      	lsls	r2, r3, #5
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	4413      	add	r3, r2
 8006c8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c92:	691b      	ldr	r3, [r3, #16]
 8006c94:	69ba      	ldr	r2, [r7, #24]
 8006c96:	0151      	lsls	r1, r2, #5
 8006c98:	69fa      	ldr	r2, [r7, #28]
 8006c9a:	440a      	add	r2, r1
 8006c9c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ca0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006ca4:	6113      	str	r3, [r2, #16]
 8006ca6:	e044      	b.n	8006d32 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	691a      	ldr	r2, [r3, #16]
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	1e5a      	subs	r2, r3, #1
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	689b      	ldr	r3, [r3, #8]
 8006cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cbc:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	015a      	lsls	r2, r3, #5
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cca:	691a      	ldr	r2, [r3, #16]
 8006ccc:	8afb      	ldrh	r3, [r7, #22]
 8006cce:	04d9      	lsls	r1, r3, #19
 8006cd0:	4b6c      	ldr	r3, [pc, #432]	@ (8006e84 <USB_EPStartXfer+0x2ec>)
 8006cd2:	400b      	ands	r3, r1
 8006cd4:	69b9      	ldr	r1, [r7, #24]
 8006cd6:	0148      	lsls	r0, r1, #5
 8006cd8:	69f9      	ldr	r1, [r7, #28]
 8006cda:	4401      	add	r1, r0
 8006cdc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	791b      	ldrb	r3, [r3, #4]
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d122      	bne.n	8006d32 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006cec:	69bb      	ldr	r3, [r7, #24]
 8006cee:	015a      	lsls	r2, r3, #5
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	4413      	add	r3, r2
 8006cf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cf8:	691b      	ldr	r3, [r3, #16]
 8006cfa:	69ba      	ldr	r2, [r7, #24]
 8006cfc:	0151      	lsls	r1, r2, #5
 8006cfe:	69fa      	ldr	r2, [r7, #28]
 8006d00:	440a      	add	r2, r1
 8006d02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d06:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006d0a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	015a      	lsls	r2, r3, #5
 8006d10:	69fb      	ldr	r3, [r7, #28]
 8006d12:	4413      	add	r3, r2
 8006d14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d18:	691a      	ldr	r2, [r3, #16]
 8006d1a:	8afb      	ldrh	r3, [r7, #22]
 8006d1c:	075b      	lsls	r3, r3, #29
 8006d1e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006d22:	69b9      	ldr	r1, [r7, #24]
 8006d24:	0148      	lsls	r0, r1, #5
 8006d26:	69f9      	ldr	r1, [r7, #28]
 8006d28:	4401      	add	r1, r0
 8006d2a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	015a      	lsls	r2, r3, #5
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	4413      	add	r3, r2
 8006d3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d3e:	691a      	ldr	r2, [r3, #16]
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	691b      	ldr	r3, [r3, #16]
 8006d44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d48:	69b9      	ldr	r1, [r7, #24]
 8006d4a:	0148      	lsls	r0, r1, #5
 8006d4c:	69f9      	ldr	r1, [r7, #28]
 8006d4e:	4401      	add	r1, r0
 8006d50:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006d54:	4313      	orrs	r3, r2
 8006d56:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006d58:	79fb      	ldrb	r3, [r7, #7]
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d14b      	bne.n	8006df6 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	69db      	ldr	r3, [r3, #28]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d009      	beq.n	8006d7a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006d66:	69bb      	ldr	r3, [r7, #24]
 8006d68:	015a      	lsls	r2, r3, #5
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d72:	461a      	mov	r2, r3
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	69db      	ldr	r3, [r3, #28]
 8006d78:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	791b      	ldrb	r3, [r3, #4]
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d128      	bne.n	8006dd4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d110      	bne.n	8006db4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	015a      	lsls	r2, r3, #5
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	4413      	add	r3, r2
 8006d9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	69ba      	ldr	r2, [r7, #24]
 8006da2:	0151      	lsls	r1, r2, #5
 8006da4:	69fa      	ldr	r2, [r7, #28]
 8006da6:	440a      	add	r2, r1
 8006da8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006dac:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006db0:	6013      	str	r3, [r2, #0]
 8006db2:	e00f      	b.n	8006dd4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006db4:	69bb      	ldr	r3, [r7, #24]
 8006db6:	015a      	lsls	r2, r3, #5
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	4413      	add	r3, r2
 8006dbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	69ba      	ldr	r2, [r7, #24]
 8006dc4:	0151      	lsls	r1, r2, #5
 8006dc6:	69fa      	ldr	r2, [r7, #28]
 8006dc8:	440a      	add	r2, r1
 8006dca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006dce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006dd2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006dd4:	69bb      	ldr	r3, [r7, #24]
 8006dd6:	015a      	lsls	r2, r3, #5
 8006dd8:	69fb      	ldr	r3, [r7, #28]
 8006dda:	4413      	add	r3, r2
 8006ddc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	69ba      	ldr	r2, [r7, #24]
 8006de4:	0151      	lsls	r1, r2, #5
 8006de6:	69fa      	ldr	r2, [r7, #28]
 8006de8:	440a      	add	r2, r1
 8006dea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006dee:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006df2:	6013      	str	r3, [r2, #0]
 8006df4:	e169      	b.n	80070ca <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	015a      	lsls	r2, r3, #5
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	69ba      	ldr	r2, [r7, #24]
 8006e06:	0151      	lsls	r1, r2, #5
 8006e08:	69fa      	ldr	r2, [r7, #28]
 8006e0a:	440a      	add	r2, r1
 8006e0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e10:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006e14:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	791b      	ldrb	r3, [r3, #4]
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d015      	beq.n	8006e4a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	691b      	ldr	r3, [r3, #16]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	f000 8151 	beq.w	80070ca <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006e28:	69fb      	ldr	r3, [r7, #28]
 8006e2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	f003 030f 	and.w	r3, r3, #15
 8006e38:	2101      	movs	r1, #1
 8006e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e3e:	69f9      	ldr	r1, [r7, #28]
 8006e40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006e44:	4313      	orrs	r3, r2
 8006e46:	634b      	str	r3, [r1, #52]	@ 0x34
 8006e48:	e13f      	b.n	80070ca <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006e4a:	69fb      	ldr	r3, [r7, #28]
 8006e4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d116      	bne.n	8006e88 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006e5a:	69bb      	ldr	r3, [r7, #24]
 8006e5c:	015a      	lsls	r2, r3, #5
 8006e5e:	69fb      	ldr	r3, [r7, #28]
 8006e60:	4413      	add	r3, r2
 8006e62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	69ba      	ldr	r2, [r7, #24]
 8006e6a:	0151      	lsls	r1, r2, #5
 8006e6c:	69fa      	ldr	r2, [r7, #28]
 8006e6e:	440a      	add	r2, r1
 8006e70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e74:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006e78:	6013      	str	r3, [r2, #0]
 8006e7a:	e015      	b.n	8006ea8 <USB_EPStartXfer+0x310>
 8006e7c:	e007ffff 	.word	0xe007ffff
 8006e80:	fff80000 	.word	0xfff80000
 8006e84:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	015a      	lsls	r2, r3, #5
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	4413      	add	r3, r2
 8006e90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	69ba      	ldr	r2, [r7, #24]
 8006e98:	0151      	lsls	r1, r2, #5
 8006e9a:	69fa      	ldr	r2, [r7, #28]
 8006e9c:	440a      	add	r2, r1
 8006e9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ea2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ea6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	68d9      	ldr	r1, [r3, #12]
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	781a      	ldrb	r2, [r3, #0]
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	691b      	ldr	r3, [r3, #16]
 8006eb4:	b298      	uxth	r0, r3
 8006eb6:	79fb      	ldrb	r3, [r7, #7]
 8006eb8:	9300      	str	r3, [sp, #0]
 8006eba:	4603      	mov	r3, r0
 8006ebc:	68f8      	ldr	r0, [r7, #12]
 8006ebe:	f000 f9b9 	bl	8007234 <USB_WritePacket>
 8006ec2:	e102      	b.n	80070ca <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006ec4:	69bb      	ldr	r3, [r7, #24]
 8006ec6:	015a      	lsls	r2, r3, #5
 8006ec8:	69fb      	ldr	r3, [r7, #28]
 8006eca:	4413      	add	r3, r2
 8006ecc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ed0:	691a      	ldr	r2, [r3, #16]
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	0159      	lsls	r1, r3, #5
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	440b      	add	r3, r1
 8006eda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ede:	4619      	mov	r1, r3
 8006ee0:	4b7c      	ldr	r3, [pc, #496]	@ (80070d4 <USB_EPStartXfer+0x53c>)
 8006ee2:	4013      	ands	r3, r2
 8006ee4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	015a      	lsls	r2, r3, #5
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	4413      	add	r3, r2
 8006eee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ef2:	691a      	ldr	r2, [r3, #16]
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	0159      	lsls	r1, r3, #5
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	440b      	add	r3, r1
 8006efc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f00:	4619      	mov	r1, r3
 8006f02:	4b75      	ldr	r3, [pc, #468]	@ (80070d8 <USB_EPStartXfer+0x540>)
 8006f04:	4013      	ands	r3, r2
 8006f06:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8006f08:	69bb      	ldr	r3, [r7, #24]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d12f      	bne.n	8006f6e <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	691b      	ldr	r3, [r3, #16]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d003      	beq.n	8006f1e <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	689a      	ldr	r2, [r3, #8]
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	689a      	ldr	r2, [r3, #8]
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	015a      	lsls	r2, r3, #5
 8006f2a:	69fb      	ldr	r3, [r7, #28]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f32:	691a      	ldr	r2, [r3, #16]
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	6a1b      	ldr	r3, [r3, #32]
 8006f38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f3c:	69b9      	ldr	r1, [r7, #24]
 8006f3e:	0148      	lsls	r0, r1, #5
 8006f40:	69f9      	ldr	r1, [r7, #28]
 8006f42:	4401      	add	r1, r0
 8006f44:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006f4c:	69bb      	ldr	r3, [r7, #24]
 8006f4e:	015a      	lsls	r2, r3, #5
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	4413      	add	r3, r2
 8006f54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	69ba      	ldr	r2, [r7, #24]
 8006f5c:	0151      	lsls	r1, r2, #5
 8006f5e:	69fa      	ldr	r2, [r7, #28]
 8006f60:	440a      	add	r2, r1
 8006f62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f66:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006f6a:	6113      	str	r3, [r2, #16]
 8006f6c:	e05f      	b.n	800702e <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d123      	bne.n	8006fbe <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	015a      	lsls	r2, r3, #5
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f82:	691a      	ldr	r2, [r3, #16]
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f8c:	69b9      	ldr	r1, [r7, #24]
 8006f8e:	0148      	lsls	r0, r1, #5
 8006f90:	69f9      	ldr	r1, [r7, #28]
 8006f92:	4401      	add	r1, r0
 8006f94:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	015a      	lsls	r2, r3, #5
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	4413      	add	r3, r2
 8006fa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	69ba      	ldr	r2, [r7, #24]
 8006fac:	0151      	lsls	r1, r2, #5
 8006fae:	69fa      	ldr	r2, [r7, #28]
 8006fb0:	440a      	add	r2, r1
 8006fb2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006fb6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006fba:	6113      	str	r3, [r2, #16]
 8006fbc:	e037      	b.n	800702e <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	691a      	ldr	r2, [r3, #16]
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	4413      	add	r3, r2
 8006fc8:	1e5a      	subs	r2, r3, #1
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fd2:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	8afa      	ldrh	r2, [r7, #22]
 8006fda:	fb03 f202 	mul.w	r2, r3, r2
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006fe2:	69bb      	ldr	r3, [r7, #24]
 8006fe4:	015a      	lsls	r2, r3, #5
 8006fe6:	69fb      	ldr	r3, [r7, #28]
 8006fe8:	4413      	add	r3, r2
 8006fea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fee:	691a      	ldr	r2, [r3, #16]
 8006ff0:	8afb      	ldrh	r3, [r7, #22]
 8006ff2:	04d9      	lsls	r1, r3, #19
 8006ff4:	4b39      	ldr	r3, [pc, #228]	@ (80070dc <USB_EPStartXfer+0x544>)
 8006ff6:	400b      	ands	r3, r1
 8006ff8:	69b9      	ldr	r1, [r7, #24]
 8006ffa:	0148      	lsls	r0, r1, #5
 8006ffc:	69f9      	ldr	r1, [r7, #28]
 8006ffe:	4401      	add	r1, r0
 8007000:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007004:	4313      	orrs	r3, r2
 8007006:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	015a      	lsls	r2, r3, #5
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	4413      	add	r3, r2
 8007010:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007014:	691a      	ldr	r2, [r3, #16]
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	6a1b      	ldr	r3, [r3, #32]
 800701a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800701e:	69b9      	ldr	r1, [r7, #24]
 8007020:	0148      	lsls	r0, r1, #5
 8007022:	69f9      	ldr	r1, [r7, #28]
 8007024:	4401      	add	r1, r0
 8007026:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800702a:	4313      	orrs	r3, r2
 800702c:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800702e:	79fb      	ldrb	r3, [r7, #7]
 8007030:	2b01      	cmp	r3, #1
 8007032:	d10d      	bne.n	8007050 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d009      	beq.n	8007050 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	68d9      	ldr	r1, [r3, #12]
 8007040:	69bb      	ldr	r3, [r7, #24]
 8007042:	015a      	lsls	r2, r3, #5
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	4413      	add	r3, r2
 8007048:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800704c:	460a      	mov	r2, r1
 800704e:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	791b      	ldrb	r3, [r3, #4]
 8007054:	2b01      	cmp	r3, #1
 8007056:	d128      	bne.n	80070aa <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007064:	2b00      	cmp	r3, #0
 8007066:	d110      	bne.n	800708a <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007068:	69bb      	ldr	r3, [r7, #24]
 800706a:	015a      	lsls	r2, r3, #5
 800706c:	69fb      	ldr	r3, [r7, #28]
 800706e:	4413      	add	r3, r2
 8007070:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	69ba      	ldr	r2, [r7, #24]
 8007078:	0151      	lsls	r1, r2, #5
 800707a:	69fa      	ldr	r2, [r7, #28]
 800707c:	440a      	add	r2, r1
 800707e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007082:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007086:	6013      	str	r3, [r2, #0]
 8007088:	e00f      	b.n	80070aa <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800708a:	69bb      	ldr	r3, [r7, #24]
 800708c:	015a      	lsls	r2, r3, #5
 800708e:	69fb      	ldr	r3, [r7, #28]
 8007090:	4413      	add	r3, r2
 8007092:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	69ba      	ldr	r2, [r7, #24]
 800709a:	0151      	lsls	r1, r2, #5
 800709c:	69fa      	ldr	r2, [r7, #28]
 800709e:	440a      	add	r2, r1
 80070a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070a8:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80070aa:	69bb      	ldr	r3, [r7, #24]
 80070ac:	015a      	lsls	r2, r3, #5
 80070ae:	69fb      	ldr	r3, [r7, #28]
 80070b0:	4413      	add	r3, r2
 80070b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	69ba      	ldr	r2, [r7, #24]
 80070ba:	0151      	lsls	r1, r2, #5
 80070bc:	69fa      	ldr	r2, [r7, #28]
 80070be:	440a      	add	r2, r1
 80070c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070c4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80070c8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3720      	adds	r7, #32
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	fff80000 	.word	0xfff80000
 80070d8:	e007ffff 	.word	0xe007ffff
 80070dc:	1ff80000 	.word	0x1ff80000

080070e0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b087      	sub	sp, #28
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80070ea:	2300      	movs	r3, #0
 80070ec:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80070ee:	2300      	movs	r3, #0
 80070f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	785b      	ldrb	r3, [r3, #1]
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d14a      	bne.n	8007194 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	015a      	lsls	r2, r3, #5
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	4413      	add	r3, r2
 8007108:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007112:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007116:	f040 8086 	bne.w	8007226 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	015a      	lsls	r2, r3, #5
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	4413      	add	r3, r2
 8007124:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	683a      	ldr	r2, [r7, #0]
 800712c:	7812      	ldrb	r2, [r2, #0]
 800712e:	0151      	lsls	r1, r2, #5
 8007130:	693a      	ldr	r2, [r7, #16]
 8007132:	440a      	add	r2, r1
 8007134:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007138:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800713c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	015a      	lsls	r2, r3, #5
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	4413      	add	r3, r2
 8007148:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	683a      	ldr	r2, [r7, #0]
 8007150:	7812      	ldrb	r2, [r2, #0]
 8007152:	0151      	lsls	r1, r2, #5
 8007154:	693a      	ldr	r2, [r7, #16]
 8007156:	440a      	add	r2, r1
 8007158:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800715c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007160:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	3301      	adds	r3, #1
 8007166:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800716e:	4293      	cmp	r3, r2
 8007170:	d902      	bls.n	8007178 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	75fb      	strb	r3, [r7, #23]
          break;
 8007176:	e056      	b.n	8007226 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	015a      	lsls	r2, r3, #5
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	4413      	add	r3, r2
 8007182:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800718c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007190:	d0e7      	beq.n	8007162 <USB_EPStopXfer+0x82>
 8007192:	e048      	b.n	8007226 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	015a      	lsls	r2, r3, #5
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	4413      	add	r3, r2
 800719e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80071a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80071ac:	d13b      	bne.n	8007226 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	015a      	lsls	r2, r3, #5
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	4413      	add	r3, r2
 80071b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	683a      	ldr	r2, [r7, #0]
 80071c0:	7812      	ldrb	r2, [r2, #0]
 80071c2:	0151      	lsls	r1, r2, #5
 80071c4:	693a      	ldr	r2, [r7, #16]
 80071c6:	440a      	add	r2, r1
 80071c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80071cc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80071d0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	015a      	lsls	r2, r3, #5
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	4413      	add	r3, r2
 80071dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	683a      	ldr	r2, [r7, #0]
 80071e4:	7812      	ldrb	r2, [r2, #0]
 80071e6:	0151      	lsls	r1, r2, #5
 80071e8:	693a      	ldr	r2, [r7, #16]
 80071ea:	440a      	add	r2, r1
 80071ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80071f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80071f4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	3301      	adds	r3, #1
 80071fa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007202:	4293      	cmp	r3, r2
 8007204:	d902      	bls.n	800720c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	75fb      	strb	r3, [r7, #23]
          break;
 800720a:	e00c      	b.n	8007226 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	015a      	lsls	r2, r3, #5
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	4413      	add	r3, r2
 8007216:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007220:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007224:	d0e7      	beq.n	80071f6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007226:	7dfb      	ldrb	r3, [r7, #23]
}
 8007228:	4618      	mov	r0, r3
 800722a:	371c      	adds	r7, #28
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007234:	b480      	push	{r7}
 8007236:	b089      	sub	sp, #36	@ 0x24
 8007238:	af00      	add	r7, sp, #0
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	4611      	mov	r1, r2
 8007240:	461a      	mov	r2, r3
 8007242:	460b      	mov	r3, r1
 8007244:	71fb      	strb	r3, [r7, #7]
 8007246:	4613      	mov	r3, r2
 8007248:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007252:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007256:	2b00      	cmp	r3, #0
 8007258:	d123      	bne.n	80072a2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800725a:	88bb      	ldrh	r3, [r7, #4]
 800725c:	3303      	adds	r3, #3
 800725e:	089b      	lsrs	r3, r3, #2
 8007260:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007262:	2300      	movs	r3, #0
 8007264:	61bb      	str	r3, [r7, #24]
 8007266:	e018      	b.n	800729a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007268:	79fb      	ldrb	r3, [r7, #7]
 800726a:	031a      	lsls	r2, r3, #12
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	4413      	add	r3, r2
 8007270:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007274:	461a      	mov	r2, r3
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800727c:	69fb      	ldr	r3, [r7, #28]
 800727e:	3301      	adds	r3, #1
 8007280:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	3301      	adds	r3, #1
 8007286:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	3301      	adds	r3, #1
 800728c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800728e:	69fb      	ldr	r3, [r7, #28]
 8007290:	3301      	adds	r3, #1
 8007292:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	3301      	adds	r3, #1
 8007298:	61bb      	str	r3, [r7, #24]
 800729a:	69ba      	ldr	r2, [r7, #24]
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	429a      	cmp	r2, r3
 80072a0:	d3e2      	bcc.n	8007268 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80072a2:	2300      	movs	r3, #0
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3724      	adds	r7, #36	@ 0x24
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b08b      	sub	sp, #44	@ 0x2c
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	60b9      	str	r1, [r7, #8]
 80072ba:	4613      	mov	r3, r2
 80072bc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80072c6:	88fb      	ldrh	r3, [r7, #6]
 80072c8:	089b      	lsrs	r3, r3, #2
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80072ce:	88fb      	ldrh	r3, [r7, #6]
 80072d0:	f003 0303 	and.w	r3, r3, #3
 80072d4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80072d6:	2300      	movs	r3, #0
 80072d8:	623b      	str	r3, [r7, #32]
 80072da:	e014      	b.n	8007306 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e6:	601a      	str	r2, [r3, #0]
    pDest++;
 80072e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ea:	3301      	adds	r3, #1
 80072ec:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80072ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f0:	3301      	adds	r3, #1
 80072f2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80072f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f6:	3301      	adds	r3, #1
 80072f8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80072fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072fc:	3301      	adds	r3, #1
 80072fe:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007300:	6a3b      	ldr	r3, [r7, #32]
 8007302:	3301      	adds	r3, #1
 8007304:	623b      	str	r3, [r7, #32]
 8007306:	6a3a      	ldr	r2, [r7, #32]
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	429a      	cmp	r2, r3
 800730c:	d3e6      	bcc.n	80072dc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800730e:	8bfb      	ldrh	r3, [r7, #30]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d01e      	beq.n	8007352 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007314:	2300      	movs	r3, #0
 8007316:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007318:	69bb      	ldr	r3, [r7, #24]
 800731a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800731e:	461a      	mov	r2, r3
 8007320:	f107 0310 	add.w	r3, r7, #16
 8007324:	6812      	ldr	r2, [r2, #0]
 8007326:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007328:	693a      	ldr	r2, [r7, #16]
 800732a:	6a3b      	ldr	r3, [r7, #32]
 800732c:	b2db      	uxtb	r3, r3
 800732e:	00db      	lsls	r3, r3, #3
 8007330:	fa22 f303 	lsr.w	r3, r2, r3
 8007334:	b2da      	uxtb	r2, r3
 8007336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007338:	701a      	strb	r2, [r3, #0]
      i++;
 800733a:	6a3b      	ldr	r3, [r7, #32]
 800733c:	3301      	adds	r3, #1
 800733e:	623b      	str	r3, [r7, #32]
      pDest++;
 8007340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007342:	3301      	adds	r3, #1
 8007344:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007346:	8bfb      	ldrh	r3, [r7, #30]
 8007348:	3b01      	subs	r3, #1
 800734a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800734c:	8bfb      	ldrh	r3, [r7, #30]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d1ea      	bne.n	8007328 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007354:	4618      	mov	r0, r3
 8007356:	372c      	adds	r7, #44	@ 0x2c
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr

08007360 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007360:	b480      	push	{r7}
 8007362:	b085      	sub	sp, #20
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	785b      	ldrb	r3, [r3, #1]
 8007378:	2b01      	cmp	r3, #1
 800737a:	d12c      	bne.n	80073d6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	015a      	lsls	r2, r3, #5
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	4413      	add	r3, r2
 8007384:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	2b00      	cmp	r3, #0
 800738c:	db12      	blt.n	80073b4 <USB_EPSetStall+0x54>
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d00f      	beq.n	80073b4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	015a      	lsls	r2, r3, #5
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	4413      	add	r3, r2
 800739c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	68ba      	ldr	r2, [r7, #8]
 80073a4:	0151      	lsls	r1, r2, #5
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	440a      	add	r2, r1
 80073aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073ae:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80073b2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	015a      	lsls	r2, r3, #5
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	4413      	add	r3, r2
 80073bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	68ba      	ldr	r2, [r7, #8]
 80073c4:	0151      	lsls	r1, r2, #5
 80073c6:	68fa      	ldr	r2, [r7, #12]
 80073c8:	440a      	add	r2, r1
 80073ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073ce:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80073d2:	6013      	str	r3, [r2, #0]
 80073d4:	e02b      	b.n	800742e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	015a      	lsls	r2, r3, #5
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	4413      	add	r3, r2
 80073de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	db12      	blt.n	800740e <USB_EPSetStall+0xae>
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d00f      	beq.n	800740e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	015a      	lsls	r2, r3, #5
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	4413      	add	r3, r2
 80073f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	68ba      	ldr	r2, [r7, #8]
 80073fe:	0151      	lsls	r1, r2, #5
 8007400:	68fa      	ldr	r2, [r7, #12]
 8007402:	440a      	add	r2, r1
 8007404:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007408:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800740c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	015a      	lsls	r2, r3, #5
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	4413      	add	r3, r2
 8007416:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	68ba      	ldr	r2, [r7, #8]
 800741e:	0151      	lsls	r1, r2, #5
 8007420:	68fa      	ldr	r2, [r7, #12]
 8007422:	440a      	add	r2, r1
 8007424:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007428:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800742c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800742e:	2300      	movs	r3, #0
}
 8007430:	4618      	mov	r0, r3
 8007432:	3714      	adds	r7, #20
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr

0800743c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800743c:	b480      	push	{r7}
 800743e:	b085      	sub	sp, #20
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	781b      	ldrb	r3, [r3, #0]
 800744e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	785b      	ldrb	r3, [r3, #1]
 8007454:	2b01      	cmp	r3, #1
 8007456:	d128      	bne.n	80074aa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	015a      	lsls	r2, r3, #5
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	4413      	add	r3, r2
 8007460:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	68ba      	ldr	r2, [r7, #8]
 8007468:	0151      	lsls	r1, r2, #5
 800746a:	68fa      	ldr	r2, [r7, #12]
 800746c:	440a      	add	r2, r1
 800746e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007472:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007476:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	791b      	ldrb	r3, [r3, #4]
 800747c:	2b03      	cmp	r3, #3
 800747e:	d003      	beq.n	8007488 <USB_EPClearStall+0x4c>
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	791b      	ldrb	r3, [r3, #4]
 8007484:	2b02      	cmp	r3, #2
 8007486:	d138      	bne.n	80074fa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	015a      	lsls	r2, r3, #5
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	4413      	add	r3, r2
 8007490:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	68ba      	ldr	r2, [r7, #8]
 8007498:	0151      	lsls	r1, r2, #5
 800749a:	68fa      	ldr	r2, [r7, #12]
 800749c:	440a      	add	r2, r1
 800749e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80074a6:	6013      	str	r3, [r2, #0]
 80074a8:	e027      	b.n	80074fa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	015a      	lsls	r2, r3, #5
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	4413      	add	r3, r2
 80074b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	68ba      	ldr	r2, [r7, #8]
 80074ba:	0151      	lsls	r1, r2, #5
 80074bc:	68fa      	ldr	r2, [r7, #12]
 80074be:	440a      	add	r2, r1
 80074c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074c4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80074c8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	791b      	ldrb	r3, [r3, #4]
 80074ce:	2b03      	cmp	r3, #3
 80074d0:	d003      	beq.n	80074da <USB_EPClearStall+0x9e>
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	791b      	ldrb	r3, [r3, #4]
 80074d6:	2b02      	cmp	r3, #2
 80074d8:	d10f      	bne.n	80074fa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	015a      	lsls	r2, r3, #5
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	4413      	add	r3, r2
 80074e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	68ba      	ldr	r2, [r7, #8]
 80074ea:	0151      	lsls	r1, r2, #5
 80074ec:	68fa      	ldr	r2, [r7, #12]
 80074ee:	440a      	add	r2, r1
 80074f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80074f8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3714      	adds	r7, #20
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr

08007508 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007508:	b480      	push	{r7}
 800750a:	b085      	sub	sp, #20
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	460b      	mov	r3, r1
 8007512:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	68fa      	ldr	r2, [r7, #12]
 8007522:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007526:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800752a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	78fb      	ldrb	r3, [r7, #3]
 8007536:	011b      	lsls	r3, r3, #4
 8007538:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800753c:	68f9      	ldr	r1, [r7, #12]
 800753e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007542:	4313      	orrs	r3, r2
 8007544:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007546:	2300      	movs	r3, #0
}
 8007548:	4618      	mov	r0, r3
 800754a:	3714      	adds	r7, #20
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007554:	b480      	push	{r7}
 8007556:	b085      	sub	sp, #20
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	68fa      	ldr	r2, [r7, #12]
 800756a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800756e:	f023 0303 	bic.w	r3, r3, #3
 8007572:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	68fa      	ldr	r2, [r7, #12]
 800757e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007582:	f023 0302 	bic.w	r3, r3, #2
 8007586:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007588:	2300      	movs	r3, #0
}
 800758a:	4618      	mov	r0, r3
 800758c:	3714      	adds	r7, #20
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr

08007596 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007596:	b480      	push	{r7}
 8007598:	b085      	sub	sp, #20
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	68fa      	ldr	r2, [r7, #12]
 80075ac:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80075b0:	f023 0303 	bic.w	r3, r3, #3
 80075b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	68fa      	ldr	r2, [r7, #12]
 80075c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80075c4:	f043 0302 	orr.w	r3, r3, #2
 80075c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80075ca:	2300      	movs	r3, #0
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3714      	adds	r7, #20
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80075d8:	b480      	push	{r7}
 80075da:	b085      	sub	sp, #20
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	695b      	ldr	r3, [r3, #20]
 80075e4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	699b      	ldr	r3, [r3, #24]
 80075ea:	68fa      	ldr	r2, [r7, #12]
 80075ec:	4013      	ands	r3, r2
 80075ee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80075f0:	68fb      	ldr	r3, [r7, #12]
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3714      	adds	r7, #20
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr

080075fe <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80075fe:	b480      	push	{r7}
 8007600:	b085      	sub	sp, #20
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007610:	699b      	ldr	r3, [r3, #24]
 8007612:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800761a:	69db      	ldr	r3, [r3, #28]
 800761c:	68ba      	ldr	r2, [r7, #8]
 800761e:	4013      	ands	r3, r2
 8007620:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	0c1b      	lsrs	r3, r3, #16
}
 8007626:	4618      	mov	r0, r3
 8007628:	3714      	adds	r7, #20
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr

08007632 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007632:	b480      	push	{r7}
 8007634:	b085      	sub	sp, #20
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007644:	699b      	ldr	r3, [r3, #24]
 8007646:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800764e:	69db      	ldr	r3, [r3, #28]
 8007650:	68ba      	ldr	r2, [r7, #8]
 8007652:	4013      	ands	r3, r2
 8007654:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	b29b      	uxth	r3, r3
}
 800765a:	4618      	mov	r0, r3
 800765c:	3714      	adds	r7, #20
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr

08007666 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007666:	b480      	push	{r7}
 8007668:	b085      	sub	sp, #20
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
 800766e:	460b      	mov	r3, r1
 8007670:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007676:	78fb      	ldrb	r3, [r7, #3]
 8007678:	015a      	lsls	r2, r3, #5
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	4413      	add	r3, r2
 800767e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800768c:	695b      	ldr	r3, [r3, #20]
 800768e:	68ba      	ldr	r2, [r7, #8]
 8007690:	4013      	ands	r3, r2
 8007692:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007694:	68bb      	ldr	r3, [r7, #8]
}
 8007696:	4618      	mov	r0, r3
 8007698:	3714      	adds	r7, #20
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr

080076a2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80076a2:	b480      	push	{r7}
 80076a4:	b087      	sub	sp, #28
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
 80076aa:	460b      	mov	r3, r1
 80076ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076b8:	691b      	ldr	r3, [r3, #16]
 80076ba:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076c4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80076c6:	78fb      	ldrb	r3, [r7, #3]
 80076c8:	f003 030f 	and.w	r3, r3, #15
 80076cc:	68fa      	ldr	r2, [r7, #12]
 80076ce:	fa22 f303 	lsr.w	r3, r2, r3
 80076d2:	01db      	lsls	r3, r3, #7
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	693a      	ldr	r2, [r7, #16]
 80076d8:	4313      	orrs	r3, r2
 80076da:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80076dc:	78fb      	ldrb	r3, [r7, #3]
 80076de:	015a      	lsls	r2, r3, #5
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	4413      	add	r3, r2
 80076e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	693a      	ldr	r2, [r7, #16]
 80076ec:	4013      	ands	r3, r2
 80076ee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80076f0:	68bb      	ldr	r3, [r7, #8]
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	371c      	adds	r7, #28
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr

080076fe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80076fe:	b480      	push	{r7}
 8007700:	b083      	sub	sp, #12
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	695b      	ldr	r3, [r3, #20]
 800770a:	f003 0301 	and.w	r3, r3, #1
}
 800770e:	4618      	mov	r0, r3
 8007710:	370c      	adds	r7, #12
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr
	...

0800771c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800771c:	b480      	push	{r7}
 800771e:	b085      	sub	sp, #20
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007736:	4619      	mov	r1, r3
 8007738:	4b09      	ldr	r3, [pc, #36]	@ (8007760 <USB_ActivateSetup+0x44>)
 800773a:	4013      	ands	r3, r2
 800773c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	68fa      	ldr	r2, [r7, #12]
 8007748:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800774c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007750:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007752:	2300      	movs	r3, #0
}
 8007754:	4618      	mov	r0, r3
 8007756:	3714      	adds	r7, #20
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr
 8007760:	fffff800 	.word	0xfffff800

08007764 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007764:	b480      	push	{r7}
 8007766:	b087      	sub	sp, #28
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	460b      	mov	r3, r1
 800776e:	607a      	str	r2, [r7, #4]
 8007770:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	333c      	adds	r3, #60	@ 0x3c
 800777a:	3304      	adds	r3, #4
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	4a26      	ldr	r2, [pc, #152]	@ (800781c <USB_EP0_OutStart+0xb8>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d90a      	bls.n	800779e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007794:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007798:	d101      	bne.n	800779e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800779a:	2300      	movs	r3, #0
 800779c:	e037      	b.n	800780e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077a4:	461a      	mov	r2, r3
 80077a6:	2300      	movs	r3, #0
 80077a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077b0:	691b      	ldr	r3, [r3, #16]
 80077b2:	697a      	ldr	r2, [r7, #20]
 80077b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077b8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80077bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	697a      	ldr	r2, [r7, #20]
 80077c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077cc:	f043 0318 	orr.w	r3, r3, #24
 80077d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077d8:	691b      	ldr	r3, [r3, #16]
 80077da:	697a      	ldr	r2, [r7, #20]
 80077dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077e0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80077e4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80077e6:	7afb      	ldrb	r3, [r7, #11]
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d10f      	bne.n	800780c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077f2:	461a      	mov	r2, r3
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	697a      	ldr	r2, [r7, #20]
 8007802:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007806:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800780a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	371c      	adds	r7, #28
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr
 800781a:	bf00      	nop
 800781c:	4f54300a 	.word	0x4f54300a

08007820 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007820:	b480      	push	{r7}
 8007822:	b085      	sub	sp, #20
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007828:	2300      	movs	r3, #0
 800782a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	3301      	adds	r3, #1
 8007830:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007838:	d901      	bls.n	800783e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800783a:	2303      	movs	r3, #3
 800783c:	e022      	b.n	8007884 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	691b      	ldr	r3, [r3, #16]
 8007842:	2b00      	cmp	r3, #0
 8007844:	daf2      	bge.n	800782c <USB_CoreReset+0xc>

  count = 10U;
 8007846:	230a      	movs	r3, #10
 8007848:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800784a:	e002      	b.n	8007852 <USB_CoreReset+0x32>
  {
    count--;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	3b01      	subs	r3, #1
 8007850:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d1f9      	bne.n	800784c <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	691b      	ldr	r3, [r3, #16]
 800785c:	f043 0201 	orr.w	r2, r3, #1
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	3301      	adds	r3, #1
 8007868:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007870:	d901      	bls.n	8007876 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8007872:	2303      	movs	r3, #3
 8007874:	e006      	b.n	8007884 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	691b      	ldr	r3, [r3, #16]
 800787a:	f003 0301 	and.w	r3, r3, #1
 800787e:	2b01      	cmp	r3, #1
 8007880:	d0f0      	beq.n	8007864 <USB_CoreReset+0x44>

  return HAL_OK;
 8007882:	2300      	movs	r3, #0
}
 8007884:	4618      	mov	r0, r3
 8007886:	3714      	adds	r7, #20
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr

08007890 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	460b      	mov	r3, r1
 800789a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800789c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80078a0:	f006 f96a 	bl	800db78 <malloc>
 80078a4:	4603      	mov	r3, r0
 80078a6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d109      	bne.n	80078c2 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	32b0      	adds	r2, #176	@ 0xb0
 80078b8:	2100      	movs	r1, #0
 80078ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80078be:	2302      	movs	r3, #2
 80078c0:	e0d4      	b.n	8007a6c <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80078c2:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80078c6:	2100      	movs	r1, #0
 80078c8:	68f8      	ldr	r0, [r7, #12]
 80078ca:	f006 ff6e 	bl	800e7aa <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	32b0      	adds	r2, #176	@ 0xb0
 80078d8:	68f9      	ldr	r1, [r7, #12]
 80078da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	32b0      	adds	r2, #176	@ 0xb0
 80078e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	7c1b      	ldrb	r3, [r3, #16]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d138      	bne.n	800796c <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80078fa:	4b5e      	ldr	r3, [pc, #376]	@ (8007a74 <USBD_CDC_Init+0x1e4>)
 80078fc:	7819      	ldrb	r1, [r3, #0]
 80078fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007902:	2202      	movs	r2, #2
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f005 ff94 	bl	800d832 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800790a:	4b5a      	ldr	r3, [pc, #360]	@ (8007a74 <USBD_CDC_Init+0x1e4>)
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	f003 020f 	and.w	r2, r3, #15
 8007912:	6879      	ldr	r1, [r7, #4]
 8007914:	4613      	mov	r3, r2
 8007916:	009b      	lsls	r3, r3, #2
 8007918:	4413      	add	r3, r2
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	440b      	add	r3, r1
 800791e:	3323      	adds	r3, #35	@ 0x23
 8007920:	2201      	movs	r2, #1
 8007922:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007924:	4b54      	ldr	r3, [pc, #336]	@ (8007a78 <USBD_CDC_Init+0x1e8>)
 8007926:	7819      	ldrb	r1, [r3, #0]
 8007928:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800792c:	2202      	movs	r2, #2
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f005 ff7f 	bl	800d832 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007934:	4b50      	ldr	r3, [pc, #320]	@ (8007a78 <USBD_CDC_Init+0x1e8>)
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	f003 020f 	and.w	r2, r3, #15
 800793c:	6879      	ldr	r1, [r7, #4]
 800793e:	4613      	mov	r3, r2
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	4413      	add	r3, r2
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	440b      	add	r3, r1
 8007948:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800794c:	2201      	movs	r2, #1
 800794e:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007950:	4b4a      	ldr	r3, [pc, #296]	@ (8007a7c <USBD_CDC_Init+0x1ec>)
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	f003 020f 	and.w	r2, r3, #15
 8007958:	6879      	ldr	r1, [r7, #4]
 800795a:	4613      	mov	r3, r2
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	4413      	add	r3, r2
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	440b      	add	r3, r1
 8007964:	331c      	adds	r3, #28
 8007966:	2210      	movs	r2, #16
 8007968:	601a      	str	r2, [r3, #0]
 800796a:	e035      	b.n	80079d8 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800796c:	4b41      	ldr	r3, [pc, #260]	@ (8007a74 <USBD_CDC_Init+0x1e4>)
 800796e:	7819      	ldrb	r1, [r3, #0]
 8007970:	2340      	movs	r3, #64	@ 0x40
 8007972:	2202      	movs	r2, #2
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f005 ff5c 	bl	800d832 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800797a:	4b3e      	ldr	r3, [pc, #248]	@ (8007a74 <USBD_CDC_Init+0x1e4>)
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	f003 020f 	and.w	r2, r3, #15
 8007982:	6879      	ldr	r1, [r7, #4]
 8007984:	4613      	mov	r3, r2
 8007986:	009b      	lsls	r3, r3, #2
 8007988:	4413      	add	r3, r2
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	440b      	add	r3, r1
 800798e:	3323      	adds	r3, #35	@ 0x23
 8007990:	2201      	movs	r2, #1
 8007992:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007994:	4b38      	ldr	r3, [pc, #224]	@ (8007a78 <USBD_CDC_Init+0x1e8>)
 8007996:	7819      	ldrb	r1, [r3, #0]
 8007998:	2340      	movs	r3, #64	@ 0x40
 800799a:	2202      	movs	r2, #2
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f005 ff48 	bl	800d832 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80079a2:	4b35      	ldr	r3, [pc, #212]	@ (8007a78 <USBD_CDC_Init+0x1e8>)
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	f003 020f 	and.w	r2, r3, #15
 80079aa:	6879      	ldr	r1, [r7, #4]
 80079ac:	4613      	mov	r3, r2
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	4413      	add	r3, r2
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	440b      	add	r3, r1
 80079b6:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80079ba:	2201      	movs	r2, #1
 80079bc:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80079be:	4b2f      	ldr	r3, [pc, #188]	@ (8007a7c <USBD_CDC_Init+0x1ec>)
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	f003 020f 	and.w	r2, r3, #15
 80079c6:	6879      	ldr	r1, [r7, #4]
 80079c8:	4613      	mov	r3, r2
 80079ca:	009b      	lsls	r3, r3, #2
 80079cc:	4413      	add	r3, r2
 80079ce:	009b      	lsls	r3, r3, #2
 80079d0:	440b      	add	r3, r1
 80079d2:	331c      	adds	r3, #28
 80079d4:	2210      	movs	r2, #16
 80079d6:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80079d8:	4b28      	ldr	r3, [pc, #160]	@ (8007a7c <USBD_CDC_Init+0x1ec>)
 80079da:	7819      	ldrb	r1, [r3, #0]
 80079dc:	2308      	movs	r3, #8
 80079de:	2203      	movs	r2, #3
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f005 ff26 	bl	800d832 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80079e6:	4b25      	ldr	r3, [pc, #148]	@ (8007a7c <USBD_CDC_Init+0x1ec>)
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	f003 020f 	and.w	r2, r3, #15
 80079ee:	6879      	ldr	r1, [r7, #4]
 80079f0:	4613      	mov	r3, r2
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	4413      	add	r3, r2
 80079f6:	009b      	lsls	r3, r3, #2
 80079f8:	440b      	add	r3, r1
 80079fa:	3323      	adds	r3, #35	@ 0x23
 80079fc:	2201      	movs	r2, #1
 80079fe:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2200      	movs	r2, #0
 8007a04:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	33b0      	adds	r3, #176	@ 0xb0
 8007a12:	009b      	lsls	r3, r3, #2
 8007a14:	4413      	add	r3, r2
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2200      	movs	r2, #0
 8007a28:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d101      	bne.n	8007a3a <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 8007a36:	2302      	movs	r3, #2
 8007a38:	e018      	b.n	8007a6c <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	7c1b      	ldrb	r3, [r3, #16]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d10a      	bne.n	8007a58 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007a42:	4b0d      	ldr	r3, [pc, #52]	@ (8007a78 <USBD_CDC_Init+0x1e8>)
 8007a44:	7819      	ldrb	r1, [r3, #0]
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007a4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f005 ffdd 	bl	800da10 <USBD_LL_PrepareReceive>
 8007a56:	e008      	b.n	8007a6a <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007a58:	4b07      	ldr	r3, [pc, #28]	@ (8007a78 <USBD_CDC_Init+0x1e8>)
 8007a5a:	7819      	ldrb	r1, [r3, #0]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007a62:	2340      	movs	r3, #64	@ 0x40
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f005 ffd3 	bl	800da10 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007a6a:	2300      	movs	r3, #0
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3710      	adds	r7, #16
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}
 8007a74:	20000093 	.word	0x20000093
 8007a78:	20000094 	.word	0x20000094
 8007a7c:	20000095 	.word	0x20000095

08007a80 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b082      	sub	sp, #8
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	460b      	mov	r3, r1
 8007a8a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007a8c:	4b3a      	ldr	r3, [pc, #232]	@ (8007b78 <USBD_CDC_DeInit+0xf8>)
 8007a8e:	781b      	ldrb	r3, [r3, #0]
 8007a90:	4619      	mov	r1, r3
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f005 fef3 	bl	800d87e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007a98:	4b37      	ldr	r3, [pc, #220]	@ (8007b78 <USBD_CDC_DeInit+0xf8>)
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	f003 020f 	and.w	r2, r3, #15
 8007aa0:	6879      	ldr	r1, [r7, #4]
 8007aa2:	4613      	mov	r3, r2
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	4413      	add	r3, r2
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	440b      	add	r3, r1
 8007aac:	3323      	adds	r3, #35	@ 0x23
 8007aae:	2200      	movs	r2, #0
 8007ab0:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007ab2:	4b32      	ldr	r3, [pc, #200]	@ (8007b7c <USBD_CDC_DeInit+0xfc>)
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f005 fee0 	bl	800d87e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007abe:	4b2f      	ldr	r3, [pc, #188]	@ (8007b7c <USBD_CDC_DeInit+0xfc>)
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	f003 020f 	and.w	r2, r3, #15
 8007ac6:	6879      	ldr	r1, [r7, #4]
 8007ac8:	4613      	mov	r3, r2
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	4413      	add	r3, r2
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	440b      	add	r3, r1
 8007ad2:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007ada:	4b29      	ldr	r3, [pc, #164]	@ (8007b80 <USBD_CDC_DeInit+0x100>)
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	4619      	mov	r1, r3
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f005 fecc 	bl	800d87e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007ae6:	4b26      	ldr	r3, [pc, #152]	@ (8007b80 <USBD_CDC_DeInit+0x100>)
 8007ae8:	781b      	ldrb	r3, [r3, #0]
 8007aea:	f003 020f 	and.w	r2, r3, #15
 8007aee:	6879      	ldr	r1, [r7, #4]
 8007af0:	4613      	mov	r3, r2
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	4413      	add	r3, r2
 8007af6:	009b      	lsls	r3, r3, #2
 8007af8:	440b      	add	r3, r1
 8007afa:	3323      	adds	r3, #35	@ 0x23
 8007afc:	2200      	movs	r2, #0
 8007afe:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007b00:	4b1f      	ldr	r3, [pc, #124]	@ (8007b80 <USBD_CDC_DeInit+0x100>)
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	f003 020f 	and.w	r2, r3, #15
 8007b08:	6879      	ldr	r1, [r7, #4]
 8007b0a:	4613      	mov	r3, r2
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	4413      	add	r3, r2
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	440b      	add	r3, r1
 8007b14:	331c      	adds	r3, #28
 8007b16:	2200      	movs	r2, #0
 8007b18:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	32b0      	adds	r2, #176	@ 0xb0
 8007b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d01f      	beq.n	8007b6c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	33b0      	adds	r3, #176	@ 0xb0
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	4413      	add	r3, r2
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	32b0      	adds	r2, #176	@ 0xb0
 8007b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f006 f81a 	bl	800db88 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	32b0      	adds	r2, #176	@ 0xb0
 8007b5e:	2100      	movs	r1, #0
 8007b60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2200      	movs	r2, #0
 8007b68:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007b6c:	2300      	movs	r3, #0
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3708      	adds	r7, #8
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop
 8007b78:	20000093 	.word	0x20000093
 8007b7c:	20000094 	.word	0x20000094
 8007b80:	20000095 	.word	0x20000095

08007b84 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b086      	sub	sp, #24
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	32b0      	adds	r2, #176	@ 0xb0
 8007b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b9c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d101      	bne.n	8007bb4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007bb0:	2303      	movs	r3, #3
 8007bb2:	e0bf      	b.n	8007d34 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d050      	beq.n	8007c62 <USBD_CDC_Setup+0xde>
 8007bc0:	2b20      	cmp	r3, #32
 8007bc2:	f040 80af 	bne.w	8007d24 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	88db      	ldrh	r3, [r3, #6]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d03a      	beq.n	8007c44 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	b25b      	sxtb	r3, r3
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	da1b      	bge.n	8007c10 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	33b0      	adds	r3, #176	@ 0xb0
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	4413      	add	r3, r2
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	689b      	ldr	r3, [r3, #8]
 8007bea:	683a      	ldr	r2, [r7, #0]
 8007bec:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007bee:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007bf0:	683a      	ldr	r2, [r7, #0]
 8007bf2:	88d2      	ldrh	r2, [r2, #6]
 8007bf4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	88db      	ldrh	r3, [r3, #6]
 8007bfa:	2b07      	cmp	r3, #7
 8007bfc:	bf28      	it	cs
 8007bfe:	2307      	movcs	r3, #7
 8007c00:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	89fa      	ldrh	r2, [r7, #14]
 8007c06:	4619      	mov	r1, r3
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f001 fdd3 	bl	80097b4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007c0e:	e090      	b.n	8007d32 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	785a      	ldrb	r2, [r3, #1]
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	88db      	ldrh	r3, [r3, #6]
 8007c1e:	2b3f      	cmp	r3, #63	@ 0x3f
 8007c20:	d803      	bhi.n	8007c2a <USBD_CDC_Setup+0xa6>
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	88db      	ldrh	r3, [r3, #6]
 8007c26:	b2da      	uxtb	r2, r3
 8007c28:	e000      	b.n	8007c2c <USBD_CDC_Setup+0xa8>
 8007c2a:	2240      	movs	r2, #64	@ 0x40
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007c32:	6939      	ldr	r1, [r7, #16]
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f001 fde8 	bl	8009812 <USBD_CtlPrepareRx>
      break;
 8007c42:	e076      	b.n	8007d32 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007c4a:	687a      	ldr	r2, [r7, #4]
 8007c4c:	33b0      	adds	r3, #176	@ 0xb0
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	4413      	add	r3, r2
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	683a      	ldr	r2, [r7, #0]
 8007c58:	7850      	ldrb	r0, [r2, #1]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	6839      	ldr	r1, [r7, #0]
 8007c5e:	4798      	blx	r3
      break;
 8007c60:	e067      	b.n	8007d32 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	785b      	ldrb	r3, [r3, #1]
 8007c66:	2b0b      	cmp	r3, #11
 8007c68:	d851      	bhi.n	8007d0e <USBD_CDC_Setup+0x18a>
 8007c6a:	a201      	add	r2, pc, #4	@ (adr r2, 8007c70 <USBD_CDC_Setup+0xec>)
 8007c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c70:	08007ca1 	.word	0x08007ca1
 8007c74:	08007d1d 	.word	0x08007d1d
 8007c78:	08007d0f 	.word	0x08007d0f
 8007c7c:	08007d0f 	.word	0x08007d0f
 8007c80:	08007d0f 	.word	0x08007d0f
 8007c84:	08007d0f 	.word	0x08007d0f
 8007c88:	08007d0f 	.word	0x08007d0f
 8007c8c:	08007d0f 	.word	0x08007d0f
 8007c90:	08007d0f 	.word	0x08007d0f
 8007c94:	08007d0f 	.word	0x08007d0f
 8007c98:	08007ccb 	.word	0x08007ccb
 8007c9c:	08007cf5 	.word	0x08007cf5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	2b03      	cmp	r3, #3
 8007caa:	d107      	bne.n	8007cbc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007cac:	f107 030a 	add.w	r3, r7, #10
 8007cb0:	2202      	movs	r2, #2
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f001 fd7d 	bl	80097b4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007cba:	e032      	b.n	8007d22 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007cbc:	6839      	ldr	r1, [r7, #0]
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f001 fcfb 	bl	80096ba <USBD_CtlError>
            ret = USBD_FAIL;
 8007cc4:	2303      	movs	r3, #3
 8007cc6:	75fb      	strb	r3, [r7, #23]
          break;
 8007cc8:	e02b      	b.n	8007d22 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	2b03      	cmp	r3, #3
 8007cd4:	d107      	bne.n	8007ce6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007cd6:	f107 030d 	add.w	r3, r7, #13
 8007cda:	2201      	movs	r2, #1
 8007cdc:	4619      	mov	r1, r3
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f001 fd68 	bl	80097b4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007ce4:	e01d      	b.n	8007d22 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007ce6:	6839      	ldr	r1, [r7, #0]
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f001 fce6 	bl	80096ba <USBD_CtlError>
            ret = USBD_FAIL;
 8007cee:	2303      	movs	r3, #3
 8007cf0:	75fb      	strb	r3, [r7, #23]
          break;
 8007cf2:	e016      	b.n	8007d22 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	2b03      	cmp	r3, #3
 8007cfe:	d00f      	beq.n	8007d20 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007d00:	6839      	ldr	r1, [r7, #0]
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f001 fcd9 	bl	80096ba <USBD_CtlError>
            ret = USBD_FAIL;
 8007d08:	2303      	movs	r3, #3
 8007d0a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007d0c:	e008      	b.n	8007d20 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007d0e:	6839      	ldr	r1, [r7, #0]
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f001 fcd2 	bl	80096ba <USBD_CtlError>
          ret = USBD_FAIL;
 8007d16:	2303      	movs	r3, #3
 8007d18:	75fb      	strb	r3, [r7, #23]
          break;
 8007d1a:	e002      	b.n	8007d22 <USBD_CDC_Setup+0x19e>
          break;
 8007d1c:	bf00      	nop
 8007d1e:	e008      	b.n	8007d32 <USBD_CDC_Setup+0x1ae>
          break;
 8007d20:	bf00      	nop
      }
      break;
 8007d22:	e006      	b.n	8007d32 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007d24:	6839      	ldr	r1, [r7, #0]
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f001 fcc7 	bl	80096ba <USBD_CtlError>
      ret = USBD_FAIL;
 8007d2c:	2303      	movs	r3, #3
 8007d2e:	75fb      	strb	r3, [r7, #23]
      break;
 8007d30:	bf00      	nop
  }

  return (uint8_t)ret;
 8007d32:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3718      	adds	r7, #24
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	460b      	mov	r3, r1
 8007d46:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007d4e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	32b0      	adds	r2, #176	@ 0xb0
 8007d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d101      	bne.n	8007d66 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007d62:	2303      	movs	r3, #3
 8007d64:	e065      	b.n	8007e32 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	32b0      	adds	r2, #176	@ 0xb0
 8007d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d74:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007d76:	78fb      	ldrb	r3, [r7, #3]
 8007d78:	f003 020f 	and.w	r2, r3, #15
 8007d7c:	6879      	ldr	r1, [r7, #4]
 8007d7e:	4613      	mov	r3, r2
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	4413      	add	r3, r2
 8007d84:	009b      	lsls	r3, r3, #2
 8007d86:	440b      	add	r3, r1
 8007d88:	3314      	adds	r3, #20
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d02f      	beq.n	8007df0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007d90:	78fb      	ldrb	r3, [r7, #3]
 8007d92:	f003 020f 	and.w	r2, r3, #15
 8007d96:	6879      	ldr	r1, [r7, #4]
 8007d98:	4613      	mov	r3, r2
 8007d9a:	009b      	lsls	r3, r3, #2
 8007d9c:	4413      	add	r3, r2
 8007d9e:	009b      	lsls	r3, r3, #2
 8007da0:	440b      	add	r3, r1
 8007da2:	3314      	adds	r3, #20
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	78fb      	ldrb	r3, [r7, #3]
 8007da8:	f003 010f 	and.w	r1, r3, #15
 8007dac:	68f8      	ldr	r0, [r7, #12]
 8007dae:	460b      	mov	r3, r1
 8007db0:	00db      	lsls	r3, r3, #3
 8007db2:	440b      	add	r3, r1
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	4403      	add	r3, r0
 8007db8:	331c      	adds	r3, #28
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	fbb2 f1f3 	udiv	r1, r2, r3
 8007dc0:	fb01 f303 	mul.w	r3, r1, r3
 8007dc4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d112      	bne.n	8007df0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007dca:	78fb      	ldrb	r3, [r7, #3]
 8007dcc:	f003 020f 	and.w	r2, r3, #15
 8007dd0:	6879      	ldr	r1, [r7, #4]
 8007dd2:	4613      	mov	r3, r2
 8007dd4:	009b      	lsls	r3, r3, #2
 8007dd6:	4413      	add	r3, r2
 8007dd8:	009b      	lsls	r3, r3, #2
 8007dda:	440b      	add	r3, r1
 8007ddc:	3314      	adds	r3, #20
 8007dde:	2200      	movs	r2, #0
 8007de0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007de2:	78f9      	ldrb	r1, [r7, #3]
 8007de4:	2300      	movs	r3, #0
 8007de6:	2200      	movs	r2, #0
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f005 fdf0 	bl	800d9ce <USBD_LL_Transmit>
 8007dee:	e01f      	b.n	8007e30 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	33b0      	adds	r3, #176	@ 0xb0
 8007e02:	009b      	lsls	r3, r3, #2
 8007e04:	4413      	add	r3, r2
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	691b      	ldr	r3, [r3, #16]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d010      	beq.n	8007e30 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e14:	687a      	ldr	r2, [r7, #4]
 8007e16:	33b0      	adds	r3, #176	@ 0xb0
 8007e18:	009b      	lsls	r3, r3, #2
 8007e1a:	4413      	add	r3, r2
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	691b      	ldr	r3, [r3, #16]
 8007e20:	68ba      	ldr	r2, [r7, #8]
 8007e22:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007e26:	68ba      	ldr	r2, [r7, #8]
 8007e28:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007e2c:	78fa      	ldrb	r2, [r7, #3]
 8007e2e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007e30:	2300      	movs	r3, #0
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3710      	adds	r7, #16
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}

08007e3a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007e3a:	b580      	push	{r7, lr}
 8007e3c:	b084      	sub	sp, #16
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	6078      	str	r0, [r7, #4]
 8007e42:	460b      	mov	r3, r1
 8007e44:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	32b0      	adds	r2, #176	@ 0xb0
 8007e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e54:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	32b0      	adds	r2, #176	@ 0xb0
 8007e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d101      	bne.n	8007e6c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007e68:	2303      	movs	r3, #3
 8007e6a:	e01a      	b.n	8007ea2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007e6c:	78fb      	ldrb	r3, [r7, #3]
 8007e6e:	4619      	mov	r1, r3
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f005 fdee 	bl	800da52 <USBD_LL_GetRxDataSize>
 8007e76:	4602      	mov	r2, r0
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	33b0      	adds	r3, #176	@ 0xb0
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	4413      	add	r3, r2
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	68fa      	ldr	r2, [r7, #12]
 8007e92:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007e96:	68fa      	ldr	r2, [r7, #12]
 8007e98:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007e9c:	4611      	mov	r1, r2
 8007e9e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007ea0:	2300      	movs	r3, #0
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3710      	adds	r7, #16
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007eaa:	b580      	push	{r7, lr}
 8007eac:	b084      	sub	sp, #16
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	32b0      	adds	r2, #176	@ 0xb0
 8007ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ec0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d101      	bne.n	8007ecc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007ec8:	2303      	movs	r3, #3
 8007eca:	e024      	b.n	8007f16 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	33b0      	adds	r3, #176	@ 0xb0
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	4413      	add	r3, r2
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d019      	beq.n	8007f14 <USBD_CDC_EP0_RxReady+0x6a>
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007ee6:	2bff      	cmp	r3, #255	@ 0xff
 8007ee8:	d014      	beq.n	8007f14 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	33b0      	adds	r3, #176	@ 0xb0
 8007ef4:	009b      	lsls	r3, r3, #2
 8007ef6:	4413      	add	r3, r2
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	68fa      	ldr	r2, [r7, #12]
 8007efe:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007f02:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007f04:	68fa      	ldr	r2, [r7, #12]
 8007f06:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007f0a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	22ff      	movs	r2, #255	@ 0xff
 8007f10:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007f14:	2300      	movs	r3, #0
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3710      	adds	r7, #16
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
	...

08007f20 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b086      	sub	sp, #24
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007f28:	2182      	movs	r1, #130	@ 0x82
 8007f2a:	4818      	ldr	r0, [pc, #96]	@ (8007f8c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007f2c:	f000 fd62 	bl	80089f4 <USBD_GetEpDesc>
 8007f30:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007f32:	2101      	movs	r1, #1
 8007f34:	4815      	ldr	r0, [pc, #84]	@ (8007f8c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007f36:	f000 fd5d 	bl	80089f4 <USBD_GetEpDesc>
 8007f3a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007f3c:	2181      	movs	r1, #129	@ 0x81
 8007f3e:	4813      	ldr	r0, [pc, #76]	@ (8007f8c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007f40:	f000 fd58 	bl	80089f4 <USBD_GetEpDesc>
 8007f44:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d002      	beq.n	8007f52 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	2210      	movs	r2, #16
 8007f50:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d006      	beq.n	8007f66 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007f60:	711a      	strb	r2, [r3, #4]
 8007f62:	2200      	movs	r2, #0
 8007f64:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d006      	beq.n	8007f7a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007f74:	711a      	strb	r2, [r3, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2243      	movs	r2, #67	@ 0x43
 8007f7e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007f80:	4b02      	ldr	r3, [pc, #8]	@ (8007f8c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3718      	adds	r7, #24
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	20000050 	.word	0x20000050

08007f90 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b086      	sub	sp, #24
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007f98:	2182      	movs	r1, #130	@ 0x82
 8007f9a:	4818      	ldr	r0, [pc, #96]	@ (8007ffc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007f9c:	f000 fd2a 	bl	80089f4 <USBD_GetEpDesc>
 8007fa0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007fa2:	2101      	movs	r1, #1
 8007fa4:	4815      	ldr	r0, [pc, #84]	@ (8007ffc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007fa6:	f000 fd25 	bl	80089f4 <USBD_GetEpDesc>
 8007faa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007fac:	2181      	movs	r1, #129	@ 0x81
 8007fae:	4813      	ldr	r0, [pc, #76]	@ (8007ffc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007fb0:	f000 fd20 	bl	80089f4 <USBD_GetEpDesc>
 8007fb4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d002      	beq.n	8007fc2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	2210      	movs	r2, #16
 8007fc0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d006      	beq.n	8007fd6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	711a      	strb	r2, [r3, #4]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	f042 0202 	orr.w	r2, r2, #2
 8007fd4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d006      	beq.n	8007fea <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	711a      	strb	r2, [r3, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f042 0202 	orr.w	r2, r2, #2
 8007fe8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2243      	movs	r2, #67	@ 0x43
 8007fee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007ff0:	4b02      	ldr	r3, [pc, #8]	@ (8007ffc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3718      	adds	r7, #24
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
 8007ffa:	bf00      	nop
 8007ffc:	20000050 	.word	0x20000050

08008000 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b086      	sub	sp, #24
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008008:	2182      	movs	r1, #130	@ 0x82
 800800a:	4818      	ldr	r0, [pc, #96]	@ (800806c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800800c:	f000 fcf2 	bl	80089f4 <USBD_GetEpDesc>
 8008010:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008012:	2101      	movs	r1, #1
 8008014:	4815      	ldr	r0, [pc, #84]	@ (800806c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008016:	f000 fced 	bl	80089f4 <USBD_GetEpDesc>
 800801a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800801c:	2181      	movs	r1, #129	@ 0x81
 800801e:	4813      	ldr	r0, [pc, #76]	@ (800806c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008020:	f000 fce8 	bl	80089f4 <USBD_GetEpDesc>
 8008024:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d002      	beq.n	8008032 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	2210      	movs	r2, #16
 8008030:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d006      	beq.n	8008046 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	2200      	movs	r2, #0
 800803c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008040:	711a      	strb	r2, [r3, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d006      	beq.n	800805a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2200      	movs	r2, #0
 8008050:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008054:	711a      	strb	r2, [r3, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2243      	movs	r2, #67	@ 0x43
 800805e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008060:	4b02      	ldr	r3, [pc, #8]	@ (800806c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008062:	4618      	mov	r0, r3
 8008064:	3718      	adds	r7, #24
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	20000050 	.word	0x20000050

08008070 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	220a      	movs	r2, #10
 800807c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800807e:	4b03      	ldr	r3, [pc, #12]	@ (800808c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008080:	4618      	mov	r0, r3
 8008082:	370c      	adds	r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr
 800808c:	2000000c 	.word	0x2000000c

08008090 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008090:	b480      	push	{r7}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d101      	bne.n	80080a4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80080a0:	2303      	movs	r3, #3
 80080a2:	e009      	b.n	80080b8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80080aa:	687a      	ldr	r2, [r7, #4]
 80080ac:	33b0      	adds	r3, #176	@ 0xb0
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	4413      	add	r3, r2
 80080b2:	683a      	ldr	r2, [r7, #0]
 80080b4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80080b6:	2300      	movs	r3, #0
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	370c      	adds	r7, #12
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr

080080c4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b087      	sub	sp, #28
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	60f8      	str	r0, [r7, #12]
 80080cc:	60b9      	str	r1, [r7, #8]
 80080ce:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	32b0      	adds	r2, #176	@ 0xb0
 80080da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080de:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d101      	bne.n	80080ea <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80080e6:	2303      	movs	r3, #3
 80080e8:	e008      	b.n	80080fc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	68ba      	ldr	r2, [r7, #8]
 80080ee:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80080fa:	2300      	movs	r3, #0
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	371c      	adds	r7, #28
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr

08008108 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008108:	b480      	push	{r7}
 800810a:	b085      	sub	sp, #20
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	32b0      	adds	r2, #176	@ 0xb0
 800811c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008120:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d101      	bne.n	800812c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008128:	2303      	movs	r3, #3
 800812a:	e004      	b.n	8008136 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	683a      	ldr	r2, [r7, #0]
 8008130:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008134:	2300      	movs	r3, #0
}
 8008136:	4618      	mov	r0, r3
 8008138:	3714      	adds	r7, #20
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr
	...

08008144 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	32b0      	adds	r2, #176	@ 0xb0
 8008156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800815a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800815c:	2301      	movs	r3, #1
 800815e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d101      	bne.n	800816a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008166:	2303      	movs	r3, #3
 8008168:	e025      	b.n	80081b6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008170:	2b00      	cmp	r3, #0
 8008172:	d11f      	bne.n	80081b4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	2201      	movs	r2, #1
 8008178:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800817c:	4b10      	ldr	r3, [pc, #64]	@ (80081c0 <USBD_CDC_TransmitPacket+0x7c>)
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	f003 020f 	and.w	r2, r3, #15
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	4613      	mov	r3, r2
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	4413      	add	r3, r2
 8008192:	009b      	lsls	r3, r3, #2
 8008194:	4403      	add	r3, r0
 8008196:	3314      	adds	r3, #20
 8008198:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800819a:	4b09      	ldr	r3, [pc, #36]	@ (80081c0 <USBD_CDC_TransmitPacket+0x7c>)
 800819c:	7819      	ldrb	r1, [r3, #0]
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f005 fc0f 	bl	800d9ce <USBD_LL_Transmit>

    ret = USBD_OK;
 80081b0:	2300      	movs	r3, #0
 80081b2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80081b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3710      	adds	r7, #16
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	20000093 	.word	0x20000093

080081c4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	32b0      	adds	r2, #176	@ 0xb0
 80081d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081da:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	32b0      	adds	r2, #176	@ 0xb0
 80081e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d101      	bne.n	80081f2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80081ee:	2303      	movs	r3, #3
 80081f0:	e018      	b.n	8008224 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	7c1b      	ldrb	r3, [r3, #16]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d10a      	bne.n	8008210 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80081fa:	4b0c      	ldr	r3, [pc, #48]	@ (800822c <USBD_CDC_ReceivePacket+0x68>)
 80081fc:	7819      	ldrb	r1, [r3, #0]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008204:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f005 fc01 	bl	800da10 <USBD_LL_PrepareReceive>
 800820e:	e008      	b.n	8008222 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008210:	4b06      	ldr	r3, [pc, #24]	@ (800822c <USBD_CDC_ReceivePacket+0x68>)
 8008212:	7819      	ldrb	r1, [r3, #0]
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800821a:	2340      	movs	r3, #64	@ 0x40
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f005 fbf7 	bl	800da10 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008222:	2300      	movs	r3, #0
}
 8008224:	4618      	mov	r0, r3
 8008226:	3710      	adds	r7, #16
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}
 800822c:	20000094 	.word	0x20000094

08008230 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b086      	sub	sp, #24
 8008234:	af00      	add	r7, sp, #0
 8008236:	60f8      	str	r0, [r7, #12]
 8008238:	60b9      	str	r1, [r7, #8]
 800823a:	4613      	mov	r3, r2
 800823c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d101      	bne.n	8008248 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008244:	2303      	movs	r3, #3
 8008246:	e01f      	b.n	8008288 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2200      	movs	r2, #0
 800824c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2200      	movs	r2, #0
 8008254:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2200      	movs	r2, #0
 800825c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d003      	beq.n	800826e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	68ba      	ldr	r2, [r7, #8]
 800826a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2201      	movs	r2, #1
 8008272:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	79fa      	ldrb	r2, [r7, #7]
 800827a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800827c:	68f8      	ldr	r0, [r7, #12]
 800827e:	f005 fa6b 	bl	800d758 <USBD_LL_Init>
 8008282:	4603      	mov	r3, r0
 8008284:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008286:	7dfb      	ldrb	r3, [r7, #23]
}
 8008288:	4618      	mov	r0, r3
 800828a:	3718      	adds	r7, #24
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b084      	sub	sp, #16
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800829a:	2300      	movs	r3, #0
 800829c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d101      	bne.n	80082a8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80082a4:	2303      	movs	r3, #3
 80082a6:	e025      	b.n	80082f4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	683a      	ldr	r2, [r7, #0]
 80082ac:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	32ae      	adds	r2, #174	@ 0xae
 80082ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d00f      	beq.n	80082e4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	32ae      	adds	r2, #174	@ 0xae
 80082ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082d4:	f107 020e 	add.w	r2, r7, #14
 80082d8:	4610      	mov	r0, r2
 80082da:	4798      	blx	r3
 80082dc:	4602      	mov	r2, r0
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80082ea:	1c5a      	adds	r2, r3, #1
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80082f2:	2300      	movs	r3, #0
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3710      	adds	r7, #16
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b082      	sub	sp, #8
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f005 fa79 	bl	800d7fc <USBD_LL_Start>
 800830a:	4603      	mov	r3, r0
}
 800830c:	4618      	mov	r0, r3
 800830e:	3708      	adds	r7, #8
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008314:	b480      	push	{r7}
 8008316:	b083      	sub	sp, #12
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800831c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800831e:	4618      	mov	r0, r3
 8008320:	370c      	adds	r7, #12
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr

0800832a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800832a:	b580      	push	{r7, lr}
 800832c:	b084      	sub	sp, #16
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
 8008332:	460b      	mov	r3, r1
 8008334:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008336:	2300      	movs	r3, #0
 8008338:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008340:	2b00      	cmp	r3, #0
 8008342:	d009      	beq.n	8008358 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	78fa      	ldrb	r2, [r7, #3]
 800834e:	4611      	mov	r1, r2
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	4798      	blx	r3
 8008354:	4603      	mov	r3, r0
 8008356:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008358:	7bfb      	ldrb	r3, [r7, #15]
}
 800835a:	4618      	mov	r0, r3
 800835c:	3710      	adds	r7, #16
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}

08008362 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008362:	b580      	push	{r7, lr}
 8008364:	b084      	sub	sp, #16
 8008366:	af00      	add	r7, sp, #0
 8008368:	6078      	str	r0, [r7, #4]
 800836a:	460b      	mov	r3, r1
 800836c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800836e:	2300      	movs	r3, #0
 8008370:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	78fa      	ldrb	r2, [r7, #3]
 800837c:	4611      	mov	r1, r2
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	4798      	blx	r3
 8008382:	4603      	mov	r3, r0
 8008384:	2b00      	cmp	r3, #0
 8008386:	d001      	beq.n	800838c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008388:	2303      	movs	r3, #3
 800838a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800838c:	7bfb      	ldrb	r3, [r7, #15]
}
 800838e:	4618      	mov	r0, r3
 8008390:	3710      	adds	r7, #16
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}

08008396 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008396:	b580      	push	{r7, lr}
 8008398:	b084      	sub	sp, #16
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
 800839e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80083a6:	6839      	ldr	r1, [r7, #0]
 80083a8:	4618      	mov	r0, r3
 80083aa:	f001 f94c 	bl	8009646 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2201      	movs	r2, #1
 80083b2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80083bc:	461a      	mov	r2, r3
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80083ca:	f003 031f 	and.w	r3, r3, #31
 80083ce:	2b02      	cmp	r3, #2
 80083d0:	d01a      	beq.n	8008408 <USBD_LL_SetupStage+0x72>
 80083d2:	2b02      	cmp	r3, #2
 80083d4:	d822      	bhi.n	800841c <USBD_LL_SetupStage+0x86>
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d002      	beq.n	80083e0 <USBD_LL_SetupStage+0x4a>
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d00a      	beq.n	80083f4 <USBD_LL_SetupStage+0x5e>
 80083de:	e01d      	b.n	800841c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80083e6:	4619      	mov	r1, r3
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 fb77 	bl	8008adc <USBD_StdDevReq>
 80083ee:	4603      	mov	r3, r0
 80083f0:	73fb      	strb	r3, [r7, #15]
      break;
 80083f2:	e020      	b.n	8008436 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80083fa:	4619      	mov	r1, r3
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 fbdf 	bl	8008bc0 <USBD_StdItfReq>
 8008402:	4603      	mov	r3, r0
 8008404:	73fb      	strb	r3, [r7, #15]
      break;
 8008406:	e016      	b.n	8008436 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800840e:	4619      	mov	r1, r3
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f000 fc41 	bl	8008c98 <USBD_StdEPReq>
 8008416:	4603      	mov	r3, r0
 8008418:	73fb      	strb	r3, [r7, #15]
      break;
 800841a:	e00c      	b.n	8008436 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008422:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008426:	b2db      	uxtb	r3, r3
 8008428:	4619      	mov	r1, r3
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f005 fa46 	bl	800d8bc <USBD_LL_StallEP>
 8008430:	4603      	mov	r3, r0
 8008432:	73fb      	strb	r3, [r7, #15]
      break;
 8008434:	bf00      	nop
  }

  return ret;
 8008436:	7bfb      	ldrb	r3, [r7, #15]
}
 8008438:	4618      	mov	r0, r3
 800843a:	3710      	adds	r7, #16
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b086      	sub	sp, #24
 8008444:	af00      	add	r7, sp, #0
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	460b      	mov	r3, r1
 800844a:	607a      	str	r2, [r7, #4]
 800844c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800844e:	2300      	movs	r3, #0
 8008450:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8008452:	7afb      	ldrb	r3, [r7, #11]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d177      	bne.n	8008548 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800845e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008466:	2b03      	cmp	r3, #3
 8008468:	f040 80a1 	bne.w	80085ae <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	693a      	ldr	r2, [r7, #16]
 8008472:	8992      	ldrh	r2, [r2, #12]
 8008474:	4293      	cmp	r3, r2
 8008476:	d91c      	bls.n	80084b2 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	693a      	ldr	r2, [r7, #16]
 800847e:	8992      	ldrh	r2, [r2, #12]
 8008480:	1a9a      	subs	r2, r3, r2
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	691b      	ldr	r3, [r3, #16]
 800848a:	693a      	ldr	r2, [r7, #16]
 800848c:	8992      	ldrh	r2, [r2, #12]
 800848e:	441a      	add	r2, r3
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	6919      	ldr	r1, [r3, #16]
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	899b      	ldrh	r3, [r3, #12]
 800849c:	461a      	mov	r2, r3
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	4293      	cmp	r3, r2
 80084a4:	bf38      	it	cc
 80084a6:	4613      	movcc	r3, r2
 80084a8:	461a      	mov	r2, r3
 80084aa:	68f8      	ldr	r0, [r7, #12]
 80084ac:	f001 f9d2 	bl	8009854 <USBD_CtlContinueRx>
 80084b0:	e07d      	b.n	80085ae <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80084b8:	f003 031f 	and.w	r3, r3, #31
 80084bc:	2b02      	cmp	r3, #2
 80084be:	d014      	beq.n	80084ea <USBD_LL_DataOutStage+0xaa>
 80084c0:	2b02      	cmp	r3, #2
 80084c2:	d81d      	bhi.n	8008500 <USBD_LL_DataOutStage+0xc0>
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d002      	beq.n	80084ce <USBD_LL_DataOutStage+0x8e>
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d003      	beq.n	80084d4 <USBD_LL_DataOutStage+0x94>
 80084cc:	e018      	b.n	8008500 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80084ce:	2300      	movs	r3, #0
 80084d0:	75bb      	strb	r3, [r7, #22]
            break;
 80084d2:	e018      	b.n	8008506 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	4619      	mov	r1, r3
 80084de:	68f8      	ldr	r0, [r7, #12]
 80084e0:	f000 fa6e 	bl	80089c0 <USBD_CoreFindIF>
 80084e4:	4603      	mov	r3, r0
 80084e6:	75bb      	strb	r3, [r7, #22]
            break;
 80084e8:	e00d      	b.n	8008506 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80084f0:	b2db      	uxtb	r3, r3
 80084f2:	4619      	mov	r1, r3
 80084f4:	68f8      	ldr	r0, [r7, #12]
 80084f6:	f000 fa70 	bl	80089da <USBD_CoreFindEP>
 80084fa:	4603      	mov	r3, r0
 80084fc:	75bb      	strb	r3, [r7, #22]
            break;
 80084fe:	e002      	b.n	8008506 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008500:	2300      	movs	r3, #0
 8008502:	75bb      	strb	r3, [r7, #22]
            break;
 8008504:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008506:	7dbb      	ldrb	r3, [r7, #22]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d119      	bne.n	8008540 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008512:	b2db      	uxtb	r3, r3
 8008514:	2b03      	cmp	r3, #3
 8008516:	d113      	bne.n	8008540 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008518:	7dba      	ldrb	r2, [r7, #22]
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	32ae      	adds	r2, #174	@ 0xae
 800851e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008522:	691b      	ldr	r3, [r3, #16]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d00b      	beq.n	8008540 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8008528:	7dba      	ldrb	r2, [r7, #22]
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008530:	7dba      	ldrb	r2, [r7, #22]
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	32ae      	adds	r2, #174	@ 0xae
 8008536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800853a:	691b      	ldr	r3, [r3, #16]
 800853c:	68f8      	ldr	r0, [r7, #12]
 800853e:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008540:	68f8      	ldr	r0, [r7, #12]
 8008542:	f001 f998 	bl	8009876 <USBD_CtlSendStatus>
 8008546:	e032      	b.n	80085ae <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008548:	7afb      	ldrb	r3, [r7, #11]
 800854a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800854e:	b2db      	uxtb	r3, r3
 8008550:	4619      	mov	r1, r3
 8008552:	68f8      	ldr	r0, [r7, #12]
 8008554:	f000 fa41 	bl	80089da <USBD_CoreFindEP>
 8008558:	4603      	mov	r3, r0
 800855a:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800855c:	7dbb      	ldrb	r3, [r7, #22]
 800855e:	2bff      	cmp	r3, #255	@ 0xff
 8008560:	d025      	beq.n	80085ae <USBD_LL_DataOutStage+0x16e>
 8008562:	7dbb      	ldrb	r3, [r7, #22]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d122      	bne.n	80085ae <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800856e:	b2db      	uxtb	r3, r3
 8008570:	2b03      	cmp	r3, #3
 8008572:	d117      	bne.n	80085a4 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008574:	7dba      	ldrb	r2, [r7, #22]
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	32ae      	adds	r2, #174	@ 0xae
 800857a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800857e:	699b      	ldr	r3, [r3, #24]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d00f      	beq.n	80085a4 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8008584:	7dba      	ldrb	r2, [r7, #22]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800858c:	7dba      	ldrb	r2, [r7, #22]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	32ae      	adds	r2, #174	@ 0xae
 8008592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008596:	699b      	ldr	r3, [r3, #24]
 8008598:	7afa      	ldrb	r2, [r7, #11]
 800859a:	4611      	mov	r1, r2
 800859c:	68f8      	ldr	r0, [r7, #12]
 800859e:	4798      	blx	r3
 80085a0:	4603      	mov	r3, r0
 80085a2:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80085a4:	7dfb      	ldrb	r3, [r7, #23]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d001      	beq.n	80085ae <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 80085aa:	7dfb      	ldrb	r3, [r7, #23]
 80085ac:	e000      	b.n	80085b0 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 80085ae:	2300      	movs	r3, #0
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3718      	adds	r7, #24
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}

080085b8 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b086      	sub	sp, #24
 80085bc:	af00      	add	r7, sp, #0
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	460b      	mov	r3, r1
 80085c2:	607a      	str	r2, [r7, #4]
 80085c4:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80085c6:	7afb      	ldrb	r3, [r7, #11]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d178      	bne.n	80086be <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	3314      	adds	r3, #20
 80085d0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80085d8:	2b02      	cmp	r3, #2
 80085da:	d163      	bne.n	80086a4 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	693a      	ldr	r2, [r7, #16]
 80085e2:	8992      	ldrh	r2, [r2, #12]
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d91c      	bls.n	8008622 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	693a      	ldr	r2, [r7, #16]
 80085ee:	8992      	ldrh	r2, [r2, #12]
 80085f0:	1a9a      	subs	r2, r3, r2
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	691b      	ldr	r3, [r3, #16]
 80085fa:	693a      	ldr	r2, [r7, #16]
 80085fc:	8992      	ldrh	r2, [r2, #12]
 80085fe:	441a      	add	r2, r3
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	6919      	ldr	r1, [r3, #16]
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	461a      	mov	r2, r3
 800860e:	68f8      	ldr	r0, [r7, #12]
 8008610:	f001 f8ee 	bl	80097f0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008614:	2300      	movs	r3, #0
 8008616:	2200      	movs	r2, #0
 8008618:	2100      	movs	r1, #0
 800861a:	68f8      	ldr	r0, [r7, #12]
 800861c:	f005 f9f8 	bl	800da10 <USBD_LL_PrepareReceive>
 8008620:	e040      	b.n	80086a4 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	899b      	ldrh	r3, [r3, #12]
 8008626:	461a      	mov	r2, r3
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	429a      	cmp	r2, r3
 800862e:	d11c      	bne.n	800866a <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	693a      	ldr	r2, [r7, #16]
 8008636:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008638:	4293      	cmp	r3, r2
 800863a:	d316      	bcc.n	800866a <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	681a      	ldr	r2, [r3, #0]
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008646:	429a      	cmp	r2, r3
 8008648:	d20f      	bcs.n	800866a <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800864a:	2200      	movs	r2, #0
 800864c:	2100      	movs	r1, #0
 800864e:	68f8      	ldr	r0, [r7, #12]
 8008650:	f001 f8ce 	bl	80097f0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2200      	movs	r2, #0
 8008658:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800865c:	2300      	movs	r3, #0
 800865e:	2200      	movs	r2, #0
 8008660:	2100      	movs	r1, #0
 8008662:	68f8      	ldr	r0, [r7, #12]
 8008664:	f005 f9d4 	bl	800da10 <USBD_LL_PrepareReceive>
 8008668:	e01c      	b.n	80086a4 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008670:	b2db      	uxtb	r3, r3
 8008672:	2b03      	cmp	r3, #3
 8008674:	d10f      	bne.n	8008696 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800867c:	68db      	ldr	r3, [r3, #12]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d009      	beq.n	8008696 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2200      	movs	r2, #0
 8008686:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008690:	68db      	ldr	r3, [r3, #12]
 8008692:	68f8      	ldr	r0, [r7, #12]
 8008694:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008696:	2180      	movs	r1, #128	@ 0x80
 8008698:	68f8      	ldr	r0, [r7, #12]
 800869a:	f005 f90f 	bl	800d8bc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800869e:	68f8      	ldr	r0, [r7, #12]
 80086a0:	f001 f8fc 	bl	800989c <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d03a      	beq.n	8008724 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 80086ae:	68f8      	ldr	r0, [r7, #12]
 80086b0:	f7ff fe30 	bl	8008314 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2200      	movs	r2, #0
 80086b8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80086bc:	e032      	b.n	8008724 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80086be:	7afb      	ldrb	r3, [r7, #11]
 80086c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80086c4:	b2db      	uxtb	r3, r3
 80086c6:	4619      	mov	r1, r3
 80086c8:	68f8      	ldr	r0, [r7, #12]
 80086ca:	f000 f986 	bl	80089da <USBD_CoreFindEP>
 80086ce:	4603      	mov	r3, r0
 80086d0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80086d2:	7dfb      	ldrb	r3, [r7, #23]
 80086d4:	2bff      	cmp	r3, #255	@ 0xff
 80086d6:	d025      	beq.n	8008724 <USBD_LL_DataInStage+0x16c>
 80086d8:	7dfb      	ldrb	r3, [r7, #23]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d122      	bne.n	8008724 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	2b03      	cmp	r3, #3
 80086e8:	d11c      	bne.n	8008724 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80086ea:	7dfa      	ldrb	r2, [r7, #23]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	32ae      	adds	r2, #174	@ 0xae
 80086f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086f4:	695b      	ldr	r3, [r3, #20]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d014      	beq.n	8008724 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 80086fa:	7dfa      	ldrb	r2, [r7, #23]
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008702:	7dfa      	ldrb	r2, [r7, #23]
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	32ae      	adds	r2, #174	@ 0xae
 8008708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800870c:	695b      	ldr	r3, [r3, #20]
 800870e:	7afa      	ldrb	r2, [r7, #11]
 8008710:	4611      	mov	r1, r2
 8008712:	68f8      	ldr	r0, [r7, #12]
 8008714:	4798      	blx	r3
 8008716:	4603      	mov	r3, r0
 8008718:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800871a:	7dbb      	ldrb	r3, [r7, #22]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d001      	beq.n	8008724 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8008720:	7dbb      	ldrb	r3, [r7, #22]
 8008722:	e000      	b.n	8008726 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8008724:	2300      	movs	r3, #0
}
 8008726:	4618      	mov	r0, r3
 8008728:	3718      	adds	r7, #24
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}

0800872e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800872e:	b580      	push	{r7, lr}
 8008730:	b084      	sub	sp, #16
 8008732:	af00      	add	r7, sp, #0
 8008734:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008736:	2300      	movs	r3, #0
 8008738:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2201      	movs	r2, #1
 800873e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2200      	movs	r2, #0
 8008746:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2200      	movs	r2, #0
 800874e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2200      	movs	r2, #0
 8008754:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2200      	movs	r2, #0
 800875c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008766:	2b00      	cmp	r3, #0
 8008768:	d014      	beq.n	8008794 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d00e      	beq.n	8008794 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	6852      	ldr	r2, [r2, #4]
 8008782:	b2d2      	uxtb	r2, r2
 8008784:	4611      	mov	r1, r2
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	4798      	blx	r3
 800878a:	4603      	mov	r3, r0
 800878c:	2b00      	cmp	r3, #0
 800878e:	d001      	beq.n	8008794 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008790:	2303      	movs	r3, #3
 8008792:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008794:	2340      	movs	r3, #64	@ 0x40
 8008796:	2200      	movs	r2, #0
 8008798:	2100      	movs	r1, #0
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f005 f849 	bl	800d832 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2201      	movs	r2, #1
 80087a4:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2240      	movs	r2, #64	@ 0x40
 80087ac:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80087b0:	2340      	movs	r3, #64	@ 0x40
 80087b2:	2200      	movs	r2, #0
 80087b4:	2180      	movs	r1, #128	@ 0x80
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f005 f83b 	bl	800d832 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2201      	movs	r2, #1
 80087c0:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2240      	movs	r2, #64	@ 0x40
 80087c8:	841a      	strh	r2, [r3, #32]

  return ret;
 80087ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3710      	adds	r7, #16
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	460b      	mov	r3, r1
 80087de:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	78fa      	ldrb	r2, [r7, #3]
 80087e4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80087e6:	2300      	movs	r3, #0
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	370c      	adds	r7, #12
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b083      	sub	sp, #12
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008802:	b2db      	uxtb	r3, r3
 8008804:	2b04      	cmp	r3, #4
 8008806:	d006      	beq.n	8008816 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800880e:	b2da      	uxtb	r2, r3
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2204      	movs	r2, #4
 800881a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800881e:	2300      	movs	r3, #0
}
 8008820:	4618      	mov	r0, r3
 8008822:	370c      	adds	r7, #12
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr

0800882c <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800882c:	b480      	push	{r7}
 800882e:	b083      	sub	sp, #12
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800883a:	b2db      	uxtb	r3, r3
 800883c:	2b04      	cmp	r3, #4
 800883e:	d106      	bne.n	800884e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008846:	b2da      	uxtb	r2, r3
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800884e:	2300      	movs	r3, #0
}
 8008850:	4618      	mov	r0, r3
 8008852:	370c      	adds	r7, #12
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr

0800885c <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b082      	sub	sp, #8
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800886a:	b2db      	uxtb	r3, r3
 800886c:	2b03      	cmp	r3, #3
 800886e:	d110      	bne.n	8008892 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008876:	2b00      	cmp	r3, #0
 8008878:	d00b      	beq.n	8008892 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008880:	69db      	ldr	r3, [r3, #28]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d005      	beq.n	8008892 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800888c:	69db      	ldr	r3, [r3, #28]
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008892:	2300      	movs	r3, #0
}
 8008894:	4618      	mov	r0, r3
 8008896:	3708      	adds	r7, #8
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}

0800889c <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b082      	sub	sp, #8
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	460b      	mov	r3, r1
 80088a6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	32ae      	adds	r2, #174	@ 0xae
 80088b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d101      	bne.n	80088be <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80088ba:	2303      	movs	r3, #3
 80088bc:	e01c      	b.n	80088f8 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088c4:	b2db      	uxtb	r3, r3
 80088c6:	2b03      	cmp	r3, #3
 80088c8:	d115      	bne.n	80088f6 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	32ae      	adds	r2, #174	@ 0xae
 80088d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088d8:	6a1b      	ldr	r3, [r3, #32]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d00b      	beq.n	80088f6 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	32ae      	adds	r2, #174	@ 0xae
 80088e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088ec:	6a1b      	ldr	r3, [r3, #32]
 80088ee:	78fa      	ldrb	r2, [r7, #3]
 80088f0:	4611      	mov	r1, r2
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80088f6:	2300      	movs	r3, #0
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3708      	adds	r7, #8
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b082      	sub	sp, #8
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	460b      	mov	r3, r1
 800890a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	32ae      	adds	r2, #174	@ 0xae
 8008916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d101      	bne.n	8008922 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800891e:	2303      	movs	r3, #3
 8008920:	e01c      	b.n	800895c <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008928:	b2db      	uxtb	r3, r3
 800892a:	2b03      	cmp	r3, #3
 800892c:	d115      	bne.n	800895a <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	32ae      	adds	r2, #174	@ 0xae
 8008938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800893c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800893e:	2b00      	cmp	r3, #0
 8008940:	d00b      	beq.n	800895a <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	32ae      	adds	r2, #174	@ 0xae
 800894c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008952:	78fa      	ldrb	r2, [r7, #3]
 8008954:	4611      	mov	r1, r2
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800895a:	2300      	movs	r3, #0
}
 800895c:	4618      	mov	r0, r3
 800895e:	3708      	adds	r7, #8
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008964:	b480      	push	{r7}
 8008966:	b083      	sub	sp, #12
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800896c:	2300      	movs	r3, #0
}
 800896e:	4618      	mov	r0, r3
 8008970:	370c      	adds	r7, #12
 8008972:	46bd      	mov	sp, r7
 8008974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008978:	4770      	bx	lr

0800897a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800897a:	b580      	push	{r7, lr}
 800897c:	b084      	sub	sp, #16
 800897e:	af00      	add	r7, sp, #0
 8008980:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008982:	2300      	movs	r3, #0
 8008984:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2201      	movs	r2, #1
 800898a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008994:	2b00      	cmp	r3, #0
 8008996:	d00e      	beq.n	80089b6 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	6852      	ldr	r2, [r2, #4]
 80089a4:	b2d2      	uxtb	r2, r2
 80089a6:	4611      	mov	r1, r2
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	4798      	blx	r3
 80089ac:	4603      	mov	r3, r0
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d001      	beq.n	80089b6 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80089b2:	2303      	movs	r3, #3
 80089b4:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80089b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3710      	adds	r7, #16
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}

080089c0 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b083      	sub	sp, #12
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	460b      	mov	r3, r1
 80089ca:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80089cc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	370c      	adds	r7, #12
 80089d2:	46bd      	mov	sp, r7
 80089d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d8:	4770      	bx	lr

080089da <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80089da:	b480      	push	{r7}
 80089dc:	b083      	sub	sp, #12
 80089de:	af00      	add	r7, sp, #0
 80089e0:	6078      	str	r0, [r7, #4]
 80089e2:	460b      	mov	r3, r1
 80089e4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80089e6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	370c      	adds	r7, #12
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr

080089f4 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b086      	sub	sp, #24
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	460b      	mov	r3, r1
 80089fe:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	885b      	ldrh	r3, [r3, #2]
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	68fa      	ldr	r2, [r7, #12]
 8008a14:	7812      	ldrb	r2, [r2, #0]
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d91f      	bls.n	8008a5a <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	781b      	ldrb	r3, [r3, #0]
 8008a1e:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008a20:	e013      	b.n	8008a4a <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008a22:	f107 030a 	add.w	r3, r7, #10
 8008a26:	4619      	mov	r1, r3
 8008a28:	6978      	ldr	r0, [r7, #20]
 8008a2a:	f000 f81b 	bl	8008a64 <USBD_GetNextDesc>
 8008a2e:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	785b      	ldrb	r3, [r3, #1]
 8008a34:	2b05      	cmp	r3, #5
 8008a36:	d108      	bne.n	8008a4a <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	789b      	ldrb	r3, [r3, #2]
 8008a40:	78fa      	ldrb	r2, [r7, #3]
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d008      	beq.n	8008a58 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008a46:	2300      	movs	r3, #0
 8008a48:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	885b      	ldrh	r3, [r3, #2]
 8008a4e:	b29a      	uxth	r2, r3
 8008a50:	897b      	ldrh	r3, [r7, #10]
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d8e5      	bhi.n	8008a22 <USBD_GetEpDesc+0x2e>
 8008a56:	e000      	b.n	8008a5a <USBD_GetEpDesc+0x66>
          break;
 8008a58:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008a5a:	693b      	ldr	r3, [r7, #16]
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3718      	adds	r7, #24
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b085      	sub	sp, #20
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	881b      	ldrh	r3, [r3, #0]
 8008a76:	68fa      	ldr	r2, [r7, #12]
 8008a78:	7812      	ldrb	r2, [r2, #0]
 8008a7a:	4413      	add	r3, r2
 8008a7c:	b29a      	uxth	r2, r3
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	781b      	ldrb	r3, [r3, #0]
 8008a86:	461a      	mov	r2, r3
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	4413      	add	r3, r2
 8008a8c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3714      	adds	r7, #20
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	4770      	bx	lr

08008a9c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b087      	sub	sp, #28
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	3301      	adds	r3, #1
 8008ab2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008aba:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008abe:	021b      	lsls	r3, r3, #8
 8008ac0:	b21a      	sxth	r2, r3
 8008ac2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	b21b      	sxth	r3, r3
 8008aca:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008acc:	89fb      	ldrh	r3, [r7, #14]
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	371c      	adds	r7, #28
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad8:	4770      	bx	lr
	...

08008adc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008af2:	2b40      	cmp	r3, #64	@ 0x40
 8008af4:	d005      	beq.n	8008b02 <USBD_StdDevReq+0x26>
 8008af6:	2b40      	cmp	r3, #64	@ 0x40
 8008af8:	d857      	bhi.n	8008baa <USBD_StdDevReq+0xce>
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d00f      	beq.n	8008b1e <USBD_StdDevReq+0x42>
 8008afe:	2b20      	cmp	r3, #32
 8008b00:	d153      	bne.n	8008baa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	32ae      	adds	r2, #174	@ 0xae
 8008b0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b10:	689b      	ldr	r3, [r3, #8]
 8008b12:	6839      	ldr	r1, [r7, #0]
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	4798      	blx	r3
 8008b18:	4603      	mov	r3, r0
 8008b1a:	73fb      	strb	r3, [r7, #15]
      break;
 8008b1c:	e04a      	b.n	8008bb4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	785b      	ldrb	r3, [r3, #1]
 8008b22:	2b09      	cmp	r3, #9
 8008b24:	d83b      	bhi.n	8008b9e <USBD_StdDevReq+0xc2>
 8008b26:	a201      	add	r2, pc, #4	@ (adr r2, 8008b2c <USBD_StdDevReq+0x50>)
 8008b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b2c:	08008b81 	.word	0x08008b81
 8008b30:	08008b95 	.word	0x08008b95
 8008b34:	08008b9f 	.word	0x08008b9f
 8008b38:	08008b8b 	.word	0x08008b8b
 8008b3c:	08008b9f 	.word	0x08008b9f
 8008b40:	08008b5f 	.word	0x08008b5f
 8008b44:	08008b55 	.word	0x08008b55
 8008b48:	08008b9f 	.word	0x08008b9f
 8008b4c:	08008b77 	.word	0x08008b77
 8008b50:	08008b69 	.word	0x08008b69
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008b54:	6839      	ldr	r1, [r7, #0]
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f000 fa3e 	bl	8008fd8 <USBD_GetDescriptor>
          break;
 8008b5c:	e024      	b.n	8008ba8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008b5e:	6839      	ldr	r1, [r7, #0]
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 fbcd 	bl	8009300 <USBD_SetAddress>
          break;
 8008b66:	e01f      	b.n	8008ba8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008b68:	6839      	ldr	r1, [r7, #0]
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f000 fc0c 	bl	8009388 <USBD_SetConfig>
 8008b70:	4603      	mov	r3, r0
 8008b72:	73fb      	strb	r3, [r7, #15]
          break;
 8008b74:	e018      	b.n	8008ba8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008b76:	6839      	ldr	r1, [r7, #0]
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f000 fcaf 	bl	80094dc <USBD_GetConfig>
          break;
 8008b7e:	e013      	b.n	8008ba8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008b80:	6839      	ldr	r1, [r7, #0]
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 fce0 	bl	8009548 <USBD_GetStatus>
          break;
 8008b88:	e00e      	b.n	8008ba8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008b8a:	6839      	ldr	r1, [r7, #0]
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f000 fd0f 	bl	80095b0 <USBD_SetFeature>
          break;
 8008b92:	e009      	b.n	8008ba8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008b94:	6839      	ldr	r1, [r7, #0]
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 fd33 	bl	8009602 <USBD_ClrFeature>
          break;
 8008b9c:	e004      	b.n	8008ba8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008b9e:	6839      	ldr	r1, [r7, #0]
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f000 fd8a 	bl	80096ba <USBD_CtlError>
          break;
 8008ba6:	bf00      	nop
      }
      break;
 8008ba8:	e004      	b.n	8008bb4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008baa:	6839      	ldr	r1, [r7, #0]
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f000 fd84 	bl	80096ba <USBD_CtlError>
      break;
 8008bb2:	bf00      	nop
  }

  return ret;
 8008bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3710      	adds	r7, #16
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
 8008bbe:	bf00      	nop

08008bc0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b084      	sub	sp, #16
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	781b      	ldrb	r3, [r3, #0]
 8008bd2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008bd6:	2b40      	cmp	r3, #64	@ 0x40
 8008bd8:	d005      	beq.n	8008be6 <USBD_StdItfReq+0x26>
 8008bda:	2b40      	cmp	r3, #64	@ 0x40
 8008bdc:	d852      	bhi.n	8008c84 <USBD_StdItfReq+0xc4>
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d001      	beq.n	8008be6 <USBD_StdItfReq+0x26>
 8008be2:	2b20      	cmp	r3, #32
 8008be4:	d14e      	bne.n	8008c84 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	3b01      	subs	r3, #1
 8008bf0:	2b02      	cmp	r3, #2
 8008bf2:	d840      	bhi.n	8008c76 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	889b      	ldrh	r3, [r3, #4]
 8008bf8:	b2db      	uxtb	r3, r3
 8008bfa:	2b01      	cmp	r3, #1
 8008bfc:	d836      	bhi.n	8008c6c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	889b      	ldrh	r3, [r3, #4]
 8008c02:	b2db      	uxtb	r3, r3
 8008c04:	4619      	mov	r1, r3
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f7ff feda 	bl	80089c0 <USBD_CoreFindIF>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008c10:	7bbb      	ldrb	r3, [r7, #14]
 8008c12:	2bff      	cmp	r3, #255	@ 0xff
 8008c14:	d01d      	beq.n	8008c52 <USBD_StdItfReq+0x92>
 8008c16:	7bbb      	ldrb	r3, [r7, #14]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d11a      	bne.n	8008c52 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008c1c:	7bba      	ldrb	r2, [r7, #14]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	32ae      	adds	r2, #174	@ 0xae
 8008c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c26:	689b      	ldr	r3, [r3, #8]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d00f      	beq.n	8008c4c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008c2c:	7bba      	ldrb	r2, [r7, #14]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008c34:	7bba      	ldrb	r2, [r7, #14]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	32ae      	adds	r2, #174	@ 0xae
 8008c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c3e:	689b      	ldr	r3, [r3, #8]
 8008c40:	6839      	ldr	r1, [r7, #0]
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	4798      	blx	r3
 8008c46:	4603      	mov	r3, r0
 8008c48:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008c4a:	e004      	b.n	8008c56 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008c4c:	2303      	movs	r3, #3
 8008c4e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008c50:	e001      	b.n	8008c56 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008c52:	2303      	movs	r3, #3
 8008c54:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	88db      	ldrh	r3, [r3, #6]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d110      	bne.n	8008c80 <USBD_StdItfReq+0xc0>
 8008c5e:	7bfb      	ldrb	r3, [r7, #15]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d10d      	bne.n	8008c80 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f000 fe06 	bl	8009876 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008c6a:	e009      	b.n	8008c80 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008c6c:	6839      	ldr	r1, [r7, #0]
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 fd23 	bl	80096ba <USBD_CtlError>
          break;
 8008c74:	e004      	b.n	8008c80 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008c76:	6839      	ldr	r1, [r7, #0]
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f000 fd1e 	bl	80096ba <USBD_CtlError>
          break;
 8008c7e:	e000      	b.n	8008c82 <USBD_StdItfReq+0xc2>
          break;
 8008c80:	bf00      	nop
      }
      break;
 8008c82:	e004      	b.n	8008c8e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008c84:	6839      	ldr	r1, [r7, #0]
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 fd17 	bl	80096ba <USBD_CtlError>
      break;
 8008c8c:	bf00      	nop
  }

  return ret;
 8008c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3710      	adds	r7, #16
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b084      	sub	sp, #16
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	889b      	ldrh	r3, [r3, #4]
 8008caa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	781b      	ldrb	r3, [r3, #0]
 8008cb0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008cb4:	2b40      	cmp	r3, #64	@ 0x40
 8008cb6:	d007      	beq.n	8008cc8 <USBD_StdEPReq+0x30>
 8008cb8:	2b40      	cmp	r3, #64	@ 0x40
 8008cba:	f200 8181 	bhi.w	8008fc0 <USBD_StdEPReq+0x328>
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d02a      	beq.n	8008d18 <USBD_StdEPReq+0x80>
 8008cc2:	2b20      	cmp	r3, #32
 8008cc4:	f040 817c 	bne.w	8008fc0 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008cc8:	7bbb      	ldrb	r3, [r7, #14]
 8008cca:	4619      	mov	r1, r3
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f7ff fe84 	bl	80089da <USBD_CoreFindEP>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008cd6:	7b7b      	ldrb	r3, [r7, #13]
 8008cd8:	2bff      	cmp	r3, #255	@ 0xff
 8008cda:	f000 8176 	beq.w	8008fca <USBD_StdEPReq+0x332>
 8008cde:	7b7b      	ldrb	r3, [r7, #13]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	f040 8172 	bne.w	8008fca <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8008ce6:	7b7a      	ldrb	r2, [r7, #13]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008cee:	7b7a      	ldrb	r2, [r7, #13]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	32ae      	adds	r2, #174	@ 0xae
 8008cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cf8:	689b      	ldr	r3, [r3, #8]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	f000 8165 	beq.w	8008fca <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008d00:	7b7a      	ldrb	r2, [r7, #13]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	32ae      	adds	r2, #174	@ 0xae
 8008d06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	6839      	ldr	r1, [r7, #0]
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	4798      	blx	r3
 8008d12:	4603      	mov	r3, r0
 8008d14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008d16:	e158      	b.n	8008fca <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	785b      	ldrb	r3, [r3, #1]
 8008d1c:	2b03      	cmp	r3, #3
 8008d1e:	d008      	beq.n	8008d32 <USBD_StdEPReq+0x9a>
 8008d20:	2b03      	cmp	r3, #3
 8008d22:	f300 8147 	bgt.w	8008fb4 <USBD_StdEPReq+0x31c>
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	f000 809b 	beq.w	8008e62 <USBD_StdEPReq+0x1ca>
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d03c      	beq.n	8008daa <USBD_StdEPReq+0x112>
 8008d30:	e140      	b.n	8008fb4 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d38:	b2db      	uxtb	r3, r3
 8008d3a:	2b02      	cmp	r3, #2
 8008d3c:	d002      	beq.n	8008d44 <USBD_StdEPReq+0xac>
 8008d3e:	2b03      	cmp	r3, #3
 8008d40:	d016      	beq.n	8008d70 <USBD_StdEPReq+0xd8>
 8008d42:	e02c      	b.n	8008d9e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d44:	7bbb      	ldrb	r3, [r7, #14]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d00d      	beq.n	8008d66 <USBD_StdEPReq+0xce>
 8008d4a:	7bbb      	ldrb	r3, [r7, #14]
 8008d4c:	2b80      	cmp	r3, #128	@ 0x80
 8008d4e:	d00a      	beq.n	8008d66 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008d50:	7bbb      	ldrb	r3, [r7, #14]
 8008d52:	4619      	mov	r1, r3
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f004 fdb1 	bl	800d8bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d5a:	2180      	movs	r1, #128	@ 0x80
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f004 fdad 	bl	800d8bc <USBD_LL_StallEP>
 8008d62:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008d64:	e020      	b.n	8008da8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008d66:	6839      	ldr	r1, [r7, #0]
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f000 fca6 	bl	80096ba <USBD_CtlError>
              break;
 8008d6e:	e01b      	b.n	8008da8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	885b      	ldrh	r3, [r3, #2]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d10e      	bne.n	8008d96 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008d78:	7bbb      	ldrb	r3, [r7, #14]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d00b      	beq.n	8008d96 <USBD_StdEPReq+0xfe>
 8008d7e:	7bbb      	ldrb	r3, [r7, #14]
 8008d80:	2b80      	cmp	r3, #128	@ 0x80
 8008d82:	d008      	beq.n	8008d96 <USBD_StdEPReq+0xfe>
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	88db      	ldrh	r3, [r3, #6]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d104      	bne.n	8008d96 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008d8c:	7bbb      	ldrb	r3, [r7, #14]
 8008d8e:	4619      	mov	r1, r3
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f004 fd93 	bl	800d8bc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 fd6d 	bl	8009876 <USBD_CtlSendStatus>

              break;
 8008d9c:	e004      	b.n	8008da8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008d9e:	6839      	ldr	r1, [r7, #0]
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 fc8a 	bl	80096ba <USBD_CtlError>
              break;
 8008da6:	bf00      	nop
          }
          break;
 8008da8:	e109      	b.n	8008fbe <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	2b02      	cmp	r3, #2
 8008db4:	d002      	beq.n	8008dbc <USBD_StdEPReq+0x124>
 8008db6:	2b03      	cmp	r3, #3
 8008db8:	d016      	beq.n	8008de8 <USBD_StdEPReq+0x150>
 8008dba:	e04b      	b.n	8008e54 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008dbc:	7bbb      	ldrb	r3, [r7, #14]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d00d      	beq.n	8008dde <USBD_StdEPReq+0x146>
 8008dc2:	7bbb      	ldrb	r3, [r7, #14]
 8008dc4:	2b80      	cmp	r3, #128	@ 0x80
 8008dc6:	d00a      	beq.n	8008dde <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008dc8:	7bbb      	ldrb	r3, [r7, #14]
 8008dca:	4619      	mov	r1, r3
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f004 fd75 	bl	800d8bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008dd2:	2180      	movs	r1, #128	@ 0x80
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f004 fd71 	bl	800d8bc <USBD_LL_StallEP>
 8008dda:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008ddc:	e040      	b.n	8008e60 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008dde:	6839      	ldr	r1, [r7, #0]
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f000 fc6a 	bl	80096ba <USBD_CtlError>
              break;
 8008de6:	e03b      	b.n	8008e60 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	885b      	ldrh	r3, [r3, #2]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d136      	bne.n	8008e5e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008df0:	7bbb      	ldrb	r3, [r7, #14]
 8008df2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d004      	beq.n	8008e04 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008dfa:	7bbb      	ldrb	r3, [r7, #14]
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f004 fd7b 	bl	800d8fa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f000 fd36 	bl	8009876 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008e0a:	7bbb      	ldrb	r3, [r7, #14]
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f7ff fde3 	bl	80089da <USBD_CoreFindEP>
 8008e14:	4603      	mov	r3, r0
 8008e16:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008e18:	7b7b      	ldrb	r3, [r7, #13]
 8008e1a:	2bff      	cmp	r3, #255	@ 0xff
 8008e1c:	d01f      	beq.n	8008e5e <USBD_StdEPReq+0x1c6>
 8008e1e:	7b7b      	ldrb	r3, [r7, #13]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d11c      	bne.n	8008e5e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008e24:	7b7a      	ldrb	r2, [r7, #13]
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008e2c:	7b7a      	ldrb	r2, [r7, #13]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	32ae      	adds	r2, #174	@ 0xae
 8008e32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e36:	689b      	ldr	r3, [r3, #8]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d010      	beq.n	8008e5e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008e3c:	7b7a      	ldrb	r2, [r7, #13]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	32ae      	adds	r2, #174	@ 0xae
 8008e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e46:	689b      	ldr	r3, [r3, #8]
 8008e48:	6839      	ldr	r1, [r7, #0]
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	4798      	blx	r3
 8008e4e:	4603      	mov	r3, r0
 8008e50:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008e52:	e004      	b.n	8008e5e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008e54:	6839      	ldr	r1, [r7, #0]
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f000 fc2f 	bl	80096ba <USBD_CtlError>
              break;
 8008e5c:	e000      	b.n	8008e60 <USBD_StdEPReq+0x1c8>
              break;
 8008e5e:	bf00      	nop
          }
          break;
 8008e60:	e0ad      	b.n	8008fbe <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e68:	b2db      	uxtb	r3, r3
 8008e6a:	2b02      	cmp	r3, #2
 8008e6c:	d002      	beq.n	8008e74 <USBD_StdEPReq+0x1dc>
 8008e6e:	2b03      	cmp	r3, #3
 8008e70:	d033      	beq.n	8008eda <USBD_StdEPReq+0x242>
 8008e72:	e099      	b.n	8008fa8 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e74:	7bbb      	ldrb	r3, [r7, #14]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d007      	beq.n	8008e8a <USBD_StdEPReq+0x1f2>
 8008e7a:	7bbb      	ldrb	r3, [r7, #14]
 8008e7c:	2b80      	cmp	r3, #128	@ 0x80
 8008e7e:	d004      	beq.n	8008e8a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008e80:	6839      	ldr	r1, [r7, #0]
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f000 fc19 	bl	80096ba <USBD_CtlError>
                break;
 8008e88:	e093      	b.n	8008fb2 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	da0b      	bge.n	8008eaa <USBD_StdEPReq+0x212>
 8008e92:	7bbb      	ldrb	r3, [r7, #14]
 8008e94:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008e98:	4613      	mov	r3, r2
 8008e9a:	009b      	lsls	r3, r3, #2
 8008e9c:	4413      	add	r3, r2
 8008e9e:	009b      	lsls	r3, r3, #2
 8008ea0:	3310      	adds	r3, #16
 8008ea2:	687a      	ldr	r2, [r7, #4]
 8008ea4:	4413      	add	r3, r2
 8008ea6:	3304      	adds	r3, #4
 8008ea8:	e00b      	b.n	8008ec2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008eaa:	7bbb      	ldrb	r3, [r7, #14]
 8008eac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008eb0:	4613      	mov	r3, r2
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	4413      	add	r3, r2
 8008eb6:	009b      	lsls	r3, r3, #2
 8008eb8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	4413      	add	r3, r2
 8008ec0:	3304      	adds	r3, #4
 8008ec2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	330e      	adds	r3, #14
 8008ece:	2202      	movs	r2, #2
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f000 fc6e 	bl	80097b4 <USBD_CtlSendData>
              break;
 8008ed8:	e06b      	b.n	8008fb2 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008eda:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	da11      	bge.n	8008f06 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008ee2:	7bbb      	ldrb	r3, [r7, #14]
 8008ee4:	f003 020f 	and.w	r2, r3, #15
 8008ee8:	6879      	ldr	r1, [r7, #4]
 8008eea:	4613      	mov	r3, r2
 8008eec:	009b      	lsls	r3, r3, #2
 8008eee:	4413      	add	r3, r2
 8008ef0:	009b      	lsls	r3, r3, #2
 8008ef2:	440b      	add	r3, r1
 8008ef4:	3323      	adds	r3, #35	@ 0x23
 8008ef6:	781b      	ldrb	r3, [r3, #0]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d117      	bne.n	8008f2c <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8008efc:	6839      	ldr	r1, [r7, #0]
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f000 fbdb 	bl	80096ba <USBD_CtlError>
                  break;
 8008f04:	e055      	b.n	8008fb2 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008f06:	7bbb      	ldrb	r3, [r7, #14]
 8008f08:	f003 020f 	and.w	r2, r3, #15
 8008f0c:	6879      	ldr	r1, [r7, #4]
 8008f0e:	4613      	mov	r3, r2
 8008f10:	009b      	lsls	r3, r3, #2
 8008f12:	4413      	add	r3, r2
 8008f14:	009b      	lsls	r3, r3, #2
 8008f16:	440b      	add	r3, r1
 8008f18:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8008f1c:	781b      	ldrb	r3, [r3, #0]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d104      	bne.n	8008f2c <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8008f22:	6839      	ldr	r1, [r7, #0]
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f000 fbc8 	bl	80096ba <USBD_CtlError>
                  break;
 8008f2a:	e042      	b.n	8008fb2 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	da0b      	bge.n	8008f4c <USBD_StdEPReq+0x2b4>
 8008f34:	7bbb      	ldrb	r3, [r7, #14]
 8008f36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008f3a:	4613      	mov	r3, r2
 8008f3c:	009b      	lsls	r3, r3, #2
 8008f3e:	4413      	add	r3, r2
 8008f40:	009b      	lsls	r3, r3, #2
 8008f42:	3310      	adds	r3, #16
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	4413      	add	r3, r2
 8008f48:	3304      	adds	r3, #4
 8008f4a:	e00b      	b.n	8008f64 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008f4c:	7bbb      	ldrb	r3, [r7, #14]
 8008f4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f52:	4613      	mov	r3, r2
 8008f54:	009b      	lsls	r3, r3, #2
 8008f56:	4413      	add	r3, r2
 8008f58:	009b      	lsls	r3, r3, #2
 8008f5a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	4413      	add	r3, r2
 8008f62:	3304      	adds	r3, #4
 8008f64:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008f66:	7bbb      	ldrb	r3, [r7, #14]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d002      	beq.n	8008f72 <USBD_StdEPReq+0x2da>
 8008f6c:	7bbb      	ldrb	r3, [r7, #14]
 8008f6e:	2b80      	cmp	r3, #128	@ 0x80
 8008f70:	d103      	bne.n	8008f7a <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	2200      	movs	r2, #0
 8008f76:	739a      	strb	r2, [r3, #14]
 8008f78:	e00e      	b.n	8008f98 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008f7a:	7bbb      	ldrb	r3, [r7, #14]
 8008f7c:	4619      	mov	r1, r3
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f004 fcda 	bl	800d938 <USBD_LL_IsStallEP>
 8008f84:	4603      	mov	r3, r0
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d003      	beq.n	8008f92 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	2201      	movs	r2, #1
 8008f8e:	739a      	strb	r2, [r3, #14]
 8008f90:	e002      	b.n	8008f98 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	2200      	movs	r2, #0
 8008f96:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	330e      	adds	r3, #14
 8008f9c:	2202      	movs	r2, #2
 8008f9e:	4619      	mov	r1, r3
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 fc07 	bl	80097b4 <USBD_CtlSendData>
              break;
 8008fa6:	e004      	b.n	8008fb2 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8008fa8:	6839      	ldr	r1, [r7, #0]
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 fb85 	bl	80096ba <USBD_CtlError>
              break;
 8008fb0:	bf00      	nop
          }
          break;
 8008fb2:	e004      	b.n	8008fbe <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8008fb4:	6839      	ldr	r1, [r7, #0]
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 fb7f 	bl	80096ba <USBD_CtlError>
          break;
 8008fbc:	bf00      	nop
      }
      break;
 8008fbe:	e005      	b.n	8008fcc <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8008fc0:	6839      	ldr	r1, [r7, #0]
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f000 fb79 	bl	80096ba <USBD_CtlError>
      break;
 8008fc8:	e000      	b.n	8008fcc <USBD_StdEPReq+0x334>
      break;
 8008fca:	bf00      	nop
  }

  return ret;
 8008fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3710      	adds	r7, #16
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
	...

08008fd8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b084      	sub	sp, #16
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008fea:	2300      	movs	r3, #0
 8008fec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	885b      	ldrh	r3, [r3, #2]
 8008ff2:	0a1b      	lsrs	r3, r3, #8
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	3b01      	subs	r3, #1
 8008ff8:	2b0e      	cmp	r3, #14
 8008ffa:	f200 8152 	bhi.w	80092a2 <USBD_GetDescriptor+0x2ca>
 8008ffe:	a201      	add	r2, pc, #4	@ (adr r2, 8009004 <USBD_GetDescriptor+0x2c>)
 8009000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009004:	08009075 	.word	0x08009075
 8009008:	0800908d 	.word	0x0800908d
 800900c:	080090cd 	.word	0x080090cd
 8009010:	080092a3 	.word	0x080092a3
 8009014:	080092a3 	.word	0x080092a3
 8009018:	08009243 	.word	0x08009243
 800901c:	0800926f 	.word	0x0800926f
 8009020:	080092a3 	.word	0x080092a3
 8009024:	080092a3 	.word	0x080092a3
 8009028:	080092a3 	.word	0x080092a3
 800902c:	080092a3 	.word	0x080092a3
 8009030:	080092a3 	.word	0x080092a3
 8009034:	080092a3 	.word	0x080092a3
 8009038:	080092a3 	.word	0x080092a3
 800903c:	08009041 	.word	0x08009041
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009046:	69db      	ldr	r3, [r3, #28]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d00b      	beq.n	8009064 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009052:	69db      	ldr	r3, [r3, #28]
 8009054:	687a      	ldr	r2, [r7, #4]
 8009056:	7c12      	ldrb	r2, [r2, #16]
 8009058:	f107 0108 	add.w	r1, r7, #8
 800905c:	4610      	mov	r0, r2
 800905e:	4798      	blx	r3
 8009060:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009062:	e126      	b.n	80092b2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009064:	6839      	ldr	r1, [r7, #0]
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 fb27 	bl	80096ba <USBD_CtlError>
        err++;
 800906c:	7afb      	ldrb	r3, [r7, #11]
 800906e:	3301      	adds	r3, #1
 8009070:	72fb      	strb	r3, [r7, #11]
      break;
 8009072:	e11e      	b.n	80092b2 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	687a      	ldr	r2, [r7, #4]
 800907e:	7c12      	ldrb	r2, [r2, #16]
 8009080:	f107 0108 	add.w	r1, r7, #8
 8009084:	4610      	mov	r0, r2
 8009086:	4798      	blx	r3
 8009088:	60f8      	str	r0, [r7, #12]
      break;
 800908a:	e112      	b.n	80092b2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	7c1b      	ldrb	r3, [r3, #16]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d10d      	bne.n	80090b0 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800909a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800909c:	f107 0208 	add.w	r2, r7, #8
 80090a0:	4610      	mov	r0, r2
 80090a2:	4798      	blx	r3
 80090a4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	3301      	adds	r3, #1
 80090aa:	2202      	movs	r2, #2
 80090ac:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80090ae:	e100      	b.n	80092b2 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090b8:	f107 0208 	add.w	r2, r7, #8
 80090bc:	4610      	mov	r0, r2
 80090be:	4798      	blx	r3
 80090c0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	3301      	adds	r3, #1
 80090c6:	2202      	movs	r2, #2
 80090c8:	701a      	strb	r2, [r3, #0]
      break;
 80090ca:	e0f2      	b.n	80092b2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	885b      	ldrh	r3, [r3, #2]
 80090d0:	b2db      	uxtb	r3, r3
 80090d2:	2b05      	cmp	r3, #5
 80090d4:	f200 80ac 	bhi.w	8009230 <USBD_GetDescriptor+0x258>
 80090d8:	a201      	add	r2, pc, #4	@ (adr r2, 80090e0 <USBD_GetDescriptor+0x108>)
 80090da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090de:	bf00      	nop
 80090e0:	080090f9 	.word	0x080090f9
 80090e4:	0800912d 	.word	0x0800912d
 80090e8:	08009161 	.word	0x08009161
 80090ec:	08009195 	.word	0x08009195
 80090f0:	080091c9 	.word	0x080091c9
 80090f4:	080091fd 	.word	0x080091fd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d00b      	beq.n	800911c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800910a:	685b      	ldr	r3, [r3, #4]
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	7c12      	ldrb	r2, [r2, #16]
 8009110:	f107 0108 	add.w	r1, r7, #8
 8009114:	4610      	mov	r0, r2
 8009116:	4798      	blx	r3
 8009118:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800911a:	e091      	b.n	8009240 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800911c:	6839      	ldr	r1, [r7, #0]
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f000 facb 	bl	80096ba <USBD_CtlError>
            err++;
 8009124:	7afb      	ldrb	r3, [r7, #11]
 8009126:	3301      	adds	r3, #1
 8009128:	72fb      	strb	r3, [r7, #11]
          break;
 800912a:	e089      	b.n	8009240 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009132:	689b      	ldr	r3, [r3, #8]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d00b      	beq.n	8009150 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800913e:	689b      	ldr	r3, [r3, #8]
 8009140:	687a      	ldr	r2, [r7, #4]
 8009142:	7c12      	ldrb	r2, [r2, #16]
 8009144:	f107 0108 	add.w	r1, r7, #8
 8009148:	4610      	mov	r0, r2
 800914a:	4798      	blx	r3
 800914c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800914e:	e077      	b.n	8009240 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009150:	6839      	ldr	r1, [r7, #0]
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f000 fab1 	bl	80096ba <USBD_CtlError>
            err++;
 8009158:	7afb      	ldrb	r3, [r7, #11]
 800915a:	3301      	adds	r3, #1
 800915c:	72fb      	strb	r3, [r7, #11]
          break;
 800915e:	e06f      	b.n	8009240 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009166:	68db      	ldr	r3, [r3, #12]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d00b      	beq.n	8009184 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009172:	68db      	ldr	r3, [r3, #12]
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	7c12      	ldrb	r2, [r2, #16]
 8009178:	f107 0108 	add.w	r1, r7, #8
 800917c:	4610      	mov	r0, r2
 800917e:	4798      	blx	r3
 8009180:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009182:	e05d      	b.n	8009240 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009184:	6839      	ldr	r1, [r7, #0]
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 fa97 	bl	80096ba <USBD_CtlError>
            err++;
 800918c:	7afb      	ldrb	r3, [r7, #11]
 800918e:	3301      	adds	r3, #1
 8009190:	72fb      	strb	r3, [r7, #11]
          break;
 8009192:	e055      	b.n	8009240 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800919a:	691b      	ldr	r3, [r3, #16]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d00b      	beq.n	80091b8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091a6:	691b      	ldr	r3, [r3, #16]
 80091a8:	687a      	ldr	r2, [r7, #4]
 80091aa:	7c12      	ldrb	r2, [r2, #16]
 80091ac:	f107 0108 	add.w	r1, r7, #8
 80091b0:	4610      	mov	r0, r2
 80091b2:	4798      	blx	r3
 80091b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091b6:	e043      	b.n	8009240 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80091b8:	6839      	ldr	r1, [r7, #0]
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 fa7d 	bl	80096ba <USBD_CtlError>
            err++;
 80091c0:	7afb      	ldrb	r3, [r7, #11]
 80091c2:	3301      	adds	r3, #1
 80091c4:	72fb      	strb	r3, [r7, #11]
          break;
 80091c6:	e03b      	b.n	8009240 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091ce:	695b      	ldr	r3, [r3, #20]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d00b      	beq.n	80091ec <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091da:	695b      	ldr	r3, [r3, #20]
 80091dc:	687a      	ldr	r2, [r7, #4]
 80091de:	7c12      	ldrb	r2, [r2, #16]
 80091e0:	f107 0108 	add.w	r1, r7, #8
 80091e4:	4610      	mov	r0, r2
 80091e6:	4798      	blx	r3
 80091e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091ea:	e029      	b.n	8009240 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80091ec:	6839      	ldr	r1, [r7, #0]
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 fa63 	bl	80096ba <USBD_CtlError>
            err++;
 80091f4:	7afb      	ldrb	r3, [r7, #11]
 80091f6:	3301      	adds	r3, #1
 80091f8:	72fb      	strb	r3, [r7, #11]
          break;
 80091fa:	e021      	b.n	8009240 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009202:	699b      	ldr	r3, [r3, #24]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d00b      	beq.n	8009220 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800920e:	699b      	ldr	r3, [r3, #24]
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	7c12      	ldrb	r2, [r2, #16]
 8009214:	f107 0108 	add.w	r1, r7, #8
 8009218:	4610      	mov	r0, r2
 800921a:	4798      	blx	r3
 800921c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800921e:	e00f      	b.n	8009240 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009220:	6839      	ldr	r1, [r7, #0]
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f000 fa49 	bl	80096ba <USBD_CtlError>
            err++;
 8009228:	7afb      	ldrb	r3, [r7, #11]
 800922a:	3301      	adds	r3, #1
 800922c:	72fb      	strb	r3, [r7, #11]
          break;
 800922e:	e007      	b.n	8009240 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009230:	6839      	ldr	r1, [r7, #0]
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f000 fa41 	bl	80096ba <USBD_CtlError>
          err++;
 8009238:	7afb      	ldrb	r3, [r7, #11]
 800923a:	3301      	adds	r3, #1
 800923c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800923e:	bf00      	nop
      }
      break;
 8009240:	e037      	b.n	80092b2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	7c1b      	ldrb	r3, [r3, #16]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d109      	bne.n	800925e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009250:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009252:	f107 0208 	add.w	r2, r7, #8
 8009256:	4610      	mov	r0, r2
 8009258:	4798      	blx	r3
 800925a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800925c:	e029      	b.n	80092b2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800925e:	6839      	ldr	r1, [r7, #0]
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f000 fa2a 	bl	80096ba <USBD_CtlError>
        err++;
 8009266:	7afb      	ldrb	r3, [r7, #11]
 8009268:	3301      	adds	r3, #1
 800926a:	72fb      	strb	r3, [r7, #11]
      break;
 800926c:	e021      	b.n	80092b2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	7c1b      	ldrb	r3, [r3, #16]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d10d      	bne.n	8009292 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800927c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800927e:	f107 0208 	add.w	r2, r7, #8
 8009282:	4610      	mov	r0, r2
 8009284:	4798      	blx	r3
 8009286:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	3301      	adds	r3, #1
 800928c:	2207      	movs	r2, #7
 800928e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009290:	e00f      	b.n	80092b2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009292:	6839      	ldr	r1, [r7, #0]
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f000 fa10 	bl	80096ba <USBD_CtlError>
        err++;
 800929a:	7afb      	ldrb	r3, [r7, #11]
 800929c:	3301      	adds	r3, #1
 800929e:	72fb      	strb	r3, [r7, #11]
      break;
 80092a0:	e007      	b.n	80092b2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80092a2:	6839      	ldr	r1, [r7, #0]
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f000 fa08 	bl	80096ba <USBD_CtlError>
      err++;
 80092aa:	7afb      	ldrb	r3, [r7, #11]
 80092ac:	3301      	adds	r3, #1
 80092ae:	72fb      	strb	r3, [r7, #11]
      break;
 80092b0:	bf00      	nop
  }

  if (err != 0U)
 80092b2:	7afb      	ldrb	r3, [r7, #11]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d11e      	bne.n	80092f6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	88db      	ldrh	r3, [r3, #6]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d016      	beq.n	80092ee <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80092c0:	893b      	ldrh	r3, [r7, #8]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d00e      	beq.n	80092e4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	88da      	ldrh	r2, [r3, #6]
 80092ca:	893b      	ldrh	r3, [r7, #8]
 80092cc:	4293      	cmp	r3, r2
 80092ce:	bf28      	it	cs
 80092d0:	4613      	movcs	r3, r2
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80092d6:	893b      	ldrh	r3, [r7, #8]
 80092d8:	461a      	mov	r2, r3
 80092da:	68f9      	ldr	r1, [r7, #12]
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f000 fa69 	bl	80097b4 <USBD_CtlSendData>
 80092e2:	e009      	b.n	80092f8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80092e4:	6839      	ldr	r1, [r7, #0]
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 f9e7 	bl	80096ba <USBD_CtlError>
 80092ec:	e004      	b.n	80092f8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f000 fac1 	bl	8009876 <USBD_CtlSendStatus>
 80092f4:	e000      	b.n	80092f8 <USBD_GetDescriptor+0x320>
    return;
 80092f6:	bf00      	nop
  }
}
 80092f8:	3710      	adds	r7, #16
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}
 80092fe:	bf00      	nop

08009300 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b084      	sub	sp, #16
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
 8009308:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	889b      	ldrh	r3, [r3, #4]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d131      	bne.n	8009376 <USBD_SetAddress+0x76>
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	88db      	ldrh	r3, [r3, #6]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d12d      	bne.n	8009376 <USBD_SetAddress+0x76>
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	885b      	ldrh	r3, [r3, #2]
 800931e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009320:	d829      	bhi.n	8009376 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	885b      	ldrh	r3, [r3, #2]
 8009326:	b2db      	uxtb	r3, r3
 8009328:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800932c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009334:	b2db      	uxtb	r3, r3
 8009336:	2b03      	cmp	r3, #3
 8009338:	d104      	bne.n	8009344 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800933a:	6839      	ldr	r1, [r7, #0]
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f000 f9bc 	bl	80096ba <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009342:	e01d      	b.n	8009380 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	7bfa      	ldrb	r2, [r7, #15]
 8009348:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800934c:	7bfb      	ldrb	r3, [r7, #15]
 800934e:	4619      	mov	r1, r3
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f004 fb1d 	bl	800d990 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 fa8d 	bl	8009876 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800935c:	7bfb      	ldrb	r3, [r7, #15]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d004      	beq.n	800936c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2202      	movs	r2, #2
 8009366:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800936a:	e009      	b.n	8009380 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2201      	movs	r2, #1
 8009370:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009374:	e004      	b.n	8009380 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009376:	6839      	ldr	r1, [r7, #0]
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f000 f99e 	bl	80096ba <USBD_CtlError>
  }
}
 800937e:	bf00      	nop
 8009380:	bf00      	nop
 8009382:	3710      	adds	r7, #16
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}

08009388 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b084      	sub	sp, #16
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009392:	2300      	movs	r3, #0
 8009394:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	885b      	ldrh	r3, [r3, #2]
 800939a:	b2da      	uxtb	r2, r3
 800939c:	4b4e      	ldr	r3, [pc, #312]	@ (80094d8 <USBD_SetConfig+0x150>)
 800939e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80093a0:	4b4d      	ldr	r3, [pc, #308]	@ (80094d8 <USBD_SetConfig+0x150>)
 80093a2:	781b      	ldrb	r3, [r3, #0]
 80093a4:	2b01      	cmp	r3, #1
 80093a6:	d905      	bls.n	80093b4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80093a8:	6839      	ldr	r1, [r7, #0]
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f000 f985 	bl	80096ba <USBD_CtlError>
    return USBD_FAIL;
 80093b0:	2303      	movs	r3, #3
 80093b2:	e08c      	b.n	80094ce <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093ba:	b2db      	uxtb	r3, r3
 80093bc:	2b02      	cmp	r3, #2
 80093be:	d002      	beq.n	80093c6 <USBD_SetConfig+0x3e>
 80093c0:	2b03      	cmp	r3, #3
 80093c2:	d029      	beq.n	8009418 <USBD_SetConfig+0x90>
 80093c4:	e075      	b.n	80094b2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80093c6:	4b44      	ldr	r3, [pc, #272]	@ (80094d8 <USBD_SetConfig+0x150>)
 80093c8:	781b      	ldrb	r3, [r3, #0]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d020      	beq.n	8009410 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80093ce:	4b42      	ldr	r3, [pc, #264]	@ (80094d8 <USBD_SetConfig+0x150>)
 80093d0:	781b      	ldrb	r3, [r3, #0]
 80093d2:	461a      	mov	r2, r3
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80093d8:	4b3f      	ldr	r3, [pc, #252]	@ (80094d8 <USBD_SetConfig+0x150>)
 80093da:	781b      	ldrb	r3, [r3, #0]
 80093dc:	4619      	mov	r1, r3
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f7fe ffa3 	bl	800832a <USBD_SetClassConfig>
 80093e4:	4603      	mov	r3, r0
 80093e6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80093e8:	7bfb      	ldrb	r3, [r7, #15]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d008      	beq.n	8009400 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80093ee:	6839      	ldr	r1, [r7, #0]
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f000 f962 	bl	80096ba <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2202      	movs	r2, #2
 80093fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80093fe:	e065      	b.n	80094cc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f000 fa38 	bl	8009876 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2203      	movs	r2, #3
 800940a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800940e:	e05d      	b.n	80094cc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f000 fa30 	bl	8009876 <USBD_CtlSendStatus>
      break;
 8009416:	e059      	b.n	80094cc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009418:	4b2f      	ldr	r3, [pc, #188]	@ (80094d8 <USBD_SetConfig+0x150>)
 800941a:	781b      	ldrb	r3, [r3, #0]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d112      	bne.n	8009446 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2202      	movs	r2, #2
 8009424:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009428:	4b2b      	ldr	r3, [pc, #172]	@ (80094d8 <USBD_SetConfig+0x150>)
 800942a:	781b      	ldrb	r3, [r3, #0]
 800942c:	461a      	mov	r2, r3
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009432:	4b29      	ldr	r3, [pc, #164]	@ (80094d8 <USBD_SetConfig+0x150>)
 8009434:	781b      	ldrb	r3, [r3, #0]
 8009436:	4619      	mov	r1, r3
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f7fe ff92 	bl	8008362 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f000 fa19 	bl	8009876 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009444:	e042      	b.n	80094cc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009446:	4b24      	ldr	r3, [pc, #144]	@ (80094d8 <USBD_SetConfig+0x150>)
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	461a      	mov	r2, r3
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	429a      	cmp	r2, r3
 8009452:	d02a      	beq.n	80094aa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	685b      	ldr	r3, [r3, #4]
 8009458:	b2db      	uxtb	r3, r3
 800945a:	4619      	mov	r1, r3
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f7fe ff80 	bl	8008362 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009462:	4b1d      	ldr	r3, [pc, #116]	@ (80094d8 <USBD_SetConfig+0x150>)
 8009464:	781b      	ldrb	r3, [r3, #0]
 8009466:	461a      	mov	r2, r3
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800946c:	4b1a      	ldr	r3, [pc, #104]	@ (80094d8 <USBD_SetConfig+0x150>)
 800946e:	781b      	ldrb	r3, [r3, #0]
 8009470:	4619      	mov	r1, r3
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f7fe ff59 	bl	800832a <USBD_SetClassConfig>
 8009478:	4603      	mov	r3, r0
 800947a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800947c:	7bfb      	ldrb	r3, [r7, #15]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d00f      	beq.n	80094a2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009482:	6839      	ldr	r1, [r7, #0]
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f000 f918 	bl	80096ba <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	b2db      	uxtb	r3, r3
 8009490:	4619      	mov	r1, r3
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f7fe ff65 	bl	8008362 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2202      	movs	r2, #2
 800949c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80094a0:	e014      	b.n	80094cc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f000 f9e7 	bl	8009876 <USBD_CtlSendStatus>
      break;
 80094a8:	e010      	b.n	80094cc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 f9e3 	bl	8009876 <USBD_CtlSendStatus>
      break;
 80094b0:	e00c      	b.n	80094cc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80094b2:	6839      	ldr	r1, [r7, #0]
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f000 f900 	bl	80096ba <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80094ba:	4b07      	ldr	r3, [pc, #28]	@ (80094d8 <USBD_SetConfig+0x150>)
 80094bc:	781b      	ldrb	r3, [r3, #0]
 80094be:	4619      	mov	r1, r3
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f7fe ff4e 	bl	8008362 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80094c6:	2303      	movs	r3, #3
 80094c8:	73fb      	strb	r3, [r7, #15]
      break;
 80094ca:	bf00      	nop
  }

  return ret;
 80094cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3710      	adds	r7, #16
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	20000410 	.word	0x20000410

080094dc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b082      	sub	sp, #8
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	88db      	ldrh	r3, [r3, #6]
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d004      	beq.n	80094f8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80094ee:	6839      	ldr	r1, [r7, #0]
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 f8e2 	bl	80096ba <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80094f6:	e023      	b.n	8009540 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094fe:	b2db      	uxtb	r3, r3
 8009500:	2b02      	cmp	r3, #2
 8009502:	dc02      	bgt.n	800950a <USBD_GetConfig+0x2e>
 8009504:	2b00      	cmp	r3, #0
 8009506:	dc03      	bgt.n	8009510 <USBD_GetConfig+0x34>
 8009508:	e015      	b.n	8009536 <USBD_GetConfig+0x5a>
 800950a:	2b03      	cmp	r3, #3
 800950c:	d00b      	beq.n	8009526 <USBD_GetConfig+0x4a>
 800950e:	e012      	b.n	8009536 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2200      	movs	r2, #0
 8009514:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	3308      	adds	r3, #8
 800951a:	2201      	movs	r2, #1
 800951c:	4619      	mov	r1, r3
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f000 f948 	bl	80097b4 <USBD_CtlSendData>
        break;
 8009524:	e00c      	b.n	8009540 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	3304      	adds	r3, #4
 800952a:	2201      	movs	r2, #1
 800952c:	4619      	mov	r1, r3
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f000 f940 	bl	80097b4 <USBD_CtlSendData>
        break;
 8009534:	e004      	b.n	8009540 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009536:	6839      	ldr	r1, [r7, #0]
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 f8be 	bl	80096ba <USBD_CtlError>
        break;
 800953e:	bf00      	nop
}
 8009540:	bf00      	nop
 8009542:	3708      	adds	r7, #8
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}

08009548 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b082      	sub	sp, #8
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009558:	b2db      	uxtb	r3, r3
 800955a:	3b01      	subs	r3, #1
 800955c:	2b02      	cmp	r3, #2
 800955e:	d81e      	bhi.n	800959e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	88db      	ldrh	r3, [r3, #6]
 8009564:	2b02      	cmp	r3, #2
 8009566:	d004      	beq.n	8009572 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009568:	6839      	ldr	r1, [r7, #0]
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f000 f8a5 	bl	80096ba <USBD_CtlError>
        break;
 8009570:	e01a      	b.n	80095a8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2201      	movs	r2, #1
 8009576:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800957e:	2b00      	cmp	r3, #0
 8009580:	d005      	beq.n	800958e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	68db      	ldr	r3, [r3, #12]
 8009586:	f043 0202 	orr.w	r2, r3, #2
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	330c      	adds	r3, #12
 8009592:	2202      	movs	r2, #2
 8009594:	4619      	mov	r1, r3
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f000 f90c 	bl	80097b4 <USBD_CtlSendData>
      break;
 800959c:	e004      	b.n	80095a8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800959e:	6839      	ldr	r1, [r7, #0]
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f000 f88a 	bl	80096ba <USBD_CtlError>
      break;
 80095a6:	bf00      	nop
  }
}
 80095a8:	bf00      	nop
 80095aa:	3708      	adds	r7, #8
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}

080095b0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b082      	sub	sp, #8
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	885b      	ldrh	r3, [r3, #2]
 80095be:	2b01      	cmp	r3, #1
 80095c0:	d107      	bne.n	80095d2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2201      	movs	r2, #1
 80095c6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f000 f953 	bl	8009876 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80095d0:	e013      	b.n	80095fa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	885b      	ldrh	r3, [r3, #2]
 80095d6:	2b02      	cmp	r3, #2
 80095d8:	d10b      	bne.n	80095f2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	889b      	ldrh	r3, [r3, #4]
 80095de:	0a1b      	lsrs	r3, r3, #8
 80095e0:	b29b      	uxth	r3, r3
 80095e2:	b2da      	uxtb	r2, r3
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f000 f943 	bl	8009876 <USBD_CtlSendStatus>
}
 80095f0:	e003      	b.n	80095fa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80095f2:	6839      	ldr	r1, [r7, #0]
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f000 f860 	bl	80096ba <USBD_CtlError>
}
 80095fa:	bf00      	nop
 80095fc:	3708      	adds	r7, #8
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}

08009602 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009602:	b580      	push	{r7, lr}
 8009604:	b082      	sub	sp, #8
 8009606:	af00      	add	r7, sp, #0
 8009608:	6078      	str	r0, [r7, #4]
 800960a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009612:	b2db      	uxtb	r3, r3
 8009614:	3b01      	subs	r3, #1
 8009616:	2b02      	cmp	r3, #2
 8009618:	d80b      	bhi.n	8009632 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	885b      	ldrh	r3, [r3, #2]
 800961e:	2b01      	cmp	r3, #1
 8009620:	d10c      	bne.n	800963c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2200      	movs	r2, #0
 8009626:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f000 f923 	bl	8009876 <USBD_CtlSendStatus>
      }
      break;
 8009630:	e004      	b.n	800963c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009632:	6839      	ldr	r1, [r7, #0]
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f000 f840 	bl	80096ba <USBD_CtlError>
      break;
 800963a:	e000      	b.n	800963e <USBD_ClrFeature+0x3c>
      break;
 800963c:	bf00      	nop
  }
}
 800963e:	bf00      	nop
 8009640:	3708      	adds	r7, #8
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}

08009646 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009646:	b580      	push	{r7, lr}
 8009648:	b084      	sub	sp, #16
 800964a:	af00      	add	r7, sp, #0
 800964c:	6078      	str	r0, [r7, #4]
 800964e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	781a      	ldrb	r2, [r3, #0]
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	3301      	adds	r3, #1
 8009660:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	781a      	ldrb	r2, [r3, #0]
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	3301      	adds	r3, #1
 800966e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009670:	68f8      	ldr	r0, [r7, #12]
 8009672:	f7ff fa13 	bl	8008a9c <SWAPBYTE>
 8009676:	4603      	mov	r3, r0
 8009678:	461a      	mov	r2, r3
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	3301      	adds	r3, #1
 8009682:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	3301      	adds	r3, #1
 8009688:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800968a:	68f8      	ldr	r0, [r7, #12]
 800968c:	f7ff fa06 	bl	8008a9c <SWAPBYTE>
 8009690:	4603      	mov	r3, r0
 8009692:	461a      	mov	r2, r3
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	3301      	adds	r3, #1
 800969c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	3301      	adds	r3, #1
 80096a2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80096a4:	68f8      	ldr	r0, [r7, #12]
 80096a6:	f7ff f9f9 	bl	8008a9c <SWAPBYTE>
 80096aa:	4603      	mov	r3, r0
 80096ac:	461a      	mov	r2, r3
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	80da      	strh	r2, [r3, #6]
}
 80096b2:	bf00      	nop
 80096b4:	3710      	adds	r7, #16
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}

080096ba <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096ba:	b580      	push	{r7, lr}
 80096bc:	b082      	sub	sp, #8
 80096be:	af00      	add	r7, sp, #0
 80096c0:	6078      	str	r0, [r7, #4]
 80096c2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80096c4:	2180      	movs	r1, #128	@ 0x80
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f004 f8f8 	bl	800d8bc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80096cc:	2100      	movs	r1, #0
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f004 f8f4 	bl	800d8bc <USBD_LL_StallEP>
}
 80096d4:	bf00      	nop
 80096d6:	3708      	adds	r7, #8
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}

080096dc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b086      	sub	sp, #24
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	60f8      	str	r0, [r7, #12]
 80096e4:	60b9      	str	r1, [r7, #8]
 80096e6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80096e8:	2300      	movs	r3, #0
 80096ea:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d042      	beq.n	8009778 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80096f6:	6938      	ldr	r0, [r7, #16]
 80096f8:	f000 f842 	bl	8009780 <USBD_GetLen>
 80096fc:	4603      	mov	r3, r0
 80096fe:	3301      	adds	r3, #1
 8009700:	005b      	lsls	r3, r3, #1
 8009702:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009706:	d808      	bhi.n	800971a <USBD_GetString+0x3e>
 8009708:	6938      	ldr	r0, [r7, #16]
 800970a:	f000 f839 	bl	8009780 <USBD_GetLen>
 800970e:	4603      	mov	r3, r0
 8009710:	3301      	adds	r3, #1
 8009712:	b29b      	uxth	r3, r3
 8009714:	005b      	lsls	r3, r3, #1
 8009716:	b29a      	uxth	r2, r3
 8009718:	e001      	b.n	800971e <USBD_GetString+0x42>
 800971a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009722:	7dfb      	ldrb	r3, [r7, #23]
 8009724:	68ba      	ldr	r2, [r7, #8]
 8009726:	4413      	add	r3, r2
 8009728:	687a      	ldr	r2, [r7, #4]
 800972a:	7812      	ldrb	r2, [r2, #0]
 800972c:	701a      	strb	r2, [r3, #0]
  idx++;
 800972e:	7dfb      	ldrb	r3, [r7, #23]
 8009730:	3301      	adds	r3, #1
 8009732:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009734:	7dfb      	ldrb	r3, [r7, #23]
 8009736:	68ba      	ldr	r2, [r7, #8]
 8009738:	4413      	add	r3, r2
 800973a:	2203      	movs	r2, #3
 800973c:	701a      	strb	r2, [r3, #0]
  idx++;
 800973e:	7dfb      	ldrb	r3, [r7, #23]
 8009740:	3301      	adds	r3, #1
 8009742:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009744:	e013      	b.n	800976e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8009746:	7dfb      	ldrb	r3, [r7, #23]
 8009748:	68ba      	ldr	r2, [r7, #8]
 800974a:	4413      	add	r3, r2
 800974c:	693a      	ldr	r2, [r7, #16]
 800974e:	7812      	ldrb	r2, [r2, #0]
 8009750:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	3301      	adds	r3, #1
 8009756:	613b      	str	r3, [r7, #16]
    idx++;
 8009758:	7dfb      	ldrb	r3, [r7, #23]
 800975a:	3301      	adds	r3, #1
 800975c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800975e:	7dfb      	ldrb	r3, [r7, #23]
 8009760:	68ba      	ldr	r2, [r7, #8]
 8009762:	4413      	add	r3, r2
 8009764:	2200      	movs	r2, #0
 8009766:	701a      	strb	r2, [r3, #0]
    idx++;
 8009768:	7dfb      	ldrb	r3, [r7, #23]
 800976a:	3301      	adds	r3, #1
 800976c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	781b      	ldrb	r3, [r3, #0]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d1e7      	bne.n	8009746 <USBD_GetString+0x6a>
 8009776:	e000      	b.n	800977a <USBD_GetString+0x9e>
    return;
 8009778:	bf00      	nop
  }
}
 800977a:	3718      	adds	r7, #24
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}

08009780 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009780:	b480      	push	{r7}
 8009782:	b085      	sub	sp, #20
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009788:	2300      	movs	r3, #0
 800978a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009790:	e005      	b.n	800979e <USBD_GetLen+0x1e>
  {
    len++;
 8009792:	7bfb      	ldrb	r3, [r7, #15]
 8009794:	3301      	adds	r3, #1
 8009796:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	3301      	adds	r3, #1
 800979c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	781b      	ldrb	r3, [r3, #0]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d1f5      	bne.n	8009792 <USBD_GetLen+0x12>
  }

  return len;
 80097a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3714      	adds	r7, #20
 80097ac:	46bd      	mov	sp, r7
 80097ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b2:	4770      	bx	lr

080097b4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	60f8      	str	r0, [r7, #12]
 80097bc:	60b9      	str	r1, [r7, #8]
 80097be:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2202      	movs	r2, #2
 80097c4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	687a      	ldr	r2, [r7, #4]
 80097cc:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	68ba      	ldr	r2, [r7, #8]
 80097d2:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	687a      	ldr	r2, [r7, #4]
 80097d8:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	68ba      	ldr	r2, [r7, #8]
 80097de:	2100      	movs	r1, #0
 80097e0:	68f8      	ldr	r0, [r7, #12]
 80097e2:	f004 f8f4 	bl	800d9ce <USBD_LL_Transmit>

  return USBD_OK;
 80097e6:	2300      	movs	r3, #0
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3710      	adds	r7, #16
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}

080097f0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b084      	sub	sp, #16
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	60f8      	str	r0, [r7, #12]
 80097f8:	60b9      	str	r1, [r7, #8]
 80097fa:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	68ba      	ldr	r2, [r7, #8]
 8009800:	2100      	movs	r1, #0
 8009802:	68f8      	ldr	r0, [r7, #12]
 8009804:	f004 f8e3 	bl	800d9ce <USBD_LL_Transmit>

  return USBD_OK;
 8009808:	2300      	movs	r3, #0
}
 800980a:	4618      	mov	r0, r3
 800980c:	3710      	adds	r7, #16
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}

08009812 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009812:	b580      	push	{r7, lr}
 8009814:	b084      	sub	sp, #16
 8009816:	af00      	add	r7, sp, #0
 8009818:	60f8      	str	r0, [r7, #12]
 800981a:	60b9      	str	r1, [r7, #8]
 800981c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2203      	movs	r2, #3
 8009822:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	687a      	ldr	r2, [r7, #4]
 800982a:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	68ba      	ldr	r2, [r7, #8]
 8009832:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	687a      	ldr	r2, [r7, #4]
 800983a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	68ba      	ldr	r2, [r7, #8]
 8009842:	2100      	movs	r1, #0
 8009844:	68f8      	ldr	r0, [r7, #12]
 8009846:	f004 f8e3 	bl	800da10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800984a:	2300      	movs	r3, #0
}
 800984c:	4618      	mov	r0, r3
 800984e:	3710      	adds	r7, #16
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b084      	sub	sp, #16
 8009858:	af00      	add	r7, sp, #0
 800985a:	60f8      	str	r0, [r7, #12]
 800985c:	60b9      	str	r1, [r7, #8]
 800985e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	68ba      	ldr	r2, [r7, #8]
 8009864:	2100      	movs	r1, #0
 8009866:	68f8      	ldr	r0, [r7, #12]
 8009868:	f004 f8d2 	bl	800da10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800986c:	2300      	movs	r3, #0
}
 800986e:	4618      	mov	r0, r3
 8009870:	3710      	adds	r7, #16
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}

08009876 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009876:	b580      	push	{r7, lr}
 8009878:	b082      	sub	sp, #8
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2204      	movs	r2, #4
 8009882:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009886:	2300      	movs	r3, #0
 8009888:	2200      	movs	r2, #0
 800988a:	2100      	movs	r1, #0
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f004 f89e 	bl	800d9ce <USBD_LL_Transmit>

  return USBD_OK;
 8009892:	2300      	movs	r3, #0
}
 8009894:	4618      	mov	r0, r3
 8009896:	3708      	adds	r7, #8
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}

0800989c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b082      	sub	sp, #8
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2205      	movs	r2, #5
 80098a8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80098ac:	2300      	movs	r3, #0
 80098ae:	2200      	movs	r2, #0
 80098b0:	2100      	movs	r1, #0
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f004 f8ac 	bl	800da10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80098b8:	2300      	movs	r3, #0
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	3708      	adds	r7, #8
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}

080098c2 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80098c2:	b480      	push	{r7}
 80098c4:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80098c6:	bf00      	nop
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	4770      	bx	lr

080098d0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80098d0:	b480      	push	{r7}
 80098d2:	b085      	sub	sp, #20
 80098d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098d6:	f3ef 8305 	mrs	r3, IPSR
 80098da:	60bb      	str	r3, [r7, #8]
  return(result);
 80098dc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d10f      	bne.n	8009902 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80098e2:	f3ef 8310 	mrs	r3, PRIMASK
 80098e6:	607b      	str	r3, [r7, #4]
  return(result);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d105      	bne.n	80098fa <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80098ee:	f3ef 8311 	mrs	r3, BASEPRI
 80098f2:	603b      	str	r3, [r7, #0]
  return(result);
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d007      	beq.n	800990a <osKernelInitialize+0x3a>
 80098fa:	4b0e      	ldr	r3, [pc, #56]	@ (8009934 <osKernelInitialize+0x64>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	2b02      	cmp	r3, #2
 8009900:	d103      	bne.n	800990a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8009902:	f06f 0305 	mvn.w	r3, #5
 8009906:	60fb      	str	r3, [r7, #12]
 8009908:	e00c      	b.n	8009924 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800990a:	4b0a      	ldr	r3, [pc, #40]	@ (8009934 <osKernelInitialize+0x64>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d105      	bne.n	800991e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009912:	4b08      	ldr	r3, [pc, #32]	@ (8009934 <osKernelInitialize+0x64>)
 8009914:	2201      	movs	r2, #1
 8009916:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009918:	2300      	movs	r3, #0
 800991a:	60fb      	str	r3, [r7, #12]
 800991c:	e002      	b.n	8009924 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800991e:	f04f 33ff 	mov.w	r3, #4294967295
 8009922:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009924:	68fb      	ldr	r3, [r7, #12]
}
 8009926:	4618      	mov	r0, r3
 8009928:	3714      	adds	r7, #20
 800992a:	46bd      	mov	sp, r7
 800992c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009930:	4770      	bx	lr
 8009932:	bf00      	nop
 8009934:	20000414 	.word	0x20000414

08009938 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009938:	b580      	push	{r7, lr}
 800993a:	b084      	sub	sp, #16
 800993c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800993e:	f3ef 8305 	mrs	r3, IPSR
 8009942:	60bb      	str	r3, [r7, #8]
  return(result);
 8009944:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009946:	2b00      	cmp	r3, #0
 8009948:	d10f      	bne.n	800996a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800994a:	f3ef 8310 	mrs	r3, PRIMASK
 800994e:	607b      	str	r3, [r7, #4]
  return(result);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d105      	bne.n	8009962 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009956:	f3ef 8311 	mrs	r3, BASEPRI
 800995a:	603b      	str	r3, [r7, #0]
  return(result);
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d007      	beq.n	8009972 <osKernelStart+0x3a>
 8009962:	4b0f      	ldr	r3, [pc, #60]	@ (80099a0 <osKernelStart+0x68>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	2b02      	cmp	r3, #2
 8009968:	d103      	bne.n	8009972 <osKernelStart+0x3a>
    stat = osErrorISR;
 800996a:	f06f 0305 	mvn.w	r3, #5
 800996e:	60fb      	str	r3, [r7, #12]
 8009970:	e010      	b.n	8009994 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009972:	4b0b      	ldr	r3, [pc, #44]	@ (80099a0 <osKernelStart+0x68>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	2b01      	cmp	r3, #1
 8009978:	d109      	bne.n	800998e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800997a:	f7ff ffa2 	bl	80098c2 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800997e:	4b08      	ldr	r3, [pc, #32]	@ (80099a0 <osKernelStart+0x68>)
 8009980:	2202      	movs	r2, #2
 8009982:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009984:	f001 f8c8 	bl	800ab18 <vTaskStartScheduler>
      stat = osOK;
 8009988:	2300      	movs	r3, #0
 800998a:	60fb      	str	r3, [r7, #12]
 800998c:	e002      	b.n	8009994 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800998e:	f04f 33ff 	mov.w	r3, #4294967295
 8009992:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009994:	68fb      	ldr	r3, [r7, #12]
}
 8009996:	4618      	mov	r0, r3
 8009998:	3710      	adds	r7, #16
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}
 800999e:	bf00      	nop
 80099a0:	20000414 	.word	0x20000414

080099a4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80099a4:	b480      	push	{r7}
 80099a6:	b085      	sub	sp, #20
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	60f8      	str	r0, [r7, #12]
 80099ac:	60b9      	str	r1, [r7, #8]
 80099ae:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	4a07      	ldr	r2, [pc, #28]	@ (80099d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80099b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	4a06      	ldr	r2, [pc, #24]	@ (80099d4 <vApplicationGetIdleTaskMemory+0x30>)
 80099ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80099c2:	601a      	str	r2, [r3, #0]
}
 80099c4:	bf00      	nop
 80099c6:	3714      	adds	r7, #20
 80099c8:	46bd      	mov	sp, r7
 80099ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ce:	4770      	bx	lr
 80099d0:	20000418 	.word	0x20000418
 80099d4:	200004c0 	.word	0x200004c0

080099d8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80099d8:	b480      	push	{r7}
 80099da:	b085      	sub	sp, #20
 80099dc:	af00      	add	r7, sp, #0
 80099de:	60f8      	str	r0, [r7, #12]
 80099e0:	60b9      	str	r1, [r7, #8]
 80099e2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	4a07      	ldr	r2, [pc, #28]	@ (8009a04 <vApplicationGetTimerTaskMemory+0x2c>)
 80099e8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	4a06      	ldr	r2, [pc, #24]	@ (8009a08 <vApplicationGetTimerTaskMemory+0x30>)
 80099ee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80099f6:	601a      	str	r2, [r3, #0]
}
 80099f8:	bf00      	nop
 80099fa:	3714      	adds	r7, #20
 80099fc:	46bd      	mov	sp, r7
 80099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a02:	4770      	bx	lr
 8009a04:	200008c0 	.word	0x200008c0
 8009a08:	20000968 	.word	0x20000968

08009a0c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b083      	sub	sp, #12
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f103 0208 	add.w	r2, r3, #8
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f04f 32ff 	mov.w	r2, #4294967295
 8009a24:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f103 0208 	add.w	r2, r3, #8
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f103 0208 	add.w	r2, r3, #8
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009a40:	bf00      	nop
 8009a42:	370c      	adds	r7, #12
 8009a44:	46bd      	mov	sp, r7
 8009a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4a:	4770      	bx	lr

08009a4c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b083      	sub	sp, #12
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2200      	movs	r2, #0
 8009a58:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009a5a:	bf00      	nop
 8009a5c:	370c      	adds	r7, #12
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a64:	4770      	bx	lr

08009a66 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009a66:	b480      	push	{r7}
 8009a68:	b085      	sub	sp, #20
 8009a6a:	af00      	add	r7, sp, #0
 8009a6c:	6078      	str	r0, [r7, #4]
 8009a6e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	68fa      	ldr	r2, [r7, #12]
 8009a7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	689a      	ldr	r2, [r3, #8]
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	689b      	ldr	r3, [r3, #8]
 8009a88:	683a      	ldr	r2, [r7, #0]
 8009a8a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	683a      	ldr	r2, [r7, #0]
 8009a90:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	687a      	ldr	r2, [r7, #4]
 8009a96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	1c5a      	adds	r2, r3, #1
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	601a      	str	r2, [r3, #0]
}
 8009aa2:	bf00      	nop
 8009aa4:	3714      	adds	r7, #20
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aac:	4770      	bx	lr

08009aae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009aae:	b480      	push	{r7}
 8009ab0:	b085      	sub	sp, #20
 8009ab2:	af00      	add	r7, sp, #0
 8009ab4:	6078      	str	r0, [r7, #4]
 8009ab6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ac4:	d103      	bne.n	8009ace <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	691b      	ldr	r3, [r3, #16]
 8009aca:	60fb      	str	r3, [r7, #12]
 8009acc:	e00c      	b.n	8009ae8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	3308      	adds	r3, #8
 8009ad2:	60fb      	str	r3, [r7, #12]
 8009ad4:	e002      	b.n	8009adc <vListInsert+0x2e>
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	685b      	ldr	r3, [r3, #4]
 8009ada:	60fb      	str	r3, [r7, #12]
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	685b      	ldr	r3, [r3, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	68ba      	ldr	r2, [r7, #8]
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	d2f6      	bcs.n	8009ad6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	685a      	ldr	r2, [r3, #4]
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	685b      	ldr	r3, [r3, #4]
 8009af4:	683a      	ldr	r2, [r7, #0]
 8009af6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	68fa      	ldr	r2, [r7, #12]
 8009afc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	683a      	ldr	r2, [r7, #0]
 8009b02:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	687a      	ldr	r2, [r7, #4]
 8009b08:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	1c5a      	adds	r2, r3, #1
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	601a      	str	r2, [r3, #0]
}
 8009b14:	bf00      	nop
 8009b16:	3714      	adds	r7, #20
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1e:	4770      	bx	lr

08009b20 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009b20:	b480      	push	{r7}
 8009b22:	b085      	sub	sp, #20
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	691b      	ldr	r3, [r3, #16]
 8009b2c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	685b      	ldr	r3, [r3, #4]
 8009b32:	687a      	ldr	r2, [r7, #4]
 8009b34:	6892      	ldr	r2, [r2, #8]
 8009b36:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	689b      	ldr	r3, [r3, #8]
 8009b3c:	687a      	ldr	r2, [r7, #4]
 8009b3e:	6852      	ldr	r2, [r2, #4]
 8009b40:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	685b      	ldr	r3, [r3, #4]
 8009b46:	687a      	ldr	r2, [r7, #4]
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	d103      	bne.n	8009b54 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	689a      	ldr	r2, [r3, #8]
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2200      	movs	r2, #0
 8009b58:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	1e5a      	subs	r2, r3, #1
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	3714      	adds	r7, #20
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b72:	4770      	bx	lr

08009b74 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b084      	sub	sp, #16
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
 8009b7c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d10d      	bne.n	8009ba4 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b8c:	b672      	cpsid	i
 8009b8e:	f383 8811 	msr	BASEPRI, r3
 8009b92:	f3bf 8f6f 	isb	sy
 8009b96:	f3bf 8f4f 	dsb	sy
 8009b9a:	b662      	cpsie	i
 8009b9c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009b9e:	bf00      	nop
 8009ba0:	bf00      	nop
 8009ba2:	e7fd      	b.n	8009ba0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8009ba4:	f002 f9b2 	bl	800bf0c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681a      	ldr	r2, [r3, #0]
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bb0:	68f9      	ldr	r1, [r7, #12]
 8009bb2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009bb4:	fb01 f303 	mul.w	r3, r1, r3
 8009bb8:	441a      	add	r2, r3
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681a      	ldr	r2, [r3, #0]
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681a      	ldr	r2, [r3, #0]
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009bd4:	3b01      	subs	r3, #1
 8009bd6:	68f9      	ldr	r1, [r7, #12]
 8009bd8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009bda:	fb01 f303 	mul.w	r3, r1, r3
 8009bde:	441a      	add	r2, r3
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	22ff      	movs	r2, #255	@ 0xff
 8009be8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	22ff      	movs	r2, #255	@ 0xff
 8009bf0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d114      	bne.n	8009c24 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	691b      	ldr	r3, [r3, #16]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d01a      	beq.n	8009c38 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	3310      	adds	r3, #16
 8009c06:	4618      	mov	r0, r3
 8009c08:	f001 fa56 	bl	800b0b8 <xTaskRemoveFromEventList>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d012      	beq.n	8009c38 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009c12:	4b0d      	ldr	r3, [pc, #52]	@ (8009c48 <xQueueGenericReset+0xd4>)
 8009c14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c18:	601a      	str	r2, [r3, #0]
 8009c1a:	f3bf 8f4f 	dsb	sy
 8009c1e:	f3bf 8f6f 	isb	sy
 8009c22:	e009      	b.n	8009c38 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	3310      	adds	r3, #16
 8009c28:	4618      	mov	r0, r3
 8009c2a:	f7ff feef 	bl	8009a0c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	3324      	adds	r3, #36	@ 0x24
 8009c32:	4618      	mov	r0, r3
 8009c34:	f7ff feea 	bl	8009a0c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009c38:	f002 f99e 	bl	800bf78 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009c3c:	2301      	movs	r3, #1
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3710      	adds	r7, #16
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
 8009c46:	bf00      	nop
 8009c48:	e000ed04 	.word	0xe000ed04

08009c4c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b08e      	sub	sp, #56	@ 0x38
 8009c50:	af02      	add	r7, sp, #8
 8009c52:	60f8      	str	r0, [r7, #12]
 8009c54:	60b9      	str	r1, [r7, #8]
 8009c56:	607a      	str	r2, [r7, #4]
 8009c58:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d10d      	bne.n	8009c7c <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8009c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c64:	b672      	cpsid	i
 8009c66:	f383 8811 	msr	BASEPRI, r3
 8009c6a:	f3bf 8f6f 	isb	sy
 8009c6e:	f3bf 8f4f 	dsb	sy
 8009c72:	b662      	cpsie	i
 8009c74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009c76:	bf00      	nop
 8009c78:	bf00      	nop
 8009c7a:	e7fd      	b.n	8009c78 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d10d      	bne.n	8009c9e <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8009c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c86:	b672      	cpsid	i
 8009c88:	f383 8811 	msr	BASEPRI, r3
 8009c8c:	f3bf 8f6f 	isb	sy
 8009c90:	f3bf 8f4f 	dsb	sy
 8009c94:	b662      	cpsie	i
 8009c96:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009c98:	bf00      	nop
 8009c9a:	bf00      	nop
 8009c9c:	e7fd      	b.n	8009c9a <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d002      	beq.n	8009caa <xQueueGenericCreateStatic+0x5e>
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d001      	beq.n	8009cae <xQueueGenericCreateStatic+0x62>
 8009caa:	2301      	movs	r3, #1
 8009cac:	e000      	b.n	8009cb0 <xQueueGenericCreateStatic+0x64>
 8009cae:	2300      	movs	r3, #0
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d10d      	bne.n	8009cd0 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8009cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cb8:	b672      	cpsid	i
 8009cba:	f383 8811 	msr	BASEPRI, r3
 8009cbe:	f3bf 8f6f 	isb	sy
 8009cc2:	f3bf 8f4f 	dsb	sy
 8009cc6:	b662      	cpsie	i
 8009cc8:	623b      	str	r3, [r7, #32]
}
 8009cca:	bf00      	nop
 8009ccc:	bf00      	nop
 8009cce:	e7fd      	b.n	8009ccc <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d102      	bne.n	8009cdc <xQueueGenericCreateStatic+0x90>
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d101      	bne.n	8009ce0 <xQueueGenericCreateStatic+0x94>
 8009cdc:	2301      	movs	r3, #1
 8009cde:	e000      	b.n	8009ce2 <xQueueGenericCreateStatic+0x96>
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d10d      	bne.n	8009d02 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8009ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cea:	b672      	cpsid	i
 8009cec:	f383 8811 	msr	BASEPRI, r3
 8009cf0:	f3bf 8f6f 	isb	sy
 8009cf4:	f3bf 8f4f 	dsb	sy
 8009cf8:	b662      	cpsie	i
 8009cfa:	61fb      	str	r3, [r7, #28]
}
 8009cfc:	bf00      	nop
 8009cfe:	bf00      	nop
 8009d00:	e7fd      	b.n	8009cfe <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009d02:	2350      	movs	r3, #80	@ 0x50
 8009d04:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	2b50      	cmp	r3, #80	@ 0x50
 8009d0a:	d00d      	beq.n	8009d28 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8009d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d10:	b672      	cpsid	i
 8009d12:	f383 8811 	msr	BASEPRI, r3
 8009d16:	f3bf 8f6f 	isb	sy
 8009d1a:	f3bf 8f4f 	dsb	sy
 8009d1e:	b662      	cpsie	i
 8009d20:	61bb      	str	r3, [r7, #24]
}
 8009d22:	bf00      	nop
 8009d24:	bf00      	nop
 8009d26:	e7fd      	b.n	8009d24 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009d28:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d00d      	beq.n	8009d50 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d36:	2201      	movs	r2, #1
 8009d38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009d3c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d42:	9300      	str	r3, [sp, #0]
 8009d44:	4613      	mov	r3, r2
 8009d46:	687a      	ldr	r2, [r7, #4]
 8009d48:	68b9      	ldr	r1, [r7, #8]
 8009d4a:	68f8      	ldr	r0, [r7, #12]
 8009d4c:	f000 f805 	bl	8009d5a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3730      	adds	r7, #48	@ 0x30
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}

08009d5a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009d5a:	b580      	push	{r7, lr}
 8009d5c:	b084      	sub	sp, #16
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	60f8      	str	r0, [r7, #12]
 8009d62:	60b9      	str	r1, [r7, #8]
 8009d64:	607a      	str	r2, [r7, #4]
 8009d66:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d103      	bne.n	8009d76 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009d6e:	69bb      	ldr	r3, [r7, #24]
 8009d70:	69ba      	ldr	r2, [r7, #24]
 8009d72:	601a      	str	r2, [r3, #0]
 8009d74:	e002      	b.n	8009d7c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009d76:	69bb      	ldr	r3, [r7, #24]
 8009d78:	687a      	ldr	r2, [r7, #4]
 8009d7a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009d7c:	69bb      	ldr	r3, [r7, #24]
 8009d7e:	68fa      	ldr	r2, [r7, #12]
 8009d80:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009d82:	69bb      	ldr	r3, [r7, #24]
 8009d84:	68ba      	ldr	r2, [r7, #8]
 8009d86:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009d88:	2101      	movs	r1, #1
 8009d8a:	69b8      	ldr	r0, [r7, #24]
 8009d8c:	f7ff fef2 	bl	8009b74 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009d90:	69bb      	ldr	r3, [r7, #24]
 8009d92:	78fa      	ldrb	r2, [r7, #3]
 8009d94:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009d98:	bf00      	nop
 8009d9a:	3710      	adds	r7, #16
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}

08009da0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b08e      	sub	sp, #56	@ 0x38
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	60f8      	str	r0, [r7, #12]
 8009da8:	60b9      	str	r1, [r7, #8]
 8009daa:	607a      	str	r2, [r7, #4]
 8009dac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009dae:	2300      	movs	r3, #0
 8009db0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d10d      	bne.n	8009dd8 <xQueueGenericSend+0x38>
	__asm volatile
 8009dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dc0:	b672      	cpsid	i
 8009dc2:	f383 8811 	msr	BASEPRI, r3
 8009dc6:	f3bf 8f6f 	isb	sy
 8009dca:	f3bf 8f4f 	dsb	sy
 8009dce:	b662      	cpsie	i
 8009dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009dd2:	bf00      	nop
 8009dd4:	bf00      	nop
 8009dd6:	e7fd      	b.n	8009dd4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d103      	bne.n	8009de6 <xQueueGenericSend+0x46>
 8009dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d101      	bne.n	8009dea <xQueueGenericSend+0x4a>
 8009de6:	2301      	movs	r3, #1
 8009de8:	e000      	b.n	8009dec <xQueueGenericSend+0x4c>
 8009dea:	2300      	movs	r3, #0
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d10d      	bne.n	8009e0c <xQueueGenericSend+0x6c>
	__asm volatile
 8009df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009df4:	b672      	cpsid	i
 8009df6:	f383 8811 	msr	BASEPRI, r3
 8009dfa:	f3bf 8f6f 	isb	sy
 8009dfe:	f3bf 8f4f 	dsb	sy
 8009e02:	b662      	cpsie	i
 8009e04:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009e06:	bf00      	nop
 8009e08:	bf00      	nop
 8009e0a:	e7fd      	b.n	8009e08 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	2b02      	cmp	r3, #2
 8009e10:	d103      	bne.n	8009e1a <xQueueGenericSend+0x7a>
 8009e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e16:	2b01      	cmp	r3, #1
 8009e18:	d101      	bne.n	8009e1e <xQueueGenericSend+0x7e>
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	e000      	b.n	8009e20 <xQueueGenericSend+0x80>
 8009e1e:	2300      	movs	r3, #0
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d10d      	bne.n	8009e40 <xQueueGenericSend+0xa0>
	__asm volatile
 8009e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e28:	b672      	cpsid	i
 8009e2a:	f383 8811 	msr	BASEPRI, r3
 8009e2e:	f3bf 8f6f 	isb	sy
 8009e32:	f3bf 8f4f 	dsb	sy
 8009e36:	b662      	cpsie	i
 8009e38:	623b      	str	r3, [r7, #32]
}
 8009e3a:	bf00      	nop
 8009e3c:	bf00      	nop
 8009e3e:	e7fd      	b.n	8009e3c <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009e40:	f001 fb08 	bl	800b454 <xTaskGetSchedulerState>
 8009e44:	4603      	mov	r3, r0
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d102      	bne.n	8009e50 <xQueueGenericSend+0xb0>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d101      	bne.n	8009e54 <xQueueGenericSend+0xb4>
 8009e50:	2301      	movs	r3, #1
 8009e52:	e000      	b.n	8009e56 <xQueueGenericSend+0xb6>
 8009e54:	2300      	movs	r3, #0
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d10d      	bne.n	8009e76 <xQueueGenericSend+0xd6>
	__asm volatile
 8009e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e5e:	b672      	cpsid	i
 8009e60:	f383 8811 	msr	BASEPRI, r3
 8009e64:	f3bf 8f6f 	isb	sy
 8009e68:	f3bf 8f4f 	dsb	sy
 8009e6c:	b662      	cpsie	i
 8009e6e:	61fb      	str	r3, [r7, #28]
}
 8009e70:	bf00      	nop
 8009e72:	bf00      	nop
 8009e74:	e7fd      	b.n	8009e72 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009e76:	f002 f849 	bl	800bf0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e82:	429a      	cmp	r2, r3
 8009e84:	d302      	bcc.n	8009e8c <xQueueGenericSend+0xec>
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	2b02      	cmp	r3, #2
 8009e8a:	d129      	bne.n	8009ee0 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009e8c:	683a      	ldr	r2, [r7, #0]
 8009e8e:	68b9      	ldr	r1, [r7, #8]
 8009e90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009e92:	f000 fa1b 	bl	800a2cc <prvCopyDataToQueue>
 8009e96:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d010      	beq.n	8009ec2 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ea2:	3324      	adds	r3, #36	@ 0x24
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f001 f907 	bl	800b0b8 <xTaskRemoveFromEventList>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d013      	beq.n	8009ed8 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009eb0:	4b3f      	ldr	r3, [pc, #252]	@ (8009fb0 <xQueueGenericSend+0x210>)
 8009eb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009eb6:	601a      	str	r2, [r3, #0]
 8009eb8:	f3bf 8f4f 	dsb	sy
 8009ebc:	f3bf 8f6f 	isb	sy
 8009ec0:	e00a      	b.n	8009ed8 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d007      	beq.n	8009ed8 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009ec8:	4b39      	ldr	r3, [pc, #228]	@ (8009fb0 <xQueueGenericSend+0x210>)
 8009eca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ece:	601a      	str	r2, [r3, #0]
 8009ed0:	f3bf 8f4f 	dsb	sy
 8009ed4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009ed8:	f002 f84e 	bl	800bf78 <vPortExitCritical>
				return pdPASS;
 8009edc:	2301      	movs	r3, #1
 8009ede:	e063      	b.n	8009fa8 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d103      	bne.n	8009eee <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009ee6:	f002 f847 	bl	800bf78 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009eea:	2300      	movs	r3, #0
 8009eec:	e05c      	b.n	8009fa8 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009eee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d106      	bne.n	8009f02 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009ef4:	f107 0314 	add.w	r3, r7, #20
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f001 f943 	bl	800b184 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009efe:	2301      	movs	r3, #1
 8009f00:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009f02:	f002 f839 	bl	800bf78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009f06:	f000 fe7b 	bl	800ac00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009f0a:	f001 ffff 	bl	800bf0c <vPortEnterCritical>
 8009f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f10:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009f14:	b25b      	sxtb	r3, r3
 8009f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f1a:	d103      	bne.n	8009f24 <xQueueGenericSend+0x184>
 8009f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f1e:	2200      	movs	r2, #0
 8009f20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f26:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009f2a:	b25b      	sxtb	r3, r3
 8009f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f30:	d103      	bne.n	8009f3a <xQueueGenericSend+0x19a>
 8009f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f34:	2200      	movs	r2, #0
 8009f36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009f3a:	f002 f81d 	bl	800bf78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009f3e:	1d3a      	adds	r2, r7, #4
 8009f40:	f107 0314 	add.w	r3, r7, #20
 8009f44:	4611      	mov	r1, r2
 8009f46:	4618      	mov	r0, r3
 8009f48:	f001 f932 	bl	800b1b0 <xTaskCheckForTimeOut>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d124      	bne.n	8009f9c <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009f52:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009f54:	f000 fab2 	bl	800a4bc <prvIsQueueFull>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d018      	beq.n	8009f90 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f60:	3310      	adds	r3, #16
 8009f62:	687a      	ldr	r2, [r7, #4]
 8009f64:	4611      	mov	r1, r2
 8009f66:	4618      	mov	r0, r3
 8009f68:	f001 f850 	bl	800b00c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009f6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009f6e:	f000 fa3d 	bl	800a3ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009f72:	f000 fe53 	bl	800ac1c <xTaskResumeAll>
 8009f76:	4603      	mov	r3, r0
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	f47f af7c 	bne.w	8009e76 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8009f7e:	4b0c      	ldr	r3, [pc, #48]	@ (8009fb0 <xQueueGenericSend+0x210>)
 8009f80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f84:	601a      	str	r2, [r3, #0]
 8009f86:	f3bf 8f4f 	dsb	sy
 8009f8a:	f3bf 8f6f 	isb	sy
 8009f8e:	e772      	b.n	8009e76 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009f90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009f92:	f000 fa2b 	bl	800a3ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009f96:	f000 fe41 	bl	800ac1c <xTaskResumeAll>
 8009f9a:	e76c      	b.n	8009e76 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009f9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009f9e:	f000 fa25 	bl	800a3ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009fa2:	f000 fe3b 	bl	800ac1c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009fa6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	3738      	adds	r7, #56	@ 0x38
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}
 8009fb0:	e000ed04 	.word	0xe000ed04

08009fb4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b08e      	sub	sp, #56	@ 0x38
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	60f8      	str	r0, [r7, #12]
 8009fbc:	60b9      	str	r1, [r7, #8]
 8009fbe:	607a      	str	r2, [r7, #4]
 8009fc0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d10d      	bne.n	8009fe8 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8009fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fd0:	b672      	cpsid	i
 8009fd2:	f383 8811 	msr	BASEPRI, r3
 8009fd6:	f3bf 8f6f 	isb	sy
 8009fda:	f3bf 8f4f 	dsb	sy
 8009fde:	b662      	cpsie	i
 8009fe0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009fe2:	bf00      	nop
 8009fe4:	bf00      	nop
 8009fe6:	e7fd      	b.n	8009fe4 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d103      	bne.n	8009ff6 <xQueueGenericSendFromISR+0x42>
 8009fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d101      	bne.n	8009ffa <xQueueGenericSendFromISR+0x46>
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	e000      	b.n	8009ffc <xQueueGenericSendFromISR+0x48>
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d10d      	bne.n	800a01c <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800a000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a004:	b672      	cpsid	i
 800a006:	f383 8811 	msr	BASEPRI, r3
 800a00a:	f3bf 8f6f 	isb	sy
 800a00e:	f3bf 8f4f 	dsb	sy
 800a012:	b662      	cpsie	i
 800a014:	623b      	str	r3, [r7, #32]
}
 800a016:	bf00      	nop
 800a018:	bf00      	nop
 800a01a:	e7fd      	b.n	800a018 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	2b02      	cmp	r3, #2
 800a020:	d103      	bne.n	800a02a <xQueueGenericSendFromISR+0x76>
 800a022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a024:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a026:	2b01      	cmp	r3, #1
 800a028:	d101      	bne.n	800a02e <xQueueGenericSendFromISR+0x7a>
 800a02a:	2301      	movs	r3, #1
 800a02c:	e000      	b.n	800a030 <xQueueGenericSendFromISR+0x7c>
 800a02e:	2300      	movs	r3, #0
 800a030:	2b00      	cmp	r3, #0
 800a032:	d10d      	bne.n	800a050 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800a034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a038:	b672      	cpsid	i
 800a03a:	f383 8811 	msr	BASEPRI, r3
 800a03e:	f3bf 8f6f 	isb	sy
 800a042:	f3bf 8f4f 	dsb	sy
 800a046:	b662      	cpsie	i
 800a048:	61fb      	str	r3, [r7, #28]
}
 800a04a:	bf00      	nop
 800a04c:	bf00      	nop
 800a04e:	e7fd      	b.n	800a04c <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a050:	f002 f844 	bl	800c0dc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a054:	f3ef 8211 	mrs	r2, BASEPRI
 800a058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a05c:	b672      	cpsid	i
 800a05e:	f383 8811 	msr	BASEPRI, r3
 800a062:	f3bf 8f6f 	isb	sy
 800a066:	f3bf 8f4f 	dsb	sy
 800a06a:	b662      	cpsie	i
 800a06c:	61ba      	str	r2, [r7, #24]
 800a06e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a070:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a072:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a076:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a07a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d302      	bcc.n	800a086 <xQueueGenericSendFromISR+0xd2>
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	2b02      	cmp	r3, #2
 800a084:	d12c      	bne.n	800a0e0 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a088:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a08c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a090:	683a      	ldr	r2, [r7, #0]
 800a092:	68b9      	ldr	r1, [r7, #8]
 800a094:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a096:	f000 f919 	bl	800a2cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a09a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800a09e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0a2:	d112      	bne.n	800a0ca <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a0a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d016      	beq.n	800a0da <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a0ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0ae:	3324      	adds	r3, #36	@ 0x24
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f001 f801 	bl	800b0b8 <xTaskRemoveFromEventList>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d00e      	beq.n	800a0da <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d00b      	beq.n	800a0da <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2201      	movs	r2, #1
 800a0c6:	601a      	str	r2, [r3, #0]
 800a0c8:	e007      	b.n	800a0da <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a0ca:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a0ce:	3301      	adds	r3, #1
 800a0d0:	b2db      	uxtb	r3, r3
 800a0d2:	b25a      	sxtb	r2, r3
 800a0d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a0da:	2301      	movs	r3, #1
 800a0dc:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800a0de:	e001      	b.n	800a0e4 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0e6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a0ee:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a0f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3738      	adds	r7, #56	@ 0x38
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}
	...

0800a0fc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b08c      	sub	sp, #48	@ 0x30
 800a100:	af00      	add	r7, sp, #0
 800a102:	60f8      	str	r0, [r7, #12]
 800a104:	60b9      	str	r1, [r7, #8]
 800a106:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a108:	2300      	movs	r3, #0
 800a10a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a112:	2b00      	cmp	r3, #0
 800a114:	d10d      	bne.n	800a132 <xQueueReceive+0x36>
	__asm volatile
 800a116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a11a:	b672      	cpsid	i
 800a11c:	f383 8811 	msr	BASEPRI, r3
 800a120:	f3bf 8f6f 	isb	sy
 800a124:	f3bf 8f4f 	dsb	sy
 800a128:	b662      	cpsie	i
 800a12a:	623b      	str	r3, [r7, #32]
}
 800a12c:	bf00      	nop
 800a12e:	bf00      	nop
 800a130:	e7fd      	b.n	800a12e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d103      	bne.n	800a140 <xQueueReceive+0x44>
 800a138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a13a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d101      	bne.n	800a144 <xQueueReceive+0x48>
 800a140:	2301      	movs	r3, #1
 800a142:	e000      	b.n	800a146 <xQueueReceive+0x4a>
 800a144:	2300      	movs	r3, #0
 800a146:	2b00      	cmp	r3, #0
 800a148:	d10d      	bne.n	800a166 <xQueueReceive+0x6a>
	__asm volatile
 800a14a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a14e:	b672      	cpsid	i
 800a150:	f383 8811 	msr	BASEPRI, r3
 800a154:	f3bf 8f6f 	isb	sy
 800a158:	f3bf 8f4f 	dsb	sy
 800a15c:	b662      	cpsie	i
 800a15e:	61fb      	str	r3, [r7, #28]
}
 800a160:	bf00      	nop
 800a162:	bf00      	nop
 800a164:	e7fd      	b.n	800a162 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a166:	f001 f975 	bl	800b454 <xTaskGetSchedulerState>
 800a16a:	4603      	mov	r3, r0
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d102      	bne.n	800a176 <xQueueReceive+0x7a>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d101      	bne.n	800a17a <xQueueReceive+0x7e>
 800a176:	2301      	movs	r3, #1
 800a178:	e000      	b.n	800a17c <xQueueReceive+0x80>
 800a17a:	2300      	movs	r3, #0
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d10d      	bne.n	800a19c <xQueueReceive+0xa0>
	__asm volatile
 800a180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a184:	b672      	cpsid	i
 800a186:	f383 8811 	msr	BASEPRI, r3
 800a18a:	f3bf 8f6f 	isb	sy
 800a18e:	f3bf 8f4f 	dsb	sy
 800a192:	b662      	cpsie	i
 800a194:	61bb      	str	r3, [r7, #24]
}
 800a196:	bf00      	nop
 800a198:	bf00      	nop
 800a19a:	e7fd      	b.n	800a198 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a19c:	f001 feb6 	bl	800bf0c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a1a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1a4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a1a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d01f      	beq.n	800a1ec <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a1ac:	68b9      	ldr	r1, [r7, #8]
 800a1ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a1b0:	f000 f8f6 	bl	800a3a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a1b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1b6:	1e5a      	subs	r2, r3, #1
 800a1b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1ba:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a1bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1be:	691b      	ldr	r3, [r3, #16]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d00f      	beq.n	800a1e4 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a1c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1c6:	3310      	adds	r3, #16
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f000 ff75 	bl	800b0b8 <xTaskRemoveFromEventList>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d007      	beq.n	800a1e4 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a1d4:	4b3c      	ldr	r3, [pc, #240]	@ (800a2c8 <xQueueReceive+0x1cc>)
 800a1d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1da:	601a      	str	r2, [r3, #0]
 800a1dc:	f3bf 8f4f 	dsb	sy
 800a1e0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a1e4:	f001 fec8 	bl	800bf78 <vPortExitCritical>
				return pdPASS;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	e069      	b.n	800a2c0 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d103      	bne.n	800a1fa <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a1f2:	f001 fec1 	bl	800bf78 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	e062      	b.n	800a2c0 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a1fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d106      	bne.n	800a20e <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a200:	f107 0310 	add.w	r3, r7, #16
 800a204:	4618      	mov	r0, r3
 800a206:	f000 ffbd 	bl	800b184 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a20a:	2301      	movs	r3, #1
 800a20c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a20e:	f001 feb3 	bl	800bf78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a212:	f000 fcf5 	bl	800ac00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a216:	f001 fe79 	bl	800bf0c <vPortEnterCritical>
 800a21a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a21c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a220:	b25b      	sxtb	r3, r3
 800a222:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a226:	d103      	bne.n	800a230 <xQueueReceive+0x134>
 800a228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a22a:	2200      	movs	r2, #0
 800a22c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a232:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a236:	b25b      	sxtb	r3, r3
 800a238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a23c:	d103      	bne.n	800a246 <xQueueReceive+0x14a>
 800a23e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a240:	2200      	movs	r2, #0
 800a242:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a246:	f001 fe97 	bl	800bf78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a24a:	1d3a      	adds	r2, r7, #4
 800a24c:	f107 0310 	add.w	r3, r7, #16
 800a250:	4611      	mov	r1, r2
 800a252:	4618      	mov	r0, r3
 800a254:	f000 ffac 	bl	800b1b0 <xTaskCheckForTimeOut>
 800a258:	4603      	mov	r3, r0
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d123      	bne.n	800a2a6 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a25e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a260:	f000 f916 	bl	800a490 <prvIsQueueEmpty>
 800a264:	4603      	mov	r3, r0
 800a266:	2b00      	cmp	r3, #0
 800a268:	d017      	beq.n	800a29a <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a26a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a26c:	3324      	adds	r3, #36	@ 0x24
 800a26e:	687a      	ldr	r2, [r7, #4]
 800a270:	4611      	mov	r1, r2
 800a272:	4618      	mov	r0, r3
 800a274:	f000 feca 	bl	800b00c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a278:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a27a:	f000 f8b7 	bl	800a3ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a27e:	f000 fccd 	bl	800ac1c <xTaskResumeAll>
 800a282:	4603      	mov	r3, r0
 800a284:	2b00      	cmp	r3, #0
 800a286:	d189      	bne.n	800a19c <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800a288:	4b0f      	ldr	r3, [pc, #60]	@ (800a2c8 <xQueueReceive+0x1cc>)
 800a28a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a28e:	601a      	str	r2, [r3, #0]
 800a290:	f3bf 8f4f 	dsb	sy
 800a294:	f3bf 8f6f 	isb	sy
 800a298:	e780      	b.n	800a19c <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a29a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a29c:	f000 f8a6 	bl	800a3ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a2a0:	f000 fcbc 	bl	800ac1c <xTaskResumeAll>
 800a2a4:	e77a      	b.n	800a19c <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a2a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a2a8:	f000 f8a0 	bl	800a3ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a2ac:	f000 fcb6 	bl	800ac1c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a2b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a2b2:	f000 f8ed 	bl	800a490 <prvIsQueueEmpty>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	f43f af6f 	beq.w	800a19c <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a2be:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	3730      	adds	r7, #48	@ 0x30
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bd80      	pop	{r7, pc}
 800a2c8:	e000ed04 	.word	0xe000ed04

0800a2cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b086      	sub	sp, #24
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	60f8      	str	r0, [r7, #12]
 800a2d4:	60b9      	str	r1, [r7, #8]
 800a2d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d10d      	bne.n	800a306 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d14d      	bne.n	800a38e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	689b      	ldr	r3, [r3, #8]
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f001 f8ca 	bl	800b490 <xTaskPriorityDisinherit>
 800a2fc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	2200      	movs	r2, #0
 800a302:	609a      	str	r2, [r3, #8]
 800a304:	e043      	b.n	800a38e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d119      	bne.n	800a340 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	6858      	ldr	r0, [r3, #4]
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a314:	461a      	mov	r2, r3
 800a316:	68b9      	ldr	r1, [r7, #8]
 800a318:	f004 fb35 	bl	800e986 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	685a      	ldr	r2, [r3, #4]
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a324:	441a      	add	r2, r3
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	685a      	ldr	r2, [r3, #4]
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	689b      	ldr	r3, [r3, #8]
 800a332:	429a      	cmp	r2, r3
 800a334:	d32b      	bcc.n	800a38e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	681a      	ldr	r2, [r3, #0]
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	605a      	str	r2, [r3, #4]
 800a33e:	e026      	b.n	800a38e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	68d8      	ldr	r0, [r3, #12]
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a348:	461a      	mov	r2, r3
 800a34a:	68b9      	ldr	r1, [r7, #8]
 800a34c:	f004 fb1b 	bl	800e986 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	68da      	ldr	r2, [r3, #12]
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a358:	425b      	negs	r3, r3
 800a35a:	441a      	add	r2, r3
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	68da      	ldr	r2, [r3, #12]
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	429a      	cmp	r2, r3
 800a36a:	d207      	bcs.n	800a37c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	689a      	ldr	r2, [r3, #8]
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a374:	425b      	negs	r3, r3
 800a376:	441a      	add	r2, r3
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2b02      	cmp	r3, #2
 800a380:	d105      	bne.n	800a38e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a382:	693b      	ldr	r3, [r7, #16]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d002      	beq.n	800a38e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	3b01      	subs	r3, #1
 800a38c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	1c5a      	adds	r2, r3, #1
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a396:	697b      	ldr	r3, [r7, #20]
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3718      	adds	r7, #24
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}

0800a3a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b082      	sub	sp, #8
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d018      	beq.n	800a3e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	68da      	ldr	r2, [r3, #12]
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3ba:	441a      	add	r2, r3
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	68da      	ldr	r2, [r3, #12]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	689b      	ldr	r3, [r3, #8]
 800a3c8:	429a      	cmp	r2, r3
 800a3ca:	d303      	bcc.n	800a3d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681a      	ldr	r2, [r3, #0]
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	68d9      	ldr	r1, [r3, #12]
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3dc:	461a      	mov	r2, r3
 800a3de:	6838      	ldr	r0, [r7, #0]
 800a3e0:	f004 fad1 	bl	800e986 <memcpy>
	}
}
 800a3e4:	bf00      	nop
 800a3e6:	3708      	adds	r7, #8
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}

0800a3ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b084      	sub	sp, #16
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a3f4:	f001 fd8a 	bl	800bf0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a3fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a400:	e011      	b.n	800a426 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a406:	2b00      	cmp	r3, #0
 800a408:	d012      	beq.n	800a430 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	3324      	adds	r3, #36	@ 0x24
 800a40e:	4618      	mov	r0, r3
 800a410:	f000 fe52 	bl	800b0b8 <xTaskRemoveFromEventList>
 800a414:	4603      	mov	r3, r0
 800a416:	2b00      	cmp	r3, #0
 800a418:	d001      	beq.n	800a41e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a41a:	f000 ff31 	bl	800b280 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a41e:	7bfb      	ldrb	r3, [r7, #15]
 800a420:	3b01      	subs	r3, #1
 800a422:	b2db      	uxtb	r3, r3
 800a424:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	dce9      	bgt.n	800a402 <prvUnlockQueue+0x16>
 800a42e:	e000      	b.n	800a432 <prvUnlockQueue+0x46>
					break;
 800a430:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	22ff      	movs	r2, #255	@ 0xff
 800a436:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a43a:	f001 fd9d 	bl	800bf78 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a43e:	f001 fd65 	bl	800bf0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a448:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a44a:	e011      	b.n	800a470 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	691b      	ldr	r3, [r3, #16]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d012      	beq.n	800a47a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	3310      	adds	r3, #16
 800a458:	4618      	mov	r0, r3
 800a45a:	f000 fe2d 	bl	800b0b8 <xTaskRemoveFromEventList>
 800a45e:	4603      	mov	r3, r0
 800a460:	2b00      	cmp	r3, #0
 800a462:	d001      	beq.n	800a468 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a464:	f000 ff0c 	bl	800b280 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a468:	7bbb      	ldrb	r3, [r7, #14]
 800a46a:	3b01      	subs	r3, #1
 800a46c:	b2db      	uxtb	r3, r3
 800a46e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a470:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a474:	2b00      	cmp	r3, #0
 800a476:	dce9      	bgt.n	800a44c <prvUnlockQueue+0x60>
 800a478:	e000      	b.n	800a47c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a47a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	22ff      	movs	r2, #255	@ 0xff
 800a480:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a484:	f001 fd78 	bl	800bf78 <vPortExitCritical>
}
 800a488:	bf00      	nop
 800a48a:	3710      	adds	r7, #16
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}

0800a490 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b084      	sub	sp, #16
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a498:	f001 fd38 	bl	800bf0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d102      	bne.n	800a4aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	60fb      	str	r3, [r7, #12]
 800a4a8:	e001      	b.n	800a4ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a4ae:	f001 fd63 	bl	800bf78 <vPortExitCritical>

	return xReturn;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3710      	adds	r7, #16
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}

0800a4bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b084      	sub	sp, #16
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a4c4:	f001 fd22 	bl	800bf0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4d0:	429a      	cmp	r2, r3
 800a4d2:	d102      	bne.n	800a4da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	60fb      	str	r3, [r7, #12]
 800a4d8:	e001      	b.n	800a4de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a4de:	f001 fd4b 	bl	800bf78 <vPortExitCritical>

	return xReturn;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3710      	adds	r7, #16
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}

0800a4ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b085      	sub	sp, #20
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
 800a4f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	60fb      	str	r3, [r7, #12]
 800a4fa:	e014      	b.n	800a526 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a4fc:	4a0f      	ldr	r2, [pc, #60]	@ (800a53c <vQueueAddToRegistry+0x50>)
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d10b      	bne.n	800a520 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a508:	490c      	ldr	r1, [pc, #48]	@ (800a53c <vQueueAddToRegistry+0x50>)
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	683a      	ldr	r2, [r7, #0]
 800a50e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a512:	4a0a      	ldr	r2, [pc, #40]	@ (800a53c <vQueueAddToRegistry+0x50>)
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	00db      	lsls	r3, r3, #3
 800a518:	4413      	add	r3, r2
 800a51a:	687a      	ldr	r2, [r7, #4]
 800a51c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a51e:	e006      	b.n	800a52e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	3301      	adds	r3, #1
 800a524:	60fb      	str	r3, [r7, #12]
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	2b07      	cmp	r3, #7
 800a52a:	d9e7      	bls.n	800a4fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a52c:	bf00      	nop
 800a52e:	bf00      	nop
 800a530:	3714      	adds	r7, #20
 800a532:	46bd      	mov	sp, r7
 800a534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a538:	4770      	bx	lr
 800a53a:	bf00      	nop
 800a53c:	20001168 	.word	0x20001168

0800a540 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a540:	b580      	push	{r7, lr}
 800a542:	b086      	sub	sp, #24
 800a544:	af00      	add	r7, sp, #0
 800a546:	60f8      	str	r0, [r7, #12]
 800a548:	60b9      	str	r1, [r7, #8]
 800a54a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a550:	f001 fcdc 	bl	800bf0c <vPortEnterCritical>
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a55a:	b25b      	sxtb	r3, r3
 800a55c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a560:	d103      	bne.n	800a56a <vQueueWaitForMessageRestricted+0x2a>
 800a562:	697b      	ldr	r3, [r7, #20]
 800a564:	2200      	movs	r2, #0
 800a566:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a570:	b25b      	sxtb	r3, r3
 800a572:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a576:	d103      	bne.n	800a580 <vQueueWaitForMessageRestricted+0x40>
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	2200      	movs	r2, #0
 800a57c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a580:	f001 fcfa 	bl	800bf78 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a584:	697b      	ldr	r3, [r7, #20]
 800a586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d106      	bne.n	800a59a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a58c:	697b      	ldr	r3, [r7, #20]
 800a58e:	3324      	adds	r3, #36	@ 0x24
 800a590:	687a      	ldr	r2, [r7, #4]
 800a592:	68b9      	ldr	r1, [r7, #8]
 800a594:	4618      	mov	r0, r3
 800a596:	f000 fd61 	bl	800b05c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a59a:	6978      	ldr	r0, [r7, #20]
 800a59c:	f7ff ff26 	bl	800a3ec <prvUnlockQueue>
	}
 800a5a0:	bf00      	nop
 800a5a2:	3718      	adds	r7, #24
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}

0800a5a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b08e      	sub	sp, #56	@ 0x38
 800a5ac:	af04      	add	r7, sp, #16
 800a5ae:	60f8      	str	r0, [r7, #12]
 800a5b0:	60b9      	str	r1, [r7, #8]
 800a5b2:	607a      	str	r2, [r7, #4]
 800a5b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a5b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d10d      	bne.n	800a5d8 <xTaskCreateStatic+0x30>
	__asm volatile
 800a5bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5c0:	b672      	cpsid	i
 800a5c2:	f383 8811 	msr	BASEPRI, r3
 800a5c6:	f3bf 8f6f 	isb	sy
 800a5ca:	f3bf 8f4f 	dsb	sy
 800a5ce:	b662      	cpsie	i
 800a5d0:	623b      	str	r3, [r7, #32]
}
 800a5d2:	bf00      	nop
 800a5d4:	bf00      	nop
 800a5d6:	e7fd      	b.n	800a5d4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800a5d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d10d      	bne.n	800a5fa <xTaskCreateStatic+0x52>
	__asm volatile
 800a5de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5e2:	b672      	cpsid	i
 800a5e4:	f383 8811 	msr	BASEPRI, r3
 800a5e8:	f3bf 8f6f 	isb	sy
 800a5ec:	f3bf 8f4f 	dsb	sy
 800a5f0:	b662      	cpsie	i
 800a5f2:	61fb      	str	r3, [r7, #28]
}
 800a5f4:	bf00      	nop
 800a5f6:	bf00      	nop
 800a5f8:	e7fd      	b.n	800a5f6 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a5fa:	23a8      	movs	r3, #168	@ 0xa8
 800a5fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	2ba8      	cmp	r3, #168	@ 0xa8
 800a602:	d00d      	beq.n	800a620 <xTaskCreateStatic+0x78>
	__asm volatile
 800a604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a608:	b672      	cpsid	i
 800a60a:	f383 8811 	msr	BASEPRI, r3
 800a60e:	f3bf 8f6f 	isb	sy
 800a612:	f3bf 8f4f 	dsb	sy
 800a616:	b662      	cpsie	i
 800a618:	61bb      	str	r3, [r7, #24]
}
 800a61a:	bf00      	nop
 800a61c:	bf00      	nop
 800a61e:	e7fd      	b.n	800a61c <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a620:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a624:	2b00      	cmp	r3, #0
 800a626:	d01e      	beq.n	800a666 <xTaskCreateStatic+0xbe>
 800a628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d01b      	beq.n	800a666 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a62e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a630:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a634:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a636:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a63a:	2202      	movs	r2, #2
 800a63c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a640:	2300      	movs	r3, #0
 800a642:	9303      	str	r3, [sp, #12]
 800a644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a646:	9302      	str	r3, [sp, #8]
 800a648:	f107 0314 	add.w	r3, r7, #20
 800a64c:	9301      	str	r3, [sp, #4]
 800a64e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a650:	9300      	str	r3, [sp, #0]
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	687a      	ldr	r2, [r7, #4]
 800a656:	68b9      	ldr	r1, [r7, #8]
 800a658:	68f8      	ldr	r0, [r7, #12]
 800a65a:	f000 f851 	bl	800a700 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a65e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a660:	f000 f8f8 	bl	800a854 <prvAddNewTaskToReadyList>
 800a664:	e001      	b.n	800a66a <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800a666:	2300      	movs	r3, #0
 800a668:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a66a:	697b      	ldr	r3, [r7, #20]
	}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3728      	adds	r7, #40	@ 0x28
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}

0800a674 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a674:	b580      	push	{r7, lr}
 800a676:	b08c      	sub	sp, #48	@ 0x30
 800a678:	af04      	add	r7, sp, #16
 800a67a:	60f8      	str	r0, [r7, #12]
 800a67c:	60b9      	str	r1, [r7, #8]
 800a67e:	603b      	str	r3, [r7, #0]
 800a680:	4613      	mov	r3, r2
 800a682:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a684:	88fb      	ldrh	r3, [r7, #6]
 800a686:	009b      	lsls	r3, r3, #2
 800a688:	4618      	mov	r0, r3
 800a68a:	f001 fd6d 	bl	800c168 <pvPortMalloc>
 800a68e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a690:	697b      	ldr	r3, [r7, #20]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d00e      	beq.n	800a6b4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a696:	20a8      	movs	r0, #168	@ 0xa8
 800a698:	f001 fd66 	bl	800c168 <pvPortMalloc>
 800a69c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a69e:	69fb      	ldr	r3, [r7, #28]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d003      	beq.n	800a6ac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a6a4:	69fb      	ldr	r3, [r7, #28]
 800a6a6:	697a      	ldr	r2, [r7, #20]
 800a6a8:	631a      	str	r2, [r3, #48]	@ 0x30
 800a6aa:	e005      	b.n	800a6b8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a6ac:	6978      	ldr	r0, [r7, #20]
 800a6ae:	f001 fe29 	bl	800c304 <vPortFree>
 800a6b2:	e001      	b.n	800a6b8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a6b8:	69fb      	ldr	r3, [r7, #28]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d017      	beq.n	800a6ee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a6be:	69fb      	ldr	r3, [r7, #28]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a6c6:	88fa      	ldrh	r2, [r7, #6]
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	9303      	str	r3, [sp, #12]
 800a6cc:	69fb      	ldr	r3, [r7, #28]
 800a6ce:	9302      	str	r3, [sp, #8]
 800a6d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6d2:	9301      	str	r3, [sp, #4]
 800a6d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6d6:	9300      	str	r3, [sp, #0]
 800a6d8:	683b      	ldr	r3, [r7, #0]
 800a6da:	68b9      	ldr	r1, [r7, #8]
 800a6dc:	68f8      	ldr	r0, [r7, #12]
 800a6de:	f000 f80f 	bl	800a700 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a6e2:	69f8      	ldr	r0, [r7, #28]
 800a6e4:	f000 f8b6 	bl	800a854 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	61bb      	str	r3, [r7, #24]
 800a6ec:	e002      	b.n	800a6f4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a6ee:	f04f 33ff 	mov.w	r3, #4294967295
 800a6f2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a6f4:	69bb      	ldr	r3, [r7, #24]
	}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	3720      	adds	r7, #32
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}
	...

0800a700 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b088      	sub	sp, #32
 800a704:	af00      	add	r7, sp, #0
 800a706:	60f8      	str	r0, [r7, #12]
 800a708:	60b9      	str	r1, [r7, #8]
 800a70a:	607a      	str	r2, [r7, #4]
 800a70c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a70e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a710:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	009b      	lsls	r3, r3, #2
 800a716:	461a      	mov	r2, r3
 800a718:	21a5      	movs	r1, #165	@ 0xa5
 800a71a:	f004 f846 	bl	800e7aa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a71e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a720:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a722:	6879      	ldr	r1, [r7, #4]
 800a724:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800a728:	440b      	add	r3, r1
 800a72a:	009b      	lsls	r3, r3, #2
 800a72c:	4413      	add	r3, r2
 800a72e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a730:	69bb      	ldr	r3, [r7, #24]
 800a732:	f023 0307 	bic.w	r3, r3, #7
 800a736:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a738:	69bb      	ldr	r3, [r7, #24]
 800a73a:	f003 0307 	and.w	r3, r3, #7
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d00d      	beq.n	800a75e <prvInitialiseNewTask+0x5e>
	__asm volatile
 800a742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a746:	b672      	cpsid	i
 800a748:	f383 8811 	msr	BASEPRI, r3
 800a74c:	f3bf 8f6f 	isb	sy
 800a750:	f3bf 8f4f 	dsb	sy
 800a754:	b662      	cpsie	i
 800a756:	617b      	str	r3, [r7, #20]
}
 800a758:	bf00      	nop
 800a75a:	bf00      	nop
 800a75c:	e7fd      	b.n	800a75a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d01f      	beq.n	800a7a4 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a764:	2300      	movs	r3, #0
 800a766:	61fb      	str	r3, [r7, #28]
 800a768:	e012      	b.n	800a790 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a76a:	68ba      	ldr	r2, [r7, #8]
 800a76c:	69fb      	ldr	r3, [r7, #28]
 800a76e:	4413      	add	r3, r2
 800a770:	7819      	ldrb	r1, [r3, #0]
 800a772:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a774:	69fb      	ldr	r3, [r7, #28]
 800a776:	4413      	add	r3, r2
 800a778:	3334      	adds	r3, #52	@ 0x34
 800a77a:	460a      	mov	r2, r1
 800a77c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a77e:	68ba      	ldr	r2, [r7, #8]
 800a780:	69fb      	ldr	r3, [r7, #28]
 800a782:	4413      	add	r3, r2
 800a784:	781b      	ldrb	r3, [r3, #0]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d006      	beq.n	800a798 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a78a:	69fb      	ldr	r3, [r7, #28]
 800a78c:	3301      	adds	r3, #1
 800a78e:	61fb      	str	r3, [r7, #28]
 800a790:	69fb      	ldr	r3, [r7, #28]
 800a792:	2b0f      	cmp	r3, #15
 800a794:	d9e9      	bls.n	800a76a <prvInitialiseNewTask+0x6a>
 800a796:	e000      	b.n	800a79a <prvInitialiseNewTask+0x9a>
			{
				break;
 800a798:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a79a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a79c:	2200      	movs	r2, #0
 800a79e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a7a2:	e003      	b.n	800a7ac <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a7a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a7ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7ae:	2b37      	cmp	r3, #55	@ 0x37
 800a7b0:	d901      	bls.n	800a7b6 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a7b2:	2337      	movs	r3, #55	@ 0x37
 800a7b4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a7b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a7ba:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a7bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a7c0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a7c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a7c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7ca:	3304      	adds	r3, #4
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f7ff f93d 	bl	8009a4c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a7d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7d4:	3318      	adds	r3, #24
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f7ff f938 	bl	8009a4c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a7dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a7e0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7e4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a7e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7ea:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a7ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a7f0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a7f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a7fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a804:	3354      	adds	r3, #84	@ 0x54
 800a806:	224c      	movs	r2, #76	@ 0x4c
 800a808:	2100      	movs	r1, #0
 800a80a:	4618      	mov	r0, r3
 800a80c:	f003 ffcd 	bl	800e7aa <memset>
 800a810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a812:	4a0d      	ldr	r2, [pc, #52]	@ (800a848 <prvInitialiseNewTask+0x148>)
 800a814:	659a      	str	r2, [r3, #88]	@ 0x58
 800a816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a818:	4a0c      	ldr	r2, [pc, #48]	@ (800a84c <prvInitialiseNewTask+0x14c>)
 800a81a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a81c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a81e:	4a0c      	ldr	r2, [pc, #48]	@ (800a850 <prvInitialiseNewTask+0x150>)
 800a820:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a822:	683a      	ldr	r2, [r7, #0]
 800a824:	68f9      	ldr	r1, [r7, #12]
 800a826:	69b8      	ldr	r0, [r7, #24]
 800a828:	f001 fa62 	bl	800bcf0 <pxPortInitialiseStack>
 800a82c:	4602      	mov	r2, r0
 800a82e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a830:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a834:	2b00      	cmp	r3, #0
 800a836:	d002      	beq.n	800a83e <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a83a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a83c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a83e:	bf00      	nop
 800a840:	3720      	adds	r7, #32
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}
 800a846:	bf00      	nop
 800a848:	2000fc24 	.word	0x2000fc24
 800a84c:	2000fc8c 	.word	0x2000fc8c
 800a850:	2000fcf4 	.word	0x2000fcf4

0800a854 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b082      	sub	sp, #8
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a85c:	f001 fb56 	bl	800bf0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a860:	4b2d      	ldr	r3, [pc, #180]	@ (800a918 <prvAddNewTaskToReadyList+0xc4>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	3301      	adds	r3, #1
 800a866:	4a2c      	ldr	r2, [pc, #176]	@ (800a918 <prvAddNewTaskToReadyList+0xc4>)
 800a868:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a86a:	4b2c      	ldr	r3, [pc, #176]	@ (800a91c <prvAddNewTaskToReadyList+0xc8>)
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d109      	bne.n	800a886 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a872:	4a2a      	ldr	r2, [pc, #168]	@ (800a91c <prvAddNewTaskToReadyList+0xc8>)
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a878:	4b27      	ldr	r3, [pc, #156]	@ (800a918 <prvAddNewTaskToReadyList+0xc4>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	2b01      	cmp	r3, #1
 800a87e:	d110      	bne.n	800a8a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a880:	f000 fd22 	bl	800b2c8 <prvInitialiseTaskLists>
 800a884:	e00d      	b.n	800a8a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a886:	4b26      	ldr	r3, [pc, #152]	@ (800a920 <prvAddNewTaskToReadyList+0xcc>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d109      	bne.n	800a8a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a88e:	4b23      	ldr	r3, [pc, #140]	@ (800a91c <prvAddNewTaskToReadyList+0xc8>)
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a898:	429a      	cmp	r2, r3
 800a89a:	d802      	bhi.n	800a8a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a89c:	4a1f      	ldr	r2, [pc, #124]	@ (800a91c <prvAddNewTaskToReadyList+0xc8>)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a8a2:	4b20      	ldr	r3, [pc, #128]	@ (800a924 <prvAddNewTaskToReadyList+0xd0>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	3301      	adds	r3, #1
 800a8a8:	4a1e      	ldr	r2, [pc, #120]	@ (800a924 <prvAddNewTaskToReadyList+0xd0>)
 800a8aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a8ac:	4b1d      	ldr	r3, [pc, #116]	@ (800a924 <prvAddNewTaskToReadyList+0xd0>)
 800a8ae:	681a      	ldr	r2, [r3, #0]
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8b8:	4b1b      	ldr	r3, [pc, #108]	@ (800a928 <prvAddNewTaskToReadyList+0xd4>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	429a      	cmp	r2, r3
 800a8be:	d903      	bls.n	800a8c8 <prvAddNewTaskToReadyList+0x74>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8c4:	4a18      	ldr	r2, [pc, #96]	@ (800a928 <prvAddNewTaskToReadyList+0xd4>)
 800a8c6:	6013      	str	r3, [r2, #0]
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8cc:	4613      	mov	r3, r2
 800a8ce:	009b      	lsls	r3, r3, #2
 800a8d0:	4413      	add	r3, r2
 800a8d2:	009b      	lsls	r3, r3, #2
 800a8d4:	4a15      	ldr	r2, [pc, #84]	@ (800a92c <prvAddNewTaskToReadyList+0xd8>)
 800a8d6:	441a      	add	r2, r3
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	3304      	adds	r3, #4
 800a8dc:	4619      	mov	r1, r3
 800a8de:	4610      	mov	r0, r2
 800a8e0:	f7ff f8c1 	bl	8009a66 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a8e4:	f001 fb48 	bl	800bf78 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a8e8:	4b0d      	ldr	r3, [pc, #52]	@ (800a920 <prvAddNewTaskToReadyList+0xcc>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d00e      	beq.n	800a90e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a8f0:	4b0a      	ldr	r3, [pc, #40]	@ (800a91c <prvAddNewTaskToReadyList+0xc8>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8fa:	429a      	cmp	r2, r3
 800a8fc:	d207      	bcs.n	800a90e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a8fe:	4b0c      	ldr	r3, [pc, #48]	@ (800a930 <prvAddNewTaskToReadyList+0xdc>)
 800a900:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a904:	601a      	str	r2, [r3, #0]
 800a906:	f3bf 8f4f 	dsb	sy
 800a90a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a90e:	bf00      	nop
 800a910:	3708      	adds	r7, #8
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}
 800a916:	bf00      	nop
 800a918:	2000167c 	.word	0x2000167c
 800a91c:	200011a8 	.word	0x200011a8
 800a920:	20001688 	.word	0x20001688
 800a924:	20001698 	.word	0x20001698
 800a928:	20001684 	.word	0x20001684
 800a92c:	200011ac 	.word	0x200011ac
 800a930:	e000ed04 	.word	0xe000ed04

0800a934 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a934:	b580      	push	{r7, lr}
 800a936:	b084      	sub	sp, #16
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a93c:	2300      	movs	r3, #0
 800a93e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d01a      	beq.n	800a97c <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a946:	4b15      	ldr	r3, [pc, #84]	@ (800a99c <vTaskDelay+0x68>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d00d      	beq.n	800a96a <vTaskDelay+0x36>
	__asm volatile
 800a94e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a952:	b672      	cpsid	i
 800a954:	f383 8811 	msr	BASEPRI, r3
 800a958:	f3bf 8f6f 	isb	sy
 800a95c:	f3bf 8f4f 	dsb	sy
 800a960:	b662      	cpsie	i
 800a962:	60bb      	str	r3, [r7, #8]
}
 800a964:	bf00      	nop
 800a966:	bf00      	nop
 800a968:	e7fd      	b.n	800a966 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800a96a:	f000 f949 	bl	800ac00 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a96e:	2100      	movs	r1, #0
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f000 fe01 	bl	800b578 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a976:	f000 f951 	bl	800ac1c <xTaskResumeAll>
 800a97a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d107      	bne.n	800a992 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800a982:	4b07      	ldr	r3, [pc, #28]	@ (800a9a0 <vTaskDelay+0x6c>)
 800a984:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a988:	601a      	str	r2, [r3, #0]
 800a98a:	f3bf 8f4f 	dsb	sy
 800a98e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a992:	bf00      	nop
 800a994:	3710      	adds	r7, #16
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}
 800a99a:	bf00      	nop
 800a99c:	200016a4 	.word	0x200016a4
 800a9a0:	e000ed04 	.word	0xe000ed04

0800a9a4 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
	{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b084      	sub	sp, #16
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
	TCB_t const *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 800a9ac:	f001 faae 	bl	800bf0c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the task
			that called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d102      	bne.n	800a9bc <uxTaskPriorityGet+0x18>
 800a9b6:	4b07      	ldr	r3, [pc, #28]	@ (800a9d4 <uxTaskPriorityGet+0x30>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	e000      	b.n	800a9be <uxTaskPriorityGet+0x1a>
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9c4:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
 800a9c6:	f001 fad7 	bl	800bf78 <vPortExitCritical>

		return uxReturn;
 800a9ca:	68bb      	ldr	r3, [r7, #8]
	}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	3710      	adds	r7, #16
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}
 800a9d4:	200011a8 	.word	0x200011a8

0800a9d8 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b088      	sub	sp, #32
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
 800a9e0:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	2b37      	cmp	r3, #55	@ 0x37
 800a9ea:	d90d      	bls.n	800aa08 <vTaskPrioritySet+0x30>
	__asm volatile
 800a9ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9f0:	b672      	cpsid	i
 800a9f2:	f383 8811 	msr	BASEPRI, r3
 800a9f6:	f3bf 8f6f 	isb	sy
 800a9fa:	f3bf 8f4f 	dsb	sy
 800a9fe:	b662      	cpsie	i
 800aa00:	60fb      	str	r3, [r7, #12]
}
 800aa02:	bf00      	nop
 800aa04:	bf00      	nop
 800aa06:	e7fd      	b.n	800aa04 <vTaskPrioritySet+0x2c>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	2b37      	cmp	r3, #55	@ 0x37
 800aa0c:	d901      	bls.n	800aa12 <vTaskPrioritySet+0x3a>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800aa0e:	2337      	movs	r3, #55	@ 0x37
 800aa10:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 800aa12:	f001 fa7b 	bl	800bf0c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d102      	bne.n	800aa22 <vTaskPrioritySet+0x4a>
 800aa1c:	4b3a      	ldr	r3, [pc, #232]	@ (800ab08 <vTaskPrioritySet+0x130>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	e000      	b.n	800aa24 <vTaskPrioritySet+0x4c>
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800aa26:	69bb      	ldr	r3, [r7, #24]
 800aa28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa2a:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 800aa2c:	697a      	ldr	r2, [r7, #20]
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	429a      	cmp	r2, r3
 800aa32:	d063      	beq.n	800aafc <vTaskPrioritySet+0x124>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 800aa34:	683a      	ldr	r2, [r7, #0]
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	d90d      	bls.n	800aa58 <vTaskPrioritySet+0x80>
				{
					if( pxTCB != pxCurrentTCB )
 800aa3c:	4b32      	ldr	r3, [pc, #200]	@ (800ab08 <vTaskPrioritySet+0x130>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	69ba      	ldr	r2, [r7, #24]
 800aa42:	429a      	cmp	r2, r3
 800aa44:	d00f      	beq.n	800aa66 <vTaskPrioritySet+0x8e>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800aa46:	4b30      	ldr	r3, [pc, #192]	@ (800ab08 <vTaskPrioritySet+0x130>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa4c:	683a      	ldr	r2, [r7, #0]
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	d309      	bcc.n	800aa66 <vTaskPrioritySet+0x8e>
						{
							xYieldRequired = pdTRUE;
 800aa52:	2301      	movs	r3, #1
 800aa54:	61fb      	str	r3, [r7, #28]
 800aa56:	e006      	b.n	800aa66 <vTaskPrioritySet+0x8e>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 800aa58:	4b2b      	ldr	r3, [pc, #172]	@ (800ab08 <vTaskPrioritySet+0x130>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	69ba      	ldr	r2, [r7, #24]
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d101      	bne.n	800aa66 <vTaskPrioritySet+0x8e>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 800aa62:	2301      	movs	r3, #1
 800aa64:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800aa66:	69bb      	ldr	r3, [r7, #24]
 800aa68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa6a:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800aa6c:	69bb      	ldr	r3, [r7, #24]
 800aa6e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aa70:	69bb      	ldr	r3, [r7, #24]
 800aa72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa74:	429a      	cmp	r2, r3
 800aa76:	d102      	bne.n	800aa7e <vTaskPrioritySet+0xa6>
					{
						pxTCB->uxPriority = uxNewPriority;
 800aa78:	69bb      	ldr	r3, [r7, #24]
 800aa7a:	683a      	ldr	r2, [r7, #0]
 800aa7c:	62da      	str	r2, [r3, #44]	@ 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 800aa7e:	69bb      	ldr	r3, [r7, #24]
 800aa80:	683a      	ldr	r2, [r7, #0]
 800aa82:	64da      	str	r2, [r3, #76]	@ 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800aa84:	69bb      	ldr	r3, [r7, #24]
 800aa86:	699b      	ldr	r3, [r3, #24]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	db04      	blt.n	800aa96 <vTaskPrioritySet+0xbe>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800aa92:	69bb      	ldr	r3, [r7, #24]
 800aa94:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800aa96:	69bb      	ldr	r3, [r7, #24]
 800aa98:	6959      	ldr	r1, [r3, #20]
 800aa9a:	693a      	ldr	r2, [r7, #16]
 800aa9c:	4613      	mov	r3, r2
 800aa9e:	009b      	lsls	r3, r3, #2
 800aaa0:	4413      	add	r3, r2
 800aaa2:	009b      	lsls	r3, r3, #2
 800aaa4:	4a19      	ldr	r2, [pc, #100]	@ (800ab0c <vTaskPrioritySet+0x134>)
 800aaa6:	4413      	add	r3, r2
 800aaa8:	4299      	cmp	r1, r3
 800aaaa:	d11c      	bne.n	800aae6 <vTaskPrioritySet+0x10e>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aaac:	69bb      	ldr	r3, [r7, #24]
 800aaae:	3304      	adds	r3, #4
 800aab0:	4618      	mov	r0, r3
 800aab2:	f7ff f835 	bl	8009b20 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 800aab6:	69bb      	ldr	r3, [r7, #24]
 800aab8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aaba:	4b15      	ldr	r3, [pc, #84]	@ (800ab10 <vTaskPrioritySet+0x138>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	429a      	cmp	r2, r3
 800aac0:	d903      	bls.n	800aaca <vTaskPrioritySet+0xf2>
 800aac2:	69bb      	ldr	r3, [r7, #24]
 800aac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aac6:	4a12      	ldr	r2, [pc, #72]	@ (800ab10 <vTaskPrioritySet+0x138>)
 800aac8:	6013      	str	r3, [r2, #0]
 800aaca:	69bb      	ldr	r3, [r7, #24]
 800aacc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aace:	4613      	mov	r3, r2
 800aad0:	009b      	lsls	r3, r3, #2
 800aad2:	4413      	add	r3, r2
 800aad4:	009b      	lsls	r3, r3, #2
 800aad6:	4a0d      	ldr	r2, [pc, #52]	@ (800ab0c <vTaskPrioritySet+0x134>)
 800aad8:	441a      	add	r2, r3
 800aada:	69bb      	ldr	r3, [r7, #24]
 800aadc:	3304      	adds	r3, #4
 800aade:	4619      	mov	r1, r3
 800aae0:	4610      	mov	r0, r2
 800aae2:	f7fe ffc0 	bl	8009a66 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 800aae6:	69fb      	ldr	r3, [r7, #28]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d007      	beq.n	800aafc <vTaskPrioritySet+0x124>
				{
					taskYIELD_IF_USING_PREEMPTION();
 800aaec:	4b09      	ldr	r3, [pc, #36]	@ (800ab14 <vTaskPrioritySet+0x13c>)
 800aaee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aaf2:	601a      	str	r2, [r3, #0]
 800aaf4:	f3bf 8f4f 	dsb	sy
 800aaf8:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 800aafc:	f001 fa3c 	bl	800bf78 <vPortExitCritical>
	}
 800ab00:	bf00      	nop
 800ab02:	3720      	adds	r7, #32
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}
 800ab08:	200011a8 	.word	0x200011a8
 800ab0c:	200011ac 	.word	0x200011ac
 800ab10:	20001684 	.word	0x20001684
 800ab14:	e000ed04 	.word	0xe000ed04

0800ab18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b08a      	sub	sp, #40	@ 0x28
 800ab1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ab22:	2300      	movs	r3, #0
 800ab24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ab26:	463a      	mov	r2, r7
 800ab28:	1d39      	adds	r1, r7, #4
 800ab2a:	f107 0308 	add.w	r3, r7, #8
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f7fe ff38 	bl	80099a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ab34:	6839      	ldr	r1, [r7, #0]
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	68ba      	ldr	r2, [r7, #8]
 800ab3a:	9202      	str	r2, [sp, #8]
 800ab3c:	9301      	str	r3, [sp, #4]
 800ab3e:	2300      	movs	r3, #0
 800ab40:	9300      	str	r3, [sp, #0]
 800ab42:	2300      	movs	r3, #0
 800ab44:	460a      	mov	r2, r1
 800ab46:	4926      	ldr	r1, [pc, #152]	@ (800abe0 <vTaskStartScheduler+0xc8>)
 800ab48:	4826      	ldr	r0, [pc, #152]	@ (800abe4 <vTaskStartScheduler+0xcc>)
 800ab4a:	f7ff fd2d 	bl	800a5a8 <xTaskCreateStatic>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	4a25      	ldr	r2, [pc, #148]	@ (800abe8 <vTaskStartScheduler+0xd0>)
 800ab52:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ab54:	4b24      	ldr	r3, [pc, #144]	@ (800abe8 <vTaskStartScheduler+0xd0>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d002      	beq.n	800ab62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	617b      	str	r3, [r7, #20]
 800ab60:	e001      	b.n	800ab66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ab62:	2300      	movs	r3, #0
 800ab64:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	d102      	bne.n	800ab72 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ab6c:	f000 fd58 	bl	800b620 <xTimerCreateTimerTask>
 800ab70:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ab72:	697b      	ldr	r3, [r7, #20]
 800ab74:	2b01      	cmp	r3, #1
 800ab76:	d11d      	bne.n	800abb4 <vTaskStartScheduler+0x9c>
	__asm volatile
 800ab78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab7c:	b672      	cpsid	i
 800ab7e:	f383 8811 	msr	BASEPRI, r3
 800ab82:	f3bf 8f6f 	isb	sy
 800ab86:	f3bf 8f4f 	dsb	sy
 800ab8a:	b662      	cpsie	i
 800ab8c:	613b      	str	r3, [r7, #16]
}
 800ab8e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ab90:	4b16      	ldr	r3, [pc, #88]	@ (800abec <vTaskStartScheduler+0xd4>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	3354      	adds	r3, #84	@ 0x54
 800ab96:	4a16      	ldr	r2, [pc, #88]	@ (800abf0 <vTaskStartScheduler+0xd8>)
 800ab98:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ab9a:	4b16      	ldr	r3, [pc, #88]	@ (800abf4 <vTaskStartScheduler+0xdc>)
 800ab9c:	f04f 32ff 	mov.w	r2, #4294967295
 800aba0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800aba2:	4b15      	ldr	r3, [pc, #84]	@ (800abf8 <vTaskStartScheduler+0xe0>)
 800aba4:	2201      	movs	r2, #1
 800aba6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800aba8:	4b14      	ldr	r3, [pc, #80]	@ (800abfc <vTaskStartScheduler+0xe4>)
 800abaa:	2200      	movs	r2, #0
 800abac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800abae:	f001 f92f 	bl	800be10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800abb2:	e011      	b.n	800abd8 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abba:	d10d      	bne.n	800abd8 <vTaskStartScheduler+0xc0>
	__asm volatile
 800abbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abc0:	b672      	cpsid	i
 800abc2:	f383 8811 	msr	BASEPRI, r3
 800abc6:	f3bf 8f6f 	isb	sy
 800abca:	f3bf 8f4f 	dsb	sy
 800abce:	b662      	cpsie	i
 800abd0:	60fb      	str	r3, [r7, #12]
}
 800abd2:	bf00      	nop
 800abd4:	bf00      	nop
 800abd6:	e7fd      	b.n	800abd4 <vTaskStartScheduler+0xbc>
}
 800abd8:	bf00      	nop
 800abda:	3718      	adds	r7, #24
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}
 800abe0:	08010598 	.word	0x08010598
 800abe4:	0800b299 	.word	0x0800b299
 800abe8:	200016a0 	.word	0x200016a0
 800abec:	200011a8 	.word	0x200011a8
 800abf0:	2000011c 	.word	0x2000011c
 800abf4:	2000169c 	.word	0x2000169c
 800abf8:	20001688 	.word	0x20001688
 800abfc:	20001680 	.word	0x20001680

0800ac00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ac00:	b480      	push	{r7}
 800ac02:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800ac04:	4b04      	ldr	r3, [pc, #16]	@ (800ac18 <vTaskSuspendAll+0x18>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	3301      	adds	r3, #1
 800ac0a:	4a03      	ldr	r2, [pc, #12]	@ (800ac18 <vTaskSuspendAll+0x18>)
 800ac0c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800ac0e:	bf00      	nop
 800ac10:	46bd      	mov	sp, r7
 800ac12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac16:	4770      	bx	lr
 800ac18:	200016a4 	.word	0x200016a4

0800ac1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b084      	sub	sp, #16
 800ac20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ac22:	2300      	movs	r3, #0
 800ac24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ac26:	2300      	movs	r3, #0
 800ac28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ac2a:	4b43      	ldr	r3, [pc, #268]	@ (800ad38 <xTaskResumeAll+0x11c>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d10d      	bne.n	800ac4e <xTaskResumeAll+0x32>
	__asm volatile
 800ac32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac36:	b672      	cpsid	i
 800ac38:	f383 8811 	msr	BASEPRI, r3
 800ac3c:	f3bf 8f6f 	isb	sy
 800ac40:	f3bf 8f4f 	dsb	sy
 800ac44:	b662      	cpsie	i
 800ac46:	603b      	str	r3, [r7, #0]
}
 800ac48:	bf00      	nop
 800ac4a:	bf00      	nop
 800ac4c:	e7fd      	b.n	800ac4a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ac4e:	f001 f95d 	bl	800bf0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ac52:	4b39      	ldr	r3, [pc, #228]	@ (800ad38 <xTaskResumeAll+0x11c>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	3b01      	subs	r3, #1
 800ac58:	4a37      	ldr	r2, [pc, #220]	@ (800ad38 <xTaskResumeAll+0x11c>)
 800ac5a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac5c:	4b36      	ldr	r3, [pc, #216]	@ (800ad38 <xTaskResumeAll+0x11c>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d162      	bne.n	800ad2a <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ac64:	4b35      	ldr	r3, [pc, #212]	@ (800ad3c <xTaskResumeAll+0x120>)
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d05e      	beq.n	800ad2a <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ac6c:	e02f      	b.n	800acce <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac6e:	4b34      	ldr	r3, [pc, #208]	@ (800ad40 <xTaskResumeAll+0x124>)
 800ac70:	68db      	ldr	r3, [r3, #12]
 800ac72:	68db      	ldr	r3, [r3, #12]
 800ac74:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	3318      	adds	r3, #24
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	f7fe ff50 	bl	8009b20 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	3304      	adds	r3, #4
 800ac84:	4618      	mov	r0, r3
 800ac86:	f7fe ff4b 	bl	8009b20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac8e:	4b2d      	ldr	r3, [pc, #180]	@ (800ad44 <xTaskResumeAll+0x128>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	429a      	cmp	r2, r3
 800ac94:	d903      	bls.n	800ac9e <xTaskResumeAll+0x82>
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac9a:	4a2a      	ldr	r2, [pc, #168]	@ (800ad44 <xTaskResumeAll+0x128>)
 800ac9c:	6013      	str	r3, [r2, #0]
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aca2:	4613      	mov	r3, r2
 800aca4:	009b      	lsls	r3, r3, #2
 800aca6:	4413      	add	r3, r2
 800aca8:	009b      	lsls	r3, r3, #2
 800acaa:	4a27      	ldr	r2, [pc, #156]	@ (800ad48 <xTaskResumeAll+0x12c>)
 800acac:	441a      	add	r2, r3
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	3304      	adds	r3, #4
 800acb2:	4619      	mov	r1, r3
 800acb4:	4610      	mov	r0, r2
 800acb6:	f7fe fed6 	bl	8009a66 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acbe:	4b23      	ldr	r3, [pc, #140]	@ (800ad4c <xTaskResumeAll+0x130>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acc4:	429a      	cmp	r2, r3
 800acc6:	d302      	bcc.n	800acce <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 800acc8:	4b21      	ldr	r3, [pc, #132]	@ (800ad50 <xTaskResumeAll+0x134>)
 800acca:	2201      	movs	r2, #1
 800accc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800acce:	4b1c      	ldr	r3, [pc, #112]	@ (800ad40 <xTaskResumeAll+0x124>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d1cb      	bne.n	800ac6e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d001      	beq.n	800ace0 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800acdc:	f000 fb9a 	bl	800b414 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ace0:	4b1c      	ldr	r3, [pc, #112]	@ (800ad54 <xTaskResumeAll+0x138>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d010      	beq.n	800ad0e <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800acec:	f000 f846 	bl	800ad7c <xTaskIncrementTick>
 800acf0:	4603      	mov	r3, r0
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d002      	beq.n	800acfc <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 800acf6:	4b16      	ldr	r3, [pc, #88]	@ (800ad50 <xTaskResumeAll+0x134>)
 800acf8:	2201      	movs	r2, #1
 800acfa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	3b01      	subs	r3, #1
 800ad00:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d1f1      	bne.n	800acec <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 800ad08:	4b12      	ldr	r3, [pc, #72]	@ (800ad54 <xTaskResumeAll+0x138>)
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ad0e:	4b10      	ldr	r3, [pc, #64]	@ (800ad50 <xTaskResumeAll+0x134>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d009      	beq.n	800ad2a <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ad16:	2301      	movs	r3, #1
 800ad18:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ad1a:	4b0f      	ldr	r3, [pc, #60]	@ (800ad58 <xTaskResumeAll+0x13c>)
 800ad1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad20:	601a      	str	r2, [r3, #0]
 800ad22:	f3bf 8f4f 	dsb	sy
 800ad26:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ad2a:	f001 f925 	bl	800bf78 <vPortExitCritical>

	return xAlreadyYielded;
 800ad2e:	68bb      	ldr	r3, [r7, #8]
}
 800ad30:	4618      	mov	r0, r3
 800ad32:	3710      	adds	r7, #16
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}
 800ad38:	200016a4 	.word	0x200016a4
 800ad3c:	2000167c 	.word	0x2000167c
 800ad40:	2000163c 	.word	0x2000163c
 800ad44:	20001684 	.word	0x20001684
 800ad48:	200011ac 	.word	0x200011ac
 800ad4c:	200011a8 	.word	0x200011a8
 800ad50:	20001690 	.word	0x20001690
 800ad54:	2000168c 	.word	0x2000168c
 800ad58:	e000ed04 	.word	0xe000ed04

0800ad5c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b083      	sub	sp, #12
 800ad60:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ad62:	4b05      	ldr	r3, [pc, #20]	@ (800ad78 <xTaskGetTickCount+0x1c>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ad68:	687b      	ldr	r3, [r7, #4]
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	370c      	adds	r7, #12
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad74:	4770      	bx	lr
 800ad76:	bf00      	nop
 800ad78:	20001680 	.word	0x20001680

0800ad7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b086      	sub	sp, #24
 800ad80:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ad82:	2300      	movs	r3, #0
 800ad84:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad86:	4b50      	ldr	r3, [pc, #320]	@ (800aec8 <xTaskIncrementTick+0x14c>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	f040 808c 	bne.w	800aea8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ad90:	4b4e      	ldr	r3, [pc, #312]	@ (800aecc <xTaskIncrementTick+0x150>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	3301      	adds	r3, #1
 800ad96:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ad98:	4a4c      	ldr	r2, [pc, #304]	@ (800aecc <xTaskIncrementTick+0x150>)
 800ad9a:	693b      	ldr	r3, [r7, #16]
 800ad9c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ad9e:	693b      	ldr	r3, [r7, #16]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d123      	bne.n	800adec <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800ada4:	4b4a      	ldr	r3, [pc, #296]	@ (800aed0 <xTaskIncrementTick+0x154>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d00d      	beq.n	800adca <xTaskIncrementTick+0x4e>
	__asm volatile
 800adae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adb2:	b672      	cpsid	i
 800adb4:	f383 8811 	msr	BASEPRI, r3
 800adb8:	f3bf 8f6f 	isb	sy
 800adbc:	f3bf 8f4f 	dsb	sy
 800adc0:	b662      	cpsie	i
 800adc2:	603b      	str	r3, [r7, #0]
}
 800adc4:	bf00      	nop
 800adc6:	bf00      	nop
 800adc8:	e7fd      	b.n	800adc6 <xTaskIncrementTick+0x4a>
 800adca:	4b41      	ldr	r3, [pc, #260]	@ (800aed0 <xTaskIncrementTick+0x154>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	60fb      	str	r3, [r7, #12]
 800add0:	4b40      	ldr	r3, [pc, #256]	@ (800aed4 <xTaskIncrementTick+0x158>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	4a3e      	ldr	r2, [pc, #248]	@ (800aed0 <xTaskIncrementTick+0x154>)
 800add6:	6013      	str	r3, [r2, #0]
 800add8:	4a3e      	ldr	r2, [pc, #248]	@ (800aed4 <xTaskIncrementTick+0x158>)
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	6013      	str	r3, [r2, #0]
 800adde:	4b3e      	ldr	r3, [pc, #248]	@ (800aed8 <xTaskIncrementTick+0x15c>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	3301      	adds	r3, #1
 800ade4:	4a3c      	ldr	r2, [pc, #240]	@ (800aed8 <xTaskIncrementTick+0x15c>)
 800ade6:	6013      	str	r3, [r2, #0]
 800ade8:	f000 fb14 	bl	800b414 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800adec:	4b3b      	ldr	r3, [pc, #236]	@ (800aedc <xTaskIncrementTick+0x160>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	693a      	ldr	r2, [r7, #16]
 800adf2:	429a      	cmp	r2, r3
 800adf4:	d349      	bcc.n	800ae8a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800adf6:	4b36      	ldr	r3, [pc, #216]	@ (800aed0 <xTaskIncrementTick+0x154>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d104      	bne.n	800ae0a <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae00:	4b36      	ldr	r3, [pc, #216]	@ (800aedc <xTaskIncrementTick+0x160>)
 800ae02:	f04f 32ff 	mov.w	r2, #4294967295
 800ae06:	601a      	str	r2, [r3, #0]
					break;
 800ae08:	e03f      	b.n	800ae8a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae0a:	4b31      	ldr	r3, [pc, #196]	@ (800aed0 <xTaskIncrementTick+0x154>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	68db      	ldr	r3, [r3, #12]
 800ae10:	68db      	ldr	r3, [r3, #12]
 800ae12:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	685b      	ldr	r3, [r3, #4]
 800ae18:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ae1a:	693a      	ldr	r2, [r7, #16]
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	429a      	cmp	r2, r3
 800ae20:	d203      	bcs.n	800ae2a <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ae22:	4a2e      	ldr	r2, [pc, #184]	@ (800aedc <xTaskIncrementTick+0x160>)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ae28:	e02f      	b.n	800ae8a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae2a:	68bb      	ldr	r3, [r7, #8]
 800ae2c:	3304      	adds	r3, #4
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f7fe fe76 	bl	8009b20 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d004      	beq.n	800ae46 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	3318      	adds	r3, #24
 800ae40:	4618      	mov	r0, r3
 800ae42:	f7fe fe6d 	bl	8009b20 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae4a:	4b25      	ldr	r3, [pc, #148]	@ (800aee0 <xTaskIncrementTick+0x164>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	429a      	cmp	r2, r3
 800ae50:	d903      	bls.n	800ae5a <xTaskIncrementTick+0xde>
 800ae52:	68bb      	ldr	r3, [r7, #8]
 800ae54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae56:	4a22      	ldr	r2, [pc, #136]	@ (800aee0 <xTaskIncrementTick+0x164>)
 800ae58:	6013      	str	r3, [r2, #0]
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae5e:	4613      	mov	r3, r2
 800ae60:	009b      	lsls	r3, r3, #2
 800ae62:	4413      	add	r3, r2
 800ae64:	009b      	lsls	r3, r3, #2
 800ae66:	4a1f      	ldr	r2, [pc, #124]	@ (800aee4 <xTaskIncrementTick+0x168>)
 800ae68:	441a      	add	r2, r3
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	3304      	adds	r3, #4
 800ae6e:	4619      	mov	r1, r3
 800ae70:	4610      	mov	r0, r2
 800ae72:	f7fe fdf8 	bl	8009a66 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae7a:	4b1b      	ldr	r3, [pc, #108]	@ (800aee8 <xTaskIncrementTick+0x16c>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d3b8      	bcc.n	800adf6 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800ae84:	2301      	movs	r3, #1
 800ae86:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ae88:	e7b5      	b.n	800adf6 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ae8a:	4b17      	ldr	r3, [pc, #92]	@ (800aee8 <xTaskIncrementTick+0x16c>)
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae90:	4914      	ldr	r1, [pc, #80]	@ (800aee4 <xTaskIncrementTick+0x168>)
 800ae92:	4613      	mov	r3, r2
 800ae94:	009b      	lsls	r3, r3, #2
 800ae96:	4413      	add	r3, r2
 800ae98:	009b      	lsls	r3, r3, #2
 800ae9a:	440b      	add	r3, r1
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	2b01      	cmp	r3, #1
 800aea0:	d907      	bls.n	800aeb2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800aea2:	2301      	movs	r3, #1
 800aea4:	617b      	str	r3, [r7, #20]
 800aea6:	e004      	b.n	800aeb2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800aea8:	4b10      	ldr	r3, [pc, #64]	@ (800aeec <xTaskIncrementTick+0x170>)
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	3301      	adds	r3, #1
 800aeae:	4a0f      	ldr	r2, [pc, #60]	@ (800aeec <xTaskIncrementTick+0x170>)
 800aeb0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800aeb2:	4b0f      	ldr	r3, [pc, #60]	@ (800aef0 <xTaskIncrementTick+0x174>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d001      	beq.n	800aebe <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800aeba:	2301      	movs	r3, #1
 800aebc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800aebe:	697b      	ldr	r3, [r7, #20]
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	3718      	adds	r7, #24
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}
 800aec8:	200016a4 	.word	0x200016a4
 800aecc:	20001680 	.word	0x20001680
 800aed0:	20001634 	.word	0x20001634
 800aed4:	20001638 	.word	0x20001638
 800aed8:	20001694 	.word	0x20001694
 800aedc:	2000169c 	.word	0x2000169c
 800aee0:	20001684 	.word	0x20001684
 800aee4:	200011ac 	.word	0x200011ac
 800aee8:	200011a8 	.word	0x200011a8
 800aeec:	2000168c 	.word	0x2000168c
 800aef0:	20001690 	.word	0x20001690

0800aef4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b086      	sub	sp, #24
 800aef8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800aefa:	4b3e      	ldr	r3, [pc, #248]	@ (800aff4 <vTaskSwitchContext+0x100>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d003      	beq.n	800af0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800af02:	4b3d      	ldr	r3, [pc, #244]	@ (800aff8 <vTaskSwitchContext+0x104>)
 800af04:	2201      	movs	r2, #1
 800af06:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800af08:	e070      	b.n	800afec <vTaskSwitchContext+0xf8>
		xYieldPending = pdFALSE;
 800af0a:	4b3b      	ldr	r3, [pc, #236]	@ (800aff8 <vTaskSwitchContext+0x104>)
 800af0c:	2200      	movs	r2, #0
 800af0e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800af10:	4b3a      	ldr	r3, [pc, #232]	@ (800affc <vTaskSwitchContext+0x108>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af16:	613b      	str	r3, [r7, #16]
 800af18:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800af1c:	60fb      	str	r3, [r7, #12]
 800af1e:	693b      	ldr	r3, [r7, #16]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	68fa      	ldr	r2, [r7, #12]
 800af24:	429a      	cmp	r2, r3
 800af26:	d111      	bne.n	800af4c <vTaskSwitchContext+0x58>
 800af28:	693b      	ldr	r3, [r7, #16]
 800af2a:	3304      	adds	r3, #4
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	68fa      	ldr	r2, [r7, #12]
 800af30:	429a      	cmp	r2, r3
 800af32:	d10b      	bne.n	800af4c <vTaskSwitchContext+0x58>
 800af34:	693b      	ldr	r3, [r7, #16]
 800af36:	3308      	adds	r3, #8
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	68fa      	ldr	r2, [r7, #12]
 800af3c:	429a      	cmp	r2, r3
 800af3e:	d105      	bne.n	800af4c <vTaskSwitchContext+0x58>
 800af40:	693b      	ldr	r3, [r7, #16]
 800af42:	330c      	adds	r3, #12
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	68fa      	ldr	r2, [r7, #12]
 800af48:	429a      	cmp	r2, r3
 800af4a:	d008      	beq.n	800af5e <vTaskSwitchContext+0x6a>
 800af4c:	4b2b      	ldr	r3, [pc, #172]	@ (800affc <vTaskSwitchContext+0x108>)
 800af4e:	681a      	ldr	r2, [r3, #0]
 800af50:	4b2a      	ldr	r3, [pc, #168]	@ (800affc <vTaskSwitchContext+0x108>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	3334      	adds	r3, #52	@ 0x34
 800af56:	4619      	mov	r1, r3
 800af58:	4610      	mov	r0, r2
 800af5a:	f7f6 fc93 	bl	8001884 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af5e:	4b28      	ldr	r3, [pc, #160]	@ (800b000 <vTaskSwitchContext+0x10c>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	617b      	str	r3, [r7, #20]
 800af64:	e013      	b.n	800af8e <vTaskSwitchContext+0x9a>
 800af66:	697b      	ldr	r3, [r7, #20]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d10d      	bne.n	800af88 <vTaskSwitchContext+0x94>
	__asm volatile
 800af6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af70:	b672      	cpsid	i
 800af72:	f383 8811 	msr	BASEPRI, r3
 800af76:	f3bf 8f6f 	isb	sy
 800af7a:	f3bf 8f4f 	dsb	sy
 800af7e:	b662      	cpsie	i
 800af80:	607b      	str	r3, [r7, #4]
}
 800af82:	bf00      	nop
 800af84:	bf00      	nop
 800af86:	e7fd      	b.n	800af84 <vTaskSwitchContext+0x90>
 800af88:	697b      	ldr	r3, [r7, #20]
 800af8a:	3b01      	subs	r3, #1
 800af8c:	617b      	str	r3, [r7, #20]
 800af8e:	491d      	ldr	r1, [pc, #116]	@ (800b004 <vTaskSwitchContext+0x110>)
 800af90:	697a      	ldr	r2, [r7, #20]
 800af92:	4613      	mov	r3, r2
 800af94:	009b      	lsls	r3, r3, #2
 800af96:	4413      	add	r3, r2
 800af98:	009b      	lsls	r3, r3, #2
 800af9a:	440b      	add	r3, r1
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d0e1      	beq.n	800af66 <vTaskSwitchContext+0x72>
 800afa2:	697a      	ldr	r2, [r7, #20]
 800afa4:	4613      	mov	r3, r2
 800afa6:	009b      	lsls	r3, r3, #2
 800afa8:	4413      	add	r3, r2
 800afaa:	009b      	lsls	r3, r3, #2
 800afac:	4a15      	ldr	r2, [pc, #84]	@ (800b004 <vTaskSwitchContext+0x110>)
 800afae:	4413      	add	r3, r2
 800afb0:	60bb      	str	r3, [r7, #8]
 800afb2:	68bb      	ldr	r3, [r7, #8]
 800afb4:	685b      	ldr	r3, [r3, #4]
 800afb6:	685a      	ldr	r2, [r3, #4]
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	605a      	str	r2, [r3, #4]
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	685a      	ldr	r2, [r3, #4]
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	3308      	adds	r3, #8
 800afc4:	429a      	cmp	r2, r3
 800afc6:	d104      	bne.n	800afd2 <vTaskSwitchContext+0xde>
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	685b      	ldr	r3, [r3, #4]
 800afcc:	685a      	ldr	r2, [r3, #4]
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	605a      	str	r2, [r3, #4]
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	685b      	ldr	r3, [r3, #4]
 800afd6:	68db      	ldr	r3, [r3, #12]
 800afd8:	4a08      	ldr	r2, [pc, #32]	@ (800affc <vTaskSwitchContext+0x108>)
 800afda:	6013      	str	r3, [r2, #0]
 800afdc:	4a08      	ldr	r2, [pc, #32]	@ (800b000 <vTaskSwitchContext+0x10c>)
 800afde:	697b      	ldr	r3, [r7, #20]
 800afe0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800afe2:	4b06      	ldr	r3, [pc, #24]	@ (800affc <vTaskSwitchContext+0x108>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	3354      	adds	r3, #84	@ 0x54
 800afe8:	4a07      	ldr	r2, [pc, #28]	@ (800b008 <vTaskSwitchContext+0x114>)
 800afea:	6013      	str	r3, [r2, #0]
}
 800afec:	bf00      	nop
 800afee:	3718      	adds	r7, #24
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}
 800aff4:	200016a4 	.word	0x200016a4
 800aff8:	20001690 	.word	0x20001690
 800affc:	200011a8 	.word	0x200011a8
 800b000:	20001684 	.word	0x20001684
 800b004:	200011ac 	.word	0x200011ac
 800b008:	2000011c 	.word	0x2000011c

0800b00c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b084      	sub	sp, #16
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
 800b014:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d10d      	bne.n	800b038 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800b01c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b020:	b672      	cpsid	i
 800b022:	f383 8811 	msr	BASEPRI, r3
 800b026:	f3bf 8f6f 	isb	sy
 800b02a:	f3bf 8f4f 	dsb	sy
 800b02e:	b662      	cpsie	i
 800b030:	60fb      	str	r3, [r7, #12]
}
 800b032:	bf00      	nop
 800b034:	bf00      	nop
 800b036:	e7fd      	b.n	800b034 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b038:	4b07      	ldr	r3, [pc, #28]	@ (800b058 <vTaskPlaceOnEventList+0x4c>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	3318      	adds	r3, #24
 800b03e:	4619      	mov	r1, r3
 800b040:	6878      	ldr	r0, [r7, #4]
 800b042:	f7fe fd34 	bl	8009aae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b046:	2101      	movs	r1, #1
 800b048:	6838      	ldr	r0, [r7, #0]
 800b04a:	f000 fa95 	bl	800b578 <prvAddCurrentTaskToDelayedList>
}
 800b04e:	bf00      	nop
 800b050:	3710      	adds	r7, #16
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}
 800b056:	bf00      	nop
 800b058:	200011a8 	.word	0x200011a8

0800b05c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b086      	sub	sp, #24
 800b060:	af00      	add	r7, sp, #0
 800b062:	60f8      	str	r0, [r7, #12]
 800b064:	60b9      	str	r1, [r7, #8]
 800b066:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d10d      	bne.n	800b08a <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 800b06e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b072:	b672      	cpsid	i
 800b074:	f383 8811 	msr	BASEPRI, r3
 800b078:	f3bf 8f6f 	isb	sy
 800b07c:	f3bf 8f4f 	dsb	sy
 800b080:	b662      	cpsie	i
 800b082:	617b      	str	r3, [r7, #20]
}
 800b084:	bf00      	nop
 800b086:	bf00      	nop
 800b088:	e7fd      	b.n	800b086 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b08a:	4b0a      	ldr	r3, [pc, #40]	@ (800b0b4 <vTaskPlaceOnEventListRestricted+0x58>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	3318      	adds	r3, #24
 800b090:	4619      	mov	r1, r3
 800b092:	68f8      	ldr	r0, [r7, #12]
 800b094:	f7fe fce7 	bl	8009a66 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d002      	beq.n	800b0a4 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 800b09e:	f04f 33ff 	mov.w	r3, #4294967295
 800b0a2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b0a4:	6879      	ldr	r1, [r7, #4]
 800b0a6:	68b8      	ldr	r0, [r7, #8]
 800b0a8:	f000 fa66 	bl	800b578 <prvAddCurrentTaskToDelayedList>
	}
 800b0ac:	bf00      	nop
 800b0ae:	3718      	adds	r7, #24
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}
 800b0b4:	200011a8 	.word	0x200011a8

0800b0b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b086      	sub	sp, #24
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	68db      	ldr	r3, [r3, #12]
 800b0c4:	68db      	ldr	r3, [r3, #12]
 800b0c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d10d      	bne.n	800b0ea <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800b0ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0d2:	b672      	cpsid	i
 800b0d4:	f383 8811 	msr	BASEPRI, r3
 800b0d8:	f3bf 8f6f 	isb	sy
 800b0dc:	f3bf 8f4f 	dsb	sy
 800b0e0:	b662      	cpsie	i
 800b0e2:	60fb      	str	r3, [r7, #12]
}
 800b0e4:	bf00      	nop
 800b0e6:	bf00      	nop
 800b0e8:	e7fd      	b.n	800b0e6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b0ea:	693b      	ldr	r3, [r7, #16]
 800b0ec:	3318      	adds	r3, #24
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f7fe fd16 	bl	8009b20 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b0f4:	4b1d      	ldr	r3, [pc, #116]	@ (800b16c <xTaskRemoveFromEventList+0xb4>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d11d      	bne.n	800b138 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b0fc:	693b      	ldr	r3, [r7, #16]
 800b0fe:	3304      	adds	r3, #4
 800b100:	4618      	mov	r0, r3
 800b102:	f7fe fd0d 	bl	8009b20 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b106:	693b      	ldr	r3, [r7, #16]
 800b108:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b10a:	4b19      	ldr	r3, [pc, #100]	@ (800b170 <xTaskRemoveFromEventList+0xb8>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	429a      	cmp	r2, r3
 800b110:	d903      	bls.n	800b11a <xTaskRemoveFromEventList+0x62>
 800b112:	693b      	ldr	r3, [r7, #16]
 800b114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b116:	4a16      	ldr	r2, [pc, #88]	@ (800b170 <xTaskRemoveFromEventList+0xb8>)
 800b118:	6013      	str	r3, [r2, #0]
 800b11a:	693b      	ldr	r3, [r7, #16]
 800b11c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b11e:	4613      	mov	r3, r2
 800b120:	009b      	lsls	r3, r3, #2
 800b122:	4413      	add	r3, r2
 800b124:	009b      	lsls	r3, r3, #2
 800b126:	4a13      	ldr	r2, [pc, #76]	@ (800b174 <xTaskRemoveFromEventList+0xbc>)
 800b128:	441a      	add	r2, r3
 800b12a:	693b      	ldr	r3, [r7, #16]
 800b12c:	3304      	adds	r3, #4
 800b12e:	4619      	mov	r1, r3
 800b130:	4610      	mov	r0, r2
 800b132:	f7fe fc98 	bl	8009a66 <vListInsertEnd>
 800b136:	e005      	b.n	800b144 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b138:	693b      	ldr	r3, [r7, #16]
 800b13a:	3318      	adds	r3, #24
 800b13c:	4619      	mov	r1, r3
 800b13e:	480e      	ldr	r0, [pc, #56]	@ (800b178 <xTaskRemoveFromEventList+0xc0>)
 800b140:	f7fe fc91 	bl	8009a66 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b144:	693b      	ldr	r3, [r7, #16]
 800b146:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b148:	4b0c      	ldr	r3, [pc, #48]	@ (800b17c <xTaskRemoveFromEventList+0xc4>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b14e:	429a      	cmp	r2, r3
 800b150:	d905      	bls.n	800b15e <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b152:	2301      	movs	r3, #1
 800b154:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b156:	4b0a      	ldr	r3, [pc, #40]	@ (800b180 <xTaskRemoveFromEventList+0xc8>)
 800b158:	2201      	movs	r2, #1
 800b15a:	601a      	str	r2, [r3, #0]
 800b15c:	e001      	b.n	800b162 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800b15e:	2300      	movs	r3, #0
 800b160:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b162:	697b      	ldr	r3, [r7, #20]
}
 800b164:	4618      	mov	r0, r3
 800b166:	3718      	adds	r7, #24
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}
 800b16c:	200016a4 	.word	0x200016a4
 800b170:	20001684 	.word	0x20001684
 800b174:	200011ac 	.word	0x200011ac
 800b178:	2000163c 	.word	0x2000163c
 800b17c:	200011a8 	.word	0x200011a8
 800b180:	20001690 	.word	0x20001690

0800b184 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b184:	b480      	push	{r7}
 800b186:	b083      	sub	sp, #12
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b18c:	4b06      	ldr	r3, [pc, #24]	@ (800b1a8 <vTaskInternalSetTimeOutState+0x24>)
 800b18e:	681a      	ldr	r2, [r3, #0]
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b194:	4b05      	ldr	r3, [pc, #20]	@ (800b1ac <vTaskInternalSetTimeOutState+0x28>)
 800b196:	681a      	ldr	r2, [r3, #0]
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	605a      	str	r2, [r3, #4]
}
 800b19c:	bf00      	nop
 800b19e:	370c      	adds	r7, #12
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a6:	4770      	bx	lr
 800b1a8:	20001694 	.word	0x20001694
 800b1ac:	20001680 	.word	0x20001680

0800b1b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b088      	sub	sp, #32
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
 800b1b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d10d      	bne.n	800b1dc <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800b1c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1c4:	b672      	cpsid	i
 800b1c6:	f383 8811 	msr	BASEPRI, r3
 800b1ca:	f3bf 8f6f 	isb	sy
 800b1ce:	f3bf 8f4f 	dsb	sy
 800b1d2:	b662      	cpsie	i
 800b1d4:	613b      	str	r3, [r7, #16]
}
 800b1d6:	bf00      	nop
 800b1d8:	bf00      	nop
 800b1da:	e7fd      	b.n	800b1d8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d10d      	bne.n	800b1fe <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800b1e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1e6:	b672      	cpsid	i
 800b1e8:	f383 8811 	msr	BASEPRI, r3
 800b1ec:	f3bf 8f6f 	isb	sy
 800b1f0:	f3bf 8f4f 	dsb	sy
 800b1f4:	b662      	cpsie	i
 800b1f6:	60fb      	str	r3, [r7, #12]
}
 800b1f8:	bf00      	nop
 800b1fa:	bf00      	nop
 800b1fc:	e7fd      	b.n	800b1fa <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800b1fe:	f000 fe85 	bl	800bf0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b202:	4b1d      	ldr	r3, [pc, #116]	@ (800b278 <xTaskCheckForTimeOut+0xc8>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	685b      	ldr	r3, [r3, #4]
 800b20c:	69ba      	ldr	r2, [r7, #24]
 800b20e:	1ad3      	subs	r3, r2, r3
 800b210:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b21a:	d102      	bne.n	800b222 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b21c:	2300      	movs	r3, #0
 800b21e:	61fb      	str	r3, [r7, #28]
 800b220:	e023      	b.n	800b26a <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681a      	ldr	r2, [r3, #0]
 800b226:	4b15      	ldr	r3, [pc, #84]	@ (800b27c <xTaskCheckForTimeOut+0xcc>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	429a      	cmp	r2, r3
 800b22c:	d007      	beq.n	800b23e <xTaskCheckForTimeOut+0x8e>
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	685b      	ldr	r3, [r3, #4]
 800b232:	69ba      	ldr	r2, [r7, #24]
 800b234:	429a      	cmp	r2, r3
 800b236:	d302      	bcc.n	800b23e <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b238:	2301      	movs	r3, #1
 800b23a:	61fb      	str	r3, [r7, #28]
 800b23c:	e015      	b.n	800b26a <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	697a      	ldr	r2, [r7, #20]
 800b244:	429a      	cmp	r2, r3
 800b246:	d20b      	bcs.n	800b260 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	681a      	ldr	r2, [r3, #0]
 800b24c:	697b      	ldr	r3, [r7, #20]
 800b24e:	1ad2      	subs	r2, r2, r3
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f7ff ff95 	bl	800b184 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b25a:	2300      	movs	r3, #0
 800b25c:	61fb      	str	r3, [r7, #28]
 800b25e:	e004      	b.n	800b26a <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	2200      	movs	r2, #0
 800b264:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b266:	2301      	movs	r3, #1
 800b268:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b26a:	f000 fe85 	bl	800bf78 <vPortExitCritical>

	return xReturn;
 800b26e:	69fb      	ldr	r3, [r7, #28]
}
 800b270:	4618      	mov	r0, r3
 800b272:	3720      	adds	r7, #32
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}
 800b278:	20001680 	.word	0x20001680
 800b27c:	20001694 	.word	0x20001694

0800b280 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b280:	b480      	push	{r7}
 800b282:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b284:	4b03      	ldr	r3, [pc, #12]	@ (800b294 <vTaskMissedYield+0x14>)
 800b286:	2201      	movs	r2, #1
 800b288:	601a      	str	r2, [r3, #0]
}
 800b28a:	bf00      	nop
 800b28c:	46bd      	mov	sp, r7
 800b28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b292:	4770      	bx	lr
 800b294:	20001690 	.word	0x20001690

0800b298 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b082      	sub	sp, #8
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b2a0:	f000 f852 	bl	800b348 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b2a4:	4b06      	ldr	r3, [pc, #24]	@ (800b2c0 <prvIdleTask+0x28>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	2b01      	cmp	r3, #1
 800b2aa:	d9f9      	bls.n	800b2a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b2ac:	4b05      	ldr	r3, [pc, #20]	@ (800b2c4 <prvIdleTask+0x2c>)
 800b2ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b2b2:	601a      	str	r2, [r3, #0]
 800b2b4:	f3bf 8f4f 	dsb	sy
 800b2b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b2bc:	e7f0      	b.n	800b2a0 <prvIdleTask+0x8>
 800b2be:	bf00      	nop
 800b2c0:	200011ac 	.word	0x200011ac
 800b2c4:	e000ed04 	.word	0xe000ed04

0800b2c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b082      	sub	sp, #8
 800b2cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	607b      	str	r3, [r7, #4]
 800b2d2:	e00c      	b.n	800b2ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b2d4:	687a      	ldr	r2, [r7, #4]
 800b2d6:	4613      	mov	r3, r2
 800b2d8:	009b      	lsls	r3, r3, #2
 800b2da:	4413      	add	r3, r2
 800b2dc:	009b      	lsls	r3, r3, #2
 800b2de:	4a12      	ldr	r2, [pc, #72]	@ (800b328 <prvInitialiseTaskLists+0x60>)
 800b2e0:	4413      	add	r3, r2
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f7fe fb92 	bl	8009a0c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	3301      	adds	r3, #1
 800b2ec:	607b      	str	r3, [r7, #4]
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2b37      	cmp	r3, #55	@ 0x37
 800b2f2:	d9ef      	bls.n	800b2d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b2f4:	480d      	ldr	r0, [pc, #52]	@ (800b32c <prvInitialiseTaskLists+0x64>)
 800b2f6:	f7fe fb89 	bl	8009a0c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b2fa:	480d      	ldr	r0, [pc, #52]	@ (800b330 <prvInitialiseTaskLists+0x68>)
 800b2fc:	f7fe fb86 	bl	8009a0c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b300:	480c      	ldr	r0, [pc, #48]	@ (800b334 <prvInitialiseTaskLists+0x6c>)
 800b302:	f7fe fb83 	bl	8009a0c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b306:	480c      	ldr	r0, [pc, #48]	@ (800b338 <prvInitialiseTaskLists+0x70>)
 800b308:	f7fe fb80 	bl	8009a0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b30c:	480b      	ldr	r0, [pc, #44]	@ (800b33c <prvInitialiseTaskLists+0x74>)
 800b30e:	f7fe fb7d 	bl	8009a0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b312:	4b0b      	ldr	r3, [pc, #44]	@ (800b340 <prvInitialiseTaskLists+0x78>)
 800b314:	4a05      	ldr	r2, [pc, #20]	@ (800b32c <prvInitialiseTaskLists+0x64>)
 800b316:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b318:	4b0a      	ldr	r3, [pc, #40]	@ (800b344 <prvInitialiseTaskLists+0x7c>)
 800b31a:	4a05      	ldr	r2, [pc, #20]	@ (800b330 <prvInitialiseTaskLists+0x68>)
 800b31c:	601a      	str	r2, [r3, #0]
}
 800b31e:	bf00      	nop
 800b320:	3708      	adds	r7, #8
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}
 800b326:	bf00      	nop
 800b328:	200011ac 	.word	0x200011ac
 800b32c:	2000160c 	.word	0x2000160c
 800b330:	20001620 	.word	0x20001620
 800b334:	2000163c 	.word	0x2000163c
 800b338:	20001650 	.word	0x20001650
 800b33c:	20001668 	.word	0x20001668
 800b340:	20001634 	.word	0x20001634
 800b344:	20001638 	.word	0x20001638

0800b348 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b082      	sub	sp, #8
 800b34c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b34e:	e019      	b.n	800b384 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b350:	f000 fddc 	bl	800bf0c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b354:	4b10      	ldr	r3, [pc, #64]	@ (800b398 <prvCheckTasksWaitingTermination+0x50>)
 800b356:	68db      	ldr	r3, [r3, #12]
 800b358:	68db      	ldr	r3, [r3, #12]
 800b35a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	3304      	adds	r3, #4
 800b360:	4618      	mov	r0, r3
 800b362:	f7fe fbdd 	bl	8009b20 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b366:	4b0d      	ldr	r3, [pc, #52]	@ (800b39c <prvCheckTasksWaitingTermination+0x54>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	3b01      	subs	r3, #1
 800b36c:	4a0b      	ldr	r2, [pc, #44]	@ (800b39c <prvCheckTasksWaitingTermination+0x54>)
 800b36e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b370:	4b0b      	ldr	r3, [pc, #44]	@ (800b3a0 <prvCheckTasksWaitingTermination+0x58>)
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	3b01      	subs	r3, #1
 800b376:	4a0a      	ldr	r2, [pc, #40]	@ (800b3a0 <prvCheckTasksWaitingTermination+0x58>)
 800b378:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b37a:	f000 fdfd 	bl	800bf78 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f000 f810 	bl	800b3a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b384:	4b06      	ldr	r3, [pc, #24]	@ (800b3a0 <prvCheckTasksWaitingTermination+0x58>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d1e1      	bne.n	800b350 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b38c:	bf00      	nop
 800b38e:	bf00      	nop
 800b390:	3708      	adds	r7, #8
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}
 800b396:	bf00      	nop
 800b398:	20001650 	.word	0x20001650
 800b39c:	2000167c 	.word	0x2000167c
 800b3a0:	20001664 	.word	0x20001664

0800b3a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b084      	sub	sp, #16
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	3354      	adds	r3, #84	@ 0x54
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f003 fa17 	bl	800e7e4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d108      	bne.n	800b3d2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	f000 ff9d 	bl	800c304 <vPortFree>
				vPortFree( pxTCB );
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f000 ff9a 	bl	800c304 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b3d0:	e01b      	b.n	800b40a <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b3d8:	2b01      	cmp	r3, #1
 800b3da:	d103      	bne.n	800b3e4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	f000 ff91 	bl	800c304 <vPortFree>
	}
 800b3e2:	e012      	b.n	800b40a <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b3ea:	2b02      	cmp	r3, #2
 800b3ec:	d00d      	beq.n	800b40a <prvDeleteTCB+0x66>
	__asm volatile
 800b3ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3f2:	b672      	cpsid	i
 800b3f4:	f383 8811 	msr	BASEPRI, r3
 800b3f8:	f3bf 8f6f 	isb	sy
 800b3fc:	f3bf 8f4f 	dsb	sy
 800b400:	b662      	cpsie	i
 800b402:	60fb      	str	r3, [r7, #12]
}
 800b404:	bf00      	nop
 800b406:	bf00      	nop
 800b408:	e7fd      	b.n	800b406 <prvDeleteTCB+0x62>
	}
 800b40a:	bf00      	nop
 800b40c:	3710      	adds	r7, #16
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}
	...

0800b414 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b414:	b480      	push	{r7}
 800b416:	b083      	sub	sp, #12
 800b418:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b41a:	4b0c      	ldr	r3, [pc, #48]	@ (800b44c <prvResetNextTaskUnblockTime+0x38>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d104      	bne.n	800b42e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b424:	4b0a      	ldr	r3, [pc, #40]	@ (800b450 <prvResetNextTaskUnblockTime+0x3c>)
 800b426:	f04f 32ff 	mov.w	r2, #4294967295
 800b42a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b42c:	e008      	b.n	800b440 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b42e:	4b07      	ldr	r3, [pc, #28]	@ (800b44c <prvResetNextTaskUnblockTime+0x38>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	68db      	ldr	r3, [r3, #12]
 800b434:	68db      	ldr	r3, [r3, #12]
 800b436:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	685b      	ldr	r3, [r3, #4]
 800b43c:	4a04      	ldr	r2, [pc, #16]	@ (800b450 <prvResetNextTaskUnblockTime+0x3c>)
 800b43e:	6013      	str	r3, [r2, #0]
}
 800b440:	bf00      	nop
 800b442:	370c      	adds	r7, #12
 800b444:	46bd      	mov	sp, r7
 800b446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44a:	4770      	bx	lr
 800b44c:	20001634 	.word	0x20001634
 800b450:	2000169c 	.word	0x2000169c

0800b454 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b454:	b480      	push	{r7}
 800b456:	b083      	sub	sp, #12
 800b458:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b45a:	4b0b      	ldr	r3, [pc, #44]	@ (800b488 <xTaskGetSchedulerState+0x34>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d102      	bne.n	800b468 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b462:	2301      	movs	r3, #1
 800b464:	607b      	str	r3, [r7, #4]
 800b466:	e008      	b.n	800b47a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b468:	4b08      	ldr	r3, [pc, #32]	@ (800b48c <xTaskGetSchedulerState+0x38>)
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d102      	bne.n	800b476 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b470:	2302      	movs	r3, #2
 800b472:	607b      	str	r3, [r7, #4]
 800b474:	e001      	b.n	800b47a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b476:	2300      	movs	r3, #0
 800b478:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b47a:	687b      	ldr	r3, [r7, #4]
	}
 800b47c:	4618      	mov	r0, r3
 800b47e:	370c      	adds	r7, #12
 800b480:	46bd      	mov	sp, r7
 800b482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b486:	4770      	bx	lr
 800b488:	20001688 	.word	0x20001688
 800b48c:	200016a4 	.word	0x200016a4

0800b490 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b490:	b580      	push	{r7, lr}
 800b492:	b086      	sub	sp, #24
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b49c:	2300      	movs	r3, #0
 800b49e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d05c      	beq.n	800b560 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b4a6:	4b31      	ldr	r3, [pc, #196]	@ (800b56c <xTaskPriorityDisinherit+0xdc>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	693a      	ldr	r2, [r7, #16]
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	d00d      	beq.n	800b4cc <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800b4b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4b4:	b672      	cpsid	i
 800b4b6:	f383 8811 	msr	BASEPRI, r3
 800b4ba:	f3bf 8f6f 	isb	sy
 800b4be:	f3bf 8f4f 	dsb	sy
 800b4c2:	b662      	cpsie	i
 800b4c4:	60fb      	str	r3, [r7, #12]
}
 800b4c6:	bf00      	nop
 800b4c8:	bf00      	nop
 800b4ca:	e7fd      	b.n	800b4c8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800b4cc:	693b      	ldr	r3, [r7, #16]
 800b4ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d10d      	bne.n	800b4f0 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800b4d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4d8:	b672      	cpsid	i
 800b4da:	f383 8811 	msr	BASEPRI, r3
 800b4de:	f3bf 8f6f 	isb	sy
 800b4e2:	f3bf 8f4f 	dsb	sy
 800b4e6:	b662      	cpsie	i
 800b4e8:	60bb      	str	r3, [r7, #8]
}
 800b4ea:	bf00      	nop
 800b4ec:	bf00      	nop
 800b4ee:	e7fd      	b.n	800b4ec <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800b4f0:	693b      	ldr	r3, [r7, #16]
 800b4f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b4f4:	1e5a      	subs	r2, r3, #1
 800b4f6:	693b      	ldr	r3, [r7, #16]
 800b4f8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b4fa:	693b      	ldr	r3, [r7, #16]
 800b4fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4fe:	693b      	ldr	r3, [r7, #16]
 800b500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b502:	429a      	cmp	r2, r3
 800b504:	d02c      	beq.n	800b560 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b506:	693b      	ldr	r3, [r7, #16]
 800b508:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d128      	bne.n	800b560 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b50e:	693b      	ldr	r3, [r7, #16]
 800b510:	3304      	adds	r3, #4
 800b512:	4618      	mov	r0, r3
 800b514:	f7fe fb04 	bl	8009b20 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b518:	693b      	ldr	r3, [r7, #16]
 800b51a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b51c:	693b      	ldr	r3, [r7, #16]
 800b51e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b520:	693b      	ldr	r3, [r7, #16]
 800b522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b524:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b528:	693b      	ldr	r3, [r7, #16]
 800b52a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b52c:	693b      	ldr	r3, [r7, #16]
 800b52e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b530:	4b0f      	ldr	r3, [pc, #60]	@ (800b570 <xTaskPriorityDisinherit+0xe0>)
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	429a      	cmp	r2, r3
 800b536:	d903      	bls.n	800b540 <xTaskPriorityDisinherit+0xb0>
 800b538:	693b      	ldr	r3, [r7, #16]
 800b53a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b53c:	4a0c      	ldr	r2, [pc, #48]	@ (800b570 <xTaskPriorityDisinherit+0xe0>)
 800b53e:	6013      	str	r3, [r2, #0]
 800b540:	693b      	ldr	r3, [r7, #16]
 800b542:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b544:	4613      	mov	r3, r2
 800b546:	009b      	lsls	r3, r3, #2
 800b548:	4413      	add	r3, r2
 800b54a:	009b      	lsls	r3, r3, #2
 800b54c:	4a09      	ldr	r2, [pc, #36]	@ (800b574 <xTaskPriorityDisinherit+0xe4>)
 800b54e:	441a      	add	r2, r3
 800b550:	693b      	ldr	r3, [r7, #16]
 800b552:	3304      	adds	r3, #4
 800b554:	4619      	mov	r1, r3
 800b556:	4610      	mov	r0, r2
 800b558:	f7fe fa85 	bl	8009a66 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b55c:	2301      	movs	r3, #1
 800b55e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b560:	697b      	ldr	r3, [r7, #20]
	}
 800b562:	4618      	mov	r0, r3
 800b564:	3718      	adds	r7, #24
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}
 800b56a:	bf00      	nop
 800b56c:	200011a8 	.word	0x200011a8
 800b570:	20001684 	.word	0x20001684
 800b574:	200011ac 	.word	0x200011ac

0800b578 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b084      	sub	sp, #16
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
 800b580:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b582:	4b21      	ldr	r3, [pc, #132]	@ (800b608 <prvAddCurrentTaskToDelayedList+0x90>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b588:	4b20      	ldr	r3, [pc, #128]	@ (800b60c <prvAddCurrentTaskToDelayedList+0x94>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	3304      	adds	r3, #4
 800b58e:	4618      	mov	r0, r3
 800b590:	f7fe fac6 	bl	8009b20 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b59a:	d10a      	bne.n	800b5b2 <prvAddCurrentTaskToDelayedList+0x3a>
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d007      	beq.n	800b5b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b5a2:	4b1a      	ldr	r3, [pc, #104]	@ (800b60c <prvAddCurrentTaskToDelayedList+0x94>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	3304      	adds	r3, #4
 800b5a8:	4619      	mov	r1, r3
 800b5aa:	4819      	ldr	r0, [pc, #100]	@ (800b610 <prvAddCurrentTaskToDelayedList+0x98>)
 800b5ac:	f7fe fa5b 	bl	8009a66 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b5b0:	e026      	b.n	800b600 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b5b2:	68fa      	ldr	r2, [r7, #12]
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	4413      	add	r3, r2
 800b5b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b5ba:	4b14      	ldr	r3, [pc, #80]	@ (800b60c <prvAddCurrentTaskToDelayedList+0x94>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	68ba      	ldr	r2, [r7, #8]
 800b5c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b5c2:	68ba      	ldr	r2, [r7, #8]
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	429a      	cmp	r2, r3
 800b5c8:	d209      	bcs.n	800b5de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b5ca:	4b12      	ldr	r3, [pc, #72]	@ (800b614 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b5cc:	681a      	ldr	r2, [r3, #0]
 800b5ce:	4b0f      	ldr	r3, [pc, #60]	@ (800b60c <prvAddCurrentTaskToDelayedList+0x94>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	3304      	adds	r3, #4
 800b5d4:	4619      	mov	r1, r3
 800b5d6:	4610      	mov	r0, r2
 800b5d8:	f7fe fa69 	bl	8009aae <vListInsert>
}
 800b5dc:	e010      	b.n	800b600 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b5de:	4b0e      	ldr	r3, [pc, #56]	@ (800b618 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b5e0:	681a      	ldr	r2, [r3, #0]
 800b5e2:	4b0a      	ldr	r3, [pc, #40]	@ (800b60c <prvAddCurrentTaskToDelayedList+0x94>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	3304      	adds	r3, #4
 800b5e8:	4619      	mov	r1, r3
 800b5ea:	4610      	mov	r0, r2
 800b5ec:	f7fe fa5f 	bl	8009aae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b5f0:	4b0a      	ldr	r3, [pc, #40]	@ (800b61c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	68ba      	ldr	r2, [r7, #8]
 800b5f6:	429a      	cmp	r2, r3
 800b5f8:	d202      	bcs.n	800b600 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b5fa:	4a08      	ldr	r2, [pc, #32]	@ (800b61c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	6013      	str	r3, [r2, #0]
}
 800b600:	bf00      	nop
 800b602:	3710      	adds	r7, #16
 800b604:	46bd      	mov	sp, r7
 800b606:	bd80      	pop	{r7, pc}
 800b608:	20001680 	.word	0x20001680
 800b60c:	200011a8 	.word	0x200011a8
 800b610:	20001668 	.word	0x20001668
 800b614:	20001638 	.word	0x20001638
 800b618:	20001634 	.word	0x20001634
 800b61c:	2000169c 	.word	0x2000169c

0800b620 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b08a      	sub	sp, #40	@ 0x28
 800b624:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b626:	2300      	movs	r3, #0
 800b628:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b62a:	f000 fb21 	bl	800bc70 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b62e:	4b1e      	ldr	r3, [pc, #120]	@ (800b6a8 <xTimerCreateTimerTask+0x88>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d021      	beq.n	800b67a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b636:	2300      	movs	r3, #0
 800b638:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b63a:	2300      	movs	r3, #0
 800b63c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b63e:	1d3a      	adds	r2, r7, #4
 800b640:	f107 0108 	add.w	r1, r7, #8
 800b644:	f107 030c 	add.w	r3, r7, #12
 800b648:	4618      	mov	r0, r3
 800b64a:	f7fe f9c5 	bl	80099d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b64e:	6879      	ldr	r1, [r7, #4]
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	68fa      	ldr	r2, [r7, #12]
 800b654:	9202      	str	r2, [sp, #8]
 800b656:	9301      	str	r3, [sp, #4]
 800b658:	2302      	movs	r3, #2
 800b65a:	9300      	str	r3, [sp, #0]
 800b65c:	2300      	movs	r3, #0
 800b65e:	460a      	mov	r2, r1
 800b660:	4912      	ldr	r1, [pc, #72]	@ (800b6ac <xTimerCreateTimerTask+0x8c>)
 800b662:	4813      	ldr	r0, [pc, #76]	@ (800b6b0 <xTimerCreateTimerTask+0x90>)
 800b664:	f7fe ffa0 	bl	800a5a8 <xTaskCreateStatic>
 800b668:	4603      	mov	r3, r0
 800b66a:	4a12      	ldr	r2, [pc, #72]	@ (800b6b4 <xTimerCreateTimerTask+0x94>)
 800b66c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b66e:	4b11      	ldr	r3, [pc, #68]	@ (800b6b4 <xTimerCreateTimerTask+0x94>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d001      	beq.n	800b67a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b676:	2301      	movs	r3, #1
 800b678:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b67a:	697b      	ldr	r3, [r7, #20]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d10d      	bne.n	800b69c <xTimerCreateTimerTask+0x7c>
	__asm volatile
 800b680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b684:	b672      	cpsid	i
 800b686:	f383 8811 	msr	BASEPRI, r3
 800b68a:	f3bf 8f6f 	isb	sy
 800b68e:	f3bf 8f4f 	dsb	sy
 800b692:	b662      	cpsie	i
 800b694:	613b      	str	r3, [r7, #16]
}
 800b696:	bf00      	nop
 800b698:	bf00      	nop
 800b69a:	e7fd      	b.n	800b698 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800b69c:	697b      	ldr	r3, [r7, #20]
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	3718      	adds	r7, #24
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}
 800b6a6:	bf00      	nop
 800b6a8:	200016d8 	.word	0x200016d8
 800b6ac:	080105a0 	.word	0x080105a0
 800b6b0:	0800b7f9 	.word	0x0800b7f9
 800b6b4:	200016dc 	.word	0x200016dc

0800b6b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b08a      	sub	sp, #40	@ 0x28
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	60f8      	str	r0, [r7, #12]
 800b6c0:	60b9      	str	r1, [r7, #8]
 800b6c2:	607a      	str	r2, [r7, #4]
 800b6c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d10d      	bne.n	800b6ec <xTimerGenericCommand+0x34>
	__asm volatile
 800b6d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6d4:	b672      	cpsid	i
 800b6d6:	f383 8811 	msr	BASEPRI, r3
 800b6da:	f3bf 8f6f 	isb	sy
 800b6de:	f3bf 8f4f 	dsb	sy
 800b6e2:	b662      	cpsie	i
 800b6e4:	623b      	str	r3, [r7, #32]
}
 800b6e6:	bf00      	nop
 800b6e8:	bf00      	nop
 800b6ea:	e7fd      	b.n	800b6e8 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b6ec:	4b19      	ldr	r3, [pc, #100]	@ (800b754 <xTimerGenericCommand+0x9c>)
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d02a      	beq.n	800b74a <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	2b05      	cmp	r3, #5
 800b704:	dc18      	bgt.n	800b738 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b706:	f7ff fea5 	bl	800b454 <xTaskGetSchedulerState>
 800b70a:	4603      	mov	r3, r0
 800b70c:	2b02      	cmp	r3, #2
 800b70e:	d109      	bne.n	800b724 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b710:	4b10      	ldr	r3, [pc, #64]	@ (800b754 <xTimerGenericCommand+0x9c>)
 800b712:	6818      	ldr	r0, [r3, #0]
 800b714:	f107 0110 	add.w	r1, r7, #16
 800b718:	2300      	movs	r3, #0
 800b71a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b71c:	f7fe fb40 	bl	8009da0 <xQueueGenericSend>
 800b720:	6278      	str	r0, [r7, #36]	@ 0x24
 800b722:	e012      	b.n	800b74a <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b724:	4b0b      	ldr	r3, [pc, #44]	@ (800b754 <xTimerGenericCommand+0x9c>)
 800b726:	6818      	ldr	r0, [r3, #0]
 800b728:	f107 0110 	add.w	r1, r7, #16
 800b72c:	2300      	movs	r3, #0
 800b72e:	2200      	movs	r2, #0
 800b730:	f7fe fb36 	bl	8009da0 <xQueueGenericSend>
 800b734:	6278      	str	r0, [r7, #36]	@ 0x24
 800b736:	e008      	b.n	800b74a <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b738:	4b06      	ldr	r3, [pc, #24]	@ (800b754 <xTimerGenericCommand+0x9c>)
 800b73a:	6818      	ldr	r0, [r3, #0]
 800b73c:	f107 0110 	add.w	r1, r7, #16
 800b740:	2300      	movs	r3, #0
 800b742:	683a      	ldr	r2, [r7, #0]
 800b744:	f7fe fc36 	bl	8009fb4 <xQueueGenericSendFromISR>
 800b748:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b74a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b74c:	4618      	mov	r0, r3
 800b74e:	3728      	adds	r7, #40	@ 0x28
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}
 800b754:	200016d8 	.word	0x200016d8

0800b758 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b088      	sub	sp, #32
 800b75c:	af02      	add	r7, sp, #8
 800b75e:	6078      	str	r0, [r7, #4]
 800b760:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b762:	4b24      	ldr	r3, [pc, #144]	@ (800b7f4 <prvProcessExpiredTimer+0x9c>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	68db      	ldr	r3, [r3, #12]
 800b768:	68db      	ldr	r3, [r3, #12]
 800b76a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b76c:	697b      	ldr	r3, [r7, #20]
 800b76e:	3304      	adds	r3, #4
 800b770:	4618      	mov	r0, r3
 800b772:	f7fe f9d5 	bl	8009b20 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b776:	697b      	ldr	r3, [r7, #20]
 800b778:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b77c:	f003 0304 	and.w	r3, r3, #4
 800b780:	2b00      	cmp	r3, #0
 800b782:	d025      	beq.n	800b7d0 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b784:	697b      	ldr	r3, [r7, #20]
 800b786:	699a      	ldr	r2, [r3, #24]
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	18d1      	adds	r1, r2, r3
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	683a      	ldr	r2, [r7, #0]
 800b790:	6978      	ldr	r0, [r7, #20]
 800b792:	f000 f8d7 	bl	800b944 <prvInsertTimerInActiveList>
 800b796:	4603      	mov	r3, r0
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d022      	beq.n	800b7e2 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b79c:	2300      	movs	r3, #0
 800b79e:	9300      	str	r3, [sp, #0]
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	687a      	ldr	r2, [r7, #4]
 800b7a4:	2100      	movs	r1, #0
 800b7a6:	6978      	ldr	r0, [r7, #20]
 800b7a8:	f7ff ff86 	bl	800b6b8 <xTimerGenericCommand>
 800b7ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b7ae:	693b      	ldr	r3, [r7, #16]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d116      	bne.n	800b7e2 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 800b7b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7b8:	b672      	cpsid	i
 800b7ba:	f383 8811 	msr	BASEPRI, r3
 800b7be:	f3bf 8f6f 	isb	sy
 800b7c2:	f3bf 8f4f 	dsb	sy
 800b7c6:	b662      	cpsie	i
 800b7c8:	60fb      	str	r3, [r7, #12]
}
 800b7ca:	bf00      	nop
 800b7cc:	bf00      	nop
 800b7ce:	e7fd      	b.n	800b7cc <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b7d0:	697b      	ldr	r3, [r7, #20]
 800b7d2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b7d6:	f023 0301 	bic.w	r3, r3, #1
 800b7da:	b2da      	uxtb	r2, r3
 800b7dc:	697b      	ldr	r3, [r7, #20]
 800b7de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	6a1b      	ldr	r3, [r3, #32]
 800b7e6:	6978      	ldr	r0, [r7, #20]
 800b7e8:	4798      	blx	r3
}
 800b7ea:	bf00      	nop
 800b7ec:	3718      	adds	r7, #24
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}
 800b7f2:	bf00      	nop
 800b7f4:	200016d0 	.word	0x200016d0

0800b7f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b084      	sub	sp, #16
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b800:	f107 0308 	add.w	r3, r7, #8
 800b804:	4618      	mov	r0, r3
 800b806:	f000 f859 	bl	800b8bc <prvGetNextExpireTime>
 800b80a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b80c:	68bb      	ldr	r3, [r7, #8]
 800b80e:	4619      	mov	r1, r3
 800b810:	68f8      	ldr	r0, [r7, #12]
 800b812:	f000 f805 	bl	800b820 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b816:	f000 f8d7 	bl	800b9c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b81a:	bf00      	nop
 800b81c:	e7f0      	b.n	800b800 <prvTimerTask+0x8>
	...

0800b820 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b084      	sub	sp, #16
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
 800b828:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b82a:	f7ff f9e9 	bl	800ac00 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b82e:	f107 0308 	add.w	r3, r7, #8
 800b832:	4618      	mov	r0, r3
 800b834:	f000 f866 	bl	800b904 <prvSampleTimeNow>
 800b838:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b83a:	68bb      	ldr	r3, [r7, #8]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d130      	bne.n	800b8a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d10a      	bne.n	800b85c <prvProcessTimerOrBlockTask+0x3c>
 800b846:	687a      	ldr	r2, [r7, #4]
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	429a      	cmp	r2, r3
 800b84c:	d806      	bhi.n	800b85c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b84e:	f7ff f9e5 	bl	800ac1c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b852:	68f9      	ldr	r1, [r7, #12]
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	f7ff ff7f 	bl	800b758 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b85a:	e024      	b.n	800b8a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d008      	beq.n	800b874 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b862:	4b13      	ldr	r3, [pc, #76]	@ (800b8b0 <prvProcessTimerOrBlockTask+0x90>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d101      	bne.n	800b870 <prvProcessTimerOrBlockTask+0x50>
 800b86c:	2301      	movs	r3, #1
 800b86e:	e000      	b.n	800b872 <prvProcessTimerOrBlockTask+0x52>
 800b870:	2300      	movs	r3, #0
 800b872:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b874:	4b0f      	ldr	r3, [pc, #60]	@ (800b8b4 <prvProcessTimerOrBlockTask+0x94>)
 800b876:	6818      	ldr	r0, [r3, #0]
 800b878:	687a      	ldr	r2, [r7, #4]
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	1ad3      	subs	r3, r2, r3
 800b87e:	683a      	ldr	r2, [r7, #0]
 800b880:	4619      	mov	r1, r3
 800b882:	f7fe fe5d 	bl	800a540 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b886:	f7ff f9c9 	bl	800ac1c <xTaskResumeAll>
 800b88a:	4603      	mov	r3, r0
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d10a      	bne.n	800b8a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b890:	4b09      	ldr	r3, [pc, #36]	@ (800b8b8 <prvProcessTimerOrBlockTask+0x98>)
 800b892:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b896:	601a      	str	r2, [r3, #0]
 800b898:	f3bf 8f4f 	dsb	sy
 800b89c:	f3bf 8f6f 	isb	sy
}
 800b8a0:	e001      	b.n	800b8a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b8a2:	f7ff f9bb 	bl	800ac1c <xTaskResumeAll>
}
 800b8a6:	bf00      	nop
 800b8a8:	3710      	adds	r7, #16
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}
 800b8ae:	bf00      	nop
 800b8b0:	200016d4 	.word	0x200016d4
 800b8b4:	200016d8 	.word	0x200016d8
 800b8b8:	e000ed04 	.word	0xe000ed04

0800b8bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b8bc:	b480      	push	{r7}
 800b8be:	b085      	sub	sp, #20
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b8c4:	4b0e      	ldr	r3, [pc, #56]	@ (800b900 <prvGetNextExpireTime+0x44>)
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d101      	bne.n	800b8d2 <prvGetNextExpireTime+0x16>
 800b8ce:	2201      	movs	r2, #1
 800b8d0:	e000      	b.n	800b8d4 <prvGetNextExpireTime+0x18>
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d105      	bne.n	800b8ec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b8e0:	4b07      	ldr	r3, [pc, #28]	@ (800b900 <prvGetNextExpireTime+0x44>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	68db      	ldr	r3, [r3, #12]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	60fb      	str	r3, [r7, #12]
 800b8ea:	e001      	b.n	800b8f0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
}
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	3714      	adds	r7, #20
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fc:	4770      	bx	lr
 800b8fe:	bf00      	nop
 800b900:	200016d0 	.word	0x200016d0

0800b904 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b084      	sub	sp, #16
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b90c:	f7ff fa26 	bl	800ad5c <xTaskGetTickCount>
 800b910:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b912:	4b0b      	ldr	r3, [pc, #44]	@ (800b940 <prvSampleTimeNow+0x3c>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	68fa      	ldr	r2, [r7, #12]
 800b918:	429a      	cmp	r2, r3
 800b91a:	d205      	bcs.n	800b928 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b91c:	f000 f940 	bl	800bba0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2201      	movs	r2, #1
 800b924:	601a      	str	r2, [r3, #0]
 800b926:	e002      	b.n	800b92e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2200      	movs	r2, #0
 800b92c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b92e:	4a04      	ldr	r2, [pc, #16]	@ (800b940 <prvSampleTimeNow+0x3c>)
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b934:	68fb      	ldr	r3, [r7, #12]
}
 800b936:	4618      	mov	r0, r3
 800b938:	3710      	adds	r7, #16
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bd80      	pop	{r7, pc}
 800b93e:	bf00      	nop
 800b940:	200016e0 	.word	0x200016e0

0800b944 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b086      	sub	sp, #24
 800b948:	af00      	add	r7, sp, #0
 800b94a:	60f8      	str	r0, [r7, #12]
 800b94c:	60b9      	str	r1, [r7, #8]
 800b94e:	607a      	str	r2, [r7, #4]
 800b950:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b952:	2300      	movs	r3, #0
 800b954:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	68ba      	ldr	r2, [r7, #8]
 800b95a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	68fa      	ldr	r2, [r7, #12]
 800b960:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b962:	68ba      	ldr	r2, [r7, #8]
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	429a      	cmp	r2, r3
 800b968:	d812      	bhi.n	800b990 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b96a:	687a      	ldr	r2, [r7, #4]
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	1ad2      	subs	r2, r2, r3
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	699b      	ldr	r3, [r3, #24]
 800b974:	429a      	cmp	r2, r3
 800b976:	d302      	bcc.n	800b97e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b978:	2301      	movs	r3, #1
 800b97a:	617b      	str	r3, [r7, #20]
 800b97c:	e01b      	b.n	800b9b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b97e:	4b10      	ldr	r3, [pc, #64]	@ (800b9c0 <prvInsertTimerInActiveList+0x7c>)
 800b980:	681a      	ldr	r2, [r3, #0]
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	3304      	adds	r3, #4
 800b986:	4619      	mov	r1, r3
 800b988:	4610      	mov	r0, r2
 800b98a:	f7fe f890 	bl	8009aae <vListInsert>
 800b98e:	e012      	b.n	800b9b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b990:	687a      	ldr	r2, [r7, #4]
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	429a      	cmp	r2, r3
 800b996:	d206      	bcs.n	800b9a6 <prvInsertTimerInActiveList+0x62>
 800b998:	68ba      	ldr	r2, [r7, #8]
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	429a      	cmp	r2, r3
 800b99e:	d302      	bcc.n	800b9a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	617b      	str	r3, [r7, #20]
 800b9a4:	e007      	b.n	800b9b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b9a6:	4b07      	ldr	r3, [pc, #28]	@ (800b9c4 <prvInsertTimerInActiveList+0x80>)
 800b9a8:	681a      	ldr	r2, [r3, #0]
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	3304      	adds	r3, #4
 800b9ae:	4619      	mov	r1, r3
 800b9b0:	4610      	mov	r0, r2
 800b9b2:	f7fe f87c 	bl	8009aae <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b9b6:	697b      	ldr	r3, [r7, #20]
}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	3718      	adds	r7, #24
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}
 800b9c0:	200016d4 	.word	0x200016d4
 800b9c4:	200016d0 	.word	0x200016d0

0800b9c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b08e      	sub	sp, #56	@ 0x38
 800b9cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b9ce:	e0d4      	b.n	800bb7a <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	da1b      	bge.n	800ba0e <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b9d6:	1d3b      	adds	r3, r7, #4
 800b9d8:	3304      	adds	r3, #4
 800b9da:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b9dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d10d      	bne.n	800b9fe <prvProcessReceivedCommands+0x36>
	__asm volatile
 800b9e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9e6:	b672      	cpsid	i
 800b9e8:	f383 8811 	msr	BASEPRI, r3
 800b9ec:	f3bf 8f6f 	isb	sy
 800b9f0:	f3bf 8f4f 	dsb	sy
 800b9f4:	b662      	cpsie	i
 800b9f6:	61fb      	str	r3, [r7, #28]
}
 800b9f8:	bf00      	nop
 800b9fa:	bf00      	nop
 800b9fc:	e7fd      	b.n	800b9fa <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b9fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba04:	6850      	ldr	r0, [r2, #4]
 800ba06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba08:	6892      	ldr	r2, [r2, #8]
 800ba0a:	4611      	mov	r1, r2
 800ba0c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	f2c0 80b2 	blt.w	800bb7a <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ba1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba1c:	695b      	ldr	r3, [r3, #20]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d004      	beq.n	800ba2c <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ba22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba24:	3304      	adds	r3, #4
 800ba26:	4618      	mov	r0, r3
 800ba28:	f7fe f87a 	bl	8009b20 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ba2c:	463b      	mov	r3, r7
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f7ff ff68 	bl	800b904 <prvSampleTimeNow>
 800ba34:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2b09      	cmp	r3, #9
 800ba3a:	f200 809b 	bhi.w	800bb74 <prvProcessReceivedCommands+0x1ac>
 800ba3e:	a201      	add	r2, pc, #4	@ (adr r2, 800ba44 <prvProcessReceivedCommands+0x7c>)
 800ba40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba44:	0800ba6d 	.word	0x0800ba6d
 800ba48:	0800ba6d 	.word	0x0800ba6d
 800ba4c:	0800ba6d 	.word	0x0800ba6d
 800ba50:	0800bae7 	.word	0x0800bae7
 800ba54:	0800bafb 	.word	0x0800bafb
 800ba58:	0800bb4b 	.word	0x0800bb4b
 800ba5c:	0800ba6d 	.word	0x0800ba6d
 800ba60:	0800ba6d 	.word	0x0800ba6d
 800ba64:	0800bae7 	.word	0x0800bae7
 800ba68:	0800bafb 	.word	0x0800bafb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ba6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba6e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ba72:	f043 0301 	orr.w	r3, r3, #1
 800ba76:	b2da      	uxtb	r2, r3
 800ba78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba7a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ba7e:	68ba      	ldr	r2, [r7, #8]
 800ba80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba82:	699b      	ldr	r3, [r3, #24]
 800ba84:	18d1      	adds	r1, r2, r3
 800ba86:	68bb      	ldr	r3, [r7, #8]
 800ba88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ba8c:	f7ff ff5a 	bl	800b944 <prvInsertTimerInActiveList>
 800ba90:	4603      	mov	r3, r0
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d070      	beq.n	800bb78 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ba96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba98:	6a1b      	ldr	r3, [r3, #32]
 800ba9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ba9c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ba9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baa0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800baa4:	f003 0304 	and.w	r3, r3, #4
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d065      	beq.n	800bb78 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800baac:	68ba      	ldr	r2, [r7, #8]
 800baae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bab0:	699b      	ldr	r3, [r3, #24]
 800bab2:	441a      	add	r2, r3
 800bab4:	2300      	movs	r3, #0
 800bab6:	9300      	str	r3, [sp, #0]
 800bab8:	2300      	movs	r3, #0
 800baba:	2100      	movs	r1, #0
 800babc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800babe:	f7ff fdfb 	bl	800b6b8 <xTimerGenericCommand>
 800bac2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bac4:	6a3b      	ldr	r3, [r7, #32]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d156      	bne.n	800bb78 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800baca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bace:	b672      	cpsid	i
 800bad0:	f383 8811 	msr	BASEPRI, r3
 800bad4:	f3bf 8f6f 	isb	sy
 800bad8:	f3bf 8f4f 	dsb	sy
 800badc:	b662      	cpsie	i
 800bade:	61bb      	str	r3, [r7, #24]
}
 800bae0:	bf00      	nop
 800bae2:	bf00      	nop
 800bae4:	e7fd      	b.n	800bae2 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bae8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800baec:	f023 0301 	bic.w	r3, r3, #1
 800baf0:	b2da      	uxtb	r2, r3
 800baf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baf4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800baf8:	e03f      	b.n	800bb7a <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bafa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bafc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bb00:	f043 0301 	orr.w	r3, r3, #1
 800bb04:	b2da      	uxtb	r2, r3
 800bb06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb08:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bb0c:	68ba      	ldr	r2, [r7, #8]
 800bb0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb10:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bb12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb14:	699b      	ldr	r3, [r3, #24]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d10d      	bne.n	800bb36 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800bb1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb1e:	b672      	cpsid	i
 800bb20:	f383 8811 	msr	BASEPRI, r3
 800bb24:	f3bf 8f6f 	isb	sy
 800bb28:	f3bf 8f4f 	dsb	sy
 800bb2c:	b662      	cpsie	i
 800bb2e:	617b      	str	r3, [r7, #20]
}
 800bb30:	bf00      	nop
 800bb32:	bf00      	nop
 800bb34:	e7fd      	b.n	800bb32 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bb36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb38:	699a      	ldr	r2, [r3, #24]
 800bb3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb3c:	18d1      	adds	r1, r2, r3
 800bb3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bb44:	f7ff fefe 	bl	800b944 <prvInsertTimerInActiveList>
					break;
 800bb48:	e017      	b.n	800bb7a <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bb4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bb50:	f003 0302 	and.w	r3, r3, #2
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d103      	bne.n	800bb60 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 800bb58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bb5a:	f000 fbd3 	bl	800c304 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bb5e:	e00c      	b.n	800bb7a <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bb60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb62:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bb66:	f023 0301 	bic.w	r3, r3, #1
 800bb6a:	b2da      	uxtb	r2, r3
 800bb6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb6e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bb72:	e002      	b.n	800bb7a <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 800bb74:	bf00      	nop
 800bb76:	e000      	b.n	800bb7a <prvProcessReceivedCommands+0x1b2>
					break;
 800bb78:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bb7a:	4b08      	ldr	r3, [pc, #32]	@ (800bb9c <prvProcessReceivedCommands+0x1d4>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	1d39      	adds	r1, r7, #4
 800bb80:	2200      	movs	r2, #0
 800bb82:	4618      	mov	r0, r3
 800bb84:	f7fe faba 	bl	800a0fc <xQueueReceive>
 800bb88:	4603      	mov	r3, r0
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	f47f af20 	bne.w	800b9d0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800bb90:	bf00      	nop
 800bb92:	bf00      	nop
 800bb94:	3730      	adds	r7, #48	@ 0x30
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}
 800bb9a:	bf00      	nop
 800bb9c:	200016d8 	.word	0x200016d8

0800bba0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b088      	sub	sp, #32
 800bba4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bba6:	e04b      	b.n	800bc40 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bba8:	4b2f      	ldr	r3, [pc, #188]	@ (800bc68 <prvSwitchTimerLists+0xc8>)
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	68db      	ldr	r3, [r3, #12]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbb2:	4b2d      	ldr	r3, [pc, #180]	@ (800bc68 <prvSwitchTimerLists+0xc8>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	68db      	ldr	r3, [r3, #12]
 800bbb8:	68db      	ldr	r3, [r3, #12]
 800bbba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	3304      	adds	r3, #4
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	f7fd ffad 	bl	8009b20 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	6a1b      	ldr	r3, [r3, #32]
 800bbca:	68f8      	ldr	r0, [r7, #12]
 800bbcc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bbd4:	f003 0304 	and.w	r3, r3, #4
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d031      	beq.n	800bc40 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	699b      	ldr	r3, [r3, #24]
 800bbe0:	693a      	ldr	r2, [r7, #16]
 800bbe2:	4413      	add	r3, r2
 800bbe4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bbe6:	68ba      	ldr	r2, [r7, #8]
 800bbe8:	693b      	ldr	r3, [r7, #16]
 800bbea:	429a      	cmp	r2, r3
 800bbec:	d90e      	bls.n	800bc0c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	68ba      	ldr	r2, [r7, #8]
 800bbf2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	68fa      	ldr	r2, [r7, #12]
 800bbf8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bbfa:	4b1b      	ldr	r3, [pc, #108]	@ (800bc68 <prvSwitchTimerLists+0xc8>)
 800bbfc:	681a      	ldr	r2, [r3, #0]
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	3304      	adds	r3, #4
 800bc02:	4619      	mov	r1, r3
 800bc04:	4610      	mov	r0, r2
 800bc06:	f7fd ff52 	bl	8009aae <vListInsert>
 800bc0a:	e019      	b.n	800bc40 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	9300      	str	r3, [sp, #0]
 800bc10:	2300      	movs	r3, #0
 800bc12:	693a      	ldr	r2, [r7, #16]
 800bc14:	2100      	movs	r1, #0
 800bc16:	68f8      	ldr	r0, [r7, #12]
 800bc18:	f7ff fd4e 	bl	800b6b8 <xTimerGenericCommand>
 800bc1c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d10d      	bne.n	800bc40 <prvSwitchTimerLists+0xa0>
	__asm volatile
 800bc24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc28:	b672      	cpsid	i
 800bc2a:	f383 8811 	msr	BASEPRI, r3
 800bc2e:	f3bf 8f6f 	isb	sy
 800bc32:	f3bf 8f4f 	dsb	sy
 800bc36:	b662      	cpsie	i
 800bc38:	603b      	str	r3, [r7, #0]
}
 800bc3a:	bf00      	nop
 800bc3c:	bf00      	nop
 800bc3e:	e7fd      	b.n	800bc3c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bc40:	4b09      	ldr	r3, [pc, #36]	@ (800bc68 <prvSwitchTimerLists+0xc8>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d1ae      	bne.n	800bba8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bc4a:	4b07      	ldr	r3, [pc, #28]	@ (800bc68 <prvSwitchTimerLists+0xc8>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bc50:	4b06      	ldr	r3, [pc, #24]	@ (800bc6c <prvSwitchTimerLists+0xcc>)
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	4a04      	ldr	r2, [pc, #16]	@ (800bc68 <prvSwitchTimerLists+0xc8>)
 800bc56:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bc58:	4a04      	ldr	r2, [pc, #16]	@ (800bc6c <prvSwitchTimerLists+0xcc>)
 800bc5a:	697b      	ldr	r3, [r7, #20]
 800bc5c:	6013      	str	r3, [r2, #0]
}
 800bc5e:	bf00      	nop
 800bc60:	3718      	adds	r7, #24
 800bc62:	46bd      	mov	sp, r7
 800bc64:	bd80      	pop	{r7, pc}
 800bc66:	bf00      	nop
 800bc68:	200016d0 	.word	0x200016d0
 800bc6c:	200016d4 	.word	0x200016d4

0800bc70 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b082      	sub	sp, #8
 800bc74:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bc76:	f000 f949 	bl	800bf0c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bc7a:	4b15      	ldr	r3, [pc, #84]	@ (800bcd0 <prvCheckForValidListAndQueue+0x60>)
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d120      	bne.n	800bcc4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bc82:	4814      	ldr	r0, [pc, #80]	@ (800bcd4 <prvCheckForValidListAndQueue+0x64>)
 800bc84:	f7fd fec2 	bl	8009a0c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bc88:	4813      	ldr	r0, [pc, #76]	@ (800bcd8 <prvCheckForValidListAndQueue+0x68>)
 800bc8a:	f7fd febf 	bl	8009a0c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bc8e:	4b13      	ldr	r3, [pc, #76]	@ (800bcdc <prvCheckForValidListAndQueue+0x6c>)
 800bc90:	4a10      	ldr	r2, [pc, #64]	@ (800bcd4 <prvCheckForValidListAndQueue+0x64>)
 800bc92:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bc94:	4b12      	ldr	r3, [pc, #72]	@ (800bce0 <prvCheckForValidListAndQueue+0x70>)
 800bc96:	4a10      	ldr	r2, [pc, #64]	@ (800bcd8 <prvCheckForValidListAndQueue+0x68>)
 800bc98:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	9300      	str	r3, [sp, #0]
 800bc9e:	4b11      	ldr	r3, [pc, #68]	@ (800bce4 <prvCheckForValidListAndQueue+0x74>)
 800bca0:	4a11      	ldr	r2, [pc, #68]	@ (800bce8 <prvCheckForValidListAndQueue+0x78>)
 800bca2:	2110      	movs	r1, #16
 800bca4:	200a      	movs	r0, #10
 800bca6:	f7fd ffd1 	bl	8009c4c <xQueueGenericCreateStatic>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	4a08      	ldr	r2, [pc, #32]	@ (800bcd0 <prvCheckForValidListAndQueue+0x60>)
 800bcae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bcb0:	4b07      	ldr	r3, [pc, #28]	@ (800bcd0 <prvCheckForValidListAndQueue+0x60>)
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d005      	beq.n	800bcc4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bcb8:	4b05      	ldr	r3, [pc, #20]	@ (800bcd0 <prvCheckForValidListAndQueue+0x60>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	490b      	ldr	r1, [pc, #44]	@ (800bcec <prvCheckForValidListAndQueue+0x7c>)
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f7fe fc14 	bl	800a4ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bcc4:	f000 f958 	bl	800bf78 <vPortExitCritical>
}
 800bcc8:	bf00      	nop
 800bcca:	46bd      	mov	sp, r7
 800bccc:	bd80      	pop	{r7, pc}
 800bcce:	bf00      	nop
 800bcd0:	200016d8 	.word	0x200016d8
 800bcd4:	200016a8 	.word	0x200016a8
 800bcd8:	200016bc 	.word	0x200016bc
 800bcdc:	200016d0 	.word	0x200016d0
 800bce0:	200016d4 	.word	0x200016d4
 800bce4:	20001784 	.word	0x20001784
 800bce8:	200016e4 	.word	0x200016e4
 800bcec:	080105a8 	.word	0x080105a8

0800bcf0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	b085      	sub	sp, #20
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	60f8      	str	r0, [r7, #12]
 800bcf8:	60b9      	str	r1, [r7, #8]
 800bcfa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	3b04      	subs	r3, #4
 800bd00:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800bd08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	3b04      	subs	r3, #4
 800bd0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bd10:	68bb      	ldr	r3, [r7, #8]
 800bd12:	f023 0201 	bic.w	r2, r3, #1
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	3b04      	subs	r3, #4
 800bd1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bd20:	4a0c      	ldr	r2, [pc, #48]	@ (800bd54 <pxPortInitialiseStack+0x64>)
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	3b14      	subs	r3, #20
 800bd2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bd2c:	687a      	ldr	r2, [r7, #4]
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	3b04      	subs	r3, #4
 800bd36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	f06f 0202 	mvn.w	r2, #2
 800bd3e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	3b20      	subs	r3, #32
 800bd44:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bd46:	68fb      	ldr	r3, [r7, #12]
}
 800bd48:	4618      	mov	r0, r3
 800bd4a:	3714      	adds	r7, #20
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd52:	4770      	bx	lr
 800bd54:	0800bd59 	.word	0x0800bd59

0800bd58 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bd58:	b480      	push	{r7}
 800bd5a:	b085      	sub	sp, #20
 800bd5c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bd5e:	2300      	movs	r3, #0
 800bd60:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bd62:	4b15      	ldr	r3, [pc, #84]	@ (800bdb8 <prvTaskExitError+0x60>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd6a:	d00d      	beq.n	800bd88 <prvTaskExitError+0x30>
	__asm volatile
 800bd6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd70:	b672      	cpsid	i
 800bd72:	f383 8811 	msr	BASEPRI, r3
 800bd76:	f3bf 8f6f 	isb	sy
 800bd7a:	f3bf 8f4f 	dsb	sy
 800bd7e:	b662      	cpsie	i
 800bd80:	60fb      	str	r3, [r7, #12]
}
 800bd82:	bf00      	nop
 800bd84:	bf00      	nop
 800bd86:	e7fd      	b.n	800bd84 <prvTaskExitError+0x2c>
	__asm volatile
 800bd88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd8c:	b672      	cpsid	i
 800bd8e:	f383 8811 	msr	BASEPRI, r3
 800bd92:	f3bf 8f6f 	isb	sy
 800bd96:	f3bf 8f4f 	dsb	sy
 800bd9a:	b662      	cpsie	i
 800bd9c:	60bb      	str	r3, [r7, #8]
}
 800bd9e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bda0:	bf00      	nop
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d0fc      	beq.n	800bda2 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bda8:	bf00      	nop
 800bdaa:	bf00      	nop
 800bdac:	3714      	adds	r7, #20
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb4:	4770      	bx	lr
 800bdb6:	bf00      	nop
 800bdb8:	20000098 	.word	0x20000098
 800bdbc:	00000000 	.word	0x00000000

0800bdc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bdc0:	4b07      	ldr	r3, [pc, #28]	@ (800bde0 <pxCurrentTCBConst2>)
 800bdc2:	6819      	ldr	r1, [r3, #0]
 800bdc4:	6808      	ldr	r0, [r1, #0]
 800bdc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdca:	f380 8809 	msr	PSP, r0
 800bdce:	f3bf 8f6f 	isb	sy
 800bdd2:	f04f 0000 	mov.w	r0, #0
 800bdd6:	f380 8811 	msr	BASEPRI, r0
 800bdda:	4770      	bx	lr
 800bddc:	f3af 8000 	nop.w

0800bde0 <pxCurrentTCBConst2>:
 800bde0:	200011a8 	.word	0x200011a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bde4:	bf00      	nop
 800bde6:	bf00      	nop

0800bde8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bde8:	4808      	ldr	r0, [pc, #32]	@ (800be0c <prvPortStartFirstTask+0x24>)
 800bdea:	6800      	ldr	r0, [r0, #0]
 800bdec:	6800      	ldr	r0, [r0, #0]
 800bdee:	f380 8808 	msr	MSP, r0
 800bdf2:	f04f 0000 	mov.w	r0, #0
 800bdf6:	f380 8814 	msr	CONTROL, r0
 800bdfa:	b662      	cpsie	i
 800bdfc:	b661      	cpsie	f
 800bdfe:	f3bf 8f4f 	dsb	sy
 800be02:	f3bf 8f6f 	isb	sy
 800be06:	df00      	svc	0
 800be08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800be0a:	bf00      	nop
 800be0c:	e000ed08 	.word	0xe000ed08

0800be10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b084      	sub	sp, #16
 800be14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800be16:	4b37      	ldr	r3, [pc, #220]	@ (800bef4 <xPortStartScheduler+0xe4>)
 800be18:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	781b      	ldrb	r3, [r3, #0]
 800be1e:	b2db      	uxtb	r3, r3
 800be20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	22ff      	movs	r2, #255	@ 0xff
 800be26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	781b      	ldrb	r3, [r3, #0]
 800be2c:	b2db      	uxtb	r3, r3
 800be2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800be30:	78fb      	ldrb	r3, [r7, #3]
 800be32:	b2db      	uxtb	r3, r3
 800be34:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800be38:	b2da      	uxtb	r2, r3
 800be3a:	4b2f      	ldr	r3, [pc, #188]	@ (800bef8 <xPortStartScheduler+0xe8>)
 800be3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800be3e:	4b2f      	ldr	r3, [pc, #188]	@ (800befc <xPortStartScheduler+0xec>)
 800be40:	2207      	movs	r2, #7
 800be42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800be44:	e009      	b.n	800be5a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800be46:	4b2d      	ldr	r3, [pc, #180]	@ (800befc <xPortStartScheduler+0xec>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	3b01      	subs	r3, #1
 800be4c:	4a2b      	ldr	r2, [pc, #172]	@ (800befc <xPortStartScheduler+0xec>)
 800be4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800be50:	78fb      	ldrb	r3, [r7, #3]
 800be52:	b2db      	uxtb	r3, r3
 800be54:	005b      	lsls	r3, r3, #1
 800be56:	b2db      	uxtb	r3, r3
 800be58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800be5a:	78fb      	ldrb	r3, [r7, #3]
 800be5c:	b2db      	uxtb	r3, r3
 800be5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be62:	2b80      	cmp	r3, #128	@ 0x80
 800be64:	d0ef      	beq.n	800be46 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800be66:	4b25      	ldr	r3, [pc, #148]	@ (800befc <xPortStartScheduler+0xec>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	f1c3 0307 	rsb	r3, r3, #7
 800be6e:	2b04      	cmp	r3, #4
 800be70:	d00d      	beq.n	800be8e <xPortStartScheduler+0x7e>
	__asm volatile
 800be72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be76:	b672      	cpsid	i
 800be78:	f383 8811 	msr	BASEPRI, r3
 800be7c:	f3bf 8f6f 	isb	sy
 800be80:	f3bf 8f4f 	dsb	sy
 800be84:	b662      	cpsie	i
 800be86:	60bb      	str	r3, [r7, #8]
}
 800be88:	bf00      	nop
 800be8a:	bf00      	nop
 800be8c:	e7fd      	b.n	800be8a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800be8e:	4b1b      	ldr	r3, [pc, #108]	@ (800befc <xPortStartScheduler+0xec>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	021b      	lsls	r3, r3, #8
 800be94:	4a19      	ldr	r2, [pc, #100]	@ (800befc <xPortStartScheduler+0xec>)
 800be96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800be98:	4b18      	ldr	r3, [pc, #96]	@ (800befc <xPortStartScheduler+0xec>)
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800bea0:	4a16      	ldr	r2, [pc, #88]	@ (800befc <xPortStartScheduler+0xec>)
 800bea2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	b2da      	uxtb	r2, r3
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800beac:	4b14      	ldr	r3, [pc, #80]	@ (800bf00 <xPortStartScheduler+0xf0>)
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	4a13      	ldr	r2, [pc, #76]	@ (800bf00 <xPortStartScheduler+0xf0>)
 800beb2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800beb6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800beb8:	4b11      	ldr	r3, [pc, #68]	@ (800bf00 <xPortStartScheduler+0xf0>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	4a10      	ldr	r2, [pc, #64]	@ (800bf00 <xPortStartScheduler+0xf0>)
 800bebe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800bec2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bec4:	f000 f8dc 	bl	800c080 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bec8:	4b0e      	ldr	r3, [pc, #56]	@ (800bf04 <xPortStartScheduler+0xf4>)
 800beca:	2200      	movs	r2, #0
 800becc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bece:	f000 f8fb 	bl	800c0c8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bed2:	4b0d      	ldr	r3, [pc, #52]	@ (800bf08 <xPortStartScheduler+0xf8>)
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	4a0c      	ldr	r2, [pc, #48]	@ (800bf08 <xPortStartScheduler+0xf8>)
 800bed8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800bedc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bede:	f7ff ff83 	bl	800bde8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bee2:	f7ff f807 	bl	800aef4 <vTaskSwitchContext>
	prvTaskExitError();
 800bee6:	f7ff ff37 	bl	800bd58 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800beea:	2300      	movs	r3, #0
}
 800beec:	4618      	mov	r0, r3
 800beee:	3710      	adds	r7, #16
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}
 800bef4:	e000e400 	.word	0xe000e400
 800bef8:	200017d4 	.word	0x200017d4
 800befc:	200017d8 	.word	0x200017d8
 800bf00:	e000ed20 	.word	0xe000ed20
 800bf04:	20000098 	.word	0x20000098
 800bf08:	e000ef34 	.word	0xe000ef34

0800bf0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bf0c:	b480      	push	{r7}
 800bf0e:	b083      	sub	sp, #12
 800bf10:	af00      	add	r7, sp, #0
	__asm volatile
 800bf12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf16:	b672      	cpsid	i
 800bf18:	f383 8811 	msr	BASEPRI, r3
 800bf1c:	f3bf 8f6f 	isb	sy
 800bf20:	f3bf 8f4f 	dsb	sy
 800bf24:	b662      	cpsie	i
 800bf26:	607b      	str	r3, [r7, #4]
}
 800bf28:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bf2a:	4b11      	ldr	r3, [pc, #68]	@ (800bf70 <vPortEnterCritical+0x64>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	3301      	adds	r3, #1
 800bf30:	4a0f      	ldr	r2, [pc, #60]	@ (800bf70 <vPortEnterCritical+0x64>)
 800bf32:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bf34:	4b0e      	ldr	r3, [pc, #56]	@ (800bf70 <vPortEnterCritical+0x64>)
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	2b01      	cmp	r3, #1
 800bf3a:	d112      	bne.n	800bf62 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bf3c:	4b0d      	ldr	r3, [pc, #52]	@ (800bf74 <vPortEnterCritical+0x68>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	b2db      	uxtb	r3, r3
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d00d      	beq.n	800bf62 <vPortEnterCritical+0x56>
	__asm volatile
 800bf46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf4a:	b672      	cpsid	i
 800bf4c:	f383 8811 	msr	BASEPRI, r3
 800bf50:	f3bf 8f6f 	isb	sy
 800bf54:	f3bf 8f4f 	dsb	sy
 800bf58:	b662      	cpsie	i
 800bf5a:	603b      	str	r3, [r7, #0]
}
 800bf5c:	bf00      	nop
 800bf5e:	bf00      	nop
 800bf60:	e7fd      	b.n	800bf5e <vPortEnterCritical+0x52>
	}
}
 800bf62:	bf00      	nop
 800bf64:	370c      	adds	r7, #12
 800bf66:	46bd      	mov	sp, r7
 800bf68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6c:	4770      	bx	lr
 800bf6e:	bf00      	nop
 800bf70:	20000098 	.word	0x20000098
 800bf74:	e000ed04 	.word	0xe000ed04

0800bf78 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bf78:	b480      	push	{r7}
 800bf7a:	b083      	sub	sp, #12
 800bf7c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bf7e:	4b13      	ldr	r3, [pc, #76]	@ (800bfcc <vPortExitCritical+0x54>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d10d      	bne.n	800bfa2 <vPortExitCritical+0x2a>
	__asm volatile
 800bf86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf8a:	b672      	cpsid	i
 800bf8c:	f383 8811 	msr	BASEPRI, r3
 800bf90:	f3bf 8f6f 	isb	sy
 800bf94:	f3bf 8f4f 	dsb	sy
 800bf98:	b662      	cpsie	i
 800bf9a:	607b      	str	r3, [r7, #4]
}
 800bf9c:	bf00      	nop
 800bf9e:	bf00      	nop
 800bfa0:	e7fd      	b.n	800bf9e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800bfa2:	4b0a      	ldr	r3, [pc, #40]	@ (800bfcc <vPortExitCritical+0x54>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	3b01      	subs	r3, #1
 800bfa8:	4a08      	ldr	r2, [pc, #32]	@ (800bfcc <vPortExitCritical+0x54>)
 800bfaa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bfac:	4b07      	ldr	r3, [pc, #28]	@ (800bfcc <vPortExitCritical+0x54>)
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d105      	bne.n	800bfc0 <vPortExitCritical+0x48>
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	f383 8811 	msr	BASEPRI, r3
}
 800bfbe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bfc0:	bf00      	nop
 800bfc2:	370c      	adds	r7, #12
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfca:	4770      	bx	lr
 800bfcc:	20000098 	.word	0x20000098

0800bfd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bfd0:	f3ef 8009 	mrs	r0, PSP
 800bfd4:	f3bf 8f6f 	isb	sy
 800bfd8:	4b15      	ldr	r3, [pc, #84]	@ (800c030 <pxCurrentTCBConst>)
 800bfda:	681a      	ldr	r2, [r3, #0]
 800bfdc:	f01e 0f10 	tst.w	lr, #16
 800bfe0:	bf08      	it	eq
 800bfe2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bfe6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfea:	6010      	str	r0, [r2, #0]
 800bfec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bff0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800bff4:	b672      	cpsid	i
 800bff6:	f380 8811 	msr	BASEPRI, r0
 800bffa:	f3bf 8f4f 	dsb	sy
 800bffe:	f3bf 8f6f 	isb	sy
 800c002:	b662      	cpsie	i
 800c004:	f7fe ff76 	bl	800aef4 <vTaskSwitchContext>
 800c008:	f04f 0000 	mov.w	r0, #0
 800c00c:	f380 8811 	msr	BASEPRI, r0
 800c010:	bc09      	pop	{r0, r3}
 800c012:	6819      	ldr	r1, [r3, #0]
 800c014:	6808      	ldr	r0, [r1, #0]
 800c016:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c01a:	f01e 0f10 	tst.w	lr, #16
 800c01e:	bf08      	it	eq
 800c020:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c024:	f380 8809 	msr	PSP, r0
 800c028:	f3bf 8f6f 	isb	sy
 800c02c:	4770      	bx	lr
 800c02e:	bf00      	nop

0800c030 <pxCurrentTCBConst>:
 800c030:	200011a8 	.word	0x200011a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c034:	bf00      	nop
 800c036:	bf00      	nop

0800c038 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b082      	sub	sp, #8
 800c03c:	af00      	add	r7, sp, #0
	__asm volatile
 800c03e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c042:	b672      	cpsid	i
 800c044:	f383 8811 	msr	BASEPRI, r3
 800c048:	f3bf 8f6f 	isb	sy
 800c04c:	f3bf 8f4f 	dsb	sy
 800c050:	b662      	cpsie	i
 800c052:	607b      	str	r3, [r7, #4]
}
 800c054:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c056:	f7fe fe91 	bl	800ad7c <xTaskIncrementTick>
 800c05a:	4603      	mov	r3, r0
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d003      	beq.n	800c068 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c060:	4b06      	ldr	r3, [pc, #24]	@ (800c07c <xPortSysTickHandler+0x44>)
 800c062:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c066:	601a      	str	r2, [r3, #0]
 800c068:	2300      	movs	r3, #0
 800c06a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	f383 8811 	msr	BASEPRI, r3
}
 800c072:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c074:	bf00      	nop
 800c076:	3708      	adds	r7, #8
 800c078:	46bd      	mov	sp, r7
 800c07a:	bd80      	pop	{r7, pc}
 800c07c:	e000ed04 	.word	0xe000ed04

0800c080 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c080:	b480      	push	{r7}
 800c082:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c084:	4b0b      	ldr	r3, [pc, #44]	@ (800c0b4 <vPortSetupTimerInterrupt+0x34>)
 800c086:	2200      	movs	r2, #0
 800c088:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c08a:	4b0b      	ldr	r3, [pc, #44]	@ (800c0b8 <vPortSetupTimerInterrupt+0x38>)
 800c08c:	2200      	movs	r2, #0
 800c08e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c090:	4b0a      	ldr	r3, [pc, #40]	@ (800c0bc <vPortSetupTimerInterrupt+0x3c>)
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	4a0a      	ldr	r2, [pc, #40]	@ (800c0c0 <vPortSetupTimerInterrupt+0x40>)
 800c096:	fba2 2303 	umull	r2, r3, r2, r3
 800c09a:	099b      	lsrs	r3, r3, #6
 800c09c:	4a09      	ldr	r2, [pc, #36]	@ (800c0c4 <vPortSetupTimerInterrupt+0x44>)
 800c09e:	3b01      	subs	r3, #1
 800c0a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c0a2:	4b04      	ldr	r3, [pc, #16]	@ (800c0b4 <vPortSetupTimerInterrupt+0x34>)
 800c0a4:	2207      	movs	r2, #7
 800c0a6:	601a      	str	r2, [r3, #0]
}
 800c0a8:	bf00      	nop
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b0:	4770      	bx	lr
 800c0b2:	bf00      	nop
 800c0b4:	e000e010 	.word	0xe000e010
 800c0b8:	e000e018 	.word	0xe000e018
 800c0bc:	20000000 	.word	0x20000000
 800c0c0:	10624dd3 	.word	0x10624dd3
 800c0c4:	e000e014 	.word	0xe000e014

0800c0c8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c0c8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c0d8 <vPortEnableVFP+0x10>
 800c0cc:	6801      	ldr	r1, [r0, #0]
 800c0ce:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c0d2:	6001      	str	r1, [r0, #0]
 800c0d4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c0d6:	bf00      	nop
 800c0d8:	e000ed88 	.word	0xe000ed88

0800c0dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c0dc:	b480      	push	{r7}
 800c0de:	b085      	sub	sp, #20
 800c0e0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c0e2:	f3ef 8305 	mrs	r3, IPSR
 800c0e6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	2b0f      	cmp	r3, #15
 800c0ec:	d917      	bls.n	800c11e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c0ee:	4a1a      	ldr	r2, [pc, #104]	@ (800c158 <vPortValidateInterruptPriority+0x7c>)
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	4413      	add	r3, r2
 800c0f4:	781b      	ldrb	r3, [r3, #0]
 800c0f6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c0f8:	4b18      	ldr	r3, [pc, #96]	@ (800c15c <vPortValidateInterruptPriority+0x80>)
 800c0fa:	781b      	ldrb	r3, [r3, #0]
 800c0fc:	7afa      	ldrb	r2, [r7, #11]
 800c0fe:	429a      	cmp	r2, r3
 800c100:	d20d      	bcs.n	800c11e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800c102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c106:	b672      	cpsid	i
 800c108:	f383 8811 	msr	BASEPRI, r3
 800c10c:	f3bf 8f6f 	isb	sy
 800c110:	f3bf 8f4f 	dsb	sy
 800c114:	b662      	cpsie	i
 800c116:	607b      	str	r3, [r7, #4]
}
 800c118:	bf00      	nop
 800c11a:	bf00      	nop
 800c11c:	e7fd      	b.n	800c11a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c11e:	4b10      	ldr	r3, [pc, #64]	@ (800c160 <vPortValidateInterruptPriority+0x84>)
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c126:	4b0f      	ldr	r3, [pc, #60]	@ (800c164 <vPortValidateInterruptPriority+0x88>)
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	429a      	cmp	r2, r3
 800c12c:	d90d      	bls.n	800c14a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800c12e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c132:	b672      	cpsid	i
 800c134:	f383 8811 	msr	BASEPRI, r3
 800c138:	f3bf 8f6f 	isb	sy
 800c13c:	f3bf 8f4f 	dsb	sy
 800c140:	b662      	cpsie	i
 800c142:	603b      	str	r3, [r7, #0]
}
 800c144:	bf00      	nop
 800c146:	bf00      	nop
 800c148:	e7fd      	b.n	800c146 <vPortValidateInterruptPriority+0x6a>
	}
 800c14a:	bf00      	nop
 800c14c:	3714      	adds	r7, #20
 800c14e:	46bd      	mov	sp, r7
 800c150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c154:	4770      	bx	lr
 800c156:	bf00      	nop
 800c158:	e000e3f0 	.word	0xe000e3f0
 800c15c:	200017d4 	.word	0x200017d4
 800c160:	e000ed0c 	.word	0xe000ed0c
 800c164:	200017d8 	.word	0x200017d8

0800c168 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b08a      	sub	sp, #40	@ 0x28
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c170:	2300      	movs	r3, #0
 800c172:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c174:	f7fe fd44 	bl	800ac00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c178:	4b5d      	ldr	r3, [pc, #372]	@ (800c2f0 <pvPortMalloc+0x188>)
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d101      	bne.n	800c184 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c180:	f000 f920 	bl	800c3c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c184:	4b5b      	ldr	r3, [pc, #364]	@ (800c2f4 <pvPortMalloc+0x18c>)
 800c186:	681a      	ldr	r2, [r3, #0]
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	4013      	ands	r3, r2
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	f040 8094 	bne.w	800c2ba <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d020      	beq.n	800c1da <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800c198:	2208      	movs	r2, #8
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	4413      	add	r3, r2
 800c19e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f003 0307 	and.w	r3, r3, #7
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d017      	beq.n	800c1da <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	f023 0307 	bic.w	r3, r3, #7
 800c1b0:	3308      	adds	r3, #8
 800c1b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f003 0307 	and.w	r3, r3, #7
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d00d      	beq.n	800c1da <pvPortMalloc+0x72>
	__asm volatile
 800c1be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1c2:	b672      	cpsid	i
 800c1c4:	f383 8811 	msr	BASEPRI, r3
 800c1c8:	f3bf 8f6f 	isb	sy
 800c1cc:	f3bf 8f4f 	dsb	sy
 800c1d0:	b662      	cpsie	i
 800c1d2:	617b      	str	r3, [r7, #20]
}
 800c1d4:	bf00      	nop
 800c1d6:	bf00      	nop
 800c1d8:	e7fd      	b.n	800c1d6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d06c      	beq.n	800c2ba <pvPortMalloc+0x152>
 800c1e0:	4b45      	ldr	r3, [pc, #276]	@ (800c2f8 <pvPortMalloc+0x190>)
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	687a      	ldr	r2, [r7, #4]
 800c1e6:	429a      	cmp	r2, r3
 800c1e8:	d867      	bhi.n	800c2ba <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c1ea:	4b44      	ldr	r3, [pc, #272]	@ (800c2fc <pvPortMalloc+0x194>)
 800c1ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c1ee:	4b43      	ldr	r3, [pc, #268]	@ (800c2fc <pvPortMalloc+0x194>)
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c1f4:	e004      	b.n	800c200 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800c1f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c1fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c202:	685b      	ldr	r3, [r3, #4]
 800c204:	687a      	ldr	r2, [r7, #4]
 800c206:	429a      	cmp	r2, r3
 800c208:	d903      	bls.n	800c212 <pvPortMalloc+0xaa>
 800c20a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d1f1      	bne.n	800c1f6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c212:	4b37      	ldr	r3, [pc, #220]	@ (800c2f0 <pvPortMalloc+0x188>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c218:	429a      	cmp	r2, r3
 800c21a:	d04e      	beq.n	800c2ba <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c21c:	6a3b      	ldr	r3, [r7, #32]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	2208      	movs	r2, #8
 800c222:	4413      	add	r3, r2
 800c224:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c228:	681a      	ldr	r2, [r3, #0]
 800c22a:	6a3b      	ldr	r3, [r7, #32]
 800c22c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c22e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c230:	685a      	ldr	r2, [r3, #4]
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	1ad2      	subs	r2, r2, r3
 800c236:	2308      	movs	r3, #8
 800c238:	005b      	lsls	r3, r3, #1
 800c23a:	429a      	cmp	r2, r3
 800c23c:	d922      	bls.n	800c284 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c23e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	4413      	add	r3, r2
 800c244:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c246:	69bb      	ldr	r3, [r7, #24]
 800c248:	f003 0307 	and.w	r3, r3, #7
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d00d      	beq.n	800c26c <pvPortMalloc+0x104>
	__asm volatile
 800c250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c254:	b672      	cpsid	i
 800c256:	f383 8811 	msr	BASEPRI, r3
 800c25a:	f3bf 8f6f 	isb	sy
 800c25e:	f3bf 8f4f 	dsb	sy
 800c262:	b662      	cpsie	i
 800c264:	613b      	str	r3, [r7, #16]
}
 800c266:	bf00      	nop
 800c268:	bf00      	nop
 800c26a:	e7fd      	b.n	800c268 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c26c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c26e:	685a      	ldr	r2, [r3, #4]
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	1ad2      	subs	r2, r2, r3
 800c274:	69bb      	ldr	r3, [r7, #24]
 800c276:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c27a:	687a      	ldr	r2, [r7, #4]
 800c27c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c27e:	69b8      	ldr	r0, [r7, #24]
 800c280:	f000 f902 	bl	800c488 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c284:	4b1c      	ldr	r3, [pc, #112]	@ (800c2f8 <pvPortMalloc+0x190>)
 800c286:	681a      	ldr	r2, [r3, #0]
 800c288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c28a:	685b      	ldr	r3, [r3, #4]
 800c28c:	1ad3      	subs	r3, r2, r3
 800c28e:	4a1a      	ldr	r2, [pc, #104]	@ (800c2f8 <pvPortMalloc+0x190>)
 800c290:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c292:	4b19      	ldr	r3, [pc, #100]	@ (800c2f8 <pvPortMalloc+0x190>)
 800c294:	681a      	ldr	r2, [r3, #0]
 800c296:	4b1a      	ldr	r3, [pc, #104]	@ (800c300 <pvPortMalloc+0x198>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	429a      	cmp	r2, r3
 800c29c:	d203      	bcs.n	800c2a6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c29e:	4b16      	ldr	r3, [pc, #88]	@ (800c2f8 <pvPortMalloc+0x190>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	4a17      	ldr	r2, [pc, #92]	@ (800c300 <pvPortMalloc+0x198>)
 800c2a4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c2a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2a8:	685a      	ldr	r2, [r3, #4]
 800c2aa:	4b12      	ldr	r3, [pc, #72]	@ (800c2f4 <pvPortMalloc+0x18c>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	431a      	orrs	r2, r3
 800c2b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2b2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c2b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c2ba:	f7fe fcaf 	bl	800ac1c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c2be:	69fb      	ldr	r3, [r7, #28]
 800c2c0:	f003 0307 	and.w	r3, r3, #7
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d00d      	beq.n	800c2e4 <pvPortMalloc+0x17c>
	__asm volatile
 800c2c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2cc:	b672      	cpsid	i
 800c2ce:	f383 8811 	msr	BASEPRI, r3
 800c2d2:	f3bf 8f6f 	isb	sy
 800c2d6:	f3bf 8f4f 	dsb	sy
 800c2da:	b662      	cpsie	i
 800c2dc:	60fb      	str	r3, [r7, #12]
}
 800c2de:	bf00      	nop
 800c2e0:	bf00      	nop
 800c2e2:	e7fd      	b.n	800c2e0 <pvPortMalloc+0x178>
	return pvReturn;
 800c2e4:	69fb      	ldr	r3, [r7, #28]
}
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	3728      	adds	r7, #40	@ 0x28
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	bd80      	pop	{r7, pc}
 800c2ee:	bf00      	nop
 800c2f0:	2000dfe4 	.word	0x2000dfe4
 800c2f4:	2000dff0 	.word	0x2000dff0
 800c2f8:	2000dfe8 	.word	0x2000dfe8
 800c2fc:	2000dfdc 	.word	0x2000dfdc
 800c300:	2000dfec 	.word	0x2000dfec

0800c304 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b086      	sub	sp, #24
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d04e      	beq.n	800c3b4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c316:	2308      	movs	r3, #8
 800c318:	425b      	negs	r3, r3
 800c31a:	697a      	ldr	r2, [r7, #20]
 800c31c:	4413      	add	r3, r2
 800c31e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c320:	697b      	ldr	r3, [r7, #20]
 800c322:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c324:	693b      	ldr	r3, [r7, #16]
 800c326:	685a      	ldr	r2, [r3, #4]
 800c328:	4b24      	ldr	r3, [pc, #144]	@ (800c3bc <vPortFree+0xb8>)
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	4013      	ands	r3, r2
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d10d      	bne.n	800c34e <vPortFree+0x4a>
	__asm volatile
 800c332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c336:	b672      	cpsid	i
 800c338:	f383 8811 	msr	BASEPRI, r3
 800c33c:	f3bf 8f6f 	isb	sy
 800c340:	f3bf 8f4f 	dsb	sy
 800c344:	b662      	cpsie	i
 800c346:	60fb      	str	r3, [r7, #12]
}
 800c348:	bf00      	nop
 800c34a:	bf00      	nop
 800c34c:	e7fd      	b.n	800c34a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c34e:	693b      	ldr	r3, [r7, #16]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d00d      	beq.n	800c372 <vPortFree+0x6e>
	__asm volatile
 800c356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c35a:	b672      	cpsid	i
 800c35c:	f383 8811 	msr	BASEPRI, r3
 800c360:	f3bf 8f6f 	isb	sy
 800c364:	f3bf 8f4f 	dsb	sy
 800c368:	b662      	cpsie	i
 800c36a:	60bb      	str	r3, [r7, #8]
}
 800c36c:	bf00      	nop
 800c36e:	bf00      	nop
 800c370:	e7fd      	b.n	800c36e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c372:	693b      	ldr	r3, [r7, #16]
 800c374:	685a      	ldr	r2, [r3, #4]
 800c376:	4b11      	ldr	r3, [pc, #68]	@ (800c3bc <vPortFree+0xb8>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	4013      	ands	r3, r2
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d019      	beq.n	800c3b4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c380:	693b      	ldr	r3, [r7, #16]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d115      	bne.n	800c3b4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c388:	693b      	ldr	r3, [r7, #16]
 800c38a:	685a      	ldr	r2, [r3, #4]
 800c38c:	4b0b      	ldr	r3, [pc, #44]	@ (800c3bc <vPortFree+0xb8>)
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	43db      	mvns	r3, r3
 800c392:	401a      	ands	r2, r3
 800c394:	693b      	ldr	r3, [r7, #16]
 800c396:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c398:	f7fe fc32 	bl	800ac00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c39c:	693b      	ldr	r3, [r7, #16]
 800c39e:	685a      	ldr	r2, [r3, #4]
 800c3a0:	4b07      	ldr	r3, [pc, #28]	@ (800c3c0 <vPortFree+0xbc>)
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	4413      	add	r3, r2
 800c3a6:	4a06      	ldr	r2, [pc, #24]	@ (800c3c0 <vPortFree+0xbc>)
 800c3a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c3aa:	6938      	ldr	r0, [r7, #16]
 800c3ac:	f000 f86c 	bl	800c488 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c3b0:	f7fe fc34 	bl	800ac1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c3b4:	bf00      	nop
 800c3b6:	3718      	adds	r7, #24
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bd80      	pop	{r7, pc}
 800c3bc:	2000dff0 	.word	0x2000dff0
 800c3c0:	2000dfe8 	.word	0x2000dfe8

0800c3c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c3c4:	b480      	push	{r7}
 800c3c6:	b085      	sub	sp, #20
 800c3c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c3ca:	f44f 4348 	mov.w	r3, #51200	@ 0xc800
 800c3ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c3d0:	4b27      	ldr	r3, [pc, #156]	@ (800c470 <prvHeapInit+0xac>)
 800c3d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	f003 0307 	and.w	r3, r3, #7
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d00c      	beq.n	800c3f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	3307      	adds	r3, #7
 800c3e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	f023 0307 	bic.w	r3, r3, #7
 800c3ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c3ec:	68ba      	ldr	r2, [r7, #8]
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	1ad3      	subs	r3, r2, r3
 800c3f2:	4a1f      	ldr	r2, [pc, #124]	@ (800c470 <prvHeapInit+0xac>)
 800c3f4:	4413      	add	r3, r2
 800c3f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c3fc:	4a1d      	ldr	r2, [pc, #116]	@ (800c474 <prvHeapInit+0xb0>)
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c402:	4b1c      	ldr	r3, [pc, #112]	@ (800c474 <prvHeapInit+0xb0>)
 800c404:	2200      	movs	r2, #0
 800c406:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	68ba      	ldr	r2, [r7, #8]
 800c40c:	4413      	add	r3, r2
 800c40e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c410:	2208      	movs	r2, #8
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	1a9b      	subs	r3, r3, r2
 800c416:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	f023 0307 	bic.w	r3, r3, #7
 800c41e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	4a15      	ldr	r2, [pc, #84]	@ (800c478 <prvHeapInit+0xb4>)
 800c424:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c426:	4b14      	ldr	r3, [pc, #80]	@ (800c478 <prvHeapInit+0xb4>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	2200      	movs	r2, #0
 800c42c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c42e:	4b12      	ldr	r3, [pc, #72]	@ (800c478 <prvHeapInit+0xb4>)
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	2200      	movs	r2, #0
 800c434:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	68fa      	ldr	r2, [r7, #12]
 800c43e:	1ad2      	subs	r2, r2, r3
 800c440:	683b      	ldr	r3, [r7, #0]
 800c442:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c444:	4b0c      	ldr	r3, [pc, #48]	@ (800c478 <prvHeapInit+0xb4>)
 800c446:	681a      	ldr	r2, [r3, #0]
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	685b      	ldr	r3, [r3, #4]
 800c450:	4a0a      	ldr	r2, [pc, #40]	@ (800c47c <prvHeapInit+0xb8>)
 800c452:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	685b      	ldr	r3, [r3, #4]
 800c458:	4a09      	ldr	r2, [pc, #36]	@ (800c480 <prvHeapInit+0xbc>)
 800c45a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c45c:	4b09      	ldr	r3, [pc, #36]	@ (800c484 <prvHeapInit+0xc0>)
 800c45e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c462:	601a      	str	r2, [r3, #0]
}
 800c464:	bf00      	nop
 800c466:	3714      	adds	r7, #20
 800c468:	46bd      	mov	sp, r7
 800c46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46e:	4770      	bx	lr
 800c470:	200017dc 	.word	0x200017dc
 800c474:	2000dfdc 	.word	0x2000dfdc
 800c478:	2000dfe4 	.word	0x2000dfe4
 800c47c:	2000dfec 	.word	0x2000dfec
 800c480:	2000dfe8 	.word	0x2000dfe8
 800c484:	2000dff0 	.word	0x2000dff0

0800c488 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c488:	b480      	push	{r7}
 800c48a:	b085      	sub	sp, #20
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c490:	4b28      	ldr	r3, [pc, #160]	@ (800c534 <prvInsertBlockIntoFreeList+0xac>)
 800c492:	60fb      	str	r3, [r7, #12]
 800c494:	e002      	b.n	800c49c <prvInsertBlockIntoFreeList+0x14>
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	60fb      	str	r3, [r7, #12]
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	687a      	ldr	r2, [r7, #4]
 800c4a2:	429a      	cmp	r2, r3
 800c4a4:	d8f7      	bhi.n	800c496 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	685b      	ldr	r3, [r3, #4]
 800c4ae:	68ba      	ldr	r2, [r7, #8]
 800c4b0:	4413      	add	r3, r2
 800c4b2:	687a      	ldr	r2, [r7, #4]
 800c4b4:	429a      	cmp	r2, r3
 800c4b6:	d108      	bne.n	800c4ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	685a      	ldr	r2, [r3, #4]
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	685b      	ldr	r3, [r3, #4]
 800c4c0:	441a      	add	r2, r3
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	685b      	ldr	r3, [r3, #4]
 800c4d2:	68ba      	ldr	r2, [r7, #8]
 800c4d4:	441a      	add	r2, r3
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	429a      	cmp	r2, r3
 800c4dc:	d118      	bne.n	800c510 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	681a      	ldr	r2, [r3, #0]
 800c4e2:	4b15      	ldr	r3, [pc, #84]	@ (800c538 <prvInsertBlockIntoFreeList+0xb0>)
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	429a      	cmp	r2, r3
 800c4e8:	d00d      	beq.n	800c506 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	685a      	ldr	r2, [r3, #4]
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	685b      	ldr	r3, [r3, #4]
 800c4f4:	441a      	add	r2, r3
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	681a      	ldr	r2, [r3, #0]
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	601a      	str	r2, [r3, #0]
 800c504:	e008      	b.n	800c518 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c506:	4b0c      	ldr	r3, [pc, #48]	@ (800c538 <prvInsertBlockIntoFreeList+0xb0>)
 800c508:	681a      	ldr	r2, [r3, #0]
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	601a      	str	r2, [r3, #0]
 800c50e:	e003      	b.n	800c518 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	681a      	ldr	r2, [r3, #0]
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c518:	68fa      	ldr	r2, [r7, #12]
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	429a      	cmp	r2, r3
 800c51e:	d002      	beq.n	800c526 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	687a      	ldr	r2, [r7, #4]
 800c524:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c526:	bf00      	nop
 800c528:	3714      	adds	r7, #20
 800c52a:	46bd      	mov	sp, r7
 800c52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c530:	4770      	bx	lr
 800c532:	bf00      	nop
 800c534:	2000dfdc 	.word	0x2000dfdc
 800c538:	2000dfe4 	.word	0x2000dfe4

0800c53c <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 800c53c:	b480      	push	{r7}
 800c53e:	b083      	sub	sp, #12
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	69db      	ldr	r3, [r3, #28]
 800c548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c54c:	2b40      	cmp	r3, #64	@ 0x40
 800c54e:	d101      	bne.n	800c554 <LL_USART_IsActiveFlag_TC+0x18>
 800c550:	2301      	movs	r3, #1
 800c552:	e000      	b.n	800c556 <LL_USART_IsActiveFlag_TC+0x1a>
 800c554:	2300      	movs	r3, #0
}
 800c556:	4618      	mov	r0, r3
 800c558:	370c      	adds	r7, #12
 800c55a:	46bd      	mov	sp, r7
 800c55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c560:	4770      	bx	lr

0800c562 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 800c562:	b480      	push	{r7}
 800c564:	b083      	sub	sp, #12
 800c566:	af00      	add	r7, sp, #0
 800c568:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	69db      	ldr	r3, [r3, #28]
 800c56e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c572:	2b80      	cmp	r3, #128	@ 0x80
 800c574:	d101      	bne.n	800c57a <LL_USART_IsActiveFlag_TXE+0x18>
 800c576:	2301      	movs	r3, #1
 800c578:	e000      	b.n	800c57c <LL_USART_IsActiveFlag_TXE+0x1a>
 800c57a:	2300      	movs	r3, #0
}
 800c57c:	4618      	mov	r0, r3
 800c57e:	370c      	adds	r7, #12
 800c580:	46bd      	mov	sp, r7
 800c582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c586:	4770      	bx	lr

0800c588 <LL_USART_ClearFlag_TC>:
  * @rmtoll ICR          TCCF          LL_USART_ClearFlag_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
 800c588:	b480      	push	{r7}
 800c58a:	b083      	sub	sp, #12
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2240      	movs	r2, #64	@ 0x40
 800c594:	621a      	str	r2, [r3, #32]
}
 800c596:	bf00      	nop
 800c598:	370c      	adds	r7, #12
 800c59a:	46bd      	mov	sp, r7
 800c59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a0:	4770      	bx	lr

0800c5a2 <LL_USART_EnableIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_EnableIT_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TC(USART_TypeDef *USARTx)
{
 800c5a2:	b480      	push	{r7}
 800c5a4:	b089      	sub	sp, #36	@ 0x24
 800c5a6:	af00      	add	r7, sp, #0
 800c5a8:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	e853 3f00 	ldrex	r3, [r3]
 800c5b4:	60bb      	str	r3, [r7, #8]
   return(result);
 800c5b6:	68bb      	ldr	r3, [r7, #8]
 800c5b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c5bc:	61fb      	str	r3, [r7, #28]
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	69fa      	ldr	r2, [r7, #28]
 800c5c2:	61ba      	str	r2, [r7, #24]
 800c5c4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5c6:	6979      	ldr	r1, [r7, #20]
 800c5c8:	69ba      	ldr	r2, [r7, #24]
 800c5ca:	e841 2300 	strex	r3, r2, [r1]
 800c5ce:	613b      	str	r3, [r7, #16]
   return(result);
 800c5d0:	693b      	ldr	r3, [r7, #16]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d1e9      	bne.n	800c5aa <LL_USART_EnableIT_TC+0x8>
}
 800c5d6:	bf00      	nop
 800c5d8:	bf00      	nop
 800c5da:	3724      	adds	r7, #36	@ 0x24
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e2:	4770      	bx	lr

0800c5e4 <LL_USART_DisableIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_DisableIT_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TC(USART_TypeDef *USARTx)
{
 800c5e4:	b480      	push	{r7}
 800c5e6:	b089      	sub	sp, #36	@ 0x24
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	e853 3f00 	ldrex	r3, [r3]
 800c5f6:	60bb      	str	r3, [r7, #8]
   return(result);
 800c5f8:	68bb      	ldr	r3, [r7, #8]
 800c5fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c5fe:	61fb      	str	r3, [r7, #28]
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	69fa      	ldr	r2, [r7, #28]
 800c604:	61ba      	str	r2, [r7, #24]
 800c606:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c608:	6979      	ldr	r1, [r7, #20]
 800c60a:	69ba      	ldr	r2, [r7, #24]
 800c60c:	e841 2300 	strex	r3, r2, [r1]
 800c610:	613b      	str	r3, [r7, #16]
   return(result);
 800c612:	693b      	ldr	r3, [r7, #16]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d1e9      	bne.n	800c5ec <LL_USART_DisableIT_TC+0x8>
}
 800c618:	bf00      	nop
 800c61a:	bf00      	nop
 800c61c:	3724      	adds	r7, #36	@ 0x24
 800c61e:	46bd      	mov	sp, r7
 800c620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c624:	4770      	bx	lr

0800c626 <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 800c626:	b480      	push	{r7}
 800c628:	b089      	sub	sp, #36	@ 0x24
 800c62a:	af00      	add	r7, sp, #0
 800c62c:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	e853 3f00 	ldrex	r3, [r3]
 800c638:	60bb      	str	r3, [r7, #8]
   return(result);
 800c63a:	68bb      	ldr	r3, [r7, #8]
 800c63c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c640:	61fb      	str	r3, [r7, #28]
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	69fa      	ldr	r2, [r7, #28]
 800c646:	61ba      	str	r2, [r7, #24]
 800c648:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c64a:	6979      	ldr	r1, [r7, #20]
 800c64c:	69ba      	ldr	r2, [r7, #24]
 800c64e:	e841 2300 	strex	r3, r2, [r1]
 800c652:	613b      	str	r3, [r7, #16]
   return(result);
 800c654:	693b      	ldr	r3, [r7, #16]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d1e9      	bne.n	800c62e <LL_USART_DisableIT_TXE+0x8>
}
 800c65a:	bf00      	nop
 800c65c:	bf00      	nop
 800c65e:	3724      	adds	r7, #36	@ 0x24
 800c660:	46bd      	mov	sp, r7
 800c662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c666:	4770      	bx	lr

0800c668 <LL_USART_IsEnabledIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_IsEnabledIT_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TC(const USART_TypeDef *USARTx)
{
 800c668:	b480      	push	{r7}
 800c66a:	b083      	sub	sp, #12
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE)) ? 1UL : 0UL);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c678:	2b40      	cmp	r3, #64	@ 0x40
 800c67a:	d101      	bne.n	800c680 <LL_USART_IsEnabledIT_TC+0x18>
 800c67c:	2301      	movs	r3, #1
 800c67e:	e000      	b.n	800c682 <LL_USART_IsEnabledIT_TC+0x1a>
 800c680:	2300      	movs	r3, #0
}
 800c682:	4618      	mov	r0, r3
 800c684:	370c      	adds	r7, #12
 800c686:	46bd      	mov	sp, r7
 800c688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68c:	4770      	bx	lr

0800c68e <LL_USART_IsEnabledIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_IsEnabledIT_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE(const USART_TypeDef *USARTx)
{
 800c68e:	b480      	push	{r7}
 800c690:	b083      	sub	sp, #12
 800c692:	af00      	add	r7, sp, #0
 800c694:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE)) ? 1U : 0U);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c69e:	2b80      	cmp	r3, #128	@ 0x80
 800c6a0:	d101      	bne.n	800c6a6 <LL_USART_IsEnabledIT_TXE+0x18>
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	e000      	b.n	800c6a8 <LL_USART_IsEnabledIT_TXE+0x1a>
 800c6a6:	2300      	movs	r3, #0
}
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	370c      	adds	r7, #12
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b2:	4770      	bx	lr

0800c6b4 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800c6b4:	b480      	push	{r7}
 800c6b6:	b083      	sub	sp, #12
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
 800c6bc:	460b      	mov	r3, r1
 800c6be:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 800c6c0:	78fa      	ldrb	r2, [r7, #3]
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800c6c6:	bf00      	nop
 800c6c8:	370c      	adds	r7, #12
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d0:	4770      	bx	lr
	...

0800c6d4 <uart_ring_buffer_get>:
 * @brief Get one byte from ring buffer
 * @param byte: Pointer to store the byte
 * @return 1 if success, 0 if buffer empty
 */
uint8_t uart_ring_buffer_get(uint8_t* byte)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b082      	sub	sp, #8
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
    if (uart_ring_buffer_is_empty())
 800c6dc:	f000 f82e 	bl	800c73c <uart_ring_buffer_is_empty>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d001      	beq.n	800c6ea <uart_ring_buffer_get+0x16>
    {
        return 0;
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	e022      	b.n	800c730 <uart_ring_buffer_get+0x5c>
    }

    *byte = uart_ring_buffer.data[uart_ring_buffer.tail];
 800c6ea:	4b13      	ldr	r3, [pc, #76]	@ (800c738 <uart_ring_buffer_get+0x64>)
 800c6ec:	f8b3 3202 	ldrh.w	r3, [r3, #514]	@ 0x202
 800c6f0:	b29b      	uxth	r3, r3
 800c6f2:	461a      	mov	r2, r3
 800c6f4:	4b10      	ldr	r3, [pc, #64]	@ (800c738 <uart_ring_buffer_get+0x64>)
 800c6f6:	5c9a      	ldrb	r2, [r3, r2]
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	701a      	strb	r2, [r3, #0]
    uart_ring_buffer.tail = (uart_ring_buffer.tail + 1) % RING_BUFFER_SIZE;
 800c6fc:	4b0e      	ldr	r3, [pc, #56]	@ (800c738 <uart_ring_buffer_get+0x64>)
 800c6fe:	f8b3 3202 	ldrh.w	r3, [r3, #514]	@ 0x202
 800c702:	b29b      	uxth	r3, r3
 800c704:	3301      	adds	r3, #1
 800c706:	425a      	negs	r2, r3
 800c708:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c70c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c710:	bf58      	it	pl
 800c712:	4253      	negpl	r3, r2
 800c714:	b29a      	uxth	r2, r3
 800c716:	4b08      	ldr	r3, [pc, #32]	@ (800c738 <uart_ring_buffer_get+0x64>)
 800c718:	f8a3 2202 	strh.w	r2, [r3, #514]	@ 0x202
    uart_ring_buffer.count--;
 800c71c:	4b06      	ldr	r3, [pc, #24]	@ (800c738 <uart_ring_buffer_get+0x64>)
 800c71e:	f8b3 3204 	ldrh.w	r3, [r3, #516]	@ 0x204
 800c722:	b29b      	uxth	r3, r3
 800c724:	3b01      	subs	r3, #1
 800c726:	b29a      	uxth	r2, r3
 800c728:	4b03      	ldr	r3, [pc, #12]	@ (800c738 <uart_ring_buffer_get+0x64>)
 800c72a:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204

    return 1;
 800c72e:	2301      	movs	r3, #1
}
 800c730:	4618      	mov	r0, r3
 800c732:	3708      	adds	r7, #8
 800c734:	46bd      	mov	sp, r7
 800c736:	bd80      	pop	{r7, pc}
 800c738:	2000dff4 	.word	0x2000dff4

0800c73c <uart_ring_buffer_is_empty>:

/**
 * @brief Check if ring buffer is empty
 */
uint8_t uart_ring_buffer_is_empty(void)
{
 800c73c:	b480      	push	{r7}
 800c73e:	af00      	add	r7, sp, #0
    return (uart_ring_buffer.count == 0);
 800c740:	4b06      	ldr	r3, [pc, #24]	@ (800c75c <uart_ring_buffer_is_empty+0x20>)
 800c742:	f8b3 3204 	ldrh.w	r3, [r3, #516]	@ 0x204
 800c746:	b29b      	uxth	r3, r3
 800c748:	2b00      	cmp	r3, #0
 800c74a:	bf0c      	ite	eq
 800c74c:	2301      	moveq	r3, #1
 800c74e:	2300      	movne	r3, #0
 800c750:	b2db      	uxtb	r3, r3
}
 800c752:	4618      	mov	r0, r3
 800c754:	46bd      	mov	sp, r7
 800c756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75a:	4770      	bx	lr
 800c75c:	2000dff4 	.word	0x2000dff4

0800c760 <uart_IRQ_handler>:
/**
 * @brief UART interrupt handler
 * Call this in UART IRQ handler
 */
void uart_IRQ_handler(void)
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b082      	sub	sp, #8
 800c764:	af00      	add	r7, sp, #0
    // TXE interrupt - ready to send next byte
    if (LL_USART_IsActiveFlag_TXE(USART6) && LL_USART_IsEnabledIT_TXE(USART6))
 800c766:	4821      	ldr	r0, [pc, #132]	@ (800c7ec <uart_IRQ_handler+0x8c>)
 800c768:	f7ff fefb 	bl	800c562 <LL_USART_IsActiveFlag_TXE>
 800c76c:	4603      	mov	r3, r0
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d01f      	beq.n	800c7b2 <uart_IRQ_handler+0x52>
 800c772:	481e      	ldr	r0, [pc, #120]	@ (800c7ec <uart_IRQ_handler+0x8c>)
 800c774:	f7ff ff8b 	bl	800c68e <LL_USART_IsEnabledIT_TXE>
 800c778:	4603      	mov	r3, r0
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d019      	beq.n	800c7b2 <uart_IRQ_handler+0x52>
    {
        uint8_t next_byte;

        if (uart_ring_buffer_get(&next_byte))
 800c77e:	1dfb      	adds	r3, r7, #7
 800c780:	4618      	mov	r0, r3
 800c782:	f7ff ffa7 	bl	800c6d4 <uart_ring_buffer_get>
 800c786:	4603      	mov	r3, r0
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d00c      	beq.n	800c7a6 <uart_IRQ_handler+0x46>
        {
            // Send next byte
            LL_USART_TransmitData8(USART6, next_byte);
 800c78c:	79fb      	ldrb	r3, [r7, #7]
 800c78e:	4619      	mov	r1, r3
 800c790:	4816      	ldr	r0, [pc, #88]	@ (800c7ec <uart_IRQ_handler+0x8c>)
 800c792:	f7ff ff8f 	bl	800c6b4 <LL_USART_TransmitData8>
            current_tx_count++;
 800c796:	4b16      	ldr	r3, [pc, #88]	@ (800c7f0 <uart_IRQ_handler+0x90>)
 800c798:	881b      	ldrh	r3, [r3, #0]
 800c79a:	b29b      	uxth	r3, r3
 800c79c:	3301      	adds	r3, #1
 800c79e:	b29a      	uxth	r2, r3
 800c7a0:	4b13      	ldr	r3, [pc, #76]	@ (800c7f0 <uart_IRQ_handler+0x90>)
 800c7a2:	801a      	strh	r2, [r3, #0]
 800c7a4:	e005      	b.n	800c7b2 <uart_IRQ_handler+0x52>
        }
        else
        {
            // No more data, wait for transmission complete
            LL_USART_DisableIT_TXE(USART6);
 800c7a6:	4811      	ldr	r0, [pc, #68]	@ (800c7ec <uart_IRQ_handler+0x8c>)
 800c7a8:	f7ff ff3d 	bl	800c626 <LL_USART_DisableIT_TXE>
            LL_USART_EnableIT_TC(USART6);
 800c7ac:	480f      	ldr	r0, [pc, #60]	@ (800c7ec <uart_IRQ_handler+0x8c>)
 800c7ae:	f7ff fef8 	bl	800c5a2 <LL_USART_EnableIT_TC>
        }
    }

    // TC interrupt - transmission complete
    if (LL_USART_IsActiveFlag_TC(USART6) && LL_USART_IsEnabledIT_TC(USART6))
 800c7b2:	480e      	ldr	r0, [pc, #56]	@ (800c7ec <uart_IRQ_handler+0x8c>)
 800c7b4:	f7ff fec2 	bl	800c53c <LL_USART_IsActiveFlag_TC>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d011      	beq.n	800c7e2 <uart_IRQ_handler+0x82>
 800c7be:	480b      	ldr	r0, [pc, #44]	@ (800c7ec <uart_IRQ_handler+0x8c>)
 800c7c0:	f7ff ff52 	bl	800c668 <LL_USART_IsEnabledIT_TC>
 800c7c4:	4603      	mov	r3, r0
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d00b      	beq.n	800c7e2 <uart_IRQ_handler+0x82>
    {
        LL_USART_ClearFlag_TC(USART6);
 800c7ca:	4808      	ldr	r0, [pc, #32]	@ (800c7ec <uart_IRQ_handler+0x8c>)
 800c7cc:	f7ff fedc 	bl	800c588 <LL_USART_ClearFlag_TC>
        LL_USART_DisableIT_TC(USART6);
 800c7d0:	4806      	ldr	r0, [pc, #24]	@ (800c7ec <uart_IRQ_handler+0x8c>)
 800c7d2:	f7ff ff07 	bl	800c5e4 <LL_USART_DisableIT_TC>

        // Mark as not busy
        uart_tx_busy = 0;
 800c7d6:	4b07      	ldr	r3, [pc, #28]	@ (800c7f4 <uart_IRQ_handler+0x94>)
 800c7d8:	2200      	movs	r2, #0
 800c7da:	701a      	strb	r2, [r3, #0]
        current_tx_count = 0;
 800c7dc:	4b04      	ldr	r3, [pc, #16]	@ (800c7f0 <uart_IRQ_handler+0x90>)
 800c7de:	2200      	movs	r2, #0
 800c7e0:	801a      	strh	r2, [r3, #0]
    }
}
 800c7e2:	bf00      	nop
 800c7e4:	3708      	adds	r7, #8
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}
 800c7ea:	bf00      	nop
 800c7ec:	40011400 	.word	0x40011400
 800c7f0:	2000e1fc 	.word	0x2000e1fc
 800c7f4:	2000e1fa 	.word	0x2000e1fa

0800c7f8 <Queue_Init>:
 * @param queue: Con trỏ tới cấu trúc hàng đợi
 * @param buffer: Buffer để lưu dữ liệu
 * @param size: Kích thước buffer
 * @return true nếu thành công
 */
bool Queue_Init(Queuex_t* queue, uint8_t* buffer, uint32_t size) {
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b084      	sub	sp, #16
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	60f8      	str	r0, [r7, #12]
 800c800:	60b9      	str	r1, [r7, #8]
 800c802:	607a      	str	r2, [r7, #4]
    if (queue == NULL || buffer == NULL || size == 0) {
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d005      	beq.n	800c816 <Queue_Init+0x1e>
 800c80a:	68bb      	ldr	r3, [r7, #8]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d002      	beq.n	800c816 <Queue_Init+0x1e>
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d101      	bne.n	800c81a <Queue_Init+0x22>
        return false;
 800c816:	2300      	movs	r3, #0
 800c818:	e011      	b.n	800c83e <Queue_Init+0x46>
    }

    queue->buffer = buffer;
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	68ba      	ldr	r2, [r7, #8]
 800c81e:	601a      	str	r2, [r3, #0]
    queue->size = size;
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	687a      	ldr	r2, [r7, #4]
 800c824:	605a      	str	r2, [r3, #4]
    queue->head = 0;
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	2200      	movs	r2, #0
 800c82a:	609a      	str	r2, [r3, #8]
    queue->tail = 0;
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	2200      	movs	r2, #0
 800c830:	60da      	str	r2, [r3, #12]

    // Xóa buffer
    memset(buffer, 0, size);
 800c832:	687a      	ldr	r2, [r7, #4]
 800c834:	2100      	movs	r1, #0
 800c836:	68b8      	ldr	r0, [r7, #8]
 800c838:	f001 ffb7 	bl	800e7aa <memset>

    return true;
 800c83c:	2301      	movs	r3, #1
}
 800c83e:	4618      	mov	r0, r3
 800c840:	3710      	adds	r7, #16
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}

0800c846 <Queue_Push_Buffer>:
 * @param data: Con trỏ tới dữ liệu
 * @param len: Số byte cần đẩy
 * @return Số byte thực tế đã đẩy vào
 */
uint32_t Queue_Push_Buffer(Queuex_t* queue, const uint8_t* data, uint32_t len)
{
 800c846:	b580      	push	{r7, lr}
 800c848:	b088      	sub	sp, #32
 800c84a:	af00      	add	r7, sp, #0
 800c84c:	60f8      	str	r0, [r7, #12]
 800c84e:	60b9      	str	r1, [r7, #8]
 800c850:	607a      	str	r2, [r7, #4]
    if (queue == NULL || data == NULL || len == 0)
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d005      	beq.n	800c864 <Queue_Push_Buffer+0x1e>
 800c858:	68bb      	ldr	r3, [r7, #8]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d002      	beq.n	800c864 <Queue_Push_Buffer+0x1e>
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d101      	bne.n	800c868 <Queue_Push_Buffer+0x22>
    {
        return 0;
 800c864:	2300      	movs	r3, #0
 800c866:	e045      	b.n	800c8f4 <Queue_Push_Buffer+0xae>
    }

    uint32_t free_space = Queue_Free_Space(queue);
 800c868:	68f8      	ldr	r0, [r7, #12]
 800c86a:	f000 f896 	bl	800c99a <Queue_Free_Space>
 800c86e:	61f8      	str	r0, [r7, #28]
    uint32_t to_push = (len > free_space) ? free_space : len;
 800c870:	687a      	ldr	r2, [r7, #4]
 800c872:	69fb      	ldr	r3, [r7, #28]
 800c874:	4293      	cmp	r3, r2
 800c876:	bf28      	it	cs
 800c878:	4613      	movcs	r3, r2
 800c87a:	61bb      	str	r3, [r7, #24]
//    for (uint32_t i = 0; i < to_push; i++) {
//        queue->buffer[queue->head] = data[i];
//        queue->head = (queue->head + 1) % queue->size;

    // Vị trí bắt đầu
    uint32_t first_chunk = queue->size - queue->head;
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	685a      	ldr	r2, [r3, #4]
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	689b      	ldr	r3, [r3, #8]
 800c884:	1ad3      	subs	r3, r2, r3
 800c886:	617b      	str	r3, [r7, #20]
    if (first_chunk > to_push)
 800c888:	697a      	ldr	r2, [r7, #20]
 800c88a:	69bb      	ldr	r3, [r7, #24]
 800c88c:	429a      	cmp	r2, r3
 800c88e:	d90c      	bls.n	800c8aa <Queue_Push_Buffer+0x64>
    {
        first_chunk = to_push;
 800c890:	69bb      	ldr	r3, [r7, #24]
 800c892:	617b      	str	r3, [r7, #20]
        memcpy(&queue->buffer[queue->head], data, first_chunk);
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	681a      	ldr	r2, [r3, #0]
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	689b      	ldr	r3, [r3, #8]
 800c89c:	4413      	add	r3, r2
 800c89e:	697a      	ldr	r2, [r7, #20]
 800c8a0:	68b9      	ldr	r1, [r7, #8]
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	f002 f86f 	bl	800e986 <memcpy>
 800c8a8:	e016      	b.n	800c8d8 <Queue_Push_Buffer+0x92>
    }
    else
    {
		memcpy(&queue->buffer[queue->head], data, first_chunk); // Copy phần đầu
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	681a      	ldr	r2, [r3, #0]
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	689b      	ldr	r3, [r3, #8]
 800c8b2:	4413      	add	r3, r2
 800c8b4:	697a      	ldr	r2, [r7, #20]
 800c8b6:	68b9      	ldr	r1, [r7, #8]
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	f002 f864 	bl	800e986 <memcpy>
	    uint32_t second_chunk = to_push - first_chunk;
 800c8be:	69ba      	ldr	r2, [r7, #24]
 800c8c0:	697b      	ldr	r3, [r7, #20]
 800c8c2:	1ad3      	subs	r3, r2, r3
 800c8c4:	613b      	str	r3, [r7, #16]
	    memcpy(queue->buffer, data + first_chunk, second_chunk); // Copy phần còn lại
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	6818      	ldr	r0, [r3, #0]
 800c8ca:	68ba      	ldr	r2, [r7, #8]
 800c8cc:	697b      	ldr	r3, [r7, #20]
 800c8ce:	4413      	add	r3, r2
 800c8d0:	693a      	ldr	r2, [r7, #16]
 800c8d2:	4619      	mov	r1, r3
 800c8d4:	f002 f857 	bl	800e986 <memcpy>
    }

    // Cập nhật head
    queue->head = (queue->head + to_push) % queue->size;
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	689a      	ldr	r2, [r3, #8]
 800c8dc:	69bb      	ldr	r3, [r7, #24]
 800c8de:	4413      	add	r3, r2
 800c8e0:	68fa      	ldr	r2, [r7, #12]
 800c8e2:	6852      	ldr	r2, [r2, #4]
 800c8e4:	fbb3 f1f2 	udiv	r1, r3, r2
 800c8e8:	fb01 f202 	mul.w	r2, r1, r2
 800c8ec:	1a9a      	subs	r2, r3, r2
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	609a      	str	r2, [r3, #8]

    return to_push;
 800c8f2:	69bb      	ldr	r3, [r7, #24]
}
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	3720      	adds	r7, #32
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	bd80      	pop	{r7, pc}

0800c8fc <Queue_Pop>:
 * @brief Lấy một byte từ hàng đợi
 * @param queue: Con trỏ tới hàng đợi
 * @param data: Con trỏ để lưu byte lấy ra
 * @return true nếu thành công
 */
bool Queue_Pop(Queuex_t* queue, uint8_t* data) {
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b082      	sub	sp, #8
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
 800c904:	6039      	str	r1, [r7, #0]
    if (queue == NULL || data == NULL || Queue_Is_Empty(queue)) {
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d008      	beq.n	800c91e <Queue_Pop+0x22>
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d005      	beq.n	800c91e <Queue_Pop+0x22>
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	f000 f856 	bl	800c9c4 <Queue_Is_Empty>
 800c918:	4603      	mov	r3, r0
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d001      	beq.n	800c922 <Queue_Pop+0x26>
        return false;
 800c91e:	2300      	movs	r3, #0
 800c920:	e014      	b.n	800c94c <Queue_Pop+0x50>
    }

    *data = queue->buffer[queue->tail];
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681a      	ldr	r2, [r3, #0]
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	68db      	ldr	r3, [r3, #12]
 800c92a:	4413      	add	r3, r2
 800c92c:	781a      	ldrb	r2, [r3, #0]
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	701a      	strb	r2, [r3, #0]
    queue->tail = (queue->tail + 1) % queue->size;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	68db      	ldr	r3, [r3, #12]
 800c936:	3301      	adds	r3, #1
 800c938:	687a      	ldr	r2, [r7, #4]
 800c93a:	6852      	ldr	r2, [r2, #4]
 800c93c:	fbb3 f1f2 	udiv	r1, r3, r2
 800c940:	fb01 f202 	mul.w	r2, r1, r2
 800c944:	1a9a      	subs	r2, r3, r2
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	60da      	str	r2, [r3, #12]

    return true;
 800c94a:	2301      	movs	r3, #1
}
 800c94c:	4618      	mov	r0, r3
 800c94e:	3708      	adds	r7, #8
 800c950:	46bd      	mov	sp, r7
 800c952:	bd80      	pop	{r7, pc}

0800c954 <Queue_Available>:
/**
 * @brief Lấy số byte có sẵn trong hàng đợi
 * @param queue: Con trỏ tới hàng đợi
 * @return Số byte có sẵn
 */
uint32_t Queue_Available(Queuex_t* queue) {
 800c954:	b480      	push	{r7}
 800c956:	b083      	sub	sp, #12
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
    if (queue == NULL) {
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d101      	bne.n	800c966 <Queue_Available+0x12>
        return 0;
 800c962:	2300      	movs	r3, #0
 800c964:	e013      	b.n	800c98e <Queue_Available+0x3a>
    }

    if (queue->head >= queue->tail) {
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	689a      	ldr	r2, [r3, #8]
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	68db      	ldr	r3, [r3, #12]
 800c96e:	429a      	cmp	r2, r3
 800c970:	d305      	bcc.n	800c97e <Queue_Available+0x2a>
        return queue->head - queue->tail;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	689a      	ldr	r2, [r3, #8]
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	68db      	ldr	r3, [r3, #12]
 800c97a:	1ad3      	subs	r3, r2, r3
 800c97c:	e007      	b.n	800c98e <Queue_Available+0x3a>
    } else {
        return queue->size - queue->tail + queue->head;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	685a      	ldr	r2, [r3, #4]
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	68db      	ldr	r3, [r3, #12]
 800c986:	1ad2      	subs	r2, r2, r3
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	689b      	ldr	r3, [r3, #8]
 800c98c:	4413      	add	r3, r2
    }
}
 800c98e:	4618      	mov	r0, r3
 800c990:	370c      	adds	r7, #12
 800c992:	46bd      	mov	sp, r7
 800c994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c998:	4770      	bx	lr

0800c99a <Queue_Free_Space>:
/**
 * @brief Lấy số byte trống trong hàng đợi
 * @param queue: Con trỏ tới hàng đợi
 * @return Số byte trống
 */
uint32_t Queue_Free_Space(Queuex_t* queue) {
 800c99a:	b590      	push	{r4, r7, lr}
 800c99c:	b083      	sub	sp, #12
 800c99e:	af00      	add	r7, sp, #0
 800c9a0:	6078      	str	r0, [r7, #4]
    if (queue == NULL) {
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d101      	bne.n	800c9ac <Queue_Free_Space+0x12>
        return 0;
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	e007      	b.n	800c9bc <Queue_Free_Space+0x22>
    }

    return queue->size - 1 - Queue_Available(queue);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	685c      	ldr	r4, [r3, #4]
 800c9b0:	6878      	ldr	r0, [r7, #4]
 800c9b2:	f7ff ffcf 	bl	800c954 <Queue_Available>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	1ae3      	subs	r3, r4, r3
 800c9ba:	3b01      	subs	r3, #1
}
 800c9bc:	4618      	mov	r0, r3
 800c9be:	370c      	adds	r7, #12
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	bd90      	pop	{r4, r7, pc}

0800c9c4 <Queue_Is_Empty>:
/**
 * @brief Kiểm tra hàng đợi có rỗng không
 * @param queue: Con trỏ tới hàng đợi
 * @return true nếu rỗng
 */
bool Queue_Is_Empty(Queuex_t* queue) {
 800c9c4:	b480      	push	{r7}
 800c9c6:	b083      	sub	sp, #12
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
    if (queue == NULL) {
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d101      	bne.n	800c9d6 <Queue_Is_Empty+0x12>
        return true;
 800c9d2:	2301      	movs	r3, #1
 800c9d4:	e008      	b.n	800c9e8 <Queue_Is_Empty+0x24>
    }

    return queue->head == queue->tail;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	689a      	ldr	r2, [r3, #8]
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	68db      	ldr	r3, [r3, #12]
 800c9de:	429a      	cmp	r2, r3
 800c9e0:	bf0c      	ite	eq
 800c9e2:	2301      	moveq	r3, #1
 800c9e4:	2300      	movne	r3, #0
 800c9e6:	b2db      	uxtb	r3, r3
}
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	370c      	adds	r7, #12
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f2:	4770      	bx	lr

0800c9f4 <Queue_Set_Header_Position>:
    }
    return queue->head;
}

uint32_t Queue_Set_Header_Position(Queuex_t* queue, uint32_t index)
{
 800c9f4:	b480      	push	{r7}
 800c9f6:	b083      	sub	sp, #12
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
 800c9fc:	6039      	str	r1, [r7, #0]
    if (queue == NULL || index >= queue->size)
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d004      	beq.n	800ca0e <Queue_Set_Header_Position+0x1a>
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	685b      	ldr	r3, [r3, #4]
 800ca08:	683a      	ldr	r2, [r7, #0]
 800ca0a:	429a      	cmp	r2, r3
 800ca0c:	d301      	bcc.n	800ca12 <Queue_Set_Header_Position+0x1e>
    {
        return 0;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	e004      	b.n	800ca1c <Queue_Set_Header_Position+0x28>
    }
    queue->head = index;
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	683a      	ldr	r2, [r7, #0]
 800ca16:	609a      	str	r2, [r3, #8]
    return queue->head;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	689b      	ldr	r3, [r3, #8]
}
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	370c      	adds	r7, #12
 800ca20:	46bd      	mov	sp, r7
 800ca22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca26:	4770      	bx	lr

0800ca28 <Queue_Get_Tail_Address>:

uint8_t* Queue_Get_Tail_Address(Queuex_t* queue)
{
 800ca28:	b480      	push	{r7}
 800ca2a:	b083      	sub	sp, #12
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
    if (queue == NULL)
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d101      	bne.n	800ca3a <Queue_Get_Tail_Address+0x12>
    {
        return NULL;
 800ca36:	2300      	movs	r3, #0
 800ca38:	e004      	b.n	800ca44 <Queue_Get_Tail_Address+0x1c>
    }
    return &queue->buffer[queue->tail];
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681a      	ldr	r2, [r3, #0]
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	68db      	ldr	r3, [r3, #12]
 800ca42:	4413      	add	r3, r2
}
 800ca44:	4618      	mov	r0, r3
 800ca46:	370c      	adds	r7, #12
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4e:	4770      	bx	lr

0800ca50 <Queue_Get_Tail_Index>:

uint32_t Queue_Get_Tail_Index(Queuex_t* queue)
{
 800ca50:	b480      	push	{r7}
 800ca52:	b083      	sub	sp, #12
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
    if (queue == NULL)
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d101      	bne.n	800ca62 <Queue_Get_Tail_Index+0x12>
    {
        return 0;
 800ca5e:	2300      	movs	r3, #0
 800ca60:	e001      	b.n	800ca66 <Queue_Get_Tail_Index+0x16>
    }
    return queue->tail;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	68db      	ldr	r3, [r3, #12]
}
 800ca66:	4618      	mov	r0, r3
 800ca68:	370c      	adds	r7, #12
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca70:	4770      	bx	lr

0800ca72 <Queue_Set_Tail_Position>:

uint32_t Queue_Set_Tail_Position(Queuex_t* queue, uint32_t index)
{
 800ca72:	b480      	push	{r7}
 800ca74:	b083      	sub	sp, #12
 800ca76:	af00      	add	r7, sp, #0
 800ca78:	6078      	str	r0, [r7, #4]
 800ca7a:	6039      	str	r1, [r7, #0]
    if (queue == NULL || index >= queue->size)
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d004      	beq.n	800ca8c <Queue_Set_Tail_Position+0x1a>
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	685b      	ldr	r3, [r3, #4]
 800ca86:	683a      	ldr	r2, [r7, #0]
 800ca88:	429a      	cmp	r2, r3
 800ca8a:	d301      	bcc.n	800ca90 <Queue_Set_Tail_Position+0x1e>
    {
        return 0;
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	e004      	b.n	800ca9a <Queue_Set_Tail_Position+0x28>
    }
    queue->tail = index;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	683a      	ldr	r2, [r7, #0]
 800ca94:	60da      	str	r2, [r3, #12]
    return queue->tail;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	68db      	ldr	r3, [r3, #12]
}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	370c      	adds	r7, #12
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa4:	4770      	bx	lr
	...

0800caa8 <File_Init>:
FileState_t current_file_state = FILE_STATE_GET_SIZE;
volatile FileInfoStruct_t current_file;


void File_Init(void)
{
 800caa8:	b480      	push	{r7}
 800caaa:	af00      	add	r7, sp, #0
	current_file.size = 0;
 800caac:	4b0f      	ldr	r3, [pc, #60]	@ (800caec <File_Init+0x44>)
 800caae:	2200      	movs	r2, #0
 800cab0:	601a      	str	r2, [r3, #0]
	current_file.received_crc = 0;
 800cab2:	4b0e      	ldr	r3, [pc, #56]	@ (800caec <File_Init+0x44>)
 800cab4:	2200      	movs	r2, #0
 800cab6:	605a      	str	r2, [r3, #4]
	current_file.calculated_crc = 0;
 800cab8:	4b0c      	ldr	r3, [pc, #48]	@ (800caec <File_Init+0x44>)
 800caba:	2200      	movs	r2, #0
 800cabc:	609a      	str	r2, [r3, #8]
	current_file.size_received = 0;
 800cabe:	4b0b      	ldr	r3, [pc, #44]	@ (800caec <File_Init+0x44>)
 800cac0:	2200      	movs	r2, #0
 800cac2:	60da      	str	r2, [r3, #12]
	current_file.start_file_index = 0;
 800cac4:	4b09      	ldr	r3, [pc, #36]	@ (800caec <File_Init+0x44>)
 800cac6:	2200      	movs	r2, #0
 800cac8:	611a      	str	r2, [r3, #16]
	current_file.end_file_index = 0;
 800caca:	4b08      	ldr	r3, [pc, #32]	@ (800caec <File_Init+0x44>)
 800cacc:	2200      	movs	r2, #0
 800cace:	615a      	str	r2, [r3, #20]
	current_file.is_valid = 0;
 800cad0:	4b06      	ldr	r3, [pc, #24]	@ (800caec <File_Init+0x44>)
 800cad2:	2200      	movs	r2, #0
 800cad4:	761a      	strb	r2, [r3, #24]
	current_file.data = NULL;
 800cad6:	4b05      	ldr	r3, [pc, #20]	@ (800caec <File_Init+0x44>)
 800cad8:	2200      	movs	r2, #0
 800cada:	61da      	str	r2, [r3, #28]
	current_file_state = FILE_STATE_GET_SIZE;
 800cadc:	4b04      	ldr	r3, [pc, #16]	@ (800caf0 <File_Init+0x48>)
 800cade:	2200      	movs	r2, #0
 800cae0:	701a      	strb	r2, [r3, #0]
}
 800cae2:	bf00      	nop
 800cae4:	46bd      	mov	sp, r7
 800cae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caea:	4770      	bx	lr
 800caec:	2000e210 	.word	0x2000e210
 800caf0:	2000e20d 	.word	0x2000e20d

0800caf4 <Send_Response>:




//// Utility function to send response safely
static void Send_Response(const char* response) {
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b082      	sub	sp, #8
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
   CDC_Transmit_HS((uint8_t*)response, strlen(response));
 800cafc:	6878      	ldr	r0, [r7, #4]
 800cafe:	f7f3 fbe7 	bl	80002d0 <strlen>
 800cb02:	4603      	mov	r3, r0
 800cb04:	b29b      	uxth	r3, r3
 800cb06:	4619      	mov	r1, r3
 800cb08:	6878      	ldr	r0, [r7, #4]
 800cb0a:	f000 fb0d 	bl	800d128 <CDC_Transmit_HS>
}
 800cb0e:	bf00      	nop
 800cb10:	3708      	adds	r7, #8
 800cb12:	46bd      	mov	sp, r7
 800cb14:	bd80      	pop	{r7, pc}
	...

0800cb18 <Task_Command>:
/**
 * @brief Main USB data processing task - ONLY this task processes USB queue
 * This task has exclusive access to USB_Queue_Pop to prevent race conditions
 */
void Task_Command(void *pvParameters)
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b084      	sub	sp, #16
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
    static uint8_t cmd_buf[32];
    static uint8_t cmd_index = 0;

    for (;;)
    {
    	if(uxTaskPriorityGet(hTaskCommand) == 2)
 800cb20:	4b31      	ldr	r3, [pc, #196]	@ (800cbe8 <Task_Command+0xd0>)
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	4618      	mov	r0, r3
 800cb26:	f7fd ff3d 	bl	800a9a4 <uxTaskPriorityGet>
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	2b02      	cmp	r3, #2
 800cb2e:	d105      	bne.n	800cb3c <Task_Command+0x24>
    	{
    		vTaskPrioritySet(hTaskCommand, 4);
 800cb30:	4b2d      	ldr	r3, [pc, #180]	@ (800cbe8 <Task_Command+0xd0>)
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	2104      	movs	r1, #4
 800cb36:	4618      	mov	r0, r3
 800cb38:	f7fd ff4e 	bl	800a9d8 <vTaskPrioritySet>
    	}

		if (current_device_state == STATE_WAIT_COMMAND)
 800cb3c:	4b2b      	ldr	r3, [pc, #172]	@ (800cbec <Task_Command+0xd4>)
 800cb3e:	781b      	ldrb	r3, [r3, #0]
 800cb40:	b2db      	uxtb	r3, r3
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d14b      	bne.n	800cbde <Task_Command+0xc6>
		{
			if (Queue_Pop(&usb_rx_cmd_queue, &byte))
 800cb46:	f107 030f 	add.w	r3, r7, #15
 800cb4a:	4619      	mov	r1, r3
 800cb4c:	4828      	ldr	r0, [pc, #160]	@ (800cbf0 <Task_Command+0xd8>)
 800cb4e:	f7ff fed5 	bl	800c8fc <Queue_Pop>
 800cb52:	4603      	mov	r3, r0
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d042      	beq.n	800cbde <Task_Command+0xc6>
			{
				if (byte == '\n')
 800cb58:	7bfb      	ldrb	r3, [r7, #15]
 800cb5a:	2b0a      	cmp	r3, #10
 800cb5c:	d131      	bne.n	800cbc2 <Task_Command+0xaa>
				{
					cmd_buf[cmd_index] = '\0';
 800cb5e:	4b25      	ldr	r3, [pc, #148]	@ (800cbf4 <Task_Command+0xdc>)
 800cb60:	781b      	ldrb	r3, [r3, #0]
 800cb62:	461a      	mov	r2, r3
 800cb64:	4b24      	ldr	r3, [pc, #144]	@ (800cbf8 <Task_Command+0xe0>)
 800cb66:	2100      	movs	r1, #0
 800cb68:	5499      	strb	r1, [r3, r2]
					cmd_index = 0;
 800cb6a:	4b22      	ldr	r3, [pc, #136]	@ (800cbf4 <Task_Command+0xdc>)
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	701a      	strb	r2, [r3, #0]

					if (strcmp((char*)cmd_buf, "SEND") == 0)
 800cb70:	4922      	ldr	r1, [pc, #136]	@ (800cbfc <Task_Command+0xe4>)
 800cb72:	4821      	ldr	r0, [pc, #132]	@ (800cbf8 <Task_Command+0xe0>)
 800cb74:	f7f3 fb4c 	bl	8000210 <strcmp>
 800cb78:	4603      	mov	r3, r0
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d10c      	bne.n	800cb98 <Task_Command+0x80>
					{
						current_device_state = STATE_RECEIVE_IMAGE;
 800cb7e:	4b1b      	ldr	r3, [pc, #108]	@ (800cbec <Task_Command+0xd4>)
 800cb80:	2201      	movs	r2, #1
 800cb82:	701a      	strb	r2, [r3, #0]
						Send_Response("READY\n");
 800cb84:	481e      	ldr	r0, [pc, #120]	@ (800cc00 <Task_Command+0xe8>)
 800cb86:	f7ff ffb5 	bl	800caf4 <Send_Response>
						vTaskPrioritySet(hTaskReceive, 5);
 800cb8a:	4b1e      	ldr	r3, [pc, #120]	@ (800cc04 <Task_Command+0xec>)
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	2105      	movs	r1, #5
 800cb90:	4618      	mov	r0, r3
 800cb92:	f7fd ff21 	bl	800a9d8 <vTaskPrioritySet>
 800cb96:	e022      	b.n	800cbde <Task_Command+0xc6>
					}
					else if (strcmp((char*)cmd_buf, "GET") == 0)   // Xử lý gửi file ở đây
 800cb98:	491b      	ldr	r1, [pc, #108]	@ (800cc08 <Task_Command+0xf0>)
 800cb9a:	4817      	ldr	r0, [pc, #92]	@ (800cbf8 <Task_Command+0xe0>)
 800cb9c:	f7f3 fb38 	bl	8000210 <strcmp>
 800cba0:	4603      	mov	r3, r0
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d109      	bne.n	800cbba <Task_Command+0xa2>
					{
						current_device_state = STATE_SEND_IMAGE;
 800cba6:	4b11      	ldr	r3, [pc, #68]	@ (800cbec <Task_Command+0xd4>)
 800cba8:	2202      	movs	r2, #2
 800cbaa:	701a      	strb	r2, [r3, #0]
						vTaskPrioritySet(hTaskSend, 5);
 800cbac:	4b17      	ldr	r3, [pc, #92]	@ (800cc0c <Task_Command+0xf4>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	2105      	movs	r1, #5
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	f7fd ff10 	bl	800a9d8 <vTaskPrioritySet>
 800cbb8:	e011      	b.n	800cbde <Task_Command+0xc6>
					}
					else
					{
						Send_Response("ERR:UNKNOWN_CMD\n");
 800cbba:	4815      	ldr	r0, [pc, #84]	@ (800cc10 <Task_Command+0xf8>)
 800cbbc:	f7ff ff9a 	bl	800caf4 <Send_Response>
 800cbc0:	e00d      	b.n	800cbde <Task_Command+0xc6>
					}
				}
				else
				{
					if (cmd_index < sizeof(cmd_buf) - 1)
 800cbc2:	4b0c      	ldr	r3, [pc, #48]	@ (800cbf4 <Task_Command+0xdc>)
 800cbc4:	781b      	ldrb	r3, [r3, #0]
 800cbc6:	2b1e      	cmp	r3, #30
 800cbc8:	d809      	bhi.n	800cbde <Task_Command+0xc6>
					{
						cmd_buf[cmd_index++] = byte;
 800cbca:	4b0a      	ldr	r3, [pc, #40]	@ (800cbf4 <Task_Command+0xdc>)
 800cbcc:	781b      	ldrb	r3, [r3, #0]
 800cbce:	1c5a      	adds	r2, r3, #1
 800cbd0:	b2d1      	uxtb	r1, r2
 800cbd2:	4a08      	ldr	r2, [pc, #32]	@ (800cbf4 <Task_Command+0xdc>)
 800cbd4:	7011      	strb	r1, [r2, #0]
 800cbd6:	461a      	mov	r2, r3
 800cbd8:	7bf9      	ldrb	r1, [r7, #15]
 800cbda:	4b07      	ldr	r3, [pc, #28]	@ (800cbf8 <Task_Command+0xe0>)
 800cbdc:	5499      	strb	r1, [r3, r2]
					}
				}
			}
		}

		vTaskDelay(pdMS_TO_TICKS(1));
 800cbde:	2001      	movs	r0, #1
 800cbe0:	f7fd fea8 	bl	800a934 <vTaskDelay>
    	if(uxTaskPriorityGet(hTaskCommand) == 2)
 800cbe4:	e79c      	b.n	800cb20 <Task_Command+0x8>
 800cbe6:	bf00      	nop
 800cbe8:	2000e200 	.word	0x2000e200
 800cbec:	2000e20c 	.word	0x2000e20c
 800cbf0:	200003e4 	.word	0x200003e4
 800cbf4:	2000e23d 	.word	0x2000e23d
 800cbf8:	2000e240 	.word	0x2000e240
 800cbfc:	080105b0 	.word	0x080105b0
 800cc00:	080105b8 	.word	0x080105b8
 800cc04:	2000e204 	.word	0x2000e204
 800cc08:	080105c0 	.word	0x080105c0
 800cc0c:	2000e208 	.word	0x2000e208
 800cc10:	080105c4 	.word	0x080105c4

0800cc14 <Task_Receive>:
uint8_t file_size_index = 0;
uint8_t file_crc_bytes[4] = {0};
uint8_t file_crc_index = 0;

void Task_Receive(void *pvParameters)
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b084      	sub	sp, #16
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
    uint8_t byte;
    for (;;)
    {
        if(current_device_state == STATE_RECEIVE_IMAGE)
 800cc1c:	4b65      	ldr	r3, [pc, #404]	@ (800cdb4 <Task_Receive+0x1a0>)
 800cc1e:	781b      	ldrb	r3, [r3, #0]
 800cc20:	b2db      	uxtb	r3, r3
 800cc22:	2b01      	cmp	r3, #1
 800cc24:	d1fa      	bne.n	800cc1c <Task_Receive+0x8>
        {
        	if(Queue_Pop(&usb_rx_file_queue, &byte))
 800cc26:	f107 030f 	add.w	r3, r7, #15
 800cc2a:	4619      	mov	r1, r3
 800cc2c:	4862      	ldr	r0, [pc, #392]	@ (800cdb8 <Task_Receive+0x1a4>)
 800cc2e:	f7ff fe65 	bl	800c8fc <Queue_Pop>
 800cc32:	4603      	mov	r3, r0
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d0f1      	beq.n	800cc1c <Task_Receive+0x8>
        	{
        		switch(current_file_state)
 800cc38:	4b60      	ldr	r3, [pc, #384]	@ (800cdbc <Task_Receive+0x1a8>)
 800cc3a:	781b      	ldrb	r3, [r3, #0]
 800cc3c:	2b02      	cmp	r3, #2
 800cc3e:	f000 80b2 	beq.w	800cda6 <Task_Receive+0x192>
 800cc42:	2b02      	cmp	r3, #2
 800cc44:	dcea      	bgt.n	800cc1c <Task_Receive+0x8>
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d002      	beq.n	800cc50 <Task_Receive+0x3c>
 800cc4a:	2b01      	cmp	r3, #1
 800cc4c:	d05f      	beq.n	800cd0e <Task_Receive+0xfa>
 800cc4e:	e0af      	b.n	800cdb0 <Task_Receive+0x19c>
        		{
        			case FILE_STATE_GET_SIZE:
        				Timer_Start_Counter();
 800cc50:	f7f4 f9a6 	bl	8000fa0 <Timer_Start_Counter>
        	            file_size_bytes[file_size_index++] = byte;
 800cc54:	4b5a      	ldr	r3, [pc, #360]	@ (800cdc0 <Task_Receive+0x1ac>)
 800cc56:	781b      	ldrb	r3, [r3, #0]
 800cc58:	1c5a      	adds	r2, r3, #1
 800cc5a:	b2d1      	uxtb	r1, r2
 800cc5c:	4a58      	ldr	r2, [pc, #352]	@ (800cdc0 <Task_Receive+0x1ac>)
 800cc5e:	7011      	strb	r1, [r2, #0]
 800cc60:	461a      	mov	r2, r3
 800cc62:	7bf9      	ldrb	r1, [r7, #15]
 800cc64:	4b57      	ldr	r3, [pc, #348]	@ (800cdc4 <Task_Receive+0x1b0>)
 800cc66:	5499      	strb	r1, [r3, r2]
        	            if (file_size_index >= 4)
 800cc68:	4b55      	ldr	r3, [pc, #340]	@ (800cdc0 <Task_Receive+0x1ac>)
 800cc6a:	781b      	ldrb	r3, [r3, #0]
 800cc6c:	2b03      	cmp	r3, #3
 800cc6e:	f240 809c 	bls.w	800cdaa <Task_Receive+0x196>
        	            {
        	                current_file.size = file_size_bytes[0] |
 800cc72:	4b54      	ldr	r3, [pc, #336]	@ (800cdc4 <Task_Receive+0x1b0>)
 800cc74:	781b      	ldrb	r3, [r3, #0]
 800cc76:	461a      	mov	r2, r3
        	                                   (file_size_bytes[1] << 8) |
 800cc78:	4b52      	ldr	r3, [pc, #328]	@ (800cdc4 <Task_Receive+0x1b0>)
 800cc7a:	785b      	ldrb	r3, [r3, #1]
 800cc7c:	021b      	lsls	r3, r3, #8
        	                current_file.size = file_size_bytes[0] |
 800cc7e:	431a      	orrs	r2, r3
        	                                   (file_size_bytes[2] << 16) |
 800cc80:	4b50      	ldr	r3, [pc, #320]	@ (800cdc4 <Task_Receive+0x1b0>)
 800cc82:	789b      	ldrb	r3, [r3, #2]
 800cc84:	041b      	lsls	r3, r3, #16
        	                                   (file_size_bytes[1] << 8) |
 800cc86:	431a      	orrs	r2, r3
        	                                   (file_size_bytes[3] << 24);
 800cc88:	4b4e      	ldr	r3, [pc, #312]	@ (800cdc4 <Task_Receive+0x1b0>)
 800cc8a:	78db      	ldrb	r3, [r3, #3]
 800cc8c:	061b      	lsls	r3, r3, #24
        	                                   (file_size_bytes[2] << 16) |
 800cc8e:	4313      	orrs	r3, r2
 800cc90:	461a      	mov	r2, r3
        	                current_file.size = file_size_bytes[0] |
 800cc92:	4b4d      	ldr	r3, [pc, #308]	@ (800cdc8 <Task_Receive+0x1b4>)
 800cc94:	601a      	str	r2, [r3, #0]
        	                if (current_file.size > SIZE_FILE_MAX)
 800cc96:	4b4c      	ldr	r3, [pc, #304]	@ (800cdc8 <Task_Receive+0x1b4>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	4a4c      	ldr	r2, [pc, #304]	@ (800cdcc <Task_Receive+0x1b8>)
 800cc9c:	4293      	cmp	r3, r2
 800cc9e:	d90c      	bls.n	800ccba <Task_Receive+0xa6>
        	                {
        	                	current_file.size = 0;
 800cca0:	4b49      	ldr	r3, [pc, #292]	@ (800cdc8 <Task_Receive+0x1b4>)
 800cca2:	2200      	movs	r2, #0
 800cca4:	601a      	str	r2, [r3, #0]
        	                	current_device_state = STATE_WAIT_COMMAND;
 800cca6:	4b43      	ldr	r3, [pc, #268]	@ (800cdb4 <Task_Receive+0x1a0>)
 800cca8:	2200      	movs	r2, #0
 800ccaa:	701a      	strb	r2, [r3, #0]
			                	vTaskPrioritySet(hTaskReceive, 3);
 800ccac:	4b48      	ldr	r3, [pc, #288]	@ (800cdd0 <Task_Receive+0x1bc>)
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	2103      	movs	r1, #3
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	f7fd fe90 	bl	800a9d8 <vTaskPrioritySet>
								current_file.end_file_index = current_file.start_file_index + current_file.size;
		        				current_file_state = FILE_STATE_GET_CRC;
							}
        	            }

        				break;
 800ccb8:	e077      	b.n	800cdaa <Task_Receive+0x196>
								vTaskDelay(100); // đợi nhận đủ file tồi mới tính CRC
 800ccba:	2064      	movs	r0, #100	@ 0x64
 800ccbc:	f7fd fe3a 	bl	800a934 <vTaskDelay>
								current_file.start_file_index = Queue_Get_Tail_Index(&usb_rx_file_queue);
 800ccc0:	483d      	ldr	r0, [pc, #244]	@ (800cdb8 <Task_Receive+0x1a4>)
 800ccc2:	f7ff fec5 	bl	800ca50 <Queue_Get_Tail_Index>
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	4a3f      	ldr	r2, [pc, #252]	@ (800cdc8 <Task_Receive+0x1b4>)
 800ccca:	6113      	str	r3, [r2, #16]
								current_file.calculated_crc = CRC_HW_Calculation(Queue_Get_Tail_Address(&usb_rx_file_queue), current_file.size);
 800cccc:	483a      	ldr	r0, [pc, #232]	@ (800cdb8 <Task_Receive+0x1a4>)
 800ccce:	f7ff feab 	bl	800ca28 <Queue_Get_Tail_Address>
 800ccd2:	4602      	mov	r2, r0
 800ccd4:	4b3c      	ldr	r3, [pc, #240]	@ (800cdc8 <Task_Receive+0x1b4>)
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	4619      	mov	r1, r3
 800ccda:	4610      	mov	r0, r2
 800ccdc:	f7f4 f92a 	bl	8000f34 <CRC_HW_Calculation>
 800cce0:	4603      	mov	r3, r0
 800cce2:	4a39      	ldr	r2, [pc, #228]	@ (800cdc8 <Task_Receive+0x1b4>)
 800cce4:	6093      	str	r3, [r2, #8]
								Queue_Set_Tail_Position(&usb_rx_file_queue, current_file.start_file_index + current_file.size);   // Bỏ qua dữ liệu đã tính CRC
 800cce6:	4b38      	ldr	r3, [pc, #224]	@ (800cdc8 <Task_Receive+0x1b4>)
 800cce8:	691a      	ldr	r2, [r3, #16]
 800ccea:	4b37      	ldr	r3, [pc, #220]	@ (800cdc8 <Task_Receive+0x1b4>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	4413      	add	r3, r2
 800ccf0:	4619      	mov	r1, r3
 800ccf2:	4831      	ldr	r0, [pc, #196]	@ (800cdb8 <Task_Receive+0x1a4>)
 800ccf4:	f7ff febd 	bl	800ca72 <Queue_Set_Tail_Position>
								current_file.end_file_index = current_file.start_file_index + current_file.size;
 800ccf8:	4b33      	ldr	r3, [pc, #204]	@ (800cdc8 <Task_Receive+0x1b4>)
 800ccfa:	691a      	ldr	r2, [r3, #16]
 800ccfc:	4b32      	ldr	r3, [pc, #200]	@ (800cdc8 <Task_Receive+0x1b4>)
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	4413      	add	r3, r2
 800cd02:	4a31      	ldr	r2, [pc, #196]	@ (800cdc8 <Task_Receive+0x1b4>)
 800cd04:	6153      	str	r3, [r2, #20]
		        				current_file_state = FILE_STATE_GET_CRC;
 800cd06:	4b2d      	ldr	r3, [pc, #180]	@ (800cdbc <Task_Receive+0x1a8>)
 800cd08:	2201      	movs	r2, #1
 800cd0a:	701a      	strb	r2, [r3, #0]
        				break;
 800cd0c:	e04d      	b.n	800cdaa <Task_Receive+0x196>

        			case FILE_STATE_GET_CRC:
			            file_crc_bytes[file_crc_index++] = byte;
 800cd0e:	4b31      	ldr	r3, [pc, #196]	@ (800cdd4 <Task_Receive+0x1c0>)
 800cd10:	781b      	ldrb	r3, [r3, #0]
 800cd12:	1c5a      	adds	r2, r3, #1
 800cd14:	b2d1      	uxtb	r1, r2
 800cd16:	4a2f      	ldr	r2, [pc, #188]	@ (800cdd4 <Task_Receive+0x1c0>)
 800cd18:	7011      	strb	r1, [r2, #0]
 800cd1a:	461a      	mov	r2, r3
 800cd1c:	7bf9      	ldrb	r1, [r7, #15]
 800cd1e:	4b2e      	ldr	r3, [pc, #184]	@ (800cdd8 <Task_Receive+0x1c4>)
 800cd20:	5499      	strb	r1, [r3, r2]
			            if (file_crc_index >= 4)
 800cd22:	4b2c      	ldr	r3, [pc, #176]	@ (800cdd4 <Task_Receive+0x1c0>)
 800cd24:	781b      	ldrb	r3, [r3, #0]
 800cd26:	2b03      	cmp	r3, #3
 800cd28:	d941      	bls.n	800cdae <Task_Receive+0x19a>
			            {
			                current_file.received_crc = file_crc_bytes[0] |
 800cd2a:	4b2b      	ldr	r3, [pc, #172]	@ (800cdd8 <Task_Receive+0x1c4>)
 800cd2c:	781b      	ldrb	r3, [r3, #0]
 800cd2e:	461a      	mov	r2, r3
			                                             (file_crc_bytes[1] << 8) |
 800cd30:	4b29      	ldr	r3, [pc, #164]	@ (800cdd8 <Task_Receive+0x1c4>)
 800cd32:	785b      	ldrb	r3, [r3, #1]
 800cd34:	021b      	lsls	r3, r3, #8
			                current_file.received_crc = file_crc_bytes[0] |
 800cd36:	431a      	orrs	r2, r3
			                                             (file_crc_bytes[2] << 16) |
 800cd38:	4b27      	ldr	r3, [pc, #156]	@ (800cdd8 <Task_Receive+0x1c4>)
 800cd3a:	789b      	ldrb	r3, [r3, #2]
 800cd3c:	041b      	lsls	r3, r3, #16
			                                             (file_crc_bytes[1] << 8) |
 800cd3e:	431a      	orrs	r2, r3
			                                             (file_crc_bytes[3] << 24);
 800cd40:	4b25      	ldr	r3, [pc, #148]	@ (800cdd8 <Task_Receive+0x1c4>)
 800cd42:	78db      	ldrb	r3, [r3, #3]
 800cd44:	061b      	lsls	r3, r3, #24
			                                             (file_crc_bytes[2] << 16) |
 800cd46:	4313      	orrs	r3, r2
 800cd48:	461a      	mov	r2, r3
			                current_file.received_crc = file_crc_bytes[0] |
 800cd4a:	4b1f      	ldr	r3, [pc, #124]	@ (800cdc8 <Task_Receive+0x1b4>)
 800cd4c:	605a      	str	r2, [r3, #4]
//			                current_file_state = FILE_STATE_CHECK_CRC;
							if(current_file.calculated_crc == current_file.received_crc)
 800cd4e:	4b1e      	ldr	r3, [pc, #120]	@ (800cdc8 <Task_Receive+0x1b4>)
 800cd50:	689a      	ldr	r2, [r3, #8]
 800cd52:	4b1d      	ldr	r3, [pc, #116]	@ (800cdc8 <Task_Receive+0x1b4>)
 800cd54:	685b      	ldr	r3, [r3, #4]
 800cd56:	429a      	cmp	r2, r3
 800cd58:	d116      	bne.n	800cd88 <Task_Receive+0x174>
							{
								current_file.is_valid = 1;
 800cd5a:	4b1b      	ldr	r3, [pc, #108]	@ (800cdc8 <Task_Receive+0x1b4>)
 800cd5c:	2201      	movs	r2, #1
 800cd5e:	761a      	strb	r2, [r3, #24]
								Send_Response("OK\n");
 800cd60:	481e      	ldr	r0, [pc, #120]	@ (800cddc <Task_Receive+0x1c8>)
 800cd62:	f7ff fec7 	bl	800caf4 <Send_Response>
								Timer_End_Counter();
 800cd66:	f7f4 f929 	bl	8000fbc <Timer_End_Counter>
								Timer_Get_Duration();
 800cd6a:	f7f4 f935 	bl	8000fd8 <Timer_Get_Duration>
								current_file_state = FILE_STATE_GET_SIZE;
 800cd6e:	4b13      	ldr	r3, [pc, #76]	@ (800cdbc <Task_Receive+0x1a8>)
 800cd70:	2200      	movs	r2, #0
 800cd72:	701a      	strb	r2, [r3, #0]
								current_device_state = STATE_WAIT_COMMAND;
 800cd74:	4b0f      	ldr	r3, [pc, #60]	@ (800cdb4 <Task_Receive+0x1a0>)
 800cd76:	2200      	movs	r2, #0
 800cd78:	701a      	strb	r2, [r3, #0]
								vTaskPrioritySet(hTaskReceive, 3);
 800cd7a:	4b15      	ldr	r3, [pc, #84]	@ (800cdd0 <Task_Receive+0x1bc>)
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	2103      	movs	r1, #3
 800cd80:	4618      	mov	r0, r3
 800cd82:	f7fd fe29 	bl	800a9d8 <vTaskPrioritySet>
								Send_Response("ERR:CRC_MISMATCH\n");
								current_device_state = STATE_WAIT_COMMAND;
								vTaskPrioritySet(hTaskReceive, 3);
							}
						}
			            break;
 800cd86:	e012      	b.n	800cdae <Task_Receive+0x19a>
								File_Init();
 800cd88:	f7ff fe8e 	bl	800caa8 <File_Init>
								Send_Response("ERR:CRC_MISMATCH\n");
 800cd8c:	4814      	ldr	r0, [pc, #80]	@ (800cde0 <Task_Receive+0x1cc>)
 800cd8e:	f7ff feb1 	bl	800caf4 <Send_Response>
								current_device_state = STATE_WAIT_COMMAND;
 800cd92:	4b08      	ldr	r3, [pc, #32]	@ (800cdb4 <Task_Receive+0x1a0>)
 800cd94:	2200      	movs	r2, #0
 800cd96:	701a      	strb	r2, [r3, #0]
								vTaskPrioritySet(hTaskReceive, 3);
 800cd98:	4b0d      	ldr	r3, [pc, #52]	@ (800cdd0 <Task_Receive+0x1bc>)
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	2103      	movs	r1, #3
 800cd9e:	4618      	mov	r0, r3
 800cda0:	f7fd fe1a 	bl	800a9d8 <vTaskPrioritySet>
			            break;
 800cda4:	e003      	b.n	800cdae <Task_Receive+0x19a>
//							File_Init();
//							Send_Response("ERR:CRC_MISMATCH\n");
//							current_device_state = STATE_WAIT_COMMAND;
//							vTaskPrioritySet(hTaskReceive, 3);
//						}
        				break;
 800cda6:	bf00      	nop
 800cda8:	e738      	b.n	800cc1c <Task_Receive+0x8>
        				break;
 800cdaa:	bf00      	nop
 800cdac:	e736      	b.n	800cc1c <Task_Receive+0x8>
			            break;
 800cdae:	bf00      	nop
        if(current_device_state == STATE_RECEIVE_IMAGE)
 800cdb0:	e734      	b.n	800cc1c <Task_Receive+0x8>
 800cdb2:	bf00      	nop
 800cdb4:	2000e20c 	.word	0x2000e20c
 800cdb8:	200003f4 	.word	0x200003f4
 800cdbc:	2000e20d 	.word	0x2000e20d
 800cdc0:	2000e234 	.word	0x2000e234
 800cdc4:	2000e230 	.word	0x2000e230
 800cdc8:	2000e210 	.word	0x2000e210
 800cdcc:	007ffff0 	.word	0x007ffff0
 800cdd0:	2000e204 	.word	0x2000e204
 800cdd4:	2000e23c 	.word	0x2000e23c
 800cdd8:	2000e238 	.word	0x2000e238
 800cddc:	080105d8 	.word	0x080105d8
 800cde0:	080105dc 	.word	0x080105dc

0800cde4 <TaskSendImage>:
 * This task monitors transmission state and calls Transmit_Task
 */


void TaskSendImage(void *pvParameters)
{
 800cde4:	b580      	push	{r7, lr}
 800cde6:	b088      	sub	sp, #32
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]

	for (;;)
	{
		if(current_device_state == STATE_SEND_IMAGE)
 800cdec:	4b5c      	ldr	r3, [pc, #368]	@ (800cf60 <TaskSendImage+0x17c>)
 800cdee:	781b      	ldrb	r3, [r3, #0]
 800cdf0:	b2db      	uxtb	r3, r3
 800cdf2:	2b02      	cmp	r3, #2
 800cdf4:	d1fa      	bne.n	800cdec <TaskSendImage+0x8>
		{
			if (current_file.size == 0 && current_file.is_valid == 0)
 800cdf6:	4b5b      	ldr	r3, [pc, #364]	@ (800cf64 <TaskSendImage+0x180>)
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d111      	bne.n	800ce22 <TaskSendImage+0x3e>
 800cdfe:	4b59      	ldr	r3, [pc, #356]	@ (800cf64 <TaskSendImage+0x180>)
 800ce00:	7e1b      	ldrb	r3, [r3, #24]
 800ce02:	b2db      	uxtb	r3, r3
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d10c      	bne.n	800ce22 <TaskSendImage+0x3e>
			{
				Send_Response("ERR:NO_FILE\n");
 800ce08:	4857      	ldr	r0, [pc, #348]	@ (800cf68 <TaskSendImage+0x184>)
 800ce0a:	f7ff fe73 	bl	800caf4 <Send_Response>
				current_device_state = STATE_WAIT_COMMAND;
 800ce0e:	4b54      	ldr	r3, [pc, #336]	@ (800cf60 <TaskSendImage+0x17c>)
 800ce10:	2200      	movs	r2, #0
 800ce12:	701a      	strb	r2, [r3, #0]
				vTaskPrioritySet(hTaskSend, 3);
 800ce14:	4b55      	ldr	r3, [pc, #340]	@ (800cf6c <TaskSendImage+0x188>)
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	2103      	movs	r1, #3
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	f7fd fddc 	bl	800a9d8 <vTaskPrioritySet>
 800ce20:	e09c      	b.n	800cf5c <TaskSendImage+0x178>
			}
			else
			{
				Timer_Start_Counter();
 800ce22:	f7f4 f8bd 	bl	8000fa0 <Timer_Start_Counter>
				// Gửi kích thước file
				uint8_t size_bytes[4];
				size_bytes[0] = (current_file.size >> 0) & 0xFF;
 800ce26:	4b4f      	ldr	r3, [pc, #316]	@ (800cf64 <TaskSendImage+0x180>)
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	b2db      	uxtb	r3, r3
 800ce2c:	743b      	strb	r3, [r7, #16]
				size_bytes[1] = (current_file.size >> 8) & 0xFF;
 800ce2e:	4b4d      	ldr	r3, [pc, #308]	@ (800cf64 <TaskSendImage+0x180>)
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	0a1b      	lsrs	r3, r3, #8
 800ce34:	b2db      	uxtb	r3, r3
 800ce36:	747b      	strb	r3, [r7, #17]
				size_bytes[2] = (current_file.size >> 16) & 0xFF;
 800ce38:	4b4a      	ldr	r3, [pc, #296]	@ (800cf64 <TaskSendImage+0x180>)
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	0c1b      	lsrs	r3, r3, #16
 800ce3e:	b2db      	uxtb	r3, r3
 800ce40:	74bb      	strb	r3, [r7, #18]
				size_bytes[3] = (current_file.size >> 24) & 0xFF;
 800ce42:	4b48      	ldr	r3, [pc, #288]	@ (800cf64 <TaskSendImage+0x180>)
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	0e1b      	lsrs	r3, r3, #24
 800ce48:	b2db      	uxtb	r3, r3
 800ce4a:	74fb      	strb	r3, [r7, #19]
				CDC_Transmit_HS(size_bytes, 4);
 800ce4c:	f107 0310 	add.w	r3, r7, #16
 800ce50:	2104      	movs	r1, #4
 800ce52:	4618      	mov	r0, r3
 800ce54:	f000 f968 	bl	800d128 <CDC_Transmit_HS>

				// Gửi dữ liệu file
				Queue_Set_Tail_Position(&usb_rx_file_queue, current_file.start_file_index);
 800ce58:	4b42      	ldr	r3, [pc, #264]	@ (800cf64 <TaskSendImage+0x180>)
 800ce5a:	691b      	ldr	r3, [r3, #16]
 800ce5c:	4619      	mov	r1, r3
 800ce5e:	4844      	ldr	r0, [pc, #272]	@ (800cf70 <TaskSendImage+0x18c>)
 800ce60:	f7ff fe07 	bl	800ca72 <Queue_Set_Tail_Position>
				Queue_Set_Header_Position(&usb_rx_file_queue, current_file.end_file_index);
 800ce64:	4b3f      	ldr	r3, [pc, #252]	@ (800cf64 <TaskSendImage+0x180>)
 800ce66:	695b      	ldr	r3, [r3, #20]
 800ce68:	4619      	mov	r1, r3
 800ce6a:	4841      	ldr	r0, [pc, #260]	@ (800cf70 <TaskSendImage+0x18c>)
 800ce6c:	f7ff fdc2 	bl	800c9f4 <Queue_Set_Header_Position>
//			        }
//					CDC_Transmit_HS(Queue_Get_Tail_Address(&usb_rx_file_queue), send_size);
//					Queue_Set_Tail_Position(&usb_rx_file_queue, Queue_Get_Tail_Index(&usb_rx_file_queue) + send_size);
//				}

				uint32_t offset = 0;
 800ce70:	2300      	movs	r3, #0
 800ce72:	61fb      	str	r3, [r7, #28]

				while (offset < current_file.size)
 800ce74:	e02f      	b.n	800ced6 <TaskSendImage+0xf2>
				{
				    // Tính số byte cần gửi trong lần này
				    uint32_t send_size = (current_file.size - offset > APP_TX_DATA_SIZE) ?
 800ce76:	4b3b      	ldr	r3, [pc, #236]	@ (800cf64 <TaskSendImage+0x180>)
 800ce78:	681a      	ldr	r2, [r3, #0]
 800ce7a:	69fb      	ldr	r3, [r7, #28]
 800ce7c:	1ad3      	subs	r3, r2, r3
				                         APP_TX_DATA_SIZE :
 800ce7e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ce82:	d804      	bhi.n	800ce8e <TaskSendImage+0xaa>
				                         (current_file.size - offset);
 800ce84:	4b37      	ldr	r3, [pc, #220]	@ (800cf64 <TaskSendImage+0x180>)
 800ce86:	681a      	ldr	r2, [r3, #0]
				                         APP_TX_DATA_SIZE :
 800ce88:	69fb      	ldr	r3, [r7, #28]
 800ce8a:	1ad3      	subs	r3, r2, r3
 800ce8c:	e001      	b.n	800ce92 <TaskSendImage+0xae>
 800ce8e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
				    uint32_t send_size = (current_file.size - offset > APP_TX_DATA_SIZE) ?
 800ce92:	61bb      	str	r3, [r7, #24]

				    // Đợi cho tới khi truyền xong lần trước
				    while (Check_Flag_Complete_Transmit() != 0)
 800ce94:	bf00      	nop
 800ce96:	f000 f97f 	bl	800d198 <Check_Flag_Complete_Transmit>
 800ce9a:	4603      	mov	r3, r0
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d1fa      	bne.n	800ce96 <TaskSendImage+0xb2>
				    {
				        // chờ truyền xong
				    }

				    // Lấy địa chỉ dữ liệu ở tail của queue
				    uint8_t *data_ptr = Queue_Get_Tail_Address(&usb_rx_file_queue);
 800cea0:	4833      	ldr	r0, [pc, #204]	@ (800cf70 <TaskSendImage+0x18c>)
 800cea2:	f7ff fdc1 	bl	800ca28 <Queue_Get_Tail_Address>
 800cea6:	6178      	str	r0, [r7, #20]

				    // Truyền dữ liệu qua USB CDC
				    CDC_Transmit_HS(data_ptr, send_size);
 800cea8:	69bb      	ldr	r3, [r7, #24]
 800ceaa:	b29b      	uxth	r3, r3
 800ceac:	4619      	mov	r1, r3
 800ceae:	6978      	ldr	r0, [r7, #20]
 800ceb0:	f000 f93a 	bl	800d128 <CDC_Transmit_HS>

				    // Cập nhật vị trí tail
				    Queue_Set_Tail_Position(&usb_rx_file_queue, Queue_Get_Tail_Index(&usb_rx_file_queue) + send_size);
 800ceb4:	482e      	ldr	r0, [pc, #184]	@ (800cf70 <TaskSendImage+0x18c>)
 800ceb6:	f7ff fdcb 	bl	800ca50 <Queue_Get_Tail_Index>
 800ceba:	4602      	mov	r2, r0
 800cebc:	69bb      	ldr	r3, [r7, #24]
 800cebe:	4413      	add	r3, r2
 800cec0:	4619      	mov	r1, r3
 800cec2:	482b      	ldr	r0, [pc, #172]	@ (800cf70 <TaskSendImage+0x18c>)
 800cec4:	f7ff fdd5 	bl	800ca72 <Queue_Set_Tail_Position>

				    // Tăng offset lên
				    offset += send_size;
 800cec8:	69fa      	ldr	r2, [r7, #28]
 800ceca:	69bb      	ldr	r3, [r7, #24]
 800cecc:	4413      	add	r3, r2
 800cece:	61fb      	str	r3, [r7, #28]
				    vTaskDelay(1);
 800ced0:	2001      	movs	r0, #1
 800ced2:	f7fd fd2f 	bl	800a934 <vTaskDelay>
				while (offset < current_file.size)
 800ced6:	4b23      	ldr	r3, [pc, #140]	@ (800cf64 <TaskSendImage+0x180>)
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	69fa      	ldr	r2, [r7, #28]
 800cedc:	429a      	cmp	r2, r3
 800cede:	d3ca      	bcc.n	800ce76 <TaskSendImage+0x92>
				}
				Queue_Set_Tail_Position(&usb_rx_file_queue, current_file.start_file_index);
 800cee0:	4b20      	ldr	r3, [pc, #128]	@ (800cf64 <TaskSendImage+0x180>)
 800cee2:	691b      	ldr	r3, [r3, #16]
 800cee4:	4619      	mov	r1, r3
 800cee6:	4822      	ldr	r0, [pc, #136]	@ (800cf70 <TaskSendImage+0x18c>)
 800cee8:	f7ff fdc3 	bl	800ca72 <Queue_Set_Tail_Position>
				current_file.calculated_crc = CRC_HW_Calculation(Queue_Get_Tail_Address(&usb_rx_file_queue), current_file.size);
 800ceec:	4820      	ldr	r0, [pc, #128]	@ (800cf70 <TaskSendImage+0x18c>)
 800ceee:	f7ff fd9b 	bl	800ca28 <Queue_Get_Tail_Address>
 800cef2:	4602      	mov	r2, r0
 800cef4:	4b1b      	ldr	r3, [pc, #108]	@ (800cf64 <TaskSendImage+0x180>)
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	4619      	mov	r1, r3
 800cefa:	4610      	mov	r0, r2
 800cefc:	f7f4 f81a 	bl	8000f34 <CRC_HW_Calculation>
 800cf00:	4603      	mov	r3, r0
 800cf02:	4a18      	ldr	r2, [pc, #96]	@ (800cf64 <TaskSendImage+0x180>)
 800cf04:	6093      	str	r3, [r2, #8]
				// Gửi CRC
				uint8_t crc_bytes[4] = {0};
 800cf06:	2300      	movs	r3, #0
 800cf08:	60fb      	str	r3, [r7, #12]
				crc_bytes[0] = (current_file.calculated_crc >> 0) & 0xFF;
 800cf0a:	4b16      	ldr	r3, [pc, #88]	@ (800cf64 <TaskSendImage+0x180>)
 800cf0c:	689b      	ldr	r3, [r3, #8]
 800cf0e:	b2db      	uxtb	r3, r3
 800cf10:	733b      	strb	r3, [r7, #12]
				crc_bytes[1] = (current_file.calculated_crc >> 8) & 0xFF;
 800cf12:	4b14      	ldr	r3, [pc, #80]	@ (800cf64 <TaskSendImage+0x180>)
 800cf14:	689b      	ldr	r3, [r3, #8]
 800cf16:	0a1b      	lsrs	r3, r3, #8
 800cf18:	b2db      	uxtb	r3, r3
 800cf1a:	737b      	strb	r3, [r7, #13]
				crc_bytes[2] = (current_file.calculated_crc >> 16) & 0xFF;
 800cf1c:	4b11      	ldr	r3, [pc, #68]	@ (800cf64 <TaskSendImage+0x180>)
 800cf1e:	689b      	ldr	r3, [r3, #8]
 800cf20:	0c1b      	lsrs	r3, r3, #16
 800cf22:	b2db      	uxtb	r3, r3
 800cf24:	73bb      	strb	r3, [r7, #14]
				crc_bytes[3] = (current_file.calculated_crc >> 24) & 0xFF;
 800cf26:	4b0f      	ldr	r3, [pc, #60]	@ (800cf64 <TaskSendImage+0x180>)
 800cf28:	689b      	ldr	r3, [r3, #8]
 800cf2a:	0e1b      	lsrs	r3, r3, #24
 800cf2c:	b2db      	uxtb	r3, r3
 800cf2e:	73fb      	strb	r3, [r7, #15]
				CDC_Transmit_HS(crc_bytes, 4);
 800cf30:	f107 030c 	add.w	r3, r7, #12
 800cf34:	2104      	movs	r1, #4
 800cf36:	4618      	mov	r0, r3
 800cf38:	f000 f8f6 	bl	800d128 <CDC_Transmit_HS>
				Timer_End_Counter();
 800cf3c:	f7f4 f83e 	bl	8000fbc <Timer_End_Counter>
				Timer_Get_Duration();
 800cf40:	f7f4 f84a 	bl	8000fd8 <Timer_Get_Duration>

				vTaskDelay(pdMS_TO_TICKS(10));  // Đợi đảm bảo dữ liệu được gửi hết
 800cf44:	200a      	movs	r0, #10
 800cf46:	f7fd fcf5 	bl	800a934 <vTaskDelay>

				current_device_state = STATE_WAIT_COMMAND;
 800cf4a:	4b05      	ldr	r3, [pc, #20]	@ (800cf60 <TaskSendImage+0x17c>)
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	701a      	strb	r2, [r3, #0]
				vTaskPrioritySet(hTaskSend, 3);
 800cf50:	4b06      	ldr	r3, [pc, #24]	@ (800cf6c <TaskSendImage+0x188>)
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	2103      	movs	r1, #3
 800cf56:	4618      	mov	r0, r3
 800cf58:	f7fd fd3e 	bl	800a9d8 <vTaskPrioritySet>
		if(current_device_state == STATE_SEND_IMAGE)
 800cf5c:	e746      	b.n	800cdec <TaskSendImage+0x8>
 800cf5e:	bf00      	nop
 800cf60:	2000e20c 	.word	0x2000e20c
 800cf64:	2000e210 	.word	0x2000e210
 800cf68:	080105f0 	.word	0x080105f0
 800cf6c:	2000e208 	.word	0x2000e208
 800cf70:	200003f4 	.word	0x200003f4

0800cf74 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800cf78:	2201      	movs	r2, #1
 800cf7a:	4912      	ldr	r1, [pc, #72]	@ (800cfc4 <MX_USB_DEVICE_Init+0x50>)
 800cf7c:	4812      	ldr	r0, [pc, #72]	@ (800cfc8 <MX_USB_DEVICE_Init+0x54>)
 800cf7e:	f7fb f957 	bl	8008230 <USBD_Init>
 800cf82:	4603      	mov	r3, r0
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d001      	beq.n	800cf8c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cf88:	f7f4 fc87 	bl	800189a <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800cf8c:	490f      	ldr	r1, [pc, #60]	@ (800cfcc <MX_USB_DEVICE_Init+0x58>)
 800cf8e:	480e      	ldr	r0, [pc, #56]	@ (800cfc8 <MX_USB_DEVICE_Init+0x54>)
 800cf90:	f7fb f97e 	bl	8008290 <USBD_RegisterClass>
 800cf94:	4603      	mov	r3, r0
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d001      	beq.n	800cf9e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cf9a:	f7f4 fc7e 	bl	800189a <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800cf9e:	490c      	ldr	r1, [pc, #48]	@ (800cfd0 <MX_USB_DEVICE_Init+0x5c>)
 800cfa0:	4809      	ldr	r0, [pc, #36]	@ (800cfc8 <MX_USB_DEVICE_Init+0x54>)
 800cfa2:	f7fb f875 	bl	8008090 <USBD_CDC_RegisterInterface>
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d001      	beq.n	800cfb0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cfac:	f7f4 fc75 	bl	800189a <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800cfb0:	4805      	ldr	r0, [pc, #20]	@ (800cfc8 <MX_USB_DEVICE_Init+0x54>)
 800cfb2:	f7fb f9a3 	bl	80082fc <USBD_Start>
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d001      	beq.n	800cfc0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cfbc:	f7f4 fc6d 	bl	800189a <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cfc0:	bf00      	nop
 800cfc2:	bd80      	pop	{r7, pc}
 800cfc4:	200000b0 	.word	0x200000b0
 800cfc8:	2000e260 	.word	0x2000e260
 800cfcc:	20000018 	.word	0x20000018
 800cfd0:	2000009c 	.word	0x2000009c

0800cfd4 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800cfd8:	2200      	movs	r2, #0
 800cfda:	4905      	ldr	r1, [pc, #20]	@ (800cff0 <CDC_Init_HS+0x1c>)
 800cfdc:	4805      	ldr	r0, [pc, #20]	@ (800cff4 <CDC_Init_HS+0x20>)
 800cfde:	f7fb f871 	bl	80080c4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800cfe2:	4905      	ldr	r1, [pc, #20]	@ (800cff8 <CDC_Init_HS+0x24>)
 800cfe4:	4803      	ldr	r0, [pc, #12]	@ (800cff4 <CDC_Init_HS+0x20>)
 800cfe6:	f7fb f88f 	bl	8008108 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cfea:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800cfec:	4618      	mov	r0, r3
 800cfee:	bd80      	pop	{r7, pc}
 800cff0:	2000ed3c 	.word	0x2000ed3c
 800cff4:	2000e260 	.word	0x2000e260
 800cff8:	2000e53c 	.word	0x2000e53c

0800cffc <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800cffc:	b480      	push	{r7}
 800cffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800d000:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800d002:	4618      	mov	r0, r3
 800d004:	46bd      	mov	sp, r7
 800d006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00a:	4770      	bx	lr

0800d00c <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d00c:	b480      	push	{r7}
 800d00e:	b083      	sub	sp, #12
 800d010:	af00      	add	r7, sp, #0
 800d012:	4603      	mov	r3, r0
 800d014:	6039      	str	r1, [r7, #0]
 800d016:	71fb      	strb	r3, [r7, #7]
 800d018:	4613      	mov	r3, r2
 800d01a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800d01c:	79fb      	ldrb	r3, [r7, #7]
 800d01e:	2b23      	cmp	r3, #35	@ 0x23
 800d020:	d84a      	bhi.n	800d0b8 <CDC_Control_HS+0xac>
 800d022:	a201      	add	r2, pc, #4	@ (adr r2, 800d028 <CDC_Control_HS+0x1c>)
 800d024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d028:	0800d0b9 	.word	0x0800d0b9
 800d02c:	0800d0b9 	.word	0x0800d0b9
 800d030:	0800d0b9 	.word	0x0800d0b9
 800d034:	0800d0b9 	.word	0x0800d0b9
 800d038:	0800d0b9 	.word	0x0800d0b9
 800d03c:	0800d0b9 	.word	0x0800d0b9
 800d040:	0800d0b9 	.word	0x0800d0b9
 800d044:	0800d0b9 	.word	0x0800d0b9
 800d048:	0800d0b9 	.word	0x0800d0b9
 800d04c:	0800d0b9 	.word	0x0800d0b9
 800d050:	0800d0b9 	.word	0x0800d0b9
 800d054:	0800d0b9 	.word	0x0800d0b9
 800d058:	0800d0b9 	.word	0x0800d0b9
 800d05c:	0800d0b9 	.word	0x0800d0b9
 800d060:	0800d0b9 	.word	0x0800d0b9
 800d064:	0800d0b9 	.word	0x0800d0b9
 800d068:	0800d0b9 	.word	0x0800d0b9
 800d06c:	0800d0b9 	.word	0x0800d0b9
 800d070:	0800d0b9 	.word	0x0800d0b9
 800d074:	0800d0b9 	.word	0x0800d0b9
 800d078:	0800d0b9 	.word	0x0800d0b9
 800d07c:	0800d0b9 	.word	0x0800d0b9
 800d080:	0800d0b9 	.word	0x0800d0b9
 800d084:	0800d0b9 	.word	0x0800d0b9
 800d088:	0800d0b9 	.word	0x0800d0b9
 800d08c:	0800d0b9 	.word	0x0800d0b9
 800d090:	0800d0b9 	.word	0x0800d0b9
 800d094:	0800d0b9 	.word	0x0800d0b9
 800d098:	0800d0b9 	.word	0x0800d0b9
 800d09c:	0800d0b9 	.word	0x0800d0b9
 800d0a0:	0800d0b9 	.word	0x0800d0b9
 800d0a4:	0800d0b9 	.word	0x0800d0b9
 800d0a8:	0800d0b9 	.word	0x0800d0b9
 800d0ac:	0800d0b9 	.word	0x0800d0b9
 800d0b0:	0800d0b9 	.word	0x0800d0b9
 800d0b4:	0800d0b9 	.word	0x0800d0b9
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d0b8:	bf00      	nop
  }

  return (USBD_OK);
 800d0ba:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800d0bc:	4618      	mov	r0, r3
 800d0be:	370c      	adds	r7, #12
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c6:	4770      	bx	lr

0800d0c8 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b082      	sub	sp, #8
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	6078      	str	r0, [r7, #4]
 800d0d0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */

  if(current_device_state == STATE_RECEIVE_IMAGE)
 800d0d2:	4b11      	ldr	r3, [pc, #68]	@ (800d118 <CDC_Receive_HS+0x50>)
 800d0d4:	781b      	ldrb	r3, [r3, #0]
 800d0d6:	2b01      	cmp	r3, #1
 800d0d8:	d107      	bne.n	800d0ea <CDC_Receive_HS+0x22>
  {
    Queue_Push_Buffer(&usb_rx_file_queue, Buf, *Len);
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	461a      	mov	r2, r3
 800d0e0:	6879      	ldr	r1, [r7, #4]
 800d0e2:	480e      	ldr	r0, [pc, #56]	@ (800d11c <CDC_Receive_HS+0x54>)
 800d0e4:	f7ff fbaf 	bl	800c846 <Queue_Push_Buffer>
 800d0e8:	e00a      	b.n	800d100 <CDC_Receive_HS+0x38>
  }
  else if(current_device_state == STATE_WAIT_COMMAND)
 800d0ea:	4b0b      	ldr	r3, [pc, #44]	@ (800d118 <CDC_Receive_HS+0x50>)
 800d0ec:	781b      	ldrb	r3, [r3, #0]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d106      	bne.n	800d100 <CDC_Receive_HS+0x38>
  {
    Queue_Push_Buffer(&usb_rx_cmd_queue, Buf, *Len);
 800d0f2:	683b      	ldr	r3, [r7, #0]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	461a      	mov	r2, r3
 800d0f8:	6879      	ldr	r1, [r7, #4]
 800d0fa:	4809      	ldr	r0, [pc, #36]	@ (800d120 <CDC_Receive_HS+0x58>)
 800d0fc:	f7ff fba3 	bl	800c846 <Queue_Push_Buffer>
//	          USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
//	          USBD_CDC_ReceivePacket(&hUsbDeviceHS);
//	          return (USBD_OK);
//  }

  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800d100:	6879      	ldr	r1, [r7, #4]
 800d102:	4808      	ldr	r0, [pc, #32]	@ (800d124 <CDC_Receive_HS+0x5c>)
 800d104:	f7fb f800 	bl	8008108 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800d108:	4806      	ldr	r0, [pc, #24]	@ (800d124 <CDC_Receive_HS+0x5c>)
 800d10a:	f7fb f85b 	bl	80081c4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d10e:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800d110:	4618      	mov	r0, r3
 800d112:	3708      	adds	r7, #8
 800d114:	46bd      	mov	sp, r7
 800d116:	bd80      	pop	{r7, pc}
 800d118:	2000e20c 	.word	0x2000e20c
 800d11c:	200003f4 	.word	0x200003f4
 800d120:	200003e4 	.word	0x200003e4
 800d124:	2000e260 	.word	0x2000e260

0800d128 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b084      	sub	sp, #16
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
 800d130:	460b      	mov	r3, r1
 800d132:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d134:	2300      	movs	r3, #0
 800d136:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800d138:	4b0d      	ldr	r3, [pc, #52]	@ (800d170 <CDC_Transmit_HS+0x48>)
 800d13a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d13e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d140:	68bb      	ldr	r3, [r7, #8]
 800d142:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d146:	2b00      	cmp	r3, #0
 800d148:	d001      	beq.n	800d14e <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 800d14a:	2301      	movs	r3, #1
 800d14c:	e00b      	b.n	800d166 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800d14e:	887b      	ldrh	r3, [r7, #2]
 800d150:	461a      	mov	r2, r3
 800d152:	6879      	ldr	r1, [r7, #4]
 800d154:	4806      	ldr	r0, [pc, #24]	@ (800d170 <CDC_Transmit_HS+0x48>)
 800d156:	f7fa ffb5 	bl	80080c4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800d15a:	4805      	ldr	r0, [pc, #20]	@ (800d170 <CDC_Transmit_HS+0x48>)
 800d15c:	f7fa fff2 	bl	8008144 <USBD_CDC_TransmitPacket>
 800d160:	4603      	mov	r3, r0
 800d162:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800d164:	7bfb      	ldrb	r3, [r7, #15]
}
 800d166:	4618      	mov	r0, r3
 800d168:	3710      	adds	r7, #16
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}
 800d16e:	bf00      	nop
 800d170:	2000e260 	.word	0x2000e260

0800d174 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d174:	b480      	push	{r7}
 800d176:	b087      	sub	sp, #28
 800d178:	af00      	add	r7, sp, #0
 800d17a:	60f8      	str	r0, [r7, #12]
 800d17c:	60b9      	str	r1, [r7, #8]
 800d17e:	4613      	mov	r3, r2
 800d180:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d182:	2300      	movs	r3, #0
 800d184:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800d186:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d18a:	4618      	mov	r0, r3
 800d18c:	371c      	adds	r7, #28
 800d18e:	46bd      	mov	sp, r7
 800d190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d194:	4770      	bx	lr
	...

0800d198 <Check_Flag_Complete_Transmit>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */

uint8_t Check_Flag_Complete_Transmit(void)
{
 800d198:	b480      	push	{r7}
 800d19a:	b083      	sub	sp, #12
 800d19c:	af00      	add	r7, sp, #0
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800d19e:	4b09      	ldr	r3, [pc, #36]	@ (800d1c4 <Check_Flag_Complete_Transmit+0x2c>)
 800d1a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d1a4:	607b      	str	r3, [r7, #4]
	  if (hcdc->TxState == 0)
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d101      	bne.n	800d1b4 <Check_Flag_Complete_Transmit+0x1c>
	  {
		return 0;
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	e000      	b.n	800d1b6 <Check_Flag_Complete_Transmit+0x1e>
	  }
	  return 1;
 800d1b4:	2301      	movs	r3, #1
}
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	370c      	adds	r7, #12
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c0:	4770      	bx	lr
 800d1c2:	bf00      	nop
 800d1c4:	2000e260 	.word	0x2000e260

0800d1c8 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d1c8:	b480      	push	{r7}
 800d1ca:	b083      	sub	sp, #12
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	6039      	str	r1, [r7, #0]
 800d1d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	2212      	movs	r2, #18
 800d1d8:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800d1da:	4b03      	ldr	r3, [pc, #12]	@ (800d1e8 <USBD_HS_DeviceDescriptor+0x20>)
}
 800d1dc:	4618      	mov	r0, r3
 800d1de:	370c      	adds	r7, #12
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e6:	4770      	bx	lr
 800d1e8:	200000d0 	.word	0x200000d0

0800d1ec <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d1ec:	b480      	push	{r7}
 800d1ee:	b083      	sub	sp, #12
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	4603      	mov	r3, r0
 800d1f4:	6039      	str	r1, [r7, #0]
 800d1f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d1f8:	683b      	ldr	r3, [r7, #0]
 800d1fa:	2204      	movs	r2, #4
 800d1fc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d1fe:	4b03      	ldr	r3, [pc, #12]	@ (800d20c <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800d200:	4618      	mov	r0, r3
 800d202:	370c      	adds	r7, #12
 800d204:	46bd      	mov	sp, r7
 800d206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20a:	4770      	bx	lr
 800d20c:	200000f0 	.word	0x200000f0

0800d210 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b082      	sub	sp, #8
 800d214:	af00      	add	r7, sp, #0
 800d216:	4603      	mov	r3, r0
 800d218:	6039      	str	r1, [r7, #0]
 800d21a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d21c:	79fb      	ldrb	r3, [r7, #7]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d105      	bne.n	800d22e <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800d222:	683a      	ldr	r2, [r7, #0]
 800d224:	4907      	ldr	r1, [pc, #28]	@ (800d244 <USBD_HS_ProductStrDescriptor+0x34>)
 800d226:	4808      	ldr	r0, [pc, #32]	@ (800d248 <USBD_HS_ProductStrDescriptor+0x38>)
 800d228:	f7fc fa58 	bl	80096dc <USBD_GetString>
 800d22c:	e004      	b.n	800d238 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800d22e:	683a      	ldr	r2, [r7, #0]
 800d230:	4904      	ldr	r1, [pc, #16]	@ (800d244 <USBD_HS_ProductStrDescriptor+0x34>)
 800d232:	4805      	ldr	r0, [pc, #20]	@ (800d248 <USBD_HS_ProductStrDescriptor+0x38>)
 800d234:	f7fc fa52 	bl	80096dc <USBD_GetString>
  }
  return USBD_StrDesc;
 800d238:	4b02      	ldr	r3, [pc, #8]	@ (800d244 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800d23a:	4618      	mov	r0, r3
 800d23c:	3708      	adds	r7, #8
 800d23e:	46bd      	mov	sp, r7
 800d240:	bd80      	pop	{r7, pc}
 800d242:	bf00      	nop
 800d244:	2000f53c 	.word	0x2000f53c
 800d248:	08010600 	.word	0x08010600

0800d24c <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b082      	sub	sp, #8
 800d250:	af00      	add	r7, sp, #0
 800d252:	4603      	mov	r3, r0
 800d254:	6039      	str	r1, [r7, #0]
 800d256:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d258:	683a      	ldr	r2, [r7, #0]
 800d25a:	4904      	ldr	r1, [pc, #16]	@ (800d26c <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800d25c:	4804      	ldr	r0, [pc, #16]	@ (800d270 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800d25e:	f7fc fa3d 	bl	80096dc <USBD_GetString>
  return USBD_StrDesc;
 800d262:	4b02      	ldr	r3, [pc, #8]	@ (800d26c <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800d264:	4618      	mov	r0, r3
 800d266:	3708      	adds	r7, #8
 800d268:	46bd      	mov	sp, r7
 800d26a:	bd80      	pop	{r7, pc}
 800d26c:	2000f53c 	.word	0x2000f53c
 800d270:	08010618 	.word	0x08010618

0800d274 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b082      	sub	sp, #8
 800d278:	af00      	add	r7, sp, #0
 800d27a:	4603      	mov	r3, r0
 800d27c:	6039      	str	r1, [r7, #0]
 800d27e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d280:	683b      	ldr	r3, [r7, #0]
 800d282:	221a      	movs	r2, #26
 800d284:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d286:	f000 f855 	bl	800d334 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800d28a:	4b02      	ldr	r3, [pc, #8]	@ (800d294 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800d28c:	4618      	mov	r0, r3
 800d28e:	3708      	adds	r7, #8
 800d290:	46bd      	mov	sp, r7
 800d292:	bd80      	pop	{r7, pc}
 800d294:	200000f4 	.word	0x200000f4

0800d298 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b082      	sub	sp, #8
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	4603      	mov	r3, r0
 800d2a0:	6039      	str	r1, [r7, #0]
 800d2a2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d2a4:	79fb      	ldrb	r3, [r7, #7]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d105      	bne.n	800d2b6 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800d2aa:	683a      	ldr	r2, [r7, #0]
 800d2ac:	4907      	ldr	r1, [pc, #28]	@ (800d2cc <USBD_HS_ConfigStrDescriptor+0x34>)
 800d2ae:	4808      	ldr	r0, [pc, #32]	@ (800d2d0 <USBD_HS_ConfigStrDescriptor+0x38>)
 800d2b0:	f7fc fa14 	bl	80096dc <USBD_GetString>
 800d2b4:	e004      	b.n	800d2c0 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800d2b6:	683a      	ldr	r2, [r7, #0]
 800d2b8:	4904      	ldr	r1, [pc, #16]	@ (800d2cc <USBD_HS_ConfigStrDescriptor+0x34>)
 800d2ba:	4805      	ldr	r0, [pc, #20]	@ (800d2d0 <USBD_HS_ConfigStrDescriptor+0x38>)
 800d2bc:	f7fc fa0e 	bl	80096dc <USBD_GetString>
  }
  return USBD_StrDesc;
 800d2c0:	4b02      	ldr	r3, [pc, #8]	@ (800d2cc <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	3708      	adds	r7, #8
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	bd80      	pop	{r7, pc}
 800d2ca:	bf00      	nop
 800d2cc:	2000f53c 	.word	0x2000f53c
 800d2d0:	0801062c 	.word	0x0801062c

0800d2d4 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b082      	sub	sp, #8
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	4603      	mov	r3, r0
 800d2dc:	6039      	str	r1, [r7, #0]
 800d2de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d2e0:	79fb      	ldrb	r3, [r7, #7]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d105      	bne.n	800d2f2 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800d2e6:	683a      	ldr	r2, [r7, #0]
 800d2e8:	4907      	ldr	r1, [pc, #28]	@ (800d308 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800d2ea:	4808      	ldr	r0, [pc, #32]	@ (800d30c <USBD_HS_InterfaceStrDescriptor+0x38>)
 800d2ec:	f7fc f9f6 	bl	80096dc <USBD_GetString>
 800d2f0:	e004      	b.n	800d2fc <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800d2f2:	683a      	ldr	r2, [r7, #0]
 800d2f4:	4904      	ldr	r1, [pc, #16]	@ (800d308 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800d2f6:	4805      	ldr	r0, [pc, #20]	@ (800d30c <USBD_HS_InterfaceStrDescriptor+0x38>)
 800d2f8:	f7fc f9f0 	bl	80096dc <USBD_GetString>
  }
  return USBD_StrDesc;
 800d2fc:	4b02      	ldr	r3, [pc, #8]	@ (800d308 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800d2fe:	4618      	mov	r0, r3
 800d300:	3708      	adds	r7, #8
 800d302:	46bd      	mov	sp, r7
 800d304:	bd80      	pop	{r7, pc}
 800d306:	bf00      	nop
 800d308:	2000f53c 	.word	0x2000f53c
 800d30c:	08010638 	.word	0x08010638

0800d310 <USBD_HS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d310:	b480      	push	{r7}
 800d312:	b083      	sub	sp, #12
 800d314:	af00      	add	r7, sp, #0
 800d316:	4603      	mov	r3, r0
 800d318:	6039      	str	r1, [r7, #0]
 800d31a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_BOSDesc);
 800d31c:	683b      	ldr	r3, [r7, #0]
 800d31e:	220c      	movs	r2, #12
 800d320:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_HS_BOSDesc;
 800d322:	4b03      	ldr	r3, [pc, #12]	@ (800d330 <USBD_HS_USR_BOSDescriptor+0x20>)
}
 800d324:	4618      	mov	r0, r3
 800d326:	370c      	adds	r7, #12
 800d328:	46bd      	mov	sp, r7
 800d32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32e:	4770      	bx	lr
 800d330:	200000e4 	.word	0x200000e4

0800d334 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b084      	sub	sp, #16
 800d338:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d33a:	4b0f      	ldr	r3, [pc, #60]	@ (800d378 <Get_SerialNum+0x44>)
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d340:	4b0e      	ldr	r3, [pc, #56]	@ (800d37c <Get_SerialNum+0x48>)
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d346:	4b0e      	ldr	r3, [pc, #56]	@ (800d380 <Get_SerialNum+0x4c>)
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d34c:	68fa      	ldr	r2, [r7, #12]
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	4413      	add	r3, r2
 800d352:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d009      	beq.n	800d36e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d35a:	2208      	movs	r2, #8
 800d35c:	4909      	ldr	r1, [pc, #36]	@ (800d384 <Get_SerialNum+0x50>)
 800d35e:	68f8      	ldr	r0, [r7, #12]
 800d360:	f000 f814 	bl	800d38c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d364:	2204      	movs	r2, #4
 800d366:	4908      	ldr	r1, [pc, #32]	@ (800d388 <Get_SerialNum+0x54>)
 800d368:	68b8      	ldr	r0, [r7, #8]
 800d36a:	f000 f80f 	bl	800d38c <IntToUnicode>
  }
}
 800d36e:	bf00      	nop
 800d370:	3710      	adds	r7, #16
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}
 800d376:	bf00      	nop
 800d378:	1ff0f420 	.word	0x1ff0f420
 800d37c:	1ff0f424 	.word	0x1ff0f424
 800d380:	1ff0f428 	.word	0x1ff0f428
 800d384:	200000f6 	.word	0x200000f6
 800d388:	20000106 	.word	0x20000106

0800d38c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d38c:	b480      	push	{r7}
 800d38e:	b087      	sub	sp, #28
 800d390:	af00      	add	r7, sp, #0
 800d392:	60f8      	str	r0, [r7, #12]
 800d394:	60b9      	str	r1, [r7, #8]
 800d396:	4613      	mov	r3, r2
 800d398:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d39a:	2300      	movs	r3, #0
 800d39c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d39e:	2300      	movs	r3, #0
 800d3a0:	75fb      	strb	r3, [r7, #23]
 800d3a2:	e027      	b.n	800d3f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	0f1b      	lsrs	r3, r3, #28
 800d3a8:	2b09      	cmp	r3, #9
 800d3aa:	d80b      	bhi.n	800d3c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	0f1b      	lsrs	r3, r3, #28
 800d3b0:	b2da      	uxtb	r2, r3
 800d3b2:	7dfb      	ldrb	r3, [r7, #23]
 800d3b4:	005b      	lsls	r3, r3, #1
 800d3b6:	4619      	mov	r1, r3
 800d3b8:	68bb      	ldr	r3, [r7, #8]
 800d3ba:	440b      	add	r3, r1
 800d3bc:	3230      	adds	r2, #48	@ 0x30
 800d3be:	b2d2      	uxtb	r2, r2
 800d3c0:	701a      	strb	r2, [r3, #0]
 800d3c2:	e00a      	b.n	800d3da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	0f1b      	lsrs	r3, r3, #28
 800d3c8:	b2da      	uxtb	r2, r3
 800d3ca:	7dfb      	ldrb	r3, [r7, #23]
 800d3cc:	005b      	lsls	r3, r3, #1
 800d3ce:	4619      	mov	r1, r3
 800d3d0:	68bb      	ldr	r3, [r7, #8]
 800d3d2:	440b      	add	r3, r1
 800d3d4:	3237      	adds	r2, #55	@ 0x37
 800d3d6:	b2d2      	uxtb	r2, r2
 800d3d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	011b      	lsls	r3, r3, #4
 800d3de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d3e0:	7dfb      	ldrb	r3, [r7, #23]
 800d3e2:	005b      	lsls	r3, r3, #1
 800d3e4:	3301      	adds	r3, #1
 800d3e6:	68ba      	ldr	r2, [r7, #8]
 800d3e8:	4413      	add	r3, r2
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d3ee:	7dfb      	ldrb	r3, [r7, #23]
 800d3f0:	3301      	adds	r3, #1
 800d3f2:	75fb      	strb	r3, [r7, #23]
 800d3f4:	7dfa      	ldrb	r2, [r7, #23]
 800d3f6:	79fb      	ldrb	r3, [r7, #7]
 800d3f8:	429a      	cmp	r2, r3
 800d3fa:	d3d3      	bcc.n	800d3a4 <IntToUnicode+0x18>
  }
}
 800d3fc:	bf00      	nop
 800d3fe:	bf00      	nop
 800d400:	371c      	adds	r7, #28
 800d402:	46bd      	mov	sp, r7
 800d404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d408:	4770      	bx	lr
	...

0800d40c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b08e      	sub	sp, #56	@ 0x38
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d414:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d418:	2200      	movs	r2, #0
 800d41a:	601a      	str	r2, [r3, #0]
 800d41c:	605a      	str	r2, [r3, #4]
 800d41e:	609a      	str	r2, [r3, #8]
 800d420:	60da      	str	r2, [r3, #12]
 800d422:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	4a4c      	ldr	r2, [pc, #304]	@ (800d55c <HAL_PCD_MspInit+0x150>)
 800d42a:	4293      	cmp	r3, r2
 800d42c:	f040 8091 	bne.w	800d552 <HAL_PCD_MspInit+0x146>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d430:	4b4b      	ldr	r3, [pc, #300]	@ (800d560 <HAL_PCD_MspInit+0x154>)
 800d432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d434:	4a4a      	ldr	r2, [pc, #296]	@ (800d560 <HAL_PCD_MspInit+0x154>)
 800d436:	f043 0302 	orr.w	r3, r3, #2
 800d43a:	6313      	str	r3, [r2, #48]	@ 0x30
 800d43c:	4b48      	ldr	r3, [pc, #288]	@ (800d560 <HAL_PCD_MspInit+0x154>)
 800d43e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d440:	f003 0302 	and.w	r3, r3, #2
 800d444:	623b      	str	r3, [r7, #32]
 800d446:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800d448:	4b45      	ldr	r3, [pc, #276]	@ (800d560 <HAL_PCD_MspInit+0x154>)
 800d44a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d44c:	4a44      	ldr	r2, [pc, #272]	@ (800d560 <HAL_PCD_MspInit+0x154>)
 800d44e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d452:	6313      	str	r3, [r2, #48]	@ 0x30
 800d454:	4b42      	ldr	r3, [pc, #264]	@ (800d560 <HAL_PCD_MspInit+0x154>)
 800d456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d458:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d45c:	61fb      	str	r3, [r7, #28]
 800d45e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d460:	4b3f      	ldr	r3, [pc, #252]	@ (800d560 <HAL_PCD_MspInit+0x154>)
 800d462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d464:	4a3e      	ldr	r2, [pc, #248]	@ (800d560 <HAL_PCD_MspInit+0x154>)
 800d466:	f043 0304 	orr.w	r3, r3, #4
 800d46a:	6313      	str	r3, [r2, #48]	@ 0x30
 800d46c:	4b3c      	ldr	r3, [pc, #240]	@ (800d560 <HAL_PCD_MspInit+0x154>)
 800d46e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d470:	f003 0304 	and.w	r3, r3, #4
 800d474:	61bb      	str	r3, [r7, #24]
 800d476:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d478:	4b39      	ldr	r3, [pc, #228]	@ (800d560 <HAL_PCD_MspInit+0x154>)
 800d47a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d47c:	4a38      	ldr	r2, [pc, #224]	@ (800d560 <HAL_PCD_MspInit+0x154>)
 800d47e:	f043 0301 	orr.w	r3, r3, #1
 800d482:	6313      	str	r3, [r2, #48]	@ 0x30
 800d484:	4b36      	ldr	r3, [pc, #216]	@ (800d560 <HAL_PCD_MspInit+0x154>)
 800d486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d488:	f003 0301 	and.w	r3, r3, #1
 800d48c:	617b      	str	r3, [r7, #20]
 800d48e:	697b      	ldr	r3, [r7, #20]
    PA3     ------> USB_OTG_HS_ULPI_D0
    PB1     ------> USB_OTG_HS_ULPI_D2
    PB0     ------> USB_OTG_HS_ULPI_D1
    PB11     ------> USB_OTG_HS_ULPI_D4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_10
 800d490:	f643 4323 	movw	r3, #15395	@ 0x3c23
 800d494:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d496:	2302      	movs	r3, #2
 800d498:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d49a:	2300      	movs	r3, #0
 800d49c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d49e:	2303      	movs	r3, #3
 800d4a0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800d4a2:	230a      	movs	r3, #10
 800d4a4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d4a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d4aa:	4619      	mov	r1, r3
 800d4ac:	482d      	ldr	r0, [pc, #180]	@ (800d564 <HAL_PCD_MspInit+0x158>)
 800d4ae:	f7f4 febb 	bl	8002228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800d4b2:	2310      	movs	r3, #16
 800d4b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d4b6:	2302      	movs	r3, #2
 800d4b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d4be:	2303      	movs	r3, #3
 800d4c0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800d4c2:	230a      	movs	r3, #10
 800d4c4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800d4c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d4ca:	4619      	mov	r1, r3
 800d4cc:	4826      	ldr	r0, [pc, #152]	@ (800d568 <HAL_PCD_MspInit+0x15c>)
 800d4ce:	f7f4 feab 	bl	8002228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800d4d2:	2305      	movs	r3, #5
 800d4d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d4d6:	2302      	movs	r3, #2
 800d4d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d4da:	2300      	movs	r3, #0
 800d4dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d4de:	2303      	movs	r3, #3
 800d4e0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800d4e2:	230a      	movs	r3, #10
 800d4e4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d4e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d4ea:	4619      	mov	r1, r3
 800d4ec:	481f      	ldr	r0, [pc, #124]	@ (800d56c <HAL_PCD_MspInit+0x160>)
 800d4ee:	f7f4 fe9b 	bl	8002228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 800d4f2:	2328      	movs	r3, #40	@ 0x28
 800d4f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d4f6:	2302      	movs	r3, #2
 800d4f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d4fe:	2303      	movs	r3, #3
 800d500:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800d502:	230a      	movs	r3, #10
 800d504:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d506:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d50a:	4619      	mov	r1, r3
 800d50c:	4818      	ldr	r0, [pc, #96]	@ (800d570 <HAL_PCD_MspInit+0x164>)
 800d50e:	f7f4 fe8b 	bl	8002228 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800d512:	4b13      	ldr	r3, [pc, #76]	@ (800d560 <HAL_PCD_MspInit+0x154>)
 800d514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d516:	4a12      	ldr	r2, [pc, #72]	@ (800d560 <HAL_PCD_MspInit+0x154>)
 800d518:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800d51c:	6313      	str	r3, [r2, #48]	@ 0x30
 800d51e:	4b10      	ldr	r3, [pc, #64]	@ (800d560 <HAL_PCD_MspInit+0x154>)
 800d520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d522:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d526:	613b      	str	r3, [r7, #16]
 800d528:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 800d52a:	4b0d      	ldr	r3, [pc, #52]	@ (800d560 <HAL_PCD_MspInit+0x154>)
 800d52c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d52e:	4a0c      	ldr	r2, [pc, #48]	@ (800d560 <HAL_PCD_MspInit+0x154>)
 800d530:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d534:	6313      	str	r3, [r2, #48]	@ 0x30
 800d536:	4b0a      	ldr	r3, [pc, #40]	@ (800d560 <HAL_PCD_MspInit+0x154>)
 800d538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d53a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d53e:	60fb      	str	r3, [r7, #12]
 800d540:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800d542:	2200      	movs	r2, #0
 800d544:	2105      	movs	r1, #5
 800d546:	204d      	movs	r0, #77	@ 0x4d
 800d548:	f7f4 fd45 	bl	8001fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800d54c:	204d      	movs	r0, #77	@ 0x4d
 800d54e:	f7f4 fd5e 	bl	800200e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800d552:	bf00      	nop
 800d554:	3738      	adds	r7, #56	@ 0x38
 800d556:	46bd      	mov	sp, r7
 800d558:	bd80      	pop	{r7, pc}
 800d55a:	bf00      	nop
 800d55c:	40040000 	.word	0x40040000
 800d560:	40023800 	.word	0x40023800
 800d564:	40020400 	.word	0x40020400
 800d568:	40021c00 	.word	0x40021c00
 800d56c:	40020800 	.word	0x40020800
 800d570:	40020000 	.word	0x40020000

0800d574 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b082      	sub	sp, #8
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	f8d3 24dc 	ldr.w	r2, [r3, #1244]	@ 0x4dc
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d588:	4619      	mov	r1, r3
 800d58a:	4610      	mov	r0, r2
 800d58c:	f7fa ff03 	bl	8008396 <USBD_LL_SetupStage>
}
 800d590:	bf00      	nop
 800d592:	3708      	adds	r7, #8
 800d594:	46bd      	mov	sp, r7
 800d596:	bd80      	pop	{r7, pc}

0800d598 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	b082      	sub	sp, #8
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	6078      	str	r0, [r7, #4]
 800d5a0:	460b      	mov	r3, r1
 800d5a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 800d5aa:	78fa      	ldrb	r2, [r7, #3]
 800d5ac:	6879      	ldr	r1, [r7, #4]
 800d5ae:	4613      	mov	r3, r2
 800d5b0:	00db      	lsls	r3, r3, #3
 800d5b2:	4413      	add	r3, r2
 800d5b4:	009b      	lsls	r3, r3, #2
 800d5b6:	440b      	add	r3, r1
 800d5b8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d5bc:	681a      	ldr	r2, [r3, #0]
 800d5be:	78fb      	ldrb	r3, [r7, #3]
 800d5c0:	4619      	mov	r1, r3
 800d5c2:	f7fa ff3d 	bl	8008440 <USBD_LL_DataOutStage>
}
 800d5c6:	bf00      	nop
 800d5c8:	3708      	adds	r7, #8
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	bd80      	pop	{r7, pc}

0800d5ce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5ce:	b580      	push	{r7, lr}
 800d5d0:	b082      	sub	sp, #8
 800d5d2:	af00      	add	r7, sp, #0
 800d5d4:	6078      	str	r0, [r7, #4]
 800d5d6:	460b      	mov	r3, r1
 800d5d8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 800d5e0:	78fa      	ldrb	r2, [r7, #3]
 800d5e2:	6879      	ldr	r1, [r7, #4]
 800d5e4:	4613      	mov	r3, r2
 800d5e6:	00db      	lsls	r3, r3, #3
 800d5e8:	4413      	add	r3, r2
 800d5ea:	009b      	lsls	r3, r3, #2
 800d5ec:	440b      	add	r3, r1
 800d5ee:	3320      	adds	r3, #32
 800d5f0:	681a      	ldr	r2, [r3, #0]
 800d5f2:	78fb      	ldrb	r3, [r7, #3]
 800d5f4:	4619      	mov	r1, r3
 800d5f6:	f7fa ffdf 	bl	80085b8 <USBD_LL_DataInStage>
}
 800d5fa:	bf00      	nop
 800d5fc:	3708      	adds	r7, #8
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}

0800d602 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d602:	b580      	push	{r7, lr}
 800d604:	b082      	sub	sp, #8
 800d606:	af00      	add	r7, sp, #0
 800d608:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d610:	4618      	mov	r0, r3
 800d612:	f7fb f923 	bl	800885c <USBD_LL_SOF>
}
 800d616:	bf00      	nop
 800d618:	3708      	adds	r7, #8
 800d61a:	46bd      	mov	sp, r7
 800d61c:	bd80      	pop	{r7, pc}

0800d61e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d61e:	b580      	push	{r7, lr}
 800d620:	b084      	sub	sp, #16
 800d622:	af00      	add	r7, sp, #0
 800d624:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d626:	2301      	movs	r3, #1
 800d628:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	79db      	ldrb	r3, [r3, #7]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d102      	bne.n	800d638 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d632:	2300      	movs	r3, #0
 800d634:	73fb      	strb	r3, [r7, #15]
 800d636:	e008      	b.n	800d64a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	79db      	ldrb	r3, [r3, #7]
 800d63c:	2b02      	cmp	r3, #2
 800d63e:	d102      	bne.n	800d646 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d640:	2301      	movs	r3, #1
 800d642:	73fb      	strb	r3, [r7, #15]
 800d644:	e001      	b.n	800d64a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d646:	f7f4 f928 	bl	800189a <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d650:	7bfa      	ldrb	r2, [r7, #15]
 800d652:	4611      	mov	r1, r2
 800d654:	4618      	mov	r0, r3
 800d656:	f7fb f8bd 	bl	80087d4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d660:	4618      	mov	r0, r3
 800d662:	f7fb f864 	bl	800872e <USBD_LL_Reset>
}
 800d666:	bf00      	nop
 800d668:	3710      	adds	r7, #16
 800d66a:	46bd      	mov	sp, r7
 800d66c:	bd80      	pop	{r7, pc}
	...

0800d670 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b082      	sub	sp, #8
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d67e:	4618      	mov	r0, r3
 800d680:	f7fb f8b8 	bl	80087f4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	687a      	ldr	r2, [r7, #4]
 800d690:	6812      	ldr	r2, [r2, #0]
 800d692:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d696:	f043 0301 	orr.w	r3, r3, #1
 800d69a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	7adb      	ldrb	r3, [r3, #11]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d005      	beq.n	800d6b0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d6a4:	4b04      	ldr	r3, [pc, #16]	@ (800d6b8 <HAL_PCD_SuspendCallback+0x48>)
 800d6a6:	691b      	ldr	r3, [r3, #16]
 800d6a8:	4a03      	ldr	r2, [pc, #12]	@ (800d6b8 <HAL_PCD_SuspendCallback+0x48>)
 800d6aa:	f043 0306 	orr.w	r3, r3, #6
 800d6ae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d6b0:	bf00      	nop
 800d6b2:	3708      	adds	r7, #8
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	bd80      	pop	{r7, pc}
 800d6b8:	e000ed00 	.word	0xe000ed00

0800d6bc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b082      	sub	sp, #8
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	f7fb f8ae 	bl	800882c <USBD_LL_Resume>
}
 800d6d0:	bf00      	nop
 800d6d2:	3708      	adds	r7, #8
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	bd80      	pop	{r7, pc}

0800d6d8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b082      	sub	sp, #8
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
 800d6e0:	460b      	mov	r3, r1
 800d6e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d6ea:	78fa      	ldrb	r2, [r7, #3]
 800d6ec:	4611      	mov	r1, r2
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	f7fb f906 	bl	8008900 <USBD_LL_IsoOUTIncomplete>
}
 800d6f4:	bf00      	nop
 800d6f6:	3708      	adds	r7, #8
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bd80      	pop	{r7, pc}

0800d6fc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b082      	sub	sp, #8
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]
 800d704:	460b      	mov	r3, r1
 800d706:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d70e:	78fa      	ldrb	r2, [r7, #3]
 800d710:	4611      	mov	r1, r2
 800d712:	4618      	mov	r0, r3
 800d714:	f7fb f8c2 	bl	800889c <USBD_LL_IsoINIncomplete>
}
 800d718:	bf00      	nop
 800d71a:	3708      	adds	r7, #8
 800d71c:	46bd      	mov	sp, r7
 800d71e:	bd80      	pop	{r7, pc}

0800d720 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b082      	sub	sp, #8
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d72e:	4618      	mov	r0, r3
 800d730:	f7fb f918 	bl	8008964 <USBD_LL_DevConnected>
}
 800d734:	bf00      	nop
 800d736:	3708      	adds	r7, #8
 800d738:	46bd      	mov	sp, r7
 800d73a:	bd80      	pop	{r7, pc}

0800d73c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d73c:	b580      	push	{r7, lr}
 800d73e:	b082      	sub	sp, #8
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d74a:	4618      	mov	r0, r3
 800d74c:	f7fb f915 	bl	800897a <USBD_LL_DevDisconnected>
}
 800d750:	bf00      	nop
 800d752:	3708      	adds	r7, #8
 800d754:	46bd      	mov	sp, r7
 800d756:	bd80      	pop	{r7, pc}

0800d758 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b082      	sub	sp, #8
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	781b      	ldrb	r3, [r3, #0]
 800d764:	2b01      	cmp	r3, #1
 800d766:	d140      	bne.n	800d7ea <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800d768:	4a22      	ldr	r2, [pc, #136]	@ (800d7f4 <USBD_LL_Init+0x9c>)
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	f8c2 34dc 	str.w	r3, [r2, #1244]	@ 0x4dc
  pdev->pData = &hpcd_USB_OTG_HS;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	4a20      	ldr	r2, [pc, #128]	@ (800d7f4 <USBD_LL_Init+0x9c>)
 800d774:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800d778:	4b1e      	ldr	r3, [pc, #120]	@ (800d7f4 <USBD_LL_Init+0x9c>)
 800d77a:	4a1f      	ldr	r2, [pc, #124]	@ (800d7f8 <USBD_LL_Init+0xa0>)
 800d77c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 8;
 800d77e:	4b1d      	ldr	r3, [pc, #116]	@ (800d7f4 <USBD_LL_Init+0x9c>)
 800d780:	2208      	movs	r2, #8
 800d782:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 800d784:	4b1b      	ldr	r3, [pc, #108]	@ (800d7f4 <USBD_LL_Init+0x9c>)
 800d786:	2200      	movs	r2, #0
 800d788:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800d78a:	4b1a      	ldr	r3, [pc, #104]	@ (800d7f4 <USBD_LL_Init+0x9c>)
 800d78c:	2200      	movs	r2, #0
 800d78e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 800d790:	4b18      	ldr	r3, [pc, #96]	@ (800d7f4 <USBD_LL_Init+0x9c>)
 800d792:	2201      	movs	r2, #1
 800d794:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800d796:	4b17      	ldr	r3, [pc, #92]	@ (800d7f4 <USBD_LL_Init+0x9c>)
 800d798:	2200      	movs	r2, #0
 800d79a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800d79c:	4b15      	ldr	r3, [pc, #84]	@ (800d7f4 <USBD_LL_Init+0x9c>)
 800d79e:	2200      	movs	r2, #0
 800d7a0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800d7a2:	4b14      	ldr	r3, [pc, #80]	@ (800d7f4 <USBD_LL_Init+0x9c>)
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800d7a8:	4b12      	ldr	r3, [pc, #72]	@ (800d7f4 <USBD_LL_Init+0x9c>)
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800d7ae:	4b11      	ldr	r3, [pc, #68]	@ (800d7f4 <USBD_LL_Init+0x9c>)
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800d7b4:	4b0f      	ldr	r3, [pc, #60]	@ (800d7f4 <USBD_LL_Init+0x9c>)
 800d7b6:	2200      	movs	r2, #0
 800d7b8:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800d7ba:	480e      	ldr	r0, [pc, #56]	@ (800d7f4 <USBD_LL_Init+0x9c>)
 800d7bc:	f7f4 ff13 	bl	80025e6 <HAL_PCD_Init>
 800d7c0:	4603      	mov	r3, r0
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d001      	beq.n	800d7ca <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800d7c6:	f7f4 f868 	bl	800189a <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800d7ca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800d7ce:	4809      	ldr	r0, [pc, #36]	@ (800d7f4 <USBD_LL_Init+0x9c>)
 800d7d0:	f7f6 f95f 	bl	8003a92 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800d7d4:	2280      	movs	r2, #128	@ 0x80
 800d7d6:	2100      	movs	r1, #0
 800d7d8:	4806      	ldr	r0, [pc, #24]	@ (800d7f4 <USBD_LL_Init+0x9c>)
 800d7da:	f7f6 f913 	bl	8003a04 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800d7de:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 800d7e2:	2101      	movs	r1, #1
 800d7e4:	4803      	ldr	r0, [pc, #12]	@ (800d7f4 <USBD_LL_Init+0x9c>)
 800d7e6:	f7f6 f90d 	bl	8003a04 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d7ea:	2300      	movs	r3, #0
}
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	3708      	adds	r7, #8
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	bd80      	pop	{r7, pc}
 800d7f4:	2000f73c 	.word	0x2000f73c
 800d7f8:	40040000 	.word	0x40040000

0800d7fc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b084      	sub	sp, #16
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d804:	2300      	movs	r3, #0
 800d806:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d808:	2300      	movs	r3, #0
 800d80a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d812:	4618      	mov	r0, r3
 800d814:	f7f4 fffd 	bl	8002812 <HAL_PCD_Start>
 800d818:	4603      	mov	r3, r0
 800d81a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d81c:	7bfb      	ldrb	r3, [r7, #15]
 800d81e:	4618      	mov	r0, r3
 800d820:	f000 f97e 	bl	800db20 <USBD_Get_USB_Status>
 800d824:	4603      	mov	r3, r0
 800d826:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d828:	7bbb      	ldrb	r3, [r7, #14]
}
 800d82a:	4618      	mov	r0, r3
 800d82c:	3710      	adds	r7, #16
 800d82e:	46bd      	mov	sp, r7
 800d830:	bd80      	pop	{r7, pc}

0800d832 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d832:	b580      	push	{r7, lr}
 800d834:	b084      	sub	sp, #16
 800d836:	af00      	add	r7, sp, #0
 800d838:	6078      	str	r0, [r7, #4]
 800d83a:	4608      	mov	r0, r1
 800d83c:	4611      	mov	r1, r2
 800d83e:	461a      	mov	r2, r3
 800d840:	4603      	mov	r3, r0
 800d842:	70fb      	strb	r3, [r7, #3]
 800d844:	460b      	mov	r3, r1
 800d846:	70bb      	strb	r3, [r7, #2]
 800d848:	4613      	mov	r3, r2
 800d84a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d84c:	2300      	movs	r3, #0
 800d84e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d850:	2300      	movs	r3, #0
 800d852:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d85a:	78bb      	ldrb	r3, [r7, #2]
 800d85c:	883a      	ldrh	r2, [r7, #0]
 800d85e:	78f9      	ldrb	r1, [r7, #3]
 800d860:	f7f5 fceb 	bl	800323a <HAL_PCD_EP_Open>
 800d864:	4603      	mov	r3, r0
 800d866:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d868:	7bfb      	ldrb	r3, [r7, #15]
 800d86a:	4618      	mov	r0, r3
 800d86c:	f000 f958 	bl	800db20 <USBD_Get_USB_Status>
 800d870:	4603      	mov	r3, r0
 800d872:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d874:	7bbb      	ldrb	r3, [r7, #14]
}
 800d876:	4618      	mov	r0, r3
 800d878:	3710      	adds	r7, #16
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bd80      	pop	{r7, pc}

0800d87e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d87e:	b580      	push	{r7, lr}
 800d880:	b084      	sub	sp, #16
 800d882:	af00      	add	r7, sp, #0
 800d884:	6078      	str	r0, [r7, #4]
 800d886:	460b      	mov	r3, r1
 800d888:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d88a:	2300      	movs	r3, #0
 800d88c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d88e:	2300      	movs	r3, #0
 800d890:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d898:	78fa      	ldrb	r2, [r7, #3]
 800d89a:	4611      	mov	r1, r2
 800d89c:	4618      	mov	r0, r3
 800d89e:	f7f5 fd36 	bl	800330e <HAL_PCD_EP_Close>
 800d8a2:	4603      	mov	r3, r0
 800d8a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8a6:	7bfb      	ldrb	r3, [r7, #15]
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	f000 f939 	bl	800db20 <USBD_Get_USB_Status>
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d8b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	3710      	adds	r7, #16
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	bd80      	pop	{r7, pc}

0800d8bc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b084      	sub	sp, #16
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
 800d8c4:	460b      	mov	r3, r1
 800d8c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d8d6:	78fa      	ldrb	r2, [r7, #3]
 800d8d8:	4611      	mov	r1, r2
 800d8da:	4618      	mov	r0, r3
 800d8dc:	f7f5 fdee 	bl	80034bc <HAL_PCD_EP_SetStall>
 800d8e0:	4603      	mov	r3, r0
 800d8e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8e4:	7bfb      	ldrb	r3, [r7, #15]
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	f000 f91a 	bl	800db20 <USBD_Get_USB_Status>
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d8f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	3710      	adds	r7, #16
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	bd80      	pop	{r7, pc}

0800d8fa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d8fa:	b580      	push	{r7, lr}
 800d8fc:	b084      	sub	sp, #16
 800d8fe:	af00      	add	r7, sp, #0
 800d900:	6078      	str	r0, [r7, #4]
 800d902:	460b      	mov	r3, r1
 800d904:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d906:	2300      	movs	r3, #0
 800d908:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d90a:	2300      	movs	r3, #0
 800d90c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d914:	78fa      	ldrb	r2, [r7, #3]
 800d916:	4611      	mov	r1, r2
 800d918:	4618      	mov	r0, r3
 800d91a:	f7f5 fe32 	bl	8003582 <HAL_PCD_EP_ClrStall>
 800d91e:	4603      	mov	r3, r0
 800d920:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d922:	7bfb      	ldrb	r3, [r7, #15]
 800d924:	4618      	mov	r0, r3
 800d926:	f000 f8fb 	bl	800db20 <USBD_Get_USB_Status>
 800d92a:	4603      	mov	r3, r0
 800d92c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d92e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d930:	4618      	mov	r0, r3
 800d932:	3710      	adds	r7, #16
 800d934:	46bd      	mov	sp, r7
 800d936:	bd80      	pop	{r7, pc}

0800d938 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d938:	b480      	push	{r7}
 800d93a:	b085      	sub	sp, #20
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
 800d940:	460b      	mov	r3, r1
 800d942:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d94a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d94c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d950:	2b00      	cmp	r3, #0
 800d952:	da0b      	bge.n	800d96c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d954:	78fb      	ldrb	r3, [r7, #3]
 800d956:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d95a:	68f9      	ldr	r1, [r7, #12]
 800d95c:	4613      	mov	r3, r2
 800d95e:	00db      	lsls	r3, r3, #3
 800d960:	4413      	add	r3, r2
 800d962:	009b      	lsls	r3, r3, #2
 800d964:	440b      	add	r3, r1
 800d966:	3316      	adds	r3, #22
 800d968:	781b      	ldrb	r3, [r3, #0]
 800d96a:	e00b      	b.n	800d984 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d96c:	78fb      	ldrb	r3, [r7, #3]
 800d96e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d972:	68f9      	ldr	r1, [r7, #12]
 800d974:	4613      	mov	r3, r2
 800d976:	00db      	lsls	r3, r3, #3
 800d978:	4413      	add	r3, r2
 800d97a:	009b      	lsls	r3, r3, #2
 800d97c:	440b      	add	r3, r1
 800d97e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800d982:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d984:	4618      	mov	r0, r3
 800d986:	3714      	adds	r7, #20
 800d988:	46bd      	mov	sp, r7
 800d98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98e:	4770      	bx	lr

0800d990 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b084      	sub	sp, #16
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
 800d998:	460b      	mov	r3, r1
 800d99a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d99c:	2300      	movs	r3, #0
 800d99e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d9aa:	78fa      	ldrb	r2, [r7, #3]
 800d9ac:	4611      	mov	r1, r2
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	f7f5 fc1f 	bl	80031f2 <HAL_PCD_SetAddress>
 800d9b4:	4603      	mov	r3, r0
 800d9b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d9b8:	7bfb      	ldrb	r3, [r7, #15]
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f000 f8b0 	bl	800db20 <USBD_Get_USB_Status>
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d9c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	3710      	adds	r7, #16
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	bd80      	pop	{r7, pc}

0800d9ce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d9ce:	b580      	push	{r7, lr}
 800d9d0:	b086      	sub	sp, #24
 800d9d2:	af00      	add	r7, sp, #0
 800d9d4:	60f8      	str	r0, [r7, #12]
 800d9d6:	607a      	str	r2, [r7, #4]
 800d9d8:	603b      	str	r3, [r7, #0]
 800d9da:	460b      	mov	r3, r1
 800d9dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9de:	2300      	movs	r3, #0
 800d9e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d9ec:	7af9      	ldrb	r1, [r7, #11]
 800d9ee:	683b      	ldr	r3, [r7, #0]
 800d9f0:	687a      	ldr	r2, [r7, #4]
 800d9f2:	f7f5 fd29 	bl	8003448 <HAL_PCD_EP_Transmit>
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d9fa:	7dfb      	ldrb	r3, [r7, #23]
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	f000 f88f 	bl	800db20 <USBD_Get_USB_Status>
 800da02:	4603      	mov	r3, r0
 800da04:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800da06:	7dbb      	ldrb	r3, [r7, #22]
}
 800da08:	4618      	mov	r0, r3
 800da0a:	3718      	adds	r7, #24
 800da0c:	46bd      	mov	sp, r7
 800da0e:	bd80      	pop	{r7, pc}

0800da10 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800da10:	b580      	push	{r7, lr}
 800da12:	b086      	sub	sp, #24
 800da14:	af00      	add	r7, sp, #0
 800da16:	60f8      	str	r0, [r7, #12]
 800da18:	607a      	str	r2, [r7, #4]
 800da1a:	603b      	str	r3, [r7, #0]
 800da1c:	460b      	mov	r3, r1
 800da1e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da20:	2300      	movs	r3, #0
 800da22:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da24:	2300      	movs	r3, #0
 800da26:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800da2e:	7af9      	ldrb	r1, [r7, #11]
 800da30:	683b      	ldr	r3, [r7, #0]
 800da32:	687a      	ldr	r2, [r7, #4]
 800da34:	f7f5 fcb5 	bl	80033a2 <HAL_PCD_EP_Receive>
 800da38:	4603      	mov	r3, r0
 800da3a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da3c:	7dfb      	ldrb	r3, [r7, #23]
 800da3e:	4618      	mov	r0, r3
 800da40:	f000 f86e 	bl	800db20 <USBD_Get_USB_Status>
 800da44:	4603      	mov	r3, r0
 800da46:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800da48:	7dbb      	ldrb	r3, [r7, #22]
}
 800da4a:	4618      	mov	r0, r3
 800da4c:	3718      	adds	r7, #24
 800da4e:	46bd      	mov	sp, r7
 800da50:	bd80      	pop	{r7, pc}

0800da52 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da52:	b580      	push	{r7, lr}
 800da54:	b082      	sub	sp, #8
 800da56:	af00      	add	r7, sp, #0
 800da58:	6078      	str	r0, [r7, #4]
 800da5a:	460b      	mov	r3, r1
 800da5c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800da64:	78fa      	ldrb	r2, [r7, #3]
 800da66:	4611      	mov	r1, r2
 800da68:	4618      	mov	r0, r3
 800da6a:	f7f5 fcd5 	bl	8003418 <HAL_PCD_EP_GetRxCount>
 800da6e:	4603      	mov	r3, r0
}
 800da70:	4618      	mov	r0, r3
 800da72:	3708      	adds	r7, #8
 800da74:	46bd      	mov	sp, r7
 800da76:	bd80      	pop	{r7, pc}

0800da78 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b082      	sub	sp, #8
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
 800da80:	460b      	mov	r3, r1
 800da82:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800da84:	78fb      	ldrb	r3, [r7, #3]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d002      	beq.n	800da90 <HAL_PCDEx_LPM_Callback+0x18>
 800da8a:	2b01      	cmp	r3, #1
 800da8c:	d01f      	beq.n	800dace <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800da8e:	e03b      	b.n	800db08 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	7adb      	ldrb	r3, [r3, #11]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d007      	beq.n	800daa8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800da98:	f000 f83c 	bl	800db14 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800da9c:	4b1c      	ldr	r3, [pc, #112]	@ (800db10 <HAL_PCDEx_LPM_Callback+0x98>)
 800da9e:	691b      	ldr	r3, [r3, #16]
 800daa0:	4a1b      	ldr	r2, [pc, #108]	@ (800db10 <HAL_PCDEx_LPM_Callback+0x98>)
 800daa2:	f023 0306 	bic.w	r3, r3, #6
 800daa6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	687a      	ldr	r2, [r7, #4]
 800dab4:	6812      	ldr	r2, [r2, #0]
 800dab6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800daba:	f023 0301 	bic.w	r3, r3, #1
 800dabe:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800dac6:	4618      	mov	r0, r3
 800dac8:	f7fa feb0 	bl	800882c <USBD_LL_Resume>
    break;
 800dacc:	e01c      	b.n	800db08 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	687a      	ldr	r2, [r7, #4]
 800dada:	6812      	ldr	r2, [r2, #0]
 800dadc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800dae0:	f043 0301 	orr.w	r3, r3, #1
 800dae4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800daec:	4618      	mov	r0, r3
 800daee:	f7fa fe81 	bl	80087f4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	7adb      	ldrb	r3, [r3, #11]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d005      	beq.n	800db06 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dafa:	4b05      	ldr	r3, [pc, #20]	@ (800db10 <HAL_PCDEx_LPM_Callback+0x98>)
 800dafc:	691b      	ldr	r3, [r3, #16]
 800dafe:	4a04      	ldr	r2, [pc, #16]	@ (800db10 <HAL_PCDEx_LPM_Callback+0x98>)
 800db00:	f043 0306 	orr.w	r3, r3, #6
 800db04:	6113      	str	r3, [r2, #16]
    break;
 800db06:	bf00      	nop
}
 800db08:	bf00      	nop
 800db0a:	3708      	adds	r7, #8
 800db0c:	46bd      	mov	sp, r7
 800db0e:	bd80      	pop	{r7, pc}
 800db10:	e000ed00 	.word	0xe000ed00

0800db14 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800db14:	b580      	push	{r7, lr}
 800db16:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800db18:	f7f3 fbe0 	bl	80012dc <SystemClock_Config>
}
 800db1c:	bf00      	nop
 800db1e:	bd80      	pop	{r7, pc}

0800db20 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800db20:	b480      	push	{r7}
 800db22:	b085      	sub	sp, #20
 800db24:	af00      	add	r7, sp, #0
 800db26:	4603      	mov	r3, r0
 800db28:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db2a:	2300      	movs	r3, #0
 800db2c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800db2e:	79fb      	ldrb	r3, [r7, #7]
 800db30:	2b03      	cmp	r3, #3
 800db32:	d817      	bhi.n	800db64 <USBD_Get_USB_Status+0x44>
 800db34:	a201      	add	r2, pc, #4	@ (adr r2, 800db3c <USBD_Get_USB_Status+0x1c>)
 800db36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db3a:	bf00      	nop
 800db3c:	0800db4d 	.word	0x0800db4d
 800db40:	0800db53 	.word	0x0800db53
 800db44:	0800db59 	.word	0x0800db59
 800db48:	0800db5f 	.word	0x0800db5f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800db4c:	2300      	movs	r3, #0
 800db4e:	73fb      	strb	r3, [r7, #15]
    break;
 800db50:	e00b      	b.n	800db6a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800db52:	2303      	movs	r3, #3
 800db54:	73fb      	strb	r3, [r7, #15]
    break;
 800db56:	e008      	b.n	800db6a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800db58:	2301      	movs	r3, #1
 800db5a:	73fb      	strb	r3, [r7, #15]
    break;
 800db5c:	e005      	b.n	800db6a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800db5e:	2303      	movs	r3, #3
 800db60:	73fb      	strb	r3, [r7, #15]
    break;
 800db62:	e002      	b.n	800db6a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800db64:	2303      	movs	r3, #3
 800db66:	73fb      	strb	r3, [r7, #15]
    break;
 800db68:	bf00      	nop
  }
  return usb_status;
 800db6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800db6c:	4618      	mov	r0, r3
 800db6e:	3714      	adds	r7, #20
 800db70:	46bd      	mov	sp, r7
 800db72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db76:	4770      	bx	lr

0800db78 <malloc>:
 800db78:	4b02      	ldr	r3, [pc, #8]	@ (800db84 <malloc+0xc>)
 800db7a:	4601      	mov	r1, r0
 800db7c:	6818      	ldr	r0, [r3, #0]
 800db7e:	f000 b82d 	b.w	800dbdc <_malloc_r>
 800db82:	bf00      	nop
 800db84:	2000011c 	.word	0x2000011c

0800db88 <free>:
 800db88:	4b02      	ldr	r3, [pc, #8]	@ (800db94 <free+0xc>)
 800db8a:	4601      	mov	r1, r0
 800db8c:	6818      	ldr	r0, [r3, #0]
 800db8e:	f001 bd63 	b.w	800f658 <_free_r>
 800db92:	bf00      	nop
 800db94:	2000011c 	.word	0x2000011c

0800db98 <sbrk_aligned>:
 800db98:	b570      	push	{r4, r5, r6, lr}
 800db9a:	4e0f      	ldr	r6, [pc, #60]	@ (800dbd8 <sbrk_aligned+0x40>)
 800db9c:	460c      	mov	r4, r1
 800db9e:	6831      	ldr	r1, [r6, #0]
 800dba0:	4605      	mov	r5, r0
 800dba2:	b911      	cbnz	r1, 800dbaa <sbrk_aligned+0x12>
 800dba4:	f000 fea0 	bl	800e8e8 <_sbrk_r>
 800dba8:	6030      	str	r0, [r6, #0]
 800dbaa:	4621      	mov	r1, r4
 800dbac:	4628      	mov	r0, r5
 800dbae:	f000 fe9b 	bl	800e8e8 <_sbrk_r>
 800dbb2:	1c43      	adds	r3, r0, #1
 800dbb4:	d103      	bne.n	800dbbe <sbrk_aligned+0x26>
 800dbb6:	f04f 34ff 	mov.w	r4, #4294967295
 800dbba:	4620      	mov	r0, r4
 800dbbc:	bd70      	pop	{r4, r5, r6, pc}
 800dbbe:	1cc4      	adds	r4, r0, #3
 800dbc0:	f024 0403 	bic.w	r4, r4, #3
 800dbc4:	42a0      	cmp	r0, r4
 800dbc6:	d0f8      	beq.n	800dbba <sbrk_aligned+0x22>
 800dbc8:	1a21      	subs	r1, r4, r0
 800dbca:	4628      	mov	r0, r5
 800dbcc:	f000 fe8c 	bl	800e8e8 <_sbrk_r>
 800dbd0:	3001      	adds	r0, #1
 800dbd2:	d1f2      	bne.n	800dbba <sbrk_aligned+0x22>
 800dbd4:	e7ef      	b.n	800dbb6 <sbrk_aligned+0x1e>
 800dbd6:	bf00      	nop
 800dbd8:	2000fc1c 	.word	0x2000fc1c

0800dbdc <_malloc_r>:
 800dbdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dbe0:	1ccd      	adds	r5, r1, #3
 800dbe2:	f025 0503 	bic.w	r5, r5, #3
 800dbe6:	3508      	adds	r5, #8
 800dbe8:	2d0c      	cmp	r5, #12
 800dbea:	bf38      	it	cc
 800dbec:	250c      	movcc	r5, #12
 800dbee:	2d00      	cmp	r5, #0
 800dbf0:	4606      	mov	r6, r0
 800dbf2:	db01      	blt.n	800dbf8 <_malloc_r+0x1c>
 800dbf4:	42a9      	cmp	r1, r5
 800dbf6:	d904      	bls.n	800dc02 <_malloc_r+0x26>
 800dbf8:	230c      	movs	r3, #12
 800dbfa:	6033      	str	r3, [r6, #0]
 800dbfc:	2000      	movs	r0, #0
 800dbfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dcd8 <_malloc_r+0xfc>
 800dc06:	f000 f869 	bl	800dcdc <__malloc_lock>
 800dc0a:	f8d8 3000 	ldr.w	r3, [r8]
 800dc0e:	461c      	mov	r4, r3
 800dc10:	bb44      	cbnz	r4, 800dc64 <_malloc_r+0x88>
 800dc12:	4629      	mov	r1, r5
 800dc14:	4630      	mov	r0, r6
 800dc16:	f7ff ffbf 	bl	800db98 <sbrk_aligned>
 800dc1a:	1c43      	adds	r3, r0, #1
 800dc1c:	4604      	mov	r4, r0
 800dc1e:	d158      	bne.n	800dcd2 <_malloc_r+0xf6>
 800dc20:	f8d8 4000 	ldr.w	r4, [r8]
 800dc24:	4627      	mov	r7, r4
 800dc26:	2f00      	cmp	r7, #0
 800dc28:	d143      	bne.n	800dcb2 <_malloc_r+0xd6>
 800dc2a:	2c00      	cmp	r4, #0
 800dc2c:	d04b      	beq.n	800dcc6 <_malloc_r+0xea>
 800dc2e:	6823      	ldr	r3, [r4, #0]
 800dc30:	4639      	mov	r1, r7
 800dc32:	4630      	mov	r0, r6
 800dc34:	eb04 0903 	add.w	r9, r4, r3
 800dc38:	f000 fe56 	bl	800e8e8 <_sbrk_r>
 800dc3c:	4581      	cmp	r9, r0
 800dc3e:	d142      	bne.n	800dcc6 <_malloc_r+0xea>
 800dc40:	6821      	ldr	r1, [r4, #0]
 800dc42:	1a6d      	subs	r5, r5, r1
 800dc44:	4629      	mov	r1, r5
 800dc46:	4630      	mov	r0, r6
 800dc48:	f7ff ffa6 	bl	800db98 <sbrk_aligned>
 800dc4c:	3001      	adds	r0, #1
 800dc4e:	d03a      	beq.n	800dcc6 <_malloc_r+0xea>
 800dc50:	6823      	ldr	r3, [r4, #0]
 800dc52:	442b      	add	r3, r5
 800dc54:	6023      	str	r3, [r4, #0]
 800dc56:	f8d8 3000 	ldr.w	r3, [r8]
 800dc5a:	685a      	ldr	r2, [r3, #4]
 800dc5c:	bb62      	cbnz	r2, 800dcb8 <_malloc_r+0xdc>
 800dc5e:	f8c8 7000 	str.w	r7, [r8]
 800dc62:	e00f      	b.n	800dc84 <_malloc_r+0xa8>
 800dc64:	6822      	ldr	r2, [r4, #0]
 800dc66:	1b52      	subs	r2, r2, r5
 800dc68:	d420      	bmi.n	800dcac <_malloc_r+0xd0>
 800dc6a:	2a0b      	cmp	r2, #11
 800dc6c:	d917      	bls.n	800dc9e <_malloc_r+0xc2>
 800dc6e:	1961      	adds	r1, r4, r5
 800dc70:	42a3      	cmp	r3, r4
 800dc72:	6025      	str	r5, [r4, #0]
 800dc74:	bf18      	it	ne
 800dc76:	6059      	strne	r1, [r3, #4]
 800dc78:	6863      	ldr	r3, [r4, #4]
 800dc7a:	bf08      	it	eq
 800dc7c:	f8c8 1000 	streq.w	r1, [r8]
 800dc80:	5162      	str	r2, [r4, r5]
 800dc82:	604b      	str	r3, [r1, #4]
 800dc84:	4630      	mov	r0, r6
 800dc86:	f000 f82f 	bl	800dce8 <__malloc_unlock>
 800dc8a:	f104 000b 	add.w	r0, r4, #11
 800dc8e:	1d23      	adds	r3, r4, #4
 800dc90:	f020 0007 	bic.w	r0, r0, #7
 800dc94:	1ac2      	subs	r2, r0, r3
 800dc96:	bf1c      	itt	ne
 800dc98:	1a1b      	subne	r3, r3, r0
 800dc9a:	50a3      	strne	r3, [r4, r2]
 800dc9c:	e7af      	b.n	800dbfe <_malloc_r+0x22>
 800dc9e:	6862      	ldr	r2, [r4, #4]
 800dca0:	42a3      	cmp	r3, r4
 800dca2:	bf0c      	ite	eq
 800dca4:	f8c8 2000 	streq.w	r2, [r8]
 800dca8:	605a      	strne	r2, [r3, #4]
 800dcaa:	e7eb      	b.n	800dc84 <_malloc_r+0xa8>
 800dcac:	4623      	mov	r3, r4
 800dcae:	6864      	ldr	r4, [r4, #4]
 800dcb0:	e7ae      	b.n	800dc10 <_malloc_r+0x34>
 800dcb2:	463c      	mov	r4, r7
 800dcb4:	687f      	ldr	r7, [r7, #4]
 800dcb6:	e7b6      	b.n	800dc26 <_malloc_r+0x4a>
 800dcb8:	461a      	mov	r2, r3
 800dcba:	685b      	ldr	r3, [r3, #4]
 800dcbc:	42a3      	cmp	r3, r4
 800dcbe:	d1fb      	bne.n	800dcb8 <_malloc_r+0xdc>
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	6053      	str	r3, [r2, #4]
 800dcc4:	e7de      	b.n	800dc84 <_malloc_r+0xa8>
 800dcc6:	230c      	movs	r3, #12
 800dcc8:	6033      	str	r3, [r6, #0]
 800dcca:	4630      	mov	r0, r6
 800dccc:	f000 f80c 	bl	800dce8 <__malloc_unlock>
 800dcd0:	e794      	b.n	800dbfc <_malloc_r+0x20>
 800dcd2:	6005      	str	r5, [r0, #0]
 800dcd4:	e7d6      	b.n	800dc84 <_malloc_r+0xa8>
 800dcd6:	bf00      	nop
 800dcd8:	2000fc20 	.word	0x2000fc20

0800dcdc <__malloc_lock>:
 800dcdc:	4801      	ldr	r0, [pc, #4]	@ (800dce4 <__malloc_lock+0x8>)
 800dcde:	f000 be50 	b.w	800e982 <__retarget_lock_acquire_recursive>
 800dce2:	bf00      	nop
 800dce4:	2000fd64 	.word	0x2000fd64

0800dce8 <__malloc_unlock>:
 800dce8:	4801      	ldr	r0, [pc, #4]	@ (800dcf0 <__malloc_unlock+0x8>)
 800dcea:	f000 be4b 	b.w	800e984 <__retarget_lock_release_recursive>
 800dcee:	bf00      	nop
 800dcf0:	2000fd64 	.word	0x2000fd64

0800dcf4 <__cvt>:
 800dcf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dcf8:	ec57 6b10 	vmov	r6, r7, d0
 800dcfc:	2f00      	cmp	r7, #0
 800dcfe:	460c      	mov	r4, r1
 800dd00:	4619      	mov	r1, r3
 800dd02:	463b      	mov	r3, r7
 800dd04:	bfbb      	ittet	lt
 800dd06:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800dd0a:	461f      	movlt	r7, r3
 800dd0c:	2300      	movge	r3, #0
 800dd0e:	232d      	movlt	r3, #45	@ 0x2d
 800dd10:	700b      	strb	r3, [r1, #0]
 800dd12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dd14:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800dd18:	4691      	mov	r9, r2
 800dd1a:	f023 0820 	bic.w	r8, r3, #32
 800dd1e:	bfbc      	itt	lt
 800dd20:	4632      	movlt	r2, r6
 800dd22:	4616      	movlt	r6, r2
 800dd24:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800dd28:	d005      	beq.n	800dd36 <__cvt+0x42>
 800dd2a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800dd2e:	d100      	bne.n	800dd32 <__cvt+0x3e>
 800dd30:	3401      	adds	r4, #1
 800dd32:	2102      	movs	r1, #2
 800dd34:	e000      	b.n	800dd38 <__cvt+0x44>
 800dd36:	2103      	movs	r1, #3
 800dd38:	ab03      	add	r3, sp, #12
 800dd3a:	9301      	str	r3, [sp, #4]
 800dd3c:	ab02      	add	r3, sp, #8
 800dd3e:	9300      	str	r3, [sp, #0]
 800dd40:	ec47 6b10 	vmov	d0, r6, r7
 800dd44:	4653      	mov	r3, sl
 800dd46:	4622      	mov	r2, r4
 800dd48:	f000 feb6 	bl	800eab8 <_dtoa_r>
 800dd4c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800dd50:	4605      	mov	r5, r0
 800dd52:	d119      	bne.n	800dd88 <__cvt+0x94>
 800dd54:	f019 0f01 	tst.w	r9, #1
 800dd58:	d00e      	beq.n	800dd78 <__cvt+0x84>
 800dd5a:	eb00 0904 	add.w	r9, r0, r4
 800dd5e:	2200      	movs	r2, #0
 800dd60:	2300      	movs	r3, #0
 800dd62:	4630      	mov	r0, r6
 800dd64:	4639      	mov	r1, r7
 800dd66:	f7f2 fedf 	bl	8000b28 <__aeabi_dcmpeq>
 800dd6a:	b108      	cbz	r0, 800dd70 <__cvt+0x7c>
 800dd6c:	f8cd 900c 	str.w	r9, [sp, #12]
 800dd70:	2230      	movs	r2, #48	@ 0x30
 800dd72:	9b03      	ldr	r3, [sp, #12]
 800dd74:	454b      	cmp	r3, r9
 800dd76:	d31e      	bcc.n	800ddb6 <__cvt+0xc2>
 800dd78:	9b03      	ldr	r3, [sp, #12]
 800dd7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dd7c:	1b5b      	subs	r3, r3, r5
 800dd7e:	4628      	mov	r0, r5
 800dd80:	6013      	str	r3, [r2, #0]
 800dd82:	b004      	add	sp, #16
 800dd84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd88:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800dd8c:	eb00 0904 	add.w	r9, r0, r4
 800dd90:	d1e5      	bne.n	800dd5e <__cvt+0x6a>
 800dd92:	7803      	ldrb	r3, [r0, #0]
 800dd94:	2b30      	cmp	r3, #48	@ 0x30
 800dd96:	d10a      	bne.n	800ddae <__cvt+0xba>
 800dd98:	2200      	movs	r2, #0
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	4630      	mov	r0, r6
 800dd9e:	4639      	mov	r1, r7
 800dda0:	f7f2 fec2 	bl	8000b28 <__aeabi_dcmpeq>
 800dda4:	b918      	cbnz	r0, 800ddae <__cvt+0xba>
 800dda6:	f1c4 0401 	rsb	r4, r4, #1
 800ddaa:	f8ca 4000 	str.w	r4, [sl]
 800ddae:	f8da 3000 	ldr.w	r3, [sl]
 800ddb2:	4499      	add	r9, r3
 800ddb4:	e7d3      	b.n	800dd5e <__cvt+0x6a>
 800ddb6:	1c59      	adds	r1, r3, #1
 800ddb8:	9103      	str	r1, [sp, #12]
 800ddba:	701a      	strb	r2, [r3, #0]
 800ddbc:	e7d9      	b.n	800dd72 <__cvt+0x7e>

0800ddbe <__exponent>:
 800ddbe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ddc0:	2900      	cmp	r1, #0
 800ddc2:	bfba      	itte	lt
 800ddc4:	4249      	neglt	r1, r1
 800ddc6:	232d      	movlt	r3, #45	@ 0x2d
 800ddc8:	232b      	movge	r3, #43	@ 0x2b
 800ddca:	2909      	cmp	r1, #9
 800ddcc:	7002      	strb	r2, [r0, #0]
 800ddce:	7043      	strb	r3, [r0, #1]
 800ddd0:	dd29      	ble.n	800de26 <__exponent+0x68>
 800ddd2:	f10d 0307 	add.w	r3, sp, #7
 800ddd6:	461d      	mov	r5, r3
 800ddd8:	270a      	movs	r7, #10
 800ddda:	461a      	mov	r2, r3
 800dddc:	fbb1 f6f7 	udiv	r6, r1, r7
 800dde0:	fb07 1416 	mls	r4, r7, r6, r1
 800dde4:	3430      	adds	r4, #48	@ 0x30
 800dde6:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ddea:	460c      	mov	r4, r1
 800ddec:	2c63      	cmp	r4, #99	@ 0x63
 800ddee:	f103 33ff 	add.w	r3, r3, #4294967295
 800ddf2:	4631      	mov	r1, r6
 800ddf4:	dcf1      	bgt.n	800ddda <__exponent+0x1c>
 800ddf6:	3130      	adds	r1, #48	@ 0x30
 800ddf8:	1e94      	subs	r4, r2, #2
 800ddfa:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ddfe:	1c41      	adds	r1, r0, #1
 800de00:	4623      	mov	r3, r4
 800de02:	42ab      	cmp	r3, r5
 800de04:	d30a      	bcc.n	800de1c <__exponent+0x5e>
 800de06:	f10d 0309 	add.w	r3, sp, #9
 800de0a:	1a9b      	subs	r3, r3, r2
 800de0c:	42ac      	cmp	r4, r5
 800de0e:	bf88      	it	hi
 800de10:	2300      	movhi	r3, #0
 800de12:	3302      	adds	r3, #2
 800de14:	4403      	add	r3, r0
 800de16:	1a18      	subs	r0, r3, r0
 800de18:	b003      	add	sp, #12
 800de1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de1c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800de20:	f801 6f01 	strb.w	r6, [r1, #1]!
 800de24:	e7ed      	b.n	800de02 <__exponent+0x44>
 800de26:	2330      	movs	r3, #48	@ 0x30
 800de28:	3130      	adds	r1, #48	@ 0x30
 800de2a:	7083      	strb	r3, [r0, #2]
 800de2c:	70c1      	strb	r1, [r0, #3]
 800de2e:	1d03      	adds	r3, r0, #4
 800de30:	e7f1      	b.n	800de16 <__exponent+0x58>
	...

0800de34 <_printf_float>:
 800de34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de38:	b08d      	sub	sp, #52	@ 0x34
 800de3a:	460c      	mov	r4, r1
 800de3c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800de40:	4616      	mov	r6, r2
 800de42:	461f      	mov	r7, r3
 800de44:	4605      	mov	r5, r0
 800de46:	f000 fcb9 	bl	800e7bc <_localeconv_r>
 800de4a:	6803      	ldr	r3, [r0, #0]
 800de4c:	9304      	str	r3, [sp, #16]
 800de4e:	4618      	mov	r0, r3
 800de50:	f7f2 fa3e 	bl	80002d0 <strlen>
 800de54:	2300      	movs	r3, #0
 800de56:	930a      	str	r3, [sp, #40]	@ 0x28
 800de58:	f8d8 3000 	ldr.w	r3, [r8]
 800de5c:	9005      	str	r0, [sp, #20]
 800de5e:	3307      	adds	r3, #7
 800de60:	f023 0307 	bic.w	r3, r3, #7
 800de64:	f103 0208 	add.w	r2, r3, #8
 800de68:	f894 a018 	ldrb.w	sl, [r4, #24]
 800de6c:	f8d4 b000 	ldr.w	fp, [r4]
 800de70:	f8c8 2000 	str.w	r2, [r8]
 800de74:	e9d3 8900 	ldrd	r8, r9, [r3]
 800de78:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800de7c:	9307      	str	r3, [sp, #28]
 800de7e:	f8cd 8018 	str.w	r8, [sp, #24]
 800de82:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800de86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800de8a:	4b9c      	ldr	r3, [pc, #624]	@ (800e0fc <_printf_float+0x2c8>)
 800de8c:	f04f 32ff 	mov.w	r2, #4294967295
 800de90:	f7f2 fe7c 	bl	8000b8c <__aeabi_dcmpun>
 800de94:	bb70      	cbnz	r0, 800def4 <_printf_float+0xc0>
 800de96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800de9a:	4b98      	ldr	r3, [pc, #608]	@ (800e0fc <_printf_float+0x2c8>)
 800de9c:	f04f 32ff 	mov.w	r2, #4294967295
 800dea0:	f7f2 fe56 	bl	8000b50 <__aeabi_dcmple>
 800dea4:	bb30      	cbnz	r0, 800def4 <_printf_float+0xc0>
 800dea6:	2200      	movs	r2, #0
 800dea8:	2300      	movs	r3, #0
 800deaa:	4640      	mov	r0, r8
 800deac:	4649      	mov	r1, r9
 800deae:	f7f2 fe45 	bl	8000b3c <__aeabi_dcmplt>
 800deb2:	b110      	cbz	r0, 800deba <_printf_float+0x86>
 800deb4:	232d      	movs	r3, #45	@ 0x2d
 800deb6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800deba:	4a91      	ldr	r2, [pc, #580]	@ (800e100 <_printf_float+0x2cc>)
 800debc:	4b91      	ldr	r3, [pc, #580]	@ (800e104 <_printf_float+0x2d0>)
 800debe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800dec2:	bf8c      	ite	hi
 800dec4:	4690      	movhi	r8, r2
 800dec6:	4698      	movls	r8, r3
 800dec8:	2303      	movs	r3, #3
 800deca:	6123      	str	r3, [r4, #16]
 800decc:	f02b 0304 	bic.w	r3, fp, #4
 800ded0:	6023      	str	r3, [r4, #0]
 800ded2:	f04f 0900 	mov.w	r9, #0
 800ded6:	9700      	str	r7, [sp, #0]
 800ded8:	4633      	mov	r3, r6
 800deda:	aa0b      	add	r2, sp, #44	@ 0x2c
 800dedc:	4621      	mov	r1, r4
 800dede:	4628      	mov	r0, r5
 800dee0:	f000 f9d2 	bl	800e288 <_printf_common>
 800dee4:	3001      	adds	r0, #1
 800dee6:	f040 808d 	bne.w	800e004 <_printf_float+0x1d0>
 800deea:	f04f 30ff 	mov.w	r0, #4294967295
 800deee:	b00d      	add	sp, #52	@ 0x34
 800def0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800def4:	4642      	mov	r2, r8
 800def6:	464b      	mov	r3, r9
 800def8:	4640      	mov	r0, r8
 800defa:	4649      	mov	r1, r9
 800defc:	f7f2 fe46 	bl	8000b8c <__aeabi_dcmpun>
 800df00:	b140      	cbz	r0, 800df14 <_printf_float+0xe0>
 800df02:	464b      	mov	r3, r9
 800df04:	2b00      	cmp	r3, #0
 800df06:	bfbc      	itt	lt
 800df08:	232d      	movlt	r3, #45	@ 0x2d
 800df0a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800df0e:	4a7e      	ldr	r2, [pc, #504]	@ (800e108 <_printf_float+0x2d4>)
 800df10:	4b7e      	ldr	r3, [pc, #504]	@ (800e10c <_printf_float+0x2d8>)
 800df12:	e7d4      	b.n	800debe <_printf_float+0x8a>
 800df14:	6863      	ldr	r3, [r4, #4]
 800df16:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800df1a:	9206      	str	r2, [sp, #24]
 800df1c:	1c5a      	adds	r2, r3, #1
 800df1e:	d13b      	bne.n	800df98 <_printf_float+0x164>
 800df20:	2306      	movs	r3, #6
 800df22:	6063      	str	r3, [r4, #4]
 800df24:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800df28:	2300      	movs	r3, #0
 800df2a:	6022      	str	r2, [r4, #0]
 800df2c:	9303      	str	r3, [sp, #12]
 800df2e:	ab0a      	add	r3, sp, #40	@ 0x28
 800df30:	e9cd a301 	strd	sl, r3, [sp, #4]
 800df34:	ab09      	add	r3, sp, #36	@ 0x24
 800df36:	9300      	str	r3, [sp, #0]
 800df38:	6861      	ldr	r1, [r4, #4]
 800df3a:	ec49 8b10 	vmov	d0, r8, r9
 800df3e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800df42:	4628      	mov	r0, r5
 800df44:	f7ff fed6 	bl	800dcf4 <__cvt>
 800df48:	9b06      	ldr	r3, [sp, #24]
 800df4a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800df4c:	2b47      	cmp	r3, #71	@ 0x47
 800df4e:	4680      	mov	r8, r0
 800df50:	d129      	bne.n	800dfa6 <_printf_float+0x172>
 800df52:	1cc8      	adds	r0, r1, #3
 800df54:	db02      	blt.n	800df5c <_printf_float+0x128>
 800df56:	6863      	ldr	r3, [r4, #4]
 800df58:	4299      	cmp	r1, r3
 800df5a:	dd41      	ble.n	800dfe0 <_printf_float+0x1ac>
 800df5c:	f1aa 0a02 	sub.w	sl, sl, #2
 800df60:	fa5f fa8a 	uxtb.w	sl, sl
 800df64:	3901      	subs	r1, #1
 800df66:	4652      	mov	r2, sl
 800df68:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800df6c:	9109      	str	r1, [sp, #36]	@ 0x24
 800df6e:	f7ff ff26 	bl	800ddbe <__exponent>
 800df72:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800df74:	1813      	adds	r3, r2, r0
 800df76:	2a01      	cmp	r2, #1
 800df78:	4681      	mov	r9, r0
 800df7a:	6123      	str	r3, [r4, #16]
 800df7c:	dc02      	bgt.n	800df84 <_printf_float+0x150>
 800df7e:	6822      	ldr	r2, [r4, #0]
 800df80:	07d2      	lsls	r2, r2, #31
 800df82:	d501      	bpl.n	800df88 <_printf_float+0x154>
 800df84:	3301      	adds	r3, #1
 800df86:	6123      	str	r3, [r4, #16]
 800df88:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d0a2      	beq.n	800ded6 <_printf_float+0xa2>
 800df90:	232d      	movs	r3, #45	@ 0x2d
 800df92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800df96:	e79e      	b.n	800ded6 <_printf_float+0xa2>
 800df98:	9a06      	ldr	r2, [sp, #24]
 800df9a:	2a47      	cmp	r2, #71	@ 0x47
 800df9c:	d1c2      	bne.n	800df24 <_printf_float+0xf0>
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d1c0      	bne.n	800df24 <_printf_float+0xf0>
 800dfa2:	2301      	movs	r3, #1
 800dfa4:	e7bd      	b.n	800df22 <_printf_float+0xee>
 800dfa6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800dfaa:	d9db      	bls.n	800df64 <_printf_float+0x130>
 800dfac:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800dfb0:	d118      	bne.n	800dfe4 <_printf_float+0x1b0>
 800dfb2:	2900      	cmp	r1, #0
 800dfb4:	6863      	ldr	r3, [r4, #4]
 800dfb6:	dd0b      	ble.n	800dfd0 <_printf_float+0x19c>
 800dfb8:	6121      	str	r1, [r4, #16]
 800dfba:	b913      	cbnz	r3, 800dfc2 <_printf_float+0x18e>
 800dfbc:	6822      	ldr	r2, [r4, #0]
 800dfbe:	07d0      	lsls	r0, r2, #31
 800dfc0:	d502      	bpl.n	800dfc8 <_printf_float+0x194>
 800dfc2:	3301      	adds	r3, #1
 800dfc4:	440b      	add	r3, r1
 800dfc6:	6123      	str	r3, [r4, #16]
 800dfc8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800dfca:	f04f 0900 	mov.w	r9, #0
 800dfce:	e7db      	b.n	800df88 <_printf_float+0x154>
 800dfd0:	b913      	cbnz	r3, 800dfd8 <_printf_float+0x1a4>
 800dfd2:	6822      	ldr	r2, [r4, #0]
 800dfd4:	07d2      	lsls	r2, r2, #31
 800dfd6:	d501      	bpl.n	800dfdc <_printf_float+0x1a8>
 800dfd8:	3302      	adds	r3, #2
 800dfda:	e7f4      	b.n	800dfc6 <_printf_float+0x192>
 800dfdc:	2301      	movs	r3, #1
 800dfde:	e7f2      	b.n	800dfc6 <_printf_float+0x192>
 800dfe0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800dfe4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dfe6:	4299      	cmp	r1, r3
 800dfe8:	db05      	blt.n	800dff6 <_printf_float+0x1c2>
 800dfea:	6823      	ldr	r3, [r4, #0]
 800dfec:	6121      	str	r1, [r4, #16]
 800dfee:	07d8      	lsls	r0, r3, #31
 800dff0:	d5ea      	bpl.n	800dfc8 <_printf_float+0x194>
 800dff2:	1c4b      	adds	r3, r1, #1
 800dff4:	e7e7      	b.n	800dfc6 <_printf_float+0x192>
 800dff6:	2900      	cmp	r1, #0
 800dff8:	bfd4      	ite	le
 800dffa:	f1c1 0202 	rsble	r2, r1, #2
 800dffe:	2201      	movgt	r2, #1
 800e000:	4413      	add	r3, r2
 800e002:	e7e0      	b.n	800dfc6 <_printf_float+0x192>
 800e004:	6823      	ldr	r3, [r4, #0]
 800e006:	055a      	lsls	r2, r3, #21
 800e008:	d407      	bmi.n	800e01a <_printf_float+0x1e6>
 800e00a:	6923      	ldr	r3, [r4, #16]
 800e00c:	4642      	mov	r2, r8
 800e00e:	4631      	mov	r1, r6
 800e010:	4628      	mov	r0, r5
 800e012:	47b8      	blx	r7
 800e014:	3001      	adds	r0, #1
 800e016:	d12b      	bne.n	800e070 <_printf_float+0x23c>
 800e018:	e767      	b.n	800deea <_printf_float+0xb6>
 800e01a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e01e:	f240 80dd 	bls.w	800e1dc <_printf_float+0x3a8>
 800e022:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e026:	2200      	movs	r2, #0
 800e028:	2300      	movs	r3, #0
 800e02a:	f7f2 fd7d 	bl	8000b28 <__aeabi_dcmpeq>
 800e02e:	2800      	cmp	r0, #0
 800e030:	d033      	beq.n	800e09a <_printf_float+0x266>
 800e032:	4a37      	ldr	r2, [pc, #220]	@ (800e110 <_printf_float+0x2dc>)
 800e034:	2301      	movs	r3, #1
 800e036:	4631      	mov	r1, r6
 800e038:	4628      	mov	r0, r5
 800e03a:	47b8      	blx	r7
 800e03c:	3001      	adds	r0, #1
 800e03e:	f43f af54 	beq.w	800deea <_printf_float+0xb6>
 800e042:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e046:	4543      	cmp	r3, r8
 800e048:	db02      	blt.n	800e050 <_printf_float+0x21c>
 800e04a:	6823      	ldr	r3, [r4, #0]
 800e04c:	07d8      	lsls	r0, r3, #31
 800e04e:	d50f      	bpl.n	800e070 <_printf_float+0x23c>
 800e050:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e054:	4631      	mov	r1, r6
 800e056:	4628      	mov	r0, r5
 800e058:	47b8      	blx	r7
 800e05a:	3001      	adds	r0, #1
 800e05c:	f43f af45 	beq.w	800deea <_printf_float+0xb6>
 800e060:	f04f 0900 	mov.w	r9, #0
 800e064:	f108 38ff 	add.w	r8, r8, #4294967295
 800e068:	f104 0a1a 	add.w	sl, r4, #26
 800e06c:	45c8      	cmp	r8, r9
 800e06e:	dc09      	bgt.n	800e084 <_printf_float+0x250>
 800e070:	6823      	ldr	r3, [r4, #0]
 800e072:	079b      	lsls	r3, r3, #30
 800e074:	f100 8103 	bmi.w	800e27e <_printf_float+0x44a>
 800e078:	68e0      	ldr	r0, [r4, #12]
 800e07a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e07c:	4298      	cmp	r0, r3
 800e07e:	bfb8      	it	lt
 800e080:	4618      	movlt	r0, r3
 800e082:	e734      	b.n	800deee <_printf_float+0xba>
 800e084:	2301      	movs	r3, #1
 800e086:	4652      	mov	r2, sl
 800e088:	4631      	mov	r1, r6
 800e08a:	4628      	mov	r0, r5
 800e08c:	47b8      	blx	r7
 800e08e:	3001      	adds	r0, #1
 800e090:	f43f af2b 	beq.w	800deea <_printf_float+0xb6>
 800e094:	f109 0901 	add.w	r9, r9, #1
 800e098:	e7e8      	b.n	800e06c <_printf_float+0x238>
 800e09a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	dc39      	bgt.n	800e114 <_printf_float+0x2e0>
 800e0a0:	4a1b      	ldr	r2, [pc, #108]	@ (800e110 <_printf_float+0x2dc>)
 800e0a2:	2301      	movs	r3, #1
 800e0a4:	4631      	mov	r1, r6
 800e0a6:	4628      	mov	r0, r5
 800e0a8:	47b8      	blx	r7
 800e0aa:	3001      	adds	r0, #1
 800e0ac:	f43f af1d 	beq.w	800deea <_printf_float+0xb6>
 800e0b0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e0b4:	ea59 0303 	orrs.w	r3, r9, r3
 800e0b8:	d102      	bne.n	800e0c0 <_printf_float+0x28c>
 800e0ba:	6823      	ldr	r3, [r4, #0]
 800e0bc:	07d9      	lsls	r1, r3, #31
 800e0be:	d5d7      	bpl.n	800e070 <_printf_float+0x23c>
 800e0c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e0c4:	4631      	mov	r1, r6
 800e0c6:	4628      	mov	r0, r5
 800e0c8:	47b8      	blx	r7
 800e0ca:	3001      	adds	r0, #1
 800e0cc:	f43f af0d 	beq.w	800deea <_printf_float+0xb6>
 800e0d0:	f04f 0a00 	mov.w	sl, #0
 800e0d4:	f104 0b1a 	add.w	fp, r4, #26
 800e0d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0da:	425b      	negs	r3, r3
 800e0dc:	4553      	cmp	r3, sl
 800e0de:	dc01      	bgt.n	800e0e4 <_printf_float+0x2b0>
 800e0e0:	464b      	mov	r3, r9
 800e0e2:	e793      	b.n	800e00c <_printf_float+0x1d8>
 800e0e4:	2301      	movs	r3, #1
 800e0e6:	465a      	mov	r2, fp
 800e0e8:	4631      	mov	r1, r6
 800e0ea:	4628      	mov	r0, r5
 800e0ec:	47b8      	blx	r7
 800e0ee:	3001      	adds	r0, #1
 800e0f0:	f43f aefb 	beq.w	800deea <_printf_float+0xb6>
 800e0f4:	f10a 0a01 	add.w	sl, sl, #1
 800e0f8:	e7ee      	b.n	800e0d8 <_printf_float+0x2a4>
 800e0fa:	bf00      	nop
 800e0fc:	7fefffff 	.word	0x7fefffff
 800e100:	08010664 	.word	0x08010664
 800e104:	08010660 	.word	0x08010660
 800e108:	0801066c 	.word	0x0801066c
 800e10c:	08010668 	.word	0x08010668
 800e110:	08010670 	.word	0x08010670
 800e114:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e116:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e11a:	4553      	cmp	r3, sl
 800e11c:	bfa8      	it	ge
 800e11e:	4653      	movge	r3, sl
 800e120:	2b00      	cmp	r3, #0
 800e122:	4699      	mov	r9, r3
 800e124:	dc36      	bgt.n	800e194 <_printf_float+0x360>
 800e126:	f04f 0b00 	mov.w	fp, #0
 800e12a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e12e:	f104 021a 	add.w	r2, r4, #26
 800e132:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e134:	9306      	str	r3, [sp, #24]
 800e136:	eba3 0309 	sub.w	r3, r3, r9
 800e13a:	455b      	cmp	r3, fp
 800e13c:	dc31      	bgt.n	800e1a2 <_printf_float+0x36e>
 800e13e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e140:	459a      	cmp	sl, r3
 800e142:	dc3a      	bgt.n	800e1ba <_printf_float+0x386>
 800e144:	6823      	ldr	r3, [r4, #0]
 800e146:	07da      	lsls	r2, r3, #31
 800e148:	d437      	bmi.n	800e1ba <_printf_float+0x386>
 800e14a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e14c:	ebaa 0903 	sub.w	r9, sl, r3
 800e150:	9b06      	ldr	r3, [sp, #24]
 800e152:	ebaa 0303 	sub.w	r3, sl, r3
 800e156:	4599      	cmp	r9, r3
 800e158:	bfa8      	it	ge
 800e15a:	4699      	movge	r9, r3
 800e15c:	f1b9 0f00 	cmp.w	r9, #0
 800e160:	dc33      	bgt.n	800e1ca <_printf_float+0x396>
 800e162:	f04f 0800 	mov.w	r8, #0
 800e166:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e16a:	f104 0b1a 	add.w	fp, r4, #26
 800e16e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e170:	ebaa 0303 	sub.w	r3, sl, r3
 800e174:	eba3 0309 	sub.w	r3, r3, r9
 800e178:	4543      	cmp	r3, r8
 800e17a:	f77f af79 	ble.w	800e070 <_printf_float+0x23c>
 800e17e:	2301      	movs	r3, #1
 800e180:	465a      	mov	r2, fp
 800e182:	4631      	mov	r1, r6
 800e184:	4628      	mov	r0, r5
 800e186:	47b8      	blx	r7
 800e188:	3001      	adds	r0, #1
 800e18a:	f43f aeae 	beq.w	800deea <_printf_float+0xb6>
 800e18e:	f108 0801 	add.w	r8, r8, #1
 800e192:	e7ec      	b.n	800e16e <_printf_float+0x33a>
 800e194:	4642      	mov	r2, r8
 800e196:	4631      	mov	r1, r6
 800e198:	4628      	mov	r0, r5
 800e19a:	47b8      	blx	r7
 800e19c:	3001      	adds	r0, #1
 800e19e:	d1c2      	bne.n	800e126 <_printf_float+0x2f2>
 800e1a0:	e6a3      	b.n	800deea <_printf_float+0xb6>
 800e1a2:	2301      	movs	r3, #1
 800e1a4:	4631      	mov	r1, r6
 800e1a6:	4628      	mov	r0, r5
 800e1a8:	9206      	str	r2, [sp, #24]
 800e1aa:	47b8      	blx	r7
 800e1ac:	3001      	adds	r0, #1
 800e1ae:	f43f ae9c 	beq.w	800deea <_printf_float+0xb6>
 800e1b2:	9a06      	ldr	r2, [sp, #24]
 800e1b4:	f10b 0b01 	add.w	fp, fp, #1
 800e1b8:	e7bb      	b.n	800e132 <_printf_float+0x2fe>
 800e1ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e1be:	4631      	mov	r1, r6
 800e1c0:	4628      	mov	r0, r5
 800e1c2:	47b8      	blx	r7
 800e1c4:	3001      	adds	r0, #1
 800e1c6:	d1c0      	bne.n	800e14a <_printf_float+0x316>
 800e1c8:	e68f      	b.n	800deea <_printf_float+0xb6>
 800e1ca:	9a06      	ldr	r2, [sp, #24]
 800e1cc:	464b      	mov	r3, r9
 800e1ce:	4442      	add	r2, r8
 800e1d0:	4631      	mov	r1, r6
 800e1d2:	4628      	mov	r0, r5
 800e1d4:	47b8      	blx	r7
 800e1d6:	3001      	adds	r0, #1
 800e1d8:	d1c3      	bne.n	800e162 <_printf_float+0x32e>
 800e1da:	e686      	b.n	800deea <_printf_float+0xb6>
 800e1dc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e1e0:	f1ba 0f01 	cmp.w	sl, #1
 800e1e4:	dc01      	bgt.n	800e1ea <_printf_float+0x3b6>
 800e1e6:	07db      	lsls	r3, r3, #31
 800e1e8:	d536      	bpl.n	800e258 <_printf_float+0x424>
 800e1ea:	2301      	movs	r3, #1
 800e1ec:	4642      	mov	r2, r8
 800e1ee:	4631      	mov	r1, r6
 800e1f0:	4628      	mov	r0, r5
 800e1f2:	47b8      	blx	r7
 800e1f4:	3001      	adds	r0, #1
 800e1f6:	f43f ae78 	beq.w	800deea <_printf_float+0xb6>
 800e1fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e1fe:	4631      	mov	r1, r6
 800e200:	4628      	mov	r0, r5
 800e202:	47b8      	blx	r7
 800e204:	3001      	adds	r0, #1
 800e206:	f43f ae70 	beq.w	800deea <_printf_float+0xb6>
 800e20a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e20e:	2200      	movs	r2, #0
 800e210:	2300      	movs	r3, #0
 800e212:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e216:	f7f2 fc87 	bl	8000b28 <__aeabi_dcmpeq>
 800e21a:	b9c0      	cbnz	r0, 800e24e <_printf_float+0x41a>
 800e21c:	4653      	mov	r3, sl
 800e21e:	f108 0201 	add.w	r2, r8, #1
 800e222:	4631      	mov	r1, r6
 800e224:	4628      	mov	r0, r5
 800e226:	47b8      	blx	r7
 800e228:	3001      	adds	r0, #1
 800e22a:	d10c      	bne.n	800e246 <_printf_float+0x412>
 800e22c:	e65d      	b.n	800deea <_printf_float+0xb6>
 800e22e:	2301      	movs	r3, #1
 800e230:	465a      	mov	r2, fp
 800e232:	4631      	mov	r1, r6
 800e234:	4628      	mov	r0, r5
 800e236:	47b8      	blx	r7
 800e238:	3001      	adds	r0, #1
 800e23a:	f43f ae56 	beq.w	800deea <_printf_float+0xb6>
 800e23e:	f108 0801 	add.w	r8, r8, #1
 800e242:	45d0      	cmp	r8, sl
 800e244:	dbf3      	blt.n	800e22e <_printf_float+0x3fa>
 800e246:	464b      	mov	r3, r9
 800e248:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e24c:	e6df      	b.n	800e00e <_printf_float+0x1da>
 800e24e:	f04f 0800 	mov.w	r8, #0
 800e252:	f104 0b1a 	add.w	fp, r4, #26
 800e256:	e7f4      	b.n	800e242 <_printf_float+0x40e>
 800e258:	2301      	movs	r3, #1
 800e25a:	4642      	mov	r2, r8
 800e25c:	e7e1      	b.n	800e222 <_printf_float+0x3ee>
 800e25e:	2301      	movs	r3, #1
 800e260:	464a      	mov	r2, r9
 800e262:	4631      	mov	r1, r6
 800e264:	4628      	mov	r0, r5
 800e266:	47b8      	blx	r7
 800e268:	3001      	adds	r0, #1
 800e26a:	f43f ae3e 	beq.w	800deea <_printf_float+0xb6>
 800e26e:	f108 0801 	add.w	r8, r8, #1
 800e272:	68e3      	ldr	r3, [r4, #12]
 800e274:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e276:	1a5b      	subs	r3, r3, r1
 800e278:	4543      	cmp	r3, r8
 800e27a:	dcf0      	bgt.n	800e25e <_printf_float+0x42a>
 800e27c:	e6fc      	b.n	800e078 <_printf_float+0x244>
 800e27e:	f04f 0800 	mov.w	r8, #0
 800e282:	f104 0919 	add.w	r9, r4, #25
 800e286:	e7f4      	b.n	800e272 <_printf_float+0x43e>

0800e288 <_printf_common>:
 800e288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e28c:	4616      	mov	r6, r2
 800e28e:	4698      	mov	r8, r3
 800e290:	688a      	ldr	r2, [r1, #8]
 800e292:	690b      	ldr	r3, [r1, #16]
 800e294:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e298:	4293      	cmp	r3, r2
 800e29a:	bfb8      	it	lt
 800e29c:	4613      	movlt	r3, r2
 800e29e:	6033      	str	r3, [r6, #0]
 800e2a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e2a4:	4607      	mov	r7, r0
 800e2a6:	460c      	mov	r4, r1
 800e2a8:	b10a      	cbz	r2, 800e2ae <_printf_common+0x26>
 800e2aa:	3301      	adds	r3, #1
 800e2ac:	6033      	str	r3, [r6, #0]
 800e2ae:	6823      	ldr	r3, [r4, #0]
 800e2b0:	0699      	lsls	r1, r3, #26
 800e2b2:	bf42      	ittt	mi
 800e2b4:	6833      	ldrmi	r3, [r6, #0]
 800e2b6:	3302      	addmi	r3, #2
 800e2b8:	6033      	strmi	r3, [r6, #0]
 800e2ba:	6825      	ldr	r5, [r4, #0]
 800e2bc:	f015 0506 	ands.w	r5, r5, #6
 800e2c0:	d106      	bne.n	800e2d0 <_printf_common+0x48>
 800e2c2:	f104 0a19 	add.w	sl, r4, #25
 800e2c6:	68e3      	ldr	r3, [r4, #12]
 800e2c8:	6832      	ldr	r2, [r6, #0]
 800e2ca:	1a9b      	subs	r3, r3, r2
 800e2cc:	42ab      	cmp	r3, r5
 800e2ce:	dc26      	bgt.n	800e31e <_printf_common+0x96>
 800e2d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e2d4:	6822      	ldr	r2, [r4, #0]
 800e2d6:	3b00      	subs	r3, #0
 800e2d8:	bf18      	it	ne
 800e2da:	2301      	movne	r3, #1
 800e2dc:	0692      	lsls	r2, r2, #26
 800e2de:	d42b      	bmi.n	800e338 <_printf_common+0xb0>
 800e2e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e2e4:	4641      	mov	r1, r8
 800e2e6:	4638      	mov	r0, r7
 800e2e8:	47c8      	blx	r9
 800e2ea:	3001      	adds	r0, #1
 800e2ec:	d01e      	beq.n	800e32c <_printf_common+0xa4>
 800e2ee:	6823      	ldr	r3, [r4, #0]
 800e2f0:	6922      	ldr	r2, [r4, #16]
 800e2f2:	f003 0306 	and.w	r3, r3, #6
 800e2f6:	2b04      	cmp	r3, #4
 800e2f8:	bf02      	ittt	eq
 800e2fa:	68e5      	ldreq	r5, [r4, #12]
 800e2fc:	6833      	ldreq	r3, [r6, #0]
 800e2fe:	1aed      	subeq	r5, r5, r3
 800e300:	68a3      	ldr	r3, [r4, #8]
 800e302:	bf0c      	ite	eq
 800e304:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e308:	2500      	movne	r5, #0
 800e30a:	4293      	cmp	r3, r2
 800e30c:	bfc4      	itt	gt
 800e30e:	1a9b      	subgt	r3, r3, r2
 800e310:	18ed      	addgt	r5, r5, r3
 800e312:	2600      	movs	r6, #0
 800e314:	341a      	adds	r4, #26
 800e316:	42b5      	cmp	r5, r6
 800e318:	d11a      	bne.n	800e350 <_printf_common+0xc8>
 800e31a:	2000      	movs	r0, #0
 800e31c:	e008      	b.n	800e330 <_printf_common+0xa8>
 800e31e:	2301      	movs	r3, #1
 800e320:	4652      	mov	r2, sl
 800e322:	4641      	mov	r1, r8
 800e324:	4638      	mov	r0, r7
 800e326:	47c8      	blx	r9
 800e328:	3001      	adds	r0, #1
 800e32a:	d103      	bne.n	800e334 <_printf_common+0xac>
 800e32c:	f04f 30ff 	mov.w	r0, #4294967295
 800e330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e334:	3501      	adds	r5, #1
 800e336:	e7c6      	b.n	800e2c6 <_printf_common+0x3e>
 800e338:	18e1      	adds	r1, r4, r3
 800e33a:	1c5a      	adds	r2, r3, #1
 800e33c:	2030      	movs	r0, #48	@ 0x30
 800e33e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e342:	4422      	add	r2, r4
 800e344:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e348:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e34c:	3302      	adds	r3, #2
 800e34e:	e7c7      	b.n	800e2e0 <_printf_common+0x58>
 800e350:	2301      	movs	r3, #1
 800e352:	4622      	mov	r2, r4
 800e354:	4641      	mov	r1, r8
 800e356:	4638      	mov	r0, r7
 800e358:	47c8      	blx	r9
 800e35a:	3001      	adds	r0, #1
 800e35c:	d0e6      	beq.n	800e32c <_printf_common+0xa4>
 800e35e:	3601      	adds	r6, #1
 800e360:	e7d9      	b.n	800e316 <_printf_common+0x8e>
	...

0800e364 <_printf_i>:
 800e364:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e368:	7e0f      	ldrb	r7, [r1, #24]
 800e36a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e36c:	2f78      	cmp	r7, #120	@ 0x78
 800e36e:	4691      	mov	r9, r2
 800e370:	4680      	mov	r8, r0
 800e372:	460c      	mov	r4, r1
 800e374:	469a      	mov	sl, r3
 800e376:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e37a:	d807      	bhi.n	800e38c <_printf_i+0x28>
 800e37c:	2f62      	cmp	r7, #98	@ 0x62
 800e37e:	d80a      	bhi.n	800e396 <_printf_i+0x32>
 800e380:	2f00      	cmp	r7, #0
 800e382:	f000 80d1 	beq.w	800e528 <_printf_i+0x1c4>
 800e386:	2f58      	cmp	r7, #88	@ 0x58
 800e388:	f000 80b8 	beq.w	800e4fc <_printf_i+0x198>
 800e38c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e390:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e394:	e03a      	b.n	800e40c <_printf_i+0xa8>
 800e396:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e39a:	2b15      	cmp	r3, #21
 800e39c:	d8f6      	bhi.n	800e38c <_printf_i+0x28>
 800e39e:	a101      	add	r1, pc, #4	@ (adr r1, 800e3a4 <_printf_i+0x40>)
 800e3a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e3a4:	0800e3fd 	.word	0x0800e3fd
 800e3a8:	0800e411 	.word	0x0800e411
 800e3ac:	0800e38d 	.word	0x0800e38d
 800e3b0:	0800e38d 	.word	0x0800e38d
 800e3b4:	0800e38d 	.word	0x0800e38d
 800e3b8:	0800e38d 	.word	0x0800e38d
 800e3bc:	0800e411 	.word	0x0800e411
 800e3c0:	0800e38d 	.word	0x0800e38d
 800e3c4:	0800e38d 	.word	0x0800e38d
 800e3c8:	0800e38d 	.word	0x0800e38d
 800e3cc:	0800e38d 	.word	0x0800e38d
 800e3d0:	0800e50f 	.word	0x0800e50f
 800e3d4:	0800e43b 	.word	0x0800e43b
 800e3d8:	0800e4c9 	.word	0x0800e4c9
 800e3dc:	0800e38d 	.word	0x0800e38d
 800e3e0:	0800e38d 	.word	0x0800e38d
 800e3e4:	0800e531 	.word	0x0800e531
 800e3e8:	0800e38d 	.word	0x0800e38d
 800e3ec:	0800e43b 	.word	0x0800e43b
 800e3f0:	0800e38d 	.word	0x0800e38d
 800e3f4:	0800e38d 	.word	0x0800e38d
 800e3f8:	0800e4d1 	.word	0x0800e4d1
 800e3fc:	6833      	ldr	r3, [r6, #0]
 800e3fe:	1d1a      	adds	r2, r3, #4
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	6032      	str	r2, [r6, #0]
 800e404:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e408:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e40c:	2301      	movs	r3, #1
 800e40e:	e09c      	b.n	800e54a <_printf_i+0x1e6>
 800e410:	6833      	ldr	r3, [r6, #0]
 800e412:	6820      	ldr	r0, [r4, #0]
 800e414:	1d19      	adds	r1, r3, #4
 800e416:	6031      	str	r1, [r6, #0]
 800e418:	0606      	lsls	r6, r0, #24
 800e41a:	d501      	bpl.n	800e420 <_printf_i+0xbc>
 800e41c:	681d      	ldr	r5, [r3, #0]
 800e41e:	e003      	b.n	800e428 <_printf_i+0xc4>
 800e420:	0645      	lsls	r5, r0, #25
 800e422:	d5fb      	bpl.n	800e41c <_printf_i+0xb8>
 800e424:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e428:	2d00      	cmp	r5, #0
 800e42a:	da03      	bge.n	800e434 <_printf_i+0xd0>
 800e42c:	232d      	movs	r3, #45	@ 0x2d
 800e42e:	426d      	negs	r5, r5
 800e430:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e434:	4858      	ldr	r0, [pc, #352]	@ (800e598 <_printf_i+0x234>)
 800e436:	230a      	movs	r3, #10
 800e438:	e011      	b.n	800e45e <_printf_i+0xfa>
 800e43a:	6821      	ldr	r1, [r4, #0]
 800e43c:	6833      	ldr	r3, [r6, #0]
 800e43e:	0608      	lsls	r0, r1, #24
 800e440:	f853 5b04 	ldr.w	r5, [r3], #4
 800e444:	d402      	bmi.n	800e44c <_printf_i+0xe8>
 800e446:	0649      	lsls	r1, r1, #25
 800e448:	bf48      	it	mi
 800e44a:	b2ad      	uxthmi	r5, r5
 800e44c:	2f6f      	cmp	r7, #111	@ 0x6f
 800e44e:	4852      	ldr	r0, [pc, #328]	@ (800e598 <_printf_i+0x234>)
 800e450:	6033      	str	r3, [r6, #0]
 800e452:	bf14      	ite	ne
 800e454:	230a      	movne	r3, #10
 800e456:	2308      	moveq	r3, #8
 800e458:	2100      	movs	r1, #0
 800e45a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e45e:	6866      	ldr	r6, [r4, #4]
 800e460:	60a6      	str	r6, [r4, #8]
 800e462:	2e00      	cmp	r6, #0
 800e464:	db05      	blt.n	800e472 <_printf_i+0x10e>
 800e466:	6821      	ldr	r1, [r4, #0]
 800e468:	432e      	orrs	r6, r5
 800e46a:	f021 0104 	bic.w	r1, r1, #4
 800e46e:	6021      	str	r1, [r4, #0]
 800e470:	d04b      	beq.n	800e50a <_printf_i+0x1a6>
 800e472:	4616      	mov	r6, r2
 800e474:	fbb5 f1f3 	udiv	r1, r5, r3
 800e478:	fb03 5711 	mls	r7, r3, r1, r5
 800e47c:	5dc7      	ldrb	r7, [r0, r7]
 800e47e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e482:	462f      	mov	r7, r5
 800e484:	42bb      	cmp	r3, r7
 800e486:	460d      	mov	r5, r1
 800e488:	d9f4      	bls.n	800e474 <_printf_i+0x110>
 800e48a:	2b08      	cmp	r3, #8
 800e48c:	d10b      	bne.n	800e4a6 <_printf_i+0x142>
 800e48e:	6823      	ldr	r3, [r4, #0]
 800e490:	07df      	lsls	r7, r3, #31
 800e492:	d508      	bpl.n	800e4a6 <_printf_i+0x142>
 800e494:	6923      	ldr	r3, [r4, #16]
 800e496:	6861      	ldr	r1, [r4, #4]
 800e498:	4299      	cmp	r1, r3
 800e49a:	bfde      	ittt	le
 800e49c:	2330      	movle	r3, #48	@ 0x30
 800e49e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e4a2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e4a6:	1b92      	subs	r2, r2, r6
 800e4a8:	6122      	str	r2, [r4, #16]
 800e4aa:	f8cd a000 	str.w	sl, [sp]
 800e4ae:	464b      	mov	r3, r9
 800e4b0:	aa03      	add	r2, sp, #12
 800e4b2:	4621      	mov	r1, r4
 800e4b4:	4640      	mov	r0, r8
 800e4b6:	f7ff fee7 	bl	800e288 <_printf_common>
 800e4ba:	3001      	adds	r0, #1
 800e4bc:	d14a      	bne.n	800e554 <_printf_i+0x1f0>
 800e4be:	f04f 30ff 	mov.w	r0, #4294967295
 800e4c2:	b004      	add	sp, #16
 800e4c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4c8:	6823      	ldr	r3, [r4, #0]
 800e4ca:	f043 0320 	orr.w	r3, r3, #32
 800e4ce:	6023      	str	r3, [r4, #0]
 800e4d0:	4832      	ldr	r0, [pc, #200]	@ (800e59c <_printf_i+0x238>)
 800e4d2:	2778      	movs	r7, #120	@ 0x78
 800e4d4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e4d8:	6823      	ldr	r3, [r4, #0]
 800e4da:	6831      	ldr	r1, [r6, #0]
 800e4dc:	061f      	lsls	r7, r3, #24
 800e4de:	f851 5b04 	ldr.w	r5, [r1], #4
 800e4e2:	d402      	bmi.n	800e4ea <_printf_i+0x186>
 800e4e4:	065f      	lsls	r7, r3, #25
 800e4e6:	bf48      	it	mi
 800e4e8:	b2ad      	uxthmi	r5, r5
 800e4ea:	6031      	str	r1, [r6, #0]
 800e4ec:	07d9      	lsls	r1, r3, #31
 800e4ee:	bf44      	itt	mi
 800e4f0:	f043 0320 	orrmi.w	r3, r3, #32
 800e4f4:	6023      	strmi	r3, [r4, #0]
 800e4f6:	b11d      	cbz	r5, 800e500 <_printf_i+0x19c>
 800e4f8:	2310      	movs	r3, #16
 800e4fa:	e7ad      	b.n	800e458 <_printf_i+0xf4>
 800e4fc:	4826      	ldr	r0, [pc, #152]	@ (800e598 <_printf_i+0x234>)
 800e4fe:	e7e9      	b.n	800e4d4 <_printf_i+0x170>
 800e500:	6823      	ldr	r3, [r4, #0]
 800e502:	f023 0320 	bic.w	r3, r3, #32
 800e506:	6023      	str	r3, [r4, #0]
 800e508:	e7f6      	b.n	800e4f8 <_printf_i+0x194>
 800e50a:	4616      	mov	r6, r2
 800e50c:	e7bd      	b.n	800e48a <_printf_i+0x126>
 800e50e:	6833      	ldr	r3, [r6, #0]
 800e510:	6825      	ldr	r5, [r4, #0]
 800e512:	6961      	ldr	r1, [r4, #20]
 800e514:	1d18      	adds	r0, r3, #4
 800e516:	6030      	str	r0, [r6, #0]
 800e518:	062e      	lsls	r6, r5, #24
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	d501      	bpl.n	800e522 <_printf_i+0x1be>
 800e51e:	6019      	str	r1, [r3, #0]
 800e520:	e002      	b.n	800e528 <_printf_i+0x1c4>
 800e522:	0668      	lsls	r0, r5, #25
 800e524:	d5fb      	bpl.n	800e51e <_printf_i+0x1ba>
 800e526:	8019      	strh	r1, [r3, #0]
 800e528:	2300      	movs	r3, #0
 800e52a:	6123      	str	r3, [r4, #16]
 800e52c:	4616      	mov	r6, r2
 800e52e:	e7bc      	b.n	800e4aa <_printf_i+0x146>
 800e530:	6833      	ldr	r3, [r6, #0]
 800e532:	1d1a      	adds	r2, r3, #4
 800e534:	6032      	str	r2, [r6, #0]
 800e536:	681e      	ldr	r6, [r3, #0]
 800e538:	6862      	ldr	r2, [r4, #4]
 800e53a:	2100      	movs	r1, #0
 800e53c:	4630      	mov	r0, r6
 800e53e:	f7f1 fe77 	bl	8000230 <memchr>
 800e542:	b108      	cbz	r0, 800e548 <_printf_i+0x1e4>
 800e544:	1b80      	subs	r0, r0, r6
 800e546:	6060      	str	r0, [r4, #4]
 800e548:	6863      	ldr	r3, [r4, #4]
 800e54a:	6123      	str	r3, [r4, #16]
 800e54c:	2300      	movs	r3, #0
 800e54e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e552:	e7aa      	b.n	800e4aa <_printf_i+0x146>
 800e554:	6923      	ldr	r3, [r4, #16]
 800e556:	4632      	mov	r2, r6
 800e558:	4649      	mov	r1, r9
 800e55a:	4640      	mov	r0, r8
 800e55c:	47d0      	blx	sl
 800e55e:	3001      	adds	r0, #1
 800e560:	d0ad      	beq.n	800e4be <_printf_i+0x15a>
 800e562:	6823      	ldr	r3, [r4, #0]
 800e564:	079b      	lsls	r3, r3, #30
 800e566:	d413      	bmi.n	800e590 <_printf_i+0x22c>
 800e568:	68e0      	ldr	r0, [r4, #12]
 800e56a:	9b03      	ldr	r3, [sp, #12]
 800e56c:	4298      	cmp	r0, r3
 800e56e:	bfb8      	it	lt
 800e570:	4618      	movlt	r0, r3
 800e572:	e7a6      	b.n	800e4c2 <_printf_i+0x15e>
 800e574:	2301      	movs	r3, #1
 800e576:	4632      	mov	r2, r6
 800e578:	4649      	mov	r1, r9
 800e57a:	4640      	mov	r0, r8
 800e57c:	47d0      	blx	sl
 800e57e:	3001      	adds	r0, #1
 800e580:	d09d      	beq.n	800e4be <_printf_i+0x15a>
 800e582:	3501      	adds	r5, #1
 800e584:	68e3      	ldr	r3, [r4, #12]
 800e586:	9903      	ldr	r1, [sp, #12]
 800e588:	1a5b      	subs	r3, r3, r1
 800e58a:	42ab      	cmp	r3, r5
 800e58c:	dcf2      	bgt.n	800e574 <_printf_i+0x210>
 800e58e:	e7eb      	b.n	800e568 <_printf_i+0x204>
 800e590:	2500      	movs	r5, #0
 800e592:	f104 0619 	add.w	r6, r4, #25
 800e596:	e7f5      	b.n	800e584 <_printf_i+0x220>
 800e598:	08010672 	.word	0x08010672
 800e59c:	08010683 	.word	0x08010683

0800e5a0 <std>:
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	b510      	push	{r4, lr}
 800e5a4:	4604      	mov	r4, r0
 800e5a6:	e9c0 3300 	strd	r3, r3, [r0]
 800e5aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e5ae:	6083      	str	r3, [r0, #8]
 800e5b0:	8181      	strh	r1, [r0, #12]
 800e5b2:	6643      	str	r3, [r0, #100]	@ 0x64
 800e5b4:	81c2      	strh	r2, [r0, #14]
 800e5b6:	6183      	str	r3, [r0, #24]
 800e5b8:	4619      	mov	r1, r3
 800e5ba:	2208      	movs	r2, #8
 800e5bc:	305c      	adds	r0, #92	@ 0x5c
 800e5be:	f000 f8f4 	bl	800e7aa <memset>
 800e5c2:	4b0d      	ldr	r3, [pc, #52]	@ (800e5f8 <std+0x58>)
 800e5c4:	6263      	str	r3, [r4, #36]	@ 0x24
 800e5c6:	4b0d      	ldr	r3, [pc, #52]	@ (800e5fc <std+0x5c>)
 800e5c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e5ca:	4b0d      	ldr	r3, [pc, #52]	@ (800e600 <std+0x60>)
 800e5cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e5ce:	4b0d      	ldr	r3, [pc, #52]	@ (800e604 <std+0x64>)
 800e5d0:	6323      	str	r3, [r4, #48]	@ 0x30
 800e5d2:	4b0d      	ldr	r3, [pc, #52]	@ (800e608 <std+0x68>)
 800e5d4:	6224      	str	r4, [r4, #32]
 800e5d6:	429c      	cmp	r4, r3
 800e5d8:	d006      	beq.n	800e5e8 <std+0x48>
 800e5da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e5de:	4294      	cmp	r4, r2
 800e5e0:	d002      	beq.n	800e5e8 <std+0x48>
 800e5e2:	33d0      	adds	r3, #208	@ 0xd0
 800e5e4:	429c      	cmp	r4, r3
 800e5e6:	d105      	bne.n	800e5f4 <std+0x54>
 800e5e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e5ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e5f0:	f000 b9c6 	b.w	800e980 <__retarget_lock_init_recursive>
 800e5f4:	bd10      	pop	{r4, pc}
 800e5f6:	bf00      	nop
 800e5f8:	0800e725 	.word	0x0800e725
 800e5fc:	0800e747 	.word	0x0800e747
 800e600:	0800e77f 	.word	0x0800e77f
 800e604:	0800e7a3 	.word	0x0800e7a3
 800e608:	2000fc24 	.word	0x2000fc24

0800e60c <stdio_exit_handler>:
 800e60c:	4a02      	ldr	r2, [pc, #8]	@ (800e618 <stdio_exit_handler+0xc>)
 800e60e:	4903      	ldr	r1, [pc, #12]	@ (800e61c <stdio_exit_handler+0x10>)
 800e610:	4803      	ldr	r0, [pc, #12]	@ (800e620 <stdio_exit_handler+0x14>)
 800e612:	f000 b869 	b.w	800e6e8 <_fwalk_sglue>
 800e616:	bf00      	nop
 800e618:	20000110 	.word	0x20000110
 800e61c:	0800fee9 	.word	0x0800fee9
 800e620:	20000120 	.word	0x20000120

0800e624 <cleanup_stdio>:
 800e624:	6841      	ldr	r1, [r0, #4]
 800e626:	4b0c      	ldr	r3, [pc, #48]	@ (800e658 <cleanup_stdio+0x34>)
 800e628:	4299      	cmp	r1, r3
 800e62a:	b510      	push	{r4, lr}
 800e62c:	4604      	mov	r4, r0
 800e62e:	d001      	beq.n	800e634 <cleanup_stdio+0x10>
 800e630:	f001 fc5a 	bl	800fee8 <_fflush_r>
 800e634:	68a1      	ldr	r1, [r4, #8]
 800e636:	4b09      	ldr	r3, [pc, #36]	@ (800e65c <cleanup_stdio+0x38>)
 800e638:	4299      	cmp	r1, r3
 800e63a:	d002      	beq.n	800e642 <cleanup_stdio+0x1e>
 800e63c:	4620      	mov	r0, r4
 800e63e:	f001 fc53 	bl	800fee8 <_fflush_r>
 800e642:	68e1      	ldr	r1, [r4, #12]
 800e644:	4b06      	ldr	r3, [pc, #24]	@ (800e660 <cleanup_stdio+0x3c>)
 800e646:	4299      	cmp	r1, r3
 800e648:	d004      	beq.n	800e654 <cleanup_stdio+0x30>
 800e64a:	4620      	mov	r0, r4
 800e64c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e650:	f001 bc4a 	b.w	800fee8 <_fflush_r>
 800e654:	bd10      	pop	{r4, pc}
 800e656:	bf00      	nop
 800e658:	2000fc24 	.word	0x2000fc24
 800e65c:	2000fc8c 	.word	0x2000fc8c
 800e660:	2000fcf4 	.word	0x2000fcf4

0800e664 <global_stdio_init.part.0>:
 800e664:	b510      	push	{r4, lr}
 800e666:	4b0b      	ldr	r3, [pc, #44]	@ (800e694 <global_stdio_init.part.0+0x30>)
 800e668:	4c0b      	ldr	r4, [pc, #44]	@ (800e698 <global_stdio_init.part.0+0x34>)
 800e66a:	4a0c      	ldr	r2, [pc, #48]	@ (800e69c <global_stdio_init.part.0+0x38>)
 800e66c:	601a      	str	r2, [r3, #0]
 800e66e:	4620      	mov	r0, r4
 800e670:	2200      	movs	r2, #0
 800e672:	2104      	movs	r1, #4
 800e674:	f7ff ff94 	bl	800e5a0 <std>
 800e678:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e67c:	2201      	movs	r2, #1
 800e67e:	2109      	movs	r1, #9
 800e680:	f7ff ff8e 	bl	800e5a0 <std>
 800e684:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e688:	2202      	movs	r2, #2
 800e68a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e68e:	2112      	movs	r1, #18
 800e690:	f7ff bf86 	b.w	800e5a0 <std>
 800e694:	2000fd5c 	.word	0x2000fd5c
 800e698:	2000fc24 	.word	0x2000fc24
 800e69c:	0800e60d 	.word	0x0800e60d

0800e6a0 <__sfp_lock_acquire>:
 800e6a0:	4801      	ldr	r0, [pc, #4]	@ (800e6a8 <__sfp_lock_acquire+0x8>)
 800e6a2:	f000 b96e 	b.w	800e982 <__retarget_lock_acquire_recursive>
 800e6a6:	bf00      	nop
 800e6a8:	2000fd65 	.word	0x2000fd65

0800e6ac <__sfp_lock_release>:
 800e6ac:	4801      	ldr	r0, [pc, #4]	@ (800e6b4 <__sfp_lock_release+0x8>)
 800e6ae:	f000 b969 	b.w	800e984 <__retarget_lock_release_recursive>
 800e6b2:	bf00      	nop
 800e6b4:	2000fd65 	.word	0x2000fd65

0800e6b8 <__sinit>:
 800e6b8:	b510      	push	{r4, lr}
 800e6ba:	4604      	mov	r4, r0
 800e6bc:	f7ff fff0 	bl	800e6a0 <__sfp_lock_acquire>
 800e6c0:	6a23      	ldr	r3, [r4, #32]
 800e6c2:	b11b      	cbz	r3, 800e6cc <__sinit+0x14>
 800e6c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e6c8:	f7ff bff0 	b.w	800e6ac <__sfp_lock_release>
 800e6cc:	4b04      	ldr	r3, [pc, #16]	@ (800e6e0 <__sinit+0x28>)
 800e6ce:	6223      	str	r3, [r4, #32]
 800e6d0:	4b04      	ldr	r3, [pc, #16]	@ (800e6e4 <__sinit+0x2c>)
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d1f5      	bne.n	800e6c4 <__sinit+0xc>
 800e6d8:	f7ff ffc4 	bl	800e664 <global_stdio_init.part.0>
 800e6dc:	e7f2      	b.n	800e6c4 <__sinit+0xc>
 800e6de:	bf00      	nop
 800e6e0:	0800e625 	.word	0x0800e625
 800e6e4:	2000fd5c 	.word	0x2000fd5c

0800e6e8 <_fwalk_sglue>:
 800e6e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e6ec:	4607      	mov	r7, r0
 800e6ee:	4688      	mov	r8, r1
 800e6f0:	4614      	mov	r4, r2
 800e6f2:	2600      	movs	r6, #0
 800e6f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e6f8:	f1b9 0901 	subs.w	r9, r9, #1
 800e6fc:	d505      	bpl.n	800e70a <_fwalk_sglue+0x22>
 800e6fe:	6824      	ldr	r4, [r4, #0]
 800e700:	2c00      	cmp	r4, #0
 800e702:	d1f7      	bne.n	800e6f4 <_fwalk_sglue+0xc>
 800e704:	4630      	mov	r0, r6
 800e706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e70a:	89ab      	ldrh	r3, [r5, #12]
 800e70c:	2b01      	cmp	r3, #1
 800e70e:	d907      	bls.n	800e720 <_fwalk_sglue+0x38>
 800e710:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e714:	3301      	adds	r3, #1
 800e716:	d003      	beq.n	800e720 <_fwalk_sglue+0x38>
 800e718:	4629      	mov	r1, r5
 800e71a:	4638      	mov	r0, r7
 800e71c:	47c0      	blx	r8
 800e71e:	4306      	orrs	r6, r0
 800e720:	3568      	adds	r5, #104	@ 0x68
 800e722:	e7e9      	b.n	800e6f8 <_fwalk_sglue+0x10>

0800e724 <__sread>:
 800e724:	b510      	push	{r4, lr}
 800e726:	460c      	mov	r4, r1
 800e728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e72c:	f000 f8ca 	bl	800e8c4 <_read_r>
 800e730:	2800      	cmp	r0, #0
 800e732:	bfab      	itete	ge
 800e734:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e736:	89a3      	ldrhlt	r3, [r4, #12]
 800e738:	181b      	addge	r3, r3, r0
 800e73a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e73e:	bfac      	ite	ge
 800e740:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e742:	81a3      	strhlt	r3, [r4, #12]
 800e744:	bd10      	pop	{r4, pc}

0800e746 <__swrite>:
 800e746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e74a:	461f      	mov	r7, r3
 800e74c:	898b      	ldrh	r3, [r1, #12]
 800e74e:	05db      	lsls	r3, r3, #23
 800e750:	4605      	mov	r5, r0
 800e752:	460c      	mov	r4, r1
 800e754:	4616      	mov	r6, r2
 800e756:	d505      	bpl.n	800e764 <__swrite+0x1e>
 800e758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e75c:	2302      	movs	r3, #2
 800e75e:	2200      	movs	r2, #0
 800e760:	f000 f89e 	bl	800e8a0 <_lseek_r>
 800e764:	89a3      	ldrh	r3, [r4, #12]
 800e766:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e76a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e76e:	81a3      	strh	r3, [r4, #12]
 800e770:	4632      	mov	r2, r6
 800e772:	463b      	mov	r3, r7
 800e774:	4628      	mov	r0, r5
 800e776:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e77a:	f000 b8c5 	b.w	800e908 <_write_r>

0800e77e <__sseek>:
 800e77e:	b510      	push	{r4, lr}
 800e780:	460c      	mov	r4, r1
 800e782:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e786:	f000 f88b 	bl	800e8a0 <_lseek_r>
 800e78a:	1c43      	adds	r3, r0, #1
 800e78c:	89a3      	ldrh	r3, [r4, #12]
 800e78e:	bf15      	itete	ne
 800e790:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e792:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e796:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e79a:	81a3      	strheq	r3, [r4, #12]
 800e79c:	bf18      	it	ne
 800e79e:	81a3      	strhne	r3, [r4, #12]
 800e7a0:	bd10      	pop	{r4, pc}

0800e7a2 <__sclose>:
 800e7a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7a6:	f000 b80d 	b.w	800e7c4 <_close_r>

0800e7aa <memset>:
 800e7aa:	4402      	add	r2, r0
 800e7ac:	4603      	mov	r3, r0
 800e7ae:	4293      	cmp	r3, r2
 800e7b0:	d100      	bne.n	800e7b4 <memset+0xa>
 800e7b2:	4770      	bx	lr
 800e7b4:	f803 1b01 	strb.w	r1, [r3], #1
 800e7b8:	e7f9      	b.n	800e7ae <memset+0x4>
	...

0800e7bc <_localeconv_r>:
 800e7bc:	4800      	ldr	r0, [pc, #0]	@ (800e7c0 <_localeconv_r+0x4>)
 800e7be:	4770      	bx	lr
 800e7c0:	2000025c 	.word	0x2000025c

0800e7c4 <_close_r>:
 800e7c4:	b538      	push	{r3, r4, r5, lr}
 800e7c6:	4d06      	ldr	r5, [pc, #24]	@ (800e7e0 <_close_r+0x1c>)
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	4604      	mov	r4, r0
 800e7cc:	4608      	mov	r0, r1
 800e7ce:	602b      	str	r3, [r5, #0]
 800e7d0:	f7f3 fa00 	bl	8001bd4 <_close>
 800e7d4:	1c43      	adds	r3, r0, #1
 800e7d6:	d102      	bne.n	800e7de <_close_r+0x1a>
 800e7d8:	682b      	ldr	r3, [r5, #0]
 800e7da:	b103      	cbz	r3, 800e7de <_close_r+0x1a>
 800e7dc:	6023      	str	r3, [r4, #0]
 800e7de:	bd38      	pop	{r3, r4, r5, pc}
 800e7e0:	2000fd60 	.word	0x2000fd60

0800e7e4 <_reclaim_reent>:
 800e7e4:	4b2d      	ldr	r3, [pc, #180]	@ (800e89c <_reclaim_reent+0xb8>)
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	4283      	cmp	r3, r0
 800e7ea:	b570      	push	{r4, r5, r6, lr}
 800e7ec:	4604      	mov	r4, r0
 800e7ee:	d053      	beq.n	800e898 <_reclaim_reent+0xb4>
 800e7f0:	69c3      	ldr	r3, [r0, #28]
 800e7f2:	b31b      	cbz	r3, 800e83c <_reclaim_reent+0x58>
 800e7f4:	68db      	ldr	r3, [r3, #12]
 800e7f6:	b163      	cbz	r3, 800e812 <_reclaim_reent+0x2e>
 800e7f8:	2500      	movs	r5, #0
 800e7fa:	69e3      	ldr	r3, [r4, #28]
 800e7fc:	68db      	ldr	r3, [r3, #12]
 800e7fe:	5959      	ldr	r1, [r3, r5]
 800e800:	b9b1      	cbnz	r1, 800e830 <_reclaim_reent+0x4c>
 800e802:	3504      	adds	r5, #4
 800e804:	2d80      	cmp	r5, #128	@ 0x80
 800e806:	d1f8      	bne.n	800e7fa <_reclaim_reent+0x16>
 800e808:	69e3      	ldr	r3, [r4, #28]
 800e80a:	4620      	mov	r0, r4
 800e80c:	68d9      	ldr	r1, [r3, #12]
 800e80e:	f000 ff23 	bl	800f658 <_free_r>
 800e812:	69e3      	ldr	r3, [r4, #28]
 800e814:	6819      	ldr	r1, [r3, #0]
 800e816:	b111      	cbz	r1, 800e81e <_reclaim_reent+0x3a>
 800e818:	4620      	mov	r0, r4
 800e81a:	f000 ff1d 	bl	800f658 <_free_r>
 800e81e:	69e3      	ldr	r3, [r4, #28]
 800e820:	689d      	ldr	r5, [r3, #8]
 800e822:	b15d      	cbz	r5, 800e83c <_reclaim_reent+0x58>
 800e824:	4629      	mov	r1, r5
 800e826:	4620      	mov	r0, r4
 800e828:	682d      	ldr	r5, [r5, #0]
 800e82a:	f000 ff15 	bl	800f658 <_free_r>
 800e82e:	e7f8      	b.n	800e822 <_reclaim_reent+0x3e>
 800e830:	680e      	ldr	r6, [r1, #0]
 800e832:	4620      	mov	r0, r4
 800e834:	f000 ff10 	bl	800f658 <_free_r>
 800e838:	4631      	mov	r1, r6
 800e83a:	e7e1      	b.n	800e800 <_reclaim_reent+0x1c>
 800e83c:	6961      	ldr	r1, [r4, #20]
 800e83e:	b111      	cbz	r1, 800e846 <_reclaim_reent+0x62>
 800e840:	4620      	mov	r0, r4
 800e842:	f000 ff09 	bl	800f658 <_free_r>
 800e846:	69e1      	ldr	r1, [r4, #28]
 800e848:	b111      	cbz	r1, 800e850 <_reclaim_reent+0x6c>
 800e84a:	4620      	mov	r0, r4
 800e84c:	f000 ff04 	bl	800f658 <_free_r>
 800e850:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800e852:	b111      	cbz	r1, 800e85a <_reclaim_reent+0x76>
 800e854:	4620      	mov	r0, r4
 800e856:	f000 feff 	bl	800f658 <_free_r>
 800e85a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e85c:	b111      	cbz	r1, 800e864 <_reclaim_reent+0x80>
 800e85e:	4620      	mov	r0, r4
 800e860:	f000 fefa 	bl	800f658 <_free_r>
 800e864:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800e866:	b111      	cbz	r1, 800e86e <_reclaim_reent+0x8a>
 800e868:	4620      	mov	r0, r4
 800e86a:	f000 fef5 	bl	800f658 <_free_r>
 800e86e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800e870:	b111      	cbz	r1, 800e878 <_reclaim_reent+0x94>
 800e872:	4620      	mov	r0, r4
 800e874:	f000 fef0 	bl	800f658 <_free_r>
 800e878:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800e87a:	b111      	cbz	r1, 800e882 <_reclaim_reent+0x9e>
 800e87c:	4620      	mov	r0, r4
 800e87e:	f000 feeb 	bl	800f658 <_free_r>
 800e882:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800e884:	b111      	cbz	r1, 800e88c <_reclaim_reent+0xa8>
 800e886:	4620      	mov	r0, r4
 800e888:	f000 fee6 	bl	800f658 <_free_r>
 800e88c:	6a23      	ldr	r3, [r4, #32]
 800e88e:	b11b      	cbz	r3, 800e898 <_reclaim_reent+0xb4>
 800e890:	4620      	mov	r0, r4
 800e892:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e896:	4718      	bx	r3
 800e898:	bd70      	pop	{r4, r5, r6, pc}
 800e89a:	bf00      	nop
 800e89c:	2000011c 	.word	0x2000011c

0800e8a0 <_lseek_r>:
 800e8a0:	b538      	push	{r3, r4, r5, lr}
 800e8a2:	4d07      	ldr	r5, [pc, #28]	@ (800e8c0 <_lseek_r+0x20>)
 800e8a4:	4604      	mov	r4, r0
 800e8a6:	4608      	mov	r0, r1
 800e8a8:	4611      	mov	r1, r2
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	602a      	str	r2, [r5, #0]
 800e8ae:	461a      	mov	r2, r3
 800e8b0:	f7f3 f9b7 	bl	8001c22 <_lseek>
 800e8b4:	1c43      	adds	r3, r0, #1
 800e8b6:	d102      	bne.n	800e8be <_lseek_r+0x1e>
 800e8b8:	682b      	ldr	r3, [r5, #0]
 800e8ba:	b103      	cbz	r3, 800e8be <_lseek_r+0x1e>
 800e8bc:	6023      	str	r3, [r4, #0]
 800e8be:	bd38      	pop	{r3, r4, r5, pc}
 800e8c0:	2000fd60 	.word	0x2000fd60

0800e8c4 <_read_r>:
 800e8c4:	b538      	push	{r3, r4, r5, lr}
 800e8c6:	4d07      	ldr	r5, [pc, #28]	@ (800e8e4 <_read_r+0x20>)
 800e8c8:	4604      	mov	r4, r0
 800e8ca:	4608      	mov	r0, r1
 800e8cc:	4611      	mov	r1, r2
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	602a      	str	r2, [r5, #0]
 800e8d2:	461a      	mov	r2, r3
 800e8d4:	f7f3 f945 	bl	8001b62 <_read>
 800e8d8:	1c43      	adds	r3, r0, #1
 800e8da:	d102      	bne.n	800e8e2 <_read_r+0x1e>
 800e8dc:	682b      	ldr	r3, [r5, #0]
 800e8de:	b103      	cbz	r3, 800e8e2 <_read_r+0x1e>
 800e8e0:	6023      	str	r3, [r4, #0]
 800e8e2:	bd38      	pop	{r3, r4, r5, pc}
 800e8e4:	2000fd60 	.word	0x2000fd60

0800e8e8 <_sbrk_r>:
 800e8e8:	b538      	push	{r3, r4, r5, lr}
 800e8ea:	4d06      	ldr	r5, [pc, #24]	@ (800e904 <_sbrk_r+0x1c>)
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	4604      	mov	r4, r0
 800e8f0:	4608      	mov	r0, r1
 800e8f2:	602b      	str	r3, [r5, #0]
 800e8f4:	f7f3 f9a2 	bl	8001c3c <_sbrk>
 800e8f8:	1c43      	adds	r3, r0, #1
 800e8fa:	d102      	bne.n	800e902 <_sbrk_r+0x1a>
 800e8fc:	682b      	ldr	r3, [r5, #0]
 800e8fe:	b103      	cbz	r3, 800e902 <_sbrk_r+0x1a>
 800e900:	6023      	str	r3, [r4, #0]
 800e902:	bd38      	pop	{r3, r4, r5, pc}
 800e904:	2000fd60 	.word	0x2000fd60

0800e908 <_write_r>:
 800e908:	b538      	push	{r3, r4, r5, lr}
 800e90a:	4d07      	ldr	r5, [pc, #28]	@ (800e928 <_write_r+0x20>)
 800e90c:	4604      	mov	r4, r0
 800e90e:	4608      	mov	r0, r1
 800e910:	4611      	mov	r1, r2
 800e912:	2200      	movs	r2, #0
 800e914:	602a      	str	r2, [r5, #0]
 800e916:	461a      	mov	r2, r3
 800e918:	f7f3 f940 	bl	8001b9c <_write>
 800e91c:	1c43      	adds	r3, r0, #1
 800e91e:	d102      	bne.n	800e926 <_write_r+0x1e>
 800e920:	682b      	ldr	r3, [r5, #0]
 800e922:	b103      	cbz	r3, 800e926 <_write_r+0x1e>
 800e924:	6023      	str	r3, [r4, #0]
 800e926:	bd38      	pop	{r3, r4, r5, pc}
 800e928:	2000fd60 	.word	0x2000fd60

0800e92c <__errno>:
 800e92c:	4b01      	ldr	r3, [pc, #4]	@ (800e934 <__errno+0x8>)
 800e92e:	6818      	ldr	r0, [r3, #0]
 800e930:	4770      	bx	lr
 800e932:	bf00      	nop
 800e934:	2000011c 	.word	0x2000011c

0800e938 <__libc_init_array>:
 800e938:	b570      	push	{r4, r5, r6, lr}
 800e93a:	4d0d      	ldr	r5, [pc, #52]	@ (800e970 <__libc_init_array+0x38>)
 800e93c:	4c0d      	ldr	r4, [pc, #52]	@ (800e974 <__libc_init_array+0x3c>)
 800e93e:	1b64      	subs	r4, r4, r5
 800e940:	10a4      	asrs	r4, r4, #2
 800e942:	2600      	movs	r6, #0
 800e944:	42a6      	cmp	r6, r4
 800e946:	d109      	bne.n	800e95c <__libc_init_array+0x24>
 800e948:	4d0b      	ldr	r5, [pc, #44]	@ (800e978 <__libc_init_array+0x40>)
 800e94a:	4c0c      	ldr	r4, [pc, #48]	@ (800e97c <__libc_init_array+0x44>)
 800e94c:	f001 fdfc 	bl	8010548 <_init>
 800e950:	1b64      	subs	r4, r4, r5
 800e952:	10a4      	asrs	r4, r4, #2
 800e954:	2600      	movs	r6, #0
 800e956:	42a6      	cmp	r6, r4
 800e958:	d105      	bne.n	800e966 <__libc_init_array+0x2e>
 800e95a:	bd70      	pop	{r4, r5, r6, pc}
 800e95c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e960:	4798      	blx	r3
 800e962:	3601      	adds	r6, #1
 800e964:	e7ee      	b.n	800e944 <__libc_init_array+0xc>
 800e966:	f855 3b04 	ldr.w	r3, [r5], #4
 800e96a:	4798      	blx	r3
 800e96c:	3601      	adds	r6, #1
 800e96e:	e7f2      	b.n	800e956 <__libc_init_array+0x1e>
 800e970:	080109dc 	.word	0x080109dc
 800e974:	080109dc 	.word	0x080109dc
 800e978:	080109dc 	.word	0x080109dc
 800e97c:	080109e0 	.word	0x080109e0

0800e980 <__retarget_lock_init_recursive>:
 800e980:	4770      	bx	lr

0800e982 <__retarget_lock_acquire_recursive>:
 800e982:	4770      	bx	lr

0800e984 <__retarget_lock_release_recursive>:
 800e984:	4770      	bx	lr

0800e986 <memcpy>:
 800e986:	440a      	add	r2, r1
 800e988:	4291      	cmp	r1, r2
 800e98a:	f100 33ff 	add.w	r3, r0, #4294967295
 800e98e:	d100      	bne.n	800e992 <memcpy+0xc>
 800e990:	4770      	bx	lr
 800e992:	b510      	push	{r4, lr}
 800e994:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e998:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e99c:	4291      	cmp	r1, r2
 800e99e:	d1f9      	bne.n	800e994 <memcpy+0xe>
 800e9a0:	bd10      	pop	{r4, pc}

0800e9a2 <quorem>:
 800e9a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9a6:	6903      	ldr	r3, [r0, #16]
 800e9a8:	690c      	ldr	r4, [r1, #16]
 800e9aa:	42a3      	cmp	r3, r4
 800e9ac:	4607      	mov	r7, r0
 800e9ae:	db7e      	blt.n	800eaae <quorem+0x10c>
 800e9b0:	3c01      	subs	r4, #1
 800e9b2:	f101 0814 	add.w	r8, r1, #20
 800e9b6:	00a3      	lsls	r3, r4, #2
 800e9b8:	f100 0514 	add.w	r5, r0, #20
 800e9bc:	9300      	str	r3, [sp, #0]
 800e9be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e9c2:	9301      	str	r3, [sp, #4]
 800e9c4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e9c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e9cc:	3301      	adds	r3, #1
 800e9ce:	429a      	cmp	r2, r3
 800e9d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e9d4:	fbb2 f6f3 	udiv	r6, r2, r3
 800e9d8:	d32e      	bcc.n	800ea38 <quorem+0x96>
 800e9da:	f04f 0a00 	mov.w	sl, #0
 800e9de:	46c4      	mov	ip, r8
 800e9e0:	46ae      	mov	lr, r5
 800e9e2:	46d3      	mov	fp, sl
 800e9e4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e9e8:	b298      	uxth	r0, r3
 800e9ea:	fb06 a000 	mla	r0, r6, r0, sl
 800e9ee:	0c02      	lsrs	r2, r0, #16
 800e9f0:	0c1b      	lsrs	r3, r3, #16
 800e9f2:	fb06 2303 	mla	r3, r6, r3, r2
 800e9f6:	f8de 2000 	ldr.w	r2, [lr]
 800e9fa:	b280      	uxth	r0, r0
 800e9fc:	b292      	uxth	r2, r2
 800e9fe:	1a12      	subs	r2, r2, r0
 800ea00:	445a      	add	r2, fp
 800ea02:	f8de 0000 	ldr.w	r0, [lr]
 800ea06:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ea0a:	b29b      	uxth	r3, r3
 800ea0c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ea10:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ea14:	b292      	uxth	r2, r2
 800ea16:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ea1a:	45e1      	cmp	r9, ip
 800ea1c:	f84e 2b04 	str.w	r2, [lr], #4
 800ea20:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ea24:	d2de      	bcs.n	800e9e4 <quorem+0x42>
 800ea26:	9b00      	ldr	r3, [sp, #0]
 800ea28:	58eb      	ldr	r3, [r5, r3]
 800ea2a:	b92b      	cbnz	r3, 800ea38 <quorem+0x96>
 800ea2c:	9b01      	ldr	r3, [sp, #4]
 800ea2e:	3b04      	subs	r3, #4
 800ea30:	429d      	cmp	r5, r3
 800ea32:	461a      	mov	r2, r3
 800ea34:	d32f      	bcc.n	800ea96 <quorem+0xf4>
 800ea36:	613c      	str	r4, [r7, #16]
 800ea38:	4638      	mov	r0, r7
 800ea3a:	f001 f8c9 	bl	800fbd0 <__mcmp>
 800ea3e:	2800      	cmp	r0, #0
 800ea40:	db25      	blt.n	800ea8e <quorem+0xec>
 800ea42:	4629      	mov	r1, r5
 800ea44:	2000      	movs	r0, #0
 800ea46:	f858 2b04 	ldr.w	r2, [r8], #4
 800ea4a:	f8d1 c000 	ldr.w	ip, [r1]
 800ea4e:	fa1f fe82 	uxth.w	lr, r2
 800ea52:	fa1f f38c 	uxth.w	r3, ip
 800ea56:	eba3 030e 	sub.w	r3, r3, lr
 800ea5a:	4403      	add	r3, r0
 800ea5c:	0c12      	lsrs	r2, r2, #16
 800ea5e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ea62:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ea66:	b29b      	uxth	r3, r3
 800ea68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ea6c:	45c1      	cmp	r9, r8
 800ea6e:	f841 3b04 	str.w	r3, [r1], #4
 800ea72:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ea76:	d2e6      	bcs.n	800ea46 <quorem+0xa4>
 800ea78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ea7c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ea80:	b922      	cbnz	r2, 800ea8c <quorem+0xea>
 800ea82:	3b04      	subs	r3, #4
 800ea84:	429d      	cmp	r5, r3
 800ea86:	461a      	mov	r2, r3
 800ea88:	d30b      	bcc.n	800eaa2 <quorem+0x100>
 800ea8a:	613c      	str	r4, [r7, #16]
 800ea8c:	3601      	adds	r6, #1
 800ea8e:	4630      	mov	r0, r6
 800ea90:	b003      	add	sp, #12
 800ea92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea96:	6812      	ldr	r2, [r2, #0]
 800ea98:	3b04      	subs	r3, #4
 800ea9a:	2a00      	cmp	r2, #0
 800ea9c:	d1cb      	bne.n	800ea36 <quorem+0x94>
 800ea9e:	3c01      	subs	r4, #1
 800eaa0:	e7c6      	b.n	800ea30 <quorem+0x8e>
 800eaa2:	6812      	ldr	r2, [r2, #0]
 800eaa4:	3b04      	subs	r3, #4
 800eaa6:	2a00      	cmp	r2, #0
 800eaa8:	d1ef      	bne.n	800ea8a <quorem+0xe8>
 800eaaa:	3c01      	subs	r4, #1
 800eaac:	e7ea      	b.n	800ea84 <quorem+0xe2>
 800eaae:	2000      	movs	r0, #0
 800eab0:	e7ee      	b.n	800ea90 <quorem+0xee>
 800eab2:	0000      	movs	r0, r0
 800eab4:	0000      	movs	r0, r0
	...

0800eab8 <_dtoa_r>:
 800eab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eabc:	69c7      	ldr	r7, [r0, #28]
 800eabe:	b097      	sub	sp, #92	@ 0x5c
 800eac0:	ed8d 0b04 	vstr	d0, [sp, #16]
 800eac4:	ec55 4b10 	vmov	r4, r5, d0
 800eac8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800eaca:	9107      	str	r1, [sp, #28]
 800eacc:	4681      	mov	r9, r0
 800eace:	920c      	str	r2, [sp, #48]	@ 0x30
 800ead0:	9311      	str	r3, [sp, #68]	@ 0x44
 800ead2:	b97f      	cbnz	r7, 800eaf4 <_dtoa_r+0x3c>
 800ead4:	2010      	movs	r0, #16
 800ead6:	f7ff f84f 	bl	800db78 <malloc>
 800eada:	4602      	mov	r2, r0
 800eadc:	f8c9 001c 	str.w	r0, [r9, #28]
 800eae0:	b920      	cbnz	r0, 800eaec <_dtoa_r+0x34>
 800eae2:	4ba9      	ldr	r3, [pc, #676]	@ (800ed88 <_dtoa_r+0x2d0>)
 800eae4:	21ef      	movs	r1, #239	@ 0xef
 800eae6:	48a9      	ldr	r0, [pc, #676]	@ (800ed8c <_dtoa_r+0x2d4>)
 800eae8:	f001 fa26 	bl	800ff38 <__assert_func>
 800eaec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800eaf0:	6007      	str	r7, [r0, #0]
 800eaf2:	60c7      	str	r7, [r0, #12]
 800eaf4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800eaf8:	6819      	ldr	r1, [r3, #0]
 800eafa:	b159      	cbz	r1, 800eb14 <_dtoa_r+0x5c>
 800eafc:	685a      	ldr	r2, [r3, #4]
 800eafe:	604a      	str	r2, [r1, #4]
 800eb00:	2301      	movs	r3, #1
 800eb02:	4093      	lsls	r3, r2
 800eb04:	608b      	str	r3, [r1, #8]
 800eb06:	4648      	mov	r0, r9
 800eb08:	f000 fe30 	bl	800f76c <_Bfree>
 800eb0c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800eb10:	2200      	movs	r2, #0
 800eb12:	601a      	str	r2, [r3, #0]
 800eb14:	1e2b      	subs	r3, r5, #0
 800eb16:	bfb9      	ittee	lt
 800eb18:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800eb1c:	9305      	strlt	r3, [sp, #20]
 800eb1e:	2300      	movge	r3, #0
 800eb20:	6033      	strge	r3, [r6, #0]
 800eb22:	9f05      	ldr	r7, [sp, #20]
 800eb24:	4b9a      	ldr	r3, [pc, #616]	@ (800ed90 <_dtoa_r+0x2d8>)
 800eb26:	bfbc      	itt	lt
 800eb28:	2201      	movlt	r2, #1
 800eb2a:	6032      	strlt	r2, [r6, #0]
 800eb2c:	43bb      	bics	r3, r7
 800eb2e:	d112      	bne.n	800eb56 <_dtoa_r+0x9e>
 800eb30:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800eb32:	f242 730f 	movw	r3, #9999	@ 0x270f
 800eb36:	6013      	str	r3, [r2, #0]
 800eb38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800eb3c:	4323      	orrs	r3, r4
 800eb3e:	f000 855a 	beq.w	800f5f6 <_dtoa_r+0xb3e>
 800eb42:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800eb44:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800eda4 <_dtoa_r+0x2ec>
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	f000 855c 	beq.w	800f606 <_dtoa_r+0xb4e>
 800eb4e:	f10a 0303 	add.w	r3, sl, #3
 800eb52:	f000 bd56 	b.w	800f602 <_dtoa_r+0xb4a>
 800eb56:	ed9d 7b04 	vldr	d7, [sp, #16]
 800eb5a:	2200      	movs	r2, #0
 800eb5c:	ec51 0b17 	vmov	r0, r1, d7
 800eb60:	2300      	movs	r3, #0
 800eb62:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800eb66:	f7f1 ffdf 	bl	8000b28 <__aeabi_dcmpeq>
 800eb6a:	4680      	mov	r8, r0
 800eb6c:	b158      	cbz	r0, 800eb86 <_dtoa_r+0xce>
 800eb6e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800eb70:	2301      	movs	r3, #1
 800eb72:	6013      	str	r3, [r2, #0]
 800eb74:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800eb76:	b113      	cbz	r3, 800eb7e <_dtoa_r+0xc6>
 800eb78:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800eb7a:	4b86      	ldr	r3, [pc, #536]	@ (800ed94 <_dtoa_r+0x2dc>)
 800eb7c:	6013      	str	r3, [r2, #0]
 800eb7e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800eda8 <_dtoa_r+0x2f0>
 800eb82:	f000 bd40 	b.w	800f606 <_dtoa_r+0xb4e>
 800eb86:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800eb8a:	aa14      	add	r2, sp, #80	@ 0x50
 800eb8c:	a915      	add	r1, sp, #84	@ 0x54
 800eb8e:	4648      	mov	r0, r9
 800eb90:	f001 f8ce 	bl	800fd30 <__d2b>
 800eb94:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800eb98:	9002      	str	r0, [sp, #8]
 800eb9a:	2e00      	cmp	r6, #0
 800eb9c:	d078      	beq.n	800ec90 <_dtoa_r+0x1d8>
 800eb9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eba0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800eba4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eba8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ebac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ebb0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ebb4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ebb8:	4619      	mov	r1, r3
 800ebba:	2200      	movs	r2, #0
 800ebbc:	4b76      	ldr	r3, [pc, #472]	@ (800ed98 <_dtoa_r+0x2e0>)
 800ebbe:	f7f1 fb93 	bl	80002e8 <__aeabi_dsub>
 800ebc2:	a36b      	add	r3, pc, #428	@ (adr r3, 800ed70 <_dtoa_r+0x2b8>)
 800ebc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebc8:	f7f1 fd46 	bl	8000658 <__aeabi_dmul>
 800ebcc:	a36a      	add	r3, pc, #424	@ (adr r3, 800ed78 <_dtoa_r+0x2c0>)
 800ebce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebd2:	f7f1 fb8b 	bl	80002ec <__adddf3>
 800ebd6:	4604      	mov	r4, r0
 800ebd8:	4630      	mov	r0, r6
 800ebda:	460d      	mov	r5, r1
 800ebdc:	f7f1 fcd2 	bl	8000584 <__aeabi_i2d>
 800ebe0:	a367      	add	r3, pc, #412	@ (adr r3, 800ed80 <_dtoa_r+0x2c8>)
 800ebe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebe6:	f7f1 fd37 	bl	8000658 <__aeabi_dmul>
 800ebea:	4602      	mov	r2, r0
 800ebec:	460b      	mov	r3, r1
 800ebee:	4620      	mov	r0, r4
 800ebf0:	4629      	mov	r1, r5
 800ebf2:	f7f1 fb7b 	bl	80002ec <__adddf3>
 800ebf6:	4604      	mov	r4, r0
 800ebf8:	460d      	mov	r5, r1
 800ebfa:	f7f1 ffdd 	bl	8000bb8 <__aeabi_d2iz>
 800ebfe:	2200      	movs	r2, #0
 800ec00:	4607      	mov	r7, r0
 800ec02:	2300      	movs	r3, #0
 800ec04:	4620      	mov	r0, r4
 800ec06:	4629      	mov	r1, r5
 800ec08:	f7f1 ff98 	bl	8000b3c <__aeabi_dcmplt>
 800ec0c:	b140      	cbz	r0, 800ec20 <_dtoa_r+0x168>
 800ec0e:	4638      	mov	r0, r7
 800ec10:	f7f1 fcb8 	bl	8000584 <__aeabi_i2d>
 800ec14:	4622      	mov	r2, r4
 800ec16:	462b      	mov	r3, r5
 800ec18:	f7f1 ff86 	bl	8000b28 <__aeabi_dcmpeq>
 800ec1c:	b900      	cbnz	r0, 800ec20 <_dtoa_r+0x168>
 800ec1e:	3f01      	subs	r7, #1
 800ec20:	2f16      	cmp	r7, #22
 800ec22:	d852      	bhi.n	800ecca <_dtoa_r+0x212>
 800ec24:	4b5d      	ldr	r3, [pc, #372]	@ (800ed9c <_dtoa_r+0x2e4>)
 800ec26:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ec2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec2e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ec32:	f7f1 ff83 	bl	8000b3c <__aeabi_dcmplt>
 800ec36:	2800      	cmp	r0, #0
 800ec38:	d049      	beq.n	800ecce <_dtoa_r+0x216>
 800ec3a:	3f01      	subs	r7, #1
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	9310      	str	r3, [sp, #64]	@ 0x40
 800ec40:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ec42:	1b9b      	subs	r3, r3, r6
 800ec44:	1e5a      	subs	r2, r3, #1
 800ec46:	bf45      	ittet	mi
 800ec48:	f1c3 0301 	rsbmi	r3, r3, #1
 800ec4c:	9300      	strmi	r3, [sp, #0]
 800ec4e:	2300      	movpl	r3, #0
 800ec50:	2300      	movmi	r3, #0
 800ec52:	9206      	str	r2, [sp, #24]
 800ec54:	bf54      	ite	pl
 800ec56:	9300      	strpl	r3, [sp, #0]
 800ec58:	9306      	strmi	r3, [sp, #24]
 800ec5a:	2f00      	cmp	r7, #0
 800ec5c:	db39      	blt.n	800ecd2 <_dtoa_r+0x21a>
 800ec5e:	9b06      	ldr	r3, [sp, #24]
 800ec60:	970d      	str	r7, [sp, #52]	@ 0x34
 800ec62:	443b      	add	r3, r7
 800ec64:	9306      	str	r3, [sp, #24]
 800ec66:	2300      	movs	r3, #0
 800ec68:	9308      	str	r3, [sp, #32]
 800ec6a:	9b07      	ldr	r3, [sp, #28]
 800ec6c:	2b09      	cmp	r3, #9
 800ec6e:	d863      	bhi.n	800ed38 <_dtoa_r+0x280>
 800ec70:	2b05      	cmp	r3, #5
 800ec72:	bfc4      	itt	gt
 800ec74:	3b04      	subgt	r3, #4
 800ec76:	9307      	strgt	r3, [sp, #28]
 800ec78:	9b07      	ldr	r3, [sp, #28]
 800ec7a:	f1a3 0302 	sub.w	r3, r3, #2
 800ec7e:	bfcc      	ite	gt
 800ec80:	2400      	movgt	r4, #0
 800ec82:	2401      	movle	r4, #1
 800ec84:	2b03      	cmp	r3, #3
 800ec86:	d863      	bhi.n	800ed50 <_dtoa_r+0x298>
 800ec88:	e8df f003 	tbb	[pc, r3]
 800ec8c:	2b375452 	.word	0x2b375452
 800ec90:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800ec94:	441e      	add	r6, r3
 800ec96:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ec9a:	2b20      	cmp	r3, #32
 800ec9c:	bfc1      	itttt	gt
 800ec9e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800eca2:	409f      	lslgt	r7, r3
 800eca4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800eca8:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ecac:	bfd6      	itet	le
 800ecae:	f1c3 0320 	rsble	r3, r3, #32
 800ecb2:	ea47 0003 	orrgt.w	r0, r7, r3
 800ecb6:	fa04 f003 	lslle.w	r0, r4, r3
 800ecba:	f7f1 fc53 	bl	8000564 <__aeabi_ui2d>
 800ecbe:	2201      	movs	r2, #1
 800ecc0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ecc4:	3e01      	subs	r6, #1
 800ecc6:	9212      	str	r2, [sp, #72]	@ 0x48
 800ecc8:	e776      	b.n	800ebb8 <_dtoa_r+0x100>
 800ecca:	2301      	movs	r3, #1
 800eccc:	e7b7      	b.n	800ec3e <_dtoa_r+0x186>
 800ecce:	9010      	str	r0, [sp, #64]	@ 0x40
 800ecd0:	e7b6      	b.n	800ec40 <_dtoa_r+0x188>
 800ecd2:	9b00      	ldr	r3, [sp, #0]
 800ecd4:	1bdb      	subs	r3, r3, r7
 800ecd6:	9300      	str	r3, [sp, #0]
 800ecd8:	427b      	negs	r3, r7
 800ecda:	9308      	str	r3, [sp, #32]
 800ecdc:	2300      	movs	r3, #0
 800ecde:	930d      	str	r3, [sp, #52]	@ 0x34
 800ece0:	e7c3      	b.n	800ec6a <_dtoa_r+0x1b2>
 800ece2:	2301      	movs	r3, #1
 800ece4:	9309      	str	r3, [sp, #36]	@ 0x24
 800ece6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ece8:	eb07 0b03 	add.w	fp, r7, r3
 800ecec:	f10b 0301 	add.w	r3, fp, #1
 800ecf0:	2b01      	cmp	r3, #1
 800ecf2:	9303      	str	r3, [sp, #12]
 800ecf4:	bfb8      	it	lt
 800ecf6:	2301      	movlt	r3, #1
 800ecf8:	e006      	b.n	800ed08 <_dtoa_r+0x250>
 800ecfa:	2301      	movs	r3, #1
 800ecfc:	9309      	str	r3, [sp, #36]	@ 0x24
 800ecfe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	dd28      	ble.n	800ed56 <_dtoa_r+0x29e>
 800ed04:	469b      	mov	fp, r3
 800ed06:	9303      	str	r3, [sp, #12]
 800ed08:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800ed0c:	2100      	movs	r1, #0
 800ed0e:	2204      	movs	r2, #4
 800ed10:	f102 0514 	add.w	r5, r2, #20
 800ed14:	429d      	cmp	r5, r3
 800ed16:	d926      	bls.n	800ed66 <_dtoa_r+0x2ae>
 800ed18:	6041      	str	r1, [r0, #4]
 800ed1a:	4648      	mov	r0, r9
 800ed1c:	f000 fce6 	bl	800f6ec <_Balloc>
 800ed20:	4682      	mov	sl, r0
 800ed22:	2800      	cmp	r0, #0
 800ed24:	d142      	bne.n	800edac <_dtoa_r+0x2f4>
 800ed26:	4b1e      	ldr	r3, [pc, #120]	@ (800eda0 <_dtoa_r+0x2e8>)
 800ed28:	4602      	mov	r2, r0
 800ed2a:	f240 11af 	movw	r1, #431	@ 0x1af
 800ed2e:	e6da      	b.n	800eae6 <_dtoa_r+0x2e>
 800ed30:	2300      	movs	r3, #0
 800ed32:	e7e3      	b.n	800ecfc <_dtoa_r+0x244>
 800ed34:	2300      	movs	r3, #0
 800ed36:	e7d5      	b.n	800ece4 <_dtoa_r+0x22c>
 800ed38:	2401      	movs	r4, #1
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	9307      	str	r3, [sp, #28]
 800ed3e:	9409      	str	r4, [sp, #36]	@ 0x24
 800ed40:	f04f 3bff 	mov.w	fp, #4294967295
 800ed44:	2200      	movs	r2, #0
 800ed46:	f8cd b00c 	str.w	fp, [sp, #12]
 800ed4a:	2312      	movs	r3, #18
 800ed4c:	920c      	str	r2, [sp, #48]	@ 0x30
 800ed4e:	e7db      	b.n	800ed08 <_dtoa_r+0x250>
 800ed50:	2301      	movs	r3, #1
 800ed52:	9309      	str	r3, [sp, #36]	@ 0x24
 800ed54:	e7f4      	b.n	800ed40 <_dtoa_r+0x288>
 800ed56:	f04f 0b01 	mov.w	fp, #1
 800ed5a:	f8cd b00c 	str.w	fp, [sp, #12]
 800ed5e:	465b      	mov	r3, fp
 800ed60:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800ed64:	e7d0      	b.n	800ed08 <_dtoa_r+0x250>
 800ed66:	3101      	adds	r1, #1
 800ed68:	0052      	lsls	r2, r2, #1
 800ed6a:	e7d1      	b.n	800ed10 <_dtoa_r+0x258>
 800ed6c:	f3af 8000 	nop.w
 800ed70:	636f4361 	.word	0x636f4361
 800ed74:	3fd287a7 	.word	0x3fd287a7
 800ed78:	8b60c8b3 	.word	0x8b60c8b3
 800ed7c:	3fc68a28 	.word	0x3fc68a28
 800ed80:	509f79fb 	.word	0x509f79fb
 800ed84:	3fd34413 	.word	0x3fd34413
 800ed88:	080106a1 	.word	0x080106a1
 800ed8c:	080106b8 	.word	0x080106b8
 800ed90:	7ff00000 	.word	0x7ff00000
 800ed94:	08010671 	.word	0x08010671
 800ed98:	3ff80000 	.word	0x3ff80000
 800ed9c:	08010808 	.word	0x08010808
 800eda0:	08010710 	.word	0x08010710
 800eda4:	0801069d 	.word	0x0801069d
 800eda8:	08010670 	.word	0x08010670
 800edac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800edb0:	6018      	str	r0, [r3, #0]
 800edb2:	9b03      	ldr	r3, [sp, #12]
 800edb4:	2b0e      	cmp	r3, #14
 800edb6:	f200 80a1 	bhi.w	800eefc <_dtoa_r+0x444>
 800edba:	2c00      	cmp	r4, #0
 800edbc:	f000 809e 	beq.w	800eefc <_dtoa_r+0x444>
 800edc0:	2f00      	cmp	r7, #0
 800edc2:	dd33      	ble.n	800ee2c <_dtoa_r+0x374>
 800edc4:	4b9c      	ldr	r3, [pc, #624]	@ (800f038 <_dtoa_r+0x580>)
 800edc6:	f007 020f 	and.w	r2, r7, #15
 800edca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800edce:	ed93 7b00 	vldr	d7, [r3]
 800edd2:	05f8      	lsls	r0, r7, #23
 800edd4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800edd8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800eddc:	d516      	bpl.n	800ee0c <_dtoa_r+0x354>
 800edde:	4b97      	ldr	r3, [pc, #604]	@ (800f03c <_dtoa_r+0x584>)
 800ede0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ede4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ede8:	f7f1 fd60 	bl	80008ac <__aeabi_ddiv>
 800edec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800edf0:	f004 040f 	and.w	r4, r4, #15
 800edf4:	2603      	movs	r6, #3
 800edf6:	4d91      	ldr	r5, [pc, #580]	@ (800f03c <_dtoa_r+0x584>)
 800edf8:	b954      	cbnz	r4, 800ee10 <_dtoa_r+0x358>
 800edfa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800edfe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ee02:	f7f1 fd53 	bl	80008ac <__aeabi_ddiv>
 800ee06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ee0a:	e028      	b.n	800ee5e <_dtoa_r+0x3a6>
 800ee0c:	2602      	movs	r6, #2
 800ee0e:	e7f2      	b.n	800edf6 <_dtoa_r+0x33e>
 800ee10:	07e1      	lsls	r1, r4, #31
 800ee12:	d508      	bpl.n	800ee26 <_dtoa_r+0x36e>
 800ee14:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ee18:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ee1c:	f7f1 fc1c 	bl	8000658 <__aeabi_dmul>
 800ee20:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ee24:	3601      	adds	r6, #1
 800ee26:	1064      	asrs	r4, r4, #1
 800ee28:	3508      	adds	r5, #8
 800ee2a:	e7e5      	b.n	800edf8 <_dtoa_r+0x340>
 800ee2c:	f000 80af 	beq.w	800ef8e <_dtoa_r+0x4d6>
 800ee30:	427c      	negs	r4, r7
 800ee32:	4b81      	ldr	r3, [pc, #516]	@ (800f038 <_dtoa_r+0x580>)
 800ee34:	4d81      	ldr	r5, [pc, #516]	@ (800f03c <_dtoa_r+0x584>)
 800ee36:	f004 020f 	and.w	r2, r4, #15
 800ee3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ee3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee42:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ee46:	f7f1 fc07 	bl	8000658 <__aeabi_dmul>
 800ee4a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ee4e:	1124      	asrs	r4, r4, #4
 800ee50:	2300      	movs	r3, #0
 800ee52:	2602      	movs	r6, #2
 800ee54:	2c00      	cmp	r4, #0
 800ee56:	f040 808f 	bne.w	800ef78 <_dtoa_r+0x4c0>
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d1d3      	bne.n	800ee06 <_dtoa_r+0x34e>
 800ee5e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ee60:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	f000 8094 	beq.w	800ef92 <_dtoa_r+0x4da>
 800ee6a:	4b75      	ldr	r3, [pc, #468]	@ (800f040 <_dtoa_r+0x588>)
 800ee6c:	2200      	movs	r2, #0
 800ee6e:	4620      	mov	r0, r4
 800ee70:	4629      	mov	r1, r5
 800ee72:	f7f1 fe63 	bl	8000b3c <__aeabi_dcmplt>
 800ee76:	2800      	cmp	r0, #0
 800ee78:	f000 808b 	beq.w	800ef92 <_dtoa_r+0x4da>
 800ee7c:	9b03      	ldr	r3, [sp, #12]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	f000 8087 	beq.w	800ef92 <_dtoa_r+0x4da>
 800ee84:	f1bb 0f00 	cmp.w	fp, #0
 800ee88:	dd34      	ble.n	800eef4 <_dtoa_r+0x43c>
 800ee8a:	4620      	mov	r0, r4
 800ee8c:	4b6d      	ldr	r3, [pc, #436]	@ (800f044 <_dtoa_r+0x58c>)
 800ee8e:	2200      	movs	r2, #0
 800ee90:	4629      	mov	r1, r5
 800ee92:	f7f1 fbe1 	bl	8000658 <__aeabi_dmul>
 800ee96:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ee9a:	f107 38ff 	add.w	r8, r7, #4294967295
 800ee9e:	3601      	adds	r6, #1
 800eea0:	465c      	mov	r4, fp
 800eea2:	4630      	mov	r0, r6
 800eea4:	f7f1 fb6e 	bl	8000584 <__aeabi_i2d>
 800eea8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eeac:	f7f1 fbd4 	bl	8000658 <__aeabi_dmul>
 800eeb0:	4b65      	ldr	r3, [pc, #404]	@ (800f048 <_dtoa_r+0x590>)
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	f7f1 fa1a 	bl	80002ec <__adddf3>
 800eeb8:	4605      	mov	r5, r0
 800eeba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800eebe:	2c00      	cmp	r4, #0
 800eec0:	d16a      	bne.n	800ef98 <_dtoa_r+0x4e0>
 800eec2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eec6:	4b61      	ldr	r3, [pc, #388]	@ (800f04c <_dtoa_r+0x594>)
 800eec8:	2200      	movs	r2, #0
 800eeca:	f7f1 fa0d 	bl	80002e8 <__aeabi_dsub>
 800eece:	4602      	mov	r2, r0
 800eed0:	460b      	mov	r3, r1
 800eed2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800eed6:	462a      	mov	r2, r5
 800eed8:	4633      	mov	r3, r6
 800eeda:	f7f1 fe4d 	bl	8000b78 <__aeabi_dcmpgt>
 800eede:	2800      	cmp	r0, #0
 800eee0:	f040 8298 	bne.w	800f414 <_dtoa_r+0x95c>
 800eee4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eee8:	462a      	mov	r2, r5
 800eeea:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800eeee:	f7f1 fe25 	bl	8000b3c <__aeabi_dcmplt>
 800eef2:	bb38      	cbnz	r0, 800ef44 <_dtoa_r+0x48c>
 800eef4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800eef8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800eefc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	f2c0 8157 	blt.w	800f1b2 <_dtoa_r+0x6fa>
 800ef04:	2f0e      	cmp	r7, #14
 800ef06:	f300 8154 	bgt.w	800f1b2 <_dtoa_r+0x6fa>
 800ef0a:	4b4b      	ldr	r3, [pc, #300]	@ (800f038 <_dtoa_r+0x580>)
 800ef0c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ef10:	ed93 7b00 	vldr	d7, [r3]
 800ef14:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	ed8d 7b00 	vstr	d7, [sp]
 800ef1c:	f280 80e5 	bge.w	800f0ea <_dtoa_r+0x632>
 800ef20:	9b03      	ldr	r3, [sp, #12]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	f300 80e1 	bgt.w	800f0ea <_dtoa_r+0x632>
 800ef28:	d10c      	bne.n	800ef44 <_dtoa_r+0x48c>
 800ef2a:	4b48      	ldr	r3, [pc, #288]	@ (800f04c <_dtoa_r+0x594>)
 800ef2c:	2200      	movs	r2, #0
 800ef2e:	ec51 0b17 	vmov	r0, r1, d7
 800ef32:	f7f1 fb91 	bl	8000658 <__aeabi_dmul>
 800ef36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ef3a:	f7f1 fe13 	bl	8000b64 <__aeabi_dcmpge>
 800ef3e:	2800      	cmp	r0, #0
 800ef40:	f000 8266 	beq.w	800f410 <_dtoa_r+0x958>
 800ef44:	2400      	movs	r4, #0
 800ef46:	4625      	mov	r5, r4
 800ef48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ef4a:	4656      	mov	r6, sl
 800ef4c:	ea6f 0803 	mvn.w	r8, r3
 800ef50:	2700      	movs	r7, #0
 800ef52:	4621      	mov	r1, r4
 800ef54:	4648      	mov	r0, r9
 800ef56:	f000 fc09 	bl	800f76c <_Bfree>
 800ef5a:	2d00      	cmp	r5, #0
 800ef5c:	f000 80bd 	beq.w	800f0da <_dtoa_r+0x622>
 800ef60:	b12f      	cbz	r7, 800ef6e <_dtoa_r+0x4b6>
 800ef62:	42af      	cmp	r7, r5
 800ef64:	d003      	beq.n	800ef6e <_dtoa_r+0x4b6>
 800ef66:	4639      	mov	r1, r7
 800ef68:	4648      	mov	r0, r9
 800ef6a:	f000 fbff 	bl	800f76c <_Bfree>
 800ef6e:	4629      	mov	r1, r5
 800ef70:	4648      	mov	r0, r9
 800ef72:	f000 fbfb 	bl	800f76c <_Bfree>
 800ef76:	e0b0      	b.n	800f0da <_dtoa_r+0x622>
 800ef78:	07e2      	lsls	r2, r4, #31
 800ef7a:	d505      	bpl.n	800ef88 <_dtoa_r+0x4d0>
 800ef7c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ef80:	f7f1 fb6a 	bl	8000658 <__aeabi_dmul>
 800ef84:	3601      	adds	r6, #1
 800ef86:	2301      	movs	r3, #1
 800ef88:	1064      	asrs	r4, r4, #1
 800ef8a:	3508      	adds	r5, #8
 800ef8c:	e762      	b.n	800ee54 <_dtoa_r+0x39c>
 800ef8e:	2602      	movs	r6, #2
 800ef90:	e765      	b.n	800ee5e <_dtoa_r+0x3a6>
 800ef92:	9c03      	ldr	r4, [sp, #12]
 800ef94:	46b8      	mov	r8, r7
 800ef96:	e784      	b.n	800eea2 <_dtoa_r+0x3ea>
 800ef98:	4b27      	ldr	r3, [pc, #156]	@ (800f038 <_dtoa_r+0x580>)
 800ef9a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ef9c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800efa0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800efa4:	4454      	add	r4, sl
 800efa6:	2900      	cmp	r1, #0
 800efa8:	d054      	beq.n	800f054 <_dtoa_r+0x59c>
 800efaa:	4929      	ldr	r1, [pc, #164]	@ (800f050 <_dtoa_r+0x598>)
 800efac:	2000      	movs	r0, #0
 800efae:	f7f1 fc7d 	bl	80008ac <__aeabi_ddiv>
 800efb2:	4633      	mov	r3, r6
 800efb4:	462a      	mov	r2, r5
 800efb6:	f7f1 f997 	bl	80002e8 <__aeabi_dsub>
 800efba:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800efbe:	4656      	mov	r6, sl
 800efc0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800efc4:	f7f1 fdf8 	bl	8000bb8 <__aeabi_d2iz>
 800efc8:	4605      	mov	r5, r0
 800efca:	f7f1 fadb 	bl	8000584 <__aeabi_i2d>
 800efce:	4602      	mov	r2, r0
 800efd0:	460b      	mov	r3, r1
 800efd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800efd6:	f7f1 f987 	bl	80002e8 <__aeabi_dsub>
 800efda:	3530      	adds	r5, #48	@ 0x30
 800efdc:	4602      	mov	r2, r0
 800efde:	460b      	mov	r3, r1
 800efe0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800efe4:	f806 5b01 	strb.w	r5, [r6], #1
 800efe8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800efec:	f7f1 fda6 	bl	8000b3c <__aeabi_dcmplt>
 800eff0:	2800      	cmp	r0, #0
 800eff2:	d172      	bne.n	800f0da <_dtoa_r+0x622>
 800eff4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eff8:	4911      	ldr	r1, [pc, #68]	@ (800f040 <_dtoa_r+0x588>)
 800effa:	2000      	movs	r0, #0
 800effc:	f7f1 f974 	bl	80002e8 <__aeabi_dsub>
 800f000:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f004:	f7f1 fd9a 	bl	8000b3c <__aeabi_dcmplt>
 800f008:	2800      	cmp	r0, #0
 800f00a:	f040 80b4 	bne.w	800f176 <_dtoa_r+0x6be>
 800f00e:	42a6      	cmp	r6, r4
 800f010:	f43f af70 	beq.w	800eef4 <_dtoa_r+0x43c>
 800f014:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800f018:	4b0a      	ldr	r3, [pc, #40]	@ (800f044 <_dtoa_r+0x58c>)
 800f01a:	2200      	movs	r2, #0
 800f01c:	f7f1 fb1c 	bl	8000658 <__aeabi_dmul>
 800f020:	4b08      	ldr	r3, [pc, #32]	@ (800f044 <_dtoa_r+0x58c>)
 800f022:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f026:	2200      	movs	r2, #0
 800f028:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f02c:	f7f1 fb14 	bl	8000658 <__aeabi_dmul>
 800f030:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f034:	e7c4      	b.n	800efc0 <_dtoa_r+0x508>
 800f036:	bf00      	nop
 800f038:	08010808 	.word	0x08010808
 800f03c:	080107e0 	.word	0x080107e0
 800f040:	3ff00000 	.word	0x3ff00000
 800f044:	40240000 	.word	0x40240000
 800f048:	401c0000 	.word	0x401c0000
 800f04c:	40140000 	.word	0x40140000
 800f050:	3fe00000 	.word	0x3fe00000
 800f054:	4631      	mov	r1, r6
 800f056:	4628      	mov	r0, r5
 800f058:	f7f1 fafe 	bl	8000658 <__aeabi_dmul>
 800f05c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f060:	9413      	str	r4, [sp, #76]	@ 0x4c
 800f062:	4656      	mov	r6, sl
 800f064:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f068:	f7f1 fda6 	bl	8000bb8 <__aeabi_d2iz>
 800f06c:	4605      	mov	r5, r0
 800f06e:	f7f1 fa89 	bl	8000584 <__aeabi_i2d>
 800f072:	4602      	mov	r2, r0
 800f074:	460b      	mov	r3, r1
 800f076:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f07a:	f7f1 f935 	bl	80002e8 <__aeabi_dsub>
 800f07e:	3530      	adds	r5, #48	@ 0x30
 800f080:	f806 5b01 	strb.w	r5, [r6], #1
 800f084:	4602      	mov	r2, r0
 800f086:	460b      	mov	r3, r1
 800f088:	42a6      	cmp	r6, r4
 800f08a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f08e:	f04f 0200 	mov.w	r2, #0
 800f092:	d124      	bne.n	800f0de <_dtoa_r+0x626>
 800f094:	4baf      	ldr	r3, [pc, #700]	@ (800f354 <_dtoa_r+0x89c>)
 800f096:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800f09a:	f7f1 f927 	bl	80002ec <__adddf3>
 800f09e:	4602      	mov	r2, r0
 800f0a0:	460b      	mov	r3, r1
 800f0a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f0a6:	f7f1 fd67 	bl	8000b78 <__aeabi_dcmpgt>
 800f0aa:	2800      	cmp	r0, #0
 800f0ac:	d163      	bne.n	800f176 <_dtoa_r+0x6be>
 800f0ae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f0b2:	49a8      	ldr	r1, [pc, #672]	@ (800f354 <_dtoa_r+0x89c>)
 800f0b4:	2000      	movs	r0, #0
 800f0b6:	f7f1 f917 	bl	80002e8 <__aeabi_dsub>
 800f0ba:	4602      	mov	r2, r0
 800f0bc:	460b      	mov	r3, r1
 800f0be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f0c2:	f7f1 fd3b 	bl	8000b3c <__aeabi_dcmplt>
 800f0c6:	2800      	cmp	r0, #0
 800f0c8:	f43f af14 	beq.w	800eef4 <_dtoa_r+0x43c>
 800f0cc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800f0ce:	1e73      	subs	r3, r6, #1
 800f0d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f0d2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f0d6:	2b30      	cmp	r3, #48	@ 0x30
 800f0d8:	d0f8      	beq.n	800f0cc <_dtoa_r+0x614>
 800f0da:	4647      	mov	r7, r8
 800f0dc:	e03b      	b.n	800f156 <_dtoa_r+0x69e>
 800f0de:	4b9e      	ldr	r3, [pc, #632]	@ (800f358 <_dtoa_r+0x8a0>)
 800f0e0:	f7f1 faba 	bl	8000658 <__aeabi_dmul>
 800f0e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f0e8:	e7bc      	b.n	800f064 <_dtoa_r+0x5ac>
 800f0ea:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800f0ee:	4656      	mov	r6, sl
 800f0f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f0f4:	4620      	mov	r0, r4
 800f0f6:	4629      	mov	r1, r5
 800f0f8:	f7f1 fbd8 	bl	80008ac <__aeabi_ddiv>
 800f0fc:	f7f1 fd5c 	bl	8000bb8 <__aeabi_d2iz>
 800f100:	4680      	mov	r8, r0
 800f102:	f7f1 fa3f 	bl	8000584 <__aeabi_i2d>
 800f106:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f10a:	f7f1 faa5 	bl	8000658 <__aeabi_dmul>
 800f10e:	4602      	mov	r2, r0
 800f110:	460b      	mov	r3, r1
 800f112:	4620      	mov	r0, r4
 800f114:	4629      	mov	r1, r5
 800f116:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f11a:	f7f1 f8e5 	bl	80002e8 <__aeabi_dsub>
 800f11e:	f806 4b01 	strb.w	r4, [r6], #1
 800f122:	9d03      	ldr	r5, [sp, #12]
 800f124:	eba6 040a 	sub.w	r4, r6, sl
 800f128:	42a5      	cmp	r5, r4
 800f12a:	4602      	mov	r2, r0
 800f12c:	460b      	mov	r3, r1
 800f12e:	d133      	bne.n	800f198 <_dtoa_r+0x6e0>
 800f130:	f7f1 f8dc 	bl	80002ec <__adddf3>
 800f134:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f138:	4604      	mov	r4, r0
 800f13a:	460d      	mov	r5, r1
 800f13c:	f7f1 fd1c 	bl	8000b78 <__aeabi_dcmpgt>
 800f140:	b9c0      	cbnz	r0, 800f174 <_dtoa_r+0x6bc>
 800f142:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f146:	4620      	mov	r0, r4
 800f148:	4629      	mov	r1, r5
 800f14a:	f7f1 fced 	bl	8000b28 <__aeabi_dcmpeq>
 800f14e:	b110      	cbz	r0, 800f156 <_dtoa_r+0x69e>
 800f150:	f018 0f01 	tst.w	r8, #1
 800f154:	d10e      	bne.n	800f174 <_dtoa_r+0x6bc>
 800f156:	9902      	ldr	r1, [sp, #8]
 800f158:	4648      	mov	r0, r9
 800f15a:	f000 fb07 	bl	800f76c <_Bfree>
 800f15e:	2300      	movs	r3, #0
 800f160:	7033      	strb	r3, [r6, #0]
 800f162:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f164:	3701      	adds	r7, #1
 800f166:	601f      	str	r7, [r3, #0]
 800f168:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	f000 824b 	beq.w	800f606 <_dtoa_r+0xb4e>
 800f170:	601e      	str	r6, [r3, #0]
 800f172:	e248      	b.n	800f606 <_dtoa_r+0xb4e>
 800f174:	46b8      	mov	r8, r7
 800f176:	4633      	mov	r3, r6
 800f178:	461e      	mov	r6, r3
 800f17a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f17e:	2a39      	cmp	r2, #57	@ 0x39
 800f180:	d106      	bne.n	800f190 <_dtoa_r+0x6d8>
 800f182:	459a      	cmp	sl, r3
 800f184:	d1f8      	bne.n	800f178 <_dtoa_r+0x6c0>
 800f186:	2230      	movs	r2, #48	@ 0x30
 800f188:	f108 0801 	add.w	r8, r8, #1
 800f18c:	f88a 2000 	strb.w	r2, [sl]
 800f190:	781a      	ldrb	r2, [r3, #0]
 800f192:	3201      	adds	r2, #1
 800f194:	701a      	strb	r2, [r3, #0]
 800f196:	e7a0      	b.n	800f0da <_dtoa_r+0x622>
 800f198:	4b6f      	ldr	r3, [pc, #444]	@ (800f358 <_dtoa_r+0x8a0>)
 800f19a:	2200      	movs	r2, #0
 800f19c:	f7f1 fa5c 	bl	8000658 <__aeabi_dmul>
 800f1a0:	2200      	movs	r2, #0
 800f1a2:	2300      	movs	r3, #0
 800f1a4:	4604      	mov	r4, r0
 800f1a6:	460d      	mov	r5, r1
 800f1a8:	f7f1 fcbe 	bl	8000b28 <__aeabi_dcmpeq>
 800f1ac:	2800      	cmp	r0, #0
 800f1ae:	d09f      	beq.n	800f0f0 <_dtoa_r+0x638>
 800f1b0:	e7d1      	b.n	800f156 <_dtoa_r+0x69e>
 800f1b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f1b4:	2a00      	cmp	r2, #0
 800f1b6:	f000 80ea 	beq.w	800f38e <_dtoa_r+0x8d6>
 800f1ba:	9a07      	ldr	r2, [sp, #28]
 800f1bc:	2a01      	cmp	r2, #1
 800f1be:	f300 80cd 	bgt.w	800f35c <_dtoa_r+0x8a4>
 800f1c2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800f1c4:	2a00      	cmp	r2, #0
 800f1c6:	f000 80c1 	beq.w	800f34c <_dtoa_r+0x894>
 800f1ca:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f1ce:	9c08      	ldr	r4, [sp, #32]
 800f1d0:	9e00      	ldr	r6, [sp, #0]
 800f1d2:	9a00      	ldr	r2, [sp, #0]
 800f1d4:	441a      	add	r2, r3
 800f1d6:	9200      	str	r2, [sp, #0]
 800f1d8:	9a06      	ldr	r2, [sp, #24]
 800f1da:	2101      	movs	r1, #1
 800f1dc:	441a      	add	r2, r3
 800f1de:	4648      	mov	r0, r9
 800f1e0:	9206      	str	r2, [sp, #24]
 800f1e2:	f000 fb77 	bl	800f8d4 <__i2b>
 800f1e6:	4605      	mov	r5, r0
 800f1e8:	b166      	cbz	r6, 800f204 <_dtoa_r+0x74c>
 800f1ea:	9b06      	ldr	r3, [sp, #24]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	dd09      	ble.n	800f204 <_dtoa_r+0x74c>
 800f1f0:	42b3      	cmp	r3, r6
 800f1f2:	9a00      	ldr	r2, [sp, #0]
 800f1f4:	bfa8      	it	ge
 800f1f6:	4633      	movge	r3, r6
 800f1f8:	1ad2      	subs	r2, r2, r3
 800f1fa:	9200      	str	r2, [sp, #0]
 800f1fc:	9a06      	ldr	r2, [sp, #24]
 800f1fe:	1af6      	subs	r6, r6, r3
 800f200:	1ad3      	subs	r3, r2, r3
 800f202:	9306      	str	r3, [sp, #24]
 800f204:	9b08      	ldr	r3, [sp, #32]
 800f206:	b30b      	cbz	r3, 800f24c <_dtoa_r+0x794>
 800f208:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	f000 80c6 	beq.w	800f39c <_dtoa_r+0x8e4>
 800f210:	2c00      	cmp	r4, #0
 800f212:	f000 80c0 	beq.w	800f396 <_dtoa_r+0x8de>
 800f216:	4629      	mov	r1, r5
 800f218:	4622      	mov	r2, r4
 800f21a:	4648      	mov	r0, r9
 800f21c:	f000 fc12 	bl	800fa44 <__pow5mult>
 800f220:	9a02      	ldr	r2, [sp, #8]
 800f222:	4601      	mov	r1, r0
 800f224:	4605      	mov	r5, r0
 800f226:	4648      	mov	r0, r9
 800f228:	f000 fb6a 	bl	800f900 <__multiply>
 800f22c:	9902      	ldr	r1, [sp, #8]
 800f22e:	4680      	mov	r8, r0
 800f230:	4648      	mov	r0, r9
 800f232:	f000 fa9b 	bl	800f76c <_Bfree>
 800f236:	9b08      	ldr	r3, [sp, #32]
 800f238:	1b1b      	subs	r3, r3, r4
 800f23a:	9308      	str	r3, [sp, #32]
 800f23c:	f000 80b1 	beq.w	800f3a2 <_dtoa_r+0x8ea>
 800f240:	9a08      	ldr	r2, [sp, #32]
 800f242:	4641      	mov	r1, r8
 800f244:	4648      	mov	r0, r9
 800f246:	f000 fbfd 	bl	800fa44 <__pow5mult>
 800f24a:	9002      	str	r0, [sp, #8]
 800f24c:	2101      	movs	r1, #1
 800f24e:	4648      	mov	r0, r9
 800f250:	f000 fb40 	bl	800f8d4 <__i2b>
 800f254:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f256:	4604      	mov	r4, r0
 800f258:	2b00      	cmp	r3, #0
 800f25a:	f000 81d8 	beq.w	800f60e <_dtoa_r+0xb56>
 800f25e:	461a      	mov	r2, r3
 800f260:	4601      	mov	r1, r0
 800f262:	4648      	mov	r0, r9
 800f264:	f000 fbee 	bl	800fa44 <__pow5mult>
 800f268:	9b07      	ldr	r3, [sp, #28]
 800f26a:	2b01      	cmp	r3, #1
 800f26c:	4604      	mov	r4, r0
 800f26e:	f300 809f 	bgt.w	800f3b0 <_dtoa_r+0x8f8>
 800f272:	9b04      	ldr	r3, [sp, #16]
 800f274:	2b00      	cmp	r3, #0
 800f276:	f040 8097 	bne.w	800f3a8 <_dtoa_r+0x8f0>
 800f27a:	9b05      	ldr	r3, [sp, #20]
 800f27c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f280:	2b00      	cmp	r3, #0
 800f282:	f040 8093 	bne.w	800f3ac <_dtoa_r+0x8f4>
 800f286:	9b05      	ldr	r3, [sp, #20]
 800f288:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f28c:	0d1b      	lsrs	r3, r3, #20
 800f28e:	051b      	lsls	r3, r3, #20
 800f290:	b133      	cbz	r3, 800f2a0 <_dtoa_r+0x7e8>
 800f292:	9b00      	ldr	r3, [sp, #0]
 800f294:	3301      	adds	r3, #1
 800f296:	9300      	str	r3, [sp, #0]
 800f298:	9b06      	ldr	r3, [sp, #24]
 800f29a:	3301      	adds	r3, #1
 800f29c:	9306      	str	r3, [sp, #24]
 800f29e:	2301      	movs	r3, #1
 800f2a0:	9308      	str	r3, [sp, #32]
 800f2a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	f000 81b8 	beq.w	800f61a <_dtoa_r+0xb62>
 800f2aa:	6923      	ldr	r3, [r4, #16]
 800f2ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f2b0:	6918      	ldr	r0, [r3, #16]
 800f2b2:	f000 fac3 	bl	800f83c <__hi0bits>
 800f2b6:	f1c0 0020 	rsb	r0, r0, #32
 800f2ba:	9b06      	ldr	r3, [sp, #24]
 800f2bc:	4418      	add	r0, r3
 800f2be:	f010 001f 	ands.w	r0, r0, #31
 800f2c2:	f000 8082 	beq.w	800f3ca <_dtoa_r+0x912>
 800f2c6:	f1c0 0320 	rsb	r3, r0, #32
 800f2ca:	2b04      	cmp	r3, #4
 800f2cc:	dd73      	ble.n	800f3b6 <_dtoa_r+0x8fe>
 800f2ce:	9b00      	ldr	r3, [sp, #0]
 800f2d0:	f1c0 001c 	rsb	r0, r0, #28
 800f2d4:	4403      	add	r3, r0
 800f2d6:	9300      	str	r3, [sp, #0]
 800f2d8:	9b06      	ldr	r3, [sp, #24]
 800f2da:	4403      	add	r3, r0
 800f2dc:	4406      	add	r6, r0
 800f2de:	9306      	str	r3, [sp, #24]
 800f2e0:	9b00      	ldr	r3, [sp, #0]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	dd05      	ble.n	800f2f2 <_dtoa_r+0x83a>
 800f2e6:	9902      	ldr	r1, [sp, #8]
 800f2e8:	461a      	mov	r2, r3
 800f2ea:	4648      	mov	r0, r9
 800f2ec:	f000 fc04 	bl	800faf8 <__lshift>
 800f2f0:	9002      	str	r0, [sp, #8]
 800f2f2:	9b06      	ldr	r3, [sp, #24]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	dd05      	ble.n	800f304 <_dtoa_r+0x84c>
 800f2f8:	4621      	mov	r1, r4
 800f2fa:	461a      	mov	r2, r3
 800f2fc:	4648      	mov	r0, r9
 800f2fe:	f000 fbfb 	bl	800faf8 <__lshift>
 800f302:	4604      	mov	r4, r0
 800f304:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f306:	2b00      	cmp	r3, #0
 800f308:	d061      	beq.n	800f3ce <_dtoa_r+0x916>
 800f30a:	9802      	ldr	r0, [sp, #8]
 800f30c:	4621      	mov	r1, r4
 800f30e:	f000 fc5f 	bl	800fbd0 <__mcmp>
 800f312:	2800      	cmp	r0, #0
 800f314:	da5b      	bge.n	800f3ce <_dtoa_r+0x916>
 800f316:	2300      	movs	r3, #0
 800f318:	9902      	ldr	r1, [sp, #8]
 800f31a:	220a      	movs	r2, #10
 800f31c:	4648      	mov	r0, r9
 800f31e:	f000 fa47 	bl	800f7b0 <__multadd>
 800f322:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f324:	9002      	str	r0, [sp, #8]
 800f326:	f107 38ff 	add.w	r8, r7, #4294967295
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	f000 8177 	beq.w	800f61e <_dtoa_r+0xb66>
 800f330:	4629      	mov	r1, r5
 800f332:	2300      	movs	r3, #0
 800f334:	220a      	movs	r2, #10
 800f336:	4648      	mov	r0, r9
 800f338:	f000 fa3a 	bl	800f7b0 <__multadd>
 800f33c:	f1bb 0f00 	cmp.w	fp, #0
 800f340:	4605      	mov	r5, r0
 800f342:	dc6f      	bgt.n	800f424 <_dtoa_r+0x96c>
 800f344:	9b07      	ldr	r3, [sp, #28]
 800f346:	2b02      	cmp	r3, #2
 800f348:	dc49      	bgt.n	800f3de <_dtoa_r+0x926>
 800f34a:	e06b      	b.n	800f424 <_dtoa_r+0x96c>
 800f34c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f34e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f352:	e73c      	b.n	800f1ce <_dtoa_r+0x716>
 800f354:	3fe00000 	.word	0x3fe00000
 800f358:	40240000 	.word	0x40240000
 800f35c:	9b03      	ldr	r3, [sp, #12]
 800f35e:	1e5c      	subs	r4, r3, #1
 800f360:	9b08      	ldr	r3, [sp, #32]
 800f362:	42a3      	cmp	r3, r4
 800f364:	db09      	blt.n	800f37a <_dtoa_r+0x8c2>
 800f366:	1b1c      	subs	r4, r3, r4
 800f368:	9b03      	ldr	r3, [sp, #12]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	f6bf af30 	bge.w	800f1d0 <_dtoa_r+0x718>
 800f370:	9b00      	ldr	r3, [sp, #0]
 800f372:	9a03      	ldr	r2, [sp, #12]
 800f374:	1a9e      	subs	r6, r3, r2
 800f376:	2300      	movs	r3, #0
 800f378:	e72b      	b.n	800f1d2 <_dtoa_r+0x71a>
 800f37a:	9b08      	ldr	r3, [sp, #32]
 800f37c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f37e:	9408      	str	r4, [sp, #32]
 800f380:	1ae3      	subs	r3, r4, r3
 800f382:	441a      	add	r2, r3
 800f384:	9e00      	ldr	r6, [sp, #0]
 800f386:	9b03      	ldr	r3, [sp, #12]
 800f388:	920d      	str	r2, [sp, #52]	@ 0x34
 800f38a:	2400      	movs	r4, #0
 800f38c:	e721      	b.n	800f1d2 <_dtoa_r+0x71a>
 800f38e:	9c08      	ldr	r4, [sp, #32]
 800f390:	9e00      	ldr	r6, [sp, #0]
 800f392:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800f394:	e728      	b.n	800f1e8 <_dtoa_r+0x730>
 800f396:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800f39a:	e751      	b.n	800f240 <_dtoa_r+0x788>
 800f39c:	9a08      	ldr	r2, [sp, #32]
 800f39e:	9902      	ldr	r1, [sp, #8]
 800f3a0:	e750      	b.n	800f244 <_dtoa_r+0x78c>
 800f3a2:	f8cd 8008 	str.w	r8, [sp, #8]
 800f3a6:	e751      	b.n	800f24c <_dtoa_r+0x794>
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	e779      	b.n	800f2a0 <_dtoa_r+0x7e8>
 800f3ac:	9b04      	ldr	r3, [sp, #16]
 800f3ae:	e777      	b.n	800f2a0 <_dtoa_r+0x7e8>
 800f3b0:	2300      	movs	r3, #0
 800f3b2:	9308      	str	r3, [sp, #32]
 800f3b4:	e779      	b.n	800f2aa <_dtoa_r+0x7f2>
 800f3b6:	d093      	beq.n	800f2e0 <_dtoa_r+0x828>
 800f3b8:	9a00      	ldr	r2, [sp, #0]
 800f3ba:	331c      	adds	r3, #28
 800f3bc:	441a      	add	r2, r3
 800f3be:	9200      	str	r2, [sp, #0]
 800f3c0:	9a06      	ldr	r2, [sp, #24]
 800f3c2:	441a      	add	r2, r3
 800f3c4:	441e      	add	r6, r3
 800f3c6:	9206      	str	r2, [sp, #24]
 800f3c8:	e78a      	b.n	800f2e0 <_dtoa_r+0x828>
 800f3ca:	4603      	mov	r3, r0
 800f3cc:	e7f4      	b.n	800f3b8 <_dtoa_r+0x900>
 800f3ce:	9b03      	ldr	r3, [sp, #12]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	46b8      	mov	r8, r7
 800f3d4:	dc20      	bgt.n	800f418 <_dtoa_r+0x960>
 800f3d6:	469b      	mov	fp, r3
 800f3d8:	9b07      	ldr	r3, [sp, #28]
 800f3da:	2b02      	cmp	r3, #2
 800f3dc:	dd1e      	ble.n	800f41c <_dtoa_r+0x964>
 800f3de:	f1bb 0f00 	cmp.w	fp, #0
 800f3e2:	f47f adb1 	bne.w	800ef48 <_dtoa_r+0x490>
 800f3e6:	4621      	mov	r1, r4
 800f3e8:	465b      	mov	r3, fp
 800f3ea:	2205      	movs	r2, #5
 800f3ec:	4648      	mov	r0, r9
 800f3ee:	f000 f9df 	bl	800f7b0 <__multadd>
 800f3f2:	4601      	mov	r1, r0
 800f3f4:	4604      	mov	r4, r0
 800f3f6:	9802      	ldr	r0, [sp, #8]
 800f3f8:	f000 fbea 	bl	800fbd0 <__mcmp>
 800f3fc:	2800      	cmp	r0, #0
 800f3fe:	f77f ada3 	ble.w	800ef48 <_dtoa_r+0x490>
 800f402:	4656      	mov	r6, sl
 800f404:	2331      	movs	r3, #49	@ 0x31
 800f406:	f806 3b01 	strb.w	r3, [r6], #1
 800f40a:	f108 0801 	add.w	r8, r8, #1
 800f40e:	e59f      	b.n	800ef50 <_dtoa_r+0x498>
 800f410:	9c03      	ldr	r4, [sp, #12]
 800f412:	46b8      	mov	r8, r7
 800f414:	4625      	mov	r5, r4
 800f416:	e7f4      	b.n	800f402 <_dtoa_r+0x94a>
 800f418:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800f41c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f41e:	2b00      	cmp	r3, #0
 800f420:	f000 8101 	beq.w	800f626 <_dtoa_r+0xb6e>
 800f424:	2e00      	cmp	r6, #0
 800f426:	dd05      	ble.n	800f434 <_dtoa_r+0x97c>
 800f428:	4629      	mov	r1, r5
 800f42a:	4632      	mov	r2, r6
 800f42c:	4648      	mov	r0, r9
 800f42e:	f000 fb63 	bl	800faf8 <__lshift>
 800f432:	4605      	mov	r5, r0
 800f434:	9b08      	ldr	r3, [sp, #32]
 800f436:	2b00      	cmp	r3, #0
 800f438:	d05c      	beq.n	800f4f4 <_dtoa_r+0xa3c>
 800f43a:	6869      	ldr	r1, [r5, #4]
 800f43c:	4648      	mov	r0, r9
 800f43e:	f000 f955 	bl	800f6ec <_Balloc>
 800f442:	4606      	mov	r6, r0
 800f444:	b928      	cbnz	r0, 800f452 <_dtoa_r+0x99a>
 800f446:	4b82      	ldr	r3, [pc, #520]	@ (800f650 <_dtoa_r+0xb98>)
 800f448:	4602      	mov	r2, r0
 800f44a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f44e:	f7ff bb4a 	b.w	800eae6 <_dtoa_r+0x2e>
 800f452:	692a      	ldr	r2, [r5, #16]
 800f454:	3202      	adds	r2, #2
 800f456:	0092      	lsls	r2, r2, #2
 800f458:	f105 010c 	add.w	r1, r5, #12
 800f45c:	300c      	adds	r0, #12
 800f45e:	f7ff fa92 	bl	800e986 <memcpy>
 800f462:	2201      	movs	r2, #1
 800f464:	4631      	mov	r1, r6
 800f466:	4648      	mov	r0, r9
 800f468:	f000 fb46 	bl	800faf8 <__lshift>
 800f46c:	f10a 0301 	add.w	r3, sl, #1
 800f470:	9300      	str	r3, [sp, #0]
 800f472:	eb0a 030b 	add.w	r3, sl, fp
 800f476:	9308      	str	r3, [sp, #32]
 800f478:	9b04      	ldr	r3, [sp, #16]
 800f47a:	f003 0301 	and.w	r3, r3, #1
 800f47e:	462f      	mov	r7, r5
 800f480:	9306      	str	r3, [sp, #24]
 800f482:	4605      	mov	r5, r0
 800f484:	9b00      	ldr	r3, [sp, #0]
 800f486:	9802      	ldr	r0, [sp, #8]
 800f488:	4621      	mov	r1, r4
 800f48a:	f103 3bff 	add.w	fp, r3, #4294967295
 800f48e:	f7ff fa88 	bl	800e9a2 <quorem>
 800f492:	4603      	mov	r3, r0
 800f494:	3330      	adds	r3, #48	@ 0x30
 800f496:	9003      	str	r0, [sp, #12]
 800f498:	4639      	mov	r1, r7
 800f49a:	9802      	ldr	r0, [sp, #8]
 800f49c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f49e:	f000 fb97 	bl	800fbd0 <__mcmp>
 800f4a2:	462a      	mov	r2, r5
 800f4a4:	9004      	str	r0, [sp, #16]
 800f4a6:	4621      	mov	r1, r4
 800f4a8:	4648      	mov	r0, r9
 800f4aa:	f000 fbad 	bl	800fc08 <__mdiff>
 800f4ae:	68c2      	ldr	r2, [r0, #12]
 800f4b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f4b2:	4606      	mov	r6, r0
 800f4b4:	bb02      	cbnz	r2, 800f4f8 <_dtoa_r+0xa40>
 800f4b6:	4601      	mov	r1, r0
 800f4b8:	9802      	ldr	r0, [sp, #8]
 800f4ba:	f000 fb89 	bl	800fbd0 <__mcmp>
 800f4be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f4c0:	4602      	mov	r2, r0
 800f4c2:	4631      	mov	r1, r6
 800f4c4:	4648      	mov	r0, r9
 800f4c6:	920c      	str	r2, [sp, #48]	@ 0x30
 800f4c8:	9309      	str	r3, [sp, #36]	@ 0x24
 800f4ca:	f000 f94f 	bl	800f76c <_Bfree>
 800f4ce:	9b07      	ldr	r3, [sp, #28]
 800f4d0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f4d2:	9e00      	ldr	r6, [sp, #0]
 800f4d4:	ea42 0103 	orr.w	r1, r2, r3
 800f4d8:	9b06      	ldr	r3, [sp, #24]
 800f4da:	4319      	orrs	r1, r3
 800f4dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f4de:	d10d      	bne.n	800f4fc <_dtoa_r+0xa44>
 800f4e0:	2b39      	cmp	r3, #57	@ 0x39
 800f4e2:	d027      	beq.n	800f534 <_dtoa_r+0xa7c>
 800f4e4:	9a04      	ldr	r2, [sp, #16]
 800f4e6:	2a00      	cmp	r2, #0
 800f4e8:	dd01      	ble.n	800f4ee <_dtoa_r+0xa36>
 800f4ea:	9b03      	ldr	r3, [sp, #12]
 800f4ec:	3331      	adds	r3, #49	@ 0x31
 800f4ee:	f88b 3000 	strb.w	r3, [fp]
 800f4f2:	e52e      	b.n	800ef52 <_dtoa_r+0x49a>
 800f4f4:	4628      	mov	r0, r5
 800f4f6:	e7b9      	b.n	800f46c <_dtoa_r+0x9b4>
 800f4f8:	2201      	movs	r2, #1
 800f4fa:	e7e2      	b.n	800f4c2 <_dtoa_r+0xa0a>
 800f4fc:	9904      	ldr	r1, [sp, #16]
 800f4fe:	2900      	cmp	r1, #0
 800f500:	db04      	blt.n	800f50c <_dtoa_r+0xa54>
 800f502:	9807      	ldr	r0, [sp, #28]
 800f504:	4301      	orrs	r1, r0
 800f506:	9806      	ldr	r0, [sp, #24]
 800f508:	4301      	orrs	r1, r0
 800f50a:	d120      	bne.n	800f54e <_dtoa_r+0xa96>
 800f50c:	2a00      	cmp	r2, #0
 800f50e:	ddee      	ble.n	800f4ee <_dtoa_r+0xa36>
 800f510:	9902      	ldr	r1, [sp, #8]
 800f512:	9300      	str	r3, [sp, #0]
 800f514:	2201      	movs	r2, #1
 800f516:	4648      	mov	r0, r9
 800f518:	f000 faee 	bl	800faf8 <__lshift>
 800f51c:	4621      	mov	r1, r4
 800f51e:	9002      	str	r0, [sp, #8]
 800f520:	f000 fb56 	bl	800fbd0 <__mcmp>
 800f524:	2800      	cmp	r0, #0
 800f526:	9b00      	ldr	r3, [sp, #0]
 800f528:	dc02      	bgt.n	800f530 <_dtoa_r+0xa78>
 800f52a:	d1e0      	bne.n	800f4ee <_dtoa_r+0xa36>
 800f52c:	07da      	lsls	r2, r3, #31
 800f52e:	d5de      	bpl.n	800f4ee <_dtoa_r+0xa36>
 800f530:	2b39      	cmp	r3, #57	@ 0x39
 800f532:	d1da      	bne.n	800f4ea <_dtoa_r+0xa32>
 800f534:	2339      	movs	r3, #57	@ 0x39
 800f536:	f88b 3000 	strb.w	r3, [fp]
 800f53a:	4633      	mov	r3, r6
 800f53c:	461e      	mov	r6, r3
 800f53e:	3b01      	subs	r3, #1
 800f540:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f544:	2a39      	cmp	r2, #57	@ 0x39
 800f546:	d04e      	beq.n	800f5e6 <_dtoa_r+0xb2e>
 800f548:	3201      	adds	r2, #1
 800f54a:	701a      	strb	r2, [r3, #0]
 800f54c:	e501      	b.n	800ef52 <_dtoa_r+0x49a>
 800f54e:	2a00      	cmp	r2, #0
 800f550:	dd03      	ble.n	800f55a <_dtoa_r+0xaa2>
 800f552:	2b39      	cmp	r3, #57	@ 0x39
 800f554:	d0ee      	beq.n	800f534 <_dtoa_r+0xa7c>
 800f556:	3301      	adds	r3, #1
 800f558:	e7c9      	b.n	800f4ee <_dtoa_r+0xa36>
 800f55a:	9a00      	ldr	r2, [sp, #0]
 800f55c:	9908      	ldr	r1, [sp, #32]
 800f55e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f562:	428a      	cmp	r2, r1
 800f564:	d028      	beq.n	800f5b8 <_dtoa_r+0xb00>
 800f566:	9902      	ldr	r1, [sp, #8]
 800f568:	2300      	movs	r3, #0
 800f56a:	220a      	movs	r2, #10
 800f56c:	4648      	mov	r0, r9
 800f56e:	f000 f91f 	bl	800f7b0 <__multadd>
 800f572:	42af      	cmp	r7, r5
 800f574:	9002      	str	r0, [sp, #8]
 800f576:	f04f 0300 	mov.w	r3, #0
 800f57a:	f04f 020a 	mov.w	r2, #10
 800f57e:	4639      	mov	r1, r7
 800f580:	4648      	mov	r0, r9
 800f582:	d107      	bne.n	800f594 <_dtoa_r+0xadc>
 800f584:	f000 f914 	bl	800f7b0 <__multadd>
 800f588:	4607      	mov	r7, r0
 800f58a:	4605      	mov	r5, r0
 800f58c:	9b00      	ldr	r3, [sp, #0]
 800f58e:	3301      	adds	r3, #1
 800f590:	9300      	str	r3, [sp, #0]
 800f592:	e777      	b.n	800f484 <_dtoa_r+0x9cc>
 800f594:	f000 f90c 	bl	800f7b0 <__multadd>
 800f598:	4629      	mov	r1, r5
 800f59a:	4607      	mov	r7, r0
 800f59c:	2300      	movs	r3, #0
 800f59e:	220a      	movs	r2, #10
 800f5a0:	4648      	mov	r0, r9
 800f5a2:	f000 f905 	bl	800f7b0 <__multadd>
 800f5a6:	4605      	mov	r5, r0
 800f5a8:	e7f0      	b.n	800f58c <_dtoa_r+0xad4>
 800f5aa:	f1bb 0f00 	cmp.w	fp, #0
 800f5ae:	bfcc      	ite	gt
 800f5b0:	465e      	movgt	r6, fp
 800f5b2:	2601      	movle	r6, #1
 800f5b4:	4456      	add	r6, sl
 800f5b6:	2700      	movs	r7, #0
 800f5b8:	9902      	ldr	r1, [sp, #8]
 800f5ba:	9300      	str	r3, [sp, #0]
 800f5bc:	2201      	movs	r2, #1
 800f5be:	4648      	mov	r0, r9
 800f5c0:	f000 fa9a 	bl	800faf8 <__lshift>
 800f5c4:	4621      	mov	r1, r4
 800f5c6:	9002      	str	r0, [sp, #8]
 800f5c8:	f000 fb02 	bl	800fbd0 <__mcmp>
 800f5cc:	2800      	cmp	r0, #0
 800f5ce:	dcb4      	bgt.n	800f53a <_dtoa_r+0xa82>
 800f5d0:	d102      	bne.n	800f5d8 <_dtoa_r+0xb20>
 800f5d2:	9b00      	ldr	r3, [sp, #0]
 800f5d4:	07db      	lsls	r3, r3, #31
 800f5d6:	d4b0      	bmi.n	800f53a <_dtoa_r+0xa82>
 800f5d8:	4633      	mov	r3, r6
 800f5da:	461e      	mov	r6, r3
 800f5dc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f5e0:	2a30      	cmp	r2, #48	@ 0x30
 800f5e2:	d0fa      	beq.n	800f5da <_dtoa_r+0xb22>
 800f5e4:	e4b5      	b.n	800ef52 <_dtoa_r+0x49a>
 800f5e6:	459a      	cmp	sl, r3
 800f5e8:	d1a8      	bne.n	800f53c <_dtoa_r+0xa84>
 800f5ea:	2331      	movs	r3, #49	@ 0x31
 800f5ec:	f108 0801 	add.w	r8, r8, #1
 800f5f0:	f88a 3000 	strb.w	r3, [sl]
 800f5f4:	e4ad      	b.n	800ef52 <_dtoa_r+0x49a>
 800f5f6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f5f8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800f654 <_dtoa_r+0xb9c>
 800f5fc:	b11b      	cbz	r3, 800f606 <_dtoa_r+0xb4e>
 800f5fe:	f10a 0308 	add.w	r3, sl, #8
 800f602:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800f604:	6013      	str	r3, [r2, #0]
 800f606:	4650      	mov	r0, sl
 800f608:	b017      	add	sp, #92	@ 0x5c
 800f60a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f60e:	9b07      	ldr	r3, [sp, #28]
 800f610:	2b01      	cmp	r3, #1
 800f612:	f77f ae2e 	ble.w	800f272 <_dtoa_r+0x7ba>
 800f616:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f618:	9308      	str	r3, [sp, #32]
 800f61a:	2001      	movs	r0, #1
 800f61c:	e64d      	b.n	800f2ba <_dtoa_r+0x802>
 800f61e:	f1bb 0f00 	cmp.w	fp, #0
 800f622:	f77f aed9 	ble.w	800f3d8 <_dtoa_r+0x920>
 800f626:	4656      	mov	r6, sl
 800f628:	9802      	ldr	r0, [sp, #8]
 800f62a:	4621      	mov	r1, r4
 800f62c:	f7ff f9b9 	bl	800e9a2 <quorem>
 800f630:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800f634:	f806 3b01 	strb.w	r3, [r6], #1
 800f638:	eba6 020a 	sub.w	r2, r6, sl
 800f63c:	4593      	cmp	fp, r2
 800f63e:	ddb4      	ble.n	800f5aa <_dtoa_r+0xaf2>
 800f640:	9902      	ldr	r1, [sp, #8]
 800f642:	2300      	movs	r3, #0
 800f644:	220a      	movs	r2, #10
 800f646:	4648      	mov	r0, r9
 800f648:	f000 f8b2 	bl	800f7b0 <__multadd>
 800f64c:	9002      	str	r0, [sp, #8]
 800f64e:	e7eb      	b.n	800f628 <_dtoa_r+0xb70>
 800f650:	08010710 	.word	0x08010710
 800f654:	08010694 	.word	0x08010694

0800f658 <_free_r>:
 800f658:	b538      	push	{r3, r4, r5, lr}
 800f65a:	4605      	mov	r5, r0
 800f65c:	2900      	cmp	r1, #0
 800f65e:	d041      	beq.n	800f6e4 <_free_r+0x8c>
 800f660:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f664:	1f0c      	subs	r4, r1, #4
 800f666:	2b00      	cmp	r3, #0
 800f668:	bfb8      	it	lt
 800f66a:	18e4      	addlt	r4, r4, r3
 800f66c:	f7fe fb36 	bl	800dcdc <__malloc_lock>
 800f670:	4a1d      	ldr	r2, [pc, #116]	@ (800f6e8 <_free_r+0x90>)
 800f672:	6813      	ldr	r3, [r2, #0]
 800f674:	b933      	cbnz	r3, 800f684 <_free_r+0x2c>
 800f676:	6063      	str	r3, [r4, #4]
 800f678:	6014      	str	r4, [r2, #0]
 800f67a:	4628      	mov	r0, r5
 800f67c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f680:	f7fe bb32 	b.w	800dce8 <__malloc_unlock>
 800f684:	42a3      	cmp	r3, r4
 800f686:	d908      	bls.n	800f69a <_free_r+0x42>
 800f688:	6820      	ldr	r0, [r4, #0]
 800f68a:	1821      	adds	r1, r4, r0
 800f68c:	428b      	cmp	r3, r1
 800f68e:	bf01      	itttt	eq
 800f690:	6819      	ldreq	r1, [r3, #0]
 800f692:	685b      	ldreq	r3, [r3, #4]
 800f694:	1809      	addeq	r1, r1, r0
 800f696:	6021      	streq	r1, [r4, #0]
 800f698:	e7ed      	b.n	800f676 <_free_r+0x1e>
 800f69a:	461a      	mov	r2, r3
 800f69c:	685b      	ldr	r3, [r3, #4]
 800f69e:	b10b      	cbz	r3, 800f6a4 <_free_r+0x4c>
 800f6a0:	42a3      	cmp	r3, r4
 800f6a2:	d9fa      	bls.n	800f69a <_free_r+0x42>
 800f6a4:	6811      	ldr	r1, [r2, #0]
 800f6a6:	1850      	adds	r0, r2, r1
 800f6a8:	42a0      	cmp	r0, r4
 800f6aa:	d10b      	bne.n	800f6c4 <_free_r+0x6c>
 800f6ac:	6820      	ldr	r0, [r4, #0]
 800f6ae:	4401      	add	r1, r0
 800f6b0:	1850      	adds	r0, r2, r1
 800f6b2:	4283      	cmp	r3, r0
 800f6b4:	6011      	str	r1, [r2, #0]
 800f6b6:	d1e0      	bne.n	800f67a <_free_r+0x22>
 800f6b8:	6818      	ldr	r0, [r3, #0]
 800f6ba:	685b      	ldr	r3, [r3, #4]
 800f6bc:	6053      	str	r3, [r2, #4]
 800f6be:	4408      	add	r0, r1
 800f6c0:	6010      	str	r0, [r2, #0]
 800f6c2:	e7da      	b.n	800f67a <_free_r+0x22>
 800f6c4:	d902      	bls.n	800f6cc <_free_r+0x74>
 800f6c6:	230c      	movs	r3, #12
 800f6c8:	602b      	str	r3, [r5, #0]
 800f6ca:	e7d6      	b.n	800f67a <_free_r+0x22>
 800f6cc:	6820      	ldr	r0, [r4, #0]
 800f6ce:	1821      	adds	r1, r4, r0
 800f6d0:	428b      	cmp	r3, r1
 800f6d2:	bf04      	itt	eq
 800f6d4:	6819      	ldreq	r1, [r3, #0]
 800f6d6:	685b      	ldreq	r3, [r3, #4]
 800f6d8:	6063      	str	r3, [r4, #4]
 800f6da:	bf04      	itt	eq
 800f6dc:	1809      	addeq	r1, r1, r0
 800f6de:	6021      	streq	r1, [r4, #0]
 800f6e0:	6054      	str	r4, [r2, #4]
 800f6e2:	e7ca      	b.n	800f67a <_free_r+0x22>
 800f6e4:	bd38      	pop	{r3, r4, r5, pc}
 800f6e6:	bf00      	nop
 800f6e8:	2000fc20 	.word	0x2000fc20

0800f6ec <_Balloc>:
 800f6ec:	b570      	push	{r4, r5, r6, lr}
 800f6ee:	69c6      	ldr	r6, [r0, #28]
 800f6f0:	4604      	mov	r4, r0
 800f6f2:	460d      	mov	r5, r1
 800f6f4:	b976      	cbnz	r6, 800f714 <_Balloc+0x28>
 800f6f6:	2010      	movs	r0, #16
 800f6f8:	f7fe fa3e 	bl	800db78 <malloc>
 800f6fc:	4602      	mov	r2, r0
 800f6fe:	61e0      	str	r0, [r4, #28]
 800f700:	b920      	cbnz	r0, 800f70c <_Balloc+0x20>
 800f702:	4b18      	ldr	r3, [pc, #96]	@ (800f764 <_Balloc+0x78>)
 800f704:	4818      	ldr	r0, [pc, #96]	@ (800f768 <_Balloc+0x7c>)
 800f706:	216b      	movs	r1, #107	@ 0x6b
 800f708:	f000 fc16 	bl	800ff38 <__assert_func>
 800f70c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f710:	6006      	str	r6, [r0, #0]
 800f712:	60c6      	str	r6, [r0, #12]
 800f714:	69e6      	ldr	r6, [r4, #28]
 800f716:	68f3      	ldr	r3, [r6, #12]
 800f718:	b183      	cbz	r3, 800f73c <_Balloc+0x50>
 800f71a:	69e3      	ldr	r3, [r4, #28]
 800f71c:	68db      	ldr	r3, [r3, #12]
 800f71e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f722:	b9b8      	cbnz	r0, 800f754 <_Balloc+0x68>
 800f724:	2101      	movs	r1, #1
 800f726:	fa01 f605 	lsl.w	r6, r1, r5
 800f72a:	1d72      	adds	r2, r6, #5
 800f72c:	0092      	lsls	r2, r2, #2
 800f72e:	4620      	mov	r0, r4
 800f730:	f000 fc20 	bl	800ff74 <_calloc_r>
 800f734:	b160      	cbz	r0, 800f750 <_Balloc+0x64>
 800f736:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f73a:	e00e      	b.n	800f75a <_Balloc+0x6e>
 800f73c:	2221      	movs	r2, #33	@ 0x21
 800f73e:	2104      	movs	r1, #4
 800f740:	4620      	mov	r0, r4
 800f742:	f000 fc17 	bl	800ff74 <_calloc_r>
 800f746:	69e3      	ldr	r3, [r4, #28]
 800f748:	60f0      	str	r0, [r6, #12]
 800f74a:	68db      	ldr	r3, [r3, #12]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d1e4      	bne.n	800f71a <_Balloc+0x2e>
 800f750:	2000      	movs	r0, #0
 800f752:	bd70      	pop	{r4, r5, r6, pc}
 800f754:	6802      	ldr	r2, [r0, #0]
 800f756:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f75a:	2300      	movs	r3, #0
 800f75c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f760:	e7f7      	b.n	800f752 <_Balloc+0x66>
 800f762:	bf00      	nop
 800f764:	080106a1 	.word	0x080106a1
 800f768:	08010721 	.word	0x08010721

0800f76c <_Bfree>:
 800f76c:	b570      	push	{r4, r5, r6, lr}
 800f76e:	69c6      	ldr	r6, [r0, #28]
 800f770:	4605      	mov	r5, r0
 800f772:	460c      	mov	r4, r1
 800f774:	b976      	cbnz	r6, 800f794 <_Bfree+0x28>
 800f776:	2010      	movs	r0, #16
 800f778:	f7fe f9fe 	bl	800db78 <malloc>
 800f77c:	4602      	mov	r2, r0
 800f77e:	61e8      	str	r0, [r5, #28]
 800f780:	b920      	cbnz	r0, 800f78c <_Bfree+0x20>
 800f782:	4b09      	ldr	r3, [pc, #36]	@ (800f7a8 <_Bfree+0x3c>)
 800f784:	4809      	ldr	r0, [pc, #36]	@ (800f7ac <_Bfree+0x40>)
 800f786:	218f      	movs	r1, #143	@ 0x8f
 800f788:	f000 fbd6 	bl	800ff38 <__assert_func>
 800f78c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f790:	6006      	str	r6, [r0, #0]
 800f792:	60c6      	str	r6, [r0, #12]
 800f794:	b13c      	cbz	r4, 800f7a6 <_Bfree+0x3a>
 800f796:	69eb      	ldr	r3, [r5, #28]
 800f798:	6862      	ldr	r2, [r4, #4]
 800f79a:	68db      	ldr	r3, [r3, #12]
 800f79c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f7a0:	6021      	str	r1, [r4, #0]
 800f7a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f7a6:	bd70      	pop	{r4, r5, r6, pc}
 800f7a8:	080106a1 	.word	0x080106a1
 800f7ac:	08010721 	.word	0x08010721

0800f7b0 <__multadd>:
 800f7b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7b4:	690d      	ldr	r5, [r1, #16]
 800f7b6:	4607      	mov	r7, r0
 800f7b8:	460c      	mov	r4, r1
 800f7ba:	461e      	mov	r6, r3
 800f7bc:	f101 0c14 	add.w	ip, r1, #20
 800f7c0:	2000      	movs	r0, #0
 800f7c2:	f8dc 3000 	ldr.w	r3, [ip]
 800f7c6:	b299      	uxth	r1, r3
 800f7c8:	fb02 6101 	mla	r1, r2, r1, r6
 800f7cc:	0c1e      	lsrs	r6, r3, #16
 800f7ce:	0c0b      	lsrs	r3, r1, #16
 800f7d0:	fb02 3306 	mla	r3, r2, r6, r3
 800f7d4:	b289      	uxth	r1, r1
 800f7d6:	3001      	adds	r0, #1
 800f7d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f7dc:	4285      	cmp	r5, r0
 800f7de:	f84c 1b04 	str.w	r1, [ip], #4
 800f7e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f7e6:	dcec      	bgt.n	800f7c2 <__multadd+0x12>
 800f7e8:	b30e      	cbz	r6, 800f82e <__multadd+0x7e>
 800f7ea:	68a3      	ldr	r3, [r4, #8]
 800f7ec:	42ab      	cmp	r3, r5
 800f7ee:	dc19      	bgt.n	800f824 <__multadd+0x74>
 800f7f0:	6861      	ldr	r1, [r4, #4]
 800f7f2:	4638      	mov	r0, r7
 800f7f4:	3101      	adds	r1, #1
 800f7f6:	f7ff ff79 	bl	800f6ec <_Balloc>
 800f7fa:	4680      	mov	r8, r0
 800f7fc:	b928      	cbnz	r0, 800f80a <__multadd+0x5a>
 800f7fe:	4602      	mov	r2, r0
 800f800:	4b0c      	ldr	r3, [pc, #48]	@ (800f834 <__multadd+0x84>)
 800f802:	480d      	ldr	r0, [pc, #52]	@ (800f838 <__multadd+0x88>)
 800f804:	21ba      	movs	r1, #186	@ 0xba
 800f806:	f000 fb97 	bl	800ff38 <__assert_func>
 800f80a:	6922      	ldr	r2, [r4, #16]
 800f80c:	3202      	adds	r2, #2
 800f80e:	f104 010c 	add.w	r1, r4, #12
 800f812:	0092      	lsls	r2, r2, #2
 800f814:	300c      	adds	r0, #12
 800f816:	f7ff f8b6 	bl	800e986 <memcpy>
 800f81a:	4621      	mov	r1, r4
 800f81c:	4638      	mov	r0, r7
 800f81e:	f7ff ffa5 	bl	800f76c <_Bfree>
 800f822:	4644      	mov	r4, r8
 800f824:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f828:	3501      	adds	r5, #1
 800f82a:	615e      	str	r6, [r3, #20]
 800f82c:	6125      	str	r5, [r4, #16]
 800f82e:	4620      	mov	r0, r4
 800f830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f834:	08010710 	.word	0x08010710
 800f838:	08010721 	.word	0x08010721

0800f83c <__hi0bits>:
 800f83c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f840:	4603      	mov	r3, r0
 800f842:	bf36      	itet	cc
 800f844:	0403      	lslcc	r3, r0, #16
 800f846:	2000      	movcs	r0, #0
 800f848:	2010      	movcc	r0, #16
 800f84a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f84e:	bf3c      	itt	cc
 800f850:	021b      	lslcc	r3, r3, #8
 800f852:	3008      	addcc	r0, #8
 800f854:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f858:	bf3c      	itt	cc
 800f85a:	011b      	lslcc	r3, r3, #4
 800f85c:	3004      	addcc	r0, #4
 800f85e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f862:	bf3c      	itt	cc
 800f864:	009b      	lslcc	r3, r3, #2
 800f866:	3002      	addcc	r0, #2
 800f868:	2b00      	cmp	r3, #0
 800f86a:	db05      	blt.n	800f878 <__hi0bits+0x3c>
 800f86c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f870:	f100 0001 	add.w	r0, r0, #1
 800f874:	bf08      	it	eq
 800f876:	2020      	moveq	r0, #32
 800f878:	4770      	bx	lr

0800f87a <__lo0bits>:
 800f87a:	6803      	ldr	r3, [r0, #0]
 800f87c:	4602      	mov	r2, r0
 800f87e:	f013 0007 	ands.w	r0, r3, #7
 800f882:	d00b      	beq.n	800f89c <__lo0bits+0x22>
 800f884:	07d9      	lsls	r1, r3, #31
 800f886:	d421      	bmi.n	800f8cc <__lo0bits+0x52>
 800f888:	0798      	lsls	r0, r3, #30
 800f88a:	bf49      	itett	mi
 800f88c:	085b      	lsrmi	r3, r3, #1
 800f88e:	089b      	lsrpl	r3, r3, #2
 800f890:	2001      	movmi	r0, #1
 800f892:	6013      	strmi	r3, [r2, #0]
 800f894:	bf5c      	itt	pl
 800f896:	6013      	strpl	r3, [r2, #0]
 800f898:	2002      	movpl	r0, #2
 800f89a:	4770      	bx	lr
 800f89c:	b299      	uxth	r1, r3
 800f89e:	b909      	cbnz	r1, 800f8a4 <__lo0bits+0x2a>
 800f8a0:	0c1b      	lsrs	r3, r3, #16
 800f8a2:	2010      	movs	r0, #16
 800f8a4:	b2d9      	uxtb	r1, r3
 800f8a6:	b909      	cbnz	r1, 800f8ac <__lo0bits+0x32>
 800f8a8:	3008      	adds	r0, #8
 800f8aa:	0a1b      	lsrs	r3, r3, #8
 800f8ac:	0719      	lsls	r1, r3, #28
 800f8ae:	bf04      	itt	eq
 800f8b0:	091b      	lsreq	r3, r3, #4
 800f8b2:	3004      	addeq	r0, #4
 800f8b4:	0799      	lsls	r1, r3, #30
 800f8b6:	bf04      	itt	eq
 800f8b8:	089b      	lsreq	r3, r3, #2
 800f8ba:	3002      	addeq	r0, #2
 800f8bc:	07d9      	lsls	r1, r3, #31
 800f8be:	d403      	bmi.n	800f8c8 <__lo0bits+0x4e>
 800f8c0:	085b      	lsrs	r3, r3, #1
 800f8c2:	f100 0001 	add.w	r0, r0, #1
 800f8c6:	d003      	beq.n	800f8d0 <__lo0bits+0x56>
 800f8c8:	6013      	str	r3, [r2, #0]
 800f8ca:	4770      	bx	lr
 800f8cc:	2000      	movs	r0, #0
 800f8ce:	4770      	bx	lr
 800f8d0:	2020      	movs	r0, #32
 800f8d2:	4770      	bx	lr

0800f8d4 <__i2b>:
 800f8d4:	b510      	push	{r4, lr}
 800f8d6:	460c      	mov	r4, r1
 800f8d8:	2101      	movs	r1, #1
 800f8da:	f7ff ff07 	bl	800f6ec <_Balloc>
 800f8de:	4602      	mov	r2, r0
 800f8e0:	b928      	cbnz	r0, 800f8ee <__i2b+0x1a>
 800f8e2:	4b05      	ldr	r3, [pc, #20]	@ (800f8f8 <__i2b+0x24>)
 800f8e4:	4805      	ldr	r0, [pc, #20]	@ (800f8fc <__i2b+0x28>)
 800f8e6:	f240 1145 	movw	r1, #325	@ 0x145
 800f8ea:	f000 fb25 	bl	800ff38 <__assert_func>
 800f8ee:	2301      	movs	r3, #1
 800f8f0:	6144      	str	r4, [r0, #20]
 800f8f2:	6103      	str	r3, [r0, #16]
 800f8f4:	bd10      	pop	{r4, pc}
 800f8f6:	bf00      	nop
 800f8f8:	08010710 	.word	0x08010710
 800f8fc:	08010721 	.word	0x08010721

0800f900 <__multiply>:
 800f900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f904:	4617      	mov	r7, r2
 800f906:	690a      	ldr	r2, [r1, #16]
 800f908:	693b      	ldr	r3, [r7, #16]
 800f90a:	429a      	cmp	r2, r3
 800f90c:	bfa8      	it	ge
 800f90e:	463b      	movge	r3, r7
 800f910:	4689      	mov	r9, r1
 800f912:	bfa4      	itt	ge
 800f914:	460f      	movge	r7, r1
 800f916:	4699      	movge	r9, r3
 800f918:	693d      	ldr	r5, [r7, #16]
 800f91a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f91e:	68bb      	ldr	r3, [r7, #8]
 800f920:	6879      	ldr	r1, [r7, #4]
 800f922:	eb05 060a 	add.w	r6, r5, sl
 800f926:	42b3      	cmp	r3, r6
 800f928:	b085      	sub	sp, #20
 800f92a:	bfb8      	it	lt
 800f92c:	3101      	addlt	r1, #1
 800f92e:	f7ff fedd 	bl	800f6ec <_Balloc>
 800f932:	b930      	cbnz	r0, 800f942 <__multiply+0x42>
 800f934:	4602      	mov	r2, r0
 800f936:	4b41      	ldr	r3, [pc, #260]	@ (800fa3c <__multiply+0x13c>)
 800f938:	4841      	ldr	r0, [pc, #260]	@ (800fa40 <__multiply+0x140>)
 800f93a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f93e:	f000 fafb 	bl	800ff38 <__assert_func>
 800f942:	f100 0414 	add.w	r4, r0, #20
 800f946:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800f94a:	4623      	mov	r3, r4
 800f94c:	2200      	movs	r2, #0
 800f94e:	4573      	cmp	r3, lr
 800f950:	d320      	bcc.n	800f994 <__multiply+0x94>
 800f952:	f107 0814 	add.w	r8, r7, #20
 800f956:	f109 0114 	add.w	r1, r9, #20
 800f95a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800f95e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800f962:	9302      	str	r3, [sp, #8]
 800f964:	1beb      	subs	r3, r5, r7
 800f966:	3b15      	subs	r3, #21
 800f968:	f023 0303 	bic.w	r3, r3, #3
 800f96c:	3304      	adds	r3, #4
 800f96e:	3715      	adds	r7, #21
 800f970:	42bd      	cmp	r5, r7
 800f972:	bf38      	it	cc
 800f974:	2304      	movcc	r3, #4
 800f976:	9301      	str	r3, [sp, #4]
 800f978:	9b02      	ldr	r3, [sp, #8]
 800f97a:	9103      	str	r1, [sp, #12]
 800f97c:	428b      	cmp	r3, r1
 800f97e:	d80c      	bhi.n	800f99a <__multiply+0x9a>
 800f980:	2e00      	cmp	r6, #0
 800f982:	dd03      	ble.n	800f98c <__multiply+0x8c>
 800f984:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d055      	beq.n	800fa38 <__multiply+0x138>
 800f98c:	6106      	str	r6, [r0, #16]
 800f98e:	b005      	add	sp, #20
 800f990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f994:	f843 2b04 	str.w	r2, [r3], #4
 800f998:	e7d9      	b.n	800f94e <__multiply+0x4e>
 800f99a:	f8b1 a000 	ldrh.w	sl, [r1]
 800f99e:	f1ba 0f00 	cmp.w	sl, #0
 800f9a2:	d01f      	beq.n	800f9e4 <__multiply+0xe4>
 800f9a4:	46c4      	mov	ip, r8
 800f9a6:	46a1      	mov	r9, r4
 800f9a8:	2700      	movs	r7, #0
 800f9aa:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f9ae:	f8d9 3000 	ldr.w	r3, [r9]
 800f9b2:	fa1f fb82 	uxth.w	fp, r2
 800f9b6:	b29b      	uxth	r3, r3
 800f9b8:	fb0a 330b 	mla	r3, sl, fp, r3
 800f9bc:	443b      	add	r3, r7
 800f9be:	f8d9 7000 	ldr.w	r7, [r9]
 800f9c2:	0c12      	lsrs	r2, r2, #16
 800f9c4:	0c3f      	lsrs	r7, r7, #16
 800f9c6:	fb0a 7202 	mla	r2, sl, r2, r7
 800f9ca:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800f9ce:	b29b      	uxth	r3, r3
 800f9d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f9d4:	4565      	cmp	r5, ip
 800f9d6:	f849 3b04 	str.w	r3, [r9], #4
 800f9da:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800f9de:	d8e4      	bhi.n	800f9aa <__multiply+0xaa>
 800f9e0:	9b01      	ldr	r3, [sp, #4]
 800f9e2:	50e7      	str	r7, [r4, r3]
 800f9e4:	9b03      	ldr	r3, [sp, #12]
 800f9e6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f9ea:	3104      	adds	r1, #4
 800f9ec:	f1b9 0f00 	cmp.w	r9, #0
 800f9f0:	d020      	beq.n	800fa34 <__multiply+0x134>
 800f9f2:	6823      	ldr	r3, [r4, #0]
 800f9f4:	4647      	mov	r7, r8
 800f9f6:	46a4      	mov	ip, r4
 800f9f8:	f04f 0a00 	mov.w	sl, #0
 800f9fc:	f8b7 b000 	ldrh.w	fp, [r7]
 800fa00:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800fa04:	fb09 220b 	mla	r2, r9, fp, r2
 800fa08:	4452      	add	r2, sl
 800fa0a:	b29b      	uxth	r3, r3
 800fa0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fa10:	f84c 3b04 	str.w	r3, [ip], #4
 800fa14:	f857 3b04 	ldr.w	r3, [r7], #4
 800fa18:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fa1c:	f8bc 3000 	ldrh.w	r3, [ip]
 800fa20:	fb09 330a 	mla	r3, r9, sl, r3
 800fa24:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800fa28:	42bd      	cmp	r5, r7
 800fa2a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fa2e:	d8e5      	bhi.n	800f9fc <__multiply+0xfc>
 800fa30:	9a01      	ldr	r2, [sp, #4]
 800fa32:	50a3      	str	r3, [r4, r2]
 800fa34:	3404      	adds	r4, #4
 800fa36:	e79f      	b.n	800f978 <__multiply+0x78>
 800fa38:	3e01      	subs	r6, #1
 800fa3a:	e7a1      	b.n	800f980 <__multiply+0x80>
 800fa3c:	08010710 	.word	0x08010710
 800fa40:	08010721 	.word	0x08010721

0800fa44 <__pow5mult>:
 800fa44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa48:	4615      	mov	r5, r2
 800fa4a:	f012 0203 	ands.w	r2, r2, #3
 800fa4e:	4607      	mov	r7, r0
 800fa50:	460e      	mov	r6, r1
 800fa52:	d007      	beq.n	800fa64 <__pow5mult+0x20>
 800fa54:	4c25      	ldr	r4, [pc, #148]	@ (800faec <__pow5mult+0xa8>)
 800fa56:	3a01      	subs	r2, #1
 800fa58:	2300      	movs	r3, #0
 800fa5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fa5e:	f7ff fea7 	bl	800f7b0 <__multadd>
 800fa62:	4606      	mov	r6, r0
 800fa64:	10ad      	asrs	r5, r5, #2
 800fa66:	d03d      	beq.n	800fae4 <__pow5mult+0xa0>
 800fa68:	69fc      	ldr	r4, [r7, #28]
 800fa6a:	b97c      	cbnz	r4, 800fa8c <__pow5mult+0x48>
 800fa6c:	2010      	movs	r0, #16
 800fa6e:	f7fe f883 	bl	800db78 <malloc>
 800fa72:	4602      	mov	r2, r0
 800fa74:	61f8      	str	r0, [r7, #28]
 800fa76:	b928      	cbnz	r0, 800fa84 <__pow5mult+0x40>
 800fa78:	4b1d      	ldr	r3, [pc, #116]	@ (800faf0 <__pow5mult+0xac>)
 800fa7a:	481e      	ldr	r0, [pc, #120]	@ (800faf4 <__pow5mult+0xb0>)
 800fa7c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800fa80:	f000 fa5a 	bl	800ff38 <__assert_func>
 800fa84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fa88:	6004      	str	r4, [r0, #0]
 800fa8a:	60c4      	str	r4, [r0, #12]
 800fa8c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800fa90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fa94:	b94c      	cbnz	r4, 800faaa <__pow5mult+0x66>
 800fa96:	f240 2171 	movw	r1, #625	@ 0x271
 800fa9a:	4638      	mov	r0, r7
 800fa9c:	f7ff ff1a 	bl	800f8d4 <__i2b>
 800faa0:	2300      	movs	r3, #0
 800faa2:	f8c8 0008 	str.w	r0, [r8, #8]
 800faa6:	4604      	mov	r4, r0
 800faa8:	6003      	str	r3, [r0, #0]
 800faaa:	f04f 0900 	mov.w	r9, #0
 800faae:	07eb      	lsls	r3, r5, #31
 800fab0:	d50a      	bpl.n	800fac8 <__pow5mult+0x84>
 800fab2:	4631      	mov	r1, r6
 800fab4:	4622      	mov	r2, r4
 800fab6:	4638      	mov	r0, r7
 800fab8:	f7ff ff22 	bl	800f900 <__multiply>
 800fabc:	4631      	mov	r1, r6
 800fabe:	4680      	mov	r8, r0
 800fac0:	4638      	mov	r0, r7
 800fac2:	f7ff fe53 	bl	800f76c <_Bfree>
 800fac6:	4646      	mov	r6, r8
 800fac8:	106d      	asrs	r5, r5, #1
 800faca:	d00b      	beq.n	800fae4 <__pow5mult+0xa0>
 800facc:	6820      	ldr	r0, [r4, #0]
 800face:	b938      	cbnz	r0, 800fae0 <__pow5mult+0x9c>
 800fad0:	4622      	mov	r2, r4
 800fad2:	4621      	mov	r1, r4
 800fad4:	4638      	mov	r0, r7
 800fad6:	f7ff ff13 	bl	800f900 <__multiply>
 800fada:	6020      	str	r0, [r4, #0]
 800fadc:	f8c0 9000 	str.w	r9, [r0]
 800fae0:	4604      	mov	r4, r0
 800fae2:	e7e4      	b.n	800faae <__pow5mult+0x6a>
 800fae4:	4630      	mov	r0, r6
 800fae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800faea:	bf00      	nop
 800faec:	080107d4 	.word	0x080107d4
 800faf0:	080106a1 	.word	0x080106a1
 800faf4:	08010721 	.word	0x08010721

0800faf8 <__lshift>:
 800faf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fafc:	460c      	mov	r4, r1
 800fafe:	6849      	ldr	r1, [r1, #4]
 800fb00:	6923      	ldr	r3, [r4, #16]
 800fb02:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fb06:	68a3      	ldr	r3, [r4, #8]
 800fb08:	4607      	mov	r7, r0
 800fb0a:	4691      	mov	r9, r2
 800fb0c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fb10:	f108 0601 	add.w	r6, r8, #1
 800fb14:	42b3      	cmp	r3, r6
 800fb16:	db0b      	blt.n	800fb30 <__lshift+0x38>
 800fb18:	4638      	mov	r0, r7
 800fb1a:	f7ff fde7 	bl	800f6ec <_Balloc>
 800fb1e:	4605      	mov	r5, r0
 800fb20:	b948      	cbnz	r0, 800fb36 <__lshift+0x3e>
 800fb22:	4602      	mov	r2, r0
 800fb24:	4b28      	ldr	r3, [pc, #160]	@ (800fbc8 <__lshift+0xd0>)
 800fb26:	4829      	ldr	r0, [pc, #164]	@ (800fbcc <__lshift+0xd4>)
 800fb28:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800fb2c:	f000 fa04 	bl	800ff38 <__assert_func>
 800fb30:	3101      	adds	r1, #1
 800fb32:	005b      	lsls	r3, r3, #1
 800fb34:	e7ee      	b.n	800fb14 <__lshift+0x1c>
 800fb36:	2300      	movs	r3, #0
 800fb38:	f100 0114 	add.w	r1, r0, #20
 800fb3c:	f100 0210 	add.w	r2, r0, #16
 800fb40:	4618      	mov	r0, r3
 800fb42:	4553      	cmp	r3, sl
 800fb44:	db33      	blt.n	800fbae <__lshift+0xb6>
 800fb46:	6920      	ldr	r0, [r4, #16]
 800fb48:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fb4c:	f104 0314 	add.w	r3, r4, #20
 800fb50:	f019 091f 	ands.w	r9, r9, #31
 800fb54:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fb58:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fb5c:	d02b      	beq.n	800fbb6 <__lshift+0xbe>
 800fb5e:	f1c9 0e20 	rsb	lr, r9, #32
 800fb62:	468a      	mov	sl, r1
 800fb64:	2200      	movs	r2, #0
 800fb66:	6818      	ldr	r0, [r3, #0]
 800fb68:	fa00 f009 	lsl.w	r0, r0, r9
 800fb6c:	4310      	orrs	r0, r2
 800fb6e:	f84a 0b04 	str.w	r0, [sl], #4
 800fb72:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb76:	459c      	cmp	ip, r3
 800fb78:	fa22 f20e 	lsr.w	r2, r2, lr
 800fb7c:	d8f3      	bhi.n	800fb66 <__lshift+0x6e>
 800fb7e:	ebac 0304 	sub.w	r3, ip, r4
 800fb82:	3b15      	subs	r3, #21
 800fb84:	f023 0303 	bic.w	r3, r3, #3
 800fb88:	3304      	adds	r3, #4
 800fb8a:	f104 0015 	add.w	r0, r4, #21
 800fb8e:	4560      	cmp	r0, ip
 800fb90:	bf88      	it	hi
 800fb92:	2304      	movhi	r3, #4
 800fb94:	50ca      	str	r2, [r1, r3]
 800fb96:	b10a      	cbz	r2, 800fb9c <__lshift+0xa4>
 800fb98:	f108 0602 	add.w	r6, r8, #2
 800fb9c:	3e01      	subs	r6, #1
 800fb9e:	4638      	mov	r0, r7
 800fba0:	612e      	str	r6, [r5, #16]
 800fba2:	4621      	mov	r1, r4
 800fba4:	f7ff fde2 	bl	800f76c <_Bfree>
 800fba8:	4628      	mov	r0, r5
 800fbaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbae:	f842 0f04 	str.w	r0, [r2, #4]!
 800fbb2:	3301      	adds	r3, #1
 800fbb4:	e7c5      	b.n	800fb42 <__lshift+0x4a>
 800fbb6:	3904      	subs	r1, #4
 800fbb8:	f853 2b04 	ldr.w	r2, [r3], #4
 800fbbc:	f841 2f04 	str.w	r2, [r1, #4]!
 800fbc0:	459c      	cmp	ip, r3
 800fbc2:	d8f9      	bhi.n	800fbb8 <__lshift+0xc0>
 800fbc4:	e7ea      	b.n	800fb9c <__lshift+0xa4>
 800fbc6:	bf00      	nop
 800fbc8:	08010710 	.word	0x08010710
 800fbcc:	08010721 	.word	0x08010721

0800fbd0 <__mcmp>:
 800fbd0:	690a      	ldr	r2, [r1, #16]
 800fbd2:	4603      	mov	r3, r0
 800fbd4:	6900      	ldr	r0, [r0, #16]
 800fbd6:	1a80      	subs	r0, r0, r2
 800fbd8:	b530      	push	{r4, r5, lr}
 800fbda:	d10e      	bne.n	800fbfa <__mcmp+0x2a>
 800fbdc:	3314      	adds	r3, #20
 800fbde:	3114      	adds	r1, #20
 800fbe0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800fbe4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800fbe8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fbec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fbf0:	4295      	cmp	r5, r2
 800fbf2:	d003      	beq.n	800fbfc <__mcmp+0x2c>
 800fbf4:	d205      	bcs.n	800fc02 <__mcmp+0x32>
 800fbf6:	f04f 30ff 	mov.w	r0, #4294967295
 800fbfa:	bd30      	pop	{r4, r5, pc}
 800fbfc:	42a3      	cmp	r3, r4
 800fbfe:	d3f3      	bcc.n	800fbe8 <__mcmp+0x18>
 800fc00:	e7fb      	b.n	800fbfa <__mcmp+0x2a>
 800fc02:	2001      	movs	r0, #1
 800fc04:	e7f9      	b.n	800fbfa <__mcmp+0x2a>
	...

0800fc08 <__mdiff>:
 800fc08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc0c:	4689      	mov	r9, r1
 800fc0e:	4606      	mov	r6, r0
 800fc10:	4611      	mov	r1, r2
 800fc12:	4648      	mov	r0, r9
 800fc14:	4614      	mov	r4, r2
 800fc16:	f7ff ffdb 	bl	800fbd0 <__mcmp>
 800fc1a:	1e05      	subs	r5, r0, #0
 800fc1c:	d112      	bne.n	800fc44 <__mdiff+0x3c>
 800fc1e:	4629      	mov	r1, r5
 800fc20:	4630      	mov	r0, r6
 800fc22:	f7ff fd63 	bl	800f6ec <_Balloc>
 800fc26:	4602      	mov	r2, r0
 800fc28:	b928      	cbnz	r0, 800fc36 <__mdiff+0x2e>
 800fc2a:	4b3f      	ldr	r3, [pc, #252]	@ (800fd28 <__mdiff+0x120>)
 800fc2c:	f240 2137 	movw	r1, #567	@ 0x237
 800fc30:	483e      	ldr	r0, [pc, #248]	@ (800fd2c <__mdiff+0x124>)
 800fc32:	f000 f981 	bl	800ff38 <__assert_func>
 800fc36:	2301      	movs	r3, #1
 800fc38:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fc3c:	4610      	mov	r0, r2
 800fc3e:	b003      	add	sp, #12
 800fc40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc44:	bfbc      	itt	lt
 800fc46:	464b      	movlt	r3, r9
 800fc48:	46a1      	movlt	r9, r4
 800fc4a:	4630      	mov	r0, r6
 800fc4c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800fc50:	bfba      	itte	lt
 800fc52:	461c      	movlt	r4, r3
 800fc54:	2501      	movlt	r5, #1
 800fc56:	2500      	movge	r5, #0
 800fc58:	f7ff fd48 	bl	800f6ec <_Balloc>
 800fc5c:	4602      	mov	r2, r0
 800fc5e:	b918      	cbnz	r0, 800fc68 <__mdiff+0x60>
 800fc60:	4b31      	ldr	r3, [pc, #196]	@ (800fd28 <__mdiff+0x120>)
 800fc62:	f240 2145 	movw	r1, #581	@ 0x245
 800fc66:	e7e3      	b.n	800fc30 <__mdiff+0x28>
 800fc68:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800fc6c:	6926      	ldr	r6, [r4, #16]
 800fc6e:	60c5      	str	r5, [r0, #12]
 800fc70:	f109 0310 	add.w	r3, r9, #16
 800fc74:	f109 0514 	add.w	r5, r9, #20
 800fc78:	f104 0e14 	add.w	lr, r4, #20
 800fc7c:	f100 0b14 	add.w	fp, r0, #20
 800fc80:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800fc84:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800fc88:	9301      	str	r3, [sp, #4]
 800fc8a:	46d9      	mov	r9, fp
 800fc8c:	f04f 0c00 	mov.w	ip, #0
 800fc90:	9b01      	ldr	r3, [sp, #4]
 800fc92:	f85e 0b04 	ldr.w	r0, [lr], #4
 800fc96:	f853 af04 	ldr.w	sl, [r3, #4]!
 800fc9a:	9301      	str	r3, [sp, #4]
 800fc9c:	fa1f f38a 	uxth.w	r3, sl
 800fca0:	4619      	mov	r1, r3
 800fca2:	b283      	uxth	r3, r0
 800fca4:	1acb      	subs	r3, r1, r3
 800fca6:	0c00      	lsrs	r0, r0, #16
 800fca8:	4463      	add	r3, ip
 800fcaa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800fcae:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800fcb2:	b29b      	uxth	r3, r3
 800fcb4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800fcb8:	4576      	cmp	r6, lr
 800fcba:	f849 3b04 	str.w	r3, [r9], #4
 800fcbe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fcc2:	d8e5      	bhi.n	800fc90 <__mdiff+0x88>
 800fcc4:	1b33      	subs	r3, r6, r4
 800fcc6:	3b15      	subs	r3, #21
 800fcc8:	f023 0303 	bic.w	r3, r3, #3
 800fccc:	3415      	adds	r4, #21
 800fcce:	3304      	adds	r3, #4
 800fcd0:	42a6      	cmp	r6, r4
 800fcd2:	bf38      	it	cc
 800fcd4:	2304      	movcc	r3, #4
 800fcd6:	441d      	add	r5, r3
 800fcd8:	445b      	add	r3, fp
 800fcda:	461e      	mov	r6, r3
 800fcdc:	462c      	mov	r4, r5
 800fcde:	4544      	cmp	r4, r8
 800fce0:	d30e      	bcc.n	800fd00 <__mdiff+0xf8>
 800fce2:	f108 0103 	add.w	r1, r8, #3
 800fce6:	1b49      	subs	r1, r1, r5
 800fce8:	f021 0103 	bic.w	r1, r1, #3
 800fcec:	3d03      	subs	r5, #3
 800fcee:	45a8      	cmp	r8, r5
 800fcf0:	bf38      	it	cc
 800fcf2:	2100      	movcc	r1, #0
 800fcf4:	440b      	add	r3, r1
 800fcf6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fcfa:	b191      	cbz	r1, 800fd22 <__mdiff+0x11a>
 800fcfc:	6117      	str	r7, [r2, #16]
 800fcfe:	e79d      	b.n	800fc3c <__mdiff+0x34>
 800fd00:	f854 1b04 	ldr.w	r1, [r4], #4
 800fd04:	46e6      	mov	lr, ip
 800fd06:	0c08      	lsrs	r0, r1, #16
 800fd08:	fa1c fc81 	uxtah	ip, ip, r1
 800fd0c:	4471      	add	r1, lr
 800fd0e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800fd12:	b289      	uxth	r1, r1
 800fd14:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800fd18:	f846 1b04 	str.w	r1, [r6], #4
 800fd1c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fd20:	e7dd      	b.n	800fcde <__mdiff+0xd6>
 800fd22:	3f01      	subs	r7, #1
 800fd24:	e7e7      	b.n	800fcf6 <__mdiff+0xee>
 800fd26:	bf00      	nop
 800fd28:	08010710 	.word	0x08010710
 800fd2c:	08010721 	.word	0x08010721

0800fd30 <__d2b>:
 800fd30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fd34:	460f      	mov	r7, r1
 800fd36:	2101      	movs	r1, #1
 800fd38:	ec59 8b10 	vmov	r8, r9, d0
 800fd3c:	4616      	mov	r6, r2
 800fd3e:	f7ff fcd5 	bl	800f6ec <_Balloc>
 800fd42:	4604      	mov	r4, r0
 800fd44:	b930      	cbnz	r0, 800fd54 <__d2b+0x24>
 800fd46:	4602      	mov	r2, r0
 800fd48:	4b23      	ldr	r3, [pc, #140]	@ (800fdd8 <__d2b+0xa8>)
 800fd4a:	4824      	ldr	r0, [pc, #144]	@ (800fddc <__d2b+0xac>)
 800fd4c:	f240 310f 	movw	r1, #783	@ 0x30f
 800fd50:	f000 f8f2 	bl	800ff38 <__assert_func>
 800fd54:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fd58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fd5c:	b10d      	cbz	r5, 800fd62 <__d2b+0x32>
 800fd5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fd62:	9301      	str	r3, [sp, #4]
 800fd64:	f1b8 0300 	subs.w	r3, r8, #0
 800fd68:	d023      	beq.n	800fdb2 <__d2b+0x82>
 800fd6a:	4668      	mov	r0, sp
 800fd6c:	9300      	str	r3, [sp, #0]
 800fd6e:	f7ff fd84 	bl	800f87a <__lo0bits>
 800fd72:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fd76:	b1d0      	cbz	r0, 800fdae <__d2b+0x7e>
 800fd78:	f1c0 0320 	rsb	r3, r0, #32
 800fd7c:	fa02 f303 	lsl.w	r3, r2, r3
 800fd80:	430b      	orrs	r3, r1
 800fd82:	40c2      	lsrs	r2, r0
 800fd84:	6163      	str	r3, [r4, #20]
 800fd86:	9201      	str	r2, [sp, #4]
 800fd88:	9b01      	ldr	r3, [sp, #4]
 800fd8a:	61a3      	str	r3, [r4, #24]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	bf0c      	ite	eq
 800fd90:	2201      	moveq	r2, #1
 800fd92:	2202      	movne	r2, #2
 800fd94:	6122      	str	r2, [r4, #16]
 800fd96:	b1a5      	cbz	r5, 800fdc2 <__d2b+0x92>
 800fd98:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800fd9c:	4405      	add	r5, r0
 800fd9e:	603d      	str	r5, [r7, #0]
 800fda0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800fda4:	6030      	str	r0, [r6, #0]
 800fda6:	4620      	mov	r0, r4
 800fda8:	b003      	add	sp, #12
 800fdaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fdae:	6161      	str	r1, [r4, #20]
 800fdb0:	e7ea      	b.n	800fd88 <__d2b+0x58>
 800fdb2:	a801      	add	r0, sp, #4
 800fdb4:	f7ff fd61 	bl	800f87a <__lo0bits>
 800fdb8:	9b01      	ldr	r3, [sp, #4]
 800fdba:	6163      	str	r3, [r4, #20]
 800fdbc:	3020      	adds	r0, #32
 800fdbe:	2201      	movs	r2, #1
 800fdc0:	e7e8      	b.n	800fd94 <__d2b+0x64>
 800fdc2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fdc6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800fdca:	6038      	str	r0, [r7, #0]
 800fdcc:	6918      	ldr	r0, [r3, #16]
 800fdce:	f7ff fd35 	bl	800f83c <__hi0bits>
 800fdd2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fdd6:	e7e5      	b.n	800fda4 <__d2b+0x74>
 800fdd8:	08010710 	.word	0x08010710
 800fddc:	08010721 	.word	0x08010721

0800fde0 <__sflush_r>:
 800fde0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fde4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fde8:	0716      	lsls	r6, r2, #28
 800fdea:	4605      	mov	r5, r0
 800fdec:	460c      	mov	r4, r1
 800fdee:	d454      	bmi.n	800fe9a <__sflush_r+0xba>
 800fdf0:	684b      	ldr	r3, [r1, #4]
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	dc02      	bgt.n	800fdfc <__sflush_r+0x1c>
 800fdf6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	dd48      	ble.n	800fe8e <__sflush_r+0xae>
 800fdfc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fdfe:	2e00      	cmp	r6, #0
 800fe00:	d045      	beq.n	800fe8e <__sflush_r+0xae>
 800fe02:	2300      	movs	r3, #0
 800fe04:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800fe08:	682f      	ldr	r7, [r5, #0]
 800fe0a:	6a21      	ldr	r1, [r4, #32]
 800fe0c:	602b      	str	r3, [r5, #0]
 800fe0e:	d030      	beq.n	800fe72 <__sflush_r+0x92>
 800fe10:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fe12:	89a3      	ldrh	r3, [r4, #12]
 800fe14:	0759      	lsls	r1, r3, #29
 800fe16:	d505      	bpl.n	800fe24 <__sflush_r+0x44>
 800fe18:	6863      	ldr	r3, [r4, #4]
 800fe1a:	1ad2      	subs	r2, r2, r3
 800fe1c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fe1e:	b10b      	cbz	r3, 800fe24 <__sflush_r+0x44>
 800fe20:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fe22:	1ad2      	subs	r2, r2, r3
 800fe24:	2300      	movs	r3, #0
 800fe26:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fe28:	6a21      	ldr	r1, [r4, #32]
 800fe2a:	4628      	mov	r0, r5
 800fe2c:	47b0      	blx	r6
 800fe2e:	1c43      	adds	r3, r0, #1
 800fe30:	89a3      	ldrh	r3, [r4, #12]
 800fe32:	d106      	bne.n	800fe42 <__sflush_r+0x62>
 800fe34:	6829      	ldr	r1, [r5, #0]
 800fe36:	291d      	cmp	r1, #29
 800fe38:	d82b      	bhi.n	800fe92 <__sflush_r+0xb2>
 800fe3a:	4a2a      	ldr	r2, [pc, #168]	@ (800fee4 <__sflush_r+0x104>)
 800fe3c:	40ca      	lsrs	r2, r1
 800fe3e:	07d6      	lsls	r6, r2, #31
 800fe40:	d527      	bpl.n	800fe92 <__sflush_r+0xb2>
 800fe42:	2200      	movs	r2, #0
 800fe44:	6062      	str	r2, [r4, #4]
 800fe46:	04d9      	lsls	r1, r3, #19
 800fe48:	6922      	ldr	r2, [r4, #16]
 800fe4a:	6022      	str	r2, [r4, #0]
 800fe4c:	d504      	bpl.n	800fe58 <__sflush_r+0x78>
 800fe4e:	1c42      	adds	r2, r0, #1
 800fe50:	d101      	bne.n	800fe56 <__sflush_r+0x76>
 800fe52:	682b      	ldr	r3, [r5, #0]
 800fe54:	b903      	cbnz	r3, 800fe58 <__sflush_r+0x78>
 800fe56:	6560      	str	r0, [r4, #84]	@ 0x54
 800fe58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fe5a:	602f      	str	r7, [r5, #0]
 800fe5c:	b1b9      	cbz	r1, 800fe8e <__sflush_r+0xae>
 800fe5e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fe62:	4299      	cmp	r1, r3
 800fe64:	d002      	beq.n	800fe6c <__sflush_r+0x8c>
 800fe66:	4628      	mov	r0, r5
 800fe68:	f7ff fbf6 	bl	800f658 <_free_r>
 800fe6c:	2300      	movs	r3, #0
 800fe6e:	6363      	str	r3, [r4, #52]	@ 0x34
 800fe70:	e00d      	b.n	800fe8e <__sflush_r+0xae>
 800fe72:	2301      	movs	r3, #1
 800fe74:	4628      	mov	r0, r5
 800fe76:	47b0      	blx	r6
 800fe78:	4602      	mov	r2, r0
 800fe7a:	1c50      	adds	r0, r2, #1
 800fe7c:	d1c9      	bne.n	800fe12 <__sflush_r+0x32>
 800fe7e:	682b      	ldr	r3, [r5, #0]
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d0c6      	beq.n	800fe12 <__sflush_r+0x32>
 800fe84:	2b1d      	cmp	r3, #29
 800fe86:	d001      	beq.n	800fe8c <__sflush_r+0xac>
 800fe88:	2b16      	cmp	r3, #22
 800fe8a:	d11e      	bne.n	800feca <__sflush_r+0xea>
 800fe8c:	602f      	str	r7, [r5, #0]
 800fe8e:	2000      	movs	r0, #0
 800fe90:	e022      	b.n	800fed8 <__sflush_r+0xf8>
 800fe92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fe96:	b21b      	sxth	r3, r3
 800fe98:	e01b      	b.n	800fed2 <__sflush_r+0xf2>
 800fe9a:	690f      	ldr	r7, [r1, #16]
 800fe9c:	2f00      	cmp	r7, #0
 800fe9e:	d0f6      	beq.n	800fe8e <__sflush_r+0xae>
 800fea0:	0793      	lsls	r3, r2, #30
 800fea2:	680e      	ldr	r6, [r1, #0]
 800fea4:	bf08      	it	eq
 800fea6:	694b      	ldreq	r3, [r1, #20]
 800fea8:	600f      	str	r7, [r1, #0]
 800feaa:	bf18      	it	ne
 800feac:	2300      	movne	r3, #0
 800feae:	eba6 0807 	sub.w	r8, r6, r7
 800feb2:	608b      	str	r3, [r1, #8]
 800feb4:	f1b8 0f00 	cmp.w	r8, #0
 800feb8:	dde9      	ble.n	800fe8e <__sflush_r+0xae>
 800feba:	6a21      	ldr	r1, [r4, #32]
 800febc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800febe:	4643      	mov	r3, r8
 800fec0:	463a      	mov	r2, r7
 800fec2:	4628      	mov	r0, r5
 800fec4:	47b0      	blx	r6
 800fec6:	2800      	cmp	r0, #0
 800fec8:	dc08      	bgt.n	800fedc <__sflush_r+0xfc>
 800feca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fece:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fed2:	81a3      	strh	r3, [r4, #12]
 800fed4:	f04f 30ff 	mov.w	r0, #4294967295
 800fed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fedc:	4407      	add	r7, r0
 800fede:	eba8 0800 	sub.w	r8, r8, r0
 800fee2:	e7e7      	b.n	800feb4 <__sflush_r+0xd4>
 800fee4:	20400001 	.word	0x20400001

0800fee8 <_fflush_r>:
 800fee8:	b538      	push	{r3, r4, r5, lr}
 800feea:	690b      	ldr	r3, [r1, #16]
 800feec:	4605      	mov	r5, r0
 800feee:	460c      	mov	r4, r1
 800fef0:	b913      	cbnz	r3, 800fef8 <_fflush_r+0x10>
 800fef2:	2500      	movs	r5, #0
 800fef4:	4628      	mov	r0, r5
 800fef6:	bd38      	pop	{r3, r4, r5, pc}
 800fef8:	b118      	cbz	r0, 800ff02 <_fflush_r+0x1a>
 800fefa:	6a03      	ldr	r3, [r0, #32]
 800fefc:	b90b      	cbnz	r3, 800ff02 <_fflush_r+0x1a>
 800fefe:	f7fe fbdb 	bl	800e6b8 <__sinit>
 800ff02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d0f3      	beq.n	800fef2 <_fflush_r+0xa>
 800ff0a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ff0c:	07d0      	lsls	r0, r2, #31
 800ff0e:	d404      	bmi.n	800ff1a <_fflush_r+0x32>
 800ff10:	0599      	lsls	r1, r3, #22
 800ff12:	d402      	bmi.n	800ff1a <_fflush_r+0x32>
 800ff14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ff16:	f7fe fd34 	bl	800e982 <__retarget_lock_acquire_recursive>
 800ff1a:	4628      	mov	r0, r5
 800ff1c:	4621      	mov	r1, r4
 800ff1e:	f7ff ff5f 	bl	800fde0 <__sflush_r>
 800ff22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ff24:	07da      	lsls	r2, r3, #31
 800ff26:	4605      	mov	r5, r0
 800ff28:	d4e4      	bmi.n	800fef4 <_fflush_r+0xc>
 800ff2a:	89a3      	ldrh	r3, [r4, #12]
 800ff2c:	059b      	lsls	r3, r3, #22
 800ff2e:	d4e1      	bmi.n	800fef4 <_fflush_r+0xc>
 800ff30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ff32:	f7fe fd27 	bl	800e984 <__retarget_lock_release_recursive>
 800ff36:	e7dd      	b.n	800fef4 <_fflush_r+0xc>

0800ff38 <__assert_func>:
 800ff38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ff3a:	4614      	mov	r4, r2
 800ff3c:	461a      	mov	r2, r3
 800ff3e:	4b09      	ldr	r3, [pc, #36]	@ (800ff64 <__assert_func+0x2c>)
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	4605      	mov	r5, r0
 800ff44:	68d8      	ldr	r0, [r3, #12]
 800ff46:	b14c      	cbz	r4, 800ff5c <__assert_func+0x24>
 800ff48:	4b07      	ldr	r3, [pc, #28]	@ (800ff68 <__assert_func+0x30>)
 800ff4a:	9100      	str	r1, [sp, #0]
 800ff4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ff50:	4906      	ldr	r1, [pc, #24]	@ (800ff6c <__assert_func+0x34>)
 800ff52:	462b      	mov	r3, r5
 800ff54:	f000 f842 	bl	800ffdc <fiprintf>
 800ff58:	f000 f852 	bl	8010000 <abort>
 800ff5c:	4b04      	ldr	r3, [pc, #16]	@ (800ff70 <__assert_func+0x38>)
 800ff5e:	461c      	mov	r4, r3
 800ff60:	e7f3      	b.n	800ff4a <__assert_func+0x12>
 800ff62:	bf00      	nop
 800ff64:	2000011c 	.word	0x2000011c
 800ff68:	08010784 	.word	0x08010784
 800ff6c:	08010791 	.word	0x08010791
 800ff70:	080107bf 	.word	0x080107bf

0800ff74 <_calloc_r>:
 800ff74:	b570      	push	{r4, r5, r6, lr}
 800ff76:	fba1 5402 	umull	r5, r4, r1, r2
 800ff7a:	b934      	cbnz	r4, 800ff8a <_calloc_r+0x16>
 800ff7c:	4629      	mov	r1, r5
 800ff7e:	f7fd fe2d 	bl	800dbdc <_malloc_r>
 800ff82:	4606      	mov	r6, r0
 800ff84:	b928      	cbnz	r0, 800ff92 <_calloc_r+0x1e>
 800ff86:	4630      	mov	r0, r6
 800ff88:	bd70      	pop	{r4, r5, r6, pc}
 800ff8a:	220c      	movs	r2, #12
 800ff8c:	6002      	str	r2, [r0, #0]
 800ff8e:	2600      	movs	r6, #0
 800ff90:	e7f9      	b.n	800ff86 <_calloc_r+0x12>
 800ff92:	462a      	mov	r2, r5
 800ff94:	4621      	mov	r1, r4
 800ff96:	f7fe fc08 	bl	800e7aa <memset>
 800ff9a:	e7f4      	b.n	800ff86 <_calloc_r+0x12>

0800ff9c <__ascii_mbtowc>:
 800ff9c:	b082      	sub	sp, #8
 800ff9e:	b901      	cbnz	r1, 800ffa2 <__ascii_mbtowc+0x6>
 800ffa0:	a901      	add	r1, sp, #4
 800ffa2:	b142      	cbz	r2, 800ffb6 <__ascii_mbtowc+0x1a>
 800ffa4:	b14b      	cbz	r3, 800ffba <__ascii_mbtowc+0x1e>
 800ffa6:	7813      	ldrb	r3, [r2, #0]
 800ffa8:	600b      	str	r3, [r1, #0]
 800ffaa:	7812      	ldrb	r2, [r2, #0]
 800ffac:	1e10      	subs	r0, r2, #0
 800ffae:	bf18      	it	ne
 800ffb0:	2001      	movne	r0, #1
 800ffb2:	b002      	add	sp, #8
 800ffb4:	4770      	bx	lr
 800ffb6:	4610      	mov	r0, r2
 800ffb8:	e7fb      	b.n	800ffb2 <__ascii_mbtowc+0x16>
 800ffba:	f06f 0001 	mvn.w	r0, #1
 800ffbe:	e7f8      	b.n	800ffb2 <__ascii_mbtowc+0x16>

0800ffc0 <__ascii_wctomb>:
 800ffc0:	4603      	mov	r3, r0
 800ffc2:	4608      	mov	r0, r1
 800ffc4:	b141      	cbz	r1, 800ffd8 <__ascii_wctomb+0x18>
 800ffc6:	2aff      	cmp	r2, #255	@ 0xff
 800ffc8:	d904      	bls.n	800ffd4 <__ascii_wctomb+0x14>
 800ffca:	228a      	movs	r2, #138	@ 0x8a
 800ffcc:	601a      	str	r2, [r3, #0]
 800ffce:	f04f 30ff 	mov.w	r0, #4294967295
 800ffd2:	4770      	bx	lr
 800ffd4:	700a      	strb	r2, [r1, #0]
 800ffd6:	2001      	movs	r0, #1
 800ffd8:	4770      	bx	lr
	...

0800ffdc <fiprintf>:
 800ffdc:	b40e      	push	{r1, r2, r3}
 800ffde:	b503      	push	{r0, r1, lr}
 800ffe0:	4601      	mov	r1, r0
 800ffe2:	ab03      	add	r3, sp, #12
 800ffe4:	4805      	ldr	r0, [pc, #20]	@ (800fffc <fiprintf+0x20>)
 800ffe6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ffea:	6800      	ldr	r0, [r0, #0]
 800ffec:	9301      	str	r3, [sp, #4]
 800ffee:	f000 f837 	bl	8010060 <_vfiprintf_r>
 800fff2:	b002      	add	sp, #8
 800fff4:	f85d eb04 	ldr.w	lr, [sp], #4
 800fff8:	b003      	add	sp, #12
 800fffa:	4770      	bx	lr
 800fffc:	2000011c 	.word	0x2000011c

08010000 <abort>:
 8010000:	b508      	push	{r3, lr}
 8010002:	2006      	movs	r0, #6
 8010004:	f000 fa00 	bl	8010408 <raise>
 8010008:	2001      	movs	r0, #1
 801000a:	f7f1 fd9f 	bl	8001b4c <_exit>

0801000e <__sfputc_r>:
 801000e:	6893      	ldr	r3, [r2, #8]
 8010010:	3b01      	subs	r3, #1
 8010012:	2b00      	cmp	r3, #0
 8010014:	b410      	push	{r4}
 8010016:	6093      	str	r3, [r2, #8]
 8010018:	da08      	bge.n	801002c <__sfputc_r+0x1e>
 801001a:	6994      	ldr	r4, [r2, #24]
 801001c:	42a3      	cmp	r3, r4
 801001e:	db01      	blt.n	8010024 <__sfputc_r+0x16>
 8010020:	290a      	cmp	r1, #10
 8010022:	d103      	bne.n	801002c <__sfputc_r+0x1e>
 8010024:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010028:	f000 b932 	b.w	8010290 <__swbuf_r>
 801002c:	6813      	ldr	r3, [r2, #0]
 801002e:	1c58      	adds	r0, r3, #1
 8010030:	6010      	str	r0, [r2, #0]
 8010032:	7019      	strb	r1, [r3, #0]
 8010034:	4608      	mov	r0, r1
 8010036:	f85d 4b04 	ldr.w	r4, [sp], #4
 801003a:	4770      	bx	lr

0801003c <__sfputs_r>:
 801003c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801003e:	4606      	mov	r6, r0
 8010040:	460f      	mov	r7, r1
 8010042:	4614      	mov	r4, r2
 8010044:	18d5      	adds	r5, r2, r3
 8010046:	42ac      	cmp	r4, r5
 8010048:	d101      	bne.n	801004e <__sfputs_r+0x12>
 801004a:	2000      	movs	r0, #0
 801004c:	e007      	b.n	801005e <__sfputs_r+0x22>
 801004e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010052:	463a      	mov	r2, r7
 8010054:	4630      	mov	r0, r6
 8010056:	f7ff ffda 	bl	801000e <__sfputc_r>
 801005a:	1c43      	adds	r3, r0, #1
 801005c:	d1f3      	bne.n	8010046 <__sfputs_r+0xa>
 801005e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010060 <_vfiprintf_r>:
 8010060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010064:	460d      	mov	r5, r1
 8010066:	b09d      	sub	sp, #116	@ 0x74
 8010068:	4614      	mov	r4, r2
 801006a:	4698      	mov	r8, r3
 801006c:	4606      	mov	r6, r0
 801006e:	b118      	cbz	r0, 8010078 <_vfiprintf_r+0x18>
 8010070:	6a03      	ldr	r3, [r0, #32]
 8010072:	b90b      	cbnz	r3, 8010078 <_vfiprintf_r+0x18>
 8010074:	f7fe fb20 	bl	800e6b8 <__sinit>
 8010078:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801007a:	07d9      	lsls	r1, r3, #31
 801007c:	d405      	bmi.n	801008a <_vfiprintf_r+0x2a>
 801007e:	89ab      	ldrh	r3, [r5, #12]
 8010080:	059a      	lsls	r2, r3, #22
 8010082:	d402      	bmi.n	801008a <_vfiprintf_r+0x2a>
 8010084:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010086:	f7fe fc7c 	bl	800e982 <__retarget_lock_acquire_recursive>
 801008a:	89ab      	ldrh	r3, [r5, #12]
 801008c:	071b      	lsls	r3, r3, #28
 801008e:	d501      	bpl.n	8010094 <_vfiprintf_r+0x34>
 8010090:	692b      	ldr	r3, [r5, #16]
 8010092:	b99b      	cbnz	r3, 80100bc <_vfiprintf_r+0x5c>
 8010094:	4629      	mov	r1, r5
 8010096:	4630      	mov	r0, r6
 8010098:	f000 f938 	bl	801030c <__swsetup_r>
 801009c:	b170      	cbz	r0, 80100bc <_vfiprintf_r+0x5c>
 801009e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80100a0:	07dc      	lsls	r4, r3, #31
 80100a2:	d504      	bpl.n	80100ae <_vfiprintf_r+0x4e>
 80100a4:	f04f 30ff 	mov.w	r0, #4294967295
 80100a8:	b01d      	add	sp, #116	@ 0x74
 80100aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100ae:	89ab      	ldrh	r3, [r5, #12]
 80100b0:	0598      	lsls	r0, r3, #22
 80100b2:	d4f7      	bmi.n	80100a4 <_vfiprintf_r+0x44>
 80100b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80100b6:	f7fe fc65 	bl	800e984 <__retarget_lock_release_recursive>
 80100ba:	e7f3      	b.n	80100a4 <_vfiprintf_r+0x44>
 80100bc:	2300      	movs	r3, #0
 80100be:	9309      	str	r3, [sp, #36]	@ 0x24
 80100c0:	2320      	movs	r3, #32
 80100c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80100c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80100ca:	2330      	movs	r3, #48	@ 0x30
 80100cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801027c <_vfiprintf_r+0x21c>
 80100d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80100d4:	f04f 0901 	mov.w	r9, #1
 80100d8:	4623      	mov	r3, r4
 80100da:	469a      	mov	sl, r3
 80100dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80100e0:	b10a      	cbz	r2, 80100e6 <_vfiprintf_r+0x86>
 80100e2:	2a25      	cmp	r2, #37	@ 0x25
 80100e4:	d1f9      	bne.n	80100da <_vfiprintf_r+0x7a>
 80100e6:	ebba 0b04 	subs.w	fp, sl, r4
 80100ea:	d00b      	beq.n	8010104 <_vfiprintf_r+0xa4>
 80100ec:	465b      	mov	r3, fp
 80100ee:	4622      	mov	r2, r4
 80100f0:	4629      	mov	r1, r5
 80100f2:	4630      	mov	r0, r6
 80100f4:	f7ff ffa2 	bl	801003c <__sfputs_r>
 80100f8:	3001      	adds	r0, #1
 80100fa:	f000 80a7 	beq.w	801024c <_vfiprintf_r+0x1ec>
 80100fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010100:	445a      	add	r2, fp
 8010102:	9209      	str	r2, [sp, #36]	@ 0x24
 8010104:	f89a 3000 	ldrb.w	r3, [sl]
 8010108:	2b00      	cmp	r3, #0
 801010a:	f000 809f 	beq.w	801024c <_vfiprintf_r+0x1ec>
 801010e:	2300      	movs	r3, #0
 8010110:	f04f 32ff 	mov.w	r2, #4294967295
 8010114:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010118:	f10a 0a01 	add.w	sl, sl, #1
 801011c:	9304      	str	r3, [sp, #16]
 801011e:	9307      	str	r3, [sp, #28]
 8010120:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010124:	931a      	str	r3, [sp, #104]	@ 0x68
 8010126:	4654      	mov	r4, sl
 8010128:	2205      	movs	r2, #5
 801012a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801012e:	4853      	ldr	r0, [pc, #332]	@ (801027c <_vfiprintf_r+0x21c>)
 8010130:	f7f0 f87e 	bl	8000230 <memchr>
 8010134:	9a04      	ldr	r2, [sp, #16]
 8010136:	b9d8      	cbnz	r0, 8010170 <_vfiprintf_r+0x110>
 8010138:	06d1      	lsls	r1, r2, #27
 801013a:	bf44      	itt	mi
 801013c:	2320      	movmi	r3, #32
 801013e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010142:	0713      	lsls	r3, r2, #28
 8010144:	bf44      	itt	mi
 8010146:	232b      	movmi	r3, #43	@ 0x2b
 8010148:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801014c:	f89a 3000 	ldrb.w	r3, [sl]
 8010150:	2b2a      	cmp	r3, #42	@ 0x2a
 8010152:	d015      	beq.n	8010180 <_vfiprintf_r+0x120>
 8010154:	9a07      	ldr	r2, [sp, #28]
 8010156:	4654      	mov	r4, sl
 8010158:	2000      	movs	r0, #0
 801015a:	f04f 0c0a 	mov.w	ip, #10
 801015e:	4621      	mov	r1, r4
 8010160:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010164:	3b30      	subs	r3, #48	@ 0x30
 8010166:	2b09      	cmp	r3, #9
 8010168:	d94b      	bls.n	8010202 <_vfiprintf_r+0x1a2>
 801016a:	b1b0      	cbz	r0, 801019a <_vfiprintf_r+0x13a>
 801016c:	9207      	str	r2, [sp, #28]
 801016e:	e014      	b.n	801019a <_vfiprintf_r+0x13a>
 8010170:	eba0 0308 	sub.w	r3, r0, r8
 8010174:	fa09 f303 	lsl.w	r3, r9, r3
 8010178:	4313      	orrs	r3, r2
 801017a:	9304      	str	r3, [sp, #16]
 801017c:	46a2      	mov	sl, r4
 801017e:	e7d2      	b.n	8010126 <_vfiprintf_r+0xc6>
 8010180:	9b03      	ldr	r3, [sp, #12]
 8010182:	1d19      	adds	r1, r3, #4
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	9103      	str	r1, [sp, #12]
 8010188:	2b00      	cmp	r3, #0
 801018a:	bfbb      	ittet	lt
 801018c:	425b      	neglt	r3, r3
 801018e:	f042 0202 	orrlt.w	r2, r2, #2
 8010192:	9307      	strge	r3, [sp, #28]
 8010194:	9307      	strlt	r3, [sp, #28]
 8010196:	bfb8      	it	lt
 8010198:	9204      	strlt	r2, [sp, #16]
 801019a:	7823      	ldrb	r3, [r4, #0]
 801019c:	2b2e      	cmp	r3, #46	@ 0x2e
 801019e:	d10a      	bne.n	80101b6 <_vfiprintf_r+0x156>
 80101a0:	7863      	ldrb	r3, [r4, #1]
 80101a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80101a4:	d132      	bne.n	801020c <_vfiprintf_r+0x1ac>
 80101a6:	9b03      	ldr	r3, [sp, #12]
 80101a8:	1d1a      	adds	r2, r3, #4
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	9203      	str	r2, [sp, #12]
 80101ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80101b2:	3402      	adds	r4, #2
 80101b4:	9305      	str	r3, [sp, #20]
 80101b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801028c <_vfiprintf_r+0x22c>
 80101ba:	7821      	ldrb	r1, [r4, #0]
 80101bc:	2203      	movs	r2, #3
 80101be:	4650      	mov	r0, sl
 80101c0:	f7f0 f836 	bl	8000230 <memchr>
 80101c4:	b138      	cbz	r0, 80101d6 <_vfiprintf_r+0x176>
 80101c6:	9b04      	ldr	r3, [sp, #16]
 80101c8:	eba0 000a 	sub.w	r0, r0, sl
 80101cc:	2240      	movs	r2, #64	@ 0x40
 80101ce:	4082      	lsls	r2, r0
 80101d0:	4313      	orrs	r3, r2
 80101d2:	3401      	adds	r4, #1
 80101d4:	9304      	str	r3, [sp, #16]
 80101d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101da:	4829      	ldr	r0, [pc, #164]	@ (8010280 <_vfiprintf_r+0x220>)
 80101dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80101e0:	2206      	movs	r2, #6
 80101e2:	f7f0 f825 	bl	8000230 <memchr>
 80101e6:	2800      	cmp	r0, #0
 80101e8:	d03f      	beq.n	801026a <_vfiprintf_r+0x20a>
 80101ea:	4b26      	ldr	r3, [pc, #152]	@ (8010284 <_vfiprintf_r+0x224>)
 80101ec:	bb1b      	cbnz	r3, 8010236 <_vfiprintf_r+0x1d6>
 80101ee:	9b03      	ldr	r3, [sp, #12]
 80101f0:	3307      	adds	r3, #7
 80101f2:	f023 0307 	bic.w	r3, r3, #7
 80101f6:	3308      	adds	r3, #8
 80101f8:	9303      	str	r3, [sp, #12]
 80101fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80101fc:	443b      	add	r3, r7
 80101fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8010200:	e76a      	b.n	80100d8 <_vfiprintf_r+0x78>
 8010202:	fb0c 3202 	mla	r2, ip, r2, r3
 8010206:	460c      	mov	r4, r1
 8010208:	2001      	movs	r0, #1
 801020a:	e7a8      	b.n	801015e <_vfiprintf_r+0xfe>
 801020c:	2300      	movs	r3, #0
 801020e:	3401      	adds	r4, #1
 8010210:	9305      	str	r3, [sp, #20]
 8010212:	4619      	mov	r1, r3
 8010214:	f04f 0c0a 	mov.w	ip, #10
 8010218:	4620      	mov	r0, r4
 801021a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801021e:	3a30      	subs	r2, #48	@ 0x30
 8010220:	2a09      	cmp	r2, #9
 8010222:	d903      	bls.n	801022c <_vfiprintf_r+0x1cc>
 8010224:	2b00      	cmp	r3, #0
 8010226:	d0c6      	beq.n	80101b6 <_vfiprintf_r+0x156>
 8010228:	9105      	str	r1, [sp, #20]
 801022a:	e7c4      	b.n	80101b6 <_vfiprintf_r+0x156>
 801022c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010230:	4604      	mov	r4, r0
 8010232:	2301      	movs	r3, #1
 8010234:	e7f0      	b.n	8010218 <_vfiprintf_r+0x1b8>
 8010236:	ab03      	add	r3, sp, #12
 8010238:	9300      	str	r3, [sp, #0]
 801023a:	462a      	mov	r2, r5
 801023c:	4b12      	ldr	r3, [pc, #72]	@ (8010288 <_vfiprintf_r+0x228>)
 801023e:	a904      	add	r1, sp, #16
 8010240:	4630      	mov	r0, r6
 8010242:	f7fd fdf7 	bl	800de34 <_printf_float>
 8010246:	4607      	mov	r7, r0
 8010248:	1c78      	adds	r0, r7, #1
 801024a:	d1d6      	bne.n	80101fa <_vfiprintf_r+0x19a>
 801024c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801024e:	07d9      	lsls	r1, r3, #31
 8010250:	d405      	bmi.n	801025e <_vfiprintf_r+0x1fe>
 8010252:	89ab      	ldrh	r3, [r5, #12]
 8010254:	059a      	lsls	r2, r3, #22
 8010256:	d402      	bmi.n	801025e <_vfiprintf_r+0x1fe>
 8010258:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801025a:	f7fe fb93 	bl	800e984 <__retarget_lock_release_recursive>
 801025e:	89ab      	ldrh	r3, [r5, #12]
 8010260:	065b      	lsls	r3, r3, #25
 8010262:	f53f af1f 	bmi.w	80100a4 <_vfiprintf_r+0x44>
 8010266:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010268:	e71e      	b.n	80100a8 <_vfiprintf_r+0x48>
 801026a:	ab03      	add	r3, sp, #12
 801026c:	9300      	str	r3, [sp, #0]
 801026e:	462a      	mov	r2, r5
 8010270:	4b05      	ldr	r3, [pc, #20]	@ (8010288 <_vfiprintf_r+0x228>)
 8010272:	a904      	add	r1, sp, #16
 8010274:	4630      	mov	r0, r6
 8010276:	f7fe f875 	bl	800e364 <_printf_i>
 801027a:	e7e4      	b.n	8010246 <_vfiprintf_r+0x1e6>
 801027c:	080107c0 	.word	0x080107c0
 8010280:	080107ca 	.word	0x080107ca
 8010284:	0800de35 	.word	0x0800de35
 8010288:	0801003d 	.word	0x0801003d
 801028c:	080107c6 	.word	0x080107c6

08010290 <__swbuf_r>:
 8010290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010292:	460e      	mov	r6, r1
 8010294:	4614      	mov	r4, r2
 8010296:	4605      	mov	r5, r0
 8010298:	b118      	cbz	r0, 80102a2 <__swbuf_r+0x12>
 801029a:	6a03      	ldr	r3, [r0, #32]
 801029c:	b90b      	cbnz	r3, 80102a2 <__swbuf_r+0x12>
 801029e:	f7fe fa0b 	bl	800e6b8 <__sinit>
 80102a2:	69a3      	ldr	r3, [r4, #24]
 80102a4:	60a3      	str	r3, [r4, #8]
 80102a6:	89a3      	ldrh	r3, [r4, #12]
 80102a8:	071a      	lsls	r2, r3, #28
 80102aa:	d501      	bpl.n	80102b0 <__swbuf_r+0x20>
 80102ac:	6923      	ldr	r3, [r4, #16]
 80102ae:	b943      	cbnz	r3, 80102c2 <__swbuf_r+0x32>
 80102b0:	4621      	mov	r1, r4
 80102b2:	4628      	mov	r0, r5
 80102b4:	f000 f82a 	bl	801030c <__swsetup_r>
 80102b8:	b118      	cbz	r0, 80102c2 <__swbuf_r+0x32>
 80102ba:	f04f 37ff 	mov.w	r7, #4294967295
 80102be:	4638      	mov	r0, r7
 80102c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80102c2:	6823      	ldr	r3, [r4, #0]
 80102c4:	6922      	ldr	r2, [r4, #16]
 80102c6:	1a98      	subs	r0, r3, r2
 80102c8:	6963      	ldr	r3, [r4, #20]
 80102ca:	b2f6      	uxtb	r6, r6
 80102cc:	4283      	cmp	r3, r0
 80102ce:	4637      	mov	r7, r6
 80102d0:	dc05      	bgt.n	80102de <__swbuf_r+0x4e>
 80102d2:	4621      	mov	r1, r4
 80102d4:	4628      	mov	r0, r5
 80102d6:	f7ff fe07 	bl	800fee8 <_fflush_r>
 80102da:	2800      	cmp	r0, #0
 80102dc:	d1ed      	bne.n	80102ba <__swbuf_r+0x2a>
 80102de:	68a3      	ldr	r3, [r4, #8]
 80102e0:	3b01      	subs	r3, #1
 80102e2:	60a3      	str	r3, [r4, #8]
 80102e4:	6823      	ldr	r3, [r4, #0]
 80102e6:	1c5a      	adds	r2, r3, #1
 80102e8:	6022      	str	r2, [r4, #0]
 80102ea:	701e      	strb	r6, [r3, #0]
 80102ec:	6962      	ldr	r2, [r4, #20]
 80102ee:	1c43      	adds	r3, r0, #1
 80102f0:	429a      	cmp	r2, r3
 80102f2:	d004      	beq.n	80102fe <__swbuf_r+0x6e>
 80102f4:	89a3      	ldrh	r3, [r4, #12]
 80102f6:	07db      	lsls	r3, r3, #31
 80102f8:	d5e1      	bpl.n	80102be <__swbuf_r+0x2e>
 80102fa:	2e0a      	cmp	r6, #10
 80102fc:	d1df      	bne.n	80102be <__swbuf_r+0x2e>
 80102fe:	4621      	mov	r1, r4
 8010300:	4628      	mov	r0, r5
 8010302:	f7ff fdf1 	bl	800fee8 <_fflush_r>
 8010306:	2800      	cmp	r0, #0
 8010308:	d0d9      	beq.n	80102be <__swbuf_r+0x2e>
 801030a:	e7d6      	b.n	80102ba <__swbuf_r+0x2a>

0801030c <__swsetup_r>:
 801030c:	b538      	push	{r3, r4, r5, lr}
 801030e:	4b29      	ldr	r3, [pc, #164]	@ (80103b4 <__swsetup_r+0xa8>)
 8010310:	4605      	mov	r5, r0
 8010312:	6818      	ldr	r0, [r3, #0]
 8010314:	460c      	mov	r4, r1
 8010316:	b118      	cbz	r0, 8010320 <__swsetup_r+0x14>
 8010318:	6a03      	ldr	r3, [r0, #32]
 801031a:	b90b      	cbnz	r3, 8010320 <__swsetup_r+0x14>
 801031c:	f7fe f9cc 	bl	800e6b8 <__sinit>
 8010320:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010324:	0719      	lsls	r1, r3, #28
 8010326:	d422      	bmi.n	801036e <__swsetup_r+0x62>
 8010328:	06da      	lsls	r2, r3, #27
 801032a:	d407      	bmi.n	801033c <__swsetup_r+0x30>
 801032c:	2209      	movs	r2, #9
 801032e:	602a      	str	r2, [r5, #0]
 8010330:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010334:	81a3      	strh	r3, [r4, #12]
 8010336:	f04f 30ff 	mov.w	r0, #4294967295
 801033a:	e033      	b.n	80103a4 <__swsetup_r+0x98>
 801033c:	0758      	lsls	r0, r3, #29
 801033e:	d512      	bpl.n	8010366 <__swsetup_r+0x5a>
 8010340:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010342:	b141      	cbz	r1, 8010356 <__swsetup_r+0x4a>
 8010344:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010348:	4299      	cmp	r1, r3
 801034a:	d002      	beq.n	8010352 <__swsetup_r+0x46>
 801034c:	4628      	mov	r0, r5
 801034e:	f7ff f983 	bl	800f658 <_free_r>
 8010352:	2300      	movs	r3, #0
 8010354:	6363      	str	r3, [r4, #52]	@ 0x34
 8010356:	89a3      	ldrh	r3, [r4, #12]
 8010358:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801035c:	81a3      	strh	r3, [r4, #12]
 801035e:	2300      	movs	r3, #0
 8010360:	6063      	str	r3, [r4, #4]
 8010362:	6923      	ldr	r3, [r4, #16]
 8010364:	6023      	str	r3, [r4, #0]
 8010366:	89a3      	ldrh	r3, [r4, #12]
 8010368:	f043 0308 	orr.w	r3, r3, #8
 801036c:	81a3      	strh	r3, [r4, #12]
 801036e:	6923      	ldr	r3, [r4, #16]
 8010370:	b94b      	cbnz	r3, 8010386 <__swsetup_r+0x7a>
 8010372:	89a3      	ldrh	r3, [r4, #12]
 8010374:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010378:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801037c:	d003      	beq.n	8010386 <__swsetup_r+0x7a>
 801037e:	4621      	mov	r1, r4
 8010380:	4628      	mov	r0, r5
 8010382:	f000 f883 	bl	801048c <__smakebuf_r>
 8010386:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801038a:	f013 0201 	ands.w	r2, r3, #1
 801038e:	d00a      	beq.n	80103a6 <__swsetup_r+0x9a>
 8010390:	2200      	movs	r2, #0
 8010392:	60a2      	str	r2, [r4, #8]
 8010394:	6962      	ldr	r2, [r4, #20]
 8010396:	4252      	negs	r2, r2
 8010398:	61a2      	str	r2, [r4, #24]
 801039a:	6922      	ldr	r2, [r4, #16]
 801039c:	b942      	cbnz	r2, 80103b0 <__swsetup_r+0xa4>
 801039e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80103a2:	d1c5      	bne.n	8010330 <__swsetup_r+0x24>
 80103a4:	bd38      	pop	{r3, r4, r5, pc}
 80103a6:	0799      	lsls	r1, r3, #30
 80103a8:	bf58      	it	pl
 80103aa:	6962      	ldrpl	r2, [r4, #20]
 80103ac:	60a2      	str	r2, [r4, #8]
 80103ae:	e7f4      	b.n	801039a <__swsetup_r+0x8e>
 80103b0:	2000      	movs	r0, #0
 80103b2:	e7f7      	b.n	80103a4 <__swsetup_r+0x98>
 80103b4:	2000011c 	.word	0x2000011c

080103b8 <_raise_r>:
 80103b8:	291f      	cmp	r1, #31
 80103ba:	b538      	push	{r3, r4, r5, lr}
 80103bc:	4605      	mov	r5, r0
 80103be:	460c      	mov	r4, r1
 80103c0:	d904      	bls.n	80103cc <_raise_r+0x14>
 80103c2:	2316      	movs	r3, #22
 80103c4:	6003      	str	r3, [r0, #0]
 80103c6:	f04f 30ff 	mov.w	r0, #4294967295
 80103ca:	bd38      	pop	{r3, r4, r5, pc}
 80103cc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80103ce:	b112      	cbz	r2, 80103d6 <_raise_r+0x1e>
 80103d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80103d4:	b94b      	cbnz	r3, 80103ea <_raise_r+0x32>
 80103d6:	4628      	mov	r0, r5
 80103d8:	f000 f830 	bl	801043c <_getpid_r>
 80103dc:	4622      	mov	r2, r4
 80103de:	4601      	mov	r1, r0
 80103e0:	4628      	mov	r0, r5
 80103e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80103e6:	f000 b817 	b.w	8010418 <_kill_r>
 80103ea:	2b01      	cmp	r3, #1
 80103ec:	d00a      	beq.n	8010404 <_raise_r+0x4c>
 80103ee:	1c59      	adds	r1, r3, #1
 80103f0:	d103      	bne.n	80103fa <_raise_r+0x42>
 80103f2:	2316      	movs	r3, #22
 80103f4:	6003      	str	r3, [r0, #0]
 80103f6:	2001      	movs	r0, #1
 80103f8:	e7e7      	b.n	80103ca <_raise_r+0x12>
 80103fa:	2100      	movs	r1, #0
 80103fc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010400:	4620      	mov	r0, r4
 8010402:	4798      	blx	r3
 8010404:	2000      	movs	r0, #0
 8010406:	e7e0      	b.n	80103ca <_raise_r+0x12>

08010408 <raise>:
 8010408:	4b02      	ldr	r3, [pc, #8]	@ (8010414 <raise+0xc>)
 801040a:	4601      	mov	r1, r0
 801040c:	6818      	ldr	r0, [r3, #0]
 801040e:	f7ff bfd3 	b.w	80103b8 <_raise_r>
 8010412:	bf00      	nop
 8010414:	2000011c 	.word	0x2000011c

08010418 <_kill_r>:
 8010418:	b538      	push	{r3, r4, r5, lr}
 801041a:	4d07      	ldr	r5, [pc, #28]	@ (8010438 <_kill_r+0x20>)
 801041c:	2300      	movs	r3, #0
 801041e:	4604      	mov	r4, r0
 8010420:	4608      	mov	r0, r1
 8010422:	4611      	mov	r1, r2
 8010424:	602b      	str	r3, [r5, #0]
 8010426:	f7f1 fb81 	bl	8001b2c <_kill>
 801042a:	1c43      	adds	r3, r0, #1
 801042c:	d102      	bne.n	8010434 <_kill_r+0x1c>
 801042e:	682b      	ldr	r3, [r5, #0]
 8010430:	b103      	cbz	r3, 8010434 <_kill_r+0x1c>
 8010432:	6023      	str	r3, [r4, #0]
 8010434:	bd38      	pop	{r3, r4, r5, pc}
 8010436:	bf00      	nop
 8010438:	2000fd60 	.word	0x2000fd60

0801043c <_getpid_r>:
 801043c:	f7f1 bb6e 	b.w	8001b1c <_getpid>

08010440 <__swhatbuf_r>:
 8010440:	b570      	push	{r4, r5, r6, lr}
 8010442:	460c      	mov	r4, r1
 8010444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010448:	2900      	cmp	r1, #0
 801044a:	b096      	sub	sp, #88	@ 0x58
 801044c:	4615      	mov	r5, r2
 801044e:	461e      	mov	r6, r3
 8010450:	da0d      	bge.n	801046e <__swhatbuf_r+0x2e>
 8010452:	89a3      	ldrh	r3, [r4, #12]
 8010454:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010458:	f04f 0100 	mov.w	r1, #0
 801045c:	bf14      	ite	ne
 801045e:	2340      	movne	r3, #64	@ 0x40
 8010460:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010464:	2000      	movs	r0, #0
 8010466:	6031      	str	r1, [r6, #0]
 8010468:	602b      	str	r3, [r5, #0]
 801046a:	b016      	add	sp, #88	@ 0x58
 801046c:	bd70      	pop	{r4, r5, r6, pc}
 801046e:	466a      	mov	r2, sp
 8010470:	f000 f848 	bl	8010504 <_fstat_r>
 8010474:	2800      	cmp	r0, #0
 8010476:	dbec      	blt.n	8010452 <__swhatbuf_r+0x12>
 8010478:	9901      	ldr	r1, [sp, #4]
 801047a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801047e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010482:	4259      	negs	r1, r3
 8010484:	4159      	adcs	r1, r3
 8010486:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801048a:	e7eb      	b.n	8010464 <__swhatbuf_r+0x24>

0801048c <__smakebuf_r>:
 801048c:	898b      	ldrh	r3, [r1, #12]
 801048e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010490:	079d      	lsls	r5, r3, #30
 8010492:	4606      	mov	r6, r0
 8010494:	460c      	mov	r4, r1
 8010496:	d507      	bpl.n	80104a8 <__smakebuf_r+0x1c>
 8010498:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801049c:	6023      	str	r3, [r4, #0]
 801049e:	6123      	str	r3, [r4, #16]
 80104a0:	2301      	movs	r3, #1
 80104a2:	6163      	str	r3, [r4, #20]
 80104a4:	b003      	add	sp, #12
 80104a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80104a8:	ab01      	add	r3, sp, #4
 80104aa:	466a      	mov	r2, sp
 80104ac:	f7ff ffc8 	bl	8010440 <__swhatbuf_r>
 80104b0:	9f00      	ldr	r7, [sp, #0]
 80104b2:	4605      	mov	r5, r0
 80104b4:	4639      	mov	r1, r7
 80104b6:	4630      	mov	r0, r6
 80104b8:	f7fd fb90 	bl	800dbdc <_malloc_r>
 80104bc:	b948      	cbnz	r0, 80104d2 <__smakebuf_r+0x46>
 80104be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80104c2:	059a      	lsls	r2, r3, #22
 80104c4:	d4ee      	bmi.n	80104a4 <__smakebuf_r+0x18>
 80104c6:	f023 0303 	bic.w	r3, r3, #3
 80104ca:	f043 0302 	orr.w	r3, r3, #2
 80104ce:	81a3      	strh	r3, [r4, #12]
 80104d0:	e7e2      	b.n	8010498 <__smakebuf_r+0xc>
 80104d2:	89a3      	ldrh	r3, [r4, #12]
 80104d4:	6020      	str	r0, [r4, #0]
 80104d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80104da:	81a3      	strh	r3, [r4, #12]
 80104dc:	9b01      	ldr	r3, [sp, #4]
 80104de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80104e2:	b15b      	cbz	r3, 80104fc <__smakebuf_r+0x70>
 80104e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80104e8:	4630      	mov	r0, r6
 80104ea:	f000 f81d 	bl	8010528 <_isatty_r>
 80104ee:	b128      	cbz	r0, 80104fc <__smakebuf_r+0x70>
 80104f0:	89a3      	ldrh	r3, [r4, #12]
 80104f2:	f023 0303 	bic.w	r3, r3, #3
 80104f6:	f043 0301 	orr.w	r3, r3, #1
 80104fa:	81a3      	strh	r3, [r4, #12]
 80104fc:	89a3      	ldrh	r3, [r4, #12]
 80104fe:	431d      	orrs	r5, r3
 8010500:	81a5      	strh	r5, [r4, #12]
 8010502:	e7cf      	b.n	80104a4 <__smakebuf_r+0x18>

08010504 <_fstat_r>:
 8010504:	b538      	push	{r3, r4, r5, lr}
 8010506:	4d07      	ldr	r5, [pc, #28]	@ (8010524 <_fstat_r+0x20>)
 8010508:	2300      	movs	r3, #0
 801050a:	4604      	mov	r4, r0
 801050c:	4608      	mov	r0, r1
 801050e:	4611      	mov	r1, r2
 8010510:	602b      	str	r3, [r5, #0]
 8010512:	f7f1 fb6b 	bl	8001bec <_fstat>
 8010516:	1c43      	adds	r3, r0, #1
 8010518:	d102      	bne.n	8010520 <_fstat_r+0x1c>
 801051a:	682b      	ldr	r3, [r5, #0]
 801051c:	b103      	cbz	r3, 8010520 <_fstat_r+0x1c>
 801051e:	6023      	str	r3, [r4, #0]
 8010520:	bd38      	pop	{r3, r4, r5, pc}
 8010522:	bf00      	nop
 8010524:	2000fd60 	.word	0x2000fd60

08010528 <_isatty_r>:
 8010528:	b538      	push	{r3, r4, r5, lr}
 801052a:	4d06      	ldr	r5, [pc, #24]	@ (8010544 <_isatty_r+0x1c>)
 801052c:	2300      	movs	r3, #0
 801052e:	4604      	mov	r4, r0
 8010530:	4608      	mov	r0, r1
 8010532:	602b      	str	r3, [r5, #0]
 8010534:	f7f1 fb6a 	bl	8001c0c <_isatty>
 8010538:	1c43      	adds	r3, r0, #1
 801053a:	d102      	bne.n	8010542 <_isatty_r+0x1a>
 801053c:	682b      	ldr	r3, [r5, #0]
 801053e:	b103      	cbz	r3, 8010542 <_isatty_r+0x1a>
 8010540:	6023      	str	r3, [r4, #0]
 8010542:	bd38      	pop	{r3, r4, r5, pc}
 8010544:	2000fd60 	.word	0x2000fd60

08010548 <_init>:
 8010548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801054a:	bf00      	nop
 801054c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801054e:	bc08      	pop	{r3}
 8010550:	469e      	mov	lr, r3
 8010552:	4770      	bx	lr

08010554 <_fini>:
 8010554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010556:	bf00      	nop
 8010558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801055a:	bc08      	pop	{r3}
 801055c:	469e      	mov	lr, r3
 801055e:	4770      	bx	lr
