
DRAM_IMG_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000103d8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000484  080105a8  080105a8  000115a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010a2c  08010a2c  000122d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08010a2c  08010a2c  00011a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010a34  08010a34  000122d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010a34  08010a34  00011a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010a38  08010a38  00011a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d8  20000000  08010a3c  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000fa44  200002d8  08010d14  000122d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000fd1c  08010d14  00012d1c  2**0
                  ALLOC
 11 .sdram        00800000  c0000000  c0000000  00013000  2**2
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000122d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026abd  00000000  00000000  00012308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000623c  00000000  00000000  00038dc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000021c8  00000000  00000000  0003f008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000019a3  00000000  00000000  000411d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002dc46  00000000  00000000  00042b73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002a472  00000000  00000000  000707b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001101dc  00000000  00000000  0009ac2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001aae07  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009c44  00000000  00000000  001aae4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000047  00000000  00000000  001b4a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002d8 	.word	0x200002d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08010590 	.word	0x08010590

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200002dc 	.word	0x200002dc
 800020c:	08010590 	.word	0x08010590

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b988 	b.w	8000f30 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	468e      	mov	lr, r1
 8000c40:	4604      	mov	r4, r0
 8000c42:	4688      	mov	r8, r1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d14a      	bne.n	8000cde <__udivmoddi4+0xa6>
 8000c48:	428a      	cmp	r2, r1
 8000c4a:	4617      	mov	r7, r2
 8000c4c:	d962      	bls.n	8000d14 <__udivmoddi4+0xdc>
 8000c4e:	fab2 f682 	clz	r6, r2
 8000c52:	b14e      	cbz	r6, 8000c68 <__udivmoddi4+0x30>
 8000c54:	f1c6 0320 	rsb	r3, r6, #32
 8000c58:	fa01 f806 	lsl.w	r8, r1, r6
 8000c5c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c60:	40b7      	lsls	r7, r6
 8000c62:	ea43 0808 	orr.w	r8, r3, r8
 8000c66:	40b4      	lsls	r4, r6
 8000c68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c6c:	fa1f fc87 	uxth.w	ip, r7
 8000c70:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c74:	0c23      	lsrs	r3, r4, #16
 8000c76:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c7a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c7e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0x62>
 8000c86:	18fb      	adds	r3, r7, r3
 8000c88:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c8c:	f080 80ea 	bcs.w	8000e64 <__udivmoddi4+0x22c>
 8000c90:	429a      	cmp	r2, r3
 8000c92:	f240 80e7 	bls.w	8000e64 <__udivmoddi4+0x22c>
 8000c96:	3902      	subs	r1, #2
 8000c98:	443b      	add	r3, r7
 8000c9a:	1a9a      	subs	r2, r3, r2
 8000c9c:	b2a3      	uxth	r3, r4
 8000c9e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ca2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ca6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000caa:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cae:	459c      	cmp	ip, r3
 8000cb0:	d909      	bls.n	8000cc6 <__udivmoddi4+0x8e>
 8000cb2:	18fb      	adds	r3, r7, r3
 8000cb4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cb8:	f080 80d6 	bcs.w	8000e68 <__udivmoddi4+0x230>
 8000cbc:	459c      	cmp	ip, r3
 8000cbe:	f240 80d3 	bls.w	8000e68 <__udivmoddi4+0x230>
 8000cc2:	443b      	add	r3, r7
 8000cc4:	3802      	subs	r0, #2
 8000cc6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cca:	eba3 030c 	sub.w	r3, r3, ip
 8000cce:	2100      	movs	r1, #0
 8000cd0:	b11d      	cbz	r5, 8000cda <__udivmoddi4+0xa2>
 8000cd2:	40f3      	lsrs	r3, r6
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d905      	bls.n	8000cee <__udivmoddi4+0xb6>
 8000ce2:	b10d      	cbz	r5, 8000ce8 <__udivmoddi4+0xb0>
 8000ce4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4608      	mov	r0, r1
 8000cec:	e7f5      	b.n	8000cda <__udivmoddi4+0xa2>
 8000cee:	fab3 f183 	clz	r1, r3
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	d146      	bne.n	8000d84 <__udivmoddi4+0x14c>
 8000cf6:	4573      	cmp	r3, lr
 8000cf8:	d302      	bcc.n	8000d00 <__udivmoddi4+0xc8>
 8000cfa:	4282      	cmp	r2, r0
 8000cfc:	f200 8105 	bhi.w	8000f0a <__udivmoddi4+0x2d2>
 8000d00:	1a84      	subs	r4, r0, r2
 8000d02:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d06:	2001      	movs	r0, #1
 8000d08:	4690      	mov	r8, r2
 8000d0a:	2d00      	cmp	r5, #0
 8000d0c:	d0e5      	beq.n	8000cda <__udivmoddi4+0xa2>
 8000d0e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d12:	e7e2      	b.n	8000cda <__udivmoddi4+0xa2>
 8000d14:	2a00      	cmp	r2, #0
 8000d16:	f000 8090 	beq.w	8000e3a <__udivmoddi4+0x202>
 8000d1a:	fab2 f682 	clz	r6, r2
 8000d1e:	2e00      	cmp	r6, #0
 8000d20:	f040 80a4 	bne.w	8000e6c <__udivmoddi4+0x234>
 8000d24:	1a8a      	subs	r2, r1, r2
 8000d26:	0c03      	lsrs	r3, r0, #16
 8000d28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d2c:	b280      	uxth	r0, r0
 8000d2e:	b2bc      	uxth	r4, r7
 8000d30:	2101      	movs	r1, #1
 8000d32:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d36:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d3e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d907      	bls.n	8000d56 <__udivmoddi4+0x11e>
 8000d46:	18fb      	adds	r3, r7, r3
 8000d48:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d4c:	d202      	bcs.n	8000d54 <__udivmoddi4+0x11c>
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	f200 80e0 	bhi.w	8000f14 <__udivmoddi4+0x2dc>
 8000d54:	46c4      	mov	ip, r8
 8000d56:	1a9b      	subs	r3, r3, r2
 8000d58:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d5c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d60:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d64:	fb02 f404 	mul.w	r4, r2, r4
 8000d68:	429c      	cmp	r4, r3
 8000d6a:	d907      	bls.n	8000d7c <__udivmoddi4+0x144>
 8000d6c:	18fb      	adds	r3, r7, r3
 8000d6e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0x142>
 8000d74:	429c      	cmp	r4, r3
 8000d76:	f200 80ca 	bhi.w	8000f0e <__udivmoddi4+0x2d6>
 8000d7a:	4602      	mov	r2, r0
 8000d7c:	1b1b      	subs	r3, r3, r4
 8000d7e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d82:	e7a5      	b.n	8000cd0 <__udivmoddi4+0x98>
 8000d84:	f1c1 0620 	rsb	r6, r1, #32
 8000d88:	408b      	lsls	r3, r1
 8000d8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d8e:	431f      	orrs	r7, r3
 8000d90:	fa0e f401 	lsl.w	r4, lr, r1
 8000d94:	fa20 f306 	lsr.w	r3, r0, r6
 8000d98:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d9c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000da0:	4323      	orrs	r3, r4
 8000da2:	fa00 f801 	lsl.w	r8, r0, r1
 8000da6:	fa1f fc87 	uxth.w	ip, r7
 8000daa:	fbbe f0f9 	udiv	r0, lr, r9
 8000dae:	0c1c      	lsrs	r4, r3, #16
 8000db0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000db4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000db8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dbc:	45a6      	cmp	lr, r4
 8000dbe:	fa02 f201 	lsl.w	r2, r2, r1
 8000dc2:	d909      	bls.n	8000dd8 <__udivmoddi4+0x1a0>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000dca:	f080 809c 	bcs.w	8000f06 <__udivmoddi4+0x2ce>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f240 8099 	bls.w	8000f06 <__udivmoddi4+0x2ce>
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	443c      	add	r4, r7
 8000dd8:	eba4 040e 	sub.w	r4, r4, lr
 8000ddc:	fa1f fe83 	uxth.w	lr, r3
 8000de0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de4:	fb09 4413 	mls	r4, r9, r3, r4
 8000de8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dec:	fb03 fc0c 	mul.w	ip, r3, ip
 8000df0:	45a4      	cmp	ip, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x1ce>
 8000df4:	193c      	adds	r4, r7, r4
 8000df6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dfa:	f080 8082 	bcs.w	8000f02 <__udivmoddi4+0x2ca>
 8000dfe:	45a4      	cmp	ip, r4
 8000e00:	d97f      	bls.n	8000f02 <__udivmoddi4+0x2ca>
 8000e02:	3b02      	subs	r3, #2
 8000e04:	443c      	add	r4, r7
 8000e06:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e0a:	eba4 040c 	sub.w	r4, r4, ip
 8000e0e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e12:	4564      	cmp	r4, ip
 8000e14:	4673      	mov	r3, lr
 8000e16:	46e1      	mov	r9, ip
 8000e18:	d362      	bcc.n	8000ee0 <__udivmoddi4+0x2a8>
 8000e1a:	d05f      	beq.n	8000edc <__udivmoddi4+0x2a4>
 8000e1c:	b15d      	cbz	r5, 8000e36 <__udivmoddi4+0x1fe>
 8000e1e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e22:	eb64 0409 	sbc.w	r4, r4, r9
 8000e26:	fa04 f606 	lsl.w	r6, r4, r6
 8000e2a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e2e:	431e      	orrs	r6, r3
 8000e30:	40cc      	lsrs	r4, r1
 8000e32:	e9c5 6400 	strd	r6, r4, [r5]
 8000e36:	2100      	movs	r1, #0
 8000e38:	e74f      	b.n	8000cda <__udivmoddi4+0xa2>
 8000e3a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e3e:	0c01      	lsrs	r1, r0, #16
 8000e40:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e44:	b280      	uxth	r0, r0
 8000e46:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e4a:	463b      	mov	r3, r7
 8000e4c:	4638      	mov	r0, r7
 8000e4e:	463c      	mov	r4, r7
 8000e50:	46b8      	mov	r8, r7
 8000e52:	46be      	mov	lr, r7
 8000e54:	2620      	movs	r6, #32
 8000e56:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e5a:	eba2 0208 	sub.w	r2, r2, r8
 8000e5e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e62:	e766      	b.n	8000d32 <__udivmoddi4+0xfa>
 8000e64:	4601      	mov	r1, r0
 8000e66:	e718      	b.n	8000c9a <__udivmoddi4+0x62>
 8000e68:	4610      	mov	r0, r2
 8000e6a:	e72c      	b.n	8000cc6 <__udivmoddi4+0x8e>
 8000e6c:	f1c6 0220 	rsb	r2, r6, #32
 8000e70:	fa2e f302 	lsr.w	r3, lr, r2
 8000e74:	40b7      	lsls	r7, r6
 8000e76:	40b1      	lsls	r1, r6
 8000e78:	fa20 f202 	lsr.w	r2, r0, r2
 8000e7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e80:	430a      	orrs	r2, r1
 8000e82:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e86:	b2bc      	uxth	r4, r7
 8000e88:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e8c:	0c11      	lsrs	r1, r2, #16
 8000e8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e92:	fb08 f904 	mul.w	r9, r8, r4
 8000e96:	40b0      	lsls	r0, r6
 8000e98:	4589      	cmp	r9, r1
 8000e9a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e9e:	b280      	uxth	r0, r0
 8000ea0:	d93e      	bls.n	8000f20 <__udivmoddi4+0x2e8>
 8000ea2:	1879      	adds	r1, r7, r1
 8000ea4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ea8:	d201      	bcs.n	8000eae <__udivmoddi4+0x276>
 8000eaa:	4589      	cmp	r9, r1
 8000eac:	d81f      	bhi.n	8000eee <__udivmoddi4+0x2b6>
 8000eae:	eba1 0109 	sub.w	r1, r1, r9
 8000eb2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eb6:	fb09 f804 	mul.w	r8, r9, r4
 8000eba:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ebe:	b292      	uxth	r2, r2
 8000ec0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ec4:	4542      	cmp	r2, r8
 8000ec6:	d229      	bcs.n	8000f1c <__udivmoddi4+0x2e4>
 8000ec8:	18ba      	adds	r2, r7, r2
 8000eca:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ece:	d2c4      	bcs.n	8000e5a <__udivmoddi4+0x222>
 8000ed0:	4542      	cmp	r2, r8
 8000ed2:	d2c2      	bcs.n	8000e5a <__udivmoddi4+0x222>
 8000ed4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ed8:	443a      	add	r2, r7
 8000eda:	e7be      	b.n	8000e5a <__udivmoddi4+0x222>
 8000edc:	45f0      	cmp	r8, lr
 8000ede:	d29d      	bcs.n	8000e1c <__udivmoddi4+0x1e4>
 8000ee0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ee4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ee8:	3801      	subs	r0, #1
 8000eea:	46e1      	mov	r9, ip
 8000eec:	e796      	b.n	8000e1c <__udivmoddi4+0x1e4>
 8000eee:	eba7 0909 	sub.w	r9, r7, r9
 8000ef2:	4449      	add	r1, r9
 8000ef4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ef8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000efc:	fb09 f804 	mul.w	r8, r9, r4
 8000f00:	e7db      	b.n	8000eba <__udivmoddi4+0x282>
 8000f02:	4673      	mov	r3, lr
 8000f04:	e77f      	b.n	8000e06 <__udivmoddi4+0x1ce>
 8000f06:	4650      	mov	r0, sl
 8000f08:	e766      	b.n	8000dd8 <__udivmoddi4+0x1a0>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e6fd      	b.n	8000d0a <__udivmoddi4+0xd2>
 8000f0e:	443b      	add	r3, r7
 8000f10:	3a02      	subs	r2, #2
 8000f12:	e733      	b.n	8000d7c <__udivmoddi4+0x144>
 8000f14:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f18:	443b      	add	r3, r7
 8000f1a:	e71c      	b.n	8000d56 <__udivmoddi4+0x11e>
 8000f1c:	4649      	mov	r1, r9
 8000f1e:	e79c      	b.n	8000e5a <__udivmoddi4+0x222>
 8000f20:	eba1 0109 	sub.w	r1, r1, r9
 8000f24:	46c4      	mov	ip, r8
 8000f26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f2a:	fb09 f804 	mul.w	r8, r9, r4
 8000f2e:	e7c4      	b.n	8000eba <__udivmoddi4+0x282>

08000f30 <__aeabi_idiv0>:
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop

08000f34 <CRC_HW_Calculation>:
	return CRC->CR;
}


uint32_t CRC_HW_Calculation(uint8_t *data_buffer, uint32_t length)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
    if (length == 0) return 0;
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d101      	bne.n	8000f48 <CRC_HW_Calculation+0x14>
 8000f44:	2300      	movs	r3, #0
 8000f46:	e017      	b.n	8000f78 <CRC_HW_Calculation+0x44>
    uint8_t* p_data = data_buffer;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	60fb      	str	r3, [r7, #12]

    CRC->CR = CRC_CR_RESET;
 8000f4c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f84 <CRC_HW_Calculation+0x50>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	609a      	str	r2, [r3, #8]

    for (uint32_t i = 0; i < length; i ++)
 8000f52:	2300      	movs	r3, #0
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	e009      	b.n	8000f6c <CRC_HW_Calculation+0x38>
    {
    	CRC->DR = *p_data;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	781a      	ldrb	r2, [r3, #0]
 8000f5c:	4b09      	ldr	r3, [pc, #36]	@ (8000f84 <CRC_HW_Calculation+0x50>)
 8000f5e:	601a      	str	r2, [r3, #0]
    	p_data ++ ;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	3301      	adds	r3, #1
 8000f64:	60fb      	str	r3, [r7, #12]
    for (uint32_t i = 0; i < length; i ++)
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	68ba      	ldr	r2, [r7, #8]
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d3f1      	bcc.n	8000f58 <CRC_HW_Calculation+0x24>
    }
    return CRC->DR;
 8000f74:	4b03      	ldr	r3, [pc, #12]	@ (8000f84 <CRC_HW_Calculation+0x50>)
 8000f76:	681b      	ldr	r3, [r3, #0]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3714      	adds	r7, #20
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	40023000 	.word	0x40023000

08000f88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f8c:	4b04      	ldr	r3, [pc, #16]	@ (8000fa0 <__NVIC_GetPriorityGrouping+0x18>)
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	0a1b      	lsrs	r3, r3, #8
 8000f92:	f003 0307 	and.w	r3, r3, #7
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	db0b      	blt.n	8000fce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	f003 021f 	and.w	r2, r3, #31
 8000fbc:	4907      	ldr	r1, [pc, #28]	@ (8000fdc <__NVIC_EnableIRQ+0x38>)
 8000fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc2:	095b      	lsrs	r3, r3, #5
 8000fc4:	2001      	movs	r0, #1
 8000fc6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fce:	bf00      	nop
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	e000e100 	.word	0xe000e100

08000fe0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	6039      	str	r1, [r7, #0]
 8000fea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	db0a      	blt.n	800100a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	490c      	ldr	r1, [pc, #48]	@ (800102c <__NVIC_SetPriority+0x4c>)
 8000ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffe:	0112      	lsls	r2, r2, #4
 8001000:	b2d2      	uxtb	r2, r2
 8001002:	440b      	add	r3, r1
 8001004:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001008:	e00a      	b.n	8001020 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	b2da      	uxtb	r2, r3
 800100e:	4908      	ldr	r1, [pc, #32]	@ (8001030 <__NVIC_SetPriority+0x50>)
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	f003 030f 	and.w	r3, r3, #15
 8001016:	3b04      	subs	r3, #4
 8001018:	0112      	lsls	r2, r2, #4
 800101a:	b2d2      	uxtb	r2, r2
 800101c:	440b      	add	r3, r1
 800101e:	761a      	strb	r2, [r3, #24]
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000e100 	.word	0xe000e100
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001034:	b480      	push	{r7}
 8001036:	b089      	sub	sp, #36	@ 0x24
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	f1c3 0307 	rsb	r3, r3, #7
 800104e:	2b04      	cmp	r3, #4
 8001050:	bf28      	it	cs
 8001052:	2304      	movcs	r3, #4
 8001054:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	3304      	adds	r3, #4
 800105a:	2b06      	cmp	r3, #6
 800105c:	d902      	bls.n	8001064 <NVIC_EncodePriority+0x30>
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	3b03      	subs	r3, #3
 8001062:	e000      	b.n	8001066 <NVIC_EncodePriority+0x32>
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001068:	f04f 32ff 	mov.w	r2, #4294967295
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43da      	mvns	r2, r3
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	401a      	ands	r2, r3
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800107c:	f04f 31ff 	mov.w	r1, #4294967295
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	fa01 f303 	lsl.w	r3, r1, r3
 8001086:	43d9      	mvns	r1, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800108c:	4313      	orrs	r3, r2
         );
}
 800108e:	4618      	mov	r0, r3
 8001090:	3724      	adds	r7, #36	@ 0x24
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800109a:	b480      	push	{r7}
 800109c:	b083      	sub	sp, #12
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f043 0201 	orr.w	r2, r3, #1
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	601a      	str	r2, [r3, #0]
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80010ba:	b480      	push	{r7}
 80010bc:	b083      	sub	sp, #12
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	609a      	str	r2, [r3, #8]
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80010f0:	4b08      	ldr	r3, [pc, #32]	@ (8001114 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80010f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80010f4:	4907      	ldr	r1, [pc, #28]	@ (8001114 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80010fc:	4b05      	ldr	r3, [pc, #20]	@ (8001114 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80010fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4013      	ands	r3, r2
 8001104:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001106:	68fb      	ldr	r3, [r7, #12]
}
 8001108:	bf00      	nop
 800110a:	3714      	adds	r7, #20
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	40023800 	.word	0x40023800

08001118 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001120:	4b08      	ldr	r3, [pc, #32]	@ (8001144 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001122:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001124:	4907      	ldr	r1, [pc, #28]	@ (8001144 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4313      	orrs	r3, r2
 800112a:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800112c:	4b05      	ldr	r3, [pc, #20]	@ (8001144 <LL_APB2_GRP1_EnableClock+0x2c>)
 800112e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4013      	ands	r3, r2
 8001134:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001136:	68fb      	ldr	r3, [r7, #12]
}
 8001138:	bf00      	nop
 800113a:	3714      	adds	r7, #20
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	40023800 	.word	0x40023800

08001148 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800114e:	f000 fda6 	bl	8001c9e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001152:	f000 f879 	bl	8001248 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001156:	f000 faa7 	bl	80016a8 <MX_GPIO_Init>
  MX_FMC_Init();
 800115a:	f000 f9eb 	bl	8001534 <MX_FMC_Init>
  MX_TIM3_Init();
 800115e:	f000 f901 	bl	8001364 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8001162:	f000 f94d 	bl	8001400 <MX_USART6_UART_Init>
  MX_CRC_Init();
 8001166:	f000 f8db 	bl	8001320 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  Queue_Init(&usb_rx_cmd_queue, file_buffer, sizeof(command_buffer));
 800116a:	2240      	movs	r2, #64	@ 0x40
 800116c:	4925      	ldr	r1, [pc, #148]	@ (8001204 <main+0xbc>)
 800116e:	4826      	ldr	r0, [pc, #152]	@ (8001208 <main+0xc0>)
 8001170:	f00b fb76 	bl	800c860 <Queue_Init>
  Queue_Init(&usb_rx_file_queue, file_buffer, sizeof(file_buffer));
 8001174:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001178:	4922      	ldr	r1, [pc, #136]	@ (8001204 <main+0xbc>)
 800117a:	4824      	ldr	r0, [pc, #144]	@ (800120c <main+0xc4>)
 800117c:	f00b fb70 	bl	800c860 <Queue_Init>

  MX_USB_DEVICE_Init();
 8001180:	f00b ff1c 	bl	800cfbc <MX_USB_DEVICE_Init>

  HAL_TIM_Base_Start(&htim3);
 8001184:	4822      	ldr	r0, [pc, #136]	@ (8001210 <main+0xc8>)
 8001186:	f003 fe03 	bl	8004d90 <HAL_TIM_Base_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800118a:	f008 fb61 	bl	8009850 <osKernelInitialize>
  //Init
//  Chunk_Init();
//  File_Init();


  xTaskCreate(TaskBlinkLED, "BlinkTask", 256, NULL, osPriorityNormal + 1, NULL);
 800118e:	2300      	movs	r3, #0
 8001190:	9301      	str	r3, [sp, #4]
 8001192:	2319      	movs	r3, #25
 8001194:	9300      	str	r3, [sp, #0]
 8001196:	2300      	movs	r3, #0
 8001198:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800119c:	491d      	ldr	r1, [pc, #116]	@ (8001214 <main+0xcc>)
 800119e:	481e      	ldr	r0, [pc, #120]	@ (8001218 <main+0xd0>)
 80011a0:	f009 fa28 	bl	800a5f4 <xTaskCreate>
  xTaskCreate(Task_Command, "Command", 512, NULL, 4, &hTaskCommand);
 80011a4:	4b1d      	ldr	r3, [pc, #116]	@ (800121c <main+0xd4>)
 80011a6:	9301      	str	r3, [sp, #4]
 80011a8:	2304      	movs	r3, #4
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	2300      	movs	r3, #0
 80011ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011b2:	491b      	ldr	r1, [pc, #108]	@ (8001220 <main+0xd8>)
 80011b4:	481b      	ldr	r0, [pc, #108]	@ (8001224 <main+0xdc>)
 80011b6:	f009 fa1d 	bl	800a5f4 <xTaskCreate>
//  Transmit_Init(0);
  xTaskCreate(TaskSendImage, "TaskSendImage", 1024, NULL, 2, &hTaskSend);
 80011ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001228 <main+0xe0>)
 80011bc:	9301      	str	r3, [sp, #4]
 80011be:	2302      	movs	r3, #2
 80011c0:	9300      	str	r3, [sp, #0]
 80011c2:	2300      	movs	r3, #0
 80011c4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011c8:	4918      	ldr	r1, [pc, #96]	@ (800122c <main+0xe4>)
 80011ca:	4819      	ldr	r0, [pc, #100]	@ (8001230 <main+0xe8>)
 80011cc:	f009 fa12 	bl	800a5f4 <xTaskCreate>
  xTaskCreate(Task_Receive, "Receive", 1024*5, NULL, 3, &hTaskReceive);   //có thể  giảm
 80011d0:	4b18      	ldr	r3, [pc, #96]	@ (8001234 <main+0xec>)
 80011d2:	9301      	str	r3, [sp, #4]
 80011d4:	2303      	movs	r3, #3
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	2300      	movs	r3, #0
 80011da:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 80011de:	4916      	ldr	r1, [pc, #88]	@ (8001238 <main+0xf0>)
 80011e0:	4816      	ldr	r0, [pc, #88]	@ (800123c <main+0xf4>)
 80011e2:	f009 fa07 	bl	800a5f4 <xTaskCreate>


  xTaskCreate(Debuglogging, "Debuglogging", 128, NULL, osPriorityIdle + 1, NULL);
 80011e6:	2300      	movs	r3, #0
 80011e8:	9301      	str	r3, [sp, #4]
 80011ea:	2302      	movs	r3, #2
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	2300      	movs	r3, #0
 80011f0:	2280      	movs	r2, #128	@ 0x80
 80011f2:	4913      	ldr	r1, [pc, #76]	@ (8001240 <main+0xf8>)
 80011f4:	4813      	ldr	r0, [pc, #76]	@ (8001244 <main+0xfc>)
 80011f6:	f009 f9fd 	bl	800a5f4 <xTaskCreate>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80011fa:	f008 fb5d 	bl	80098b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011fe:	bf00      	nop
 8001200:	e7fd      	b.n	80011fe <main+0xb6>
 8001202:	bf00      	nop
 8001204:	c0000000 	.word	0xc0000000
 8001208:	20000398 	.word	0x20000398
 800120c:	200003a8 	.word	0x200003a8
 8001210:	20000318 	.word	0x20000318
 8001214:	080105b4 	.word	0x080105b4
 8001218:	080017cd 	.word	0x080017cd
 800121c:	2000e1b4 	.word	0x2000e1b4
 8001220:	080105c0 	.word	0x080105c0
 8001224:	0800cb81 	.word	0x0800cb81
 8001228:	2000e1bc 	.word	0x2000e1bc
 800122c:	080105c8 	.word	0x080105c8
 8001230:	0800ce41 	.word	0x0800ce41
 8001234:	2000e1b8 	.word	0x2000e1b8
 8001238:	080105d8 	.word	0x080105d8
 800123c:	0800cc7d 	.word	0x0800cc7d
 8001240:	080105e0 	.word	0x080105e0
 8001244:	080017ed 	.word	0x080017ed

08001248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b094      	sub	sp, #80	@ 0x50
 800124c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800124e:	f107 0320 	add.w	r3, r7, #32
 8001252:	2230      	movs	r2, #48	@ 0x30
 8001254:	2100      	movs	r1, #0
 8001256:	4618      	mov	r0, r3
 8001258:	f00d facb 	bl	800e7f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800125c:	f107 030c 	add.w	r3, r7, #12
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800126c:	4b2a      	ldr	r3, [pc, #168]	@ (8001318 <SystemClock_Config+0xd0>)
 800126e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001270:	4a29      	ldr	r2, [pc, #164]	@ (8001318 <SystemClock_Config+0xd0>)
 8001272:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001276:	6413      	str	r3, [r2, #64]	@ 0x40
 8001278:	4b27      	ldr	r3, [pc, #156]	@ (8001318 <SystemClock_Config+0xd0>)
 800127a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001284:	4b25      	ldr	r3, [pc, #148]	@ (800131c <SystemClock_Config+0xd4>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a24      	ldr	r2, [pc, #144]	@ (800131c <SystemClock_Config+0xd4>)
 800128a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800128e:	6013      	str	r3, [r2, #0]
 8001290:	4b22      	ldr	r3, [pc, #136]	@ (800131c <SystemClock_Config+0xd4>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001298:	607b      	str	r3, [r7, #4]
 800129a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800129c:	2302      	movs	r3, #2
 800129e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012a0:	2301      	movs	r3, #1
 80012a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012a4:	2310      	movs	r3, #16
 80012a6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012a8:	2302      	movs	r3, #2
 80012aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012ac:	2300      	movs	r3, #0
 80012ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012b0:	2308      	movs	r3, #8
 80012b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 200;
 80012b4:	23c8      	movs	r3, #200	@ 0xc8
 80012b6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012b8:	2302      	movs	r3, #2
 80012ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80012bc:	2302      	movs	r3, #2
 80012be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012c0:	f107 0320 	add.w	r3, r7, #32
 80012c4:	4618      	mov	r0, r3
 80012c6:	f002 fc29 	bl	8003b1c <HAL_RCC_OscConfig>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80012d0:	f000 faa4 	bl	800181c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80012d4:	f002 fbd2 	bl	8003a7c <HAL_PWREx_EnableOverDrive>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80012de:	f000 fa9d 	bl	800181c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012e2:	230f      	movs	r3, #15
 80012e4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012e6:	2302      	movs	r3, #2
 80012e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012ee:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80012f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80012fa:	f107 030c 	add.w	r3, r7, #12
 80012fe:	2106      	movs	r1, #6
 8001300:	4618      	mov	r0, r3
 8001302:	f002 feaf 	bl	8004064 <HAL_RCC_ClockConfig>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800130c:	f000 fa86 	bl	800181c <Error_Handler>
  }
}
 8001310:	bf00      	nop
 8001312:	3750      	adds	r7, #80	@ 0x50
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40023800 	.word	0x40023800
 800131c:	40007000 	.word	0x40007000

08001320 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001324:	4b0d      	ldr	r3, [pc, #52]	@ (800135c <MX_CRC_Init+0x3c>)
 8001326:	4a0e      	ldr	r2, [pc, #56]	@ (8001360 <MX_CRC_Init+0x40>)
 8001328:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800132a:	4b0c      	ldr	r3, [pc, #48]	@ (800135c <MX_CRC_Init+0x3c>)
 800132c:	2200      	movs	r2, #0
 800132e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001330:	4b0a      	ldr	r3, [pc, #40]	@ (800135c <MX_CRC_Init+0x3c>)
 8001332:	2200      	movs	r2, #0
 8001334:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001336:	4b09      	ldr	r3, [pc, #36]	@ (800135c <MX_CRC_Init+0x3c>)
 8001338:	2200      	movs	r2, #0
 800133a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800133c:	4b07      	ldr	r3, [pc, #28]	@ (800135c <MX_CRC_Init+0x3c>)
 800133e:	2200      	movs	r2, #0
 8001340:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001342:	4b06      	ldr	r3, [pc, #24]	@ (800135c <MX_CRC_Init+0x3c>)
 8001344:	2201      	movs	r2, #1
 8001346:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001348:	4804      	ldr	r0, [pc, #16]	@ (800135c <MX_CRC_Init+0x3c>)
 800134a:	f000 fe3b 	bl	8001fc4 <HAL_CRC_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001354:	f000 fa62 	bl	800181c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}
 800135c:	200002f4 	.word	0x200002f4
 8001360:	40023000 	.word	0x40023000

08001364 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b088      	sub	sp, #32
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800136a:	f107 0310 	add.w	r3, r7, #16
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001378:	1d3b      	adds	r3, r7, #4
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]
 8001380:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001382:	4b1d      	ldr	r3, [pc, #116]	@ (80013f8 <MX_TIM3_Init+0x94>)
 8001384:	4a1d      	ldr	r2, [pc, #116]	@ (80013fc <MX_TIM3_Init+0x98>)
 8001386:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8001388:	4b1b      	ldr	r3, [pc, #108]	@ (80013f8 <MX_TIM3_Init+0x94>)
 800138a:	2263      	movs	r2, #99	@ 0x63
 800138c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138e:	4b1a      	ldr	r3, [pc, #104]	@ (80013f8 <MX_TIM3_Init+0x94>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001394:	4b18      	ldr	r3, [pc, #96]	@ (80013f8 <MX_TIM3_Init+0x94>)
 8001396:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800139a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800139c:	4b16      	ldr	r3, [pc, #88]	@ (80013f8 <MX_TIM3_Init+0x94>)
 800139e:	2200      	movs	r2, #0
 80013a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a2:	4b15      	ldr	r3, [pc, #84]	@ (80013f8 <MX_TIM3_Init+0x94>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013a8:	4813      	ldr	r0, [pc, #76]	@ (80013f8 <MX_TIM3_Init+0x94>)
 80013aa:	f003 fc9a 	bl	8004ce2 <HAL_TIM_Base_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80013b4:	f000 fa32 	bl	800181c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013be:	f107 0310 	add.w	r3, r7, #16
 80013c2:	4619      	mov	r1, r3
 80013c4:	480c      	ldr	r0, [pc, #48]	@ (80013f8 <MX_TIM3_Init+0x94>)
 80013c6:	f003 fd53 	bl	8004e70 <HAL_TIM_ConfigClockSource>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80013d0:	f000 fa24 	bl	800181c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d4:	2300      	movs	r3, #0
 80013d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d8:	2300      	movs	r3, #0
 80013da:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	4619      	mov	r1, r3
 80013e0:	4805      	ldr	r0, [pc, #20]	@ (80013f8 <MX_TIM3_Init+0x94>)
 80013e2:	f003 ff4f 	bl	8005284 <HAL_TIMEx_MasterConfigSynchronization>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80013ec:	f000 fa16 	bl	800181c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013f0:	bf00      	nop
 80013f2:	3720      	adds	r7, #32
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20000318 	.word	0x20000318
 80013fc:	40000400 	.word	0x40000400

08001400 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b0ae      	sub	sp, #184	@ 0xb8
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001406:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	609a      	str	r2, [r3, #8]
 8001412:	60da      	str	r2, [r3, #12]
 8001414:	611a      	str	r2, [r3, #16]
 8001416:	615a      	str	r2, [r3, #20]
 8001418:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141a:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	60da      	str	r2, [r3, #12]
 8001428:	611a      	str	r2, [r3, #16]
 800142a:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800142c:	463b      	mov	r3, r7
 800142e:	2284      	movs	r2, #132	@ 0x84
 8001430:	2100      	movs	r1, #0
 8001432:	4618      	mov	r0, r3
 8001434:	f00d f9dd 	bl	800e7f2 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001438:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800143c:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800143e:	2300      	movs	r3, #0
 8001440:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001442:	463b      	mov	r3, r7
 8001444:	4618      	mov	r0, r3
 8001446:	f002 ffcb 	bl	80043e0 <HAL_RCCEx_PeriphCLKConfig>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_USART6_UART_Init+0x54>
  {
    Error_Handler();
 8001450:	f000 f9e4 	bl	800181c <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 8001454:	2020      	movs	r0, #32
 8001456:	f7ff fe5f 	bl	8001118 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800145a:	2004      	movs	r0, #4
 800145c:	f7ff fe44 	bl	80010e8 <LL_AHB1_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PC7   ------> USART6_RX
  PC6   ------> USART6_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8001460:	2380      	movs	r3, #128	@ 0x80
 8001462:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001466:	2302      	movs	r3, #2
 8001468:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800146c:	2303      	movs	r3, #3
 800146e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001478:	2300      	movs	r3, #0
 800147a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800147e:	2308      	movs	r3, #8
 8001480:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001484:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001488:	4619      	mov	r1, r3
 800148a:	4828      	ldr	r0, [pc, #160]	@ (800152c <MX_USART6_UART_Init+0x12c>)
 800148c:	f004 f98f 	bl	80057ae <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8001490:	2340      	movs	r3, #64	@ 0x40
 8001492:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001496:	2302      	movs	r3, #2
 8001498:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800149c:	2303      	movs	r3, #3
 800149e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014a8:	2300      	movs	r3, #0
 80014aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80014ae:	2308      	movs	r3, #8
 80014b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b4:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80014b8:	4619      	mov	r1, r3
 80014ba:	481c      	ldr	r0, [pc, #112]	@ (800152c <MX_USART6_UART_Init+0x12c>)
 80014bc:	f004 f977 	bl	80057ae <LL_GPIO_Init>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 80014c0:	f7ff fd62 	bl	8000f88 <__NVIC_GetPriorityGrouping>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2200      	movs	r2, #0
 80014c8:	2105      	movs	r1, #5
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff fdb2 	bl	8001034 <NVIC_EncodePriority>
 80014d0:	4603      	mov	r3, r0
 80014d2:	4619      	mov	r1, r3
 80014d4:	2047      	movs	r0, #71	@ 0x47
 80014d6:	f7ff fd83 	bl	8000fe0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 80014da:	2047      	movs	r0, #71	@ 0x47
 80014dc:	f7ff fd62 	bl	8000fa4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80014e0:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80014e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80014e8:	2300      	movs	r3, #0
 80014ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80014ee:	2300      	movs	r3, #0
 80014f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80014f4:	2300      	movs	r3, #0
 80014f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80014fa:	230c      	movs	r3, #12
 80014fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001500:	2300      	movs	r3, #0
 8001502:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001506:	2300      	movs	r3, #0
 8001508:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  LL_USART_Init(USART6, &USART_InitStruct);
 800150c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001510:	4619      	mov	r1, r3
 8001512:	4807      	ldr	r0, [pc, #28]	@ (8001530 <MX_USART6_UART_Init+0x130>)
 8001514:	f004 fd96 	bl	8006044 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART6);
 8001518:	4805      	ldr	r0, [pc, #20]	@ (8001530 <MX_USART6_UART_Init+0x130>)
 800151a:	f7ff fdce 	bl	80010ba <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART6);
 800151e:	4804      	ldr	r0, [pc, #16]	@ (8001530 <MX_USART6_UART_Init+0x130>)
 8001520:	f7ff fdbb 	bl	800109a <LL_USART_Enable>
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001524:	bf00      	nop
 8001526:	37b8      	adds	r7, #184	@ 0xb8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40020800 	.word	0x40020800
 8001530:	40011400 	.word	0x40011400

08001534 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08e      	sub	sp, #56	@ 0x38
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */
	const uint32_t RefreshCount = 0x0603; // tại 100MHz
 800153a:	f240 6303 	movw	r3, #1539	@ 0x603
 800153e:	637b      	str	r3, [r7, #52]	@ 0x34
  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001540:	f107 0318 	add.w	r3, r7, #24
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
 8001550:	615a      	str	r2, [r3, #20]
 8001552:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001554:	4b51      	ldr	r3, [pc, #324]	@ (800169c <MX_FMC_Init+0x168>)
 8001556:	4a52      	ldr	r2, [pc, #328]	@ (80016a0 <MX_FMC_Init+0x16c>)
 8001558:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800155a:	4b50      	ldr	r3, [pc, #320]	@ (800169c <MX_FMC_Init+0x168>)
 800155c:	2200      	movs	r2, #0
 800155e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001560:	4b4e      	ldr	r3, [pc, #312]	@ (800169c <MX_FMC_Init+0x168>)
 8001562:	2200      	movs	r2, #0
 8001564:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001566:	4b4d      	ldr	r3, [pc, #308]	@ (800169c <MX_FMC_Init+0x168>)
 8001568:	2204      	movs	r2, #4
 800156a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800156c:	4b4b      	ldr	r3, [pc, #300]	@ (800169c <MX_FMC_Init+0x168>)
 800156e:	2210      	movs	r2, #16
 8001570:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001572:	4b4a      	ldr	r3, [pc, #296]	@ (800169c <MX_FMC_Init+0x168>)
 8001574:	2240      	movs	r2, #64	@ 0x40
 8001576:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8001578:	4b48      	ldr	r3, [pc, #288]	@ (800169c <MX_FMC_Init+0x168>)
 800157a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800157e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001580:	4b46      	ldr	r3, [pc, #280]	@ (800169c <MX_FMC_Init+0x168>)
 8001582:	2200      	movs	r2, #0
 8001584:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001586:	4b45      	ldr	r3, [pc, #276]	@ (800169c <MX_FMC_Init+0x168>)
 8001588:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800158c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800158e:	4b43      	ldr	r3, [pc, #268]	@ (800169c <MX_FMC_Init+0x168>)
 8001590:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001594:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8001596:	4b41      	ldr	r3, [pc, #260]	@ (800169c <MX_FMC_Init+0x168>)
 8001598:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800159c:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800159e:	2302      	movs	r3, #2
 80015a0:	61bb      	str	r3, [r7, #24]
  SdramTiming.ExitSelfRefreshDelay = 8;
 80015a2:	2308      	movs	r3, #8
 80015a4:	61fb      	str	r3, [r7, #28]
  SdramTiming.SelfRefreshTime = 6;
 80015a6:	2306      	movs	r3, #6
 80015a8:	623b      	str	r3, [r7, #32]
  SdramTiming.RowCycleDelay = 7;
 80015aa:	2307      	movs	r3, #7
 80015ac:	627b      	str	r3, [r7, #36]	@ 0x24
  SdramTiming.WriteRecoveryTime = 12;
 80015ae:	230c      	movs	r3, #12
 80015b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  SdramTiming.RPDelay = 2;
 80015b2:	2302      	movs	r3, #2
 80015b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  SdramTiming.RCDDelay = 2;
 80015b6:	2302      	movs	r3, #2
 80015b8:	633b      	str	r3, [r7, #48]	@ 0x30

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80015ba:	f107 0318 	add.w	r3, r7, #24
 80015be:	4619      	mov	r1, r3
 80015c0:	4836      	ldr	r0, [pc, #216]	@ (800169c <MX_FMC_Init+0x168>)
 80015c2:	f003 fafd 	bl	8004bc0 <HAL_SDRAM_Init>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_FMC_Init+0x9c>
  {
    Error_Handler( );
 80015cc:	f000 f926 	bl	800181c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  FMC_SDRAM_CommandTypeDef Command = {0};
 80015d0:	f107 0308 	add.w	r3, r7, #8
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
  __IO uint32_t tmpmrd = 0;
 80015de:	2300      	movs	r3, #0
 80015e0:	607b      	str	r3, [r7, #4]

  /* Khởi tạo SDRAM */
  __HAL_RCC_FMC_CLK_ENABLE();
 80015e2:	4b30      	ldr	r3, [pc, #192]	@ (80016a4 <MX_FMC_Init+0x170>)
 80015e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015e6:	4a2f      	ldr	r2, [pc, #188]	@ (80016a4 <MX_FMC_Init+0x170>)
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	6393      	str	r3, [r2, #56]	@ 0x38
 80015ee:	4b2d      	ldr	r3, [pc, #180]	@ (80016a4 <MX_FMC_Init+0x170>)
 80015f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	603b      	str	r3, [r7, #0]
 80015f8:	683b      	ldr	r3, [r7, #0]



  Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 80015fa:	2301      	movs	r3, #1
 80015fc:	60bb      	str	r3, [r7, #8]
  Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80015fe:	2310      	movs	r3, #16
 8001600:	60fb      	str	r3, [r7, #12]
  Command.AutoRefreshNumber = 1;
 8001602:	2301      	movs	r3, #1
 8001604:	613b      	str	r3, [r7, #16]
  Command.ModeRegisterDefinition = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	617b      	str	r3, [r7, #20]
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800160a:	f107 0308 	add.w	r3, r7, #8
 800160e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001612:	4619      	mov	r1, r3
 8001614:	4821      	ldr	r0, [pc, #132]	@ (800169c <MX_FMC_Init+0x168>)
 8001616:	f003 fb07 	bl	8004c28 <HAL_SDRAM_SendCommand>
  HAL_Delay(1); // Delay 1ms (tối thiểu 100µs)
 800161a:	2001      	movs	r0, #1
 800161c:	f000 fb9c 	bl	8001d58 <HAL_Delay>


  Command.CommandMode = FMC_SDRAM_CMD_PALL;
 8001620:	2302      	movs	r3, #2
 8001622:	60bb      	str	r3, [r7, #8]
  Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8001624:	2310      	movs	r3, #16
 8001626:	60fb      	str	r3, [r7, #12]
  Command.AutoRefreshNumber = 1;
 8001628:	2301      	movs	r3, #1
 800162a:	613b      	str	r3, [r7, #16]
  Command.ModeRegisterDefinition = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]
  HAL_SDRAM_SendCommand(&hsdram1, &Command, 0xFFFF);
 8001630:	f107 0308 	add.w	r3, r7, #8
 8001634:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001638:	4619      	mov	r1, r3
 800163a:	4818      	ldr	r0, [pc, #96]	@ (800169c <MX_FMC_Init+0x168>)
 800163c:	f003 faf4 	bl	8004c28 <HAL_SDRAM_SendCommand>
  HAL_Delay(1); // Đợi một thời gian ngắn
 8001640:	2001      	movs	r0, #1
 8001642:	f000 fb89 	bl	8001d58 <HAL_Delay>



  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001646:	2303      	movs	r3, #3
 8001648:	60bb      	str	r3, [r7, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800164a:	2310      	movs	r3, #16
 800164c:	60fb      	str	r3, [r7, #12]
  Command.AutoRefreshNumber      = 8;
 800164e:	2308      	movs	r3, #8
 8001650:	613b      	str	r3, [r7, #16]
  Command.ModeRegisterDefinition = 0;
 8001652:	2300      	movs	r3, #0
 8001654:	617b      	str	r3, [r7, #20]
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8001656:	f107 0308 	add.w	r3, r7, #8
 800165a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800165e:	4619      	mov	r1, r3
 8001660:	480e      	ldr	r0, [pc, #56]	@ (800169c <MX_FMC_Init+0x168>)
 8001662:	f003 fae1 	bl	8004c28 <HAL_SDRAM_SendCommand>

  // Bước 4: Gửi lệnh Mode Register Set (MRS)
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8001666:	f44f 7308 	mov.w	r3, #544	@ 0x220
 800166a:	607b      	str	r3, [r7, #4]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800166c:	2304      	movs	r3, #4
 800166e:	60bb      	str	r3, [r7, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001670:	2310      	movs	r3, #16
 8001672:	60fb      	str	r3, [r7, #12]
  Command.AutoRefreshNumber      = 1;
 8001674:	2301      	movs	r3, #1
 8001676:	613b      	str	r3, [r7, #16]
  Command.ModeRegisterDefinition = tmpmrd;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	617b      	str	r3, [r7, #20]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800167c:	f107 0308 	add.w	r3, r7, #8
 8001680:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001684:	4619      	mov	r1, r3
 8001686:	4805      	ldr	r0, [pc, #20]	@ (800169c <MX_FMC_Init+0x168>)
 8001688:	f003 face 	bl	8004c28 <HAL_SDRAM_SendCommand>

  // Bước 5: Cấu hình tần số refresh
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, RefreshCount);
 800168c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800168e:	4803      	ldr	r0, [pc, #12]	@ (800169c <MX_FMC_Init+0x168>)
 8001690:	f003 faff 	bl	8004c92 <HAL_SDRAM_ProgramRefreshRate>

  /* USER CODE END FMC_Init 2 */
}
 8001694:	bf00      	nop
 8001696:	3738      	adds	r7, #56	@ 0x38
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000364 	.word	0x20000364
 80016a0:	a0000140 	.word	0xa0000140
 80016a4:	40023800 	.word	0x40023800

080016a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08e      	sub	sp, #56	@ 0x38
 80016ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]
 80016b8:	609a      	str	r2, [r3, #8]
 80016ba:	60da      	str	r2, [r3, #12]
 80016bc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016be:	4b41      	ldr	r3, [pc, #260]	@ (80017c4 <MX_GPIO_Init+0x11c>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c2:	4a40      	ldr	r2, [pc, #256]	@ (80017c4 <MX_GPIO_Init+0x11c>)
 80016c4:	f043 0302 	orr.w	r3, r3, #2
 80016c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ca:	4b3e      	ldr	r3, [pc, #248]	@ (80017c4 <MX_GPIO_Init+0x11c>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	623b      	str	r3, [r7, #32]
 80016d4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d6:	4b3b      	ldr	r3, [pc, #236]	@ (80017c4 <MX_GPIO_Init+0x11c>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016da:	4a3a      	ldr	r2, [pc, #232]	@ (80017c4 <MX_GPIO_Init+0x11c>)
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016e2:	4b38      	ldr	r3, [pc, #224]	@ (80017c4 <MX_GPIO_Init+0x11c>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	61fb      	str	r3, [r7, #28]
 80016ec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016ee:	4b35      	ldr	r3, [pc, #212]	@ (80017c4 <MX_GPIO_Init+0x11c>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f2:	4a34      	ldr	r2, [pc, #208]	@ (80017c4 <MX_GPIO_Init+0x11c>)
 80016f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016fa:	4b32      	ldr	r3, [pc, #200]	@ (80017c4 <MX_GPIO_Init+0x11c>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001702:	61bb      	str	r3, [r7, #24]
 8001704:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001706:	4b2f      	ldr	r3, [pc, #188]	@ (80017c4 <MX_GPIO_Init+0x11c>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170a:	4a2e      	ldr	r2, [pc, #184]	@ (80017c4 <MX_GPIO_Init+0x11c>)
 800170c:	f043 0308 	orr.w	r3, r3, #8
 8001710:	6313      	str	r3, [r2, #48]	@ 0x30
 8001712:	4b2c      	ldr	r3, [pc, #176]	@ (80017c4 <MX_GPIO_Init+0x11c>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001716:	f003 0308 	and.w	r3, r3, #8
 800171a:	617b      	str	r3, [r7, #20]
 800171c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800171e:	4b29      	ldr	r3, [pc, #164]	@ (80017c4 <MX_GPIO_Init+0x11c>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001722:	4a28      	ldr	r2, [pc, #160]	@ (80017c4 <MX_GPIO_Init+0x11c>)
 8001724:	f043 0320 	orr.w	r3, r3, #32
 8001728:	6313      	str	r3, [r2, #48]	@ 0x30
 800172a:	4b26      	ldr	r3, [pc, #152]	@ (80017c4 <MX_GPIO_Init+0x11c>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172e:	f003 0320 	and.w	r3, r3, #32
 8001732:	613b      	str	r3, [r7, #16]
 8001734:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001736:	4b23      	ldr	r3, [pc, #140]	@ (80017c4 <MX_GPIO_Init+0x11c>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173a:	4a22      	ldr	r2, [pc, #136]	@ (80017c4 <MX_GPIO_Init+0x11c>)
 800173c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001740:	6313      	str	r3, [r2, #48]	@ 0x30
 8001742:	4b20      	ldr	r3, [pc, #128]	@ (80017c4 <MX_GPIO_Init+0x11c>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800174e:	4b1d      	ldr	r3, [pc, #116]	@ (80017c4 <MX_GPIO_Init+0x11c>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001752:	4a1c      	ldr	r2, [pc, #112]	@ (80017c4 <MX_GPIO_Init+0x11c>)
 8001754:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001758:	6313      	str	r3, [r2, #48]	@ 0x30
 800175a:	4b1a      	ldr	r3, [pc, #104]	@ (80017c4 <MX_GPIO_Init+0x11c>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001762:	60bb      	str	r3, [r7, #8]
 8001764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001766:	4b17      	ldr	r3, [pc, #92]	@ (80017c4 <MX_GPIO_Init+0x11c>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176a:	4a16      	ldr	r2, [pc, #88]	@ (80017c4 <MX_GPIO_Init+0x11c>)
 800176c:	f043 0304 	orr.w	r3, r3, #4
 8001770:	6313      	str	r3, [r2, #48]	@ 0x30
 8001772:	4b14      	ldr	r3, [pc, #80]	@ (80017c4 <MX_GPIO_Init+0x11c>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001776:	f003 0304 	and.w	r3, r3, #4
 800177a:	607b      	str	r3, [r7, #4]
 800177c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800177e:	4b11      	ldr	r3, [pc, #68]	@ (80017c4 <MX_GPIO_Init+0x11c>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001782:	4a10      	ldr	r2, [pc, #64]	@ (80017c4 <MX_GPIO_Init+0x11c>)
 8001784:	f043 0310 	orr.w	r3, r3, #16
 8001788:	6313      	str	r3, [r2, #48]	@ 0x30
 800178a:	4b0e      	ldr	r3, [pc, #56]	@ (80017c4 <MX_GPIO_Init+0x11c>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178e:	f003 0310 	and.w	r3, r3, #16
 8001792:	603b      	str	r3, [r7, #0]
 8001794:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 8001796:	2200      	movs	r2, #0
 8001798:	2102      	movs	r1, #2
 800179a:	480b      	ldr	r0, [pc, #44]	@ (80017c8 <MX_GPIO_Init+0x120>)
 800179c:	f000 feb0 	bl	8002500 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017a0:	2302      	movs	r3, #2
 80017a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a4:	2301      	movs	r3, #1
 80017a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ac:	2300      	movs	r3, #0
 80017ae:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80017b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017b4:	4619      	mov	r1, r3
 80017b6:	4804      	ldr	r0, [pc, #16]	@ (80017c8 <MX_GPIO_Init+0x120>)
 80017b8:	f000 fcf6 	bl	80021a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80017bc:	bf00      	nop
 80017be:	3738      	adds	r7, #56	@ 0x38
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40023800 	.word	0x40023800
 80017c8:	40022000 	.word	0x40022000

080017cc <TaskBlinkLED>:

/* USER CODE BEGIN 4 */

void TaskBlinkLED(void *pvParameters)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
    while (1)
    {
    	HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_1);
 80017d4:	2102      	movs	r1, #2
 80017d6:	4804      	ldr	r0, [pc, #16]	@ (80017e8 <TaskBlinkLED+0x1c>)
 80017d8:	f000 feab 	bl	8002532 <HAL_GPIO_TogglePin>
//    	uart_ring_buffer_put("LED Toggle\n", 11);
        vTaskDelay(pdMS_TO_TICKS(500));
 80017dc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80017e0:	f009 f868 	bl	800a8b4 <vTaskDelay>
    	HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_1);
 80017e4:	bf00      	nop
 80017e6:	e7f5      	b.n	80017d4 <TaskBlinkLED+0x8>
 80017e8:	40022000 	.word	0x40022000

080017ec <Debuglogging>:
    }
}


void Debuglogging(void *pvParameters)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
	uart_debug_init();
 80017f4:	f00b f82e 	bl	800c854 <uart_debug_init>
	while(1)
	{
		task_debug_logging();
 80017f8:	f00a ffac 	bl	800c754 <task_debug_logging>
		vTaskDelay(50);
 80017fc:	2032      	movs	r0, #50	@ 0x32
 80017fe:	f009 f859 	bl	800a8b4 <vTaskDelay>
		task_debug_logging();
 8001802:	bf00      	nop
 8001804:	e7f8      	b.n	80017f8 <Debuglogging+0xc>

08001806 <vApplicationStackOverflowHook>:
	}
}

void vApplicationStackOverflowHook (TaskHandle_t xTask, signed char *pcTaskName)
{
 8001806:	b480      	push	{r7}
 8001808:	b083      	sub	sp, #12
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
 800180e:	6039      	str	r1, [r7, #0]

}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001820:	b672      	cpsid	i
}
 8001822:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001824:	bf00      	nop
 8001826:	e7fd      	b.n	8001824 <Error_Handler+0x8>

08001828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800182e:	4b11      	ldr	r3, [pc, #68]	@ (8001874 <HAL_MspInit+0x4c>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001832:	4a10      	ldr	r2, [pc, #64]	@ (8001874 <HAL_MspInit+0x4c>)
 8001834:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001838:	6413      	str	r3, [r2, #64]	@ 0x40
 800183a:	4b0e      	ldr	r3, [pc, #56]	@ (8001874 <HAL_MspInit+0x4c>)
 800183c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001842:	607b      	str	r3, [r7, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001846:	4b0b      	ldr	r3, [pc, #44]	@ (8001874 <HAL_MspInit+0x4c>)
 8001848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800184a:	4a0a      	ldr	r2, [pc, #40]	@ (8001874 <HAL_MspInit+0x4c>)
 800184c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001850:	6453      	str	r3, [r2, #68]	@ 0x44
 8001852:	4b08      	ldr	r3, [pc, #32]	@ (8001874 <HAL_MspInit+0x4c>)
 8001854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001856:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800185a:	603b      	str	r3, [r7, #0]
 800185c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800185e:	2200      	movs	r2, #0
 8001860:	210f      	movs	r1, #15
 8001862:	f06f 0001 	mvn.w	r0, #1
 8001866:	f000 fb76 	bl	8001f56 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40023800 	.word	0x40023800

08001878 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a0a      	ldr	r2, [pc, #40]	@ (80018b0 <HAL_CRC_MspInit+0x38>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d10b      	bne.n	80018a2 <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800188a:	4b0a      	ldr	r3, [pc, #40]	@ (80018b4 <HAL_CRC_MspInit+0x3c>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188e:	4a09      	ldr	r2, [pc, #36]	@ (80018b4 <HAL_CRC_MspInit+0x3c>)
 8001890:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001894:	6313      	str	r3, [r2, #48]	@ 0x30
 8001896:	4b07      	ldr	r3, [pc, #28]	@ (80018b4 <HAL_CRC_MspInit+0x3c>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 80018a2:	bf00      	nop
 80018a4:	3714      	adds	r7, #20
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	40023000 	.word	0x40023000
 80018b4:	40023800 	.word	0x40023800

080018b8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a0a      	ldr	r2, [pc, #40]	@ (80018f0 <HAL_TIM_Base_MspInit+0x38>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d10b      	bne.n	80018e2 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018ca:	4b0a      	ldr	r3, [pc, #40]	@ (80018f4 <HAL_TIM_Base_MspInit+0x3c>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ce:	4a09      	ldr	r2, [pc, #36]	@ (80018f4 <HAL_TIM_Base_MspInit+0x3c>)
 80018d0:	f043 0302 	orr.w	r3, r3, #2
 80018d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80018d6:	4b07      	ldr	r3, [pc, #28]	@ (80018f4 <HAL_TIM_Base_MspInit+0x3c>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 80018e2:	bf00      	nop
 80018e4:	3714      	adds	r7, #20
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	40000400 	.word	0x40000400
 80018f4:	40023800 	.word	0x40023800

080018f8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80018fe:	1d3b      	adds	r3, r7, #4
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800190c:	4b3a      	ldr	r3, [pc, #232]	@ (80019f8 <HAL_FMC_MspInit+0x100>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d16d      	bne.n	80019f0 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8001914:	4b38      	ldr	r3, [pc, #224]	@ (80019f8 <HAL_FMC_MspInit+0x100>)
 8001916:	2201      	movs	r2, #1
 8001918:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800191a:	4b38      	ldr	r3, [pc, #224]	@ (80019fc <HAL_FMC_MspInit+0x104>)
 800191c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800191e:	4a37      	ldr	r2, [pc, #220]	@ (80019fc <HAL_FMC_MspInit+0x104>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	6393      	str	r3, [r2, #56]	@ 0x38
 8001926:	4b35      	ldr	r3, [pc, #212]	@ (80019fc <HAL_FMC_MspInit+0x104>)
 8001928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	603b      	str	r3, [r7, #0]
 8001930:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8001932:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001936:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001938:	2302      	movs	r3, #2
 800193a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001940:	2303      	movs	r3, #3
 8001942:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001944:	230c      	movs	r3, #12
 8001946:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001948:	1d3b      	adds	r3, r7, #4
 800194a:	4619      	mov	r1, r3
 800194c:	482c      	ldr	r0, [pc, #176]	@ (8001a00 <HAL_FMC_MspInit+0x108>)
 800194e:	f000 fc2b 	bl	80021a8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8001952:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001956:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001958:	2302      	movs	r3, #2
 800195a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001960:	2303      	movs	r3, #3
 8001962:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001964:	230c      	movs	r3, #12
 8001966:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001968:	1d3b      	adds	r3, r7, #4
 800196a:	4619      	mov	r1, r3
 800196c:	4825      	ldr	r0, [pc, #148]	@ (8001a04 <HAL_FMC_MspInit+0x10c>)
 800196e:	f000 fc1b 	bl	80021a8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001972:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001976:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001978:	2302      	movs	r3, #2
 800197a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001980:	2303      	movs	r3, #3
 8001982:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001984:	230c      	movs	r3, #12
 8001986:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001988:	1d3b      	adds	r3, r7, #4
 800198a:	4619      	mov	r1, r3
 800198c:	481e      	ldr	r0, [pc, #120]	@ (8001a08 <HAL_FMC_MspInit+0x110>)
 800198e:	f000 fc0b 	bl	80021a8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 8001992:	2328      	movs	r3, #40	@ 0x28
 8001994:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001996:	2302      	movs	r3, #2
 8001998:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800199e:	2303      	movs	r3, #3
 80019a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019a2:	230c      	movs	r3, #12
 80019a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80019a6:	1d3b      	adds	r3, r7, #4
 80019a8:	4619      	mov	r1, r3
 80019aa:	4818      	ldr	r0, [pc, #96]	@ (8001a0c <HAL_FMC_MspInit+0x114>)
 80019ac:	f000 fbfc 	bl	80021a8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019b0:	2308      	movs	r3, #8
 80019b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b4:	2302      	movs	r3, #2
 80019b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019bc:	2303      	movs	r3, #3
 80019be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019c0:	230c      	movs	r3, #12
 80019c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019c4:	1d3b      	adds	r3, r7, #4
 80019c6:	4619      	mov	r1, r3
 80019c8:	4811      	ldr	r0, [pc, #68]	@ (8001a10 <HAL_FMC_MspInit+0x118>)
 80019ca:	f000 fbed 	bl	80021a8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14
 80019ce:	f64f 7380 	movw	r3, #65408	@ 0xff80
 80019d2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d4:	2302      	movs	r3, #2
 80019d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019dc:	2303      	movs	r3, #3
 80019de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019e0:	230c      	movs	r3, #12
 80019e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019e4:	1d3b      	adds	r3, r7, #4
 80019e6:	4619      	mov	r1, r3
 80019e8:	480a      	ldr	r0, [pc, #40]	@ (8001a14 <HAL_FMC_MspInit+0x11c>)
 80019ea:	f000 fbdd 	bl	80021a8 <HAL_GPIO_Init>
 80019ee:	e000      	b.n	80019f2 <HAL_FMC_MspInit+0xfa>
    return;
 80019f0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80019f2:	3718      	adds	r7, #24
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	200003b8 	.word	0x200003b8
 80019fc:	40023800 	.word	0x40023800
 8001a00:	40021800 	.word	0x40021800
 8001a04:	40020c00 	.word	0x40020c00
 8001a08:	40021400 	.word	0x40021400
 8001a0c:	40021c00 	.word	0x40021c00
 8001a10:	40020800 	.word	0x40020800
 8001a14:	40021000 	.word	0x40021000

08001a18 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001a20:	f7ff ff6a 	bl	80018f8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001a24:	bf00      	nop
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a30:	bf00      	nop
 8001a32:	e7fd      	b.n	8001a30 <NMI_Handler+0x4>

08001a34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a38:	bf00      	nop
 8001a3a:	e7fd      	b.n	8001a38 <HardFault_Handler+0x4>

08001a3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a40:	bf00      	nop
 8001a42:	e7fd      	b.n	8001a40 <MemManage_Handler+0x4>

08001a44 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a48:	bf00      	nop
 8001a4a:	e7fd      	b.n	8001a48 <BusFault_Handler+0x4>

08001a4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a50:	bf00      	nop
 8001a52:	e7fd      	b.n	8001a50 <UsageFault_Handler+0x4>

08001a54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a58:	bf00      	nop
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a66:	f000 f957 	bl	8001d18 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001a6a:	f009 fcb3 	bl	800b3d4 <xTaskGetSchedulerState>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d001      	beq.n	8001a78 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001a74:	f00a faa0 	bl	800bfb8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a78:	bf00      	nop
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	uart_IRQ_handler();
 8001a80:	f00a fe9c 	bl	800c7bc <uart_IRQ_handler>
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001a84:	bf00      	nop
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001a8c:	4802      	ldr	r0, [pc, #8]	@ (8001a98 <OTG_HS_IRQHandler+0x10>)
 8001a8e:	f000 fea2 	bl	80027d6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	2000f6f0 	.word	0x2000f6f0

08001a9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  return 1;
 8001aa0:	2301      	movs	r3, #1
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <_kill>:

int _kill(int pid, int sig)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ab6:	f00c ff5d 	bl	800e974 <__errno>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2216      	movs	r2, #22
 8001abe:	601a      	str	r2, [r3, #0]
  return -1;
 8001ac0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <_exit>:

void _exit (int status)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ad4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f7ff ffe7 	bl	8001aac <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ade:	bf00      	nop
 8001ae0:	e7fd      	b.n	8001ade <_exit+0x12>

08001ae2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b086      	sub	sp, #24
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	60f8      	str	r0, [r7, #12]
 8001aea:	60b9      	str	r1, [r7, #8]
 8001aec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aee:	2300      	movs	r3, #0
 8001af0:	617b      	str	r3, [r7, #20]
 8001af2:	e00a      	b.n	8001b0a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001af4:	f3af 8000 	nop.w
 8001af8:	4601      	mov	r1, r0
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	1c5a      	adds	r2, r3, #1
 8001afe:	60ba      	str	r2, [r7, #8]
 8001b00:	b2ca      	uxtb	r2, r1
 8001b02:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	3301      	adds	r3, #1
 8001b08:	617b      	str	r3, [r7, #20]
 8001b0a:	697a      	ldr	r2, [r7, #20]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	dbf0      	blt.n	8001af4 <_read+0x12>
  }

  return len;
 8001b12:	687b      	ldr	r3, [r7, #4]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3718      	adds	r7, #24
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]
 8001b2c:	e009      	b.n	8001b42 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	1c5a      	adds	r2, r3, #1
 8001b32:	60ba      	str	r2, [r7, #8]
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	617b      	str	r3, [r7, #20]
 8001b42:	697a      	ldr	r2, [r7, #20]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	dbf1      	blt.n	8001b2e <_write+0x12>
  }
  return len;
 8001b4a:	687b      	ldr	r3, [r7, #4]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3718      	adds	r7, #24
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <_close>:

int _close(int file)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b7c:	605a      	str	r2, [r3, #4]
  return 0;
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <_isatty>:

int _isatty(int file)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b94:	2301      	movs	r3, #1
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b085      	sub	sp, #20
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	60f8      	str	r0, [r7, #12]
 8001baa:	60b9      	str	r1, [r7, #8]
 8001bac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3714      	adds	r7, #20
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bc4:	4a14      	ldr	r2, [pc, #80]	@ (8001c18 <_sbrk+0x5c>)
 8001bc6:	4b15      	ldr	r3, [pc, #84]	@ (8001c1c <_sbrk+0x60>)
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bd0:	4b13      	ldr	r3, [pc, #76]	@ (8001c20 <_sbrk+0x64>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d102      	bne.n	8001bde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bd8:	4b11      	ldr	r3, [pc, #68]	@ (8001c20 <_sbrk+0x64>)
 8001bda:	4a12      	ldr	r2, [pc, #72]	@ (8001c24 <_sbrk+0x68>)
 8001bdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bde:	4b10      	ldr	r3, [pc, #64]	@ (8001c20 <_sbrk+0x64>)
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4413      	add	r3, r2
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d207      	bcs.n	8001bfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bec:	f00c fec2 	bl	800e974 <__errno>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	220c      	movs	r2, #12
 8001bf4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bfa:	e009      	b.n	8001c10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bfc:	4b08      	ldr	r3, [pc, #32]	@ (8001c20 <_sbrk+0x64>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c02:	4b07      	ldr	r3, [pc, #28]	@ (8001c20 <_sbrk+0x64>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4413      	add	r3, r2
 8001c0a:	4a05      	ldr	r2, [pc, #20]	@ (8001c20 <_sbrk+0x64>)
 8001c0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3718      	adds	r7, #24
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	20050000 	.word	0x20050000
 8001c1c:	00000400 	.word	0x00000400
 8001c20:	200003bc 	.word	0x200003bc
 8001c24:	2000fd20 	.word	0x2000fd20

08001c28 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c2c:	4b06      	ldr	r3, [pc, #24]	@ (8001c48 <SystemInit+0x20>)
 8001c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c32:	4a05      	ldr	r2, [pc, #20]	@ (8001c48 <SystemInit+0x20>)
 8001c34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c84 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c50:	f7ff ffea 	bl	8001c28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c54:	480c      	ldr	r0, [pc, #48]	@ (8001c88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c56:	490d      	ldr	r1, [pc, #52]	@ (8001c8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c58:	4a0d      	ldr	r2, [pc, #52]	@ (8001c90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c5c:	e002      	b.n	8001c64 <LoopCopyDataInit>

08001c5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c62:	3304      	adds	r3, #4

08001c64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c68:	d3f9      	bcc.n	8001c5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c6c:	4c0a      	ldr	r4, [pc, #40]	@ (8001c98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c70:	e001      	b.n	8001c76 <LoopFillZerobss>

08001c72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c74:	3204      	adds	r2, #4

08001c76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c78:	d3fb      	bcc.n	8001c72 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001c7a:	f00c fe81 	bl	800e980 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c7e:	f7ff fa63 	bl	8001148 <main>
  bx  lr    
 8001c82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c84:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001c88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c8c:	200002d8 	.word	0x200002d8
  ldr r2, =_sidata
 8001c90:	08010a3c 	.word	0x08010a3c
  ldr r2, =_sbss
 8001c94:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 8001c98:	2000fd1c 	.word	0x2000fd1c

08001c9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c9c:	e7fe      	b.n	8001c9c <ADC_IRQHandler>

08001c9e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ca2:	2003      	movs	r0, #3
 8001ca4:	f000 f94c 	bl	8001f40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ca8:	200f      	movs	r0, #15
 8001caa:	f000 f805 	bl	8001cb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cae:	f7ff fdbb 	bl	8001828 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cc0:	4b12      	ldr	r3, [pc, #72]	@ (8001d0c <HAL_InitTick+0x54>)
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	4b12      	ldr	r3, [pc, #72]	@ (8001d10 <HAL_InitTick+0x58>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	4619      	mov	r1, r3
 8001cca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cce:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f000 f967 	bl	8001faa <HAL_SYSTICK_Config>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e00e      	b.n	8001d04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2b0f      	cmp	r3, #15
 8001cea:	d80a      	bhi.n	8001d02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cec:	2200      	movs	r2, #0
 8001cee:	6879      	ldr	r1, [r7, #4]
 8001cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf4:	f000 f92f 	bl	8001f56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cf8:	4a06      	ldr	r2, [pc, #24]	@ (8001d14 <HAL_InitTick+0x5c>)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	e000      	b.n	8001d04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	20000000 	.word	0x20000000
 8001d10:	20000008 	.word	0x20000008
 8001d14:	20000004 	.word	0x20000004

08001d18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d1c:	4b06      	ldr	r3, [pc, #24]	@ (8001d38 <HAL_IncTick+0x20>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	461a      	mov	r2, r3
 8001d22:	4b06      	ldr	r3, [pc, #24]	@ (8001d3c <HAL_IncTick+0x24>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4413      	add	r3, r2
 8001d28:	4a04      	ldr	r2, [pc, #16]	@ (8001d3c <HAL_IncTick+0x24>)
 8001d2a:	6013      	str	r3, [r2, #0]
}
 8001d2c:	bf00      	nop
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	20000008 	.word	0x20000008
 8001d3c:	200003c0 	.word	0x200003c0

08001d40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  return uwTick;
 8001d44:	4b03      	ldr	r3, [pc, #12]	@ (8001d54 <HAL_GetTick+0x14>)
 8001d46:	681b      	ldr	r3, [r3, #0]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	200003c0 	.word	0x200003c0

08001d58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d60:	f7ff ffee 	bl	8001d40 <HAL_GetTick>
 8001d64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d70:	d005      	beq.n	8001d7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d72:	4b0a      	ldr	r3, [pc, #40]	@ (8001d9c <HAL_Delay+0x44>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	461a      	mov	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d7e:	bf00      	nop
 8001d80:	f7ff ffde 	bl	8001d40 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d8f7      	bhi.n	8001d80 <HAL_Delay+0x28>
  {
  }
}
 8001d90:	bf00      	nop
 8001d92:	bf00      	nop
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000008 	.word	0x20000008

08001da0 <__NVIC_SetPriorityGrouping>:
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001db0:	4b0b      	ldr	r3, [pc, #44]	@ (8001de0 <__NVIC_SetPriorityGrouping+0x40>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001db6:	68ba      	ldr	r2, [r7, #8]
 8001db8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001dc8:	4b06      	ldr	r3, [pc, #24]	@ (8001de4 <__NVIC_SetPriorityGrouping+0x44>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dce:	4a04      	ldr	r2, [pc, #16]	@ (8001de0 <__NVIC_SetPriorityGrouping+0x40>)
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	60d3      	str	r3, [r2, #12]
}
 8001dd4:	bf00      	nop
 8001dd6:	3714      	adds	r7, #20
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	e000ed00 	.word	0xe000ed00
 8001de4:	05fa0000 	.word	0x05fa0000

08001de8 <__NVIC_GetPriorityGrouping>:
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dec:	4b04      	ldr	r3, [pc, #16]	@ (8001e00 <__NVIC_GetPriorityGrouping+0x18>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	0a1b      	lsrs	r3, r3, #8
 8001df2:	f003 0307 	and.w	r3, r3, #7
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <__NVIC_EnableIRQ>:
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	db0b      	blt.n	8001e2e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	f003 021f 	and.w	r2, r3, #31
 8001e1c:	4907      	ldr	r1, [pc, #28]	@ (8001e3c <__NVIC_EnableIRQ+0x38>)
 8001e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e22:	095b      	lsrs	r3, r3, #5
 8001e24:	2001      	movs	r0, #1
 8001e26:	fa00 f202 	lsl.w	r2, r0, r2
 8001e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	e000e100 	.word	0xe000e100

08001e40 <__NVIC_SetPriority>:
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	6039      	str	r1, [r7, #0]
 8001e4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	db0a      	blt.n	8001e6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	490c      	ldr	r1, [pc, #48]	@ (8001e8c <__NVIC_SetPriority+0x4c>)
 8001e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5e:	0112      	lsls	r2, r2, #4
 8001e60:	b2d2      	uxtb	r2, r2
 8001e62:	440b      	add	r3, r1
 8001e64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001e68:	e00a      	b.n	8001e80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	4908      	ldr	r1, [pc, #32]	@ (8001e90 <__NVIC_SetPriority+0x50>)
 8001e70:	79fb      	ldrb	r3, [r7, #7]
 8001e72:	f003 030f 	and.w	r3, r3, #15
 8001e76:	3b04      	subs	r3, #4
 8001e78:	0112      	lsls	r2, r2, #4
 8001e7a:	b2d2      	uxtb	r2, r2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	761a      	strb	r2, [r3, #24]
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	e000e100 	.word	0xe000e100
 8001e90:	e000ed00 	.word	0xe000ed00

08001e94 <NVIC_EncodePriority>:
{
 8001e94:	b480      	push	{r7}
 8001e96:	b089      	sub	sp, #36	@ 0x24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	f1c3 0307 	rsb	r3, r3, #7
 8001eae:	2b04      	cmp	r3, #4
 8001eb0:	bf28      	it	cs
 8001eb2:	2304      	movcs	r3, #4
 8001eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	3304      	adds	r3, #4
 8001eba:	2b06      	cmp	r3, #6
 8001ebc:	d902      	bls.n	8001ec4 <NVIC_EncodePriority+0x30>
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	3b03      	subs	r3, #3
 8001ec2:	e000      	b.n	8001ec6 <NVIC_EncodePriority+0x32>
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	43da      	mvns	r2, r3
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	401a      	ands	r2, r3
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001edc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee6:	43d9      	mvns	r1, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eec:	4313      	orrs	r3, r2
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3724      	adds	r7, #36	@ 0x24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
	...

08001efc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3b01      	subs	r3, #1
 8001f08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f0c:	d301      	bcc.n	8001f12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e00f      	b.n	8001f32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f12:	4a0a      	ldr	r2, [pc, #40]	@ (8001f3c <SysTick_Config+0x40>)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3b01      	subs	r3, #1
 8001f18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f1a:	210f      	movs	r1, #15
 8001f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f20:	f7ff ff8e 	bl	8001e40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f24:	4b05      	ldr	r3, [pc, #20]	@ (8001f3c <SysTick_Config+0x40>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f2a:	4b04      	ldr	r3, [pc, #16]	@ (8001f3c <SysTick_Config+0x40>)
 8001f2c:	2207      	movs	r2, #7
 8001f2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	e000e010 	.word	0xe000e010

08001f40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f7ff ff29 	bl	8001da0 <__NVIC_SetPriorityGrouping>
}
 8001f4e:	bf00      	nop
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b086      	sub	sp, #24
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	60b9      	str	r1, [r7, #8]
 8001f60:	607a      	str	r2, [r7, #4]
 8001f62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f64:	2300      	movs	r3, #0
 8001f66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f68:	f7ff ff3e 	bl	8001de8 <__NVIC_GetPriorityGrouping>
 8001f6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	68b9      	ldr	r1, [r7, #8]
 8001f72:	6978      	ldr	r0, [r7, #20]
 8001f74:	f7ff ff8e 	bl	8001e94 <NVIC_EncodePriority>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f7e:	4611      	mov	r1, r2
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff ff5d 	bl	8001e40 <__NVIC_SetPriority>
}
 8001f86:	bf00      	nop
 8001f88:	3718      	adds	r7, #24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b082      	sub	sp, #8
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	4603      	mov	r3, r0
 8001f96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff ff31 	bl	8001e04 <__NVIC_EnableIRQ>
}
 8001fa2:	bf00      	nop
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b082      	sub	sp, #8
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff ffa2 	bl	8001efc <SysTick_Config>
 8001fb8:	4603      	mov	r3, r0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
	...

08001fc4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e054      	b.n	8002080 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	7f5b      	ldrb	r3, [r3, #29]
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d105      	bne.n	8001fec <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7ff fc46 	bl	8001878 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2202      	movs	r2, #2
 8001ff0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	791b      	ldrb	r3, [r3, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d10c      	bne.n	8002014 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a22      	ldr	r2, [pc, #136]	@ (8002088 <HAL_CRC_Init+0xc4>)
 8002000:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f022 0218 	bic.w	r2, r2, #24
 8002010:	609a      	str	r2, [r3, #8]
 8002012:	e00c      	b.n	800202e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6899      	ldr	r1, [r3, #8]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	461a      	mov	r2, r3
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 f834 	bl	800208c <HAL_CRCEx_Polynomial_Set>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e028      	b.n	8002080 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	795b      	ldrb	r3, [r3, #5]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d105      	bne.n	8002042 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f04f 32ff 	mov.w	r2, #4294967295
 800203e:	611a      	str	r2, [r3, #16]
 8002040:	e004      	b.n	800204c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	6912      	ldr	r2, [r2, #16]
 800204a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	695a      	ldr	r2, [r3, #20]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	430a      	orrs	r2, r1
 8002060:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	699a      	ldr	r2, [r3, #24]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	430a      	orrs	r2, r1
 8002076:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	04c11db7 	.word	0x04c11db7

0800208c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800208c:	b480      	push	{r7}
 800208e:	b087      	sub	sp, #28
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002098:	2300      	movs	r3, #0
 800209a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800209c:	231f      	movs	r3, #31
 800209e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d102      	bne.n	80020b0 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	75fb      	strb	r3, [r7, #23]
 80020ae:	e063      	b.n	8002178 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80020b0:	bf00      	nop
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1e5a      	subs	r2, r3, #1
 80020b6:	613a      	str	r2, [r7, #16]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d009      	beq.n	80020d0 <HAL_CRCEx_Polynomial_Set+0x44>
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	f003 031f 	and.w	r3, r3, #31
 80020c2:	68ba      	ldr	r2, [r7, #8]
 80020c4:	fa22 f303 	lsr.w	r3, r2, r3
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d0f0      	beq.n	80020b2 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2b18      	cmp	r3, #24
 80020d4:	d846      	bhi.n	8002164 <HAL_CRCEx_Polynomial_Set+0xd8>
 80020d6:	a201      	add	r2, pc, #4	@ (adr r2, 80020dc <HAL_CRCEx_Polynomial_Set+0x50>)
 80020d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020dc:	0800216b 	.word	0x0800216b
 80020e0:	08002165 	.word	0x08002165
 80020e4:	08002165 	.word	0x08002165
 80020e8:	08002165 	.word	0x08002165
 80020ec:	08002165 	.word	0x08002165
 80020f0:	08002165 	.word	0x08002165
 80020f4:	08002165 	.word	0x08002165
 80020f8:	08002165 	.word	0x08002165
 80020fc:	08002159 	.word	0x08002159
 8002100:	08002165 	.word	0x08002165
 8002104:	08002165 	.word	0x08002165
 8002108:	08002165 	.word	0x08002165
 800210c:	08002165 	.word	0x08002165
 8002110:	08002165 	.word	0x08002165
 8002114:	08002165 	.word	0x08002165
 8002118:	08002165 	.word	0x08002165
 800211c:	0800214d 	.word	0x0800214d
 8002120:	08002165 	.word	0x08002165
 8002124:	08002165 	.word	0x08002165
 8002128:	08002165 	.word	0x08002165
 800212c:	08002165 	.word	0x08002165
 8002130:	08002165 	.word	0x08002165
 8002134:	08002165 	.word	0x08002165
 8002138:	08002165 	.word	0x08002165
 800213c:	08002141 	.word	0x08002141
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	2b06      	cmp	r3, #6
 8002144:	d913      	bls.n	800216e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800214a:	e010      	b.n	800216e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	2b07      	cmp	r3, #7
 8002150:	d90f      	bls.n	8002172 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002156:	e00c      	b.n	8002172 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	2b0f      	cmp	r3, #15
 800215c:	d90b      	bls.n	8002176 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002162:	e008      	b.n	8002176 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	75fb      	strb	r3, [r7, #23]
        break;
 8002168:	e006      	b.n	8002178 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800216a:	bf00      	nop
 800216c:	e004      	b.n	8002178 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800216e:	bf00      	nop
 8002170:	e002      	b.n	8002178 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002172:	bf00      	nop
 8002174:	e000      	b.n	8002178 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002176:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8002178:	7dfb      	ldrb	r3, [r7, #23]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d10d      	bne.n	800219a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68ba      	ldr	r2, [r7, #8]
 8002184:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f023 0118 	bic.w	r1, r3, #24
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	430a      	orrs	r2, r1
 8002198:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800219a:	7dfb      	ldrb	r3, [r7, #23]
}
 800219c:	4618      	mov	r0, r3
 800219e:	371c      	adds	r7, #28
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b089      	sub	sp, #36	@ 0x24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80021b2:	2300      	movs	r3, #0
 80021b4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80021b6:	2300      	movs	r3, #0
 80021b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80021ba:	2300      	movs	r3, #0
 80021bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80021be:	2300      	movs	r3, #0
 80021c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80021c2:	2300      	movs	r3, #0
 80021c4:	61fb      	str	r3, [r7, #28]
 80021c6:	e175      	b.n	80024b4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80021c8:	2201      	movs	r2, #1
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	4013      	ands	r3, r2
 80021da:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	f040 8164 	bne.w	80024ae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f003 0303 	and.w	r3, r3, #3
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d005      	beq.n	80021fe <HAL_GPIO_Init+0x56>
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f003 0303 	and.w	r3, r3, #3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d130      	bne.n	8002260 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	2203      	movs	r2, #3
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	43db      	mvns	r3, r3
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	4013      	ands	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	68da      	ldr	r2, [r3, #12]
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4313      	orrs	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002234:	2201      	movs	r2, #1
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	43db      	mvns	r3, r3
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	4013      	ands	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	091b      	lsrs	r3, r3, #4
 800224a:	f003 0201 	and.w	r2, r3, #1
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	4313      	orrs	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f003 0303 	and.w	r3, r3, #3
 8002268:	2b03      	cmp	r3, #3
 800226a:	d017      	beq.n	800229c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	2203      	movs	r2, #3
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	43db      	mvns	r3, r3
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4013      	ands	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4313      	orrs	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f003 0303 	and.w	r3, r3, #3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d123      	bne.n	80022f0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	08da      	lsrs	r2, r3, #3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3208      	adds	r2, #8
 80022b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	f003 0307 	and.w	r3, r3, #7
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	220f      	movs	r2, #15
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	43db      	mvns	r3, r3
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4013      	ands	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	691a      	ldr	r2, [r3, #16]
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4313      	orrs	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	08da      	lsrs	r2, r3, #3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3208      	adds	r2, #8
 80022ea:	69b9      	ldr	r1, [r7, #24]
 80022ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	2203      	movs	r2, #3
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	43db      	mvns	r3, r3
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	4013      	ands	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f003 0203 	and.w	r2, r3, #3
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4313      	orrs	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800232c:	2b00      	cmp	r3, #0
 800232e:	f000 80be 	beq.w	80024ae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002332:	4b66      	ldr	r3, [pc, #408]	@ (80024cc <HAL_GPIO_Init+0x324>)
 8002334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002336:	4a65      	ldr	r2, [pc, #404]	@ (80024cc <HAL_GPIO_Init+0x324>)
 8002338:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800233c:	6453      	str	r3, [r2, #68]	@ 0x44
 800233e:	4b63      	ldr	r3, [pc, #396]	@ (80024cc <HAL_GPIO_Init+0x324>)
 8002340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002342:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800234a:	4a61      	ldr	r2, [pc, #388]	@ (80024d0 <HAL_GPIO_Init+0x328>)
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	089b      	lsrs	r3, r3, #2
 8002350:	3302      	adds	r3, #2
 8002352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002356:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	f003 0303 	and.w	r3, r3, #3
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	220f      	movs	r2, #15
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	43db      	mvns	r3, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4013      	ands	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a58      	ldr	r2, [pc, #352]	@ (80024d4 <HAL_GPIO_Init+0x32c>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d037      	beq.n	80023e6 <HAL_GPIO_Init+0x23e>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a57      	ldr	r2, [pc, #348]	@ (80024d8 <HAL_GPIO_Init+0x330>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d031      	beq.n	80023e2 <HAL_GPIO_Init+0x23a>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a56      	ldr	r2, [pc, #344]	@ (80024dc <HAL_GPIO_Init+0x334>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d02b      	beq.n	80023de <HAL_GPIO_Init+0x236>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a55      	ldr	r2, [pc, #340]	@ (80024e0 <HAL_GPIO_Init+0x338>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d025      	beq.n	80023da <HAL_GPIO_Init+0x232>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a54      	ldr	r2, [pc, #336]	@ (80024e4 <HAL_GPIO_Init+0x33c>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d01f      	beq.n	80023d6 <HAL_GPIO_Init+0x22e>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a53      	ldr	r2, [pc, #332]	@ (80024e8 <HAL_GPIO_Init+0x340>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d019      	beq.n	80023d2 <HAL_GPIO_Init+0x22a>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a52      	ldr	r2, [pc, #328]	@ (80024ec <HAL_GPIO_Init+0x344>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d013      	beq.n	80023ce <HAL_GPIO_Init+0x226>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a51      	ldr	r2, [pc, #324]	@ (80024f0 <HAL_GPIO_Init+0x348>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d00d      	beq.n	80023ca <HAL_GPIO_Init+0x222>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a50      	ldr	r2, [pc, #320]	@ (80024f4 <HAL_GPIO_Init+0x34c>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d007      	beq.n	80023c6 <HAL_GPIO_Init+0x21e>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a4f      	ldr	r2, [pc, #316]	@ (80024f8 <HAL_GPIO_Init+0x350>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d101      	bne.n	80023c2 <HAL_GPIO_Init+0x21a>
 80023be:	2309      	movs	r3, #9
 80023c0:	e012      	b.n	80023e8 <HAL_GPIO_Init+0x240>
 80023c2:	230a      	movs	r3, #10
 80023c4:	e010      	b.n	80023e8 <HAL_GPIO_Init+0x240>
 80023c6:	2308      	movs	r3, #8
 80023c8:	e00e      	b.n	80023e8 <HAL_GPIO_Init+0x240>
 80023ca:	2307      	movs	r3, #7
 80023cc:	e00c      	b.n	80023e8 <HAL_GPIO_Init+0x240>
 80023ce:	2306      	movs	r3, #6
 80023d0:	e00a      	b.n	80023e8 <HAL_GPIO_Init+0x240>
 80023d2:	2305      	movs	r3, #5
 80023d4:	e008      	b.n	80023e8 <HAL_GPIO_Init+0x240>
 80023d6:	2304      	movs	r3, #4
 80023d8:	e006      	b.n	80023e8 <HAL_GPIO_Init+0x240>
 80023da:	2303      	movs	r3, #3
 80023dc:	e004      	b.n	80023e8 <HAL_GPIO_Init+0x240>
 80023de:	2302      	movs	r3, #2
 80023e0:	e002      	b.n	80023e8 <HAL_GPIO_Init+0x240>
 80023e2:	2301      	movs	r3, #1
 80023e4:	e000      	b.n	80023e8 <HAL_GPIO_Init+0x240>
 80023e6:	2300      	movs	r3, #0
 80023e8:	69fa      	ldr	r2, [r7, #28]
 80023ea:	f002 0203 	and.w	r2, r2, #3
 80023ee:	0092      	lsls	r2, r2, #2
 80023f0:	4093      	lsls	r3, r2
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80023f8:	4935      	ldr	r1, [pc, #212]	@ (80024d0 <HAL_GPIO_Init+0x328>)
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	089b      	lsrs	r3, r3, #2
 80023fe:	3302      	adds	r3, #2
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002406:	4b3d      	ldr	r3, [pc, #244]	@ (80024fc <HAL_GPIO_Init+0x354>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	43db      	mvns	r3, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4013      	ands	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	4313      	orrs	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800242a:	4a34      	ldr	r2, [pc, #208]	@ (80024fc <HAL_GPIO_Init+0x354>)
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002430:	4b32      	ldr	r3, [pc, #200]	@ (80024fc <HAL_GPIO_Init+0x354>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	43db      	mvns	r3, r3
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4013      	ands	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d003      	beq.n	8002454 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	4313      	orrs	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002454:	4a29      	ldr	r2, [pc, #164]	@ (80024fc <HAL_GPIO_Init+0x354>)
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800245a:	4b28      	ldr	r3, [pc, #160]	@ (80024fc <HAL_GPIO_Init+0x354>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	43db      	mvns	r3, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4013      	ands	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	4313      	orrs	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800247e:	4a1f      	ldr	r2, [pc, #124]	@ (80024fc <HAL_GPIO_Init+0x354>)
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002484:	4b1d      	ldr	r3, [pc, #116]	@ (80024fc <HAL_GPIO_Init+0x354>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	43db      	mvns	r3, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4013      	ands	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024a8:	4a14      	ldr	r2, [pc, #80]	@ (80024fc <HAL_GPIO_Init+0x354>)
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	3301      	adds	r3, #1
 80024b2:	61fb      	str	r3, [r7, #28]
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	2b0f      	cmp	r3, #15
 80024b8:	f67f ae86 	bls.w	80021c8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80024bc:	bf00      	nop
 80024be:	bf00      	nop
 80024c0:	3724      	adds	r7, #36	@ 0x24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	40023800 	.word	0x40023800
 80024d0:	40013800 	.word	0x40013800
 80024d4:	40020000 	.word	0x40020000
 80024d8:	40020400 	.word	0x40020400
 80024dc:	40020800 	.word	0x40020800
 80024e0:	40020c00 	.word	0x40020c00
 80024e4:	40021000 	.word	0x40021000
 80024e8:	40021400 	.word	0x40021400
 80024ec:	40021800 	.word	0x40021800
 80024f0:	40021c00 	.word	0x40021c00
 80024f4:	40022000 	.word	0x40022000
 80024f8:	40022400 	.word	0x40022400
 80024fc:	40013c00 	.word	0x40013c00

08002500 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	460b      	mov	r3, r1
 800250a:	807b      	strh	r3, [r7, #2]
 800250c:	4613      	mov	r3, r2
 800250e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002510:	787b      	ldrb	r3, [r7, #1]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d003      	beq.n	800251e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002516:	887a      	ldrh	r2, [r7, #2]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800251c:	e003      	b.n	8002526 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800251e:	887b      	ldrh	r3, [r7, #2]
 8002520:	041a      	lsls	r2, r3, #16
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	619a      	str	r2, [r3, #24]
}
 8002526:	bf00      	nop
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002532:	b480      	push	{r7}
 8002534:	b085      	sub	sp, #20
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
 800253a:	460b      	mov	r3, r1
 800253c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002544:	887a      	ldrh	r2, [r7, #2]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	4013      	ands	r3, r2
 800254a:	041a      	lsls	r2, r3, #16
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	43d9      	mvns	r1, r3
 8002550:	887b      	ldrh	r3, [r7, #2]
 8002552:	400b      	ands	r3, r1
 8002554:	431a      	orrs	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	619a      	str	r2, [r3, #24]
}
 800255a:	bf00      	nop
 800255c:	3714      	adds	r7, #20
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b086      	sub	sp, #24
 800256a:	af02      	add	r7, sp, #8
 800256c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e108      	b.n	800278a <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d106      	bne.n	8002598 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f00a ff5e 	bl	800d454 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2203      	movs	r2, #3
 800259c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025a6:	d102      	bne.n	80025ae <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f003 fef3 	bl	800639e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6818      	ldr	r0, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	7c1a      	ldrb	r2, [r3, #16]
 80025c0:	f88d 2000 	strb.w	r2, [sp]
 80025c4:	3304      	adds	r3, #4
 80025c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025c8:	f003 fddc 	bl	8006184 <USB_CoreInit>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d005      	beq.n	80025de <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2202      	movs	r2, #2
 80025d6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e0d5      	b.n	800278a <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2100      	movs	r1, #0
 80025e4:	4618      	mov	r0, r3
 80025e6:	f003 feeb 	bl	80063c0 <USB_SetCurrentMode>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d005      	beq.n	80025fc <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2202      	movs	r2, #2
 80025f4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e0c6      	b.n	800278a <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025fc:	2300      	movs	r3, #0
 80025fe:	73fb      	strb	r3, [r7, #15]
 8002600:	e04a      	b.n	8002698 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002602:	7bfa      	ldrb	r2, [r7, #15]
 8002604:	6879      	ldr	r1, [r7, #4]
 8002606:	4613      	mov	r3, r2
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	4413      	add	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	440b      	add	r3, r1
 8002610:	3315      	adds	r3, #21
 8002612:	2201      	movs	r2, #1
 8002614:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002616:	7bfa      	ldrb	r2, [r7, #15]
 8002618:	6879      	ldr	r1, [r7, #4]
 800261a:	4613      	mov	r3, r2
 800261c:	00db      	lsls	r3, r3, #3
 800261e:	4413      	add	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	440b      	add	r3, r1
 8002624:	3314      	adds	r3, #20
 8002626:	7bfa      	ldrb	r2, [r7, #15]
 8002628:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800262a:	7bfa      	ldrb	r2, [r7, #15]
 800262c:	7bfb      	ldrb	r3, [r7, #15]
 800262e:	b298      	uxth	r0, r3
 8002630:	6879      	ldr	r1, [r7, #4]
 8002632:	4613      	mov	r3, r2
 8002634:	00db      	lsls	r3, r3, #3
 8002636:	4413      	add	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	440b      	add	r3, r1
 800263c:	332e      	adds	r3, #46	@ 0x2e
 800263e:	4602      	mov	r2, r0
 8002640:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002642:	7bfa      	ldrb	r2, [r7, #15]
 8002644:	6879      	ldr	r1, [r7, #4]
 8002646:	4613      	mov	r3, r2
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	4413      	add	r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	440b      	add	r3, r1
 8002650:	3318      	adds	r3, #24
 8002652:	2200      	movs	r2, #0
 8002654:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002656:	7bfa      	ldrb	r2, [r7, #15]
 8002658:	6879      	ldr	r1, [r7, #4]
 800265a:	4613      	mov	r3, r2
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	4413      	add	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	440b      	add	r3, r1
 8002664:	331c      	adds	r3, #28
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800266a:	7bfa      	ldrb	r2, [r7, #15]
 800266c:	6879      	ldr	r1, [r7, #4]
 800266e:	4613      	mov	r3, r2
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	4413      	add	r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	440b      	add	r3, r1
 8002678:	3320      	adds	r3, #32
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800267e:	7bfa      	ldrb	r2, [r7, #15]
 8002680:	6879      	ldr	r1, [r7, #4]
 8002682:	4613      	mov	r3, r2
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	4413      	add	r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	440b      	add	r3, r1
 800268c:	3324      	adds	r3, #36	@ 0x24
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002692:	7bfb      	ldrb	r3, [r7, #15]
 8002694:	3301      	adds	r3, #1
 8002696:	73fb      	strb	r3, [r7, #15]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	791b      	ldrb	r3, [r3, #4]
 800269c:	7bfa      	ldrb	r2, [r7, #15]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d3af      	bcc.n	8002602 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026a2:	2300      	movs	r3, #0
 80026a4:	73fb      	strb	r3, [r7, #15]
 80026a6:	e044      	b.n	8002732 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80026a8:	7bfa      	ldrb	r2, [r7, #15]
 80026aa:	6879      	ldr	r1, [r7, #4]
 80026ac:	4613      	mov	r3, r2
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	4413      	add	r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	440b      	add	r3, r1
 80026b6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80026ba:	2200      	movs	r2, #0
 80026bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80026be:	7bfa      	ldrb	r2, [r7, #15]
 80026c0:	6879      	ldr	r1, [r7, #4]
 80026c2:	4613      	mov	r3, r2
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	4413      	add	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	440b      	add	r3, r1
 80026cc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80026d0:	7bfa      	ldrb	r2, [r7, #15]
 80026d2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80026d4:	7bfa      	ldrb	r2, [r7, #15]
 80026d6:	6879      	ldr	r1, [r7, #4]
 80026d8:	4613      	mov	r3, r2
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	4413      	add	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	440b      	add	r3, r1
 80026e2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80026e6:	2200      	movs	r2, #0
 80026e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80026ea:	7bfa      	ldrb	r2, [r7, #15]
 80026ec:	6879      	ldr	r1, [r7, #4]
 80026ee:	4613      	mov	r3, r2
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	4413      	add	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	440b      	add	r3, r1
 80026f8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80026fc:	2200      	movs	r2, #0
 80026fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002700:	7bfa      	ldrb	r2, [r7, #15]
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	4613      	mov	r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	4413      	add	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	440b      	add	r3, r1
 800270e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002712:	2200      	movs	r2, #0
 8002714:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002716:	7bfa      	ldrb	r2, [r7, #15]
 8002718:	6879      	ldr	r1, [r7, #4]
 800271a:	4613      	mov	r3, r2
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	4413      	add	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	440b      	add	r3, r1
 8002724:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800272c:	7bfb      	ldrb	r3, [r7, #15]
 800272e:	3301      	adds	r3, #1
 8002730:	73fb      	strb	r3, [r7, #15]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	791b      	ldrb	r3, [r3, #4]
 8002736:	7bfa      	ldrb	r2, [r7, #15]
 8002738:	429a      	cmp	r2, r3
 800273a:	d3b5      	bcc.n	80026a8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6818      	ldr	r0, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	7c1a      	ldrb	r2, [r3, #16]
 8002744:	f88d 2000 	strb.w	r2, [sp]
 8002748:	3304      	adds	r3, #4
 800274a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800274c:	f003 fe84 	bl	8006458 <USB_DevInit>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d005      	beq.n	8002762 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2202      	movs	r2, #2
 800275a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e013      	b.n	800278a <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	7b1b      	ldrb	r3, [r3, #12]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d102      	bne.n	800277e <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f001 f95b 	bl	8003a34 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f004 fec7 	bl	8007516 <USB_DevDisconnect>

  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b082      	sub	sp, #8
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d101      	bne.n	80027a8 <HAL_PCD_Start+0x16>
 80027a4:	2302      	movs	r3, #2
 80027a6:	e012      	b.n	80027ce <HAL_PCD_Start+0x3c>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  __HAL_PCD_ENABLE(hpcd);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f003 fde1 	bl	800637c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f004 fe88 	bl	80074d4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80027d6:	b590      	push	{r4, r7, lr}
 80027d8:	b08d      	sub	sp, #52	@ 0x34
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027e4:	6a3b      	ldr	r3, [r7, #32]
 80027e6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f004 ff46 	bl	800767e <USB_GetMode>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f040 84b9 	bne.w	800316c <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4618      	mov	r0, r3
 8002800:	f004 feaa 	bl	8007558 <USB_ReadInterrupts>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	f000 84af 	beq.w	800316a <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	0a1b      	lsrs	r3, r3, #8
 8002816:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4618      	mov	r0, r3
 8002826:	f004 fe97 	bl	8007558 <USB_ReadInterrupts>
 800282a:	4603      	mov	r3, r0
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b02      	cmp	r3, #2
 8002832:	d107      	bne.n	8002844 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	695a      	ldr	r2, [r3, #20]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f002 0202 	and.w	r2, r2, #2
 8002842:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4618      	mov	r0, r3
 800284a:	f004 fe85 	bl	8007558 <USB_ReadInterrupts>
 800284e:	4603      	mov	r3, r0
 8002850:	f003 0310 	and.w	r3, r3, #16
 8002854:	2b10      	cmp	r3, #16
 8002856:	d161      	bne.n	800291c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	699a      	ldr	r2, [r3, #24]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 0210 	bic.w	r2, r2, #16
 8002866:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002868:	6a3b      	ldr	r3, [r7, #32]
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	f003 020f 	and.w	r2, r3, #15
 8002874:	4613      	mov	r3, r2
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	4413      	add	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	4413      	add	r3, r2
 8002884:	3304      	adds	r3, #4
 8002886:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800288e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002892:	d124      	bne.n	80028de <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800289a:	4013      	ands	r3, r2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d035      	beq.n	800290c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	091b      	lsrs	r3, r3, #4
 80028a8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80028aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	461a      	mov	r2, r3
 80028b2:	6a38      	ldr	r0, [r7, #32]
 80028b4:	f004 fcbc 	bl	8007230 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	68da      	ldr	r2, [r3, #12]
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	091b      	lsrs	r3, r3, #4
 80028c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028c4:	441a      	add	r2, r3
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	695a      	ldr	r2, [r3, #20]
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	091b      	lsrs	r3, r3, #4
 80028d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028d6:	441a      	add	r2, r3
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	615a      	str	r2, [r3, #20]
 80028dc:	e016      	b.n	800290c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80028e4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80028e8:	d110      	bne.n	800290c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80028f0:	2208      	movs	r2, #8
 80028f2:	4619      	mov	r1, r3
 80028f4:	6a38      	ldr	r0, [r7, #32]
 80028f6:	f004 fc9b 	bl	8007230 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	695a      	ldr	r2, [r3, #20]
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	091b      	lsrs	r3, r3, #4
 8002902:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002906:	441a      	add	r2, r3
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	699a      	ldr	r2, [r3, #24]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f042 0210 	orr.w	r2, r2, #16
 800291a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4618      	mov	r0, r3
 8002922:	f004 fe19 	bl	8007558 <USB_ReadInterrupts>
 8002926:	4603      	mov	r3, r0
 8002928:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800292c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002930:	f040 80a7 	bne.w	8002a82 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002934:	2300      	movs	r3, #0
 8002936:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4618      	mov	r0, r3
 800293e:	f004 fe1e 	bl	800757e <USB_ReadDevAllOutEpInterrupt>
 8002942:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002944:	e099      	b.n	8002a7a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	2b00      	cmp	r3, #0
 800294e:	f000 808e 	beq.w	8002a6e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002958:	b2d2      	uxtb	r2, r2
 800295a:	4611      	mov	r1, r2
 800295c:	4618      	mov	r0, r3
 800295e:	f004 fe42 	bl	80075e6 <USB_ReadDevOutEPInterrupt>
 8002962:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00c      	beq.n	8002988 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800296e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002970:	015a      	lsls	r2, r3, #5
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	4413      	add	r3, r2
 8002976:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800297a:	461a      	mov	r2, r3
 800297c:	2301      	movs	r3, #1
 800297e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002980:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 fed0 	bl	8003728 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	f003 0308 	and.w	r3, r3, #8
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00c      	beq.n	80029ac <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002994:	015a      	lsls	r2, r3, #5
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	4413      	add	r3, r2
 800299a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800299e:	461a      	mov	r2, r3
 80029a0:	2308      	movs	r3, #8
 80029a2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80029a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 ffa6 	bl	80038f8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	f003 0310 	and.w	r3, r3, #16
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d008      	beq.n	80029c8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80029b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b8:	015a      	lsls	r2, r3, #5
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	4413      	add	r3, r2
 80029be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029c2:	461a      	mov	r2, r3
 80029c4:	2310      	movs	r3, #16
 80029c6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d030      	beq.n	8002a34 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80029d2:	6a3b      	ldr	r3, [r7, #32]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029da:	2b80      	cmp	r3, #128	@ 0x80
 80029dc:	d109      	bne.n	80029f2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	69fa      	ldr	r2, [r7, #28]
 80029e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80029ec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029f0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80029f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029f4:	4613      	mov	r3, r2
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	4413      	add	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	4413      	add	r3, r2
 8002a04:	3304      	adds	r3, #4
 8002a06:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	78db      	ldrb	r3, [r3, #3]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d108      	bne.n	8002a22 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	2200      	movs	r2, #0
 8002a14:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f00a fe7f 	bl	800d720 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a24:	015a      	lsls	r2, r3, #5
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	4413      	add	r3, r2
 8002a2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a2e:	461a      	mov	r2, r3
 8002a30:	2302      	movs	r3, #2
 8002a32:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	f003 0320 	and.w	r3, r3, #32
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d008      	beq.n	8002a50 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a40:	015a      	lsls	r2, r3, #5
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	4413      	add	r3, r2
 8002a46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	2320      	movs	r3, #32
 8002a4e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d009      	beq.n	8002a6e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5c:	015a      	lsls	r2, r3, #5
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	4413      	add	r3, r2
 8002a62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a66:	461a      	mov	r2, r3
 8002a68:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a6c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a70:	3301      	adds	r3, #1
 8002a72:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a76:	085b      	lsrs	r3, r3, #1
 8002a78:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f47f af62 	bne.w	8002946 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f004 fd66 	bl	8007558 <USB_ReadInterrupts>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a92:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002a96:	f040 80db 	bne.w	8002c50 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f004 fd87 	bl	80075b2 <USB_ReadDevAllInEpInterrupt>
 8002aa4:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002aaa:	e0cd      	b.n	8002c48 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f000 80c2 	beq.w	8002c3c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002abe:	b2d2      	uxtb	r2, r2
 8002ac0:	4611      	mov	r1, r2
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f004 fdad 	bl	8007622 <USB_ReadDevInEPInterrupt>
 8002ac8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	f003 0301 	and.w	r3, r3, #1
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d057      	beq.n	8002b84 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad6:	f003 030f 	and.w	r3, r3, #15
 8002ada:	2201      	movs	r2, #1
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ae8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	43db      	mvns	r3, r3
 8002aee:	69f9      	ldr	r1, [r7, #28]
 8002af0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002af4:	4013      	ands	r3, r2
 8002af6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afa:	015a      	lsls	r2, r3, #5
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	4413      	add	r3, r2
 8002b00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b04:	461a      	mov	r2, r3
 8002b06:	2301      	movs	r3, #1
 8002b08:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	799b      	ldrb	r3, [r3, #6]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d132      	bne.n	8002b78 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b16:	4613      	mov	r3, r2
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	4413      	add	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	440b      	add	r3, r1
 8002b20:	3320      	adds	r3, #32
 8002b22:	6819      	ldr	r1, [r3, #0]
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b28:	4613      	mov	r3, r2
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	4413      	add	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	4403      	add	r3, r0
 8002b32:	331c      	adds	r3, #28
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4419      	add	r1, r3
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	4413      	add	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4403      	add	r3, r0
 8002b46:	3320      	adds	r3, #32
 8002b48:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d113      	bne.n	8002b78 <HAL_PCD_IRQHandler+0x3a2>
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b54:	4613      	mov	r3, r2
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	4413      	add	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	440b      	add	r3, r1
 8002b5e:	3324      	adds	r3, #36	@ 0x24
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d108      	bne.n	8002b78 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6818      	ldr	r0, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002b70:	461a      	mov	r2, r3
 8002b72:	2101      	movs	r1, #1
 8002b74:	f004 fdb6 	bl	80076e4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f00a fd49 	bl	800d616 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	f003 0308 	and.w	r3, r3, #8
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d008      	beq.n	8002ba0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b90:	015a      	lsls	r2, r3, #5
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	4413      	add	r3, r2
 8002b96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	2308      	movs	r3, #8
 8002b9e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	f003 0310 	and.w	r3, r3, #16
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d008      	beq.n	8002bbc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bac:	015a      	lsls	r2, r3, #5
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	2310      	movs	r3, #16
 8002bba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d008      	beq.n	8002bd8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc8:	015a      	lsls	r2, r3, #5
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	4413      	add	r3, r2
 8002bce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	2340      	movs	r3, #64	@ 0x40
 8002bd6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d023      	beq.n	8002c2a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002be2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002be4:	6a38      	ldr	r0, [r7, #32]
 8002be6:	f003 fd95 	bl	8006714 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002bea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bec:	4613      	mov	r3, r2
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	4413      	add	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	3310      	adds	r3, #16
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	3304      	adds	r3, #4
 8002bfc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	78db      	ldrb	r3, [r3, #3]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d108      	bne.n	8002c18 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	4619      	mov	r1, r3
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f00a fd96 	bl	800d744 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c1a:	015a      	lsls	r2, r3, #5
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	4413      	add	r3, r2
 8002c20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c24:	461a      	mov	r2, r3
 8002c26:	2302      	movs	r3, #2
 8002c28:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d003      	beq.n	8002c3c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002c34:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 fcea 	bl	8003610 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3e:	3301      	adds	r3, #1
 8002c40:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c44:	085b      	lsrs	r3, r3, #1
 8002c46:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f47f af2e 	bne.w	8002aac <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f004 fc7f 	bl	8007558 <USB_ReadInterrupts>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002c60:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002c64:	d122      	bne.n	8002cac <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	69fa      	ldr	r2, [r7, #28]
 8002c70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c74:	f023 0301 	bic.w	r3, r3, #1
 8002c78:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d108      	bne.n	8002c96 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f00a ff16 	bl	800dac0 <HAL_PCDEx_LPM_Callback>
 8002c94:	e002      	b.n	8002c9c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f00a fd34 	bl	800d704 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	695a      	ldr	r2, [r3, #20]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002caa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f004 fc51 	bl	8007558 <USB_ReadInterrupts>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002cc0:	d112      	bne.n	8002ce8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d102      	bne.n	8002cd8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f00a fcf0 	bl	800d6b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	695a      	ldr	r2, [r3, #20]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002ce6:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f004 fc33 	bl	8007558 <USB_ReadInterrupts>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002cf8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002cfc:	d121      	bne.n	8002d42 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	695a      	ldr	r2, [r3, #20]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8002d0c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d111      	bne.n	8002d3c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d26:	089b      	lsrs	r3, r3, #2
 8002d28:	f003 020f 	and.w	r2, r3, #15
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002d32:	2101      	movs	r1, #1
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f00a fec3 	bl	800dac0 <HAL_PCDEx_LPM_Callback>
 8002d3a:	e002      	b.n	8002d42 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f00a fcbb 	bl	800d6b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f004 fc06 	bl	8007558 <USB_ReadInterrupts>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d56:	f040 80b7 	bne.w	8002ec8 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	69fa      	ldr	r2, [r7, #28]
 8002d64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d68:	f023 0301 	bic.w	r3, r3, #1
 8002d6c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2110      	movs	r1, #16
 8002d74:	4618      	mov	r0, r3
 8002d76:	f003 fccd 	bl	8006714 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d7e:	e046      	b.n	8002e0e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d82:	015a      	lsls	r2, r3, #5
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	4413      	add	r3, r2
 8002d88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002d92:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d96:	015a      	lsls	r2, r3, #5
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002da4:	0151      	lsls	r1, r2, #5
 8002da6:	69fa      	ldr	r2, [r7, #28]
 8002da8:	440a      	add	r2, r1
 8002daa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002dae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002db2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002db6:	015a      	lsls	r2, r3, #5
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	4413      	add	r3, r2
 8002dbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002dc6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dca:	015a      	lsls	r2, r3, #5
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	4413      	add	r3, r2
 8002dd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002dd8:	0151      	lsls	r1, r2, #5
 8002dda:	69fa      	ldr	r2, [r7, #28]
 8002ddc:	440a      	add	r2, r1
 8002dde:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002de2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002de6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dea:	015a      	lsls	r2, r3, #5
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	4413      	add	r3, r2
 8002df0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002df8:	0151      	lsls	r1, r2, #5
 8002dfa:	69fa      	ldr	r2, [r7, #28]
 8002dfc:	440a      	add	r2, r1
 8002dfe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002e02:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002e06:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	791b      	ldrb	r3, [r3, #4]
 8002e12:	461a      	mov	r2, r3
 8002e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d3b2      	bcc.n	8002d80 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	69fa      	ldr	r2, [r7, #28]
 8002e24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e28:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002e2c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	7bdb      	ldrb	r3, [r3, #15]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d016      	beq.n	8002e64 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e40:	69fa      	ldr	r2, [r7, #28]
 8002e42:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e46:	f043 030b 	orr.w	r3, r3, #11
 8002e4a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e56:	69fa      	ldr	r2, [r7, #28]
 8002e58:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e5c:	f043 030b 	orr.w	r3, r3, #11
 8002e60:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e62:	e015      	b.n	8002e90 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e6a:	695a      	ldr	r2, [r3, #20]
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e72:	4619      	mov	r1, r3
 8002e74:	f242 032b 	movw	r3, #8235	@ 0x202b
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	69fa      	ldr	r2, [r7, #28]
 8002e86:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e8a:	f043 030b 	orr.w	r3, r3, #11
 8002e8e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	69fa      	ldr	r2, [r7, #28]
 8002e9a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e9e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002ea2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6818      	ldr	r0, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	f004 fc16 	bl	80076e4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	695a      	ldr	r2, [r3, #20]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002ec6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f004 fb43 	bl	8007558 <USB_ReadInterrupts>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ed8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002edc:	d123      	bne.n	8002f26 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f004 fbda 	bl	800769c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f003 fc8a 	bl	8006806 <USB_GetDevSpeed>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681c      	ldr	r4, [r3, #0]
 8002efe:	f001 fa63 	bl	80043c8 <HAL_RCC_GetHCLKFreq>
 8002f02:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002f08:	461a      	mov	r2, r3
 8002f0a:	4620      	mov	r0, r4
 8002f0c:	f003 f994 	bl	8006238 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f00a fba8 	bl	800d666 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	695a      	ldr	r2, [r3, #20]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002f24:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f004 fb14 	bl	8007558 <USB_ReadInterrupts>
 8002f30:	4603      	mov	r3, r0
 8002f32:	f003 0308 	and.w	r3, r3, #8
 8002f36:	2b08      	cmp	r3, #8
 8002f38:	d10a      	bne.n	8002f50 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f00a fb85 	bl	800d64a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	695a      	ldr	r2, [r3, #20]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f002 0208 	and.w	r2, r2, #8
 8002f4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f004 faff 	bl	8007558 <USB_ReadInterrupts>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f60:	2b80      	cmp	r3, #128	@ 0x80
 8002f62:	d123      	bne.n	8002fac <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002f64:	6a3b      	ldr	r3, [r7, #32]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002f6c:	6a3b      	ldr	r3, [r7, #32]
 8002f6e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f70:	2301      	movs	r3, #1
 8002f72:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f74:	e014      	b.n	8002fa0 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002f76:	6879      	ldr	r1, [r7, #4]
 8002f78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	4413      	add	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	440b      	add	r3, r1
 8002f84:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d105      	bne.n	8002f9a <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	4619      	mov	r1, r3
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 fb0a 	bl	80035ae <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	791b      	ldrb	r3, [r3, #4]
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d3e4      	bcc.n	8002f76 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f004 fad1 	bl	8007558 <USB_ReadInterrupts>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fbc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002fc0:	d13c      	bne.n	800303c <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fc6:	e02b      	b.n	8003020 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fca:	015a      	lsls	r2, r3, #5
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	4413      	add	r3, r2
 8002fd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002fd8:	6879      	ldr	r1, [r7, #4]
 8002fda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fdc:	4613      	mov	r3, r2
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	4413      	add	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	3318      	adds	r3, #24
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d115      	bne.n	800301a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002fee:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	da12      	bge.n	800301a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002ff4:	6879      	ldr	r1, [r7, #4]
 8002ff6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	4413      	add	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	440b      	add	r3, r1
 8003002:	3317      	adds	r3, #23
 8003004:	2201      	movs	r2, #1
 8003006:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800300a:	b2db      	uxtb	r3, r3
 800300c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003010:	b2db      	uxtb	r3, r3
 8003012:	4619      	mov	r1, r3
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 faca 	bl	80035ae <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800301a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800301c:	3301      	adds	r3, #1
 800301e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	791b      	ldrb	r3, [r3, #4]
 8003024:	461a      	mov	r2, r3
 8003026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003028:	4293      	cmp	r3, r2
 800302a:	d3cd      	bcc.n	8002fc8 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	695a      	ldr	r2, [r3, #20]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800303a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4618      	mov	r0, r3
 8003042:	f004 fa89 	bl	8007558 <USB_ReadInterrupts>
 8003046:	4603      	mov	r3, r0
 8003048:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800304c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003050:	d156      	bne.n	8003100 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003052:	2301      	movs	r3, #1
 8003054:	627b      	str	r3, [r7, #36]	@ 0x24
 8003056:	e045      	b.n	80030e4 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800305a:	015a      	lsls	r2, r3, #5
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	4413      	add	r3, r2
 8003060:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003068:	6879      	ldr	r1, [r7, #4]
 800306a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800306c:	4613      	mov	r3, r2
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	4413      	add	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	440b      	add	r3, r1
 8003076:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d12e      	bne.n	80030de <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003080:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003082:	2b00      	cmp	r3, #0
 8003084:	da2b      	bge.n	80030de <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	0c1a      	lsrs	r2, r3, #16
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003090:	4053      	eors	r3, r2
 8003092:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003096:	2b00      	cmp	r3, #0
 8003098:	d121      	bne.n	80030de <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800309a:	6879      	ldr	r1, [r7, #4]
 800309c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800309e:	4613      	mov	r3, r2
 80030a0:	00db      	lsls	r3, r3, #3
 80030a2:	4413      	add	r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	440b      	add	r3, r1
 80030a8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80030ac:	2201      	movs	r2, #1
 80030ae:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80030b0:	6a3b      	ldr	r3, [r7, #32]
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80030b8:	6a3b      	ldr	r3, [r7, #32]
 80030ba:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80030bc:	6a3b      	ldr	r3, [r7, #32]
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d10a      	bne.n	80030de <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	69fa      	ldr	r2, [r7, #28]
 80030d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80030da:	6053      	str	r3, [r2, #4]
            break;
 80030dc:	e008      	b.n	80030f0 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e0:	3301      	adds	r3, #1
 80030e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	791b      	ldrb	r3, [r3, #4]
 80030e8:	461a      	mov	r2, r3
 80030ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d3b3      	bcc.n	8003058 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	695a      	ldr	r2, [r3, #20]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80030fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4618      	mov	r0, r3
 8003106:	f004 fa27 	bl	8007558 <USB_ReadInterrupts>
 800310a:	4603      	mov	r3, r0
 800310c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003110:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003114:	d10a      	bne.n	800312c <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f00a fb26 	bl	800d768 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	695a      	ldr	r2, [r3, #20]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800312a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4618      	mov	r0, r3
 8003132:	f004 fa11 	bl	8007558 <USB_ReadInterrupts>
 8003136:	4603      	mov	r3, r0
 8003138:	f003 0304 	and.w	r3, r3, #4
 800313c:	2b04      	cmp	r3, #4
 800313e:	d115      	bne.n	800316c <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	f003 0304 	and.w	r3, r3, #4
 800314e:	2b00      	cmp	r3, #0
 8003150:	d002      	beq.n	8003158 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f00a fb16 	bl	800d784 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6859      	ldr	r1, [r3, #4]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	430a      	orrs	r2, r1
 8003166:	605a      	str	r2, [r3, #4]
 8003168:	e000      	b.n	800316c <HAL_PCD_IRQHandler+0x996>
      return;
 800316a:	bf00      	nop
    }
  }
}
 800316c:	3734      	adds	r7, #52	@ 0x34
 800316e:	46bd      	mov	sp, r7
 8003170:	bd90      	pop	{r4, r7, pc}

08003172 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b082      	sub	sp, #8
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
 800317a:	460b      	mov	r3, r1
 800317c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003184:	2b01      	cmp	r3, #1
 8003186:	d101      	bne.n	800318c <HAL_PCD_SetAddress+0x1a>
 8003188:	2302      	movs	r3, #2
 800318a:	e012      	b.n	80031b2 <HAL_PCD_SetAddress+0x40>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	78fa      	ldrb	r2, [r7, #3]
 8003198:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	78fa      	ldrb	r2, [r7, #3]
 80031a0:	4611      	mov	r1, r2
 80031a2:	4618      	mov	r0, r3
 80031a4:	f004 f970 	bl	8007488 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b084      	sub	sp, #16
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
 80031c2:	4608      	mov	r0, r1
 80031c4:	4611      	mov	r1, r2
 80031c6:	461a      	mov	r2, r3
 80031c8:	4603      	mov	r3, r0
 80031ca:	70fb      	strb	r3, [r7, #3]
 80031cc:	460b      	mov	r3, r1
 80031ce:	803b      	strh	r3, [r7, #0]
 80031d0:	4613      	mov	r3, r2
 80031d2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80031d4:	2300      	movs	r3, #0
 80031d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80031d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	da0f      	bge.n	8003200 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031e0:	78fb      	ldrb	r3, [r7, #3]
 80031e2:	f003 020f 	and.w	r2, r3, #15
 80031e6:	4613      	mov	r3, r2
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	4413      	add	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	3310      	adds	r3, #16
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	4413      	add	r3, r2
 80031f4:	3304      	adds	r3, #4
 80031f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2201      	movs	r2, #1
 80031fc:	705a      	strb	r2, [r3, #1]
 80031fe:	e00f      	b.n	8003220 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003200:	78fb      	ldrb	r3, [r7, #3]
 8003202:	f003 020f 	and.w	r2, r3, #15
 8003206:	4613      	mov	r3, r2
 8003208:	00db      	lsls	r3, r3, #3
 800320a:	4413      	add	r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	4413      	add	r3, r2
 8003216:	3304      	adds	r3, #4
 8003218:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003220:	78fb      	ldrb	r3, [r7, #3]
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	b2da      	uxtb	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800322c:	883b      	ldrh	r3, [r7, #0]
 800322e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	78ba      	ldrb	r2, [r7, #2]
 800323a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	785b      	ldrb	r3, [r3, #1]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d004      	beq.n	800324e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	461a      	mov	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800324e:	78bb      	ldrb	r3, [r7, #2]
 8003250:	2b02      	cmp	r3, #2
 8003252:	d102      	bne.n	800325a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003260:	2b01      	cmp	r3, #1
 8003262:	d101      	bne.n	8003268 <HAL_PCD_EP_Open+0xae>
 8003264:	2302      	movs	r3, #2
 8003266:	e00e      	b.n	8003286 <HAL_PCD_EP_Open+0xcc>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68f9      	ldr	r1, [r7, #12]
 8003276:	4618      	mov	r0, r3
 8003278:	f003 faea 	bl	8006850 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003284:	7afb      	ldrb	r3, [r7, #11]
}
 8003286:	4618      	mov	r0, r3
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b084      	sub	sp, #16
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
 8003296:	460b      	mov	r3, r1
 8003298:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800329a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	da0f      	bge.n	80032c2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032a2:	78fb      	ldrb	r3, [r7, #3]
 80032a4:	f003 020f 	and.w	r2, r3, #15
 80032a8:	4613      	mov	r3, r2
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	4413      	add	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	3310      	adds	r3, #16
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	4413      	add	r3, r2
 80032b6:	3304      	adds	r3, #4
 80032b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2201      	movs	r2, #1
 80032be:	705a      	strb	r2, [r3, #1]
 80032c0:	e00f      	b.n	80032e2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032c2:	78fb      	ldrb	r3, [r7, #3]
 80032c4:	f003 020f 	and.w	r2, r3, #15
 80032c8:	4613      	mov	r3, r2
 80032ca:	00db      	lsls	r3, r3, #3
 80032cc:	4413      	add	r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	4413      	add	r3, r2
 80032d8:	3304      	adds	r3, #4
 80032da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80032e2:	78fb      	ldrb	r3, [r7, #3]
 80032e4:	f003 030f 	and.w	r3, r3, #15
 80032e8:	b2da      	uxtb	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d101      	bne.n	80032fc <HAL_PCD_EP_Close+0x6e>
 80032f8:	2302      	movs	r3, #2
 80032fa:	e00e      	b.n	800331a <HAL_PCD_EP_Close+0x8c>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68f9      	ldr	r1, [r7, #12]
 800330a:	4618      	mov	r0, r3
 800330c:	f003 fb28 	bl	8006960 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b086      	sub	sp, #24
 8003326:	af00      	add	r7, sp, #0
 8003328:	60f8      	str	r0, [r7, #12]
 800332a:	607a      	str	r2, [r7, #4]
 800332c:	603b      	str	r3, [r7, #0]
 800332e:	460b      	mov	r3, r1
 8003330:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003332:	7afb      	ldrb	r3, [r7, #11]
 8003334:	f003 020f 	and.w	r2, r3, #15
 8003338:	4613      	mov	r3, r2
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	4413      	add	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	4413      	add	r3, r2
 8003348:	3304      	adds	r3, #4
 800334a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	2200      	movs	r2, #0
 800335c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	2200      	movs	r2, #0
 8003362:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003364:	7afb      	ldrb	r3, [r7, #11]
 8003366:	f003 030f 	and.w	r3, r3, #15
 800336a:	b2da      	uxtb	r2, r3
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	799b      	ldrb	r3, [r3, #6]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d102      	bne.n	800337e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6818      	ldr	r0, [r3, #0]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	799b      	ldrb	r3, [r3, #6]
 8003386:	461a      	mov	r2, r3
 8003388:	6979      	ldr	r1, [r7, #20]
 800338a:	f003 fbc5 	bl	8006b18 <USB_EPStartXfer>

  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3718      	adds	r7, #24
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	460b      	mov	r3, r1
 80033a2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80033a4:	78fb      	ldrb	r3, [r7, #3]
 80033a6:	f003 020f 	and.w	r2, r3, #15
 80033aa:	6879      	ldr	r1, [r7, #4]
 80033ac:	4613      	mov	r3, r2
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	4413      	add	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	440b      	add	r3, r1
 80033b6:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80033ba:	681b      	ldr	r3, [r3, #0]
}
 80033bc:	4618      	mov	r0, r3
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b086      	sub	sp, #24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	607a      	str	r2, [r7, #4]
 80033d2:	603b      	str	r3, [r7, #0]
 80033d4:	460b      	mov	r3, r1
 80033d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033d8:	7afb      	ldrb	r3, [r7, #11]
 80033da:	f003 020f 	and.w	r2, r3, #15
 80033de:	4613      	mov	r3, r2
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	4413      	add	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	3310      	adds	r3, #16
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	4413      	add	r3, r2
 80033ec:	3304      	adds	r3, #4
 80033ee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	683a      	ldr	r2, [r7, #0]
 80033fa:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	2200      	movs	r2, #0
 8003400:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	2201      	movs	r2, #1
 8003406:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003408:	7afb      	ldrb	r3, [r7, #11]
 800340a:	f003 030f 	and.w	r3, r3, #15
 800340e:	b2da      	uxtb	r2, r3
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	799b      	ldrb	r3, [r3, #6]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d102      	bne.n	8003422 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6818      	ldr	r0, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	799b      	ldrb	r3, [r3, #6]
 800342a:	461a      	mov	r2, r3
 800342c:	6979      	ldr	r1, [r7, #20]
 800342e:	f003 fb73 	bl	8006b18 <USB_EPStartXfer>

  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3718      	adds	r7, #24
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	460b      	mov	r3, r1
 8003446:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003448:	78fb      	ldrb	r3, [r7, #3]
 800344a:	f003 030f 	and.w	r3, r3, #15
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	7912      	ldrb	r2, [r2, #4]
 8003452:	4293      	cmp	r3, r2
 8003454:	d901      	bls.n	800345a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e04f      	b.n	80034fa <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800345a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800345e:	2b00      	cmp	r3, #0
 8003460:	da0f      	bge.n	8003482 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003462:	78fb      	ldrb	r3, [r7, #3]
 8003464:	f003 020f 	and.w	r2, r3, #15
 8003468:	4613      	mov	r3, r2
 800346a:	00db      	lsls	r3, r3, #3
 800346c:	4413      	add	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	3310      	adds	r3, #16
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	4413      	add	r3, r2
 8003476:	3304      	adds	r3, #4
 8003478:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2201      	movs	r2, #1
 800347e:	705a      	strb	r2, [r3, #1]
 8003480:	e00d      	b.n	800349e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003482:	78fa      	ldrb	r2, [r7, #3]
 8003484:	4613      	mov	r3, r2
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	4413      	add	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	4413      	add	r3, r2
 8003494:	3304      	adds	r3, #4
 8003496:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2201      	movs	r2, #1
 80034a2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034a4:	78fb      	ldrb	r3, [r7, #3]
 80034a6:	f003 030f 	and.w	r3, r3, #15
 80034aa:	b2da      	uxtb	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d101      	bne.n	80034be <HAL_PCD_EP_SetStall+0x82>
 80034ba:	2302      	movs	r3, #2
 80034bc:	e01d      	b.n	80034fa <HAL_PCD_EP_SetStall+0xbe>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68f9      	ldr	r1, [r7, #12]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f003 ff07 	bl	80072e0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034d2:	78fb      	ldrb	r3, [r7, #3]
 80034d4:	f003 030f 	and.w	r3, r3, #15
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d109      	bne.n	80034f0 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6818      	ldr	r0, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	7999      	ldrb	r1, [r3, #6]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80034ea:	461a      	mov	r2, r3
 80034ec:	f004 f8fa 	bl	80076e4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b084      	sub	sp, #16
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
 800350a:	460b      	mov	r3, r1
 800350c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800350e:	78fb      	ldrb	r3, [r7, #3]
 8003510:	f003 030f 	and.w	r3, r3, #15
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	7912      	ldrb	r2, [r2, #4]
 8003518:	4293      	cmp	r3, r2
 800351a:	d901      	bls.n	8003520 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e042      	b.n	80035a6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003520:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003524:	2b00      	cmp	r3, #0
 8003526:	da0f      	bge.n	8003548 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003528:	78fb      	ldrb	r3, [r7, #3]
 800352a:	f003 020f 	and.w	r2, r3, #15
 800352e:	4613      	mov	r3, r2
 8003530:	00db      	lsls	r3, r3, #3
 8003532:	4413      	add	r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	3310      	adds	r3, #16
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	4413      	add	r3, r2
 800353c:	3304      	adds	r3, #4
 800353e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2201      	movs	r2, #1
 8003544:	705a      	strb	r2, [r3, #1]
 8003546:	e00f      	b.n	8003568 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003548:	78fb      	ldrb	r3, [r7, #3]
 800354a:	f003 020f 	and.w	r2, r3, #15
 800354e:	4613      	mov	r3, r2
 8003550:	00db      	lsls	r3, r3, #3
 8003552:	4413      	add	r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	4413      	add	r3, r2
 800355e:	3304      	adds	r3, #4
 8003560:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800356e:	78fb      	ldrb	r3, [r7, #3]
 8003570:	f003 030f 	and.w	r3, r3, #15
 8003574:	b2da      	uxtb	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003580:	2b01      	cmp	r3, #1
 8003582:	d101      	bne.n	8003588 <HAL_PCD_EP_ClrStall+0x86>
 8003584:	2302      	movs	r3, #2
 8003586:	e00e      	b.n	80035a6 <HAL_PCD_EP_ClrStall+0xa4>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68f9      	ldr	r1, [r7, #12]
 8003596:	4618      	mov	r0, r3
 8003598:	f003 ff10 	bl	80073bc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b084      	sub	sp, #16
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
 80035b6:	460b      	mov	r3, r1
 80035b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80035ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	da0c      	bge.n	80035dc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035c2:	78fb      	ldrb	r3, [r7, #3]
 80035c4:	f003 020f 	and.w	r2, r3, #15
 80035c8:	4613      	mov	r3, r2
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	4413      	add	r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	3310      	adds	r3, #16
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	4413      	add	r3, r2
 80035d6:	3304      	adds	r3, #4
 80035d8:	60fb      	str	r3, [r7, #12]
 80035da:	e00c      	b.n	80035f6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035dc:	78fb      	ldrb	r3, [r7, #3]
 80035de:	f003 020f 	and.w	r2, r3, #15
 80035e2:	4613      	mov	r3, r2
 80035e4:	00db      	lsls	r3, r3, #3
 80035e6:	4413      	add	r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	4413      	add	r3, r2
 80035f2:	3304      	adds	r3, #4
 80035f4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68f9      	ldr	r1, [r7, #12]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f003 fd2f 	bl	8007060 <USB_EPStopXfer>
 8003602:	4603      	mov	r3, r0
 8003604:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003606:	7afb      	ldrb	r3, [r7, #11]
}
 8003608:	4618      	mov	r0, r3
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b08a      	sub	sp, #40	@ 0x28
 8003614:	af02      	add	r7, sp, #8
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003624:	683a      	ldr	r2, [r7, #0]
 8003626:	4613      	mov	r3, r2
 8003628:	00db      	lsls	r3, r3, #3
 800362a:	4413      	add	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	3310      	adds	r3, #16
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	4413      	add	r3, r2
 8003634:	3304      	adds	r3, #4
 8003636:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	695a      	ldr	r2, [r3, #20]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	429a      	cmp	r2, r3
 8003642:	d901      	bls.n	8003648 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e06b      	b.n	8003720 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	691a      	ldr	r2, [r3, #16]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	695b      	ldr	r3, [r3, #20]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	69fa      	ldr	r2, [r7, #28]
 800365a:	429a      	cmp	r2, r3
 800365c:	d902      	bls.n	8003664 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	3303      	adds	r3, #3
 8003668:	089b      	lsrs	r3, r3, #2
 800366a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800366c:	e02a      	b.n	80036c4 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	691a      	ldr	r2, [r3, #16]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	69fa      	ldr	r2, [r7, #28]
 8003680:	429a      	cmp	r2, r3
 8003682:	d902      	bls.n	800368a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	3303      	adds	r3, #3
 800368e:	089b      	lsrs	r3, r3, #2
 8003690:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	68d9      	ldr	r1, [r3, #12]
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	b2da      	uxtb	r2, r3
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80036a2:	9300      	str	r3, [sp, #0]
 80036a4:	4603      	mov	r3, r0
 80036a6:	6978      	ldr	r0, [r7, #20]
 80036a8:	f003 fd84 	bl	80071b4 <USB_WritePacket>

    ep->xfer_buff  += len;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	68da      	ldr	r2, [r3, #12]
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	441a      	add	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	695a      	ldr	r2, [r3, #20]
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	441a      	add	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	015a      	lsls	r2, r3, #5
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	4413      	add	r3, r2
 80036cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d809      	bhi.n	80036ee <PCD_WriteEmptyTxFifo+0xde>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	695a      	ldr	r2, [r3, #20]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d203      	bcs.n	80036ee <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1bf      	bne.n	800366e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	691a      	ldr	r2, [r3, #16]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d811      	bhi.n	800371e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	f003 030f 	and.w	r3, r3, #15
 8003700:	2201      	movs	r2, #1
 8003702:	fa02 f303 	lsl.w	r3, r2, r3
 8003706:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800370e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	43db      	mvns	r3, r3
 8003714:	6939      	ldr	r1, [r7, #16]
 8003716:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800371a:	4013      	ands	r3, r2
 800371c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3720      	adds	r7, #32
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b088      	sub	sp, #32
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	333c      	adds	r3, #60	@ 0x3c
 8003740:	3304      	adds	r3, #4
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	015a      	lsls	r2, r3, #5
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	4413      	add	r3, r2
 800374e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	799b      	ldrb	r3, [r3, #6]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d17b      	bne.n	8003856 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	f003 0308 	and.w	r3, r3, #8
 8003764:	2b00      	cmp	r3, #0
 8003766:	d015      	beq.n	8003794 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	4a61      	ldr	r2, [pc, #388]	@ (80038f0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800376c:	4293      	cmp	r3, r2
 800376e:	f240 80b9 	bls.w	80038e4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003778:	2b00      	cmp	r3, #0
 800377a:	f000 80b3 	beq.w	80038e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	015a      	lsls	r2, r3, #5
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	4413      	add	r3, r2
 8003786:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800378a:	461a      	mov	r2, r3
 800378c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003790:	6093      	str	r3, [r2, #8]
 8003792:	e0a7      	b.n	80038e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	f003 0320 	and.w	r3, r3, #32
 800379a:	2b00      	cmp	r3, #0
 800379c:	d009      	beq.n	80037b2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	015a      	lsls	r2, r3, #5
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	4413      	add	r3, r2
 80037a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037aa:	461a      	mov	r2, r3
 80037ac:	2320      	movs	r3, #32
 80037ae:	6093      	str	r3, [r2, #8]
 80037b0:	e098      	b.n	80038e4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f040 8093 	bne.w	80038e4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	4a4b      	ldr	r2, [pc, #300]	@ (80038f0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d90f      	bls.n	80037e6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00a      	beq.n	80037e6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	015a      	lsls	r2, r3, #5
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	4413      	add	r3, r2
 80037d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037dc:	461a      	mov	r2, r3
 80037de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037e2:	6093      	str	r3, [r2, #8]
 80037e4:	e07e      	b.n	80038e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	4613      	mov	r3, r2
 80037ea:	00db      	lsls	r3, r3, #3
 80037ec:	4413      	add	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	4413      	add	r3, r2
 80037f8:	3304      	adds	r3, #4
 80037fa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6a1a      	ldr	r2, [r3, #32]
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	0159      	lsls	r1, r3, #5
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	440b      	add	r3, r1
 8003808:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003812:	1ad2      	subs	r2, r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d114      	bne.n	8003848 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d109      	bne.n	800383a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6818      	ldr	r0, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003830:	461a      	mov	r2, r3
 8003832:	2101      	movs	r1, #1
 8003834:	f003 ff56 	bl	80076e4 <USB_EP0_OutStart>
 8003838:	e006      	b.n	8003848 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	68da      	ldr	r2, [r3, #12]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	441a      	add	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	b2db      	uxtb	r3, r3
 800384c:	4619      	mov	r1, r3
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f009 fec6 	bl	800d5e0 <HAL_PCD_DataOutStageCallback>
 8003854:	e046      	b.n	80038e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	4a26      	ldr	r2, [pc, #152]	@ (80038f4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d124      	bne.n	80038a8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00a      	beq.n	800387e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	015a      	lsls	r2, r3, #5
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	4413      	add	r3, r2
 8003870:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003874:	461a      	mov	r2, r3
 8003876:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800387a:	6093      	str	r3, [r2, #8]
 800387c:	e032      	b.n	80038e4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	f003 0320 	and.w	r3, r3, #32
 8003884:	2b00      	cmp	r3, #0
 8003886:	d008      	beq.n	800389a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	015a      	lsls	r2, r3, #5
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	4413      	add	r3, r2
 8003890:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003894:	461a      	mov	r2, r3
 8003896:	2320      	movs	r3, #32
 8003898:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	b2db      	uxtb	r3, r3
 800389e:	4619      	mov	r1, r3
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f009 fe9d 	bl	800d5e0 <HAL_PCD_DataOutStageCallback>
 80038a6:	e01d      	b.n	80038e4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d114      	bne.n	80038d8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80038ae:	6879      	ldr	r1, [r7, #4]
 80038b0:	683a      	ldr	r2, [r7, #0]
 80038b2:	4613      	mov	r3, r2
 80038b4:	00db      	lsls	r3, r3, #3
 80038b6:	4413      	add	r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	440b      	add	r3, r1
 80038bc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d108      	bne.n	80038d8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6818      	ldr	r0, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80038d0:	461a      	mov	r2, r3
 80038d2:	2100      	movs	r1, #0
 80038d4:	f003 ff06 	bl	80076e4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	4619      	mov	r1, r3
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f009 fe7e 	bl	800d5e0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3720      	adds	r7, #32
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	4f54300a 	.word	0x4f54300a
 80038f4:	4f54310a 	.word	0x4f54310a

080038f8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b086      	sub	sp, #24
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	333c      	adds	r3, #60	@ 0x3c
 8003910:	3304      	adds	r3, #4
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	015a      	lsls	r2, r3, #5
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	4413      	add	r3, r2
 800391e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	4a15      	ldr	r2, [pc, #84]	@ (8003980 <PCD_EP_OutSetupPacket_int+0x88>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d90e      	bls.n	800394c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003934:	2b00      	cmp	r3, #0
 8003936:	d009      	beq.n	800394c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	015a      	lsls	r2, r3, #5
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	4413      	add	r3, r2
 8003940:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003944:	461a      	mov	r2, r3
 8003946:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800394a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f009 fe35 	bl	800d5bc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	4a0a      	ldr	r2, [pc, #40]	@ (8003980 <PCD_EP_OutSetupPacket_int+0x88>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d90c      	bls.n	8003974 <PCD_EP_OutSetupPacket_int+0x7c>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	799b      	ldrb	r3, [r3, #6]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d108      	bne.n	8003974 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6818      	ldr	r0, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800396c:	461a      	mov	r2, r3
 800396e:	2101      	movs	r1, #1
 8003970:	f003 feb8 	bl	80076e4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3718      	adds	r7, #24
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	4f54300a 	.word	0x4f54300a

08003984 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	460b      	mov	r3, r1
 800398e:	70fb      	strb	r3, [r7, #3]
 8003990:	4613      	mov	r3, r2
 8003992:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800399a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800399c:	78fb      	ldrb	r3, [r7, #3]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d107      	bne.n	80039b2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80039a2:	883b      	ldrh	r3, [r7, #0]
 80039a4:	0419      	lsls	r1, r3, #16
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68ba      	ldr	r2, [r7, #8]
 80039ac:	430a      	orrs	r2, r1
 80039ae:	629a      	str	r2, [r3, #40]	@ 0x28
 80039b0:	e028      	b.n	8003a04 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039b8:	0c1b      	lsrs	r3, r3, #16
 80039ba:	68ba      	ldr	r2, [r7, #8]
 80039bc:	4413      	add	r3, r2
 80039be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80039c0:	2300      	movs	r3, #0
 80039c2:	73fb      	strb	r3, [r7, #15]
 80039c4:	e00d      	b.n	80039e2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	7bfb      	ldrb	r3, [r7, #15]
 80039cc:	3340      	adds	r3, #64	@ 0x40
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	4413      	add	r3, r2
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	0c1b      	lsrs	r3, r3, #16
 80039d6:	68ba      	ldr	r2, [r7, #8]
 80039d8:	4413      	add	r3, r2
 80039da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80039dc:	7bfb      	ldrb	r3, [r7, #15]
 80039de:	3301      	adds	r3, #1
 80039e0:	73fb      	strb	r3, [r7, #15]
 80039e2:	7bfa      	ldrb	r2, [r7, #15]
 80039e4:	78fb      	ldrb	r3, [r7, #3]
 80039e6:	3b01      	subs	r3, #1
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d3ec      	bcc.n	80039c6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80039ec:	883b      	ldrh	r3, [r7, #0]
 80039ee:	0418      	lsls	r0, r3, #16
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6819      	ldr	r1, [r3, #0]
 80039f4:	78fb      	ldrb	r3, [r7, #3]
 80039f6:	3b01      	subs	r3, #1
 80039f8:	68ba      	ldr	r2, [r7, #8]
 80039fa:	4302      	orrs	r2, r0
 80039fc:	3340      	adds	r3, #64	@ 0x40
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	440b      	add	r3, r1
 8003a02:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3714      	adds	r7, #20
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr

08003a12 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003a12:	b480      	push	{r7}
 8003a14:	b083      	sub	sp, #12
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	887a      	ldrh	r2, [r7, #2]
 8003a24:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a62:	4b05      	ldr	r3, [pc, #20]	@ (8003a78 <HAL_PCDEx_ActivateLPM+0x44>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3714      	adds	r7, #20
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr
 8003a78:	10000003 	.word	0x10000003

08003a7c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003a82:	2300      	movs	r3, #0
 8003a84:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003a86:	4b23      	ldr	r3, [pc, #140]	@ (8003b14 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a8a:	4a22      	ldr	r2, [pc, #136]	@ (8003b14 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a90:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a92:	4b20      	ldr	r3, [pc, #128]	@ (8003b14 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a9a:	603b      	str	r3, [r7, #0]
 8003a9c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003a9e:	4b1e      	ldr	r3, [pc, #120]	@ (8003b18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a1d      	ldr	r2, [pc, #116]	@ (8003b18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003aa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003aa8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003aaa:	f7fe f949 	bl	8001d40 <HAL_GetTick>
 8003aae:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003ab0:	e009      	b.n	8003ac6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ab2:	f7fe f945 	bl	8001d40 <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003ac0:	d901      	bls.n	8003ac6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e022      	b.n	8003b0c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003ac6:	4b14      	ldr	r3, [pc, #80]	@ (8003b18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ace:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ad2:	d1ee      	bne.n	8003ab2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003ad4:	4b10      	ldr	r3, [pc, #64]	@ (8003b18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a0f      	ldr	r2, [pc, #60]	@ (8003b18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ada:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ade:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ae0:	f7fe f92e 	bl	8001d40 <HAL_GetTick>
 8003ae4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003ae6:	e009      	b.n	8003afc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ae8:	f7fe f92a 	bl	8001d40 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003af6:	d901      	bls.n	8003afc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e007      	b.n	8003b0c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003afc:	4b06      	ldr	r3, [pc, #24]	@ (8003b18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b08:	d1ee      	bne.n	8003ae8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3708      	adds	r7, #8
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	40023800 	.word	0x40023800
 8003b18:	40007000 	.word	0x40007000

08003b1c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003b24:	2300      	movs	r3, #0
 8003b26:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e291      	b.n	8004056 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f000 8087 	beq.w	8003c4e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b40:	4b96      	ldr	r3, [pc, #600]	@ (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f003 030c 	and.w	r3, r3, #12
 8003b48:	2b04      	cmp	r3, #4
 8003b4a:	d00c      	beq.n	8003b66 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b4c:	4b93      	ldr	r3, [pc, #588]	@ (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f003 030c 	and.w	r3, r3, #12
 8003b54:	2b08      	cmp	r3, #8
 8003b56:	d112      	bne.n	8003b7e <HAL_RCC_OscConfig+0x62>
 8003b58:	4b90      	ldr	r3, [pc, #576]	@ (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b60:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b64:	d10b      	bne.n	8003b7e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b66:	4b8d      	ldr	r3, [pc, #564]	@ (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d06c      	beq.n	8003c4c <HAL_RCC_OscConfig+0x130>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d168      	bne.n	8003c4c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e26b      	b.n	8004056 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b86:	d106      	bne.n	8003b96 <HAL_RCC_OscConfig+0x7a>
 8003b88:	4b84      	ldr	r3, [pc, #528]	@ (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a83      	ldr	r2, [pc, #524]	@ (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003b8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b92:	6013      	str	r3, [r2, #0]
 8003b94:	e02e      	b.n	8003bf4 <HAL_RCC_OscConfig+0xd8>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10c      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x9c>
 8003b9e:	4b7f      	ldr	r3, [pc, #508]	@ (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a7e      	ldr	r2, [pc, #504]	@ (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003ba4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ba8:	6013      	str	r3, [r2, #0]
 8003baa:	4b7c      	ldr	r3, [pc, #496]	@ (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a7b      	ldr	r2, [pc, #492]	@ (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003bb0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bb4:	6013      	str	r3, [r2, #0]
 8003bb6:	e01d      	b.n	8003bf4 <HAL_RCC_OscConfig+0xd8>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003bc0:	d10c      	bne.n	8003bdc <HAL_RCC_OscConfig+0xc0>
 8003bc2:	4b76      	ldr	r3, [pc, #472]	@ (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a75      	ldr	r2, [pc, #468]	@ (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003bc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003bcc:	6013      	str	r3, [r2, #0]
 8003bce:	4b73      	ldr	r3, [pc, #460]	@ (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a72      	ldr	r2, [pc, #456]	@ (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003bd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bd8:	6013      	str	r3, [r2, #0]
 8003bda:	e00b      	b.n	8003bf4 <HAL_RCC_OscConfig+0xd8>
 8003bdc:	4b6f      	ldr	r3, [pc, #444]	@ (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a6e      	ldr	r2, [pc, #440]	@ (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003be2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003be6:	6013      	str	r3, [r2, #0]
 8003be8:	4b6c      	ldr	r3, [pc, #432]	@ (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a6b      	ldr	r2, [pc, #428]	@ (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003bee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d013      	beq.n	8003c24 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bfc:	f7fe f8a0 	bl	8001d40 <HAL_GetTick>
 8003c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c02:	e008      	b.n	8003c16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c04:	f7fe f89c 	bl	8001d40 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b64      	cmp	r3, #100	@ 0x64
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e21f      	b.n	8004056 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c16:	4b61      	ldr	r3, [pc, #388]	@ (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d0f0      	beq.n	8003c04 <HAL_RCC_OscConfig+0xe8>
 8003c22:	e014      	b.n	8003c4e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c24:	f7fe f88c 	bl	8001d40 <HAL_GetTick>
 8003c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c2a:	e008      	b.n	8003c3e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c2c:	f7fe f888 	bl	8001d40 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b64      	cmp	r3, #100	@ 0x64
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e20b      	b.n	8004056 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c3e:	4b57      	ldr	r3, [pc, #348]	@ (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1f0      	bne.n	8003c2c <HAL_RCC_OscConfig+0x110>
 8003c4a:	e000      	b.n	8003c4e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d069      	beq.n	8003d2e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c5a:	4b50      	ldr	r3, [pc, #320]	@ (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f003 030c 	and.w	r3, r3, #12
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00b      	beq.n	8003c7e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c66:	4b4d      	ldr	r3, [pc, #308]	@ (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f003 030c 	and.w	r3, r3, #12
 8003c6e:	2b08      	cmp	r3, #8
 8003c70:	d11c      	bne.n	8003cac <HAL_RCC_OscConfig+0x190>
 8003c72:	4b4a      	ldr	r3, [pc, #296]	@ (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d116      	bne.n	8003cac <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c7e:	4b47      	ldr	r3, [pc, #284]	@ (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d005      	beq.n	8003c96 <HAL_RCC_OscConfig+0x17a>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d001      	beq.n	8003c96 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e1df      	b.n	8004056 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c96:	4b41      	ldr	r3, [pc, #260]	@ (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	00db      	lsls	r3, r3, #3
 8003ca4:	493d      	ldr	r1, [pc, #244]	@ (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003caa:	e040      	b.n	8003d2e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d023      	beq.n	8003cfc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cb4:	4b39      	ldr	r3, [pc, #228]	@ (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a38      	ldr	r2, [pc, #224]	@ (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003cba:	f043 0301 	orr.w	r3, r3, #1
 8003cbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc0:	f7fe f83e 	bl	8001d40 <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cc6:	e008      	b.n	8003cda <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cc8:	f7fe f83a 	bl	8001d40 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e1bd      	b.n	8004056 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cda:	4b30      	ldr	r3, [pc, #192]	@ (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d0f0      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ce6:	4b2d      	ldr	r3, [pc, #180]	@ (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	4929      	ldr	r1, [pc, #164]	@ (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	600b      	str	r3, [r1, #0]
 8003cfa:	e018      	b.n	8003d2e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cfc:	4b27      	ldr	r3, [pc, #156]	@ (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a26      	ldr	r2, [pc, #152]	@ (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003d02:	f023 0301 	bic.w	r3, r3, #1
 8003d06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d08:	f7fe f81a 	bl	8001d40 <HAL_GetTick>
 8003d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d0e:	e008      	b.n	8003d22 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d10:	f7fe f816 	bl	8001d40 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e199      	b.n	8004056 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d22:	4b1e      	ldr	r3, [pc, #120]	@ (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1f0      	bne.n	8003d10 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0308 	and.w	r3, r3, #8
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d038      	beq.n	8003dac <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d019      	beq.n	8003d76 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d42:	4b16      	ldr	r3, [pc, #88]	@ (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003d44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d46:	4a15      	ldr	r2, [pc, #84]	@ (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003d48:	f043 0301 	orr.w	r3, r3, #1
 8003d4c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d4e:	f7fd fff7 	bl	8001d40 <HAL_GetTick>
 8003d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d54:	e008      	b.n	8003d68 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d56:	f7fd fff3 	bl	8001d40 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d901      	bls.n	8003d68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e176      	b.n	8004056 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d68:	4b0c      	ldr	r3, [pc, #48]	@ (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003d6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d6c:	f003 0302 	and.w	r3, r3, #2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d0f0      	beq.n	8003d56 <HAL_RCC_OscConfig+0x23a>
 8003d74:	e01a      	b.n	8003dac <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d76:	4b09      	ldr	r3, [pc, #36]	@ (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003d78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d7a:	4a08      	ldr	r2, [pc, #32]	@ (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003d7c:	f023 0301 	bic.w	r3, r3, #1
 8003d80:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d82:	f7fd ffdd 	bl	8001d40 <HAL_GetTick>
 8003d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d88:	e00a      	b.n	8003da0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d8a:	f7fd ffd9 	bl	8001d40 <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d903      	bls.n	8003da0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e15c      	b.n	8004056 <HAL_RCC_OscConfig+0x53a>
 8003d9c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003da0:	4b91      	ldr	r3, [pc, #580]	@ (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003da2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1ee      	bne.n	8003d8a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0304 	and.w	r3, r3, #4
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f000 80a4 	beq.w	8003f02 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dba:	4b8b      	ldr	r3, [pc, #556]	@ (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10d      	bne.n	8003de2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dc6:	4b88      	ldr	r3, [pc, #544]	@ (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dca:	4a87      	ldr	r2, [pc, #540]	@ (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003dcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003dd2:	4b85      	ldr	r3, [pc, #532]	@ (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dda:	60bb      	str	r3, [r7, #8]
 8003ddc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dde:	2301      	movs	r3, #1
 8003de0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003de2:	4b82      	ldr	r3, [pc, #520]	@ (8003fec <HAL_RCC_OscConfig+0x4d0>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d118      	bne.n	8003e20 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003dee:	4b7f      	ldr	r3, [pc, #508]	@ (8003fec <HAL_RCC_OscConfig+0x4d0>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a7e      	ldr	r2, [pc, #504]	@ (8003fec <HAL_RCC_OscConfig+0x4d0>)
 8003df4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003df8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dfa:	f7fd ffa1 	bl	8001d40 <HAL_GetTick>
 8003dfe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e00:	e008      	b.n	8003e14 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e02:	f7fd ff9d 	bl	8001d40 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b64      	cmp	r3, #100	@ 0x64
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e120      	b.n	8004056 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e14:	4b75      	ldr	r3, [pc, #468]	@ (8003fec <HAL_RCC_OscConfig+0x4d0>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d0f0      	beq.n	8003e02 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d106      	bne.n	8003e36 <HAL_RCC_OscConfig+0x31a>
 8003e28:	4b6f      	ldr	r3, [pc, #444]	@ (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003e2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e2c:	4a6e      	ldr	r2, [pc, #440]	@ (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003e2e:	f043 0301 	orr.w	r3, r3, #1
 8003e32:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e34:	e02d      	b.n	8003e92 <HAL_RCC_OscConfig+0x376>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10c      	bne.n	8003e58 <HAL_RCC_OscConfig+0x33c>
 8003e3e:	4b6a      	ldr	r3, [pc, #424]	@ (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003e40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e42:	4a69      	ldr	r2, [pc, #420]	@ (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003e44:	f023 0301 	bic.w	r3, r3, #1
 8003e48:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e4a:	4b67      	ldr	r3, [pc, #412]	@ (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003e4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e4e:	4a66      	ldr	r2, [pc, #408]	@ (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003e50:	f023 0304 	bic.w	r3, r3, #4
 8003e54:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e56:	e01c      	b.n	8003e92 <HAL_RCC_OscConfig+0x376>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	2b05      	cmp	r3, #5
 8003e5e:	d10c      	bne.n	8003e7a <HAL_RCC_OscConfig+0x35e>
 8003e60:	4b61      	ldr	r3, [pc, #388]	@ (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003e62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e64:	4a60      	ldr	r2, [pc, #384]	@ (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003e66:	f043 0304 	orr.w	r3, r3, #4
 8003e6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e6c:	4b5e      	ldr	r3, [pc, #376]	@ (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003e6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e70:	4a5d      	ldr	r2, [pc, #372]	@ (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003e72:	f043 0301 	orr.w	r3, r3, #1
 8003e76:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e78:	e00b      	b.n	8003e92 <HAL_RCC_OscConfig+0x376>
 8003e7a:	4b5b      	ldr	r3, [pc, #364]	@ (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003e7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e7e:	4a5a      	ldr	r2, [pc, #360]	@ (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003e80:	f023 0301 	bic.w	r3, r3, #1
 8003e84:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e86:	4b58      	ldr	r3, [pc, #352]	@ (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e8a:	4a57      	ldr	r2, [pc, #348]	@ (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003e8c:	f023 0304 	bic.w	r3, r3, #4
 8003e90:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d015      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e9a:	f7fd ff51 	bl	8001d40 <HAL_GetTick>
 8003e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ea0:	e00a      	b.n	8003eb8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ea2:	f7fd ff4d 	bl	8001d40 <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d901      	bls.n	8003eb8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e0ce      	b.n	8004056 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eb8:	4b4b      	ldr	r3, [pc, #300]	@ (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003eba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d0ee      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x386>
 8003ec4:	e014      	b.n	8003ef0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec6:	f7fd ff3b 	bl	8001d40 <HAL_GetTick>
 8003eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ecc:	e00a      	b.n	8003ee4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ece:	f7fd ff37 	bl	8001d40 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e0b8      	b.n	8004056 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ee4:	4b40      	ldr	r3, [pc, #256]	@ (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003ee6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1ee      	bne.n	8003ece <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ef0:	7dfb      	ldrb	r3, [r7, #23]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d105      	bne.n	8003f02 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ef6:	4b3c      	ldr	r3, [pc, #240]	@ (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003efa:	4a3b      	ldr	r2, [pc, #236]	@ (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003efc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f00:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f000 80a4 	beq.w	8004054 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f0c:	4b36      	ldr	r3, [pc, #216]	@ (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f003 030c 	and.w	r3, r3, #12
 8003f14:	2b08      	cmp	r3, #8
 8003f16:	d06b      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d149      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f20:	4b31      	ldr	r3, [pc, #196]	@ (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a30      	ldr	r2, [pc, #192]	@ (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003f26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f2c:	f7fd ff08 	bl	8001d40 <HAL_GetTick>
 8003f30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f32:	e008      	b.n	8003f46 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f34:	f7fd ff04 	bl	8001d40 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e087      	b.n	8004056 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f46:	4b28      	ldr	r3, [pc, #160]	@ (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1f0      	bne.n	8003f34 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	69da      	ldr	r2, [r3, #28]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f60:	019b      	lsls	r3, r3, #6
 8003f62:	431a      	orrs	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f68:	085b      	lsrs	r3, r3, #1
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	041b      	lsls	r3, r3, #16
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f74:	061b      	lsls	r3, r3, #24
 8003f76:	4313      	orrs	r3, r2
 8003f78:	4a1b      	ldr	r2, [pc, #108]	@ (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003f7a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003f7e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f80:	4b19      	ldr	r3, [pc, #100]	@ (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a18      	ldr	r2, [pc, #96]	@ (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003f86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003f8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f8c:	f7fd fed8 	bl	8001d40 <HAL_GetTick>
 8003f90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f92:	e008      	b.n	8003fa6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f94:	f7fd fed4 	bl	8001d40 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e057      	b.n	8004056 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fa6:	4b10      	ldr	r3, [pc, #64]	@ (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d0f0      	beq.n	8003f94 <HAL_RCC_OscConfig+0x478>
 8003fb2:	e04f      	b.n	8004054 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a0b      	ldr	r2, [pc, #44]	@ (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003fba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc0:	f7fd febe 	bl	8001d40 <HAL_GetTick>
 8003fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fc6:	e008      	b.n	8003fda <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fc8:	f7fd feba 	bl	8001d40 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e03d      	b.n	8004056 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fda:	4b03      	ldr	r3, [pc, #12]	@ (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1f0      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x4ac>
 8003fe6:	e035      	b.n	8004054 <HAL_RCC_OscConfig+0x538>
 8003fe8:	40023800 	.word	0x40023800
 8003fec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003ff0:	4b1b      	ldr	r3, [pc, #108]	@ (8004060 <HAL_RCC_OscConfig+0x544>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d028      	beq.n	8004050 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004008:	429a      	cmp	r2, r3
 800400a:	d121      	bne.n	8004050 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004016:	429a      	cmp	r2, r3
 8004018:	d11a      	bne.n	8004050 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004020:	4013      	ands	r3, r2
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004026:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004028:	4293      	cmp	r3, r2
 800402a:	d111      	bne.n	8004050 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004036:	085b      	lsrs	r3, r3, #1
 8004038:	3b01      	subs	r3, #1
 800403a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800403c:	429a      	cmp	r2, r3
 800403e:	d107      	bne.n	8004050 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800404a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800404c:	429a      	cmp	r2, r3
 800404e:	d001      	beq.n	8004054 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e000      	b.n	8004056 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3718      	adds	r7, #24
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	40023800 	.word	0x40023800

08004064 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800406e:	2300      	movs	r3, #0
 8004070:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d101      	bne.n	800407c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e0d0      	b.n	800421e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800407c:	4b6a      	ldr	r3, [pc, #424]	@ (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 030f 	and.w	r3, r3, #15
 8004084:	683a      	ldr	r2, [r7, #0]
 8004086:	429a      	cmp	r2, r3
 8004088:	d910      	bls.n	80040ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800408a:	4b67      	ldr	r3, [pc, #412]	@ (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f023 020f 	bic.w	r2, r3, #15
 8004092:	4965      	ldr	r1, [pc, #404]	@ (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	4313      	orrs	r3, r2
 8004098:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800409a:	4b63      	ldr	r3, [pc, #396]	@ (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 030f 	and.w	r3, r3, #15
 80040a2:	683a      	ldr	r2, [r7, #0]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d001      	beq.n	80040ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e0b8      	b.n	800421e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0302 	and.w	r3, r3, #2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d020      	beq.n	80040fa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0304 	and.w	r3, r3, #4
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d005      	beq.n	80040d0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040c4:	4b59      	ldr	r3, [pc, #356]	@ (800422c <HAL_RCC_ClockConfig+0x1c8>)
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	4a58      	ldr	r2, [pc, #352]	@ (800422c <HAL_RCC_ClockConfig+0x1c8>)
 80040ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80040ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0308 	and.w	r3, r3, #8
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d005      	beq.n	80040e8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040dc:	4b53      	ldr	r3, [pc, #332]	@ (800422c <HAL_RCC_ClockConfig+0x1c8>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	4a52      	ldr	r2, [pc, #328]	@ (800422c <HAL_RCC_ClockConfig+0x1c8>)
 80040e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80040e6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040e8:	4b50      	ldr	r3, [pc, #320]	@ (800422c <HAL_RCC_ClockConfig+0x1c8>)
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	494d      	ldr	r1, [pc, #308]	@ (800422c <HAL_RCC_ClockConfig+0x1c8>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0301 	and.w	r3, r3, #1
 8004102:	2b00      	cmp	r3, #0
 8004104:	d040      	beq.n	8004188 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d107      	bne.n	800411e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800410e:	4b47      	ldr	r3, [pc, #284]	@ (800422c <HAL_RCC_ClockConfig+0x1c8>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d115      	bne.n	8004146 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e07f      	b.n	800421e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	2b02      	cmp	r3, #2
 8004124:	d107      	bne.n	8004136 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004126:	4b41      	ldr	r3, [pc, #260]	@ (800422c <HAL_RCC_ClockConfig+0x1c8>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d109      	bne.n	8004146 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e073      	b.n	800421e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004136:	4b3d      	ldr	r3, [pc, #244]	@ (800422c <HAL_RCC_ClockConfig+0x1c8>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d101      	bne.n	8004146 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e06b      	b.n	800421e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004146:	4b39      	ldr	r3, [pc, #228]	@ (800422c <HAL_RCC_ClockConfig+0x1c8>)
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f023 0203 	bic.w	r2, r3, #3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	4936      	ldr	r1, [pc, #216]	@ (800422c <HAL_RCC_ClockConfig+0x1c8>)
 8004154:	4313      	orrs	r3, r2
 8004156:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004158:	f7fd fdf2 	bl	8001d40 <HAL_GetTick>
 800415c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800415e:	e00a      	b.n	8004176 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004160:	f7fd fdee 	bl	8001d40 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800416e:	4293      	cmp	r3, r2
 8004170:	d901      	bls.n	8004176 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e053      	b.n	800421e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004176:	4b2d      	ldr	r3, [pc, #180]	@ (800422c <HAL_RCC_ClockConfig+0x1c8>)
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f003 020c 	and.w	r2, r3, #12
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	429a      	cmp	r2, r3
 8004186:	d1eb      	bne.n	8004160 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004188:	4b27      	ldr	r3, [pc, #156]	@ (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 030f 	and.w	r3, r3, #15
 8004190:	683a      	ldr	r2, [r7, #0]
 8004192:	429a      	cmp	r2, r3
 8004194:	d210      	bcs.n	80041b8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004196:	4b24      	ldr	r3, [pc, #144]	@ (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f023 020f 	bic.w	r2, r3, #15
 800419e:	4922      	ldr	r1, [pc, #136]	@ (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041a6:	4b20      	ldr	r3, [pc, #128]	@ (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 030f 	and.w	r3, r3, #15
 80041ae:	683a      	ldr	r2, [r7, #0]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d001      	beq.n	80041b8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e032      	b.n	800421e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0304 	and.w	r3, r3, #4
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d008      	beq.n	80041d6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041c4:	4b19      	ldr	r3, [pc, #100]	@ (800422c <HAL_RCC_ClockConfig+0x1c8>)
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	4916      	ldr	r1, [pc, #88]	@ (800422c <HAL_RCC_ClockConfig+0x1c8>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0308 	and.w	r3, r3, #8
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d009      	beq.n	80041f6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80041e2:	4b12      	ldr	r3, [pc, #72]	@ (800422c <HAL_RCC_ClockConfig+0x1c8>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	490e      	ldr	r1, [pc, #56]	@ (800422c <HAL_RCC_ClockConfig+0x1c8>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80041f6:	f000 f821 	bl	800423c <HAL_RCC_GetSysClockFreq>
 80041fa:	4602      	mov	r2, r0
 80041fc:	4b0b      	ldr	r3, [pc, #44]	@ (800422c <HAL_RCC_ClockConfig+0x1c8>)
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	091b      	lsrs	r3, r3, #4
 8004202:	f003 030f 	and.w	r3, r3, #15
 8004206:	490a      	ldr	r1, [pc, #40]	@ (8004230 <HAL_RCC_ClockConfig+0x1cc>)
 8004208:	5ccb      	ldrb	r3, [r1, r3]
 800420a:	fa22 f303 	lsr.w	r3, r2, r3
 800420e:	4a09      	ldr	r2, [pc, #36]	@ (8004234 <HAL_RCC_ClockConfig+0x1d0>)
 8004210:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004212:	4b09      	ldr	r3, [pc, #36]	@ (8004238 <HAL_RCC_ClockConfig+0x1d4>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4618      	mov	r0, r3
 8004218:	f7fd fd4e 	bl	8001cb8 <HAL_InitTick>

  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	40023c00 	.word	0x40023c00
 800422c:	40023800 	.word	0x40023800
 8004230:	080106a0 	.word	0x080106a0
 8004234:	20000000 	.word	0x20000000
 8004238:	20000004 	.word	0x20000004

0800423c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800423c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004240:	b090      	sub	sp, #64	@ 0x40
 8004242:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004244:	2300      	movs	r3, #0
 8004246:	637b      	str	r3, [r7, #52]	@ 0x34
 8004248:	2300      	movs	r3, #0
 800424a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800424c:	2300      	movs	r3, #0
 800424e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8004250:	2300      	movs	r3, #0
 8004252:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004254:	4b59      	ldr	r3, [pc, #356]	@ (80043bc <HAL_RCC_GetSysClockFreq+0x180>)
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f003 030c 	and.w	r3, r3, #12
 800425c:	2b08      	cmp	r3, #8
 800425e:	d00d      	beq.n	800427c <HAL_RCC_GetSysClockFreq+0x40>
 8004260:	2b08      	cmp	r3, #8
 8004262:	f200 80a1 	bhi.w	80043a8 <HAL_RCC_GetSysClockFreq+0x16c>
 8004266:	2b00      	cmp	r3, #0
 8004268:	d002      	beq.n	8004270 <HAL_RCC_GetSysClockFreq+0x34>
 800426a:	2b04      	cmp	r3, #4
 800426c:	d003      	beq.n	8004276 <HAL_RCC_GetSysClockFreq+0x3a>
 800426e:	e09b      	b.n	80043a8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004270:	4b53      	ldr	r3, [pc, #332]	@ (80043c0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004272:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004274:	e09b      	b.n	80043ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004276:	4b53      	ldr	r3, [pc, #332]	@ (80043c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004278:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800427a:	e098      	b.n	80043ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800427c:	4b4f      	ldr	r3, [pc, #316]	@ (80043bc <HAL_RCC_GetSysClockFreq+0x180>)
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004284:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004286:	4b4d      	ldr	r3, [pc, #308]	@ (80043bc <HAL_RCC_GetSysClockFreq+0x180>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d028      	beq.n	80042e4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004292:	4b4a      	ldr	r3, [pc, #296]	@ (80043bc <HAL_RCC_GetSysClockFreq+0x180>)
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	099b      	lsrs	r3, r3, #6
 8004298:	2200      	movs	r2, #0
 800429a:	623b      	str	r3, [r7, #32]
 800429c:	627a      	str	r2, [r7, #36]	@ 0x24
 800429e:	6a3b      	ldr	r3, [r7, #32]
 80042a0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80042a4:	2100      	movs	r1, #0
 80042a6:	4b47      	ldr	r3, [pc, #284]	@ (80043c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80042a8:	fb03 f201 	mul.w	r2, r3, r1
 80042ac:	2300      	movs	r3, #0
 80042ae:	fb00 f303 	mul.w	r3, r0, r3
 80042b2:	4413      	add	r3, r2
 80042b4:	4a43      	ldr	r2, [pc, #268]	@ (80043c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80042b6:	fba0 1202 	umull	r1, r2, r0, r2
 80042ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042bc:	460a      	mov	r2, r1
 80042be:	62ba      	str	r2, [r7, #40]	@ 0x28
 80042c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042c2:	4413      	add	r3, r2
 80042c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042c8:	2200      	movs	r2, #0
 80042ca:	61bb      	str	r3, [r7, #24]
 80042cc:	61fa      	str	r2, [r7, #28]
 80042ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80042d6:	f7fc fc97 	bl	8000c08 <__aeabi_uldivmod>
 80042da:	4602      	mov	r2, r0
 80042dc:	460b      	mov	r3, r1
 80042de:	4613      	mov	r3, r2
 80042e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042e2:	e053      	b.n	800438c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042e4:	4b35      	ldr	r3, [pc, #212]	@ (80043bc <HAL_RCC_GetSysClockFreq+0x180>)
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	099b      	lsrs	r3, r3, #6
 80042ea:	2200      	movs	r2, #0
 80042ec:	613b      	str	r3, [r7, #16]
 80042ee:	617a      	str	r2, [r7, #20]
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80042f6:	f04f 0b00 	mov.w	fp, #0
 80042fa:	4652      	mov	r2, sl
 80042fc:	465b      	mov	r3, fp
 80042fe:	f04f 0000 	mov.w	r0, #0
 8004302:	f04f 0100 	mov.w	r1, #0
 8004306:	0159      	lsls	r1, r3, #5
 8004308:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800430c:	0150      	lsls	r0, r2, #5
 800430e:	4602      	mov	r2, r0
 8004310:	460b      	mov	r3, r1
 8004312:	ebb2 080a 	subs.w	r8, r2, sl
 8004316:	eb63 090b 	sbc.w	r9, r3, fp
 800431a:	f04f 0200 	mov.w	r2, #0
 800431e:	f04f 0300 	mov.w	r3, #0
 8004322:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004326:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800432a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800432e:	ebb2 0408 	subs.w	r4, r2, r8
 8004332:	eb63 0509 	sbc.w	r5, r3, r9
 8004336:	f04f 0200 	mov.w	r2, #0
 800433a:	f04f 0300 	mov.w	r3, #0
 800433e:	00eb      	lsls	r3, r5, #3
 8004340:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004344:	00e2      	lsls	r2, r4, #3
 8004346:	4614      	mov	r4, r2
 8004348:	461d      	mov	r5, r3
 800434a:	eb14 030a 	adds.w	r3, r4, sl
 800434e:	603b      	str	r3, [r7, #0]
 8004350:	eb45 030b 	adc.w	r3, r5, fp
 8004354:	607b      	str	r3, [r7, #4]
 8004356:	f04f 0200 	mov.w	r2, #0
 800435a:	f04f 0300 	mov.w	r3, #0
 800435e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004362:	4629      	mov	r1, r5
 8004364:	028b      	lsls	r3, r1, #10
 8004366:	4621      	mov	r1, r4
 8004368:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800436c:	4621      	mov	r1, r4
 800436e:	028a      	lsls	r2, r1, #10
 8004370:	4610      	mov	r0, r2
 8004372:	4619      	mov	r1, r3
 8004374:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004376:	2200      	movs	r2, #0
 8004378:	60bb      	str	r3, [r7, #8]
 800437a:	60fa      	str	r2, [r7, #12]
 800437c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004380:	f7fc fc42 	bl	8000c08 <__aeabi_uldivmod>
 8004384:	4602      	mov	r2, r0
 8004386:	460b      	mov	r3, r1
 8004388:	4613      	mov	r3, r2
 800438a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800438c:	4b0b      	ldr	r3, [pc, #44]	@ (80043bc <HAL_RCC_GetSysClockFreq+0x180>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	0c1b      	lsrs	r3, r3, #16
 8004392:	f003 0303 	and.w	r3, r3, #3
 8004396:	3301      	adds	r3, #1
 8004398:	005b      	lsls	r3, r3, #1
 800439a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800439c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800439e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80043a6:	e002      	b.n	80043ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043a8:	4b05      	ldr	r3, [pc, #20]	@ (80043c0 <HAL_RCC_GetSysClockFreq+0x184>)
 80043aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80043ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3740      	adds	r7, #64	@ 0x40
 80043b4:	46bd      	mov	sp, r7
 80043b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043ba:	bf00      	nop
 80043bc:	40023800 	.word	0x40023800
 80043c0:	00f42400 	.word	0x00f42400
 80043c4:	017d7840 	.word	0x017d7840

080043c8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043c8:	b480      	push	{r7}
 80043ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043cc:	4b03      	ldr	r3, [pc, #12]	@ (80043dc <HAL_RCC_GetHCLKFreq+0x14>)
 80043ce:	681b      	ldr	r3, [r3, #0]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	20000000 	.word	0x20000000

080043e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b088      	sub	sp, #32
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80043e8:	2300      	movs	r3, #0
 80043ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80043ec:	2300      	movs	r3, #0
 80043ee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80043f0:	2300      	movs	r3, #0
 80043f2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80043f4:	2300      	movs	r3, #0
 80043f6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80043f8:	2300      	movs	r3, #0
 80043fa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0301 	and.w	r3, r3, #1
 8004404:	2b00      	cmp	r3, #0
 8004406:	d012      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004408:	4b69      	ldr	r3, [pc, #420]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	4a68      	ldr	r2, [pc, #416]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800440e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004412:	6093      	str	r3, [r2, #8]
 8004414:	4b66      	ldr	r3, [pc, #408]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004416:	689a      	ldr	r2, [r3, #8]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800441c:	4964      	ldr	r1, [pc, #400]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800441e:	4313      	orrs	r3, r2
 8004420:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800442a:	2301      	movs	r3, #1
 800442c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d017      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800443a:	4b5d      	ldr	r3, [pc, #372]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800443c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004440:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004448:	4959      	ldr	r1, [pc, #356]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800444a:	4313      	orrs	r3, r2
 800444c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004454:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004458:	d101      	bne.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800445a:	2301      	movs	r3, #1
 800445c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004466:	2301      	movs	r3, #1
 8004468:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d017      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004476:	4b4e      	ldr	r3, [pc, #312]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004478:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800447c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004484:	494a      	ldr	r1, [pc, #296]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004486:	4313      	orrs	r3, r2
 8004488:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004490:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004494:	d101      	bne.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004496:	2301      	movs	r3, #1
 8004498:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80044a2:	2301      	movs	r3, #1
 80044a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d001      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80044b2:	2301      	movs	r3, #1
 80044b4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0320 	and.w	r3, r3, #32
 80044be:	2b00      	cmp	r3, #0
 80044c0:	f000 808b 	beq.w	80045da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80044c4:	4b3a      	ldr	r3, [pc, #232]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c8:	4a39      	ldr	r2, [pc, #228]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80044d0:	4b37      	ldr	r3, [pc, #220]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044d8:	60bb      	str	r3, [r7, #8]
 80044da:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80044dc:	4b35      	ldr	r3, [pc, #212]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a34      	ldr	r2, [pc, #208]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044e8:	f7fd fc2a 	bl	8001d40 <HAL_GetTick>
 80044ec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80044ee:	e008      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044f0:	f7fd fc26 	bl	8001d40 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b64      	cmp	r3, #100	@ 0x64
 80044fc:	d901      	bls.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e357      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004502:	4b2c      	ldr	r3, [pc, #176]	@ (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800450a:	2b00      	cmp	r3, #0
 800450c:	d0f0      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800450e:	4b28      	ldr	r3, [pc, #160]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004510:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004512:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004516:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d035      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004522:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	429a      	cmp	r2, r3
 800452a:	d02e      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800452c:	4b20      	ldr	r3, [pc, #128]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800452e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004530:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004534:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004536:	4b1e      	ldr	r3, [pc, #120]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800453a:	4a1d      	ldr	r2, [pc, #116]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800453c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004540:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004542:	4b1b      	ldr	r3, [pc, #108]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004546:	4a1a      	ldr	r2, [pc, #104]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004548:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800454c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800454e:	4a18      	ldr	r2, [pc, #96]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004554:	4b16      	ldr	r3, [pc, #88]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004556:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	2b01      	cmp	r3, #1
 800455e:	d114      	bne.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004560:	f7fd fbee 	bl	8001d40 <HAL_GetTick>
 8004564:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004566:	e00a      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004568:	f7fd fbea 	bl	8001d40 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004576:	4293      	cmp	r3, r2
 8004578:	d901      	bls.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e319      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800457e:	4b0c      	ldr	r3, [pc, #48]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004582:	f003 0302 	and.w	r3, r3, #2
 8004586:	2b00      	cmp	r3, #0
 8004588:	d0ee      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800458e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004592:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004596:	d111      	bne.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004598:	4b05      	ldr	r3, [pc, #20]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80045a4:	4b04      	ldr	r3, [pc, #16]	@ (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80045a6:	400b      	ands	r3, r1
 80045a8:	4901      	ldr	r1, [pc, #4]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	608b      	str	r3, [r1, #8]
 80045ae:	e00b      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80045b0:	40023800 	.word	0x40023800
 80045b4:	40007000 	.word	0x40007000
 80045b8:	0ffffcff 	.word	0x0ffffcff
 80045bc:	4baa      	ldr	r3, [pc, #680]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	4aa9      	ldr	r2, [pc, #676]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045c2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80045c6:	6093      	str	r3, [r2, #8]
 80045c8:	4ba7      	ldr	r3, [pc, #668]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045ca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045d4:	49a4      	ldr	r1, [pc, #656]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0310 	and.w	r3, r3, #16
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d010      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80045e6:	4ba0      	ldr	r3, [pc, #640]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80045ec:	4a9e      	ldr	r2, [pc, #632]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045f2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80045f6:	4b9c      	ldr	r3, [pc, #624]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045f8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004600:	4999      	ldr	r1, [pc, #612]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004602:	4313      	orrs	r3, r2
 8004604:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00a      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004614:	4b94      	ldr	r3, [pc, #592]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004616:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800461a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004622:	4991      	ldr	r1, [pc, #580]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004624:	4313      	orrs	r3, r2
 8004626:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d00a      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004636:	4b8c      	ldr	r3, [pc, #560]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004638:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800463c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004644:	4988      	ldr	r1, [pc, #544]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004646:	4313      	orrs	r3, r2
 8004648:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00a      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004658:	4b83      	ldr	r3, [pc, #524]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800465a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800465e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004666:	4980      	ldr	r1, [pc, #512]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004668:	4313      	orrs	r3, r2
 800466a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00a      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800467a:	4b7b      	ldr	r3, [pc, #492]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800467c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004680:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004688:	4977      	ldr	r1, [pc, #476]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800468a:	4313      	orrs	r3, r2
 800468c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00a      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800469c:	4b72      	ldr	r3, [pc, #456]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800469e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046a2:	f023 0203 	bic.w	r2, r3, #3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046aa:	496f      	ldr	r1, [pc, #444]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00a      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046be:	4b6a      	ldr	r3, [pc, #424]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046c4:	f023 020c 	bic.w	r2, r3, #12
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046cc:	4966      	ldr	r1, [pc, #408]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046ce:	4313      	orrs	r3, r2
 80046d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00a      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80046e0:	4b61      	ldr	r3, [pc, #388]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046e6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046ee:	495e      	ldr	r1, [pc, #376]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00a      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004702:	4b59      	ldr	r3, [pc, #356]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004704:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004708:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004710:	4955      	ldr	r1, [pc, #340]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004712:	4313      	orrs	r3, r2
 8004714:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004720:	2b00      	cmp	r3, #0
 8004722:	d00a      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004724:	4b50      	ldr	r3, [pc, #320]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004726:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800472a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004732:	494d      	ldr	r1, [pc, #308]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004734:	4313      	orrs	r3, r2
 8004736:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00a      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004746:	4b48      	ldr	r3, [pc, #288]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004748:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800474c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004754:	4944      	ldr	r1, [pc, #272]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004756:	4313      	orrs	r3, r2
 8004758:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00a      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004768:	4b3f      	ldr	r3, [pc, #252]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800476a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800476e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004776:	493c      	ldr	r1, [pc, #240]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004778:	4313      	orrs	r3, r2
 800477a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00a      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800478a:	4b37      	ldr	r3, [pc, #220]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800478c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004790:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004798:	4933      	ldr	r1, [pc, #204]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800479a:	4313      	orrs	r3, r2
 800479c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00a      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80047ac:	4b2e      	ldr	r3, [pc, #184]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047b2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047ba:	492b      	ldr	r1, [pc, #172]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d011      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80047ce:	4b26      	ldr	r3, [pc, #152]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047d4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047dc:	4922      	ldr	r1, [pc, #136]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80047ec:	d101      	bne.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80047ee:	2301      	movs	r3, #1
 80047f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0308 	and.w	r3, r3, #8
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d001      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80047fe:	2301      	movs	r3, #1
 8004800:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00a      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800480e:	4b16      	ldr	r3, [pc, #88]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004810:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004814:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800481c:	4912      	ldr	r1, [pc, #72]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800481e:	4313      	orrs	r3, r2
 8004820:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00b      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004830:	4b0d      	ldr	r3, [pc, #52]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004832:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004836:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004840:	4909      	ldr	r1, [pc, #36]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004842:	4313      	orrs	r3, r2
 8004844:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d006      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004856:	2b00      	cmp	r3, #0
 8004858:	f000 80d9 	beq.w	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800485c:	4b02      	ldr	r3, [pc, #8]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a01      	ldr	r2, [pc, #4]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004862:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004866:	e001      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004868:	40023800 	.word	0x40023800
 800486c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800486e:	f7fd fa67 	bl	8001d40 <HAL_GetTick>
 8004872:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004874:	e008      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004876:	f7fd fa63 	bl	8001d40 <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	2b64      	cmp	r3, #100	@ 0x64
 8004882:	d901      	bls.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e194      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004888:	4b6c      	ldr	r3, [pc, #432]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1f0      	bne.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0301 	and.w	r3, r3, #1
 800489c:	2b00      	cmp	r3, #0
 800489e:	d021      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d11d      	bne.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80048a8:	4b64      	ldr	r3, [pc, #400]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048ae:	0c1b      	lsrs	r3, r3, #16
 80048b0:	f003 0303 	and.w	r3, r3, #3
 80048b4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80048b6:	4b61      	ldr	r3, [pc, #388]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048bc:	0e1b      	lsrs	r3, r3, #24
 80048be:	f003 030f 	and.w	r3, r3, #15
 80048c2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	019a      	lsls	r2, r3, #6
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	041b      	lsls	r3, r3, #16
 80048ce:	431a      	orrs	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	061b      	lsls	r3, r3, #24
 80048d4:	431a      	orrs	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	071b      	lsls	r3, r3, #28
 80048dc:	4957      	ldr	r1, [pc, #348]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d004      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048f8:	d00a      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004902:	2b00      	cmp	r3, #0
 8004904:	d02e      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800490a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800490e:	d129      	bne.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004910:	4b4a      	ldr	r3, [pc, #296]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004912:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004916:	0c1b      	lsrs	r3, r3, #16
 8004918:	f003 0303 	and.w	r3, r3, #3
 800491c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800491e:	4b47      	ldr	r3, [pc, #284]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004920:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004924:	0f1b      	lsrs	r3, r3, #28
 8004926:	f003 0307 	and.w	r3, r3, #7
 800492a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	019a      	lsls	r2, r3, #6
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	041b      	lsls	r3, r3, #16
 8004936:	431a      	orrs	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	061b      	lsls	r3, r3, #24
 800493e:	431a      	orrs	r2, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	071b      	lsls	r3, r3, #28
 8004944:	493d      	ldr	r1, [pc, #244]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004946:	4313      	orrs	r3, r2
 8004948:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800494c:	4b3b      	ldr	r3, [pc, #236]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800494e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004952:	f023 021f 	bic.w	r2, r3, #31
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800495a:	3b01      	subs	r3, #1
 800495c:	4937      	ldr	r1, [pc, #220]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800495e:	4313      	orrs	r3, r2
 8004960:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d01d      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004970:	4b32      	ldr	r3, [pc, #200]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004972:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004976:	0e1b      	lsrs	r3, r3, #24
 8004978:	f003 030f 	and.w	r3, r3, #15
 800497c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800497e:	4b2f      	ldr	r3, [pc, #188]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004980:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004984:	0f1b      	lsrs	r3, r3, #28
 8004986:	f003 0307 	and.w	r3, r3, #7
 800498a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	019a      	lsls	r2, r3, #6
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	041b      	lsls	r3, r3, #16
 8004998:	431a      	orrs	r2, r3
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	061b      	lsls	r3, r3, #24
 800499e:	431a      	orrs	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	071b      	lsls	r3, r3, #28
 80049a4:	4925      	ldr	r1, [pc, #148]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d011      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	019a      	lsls	r2, r3, #6
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	041b      	lsls	r3, r3, #16
 80049c4:	431a      	orrs	r2, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	061b      	lsls	r3, r3, #24
 80049cc:	431a      	orrs	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	071b      	lsls	r3, r3, #28
 80049d4:	4919      	ldr	r1, [pc, #100]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80049dc:	4b17      	ldr	r3, [pc, #92]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a16      	ldr	r2, [pc, #88]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049e2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80049e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049e8:	f7fd f9aa 	bl	8001d40 <HAL_GetTick>
 80049ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049ee:	e008      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80049f0:	f7fd f9a6 	bl	8001d40 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b64      	cmp	r3, #100	@ 0x64
 80049fc:	d901      	bls.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e0d7      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a02:	4b0e      	ldr	r3, [pc, #56]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d0f0      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	f040 80cd 	bne.w	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004a16:	4b09      	ldr	r3, [pc, #36]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a08      	ldr	r2, [pc, #32]	@ (8004a3c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a22:	f7fd f98d 	bl	8001d40 <HAL_GetTick>
 8004a26:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a28:	e00a      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a2a:	f7fd f989 	bl	8001d40 <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	2b64      	cmp	r3, #100	@ 0x64
 8004a36:	d903      	bls.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e0ba      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004a3c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a40:	4b5e      	ldr	r3, [pc, #376]	@ (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a4c:	d0ed      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d003      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d009      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d02e      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d12a      	bne.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004a76:	4b51      	ldr	r3, [pc, #324]	@ (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a7c:	0c1b      	lsrs	r3, r3, #16
 8004a7e:	f003 0303 	and.w	r3, r3, #3
 8004a82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a84:	4b4d      	ldr	r3, [pc, #308]	@ (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a8a:	0f1b      	lsrs	r3, r3, #28
 8004a8c:	f003 0307 	and.w	r3, r3, #7
 8004a90:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	019a      	lsls	r2, r3, #6
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	041b      	lsls	r3, r3, #16
 8004a9c:	431a      	orrs	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	061b      	lsls	r3, r3, #24
 8004aa4:	431a      	orrs	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	071b      	lsls	r3, r3, #28
 8004aaa:	4944      	ldr	r1, [pc, #272]	@ (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004aac:	4313      	orrs	r3, r2
 8004aae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004ab2:	4b42      	ldr	r3, [pc, #264]	@ (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ab8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	021b      	lsls	r3, r3, #8
 8004ac4:	493d      	ldr	r1, [pc, #244]	@ (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d022      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004adc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ae0:	d11d      	bne.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004ae2:	4b36      	ldr	r3, [pc, #216]	@ (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ae8:	0e1b      	lsrs	r3, r3, #24
 8004aea:	f003 030f 	and.w	r3, r3, #15
 8004aee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004af0:	4b32      	ldr	r3, [pc, #200]	@ (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004af6:	0f1b      	lsrs	r3, r3, #28
 8004af8:	f003 0307 	and.w	r3, r3, #7
 8004afc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	695b      	ldr	r3, [r3, #20]
 8004b02:	019a      	lsls	r2, r3, #6
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a1b      	ldr	r3, [r3, #32]
 8004b08:	041b      	lsls	r3, r3, #16
 8004b0a:	431a      	orrs	r2, r3
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	061b      	lsls	r3, r3, #24
 8004b10:	431a      	orrs	r2, r3
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	071b      	lsls	r3, r3, #28
 8004b16:	4929      	ldr	r1, [pc, #164]	@ (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0308 	and.w	r3, r3, #8
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d028      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b2a:	4b24      	ldr	r3, [pc, #144]	@ (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b30:	0e1b      	lsrs	r3, r3, #24
 8004b32:	f003 030f 	and.w	r3, r3, #15
 8004b36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b38:	4b20      	ldr	r3, [pc, #128]	@ (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b3e:	0c1b      	lsrs	r3, r3, #16
 8004b40:	f003 0303 	and.w	r3, r3, #3
 8004b44:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	019a      	lsls	r2, r3, #6
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	041b      	lsls	r3, r3, #16
 8004b50:	431a      	orrs	r2, r3
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	061b      	lsls	r3, r3, #24
 8004b56:	431a      	orrs	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	69db      	ldr	r3, [r3, #28]
 8004b5c:	071b      	lsls	r3, r3, #28
 8004b5e:	4917      	ldr	r1, [pc, #92]	@ (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004b66:	4b15      	ldr	r3, [pc, #84]	@ (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b6c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b74:	4911      	ldr	r1, [pc, #68]	@ (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004b7c:	4b0f      	ldr	r3, [pc, #60]	@ (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a0e      	ldr	r2, [pc, #56]	@ (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b88:	f7fd f8da 	bl	8001d40 <HAL_GetTick>
 8004b8c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b8e:	e008      	b.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b90:	f7fd f8d6 	bl	8001d40 <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	2b64      	cmp	r3, #100	@ 0x64
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e007      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004ba2:	4b06      	ldr	r3, [pc, #24]	@ (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004baa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004bae:	d1ef      	bne.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3720      	adds	r7, #32
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	40023800 	.word	0x40023800

08004bc0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d101      	bne.n	8004bd4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e025      	b.n	8004c20 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d106      	bne.n	8004bee <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f7fc ff15 	bl	8001a18 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2202      	movs	r2, #2
 8004bf2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	3304      	adds	r3, #4
 8004bfe:	4619      	mov	r1, r3
 8004c00:	4610      	mov	r0, r2
 8004c02:	f000 fbcd 	bl	80053a0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6818      	ldr	r0, [r3, #0]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	461a      	mov	r2, r3
 8004c10:	6839      	ldr	r1, [r7, #0]
 8004c12:	f000 fc21 	bl	8005458 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3708      	adds	r7, #8
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004c3a:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8004c3c:	7dfb      	ldrb	r3, [r7, #23]
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d101      	bne.n	8004c46 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8004c42:	2302      	movs	r3, #2
 8004c44:	e021      	b.n	8004c8a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8004c46:	7dfb      	ldrb	r3, [r7, #23]
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d002      	beq.n	8004c52 <HAL_SDRAM_SendCommand+0x2a>
 8004c4c:	7dfb      	ldrb	r3, [r7, #23]
 8004c4e:	2b05      	cmp	r3, #5
 8004c50:	d118      	bne.n	8004c84 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2202      	movs	r2, #2
 8004c56:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	68b9      	ldr	r1, [r7, #8]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 fc62 	bl	800552c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d104      	bne.n	8004c7a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2205      	movs	r2, #5
 8004c74:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004c78:	e006      	b.n	8004c88 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004c82:	e001      	b.n	8004c88 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e000      	b.n	8004c8a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3718      	adds	r7, #24
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8004c92:	b580      	push	{r7, lr}
 8004c94:	b082      	sub	sp, #8
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
 8004c9a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d101      	bne.n	8004cac <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8004ca8:	2302      	movs	r3, #2
 8004caa:	e016      	b.n	8004cda <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d10f      	bne.n	8004cd8 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2202      	movs	r2, #2
 8004cbc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	6839      	ldr	r1, [r7, #0]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f000 fc54 	bl	8005574 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	e000      	b.n	8004cda <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3708      	adds	r7, #8
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ce2:	b580      	push	{r7, lr}
 8004ce4:	b082      	sub	sp, #8
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d101      	bne.n	8004cf4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e049      	b.n	8004d88 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d106      	bne.n	8004d0e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f7fc fdd5 	bl	80018b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2202      	movs	r2, #2
 8004d12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	3304      	adds	r3, #4
 8004d1e:	4619      	mov	r1, r3
 8004d20:	4610      	mov	r0, r2
 8004d22:	f000 f96f 	bl	8005004 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2201      	movs	r2, #1
 8004d52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2201      	movs	r2, #1
 8004d62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d86:	2300      	movs	r3, #0
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3708      	adds	r7, #8
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b085      	sub	sp, #20
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d001      	beq.n	8004da8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e04c      	b.n	8004e42 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2202      	movs	r2, #2
 8004dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a26      	ldr	r2, [pc, #152]	@ (8004e50 <HAL_TIM_Base_Start+0xc0>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d022      	beq.n	8004e00 <HAL_TIM_Base_Start+0x70>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dc2:	d01d      	beq.n	8004e00 <HAL_TIM_Base_Start+0x70>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a22      	ldr	r2, [pc, #136]	@ (8004e54 <HAL_TIM_Base_Start+0xc4>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d018      	beq.n	8004e00 <HAL_TIM_Base_Start+0x70>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a21      	ldr	r2, [pc, #132]	@ (8004e58 <HAL_TIM_Base_Start+0xc8>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d013      	beq.n	8004e00 <HAL_TIM_Base_Start+0x70>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a1f      	ldr	r2, [pc, #124]	@ (8004e5c <HAL_TIM_Base_Start+0xcc>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d00e      	beq.n	8004e00 <HAL_TIM_Base_Start+0x70>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a1e      	ldr	r2, [pc, #120]	@ (8004e60 <HAL_TIM_Base_Start+0xd0>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d009      	beq.n	8004e00 <HAL_TIM_Base_Start+0x70>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a1c      	ldr	r2, [pc, #112]	@ (8004e64 <HAL_TIM_Base_Start+0xd4>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d004      	beq.n	8004e00 <HAL_TIM_Base_Start+0x70>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a1b      	ldr	r2, [pc, #108]	@ (8004e68 <HAL_TIM_Base_Start+0xd8>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d115      	bne.n	8004e2c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	689a      	ldr	r2, [r3, #8]
 8004e06:	4b19      	ldr	r3, [pc, #100]	@ (8004e6c <HAL_TIM_Base_Start+0xdc>)
 8004e08:	4013      	ands	r3, r2
 8004e0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2b06      	cmp	r3, #6
 8004e10:	d015      	beq.n	8004e3e <HAL_TIM_Base_Start+0xae>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e18:	d011      	beq.n	8004e3e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f042 0201 	orr.w	r2, r2, #1
 8004e28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e2a:	e008      	b.n	8004e3e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f042 0201 	orr.w	r2, r2, #1
 8004e3a:	601a      	str	r2, [r3, #0]
 8004e3c:	e000      	b.n	8004e40 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e3e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3714      	adds	r7, #20
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	40010000 	.word	0x40010000
 8004e54:	40000400 	.word	0x40000400
 8004e58:	40000800 	.word	0x40000800
 8004e5c:	40000c00 	.word	0x40000c00
 8004e60:	40010400 	.word	0x40010400
 8004e64:	40014000 	.word	0x40014000
 8004e68:	40001800 	.word	0x40001800
 8004e6c:	00010007 	.word	0x00010007

08004e70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d101      	bne.n	8004e8c <HAL_TIM_ConfigClockSource+0x1c>
 8004e88:	2302      	movs	r3, #2
 8004e8a:	e0b4      	b.n	8004ff6 <HAL_TIM_ConfigClockSource+0x186>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2202      	movs	r2, #2
 8004e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ea4:	68ba      	ldr	r2, [r7, #8]
 8004ea6:	4b56      	ldr	r3, [pc, #344]	@ (8005000 <HAL_TIM_ConfigClockSource+0x190>)
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004eb2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68ba      	ldr	r2, [r7, #8]
 8004eba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ec4:	d03e      	beq.n	8004f44 <HAL_TIM_ConfigClockSource+0xd4>
 8004ec6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004eca:	f200 8087 	bhi.w	8004fdc <HAL_TIM_ConfigClockSource+0x16c>
 8004ece:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ed2:	f000 8086 	beq.w	8004fe2 <HAL_TIM_ConfigClockSource+0x172>
 8004ed6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004eda:	d87f      	bhi.n	8004fdc <HAL_TIM_ConfigClockSource+0x16c>
 8004edc:	2b70      	cmp	r3, #112	@ 0x70
 8004ede:	d01a      	beq.n	8004f16 <HAL_TIM_ConfigClockSource+0xa6>
 8004ee0:	2b70      	cmp	r3, #112	@ 0x70
 8004ee2:	d87b      	bhi.n	8004fdc <HAL_TIM_ConfigClockSource+0x16c>
 8004ee4:	2b60      	cmp	r3, #96	@ 0x60
 8004ee6:	d050      	beq.n	8004f8a <HAL_TIM_ConfigClockSource+0x11a>
 8004ee8:	2b60      	cmp	r3, #96	@ 0x60
 8004eea:	d877      	bhi.n	8004fdc <HAL_TIM_ConfigClockSource+0x16c>
 8004eec:	2b50      	cmp	r3, #80	@ 0x50
 8004eee:	d03c      	beq.n	8004f6a <HAL_TIM_ConfigClockSource+0xfa>
 8004ef0:	2b50      	cmp	r3, #80	@ 0x50
 8004ef2:	d873      	bhi.n	8004fdc <HAL_TIM_ConfigClockSource+0x16c>
 8004ef4:	2b40      	cmp	r3, #64	@ 0x40
 8004ef6:	d058      	beq.n	8004faa <HAL_TIM_ConfigClockSource+0x13a>
 8004ef8:	2b40      	cmp	r3, #64	@ 0x40
 8004efa:	d86f      	bhi.n	8004fdc <HAL_TIM_ConfigClockSource+0x16c>
 8004efc:	2b30      	cmp	r3, #48	@ 0x30
 8004efe:	d064      	beq.n	8004fca <HAL_TIM_ConfigClockSource+0x15a>
 8004f00:	2b30      	cmp	r3, #48	@ 0x30
 8004f02:	d86b      	bhi.n	8004fdc <HAL_TIM_ConfigClockSource+0x16c>
 8004f04:	2b20      	cmp	r3, #32
 8004f06:	d060      	beq.n	8004fca <HAL_TIM_ConfigClockSource+0x15a>
 8004f08:	2b20      	cmp	r3, #32
 8004f0a:	d867      	bhi.n	8004fdc <HAL_TIM_ConfigClockSource+0x16c>
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d05c      	beq.n	8004fca <HAL_TIM_ConfigClockSource+0x15a>
 8004f10:	2b10      	cmp	r3, #16
 8004f12:	d05a      	beq.n	8004fca <HAL_TIM_ConfigClockSource+0x15a>
 8004f14:	e062      	b.n	8004fdc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f26:	f000 f98d 	bl	8005244 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004f38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68ba      	ldr	r2, [r7, #8]
 8004f40:	609a      	str	r2, [r3, #8]
      break;
 8004f42:	e04f      	b.n	8004fe4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f54:	f000 f976 	bl	8005244 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	689a      	ldr	r2, [r3, #8]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f66:	609a      	str	r2, [r3, #8]
      break;
 8004f68:	e03c      	b.n	8004fe4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f76:	461a      	mov	r2, r3
 8004f78:	f000 f8ea 	bl	8005150 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2150      	movs	r1, #80	@ 0x50
 8004f82:	4618      	mov	r0, r3
 8004f84:	f000 f943 	bl	800520e <TIM_ITRx_SetConfig>
      break;
 8004f88:	e02c      	b.n	8004fe4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f96:	461a      	mov	r2, r3
 8004f98:	f000 f909 	bl	80051ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2160      	movs	r1, #96	@ 0x60
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f000 f933 	bl	800520e <TIM_ITRx_SetConfig>
      break;
 8004fa8:	e01c      	b.n	8004fe4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	f000 f8ca 	bl	8005150 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2140      	movs	r1, #64	@ 0x40
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f000 f923 	bl	800520e <TIM_ITRx_SetConfig>
      break;
 8004fc8:	e00c      	b.n	8004fe4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	4610      	mov	r0, r2
 8004fd6:	f000 f91a 	bl	800520e <TIM_ITRx_SetConfig>
      break;
 8004fda:	e003      	b.n	8004fe4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	73fb      	strb	r3, [r7, #15]
      break;
 8004fe0:	e000      	b.n	8004fe4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004fe2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3710      	adds	r7, #16
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	fffeff88 	.word	0xfffeff88

08005004 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a43      	ldr	r2, [pc, #268]	@ (8005124 <TIM_Base_SetConfig+0x120>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d013      	beq.n	8005044 <TIM_Base_SetConfig+0x40>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005022:	d00f      	beq.n	8005044 <TIM_Base_SetConfig+0x40>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a40      	ldr	r2, [pc, #256]	@ (8005128 <TIM_Base_SetConfig+0x124>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d00b      	beq.n	8005044 <TIM_Base_SetConfig+0x40>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a3f      	ldr	r2, [pc, #252]	@ (800512c <TIM_Base_SetConfig+0x128>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d007      	beq.n	8005044 <TIM_Base_SetConfig+0x40>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a3e      	ldr	r2, [pc, #248]	@ (8005130 <TIM_Base_SetConfig+0x12c>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d003      	beq.n	8005044 <TIM_Base_SetConfig+0x40>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a3d      	ldr	r2, [pc, #244]	@ (8005134 <TIM_Base_SetConfig+0x130>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d108      	bne.n	8005056 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800504a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	4313      	orrs	r3, r2
 8005054:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a32      	ldr	r2, [pc, #200]	@ (8005124 <TIM_Base_SetConfig+0x120>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d02b      	beq.n	80050b6 <TIM_Base_SetConfig+0xb2>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005064:	d027      	beq.n	80050b6 <TIM_Base_SetConfig+0xb2>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a2f      	ldr	r2, [pc, #188]	@ (8005128 <TIM_Base_SetConfig+0x124>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d023      	beq.n	80050b6 <TIM_Base_SetConfig+0xb2>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a2e      	ldr	r2, [pc, #184]	@ (800512c <TIM_Base_SetConfig+0x128>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d01f      	beq.n	80050b6 <TIM_Base_SetConfig+0xb2>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a2d      	ldr	r2, [pc, #180]	@ (8005130 <TIM_Base_SetConfig+0x12c>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d01b      	beq.n	80050b6 <TIM_Base_SetConfig+0xb2>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a2c      	ldr	r2, [pc, #176]	@ (8005134 <TIM_Base_SetConfig+0x130>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d017      	beq.n	80050b6 <TIM_Base_SetConfig+0xb2>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a2b      	ldr	r2, [pc, #172]	@ (8005138 <TIM_Base_SetConfig+0x134>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d013      	beq.n	80050b6 <TIM_Base_SetConfig+0xb2>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a2a      	ldr	r2, [pc, #168]	@ (800513c <TIM_Base_SetConfig+0x138>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d00f      	beq.n	80050b6 <TIM_Base_SetConfig+0xb2>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a29      	ldr	r2, [pc, #164]	@ (8005140 <TIM_Base_SetConfig+0x13c>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d00b      	beq.n	80050b6 <TIM_Base_SetConfig+0xb2>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a28      	ldr	r2, [pc, #160]	@ (8005144 <TIM_Base_SetConfig+0x140>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d007      	beq.n	80050b6 <TIM_Base_SetConfig+0xb2>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a27      	ldr	r2, [pc, #156]	@ (8005148 <TIM_Base_SetConfig+0x144>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d003      	beq.n	80050b6 <TIM_Base_SetConfig+0xb2>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a26      	ldr	r2, [pc, #152]	@ (800514c <TIM_Base_SetConfig+0x148>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d108      	bne.n	80050c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	689a      	ldr	r2, [r3, #8]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a0e      	ldr	r2, [pc, #56]	@ (8005124 <TIM_Base_SetConfig+0x120>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d003      	beq.n	80050f6 <TIM_Base_SetConfig+0xf2>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a10      	ldr	r2, [pc, #64]	@ (8005134 <TIM_Base_SetConfig+0x130>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d103      	bne.n	80050fe <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	691a      	ldr	r2, [r3, #16]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f043 0204 	orr.w	r2, r3, #4
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2201      	movs	r2, #1
 800510e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	601a      	str	r2, [r3, #0]
}
 8005116:	bf00      	nop
 8005118:	3714      	adds	r7, #20
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	40010000 	.word	0x40010000
 8005128:	40000400 	.word	0x40000400
 800512c:	40000800 	.word	0x40000800
 8005130:	40000c00 	.word	0x40000c00
 8005134:	40010400 	.word	0x40010400
 8005138:	40014000 	.word	0x40014000
 800513c:	40014400 	.word	0x40014400
 8005140:	40014800 	.word	0x40014800
 8005144:	40001800 	.word	0x40001800
 8005148:	40001c00 	.word	0x40001c00
 800514c:	40002000 	.word	0x40002000

08005150 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005150:	b480      	push	{r7}
 8005152:	b087      	sub	sp, #28
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6a1b      	ldr	r3, [r3, #32]
 8005160:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6a1b      	ldr	r3, [r3, #32]
 8005166:	f023 0201 	bic.w	r2, r3, #1
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	699b      	ldr	r3, [r3, #24]
 8005172:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800517a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	011b      	lsls	r3, r3, #4
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	4313      	orrs	r3, r2
 8005184:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	f023 030a 	bic.w	r3, r3, #10
 800518c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	4313      	orrs	r3, r2
 8005194:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	693a      	ldr	r2, [r7, #16]
 800519a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	621a      	str	r2, [r3, #32]
}
 80051a2:	bf00      	nop
 80051a4:	371c      	adds	r7, #28
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr

080051ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051ae:	b480      	push	{r7}
 80051b0:	b087      	sub	sp, #28
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	60f8      	str	r0, [r7, #12]
 80051b6:	60b9      	str	r1, [r7, #8]
 80051b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6a1b      	ldr	r3, [r3, #32]
 80051c4:	f023 0210 	bic.w	r2, r3, #16
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80051d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	031b      	lsls	r3, r3, #12
 80051de:	693a      	ldr	r2, [r7, #16]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80051ea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	011b      	lsls	r3, r3, #4
 80051f0:	697a      	ldr	r2, [r7, #20]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	693a      	ldr	r2, [r7, #16]
 80051fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	621a      	str	r2, [r3, #32]
}
 8005202:	bf00      	nop
 8005204:	371c      	adds	r7, #28
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr

0800520e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800520e:	b480      	push	{r7}
 8005210:	b085      	sub	sp, #20
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
 8005216:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005224:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005226:	683a      	ldr	r2, [r7, #0]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	4313      	orrs	r3, r2
 800522c:	f043 0307 	orr.w	r3, r3, #7
 8005230:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	609a      	str	r2, [r3, #8]
}
 8005238:	bf00      	nop
 800523a:	3714      	adds	r7, #20
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005244:	b480      	push	{r7}
 8005246:	b087      	sub	sp, #28
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	607a      	str	r2, [r7, #4]
 8005250:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800525e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	021a      	lsls	r2, r3, #8
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	431a      	orrs	r2, r3
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	4313      	orrs	r3, r2
 800526c:	697a      	ldr	r2, [r7, #20]
 800526e:	4313      	orrs	r3, r2
 8005270:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	697a      	ldr	r2, [r7, #20]
 8005276:	609a      	str	r2, [r3, #8]
}
 8005278:	bf00      	nop
 800527a:	371c      	adds	r7, #28
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005294:	2b01      	cmp	r3, #1
 8005296:	d101      	bne.n	800529c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005298:	2302      	movs	r3, #2
 800529a:	e06d      	b.n	8005378 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2202      	movs	r2, #2
 80052a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a30      	ldr	r2, [pc, #192]	@ (8005384 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d004      	beq.n	80052d0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a2f      	ldr	r2, [pc, #188]	@ (8005388 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d108      	bne.n	80052e2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80052d6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	4313      	orrs	r3, r2
 80052e0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052e8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a20      	ldr	r2, [pc, #128]	@ (8005384 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d022      	beq.n	800534c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800530e:	d01d      	beq.n	800534c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a1d      	ldr	r2, [pc, #116]	@ (800538c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d018      	beq.n	800534c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a1c      	ldr	r2, [pc, #112]	@ (8005390 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d013      	beq.n	800534c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a1a      	ldr	r2, [pc, #104]	@ (8005394 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d00e      	beq.n	800534c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a15      	ldr	r2, [pc, #84]	@ (8005388 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d009      	beq.n	800534c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a16      	ldr	r2, [pc, #88]	@ (8005398 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d004      	beq.n	800534c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a15      	ldr	r2, [pc, #84]	@ (800539c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d10c      	bne.n	8005366 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005352:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	4313      	orrs	r3, r2
 800535c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68ba      	ldr	r2, [r7, #8]
 8005364:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3714      	adds	r7, #20
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr
 8005384:	40010000 	.word	0x40010000
 8005388:	40010400 	.word	0x40010400
 800538c:	40000400 	.word	0x40000400
 8005390:	40000800 	.word	0x40000800
 8005394:	40000c00 	.word	0x40000c00
 8005398:	40014000 	.word	0x40014000
 800539c:	40001800 	.word	0x40001800

080053a0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d121      	bne.n	80053f6 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	4b27      	ldr	r3, [pc, #156]	@ (8005454 <FMC_SDRAM_Init+0xb4>)
 80053b8:	4013      	ands	r3, r2
 80053ba:	683a      	ldr	r2, [r7, #0]
 80053bc:	6851      	ldr	r1, [r2, #4]
 80053be:	683a      	ldr	r2, [r7, #0]
 80053c0:	6892      	ldr	r2, [r2, #8]
 80053c2:	4311      	orrs	r1, r2
 80053c4:	683a      	ldr	r2, [r7, #0]
 80053c6:	68d2      	ldr	r2, [r2, #12]
 80053c8:	4311      	orrs	r1, r2
 80053ca:	683a      	ldr	r2, [r7, #0]
 80053cc:	6912      	ldr	r2, [r2, #16]
 80053ce:	4311      	orrs	r1, r2
 80053d0:	683a      	ldr	r2, [r7, #0]
 80053d2:	6952      	ldr	r2, [r2, #20]
 80053d4:	4311      	orrs	r1, r2
 80053d6:	683a      	ldr	r2, [r7, #0]
 80053d8:	6992      	ldr	r2, [r2, #24]
 80053da:	4311      	orrs	r1, r2
 80053dc:	683a      	ldr	r2, [r7, #0]
 80053de:	69d2      	ldr	r2, [r2, #28]
 80053e0:	4311      	orrs	r1, r2
 80053e2:	683a      	ldr	r2, [r7, #0]
 80053e4:	6a12      	ldr	r2, [r2, #32]
 80053e6:	4311      	orrs	r1, r2
 80053e8:	683a      	ldr	r2, [r7, #0]
 80053ea:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80053ec:	430a      	orrs	r2, r1
 80053ee:	431a      	orrs	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	601a      	str	r2, [r3, #0]
 80053f4:	e026      	b.n	8005444 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	69d9      	ldr	r1, [r3, #28]
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	6a1b      	ldr	r3, [r3, #32]
 8005406:	4319      	orrs	r1, r3
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800540c:	430b      	orrs	r3, r1
 800540e:	431a      	orrs	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685a      	ldr	r2, [r3, #4]
 8005418:	4b0e      	ldr	r3, [pc, #56]	@ (8005454 <FMC_SDRAM_Init+0xb4>)
 800541a:	4013      	ands	r3, r2
 800541c:	683a      	ldr	r2, [r7, #0]
 800541e:	6851      	ldr	r1, [r2, #4]
 8005420:	683a      	ldr	r2, [r7, #0]
 8005422:	6892      	ldr	r2, [r2, #8]
 8005424:	4311      	orrs	r1, r2
 8005426:	683a      	ldr	r2, [r7, #0]
 8005428:	68d2      	ldr	r2, [r2, #12]
 800542a:	4311      	orrs	r1, r2
 800542c:	683a      	ldr	r2, [r7, #0]
 800542e:	6912      	ldr	r2, [r2, #16]
 8005430:	4311      	orrs	r1, r2
 8005432:	683a      	ldr	r2, [r7, #0]
 8005434:	6952      	ldr	r2, [r2, #20]
 8005436:	4311      	orrs	r1, r2
 8005438:	683a      	ldr	r2, [r7, #0]
 800543a:	6992      	ldr	r2, [r2, #24]
 800543c:	430a      	orrs	r2, r1
 800543e:	431a      	orrs	r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	370c      	adds	r7, #12
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	ffff8000 	.word	0xffff8000

08005458 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d128      	bne.n	80054bc <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	1e59      	subs	r1, r3, #1
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	3b01      	subs	r3, #1
 800547e:	011b      	lsls	r3, r3, #4
 8005480:	4319      	orrs	r1, r3
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	3b01      	subs	r3, #1
 8005488:	021b      	lsls	r3, r3, #8
 800548a:	4319      	orrs	r1, r3
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	3b01      	subs	r3, #1
 8005492:	031b      	lsls	r3, r3, #12
 8005494:	4319      	orrs	r1, r3
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	3b01      	subs	r3, #1
 800549c:	041b      	lsls	r3, r3, #16
 800549e:	4319      	orrs	r1, r3
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	695b      	ldr	r3, [r3, #20]
 80054a4:	3b01      	subs	r3, #1
 80054a6:	051b      	lsls	r3, r3, #20
 80054a8:	4319      	orrs	r1, r3
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	699b      	ldr	r3, [r3, #24]
 80054ae:	3b01      	subs	r3, #1
 80054b0:	061b      	lsls	r3, r3, #24
 80054b2:	430b      	orrs	r3, r1
 80054b4:	431a      	orrs	r2, r3
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	609a      	str	r2, [r3, #8]
 80054ba:	e02d      	b.n	8005518 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	689a      	ldr	r2, [r3, #8]
 80054c0:	4b19      	ldr	r3, [pc, #100]	@ (8005528 <FMC_SDRAM_Timing_Init+0xd0>)
 80054c2:	4013      	ands	r3, r2
 80054c4:	68ba      	ldr	r2, [r7, #8]
 80054c6:	68d2      	ldr	r2, [r2, #12]
 80054c8:	3a01      	subs	r2, #1
 80054ca:	0311      	lsls	r1, r2, #12
 80054cc:	68ba      	ldr	r2, [r7, #8]
 80054ce:	6952      	ldr	r2, [r2, #20]
 80054d0:	3a01      	subs	r2, #1
 80054d2:	0512      	lsls	r2, r2, #20
 80054d4:	430a      	orrs	r2, r1
 80054d6:	431a      	orrs	r2, r3
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	1e59      	subs	r1, r3, #1
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	3b01      	subs	r3, #1
 80054f0:	011b      	lsls	r3, r3, #4
 80054f2:	4319      	orrs	r1, r3
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	3b01      	subs	r3, #1
 80054fa:	021b      	lsls	r3, r3, #8
 80054fc:	4319      	orrs	r1, r3
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	3b01      	subs	r3, #1
 8005504:	041b      	lsls	r3, r3, #16
 8005506:	4319      	orrs	r1, r3
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	3b01      	subs	r3, #1
 800550e:	061b      	lsls	r3, r3, #24
 8005510:	430b      	orrs	r3, r1
 8005512:	431a      	orrs	r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3714      	adds	r7, #20
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop
 8005528:	ff0f0fff 	.word	0xff0f0fff

0800552c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	691a      	ldr	r2, [r3, #16]
 800553c:	4b0c      	ldr	r3, [pc, #48]	@ (8005570 <FMC_SDRAM_SendCommand+0x44>)
 800553e:	4013      	ands	r3, r2
 8005540:	68ba      	ldr	r2, [r7, #8]
 8005542:	6811      	ldr	r1, [r2, #0]
 8005544:	68ba      	ldr	r2, [r7, #8]
 8005546:	6852      	ldr	r2, [r2, #4]
 8005548:	4311      	orrs	r1, r2
 800554a:	68ba      	ldr	r2, [r7, #8]
 800554c:	6892      	ldr	r2, [r2, #8]
 800554e:	3a01      	subs	r2, #1
 8005550:	0152      	lsls	r2, r2, #5
 8005552:	4311      	orrs	r1, r2
 8005554:	68ba      	ldr	r2, [r7, #8]
 8005556:	68d2      	ldr	r2, [r2, #12]
 8005558:	0252      	lsls	r2, r2, #9
 800555a:	430a      	orrs	r2, r1
 800555c:	431a      	orrs	r2, r3
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8005562:	2300      	movs	r3, #0
}
 8005564:	4618      	mov	r0, r3
 8005566:	3714      	adds	r7, #20
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr
 8005570:	ffc00000 	.word	0xffc00000

08005574 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	695a      	ldr	r2, [r3, #20]
 8005582:	4b07      	ldr	r3, [pc, #28]	@ (80055a0 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8005584:	4013      	ands	r3, r2
 8005586:	683a      	ldr	r2, [r7, #0]
 8005588:	0052      	lsls	r2, r2, #1
 800558a:	431a      	orrs	r2, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8005590:	2300      	movs	r3, #0
}
 8005592:	4618      	mov	r0, r3
 8005594:	370c      	adds	r7, #12
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	ffffc001 	.word	0xffffc001

080055a4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b089      	sub	sp, #36	@ 0x24
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	fa93 f3a3 	rbit	r3, r3
 80055be:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	fab3 f383 	clz	r3, r3
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	005b      	lsls	r3, r3, #1
 80055ca:	2103      	movs	r1, #3
 80055cc:	fa01 f303 	lsl.w	r3, r1, r3
 80055d0:	43db      	mvns	r3, r3
 80055d2:	401a      	ands	r2, r3
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	fa93 f3a3 	rbit	r3, r3
 80055de:	61bb      	str	r3, [r7, #24]
  return result;
 80055e0:	69bb      	ldr	r3, [r7, #24]
 80055e2:	fab3 f383 	clz	r3, r3
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	005b      	lsls	r3, r3, #1
 80055ea:	6879      	ldr	r1, [r7, #4]
 80055ec:	fa01 f303 	lsl.w	r3, r1, r3
 80055f0:	431a      	orrs	r2, r3
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	601a      	str	r2, [r3, #0]
}
 80055f6:	bf00      	nop
 80055f8:	3724      	adds	r7, #36	@ 0x24
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr

08005602 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8005602:	b480      	push	{r7}
 8005604:	b085      	sub	sp, #20
 8005606:	af00      	add	r7, sp, #0
 8005608:	60f8      	str	r0, [r7, #12]
 800560a:	60b9      	str	r1, [r7, #8]
 800560c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	685a      	ldr	r2, [r3, #4]
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	43db      	mvns	r3, r3
 8005616:	401a      	ands	r2, r3
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	6879      	ldr	r1, [r7, #4]
 800561c:	fb01 f303 	mul.w	r3, r1, r3
 8005620:	431a      	orrs	r2, r3
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	605a      	str	r2, [r3, #4]
}
 8005626:	bf00      	nop
 8005628:	3714      	adds	r7, #20
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr

08005632 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8005632:	b480      	push	{r7}
 8005634:	b089      	sub	sp, #36	@ 0x24
 8005636:	af00      	add	r7, sp, #0
 8005638:	60f8      	str	r0, [r7, #12]
 800563a:	60b9      	str	r1, [r7, #8]
 800563c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	689a      	ldr	r2, [r3, #8]
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	fa93 f3a3 	rbit	r3, r3
 800564c:	613b      	str	r3, [r7, #16]
  return result;
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	fab3 f383 	clz	r3, r3
 8005654:	b2db      	uxtb	r3, r3
 8005656:	005b      	lsls	r3, r3, #1
 8005658:	2103      	movs	r1, #3
 800565a:	fa01 f303 	lsl.w	r3, r1, r3
 800565e:	43db      	mvns	r3, r3
 8005660:	401a      	ands	r2, r3
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	fa93 f3a3 	rbit	r3, r3
 800566c:	61bb      	str	r3, [r7, #24]
  return result;
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	fab3 f383 	clz	r3, r3
 8005674:	b2db      	uxtb	r3, r3
 8005676:	005b      	lsls	r3, r3, #1
 8005678:	6879      	ldr	r1, [r7, #4]
 800567a:	fa01 f303 	lsl.w	r3, r1, r3
 800567e:	431a      	orrs	r2, r3
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8005684:	bf00      	nop
 8005686:	3724      	adds	r7, #36	@ 0x24
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8005690:	b480      	push	{r7}
 8005692:	b089      	sub	sp, #36	@ 0x24
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	68da      	ldr	r2, [r3, #12]
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	fa93 f3a3 	rbit	r3, r3
 80056aa:	613b      	str	r3, [r7, #16]
  return result;
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	fab3 f383 	clz	r3, r3
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	005b      	lsls	r3, r3, #1
 80056b6:	2103      	movs	r1, #3
 80056b8:	fa01 f303 	lsl.w	r3, r1, r3
 80056bc:	43db      	mvns	r3, r3
 80056be:	401a      	ands	r2, r3
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	fa93 f3a3 	rbit	r3, r3
 80056ca:	61bb      	str	r3, [r7, #24]
  return result;
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	fab3 f383 	clz	r3, r3
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	005b      	lsls	r3, r3, #1
 80056d6:	6879      	ldr	r1, [r7, #4]
 80056d8:	fa01 f303 	lsl.w	r3, r1, r3
 80056dc:	431a      	orrs	r2, r3
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	60da      	str	r2, [r3, #12]
}
 80056e2:	bf00      	nop
 80056e4:	3724      	adds	r7, #36	@ 0x24
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr

080056ee <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80056ee:	b480      	push	{r7}
 80056f0:	b089      	sub	sp, #36	@ 0x24
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	60f8      	str	r0, [r7, #12]
 80056f6:	60b9      	str	r1, [r7, #8]
 80056f8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6a1a      	ldr	r2, [r3, #32]
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	fa93 f3a3 	rbit	r3, r3
 8005708:	613b      	str	r3, [r7, #16]
  return result;
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	fab3 f383 	clz	r3, r3
 8005710:	b2db      	uxtb	r3, r3
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	210f      	movs	r1, #15
 8005716:	fa01 f303 	lsl.w	r3, r1, r3
 800571a:	43db      	mvns	r3, r3
 800571c:	401a      	ands	r2, r3
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	fa93 f3a3 	rbit	r3, r3
 8005728:	61bb      	str	r3, [r7, #24]
  return result;
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	fab3 f383 	clz	r3, r3
 8005730:	b2db      	uxtb	r3, r3
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	6879      	ldr	r1, [r7, #4]
 8005736:	fa01 f303 	lsl.w	r3, r1, r3
 800573a:	431a      	orrs	r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8005740:	bf00      	nop
 8005742:	3724      	adds	r7, #36	@ 0x24
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800574c:	b480      	push	{r7}
 800574e:	b089      	sub	sp, #36	@ 0x24
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	0a1b      	lsrs	r3, r3, #8
 8005760:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	fa93 f3a3 	rbit	r3, r3
 8005768:	613b      	str	r3, [r7, #16]
  return result;
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	fab3 f383 	clz	r3, r3
 8005770:	b2db      	uxtb	r3, r3
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	210f      	movs	r1, #15
 8005776:	fa01 f303 	lsl.w	r3, r1, r3
 800577a:	43db      	mvns	r3, r3
 800577c:	401a      	ands	r2, r3
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	0a1b      	lsrs	r3, r3, #8
 8005782:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	fa93 f3a3 	rbit	r3, r3
 800578a:	61bb      	str	r3, [r7, #24]
  return result;
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	fab3 f383 	clz	r3, r3
 8005792:	b2db      	uxtb	r3, r3
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	6879      	ldr	r1, [r7, #4]
 8005798:	fa01 f303 	lsl.w	r3, r1, r3
 800579c:	431a      	orrs	r2, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80057a2:	bf00      	nop
 80057a4:	3724      	adds	r7, #36	@ 0x24
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr

080057ae <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80057ae:	b580      	push	{r7, lr}
 80057b0:	b088      	sub	sp, #32
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
 80057b6:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80057b8:	2300      	movs	r3, #0
 80057ba:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80057bc:	2300      	movs	r3, #0
 80057be:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	fa93 f3a3 	rbit	r3, r3
 80057cc:	613b      	str	r3, [r7, #16]
  return result;
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	fab3 f383 	clz	r3, r3
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80057d8:	e051      	b.n	800587e <LL_GPIO_Init+0xd0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	2101      	movs	r1, #1
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	fa01 f303 	lsl.w	r3, r1, r3
 80057e6:	4013      	ands	r3, r2
 80057e8:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d043      	beq.n	8005878 <LL_GPIO_Init+0xca>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d003      	beq.n	8005800 <LL_GPIO_Init+0x52>
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d10e      	bne.n	800581e <LL_GPIO_Init+0x70>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	461a      	mov	r2, r3
 8005806:	69b9      	ldr	r1, [r7, #24]
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f7ff ff12 	bl	8005632 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	6819      	ldr	r1, [r3, #0]
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	461a      	mov	r2, r3
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f7ff fef2 	bl	8005602 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	461a      	mov	r2, r3
 8005824:	69b9      	ldr	r1, [r7, #24]
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f7ff ff32 	bl	8005690 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	2b02      	cmp	r3, #2
 8005832:	d11a      	bne.n	800586a <LL_GPIO_Init+0xbc>
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	fa93 f3a3 	rbit	r3, r3
 800583e:	60bb      	str	r3, [r7, #8]
  return result;
 8005840:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8005842:	fab3 f383 	clz	r3, r3
 8005846:	b2db      	uxtb	r3, r3
 8005848:	2b07      	cmp	r3, #7
 800584a:	d807      	bhi.n	800585c <LL_GPIO_Init+0xae>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	695b      	ldr	r3, [r3, #20]
 8005850:	461a      	mov	r2, r3
 8005852:	69b9      	ldr	r1, [r7, #24]
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f7ff ff4a 	bl	80056ee <LL_GPIO_SetAFPin_0_7>
 800585a:	e006      	b.n	800586a <LL_GPIO_Init+0xbc>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	695b      	ldr	r3, [r3, #20]
 8005860:	461a      	mov	r2, r3
 8005862:	69b9      	ldr	r1, [r7, #24]
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f7ff ff71 	bl	800574c <LL_GPIO_SetAFPin_8_15>
        }
      }
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	461a      	mov	r2, r3
 8005870:	69b9      	ldr	r1, [r7, #24]
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f7ff fe96 	bl	80055a4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	3301      	adds	r3, #1
 800587c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	fa22 f303 	lsr.w	r3, r2, r3
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1a6      	bne.n	80057da <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 800588c:	2300      	movs	r3, #0
}
 800588e:	4618      	mov	r0, r3
 8005890:	3720      	adds	r7, #32
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
	...

08005898 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8005898:	b480      	push	{r7}
 800589a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800589c:	4b06      	ldr	r3, [pc, #24]	@ (80058b8 <LL_RCC_HSI_IsReady+0x20>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0302 	and.w	r3, r3, #2
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	bf0c      	ite	eq
 80058a8:	2301      	moveq	r3, #1
 80058aa:	2300      	movne	r3, #0
 80058ac:	b2db      	uxtb	r3, r3
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr
 80058b8:	40023800 	.word	0x40023800

080058bc <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80058bc:	b480      	push	{r7}
 80058be:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 80058c0:	4b06      	ldr	r3, [pc, #24]	@ (80058dc <LL_RCC_LSE_IsReady+0x20>)
 80058c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058c4:	f003 0302 	and.w	r3, r3, #2
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	bf0c      	ite	eq
 80058cc:	2301      	moveq	r3, #1
 80058ce:	2300      	movne	r3, #0
 80058d0:	b2db      	uxtb	r3, r3
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr
 80058dc:	40023800 	.word	0x40023800

080058e0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80058e0:	b480      	push	{r7}
 80058e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80058e4:	4b04      	ldr	r3, [pc, #16]	@ (80058f8 <LL_RCC_GetSysClkSource+0x18>)
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f003 030c 	and.w	r3, r3, #12
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	40023800 	.word	0x40023800

080058fc <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80058fc:	b480      	push	{r7}
 80058fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005900:	4b04      	ldr	r3, [pc, #16]	@ (8005914 <LL_RCC_GetAHBPrescaler+0x18>)
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005908:	4618      	mov	r0, r3
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	40023800 	.word	0x40023800

08005918 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005918:	b480      	push	{r7}
 800591a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800591c:	4b04      	ldr	r3, [pc, #16]	@ (8005930 <LL_RCC_GetAPB1Prescaler+0x18>)
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8005924:	4618      	mov	r0, r3
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop
 8005930:	40023800 	.word	0x40023800

08005934 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8005934:	b480      	push	{r7}
 8005936:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005938:	4b04      	ldr	r3, [pc, #16]	@ (800594c <LL_RCC_GetAPB2Prescaler+0x18>)
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8005940:	4618      	mov	r0, r3
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	40023800 	.word	0x40023800

08005950 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART6_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_USART6_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART6_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->DCKCFGR2, USARTx) | (USARTx << 16U));
 8005958:	4b06      	ldr	r3, [pc, #24]	@ (8005974 <LL_RCC_GetUSARTClockSource+0x24>)
 800595a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	401a      	ands	r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	041b      	lsls	r3, r3, #16
 8005966:	4313      	orrs	r3, r2
}
 8005968:	4618      	mov	r0, r3
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr
 8005974:	40023800 	.word	0x40023800

08005978 <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART8_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_UART8_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_UART8_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->DCKCFGR2, UARTx) | (UARTx << 16U));
 8005980:	4b06      	ldr	r3, [pc, #24]	@ (800599c <LL_RCC_GetUARTClockSource+0x24>)
 8005982:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	401a      	ands	r2, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	041b      	lsls	r3, r3, #16
 800598e:	4313      	orrs	r3, r2
}
 8005990:	4618      	mov	r0, r3
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr
 800599c:	40023800 	.word	0x40023800

080059a0 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80059a0:	b480      	push	{r7}
 80059a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80059a4:	4b04      	ldr	r3, [pc, #16]	@ (80059b8 <LL_RCC_PLL_GetMainSource+0x18>)
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	40023800 	.word	0x40023800

080059bc <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 50 and 432
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80059bc:	b480      	push	{r7}
 80059be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80059c0:	4b04      	ldr	r3, [pc, #16]	@ (80059d4 <LL_RCC_PLL_GetN+0x18>)
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	099b      	lsrs	r3, r3, #6
 80059c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr
 80059d4:	40023800 	.word	0x40023800

080059d8 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 80059d8:	b480      	push	{r7}
 80059da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 80059dc:	4b04      	ldr	r3, [pc, #16]	@ (80059f0 <LL_RCC_PLL_GetP+0x18>)
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	40023800 	.word	0x40023800

080059f4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80059f4:	b480      	push	{r7}
 80059f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80059f8:	4b04      	ldr	r3, [pc, #16]	@ (8005a0c <LL_RCC_PLL_GetDivider+0x18>)
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop
 8005a0c:	40023800 	.word	0x40023800

08005a10 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART6_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b03      	cmp	r3, #3
 8005a20:	d133      	bne.n	8005a8a <LL_RCC_GetUSARTClockFreq+0x7a>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f7ff ff94 	bl	8005950 <LL_RCC_GetUSARTClockSource>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	f1b3 1f03 	cmp.w	r3, #196611	@ 0x30003
 8005a2e:	d016      	beq.n	8005a5e <LL_RCC_GetUSARTClockFreq+0x4e>
 8005a30:	f1b3 1f03 	cmp.w	r3, #196611	@ 0x30003
 8005a34:	d81d      	bhi.n	8005a72 <LL_RCC_GetUSARTClockFreq+0x62>
 8005a36:	4a70      	ldr	r2, [pc, #448]	@ (8005bf8 <LL_RCC_GetUSARTClockFreq+0x1e8>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d003      	beq.n	8005a44 <LL_RCC_GetUSARTClockFreq+0x34>
 8005a3c:	4a6f      	ldr	r2, [pc, #444]	@ (8005bfc <LL_RCC_GetUSARTClockFreq+0x1ec>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d004      	beq.n	8005a4c <LL_RCC_GetUSARTClockFreq+0x3c>
 8005a42:	e016      	b.n	8005a72 <LL_RCC_GetUSARTClockFreq+0x62>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8005a44:	f000 f9f2 	bl	8005e2c <RCC_GetSystemClockFreq>
 8005a48:	60f8      	str	r0, [r7, #12]
        break;
 8005a4a:	e0cf      	b.n	8005bec <LL_RCC_GetUSARTClockFreq+0x1dc>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8005a4c:	f7ff ff24 	bl	8005898 <LL_RCC_HSI_IsReady>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	f000 80bb 	beq.w	8005bce <LL_RCC_GetUSARTClockFreq+0x1be>
        {
          usart_frequency = HSI_VALUE;
 8005a58:	4b69      	ldr	r3, [pc, #420]	@ (8005c00 <LL_RCC_GetUSARTClockFreq+0x1f0>)
 8005a5a:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005a5c:	e0b7      	b.n	8005bce <LL_RCC_GetUSARTClockFreq+0x1be>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8005a5e:	f7ff ff2d 	bl	80058bc <LL_RCC_LSE_IsReady>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f000 80b4 	beq.w	8005bd2 <LL_RCC_GetUSARTClockFreq+0x1c2>
        {
          usart_frequency = LSE_VALUE;
 8005a6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a6e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005a70:	e0af      	b.n	8005bd2 <LL_RCC_GetUSARTClockFreq+0x1c2>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005a72:	f000 f9db 	bl	8005e2c <RCC_GetSystemClockFreq>
 8005a76:	4603      	mov	r3, r0
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f000 f9ff 	bl	8005e7c <RCC_GetHCLKClockFreq>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	4618      	mov	r0, r3
 8005a82:	f000 fa25 	bl	8005ed0 <RCC_GetPCLK2ClockFreq>
 8005a86:	60f8      	str	r0, [r7, #12]
        break;
 8005a88:	e0b0      	b.n	8005bec <LL_RCC_GetUSARTClockFreq+0x1dc>
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2b0c      	cmp	r3, #12
 8005a8e:	d133      	bne.n	8005af8 <LL_RCC_GetUSARTClockFreq+0xe8>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f7ff ff5d 	bl	8005950 <LL_RCC_GetUSARTClockSource>
 8005a96:	4603      	mov	r3, r0
 8005a98:	f1b3 1f0c 	cmp.w	r3, #786444	@ 0xc000c
 8005a9c:	d016      	beq.n	8005acc <LL_RCC_GetUSARTClockFreq+0xbc>
 8005a9e:	f1b3 1f0c 	cmp.w	r3, #786444	@ 0xc000c
 8005aa2:	d81d      	bhi.n	8005ae0 <LL_RCC_GetUSARTClockFreq+0xd0>
 8005aa4:	4a57      	ldr	r2, [pc, #348]	@ (8005c04 <LL_RCC_GetUSARTClockFreq+0x1f4>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d003      	beq.n	8005ab2 <LL_RCC_GetUSARTClockFreq+0xa2>
 8005aaa:	4a57      	ldr	r2, [pc, #348]	@ (8005c08 <LL_RCC_GetUSARTClockFreq+0x1f8>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d004      	beq.n	8005aba <LL_RCC_GetUSARTClockFreq+0xaa>
 8005ab0:	e016      	b.n	8005ae0 <LL_RCC_GetUSARTClockFreq+0xd0>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8005ab2:	f000 f9bb 	bl	8005e2c <RCC_GetSystemClockFreq>
 8005ab6:	60f8      	str	r0, [r7, #12]
        break;
 8005ab8:	e098      	b.n	8005bec <LL_RCC_GetUSARTClockFreq+0x1dc>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8005aba:	f7ff feed 	bl	8005898 <LL_RCC_HSI_IsReady>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	f000 8088 	beq.w	8005bd6 <LL_RCC_GetUSARTClockFreq+0x1c6>
        {
          usart_frequency = HSI_VALUE;
 8005ac6:	4b4e      	ldr	r3, [pc, #312]	@ (8005c00 <LL_RCC_GetUSARTClockFreq+0x1f0>)
 8005ac8:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005aca:	e084      	b.n	8005bd6 <LL_RCC_GetUSARTClockFreq+0x1c6>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8005acc:	f7ff fef6 	bl	80058bc <LL_RCC_LSE_IsReady>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	f000 8081 	beq.w	8005bda <LL_RCC_GetUSARTClockFreq+0x1ca>
        {
          usart_frequency = LSE_VALUE;
 8005ad8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005adc:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005ade:	e07c      	b.n	8005bda <LL_RCC_GetUSARTClockFreq+0x1ca>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005ae0:	f000 f9a4 	bl	8005e2c <RCC_GetSystemClockFreq>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f000 f9c8 	bl	8005e7c <RCC_GetHCLKClockFreq>
 8005aec:	4603      	mov	r3, r0
 8005aee:	4618      	mov	r0, r3
 8005af0:	f000 f9da 	bl	8005ea8 <RCC_GetPCLK1ClockFreq>
 8005af4:	60f8      	str	r0, [r7, #12]
        break;
 8005af6:	e079      	b.n	8005bec <LL_RCC_GetUSARTClockFreq+0x1dc>
    }
  }
  else if (USARTxSource == LL_RCC_USART6_CLKSOURCE)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005afe:	d131      	bne.n	8005b64 <LL_RCC_GetUSARTClockFreq+0x154>
  {
    /* USART6CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f7ff ff25 	bl	8005950 <LL_RCC_GetUSARTClockSource>
 8005b06:	4603      	mov	r3, r0
 8005b08:	f1b3 2f0c 	cmp.w	r3, #201329664	@ 0xc000c00
 8005b0c:	d015      	beq.n	8005b3a <LL_RCC_GetUSARTClockFreq+0x12a>
 8005b0e:	f1b3 2f0c 	cmp.w	r3, #201329664	@ 0xc000c00
 8005b12:	d81b      	bhi.n	8005b4c <LL_RCC_GetUSARTClockFreq+0x13c>
 8005b14:	4a3d      	ldr	r2, [pc, #244]	@ (8005c0c <LL_RCC_GetUSARTClockFreq+0x1fc>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d003      	beq.n	8005b22 <LL_RCC_GetUSARTClockFreq+0x112>
 8005b1a:	4a3d      	ldr	r2, [pc, #244]	@ (8005c10 <LL_RCC_GetUSARTClockFreq+0x200>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d004      	beq.n	8005b2a <LL_RCC_GetUSARTClockFreq+0x11a>
 8005b20:	e014      	b.n	8005b4c <LL_RCC_GetUSARTClockFreq+0x13c>
    {
      case LL_RCC_USART6_CLKSOURCE_SYSCLK: /* USART6 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8005b22:	f000 f983 	bl	8005e2c <RCC_GetSystemClockFreq>
 8005b26:	60f8      	str	r0, [r7, #12]
        break;
 8005b28:	e060      	b.n	8005bec <LL_RCC_GetUSARTClockFreq+0x1dc>

      case LL_RCC_USART6_CLKSOURCE_HSI:    /* USART6 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8005b2a:	f7ff feb5 	bl	8005898 <LL_RCC_HSI_IsReady>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d054      	beq.n	8005bde <LL_RCC_GetUSARTClockFreq+0x1ce>
        {
          usart_frequency = HSI_VALUE;
 8005b34:	4b32      	ldr	r3, [pc, #200]	@ (8005c00 <LL_RCC_GetUSARTClockFreq+0x1f0>)
 8005b36:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005b38:	e051      	b.n	8005bde <LL_RCC_GetUSARTClockFreq+0x1ce>

      case LL_RCC_USART6_CLKSOURCE_LSE:    /* USART6 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8005b3a:	f7ff febf 	bl	80058bc <LL_RCC_LSE_IsReady>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d04e      	beq.n	8005be2 <LL_RCC_GetUSARTClockFreq+0x1d2>
        {
          usart_frequency = LSE_VALUE;
 8005b44:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b48:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005b4a:	e04a      	b.n	8005be2 <LL_RCC_GetUSARTClockFreq+0x1d2>

      case LL_RCC_USART6_CLKSOURCE_PCLK2:  /* USART6 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005b4c:	f000 f96e 	bl	8005e2c <RCC_GetSystemClockFreq>
 8005b50:	4603      	mov	r3, r0
 8005b52:	4618      	mov	r0, r3
 8005b54:	f000 f992 	bl	8005e7c <RCC_GetHCLKClockFreq>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f000 f9b8 	bl	8005ed0 <RCC_GetPCLK2ClockFreq>
 8005b60:	60f8      	str	r0, [r7, #12]
        break;
 8005b62:	e043      	b.n	8005bec <LL_RCC_GetUSARTClockFreq+0x1dc>
    }
  }
  else
  {
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2b30      	cmp	r3, #48	@ 0x30
 8005b68:	d140      	bne.n	8005bec <LL_RCC_GetUSARTClockFreq+0x1dc>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f7ff fef0 	bl	8005950 <LL_RCC_GetUSARTClockSource>
 8005b70:	4603      	mov	r3, r0
 8005b72:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 8005b76:	d015      	beq.n	8005ba4 <LL_RCC_GetUSARTClockFreq+0x194>
 8005b78:	f1b3 1f30 	cmp.w	r3, #3145776	@ 0x300030
 8005b7c:	d81b      	bhi.n	8005bb6 <LL_RCC_GetUSARTClockFreq+0x1a6>
 8005b7e:	4a25      	ldr	r2, [pc, #148]	@ (8005c14 <LL_RCC_GetUSARTClockFreq+0x204>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d003      	beq.n	8005b8c <LL_RCC_GetUSARTClockFreq+0x17c>
 8005b84:	4a24      	ldr	r2, [pc, #144]	@ (8005c18 <LL_RCC_GetUSARTClockFreq+0x208>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d004      	beq.n	8005b94 <LL_RCC_GetUSARTClockFreq+0x184>
 8005b8a:	e014      	b.n	8005bb6 <LL_RCC_GetUSARTClockFreq+0x1a6>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 8005b8c:	f000 f94e 	bl	8005e2c <RCC_GetSystemClockFreq>
 8005b90:	60f8      	str	r0, [r7, #12]
          break;
 8005b92:	e02b      	b.n	8005bec <LL_RCC_GetUSARTClockFreq+0x1dc>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady())
 8005b94:	f7ff fe80 	bl	8005898 <LL_RCC_HSI_IsReady>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d023      	beq.n	8005be6 <LL_RCC_GetUSARTClockFreq+0x1d6>
          {
            usart_frequency = HSI_VALUE;
 8005b9e:	4b18      	ldr	r3, [pc, #96]	@ (8005c00 <LL_RCC_GetUSARTClockFreq+0x1f0>)
 8005ba0:	60fb      	str	r3, [r7, #12]
          }
          break;
 8005ba2:	e020      	b.n	8005be6 <LL_RCC_GetUSARTClockFreq+0x1d6>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady())
 8005ba4:	f7ff fe8a 	bl	80058bc <LL_RCC_LSE_IsReady>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d01d      	beq.n	8005bea <LL_RCC_GetUSARTClockFreq+0x1da>
          {
            usart_frequency = LSE_VALUE;
 8005bae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bb2:	60fb      	str	r3, [r7, #12]
          }
          break;
 8005bb4:	e019      	b.n	8005bea <LL_RCC_GetUSARTClockFreq+0x1da>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
        default:
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005bb6:	f000 f939 	bl	8005e2c <RCC_GetSystemClockFreq>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f000 f95d 	bl	8005e7c <RCC_GetHCLKClockFreq>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f000 f96f 	bl	8005ea8 <RCC_GetPCLK1ClockFreq>
 8005bca:	60f8      	str	r0, [r7, #12]
          break;
 8005bcc:	e00e      	b.n	8005bec <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 8005bce:	bf00      	nop
 8005bd0:	e00c      	b.n	8005bec <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 8005bd2:	bf00      	nop
 8005bd4:	e00a      	b.n	8005bec <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 8005bd6:	bf00      	nop
 8005bd8:	e008      	b.n	8005bec <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 8005bda:	bf00      	nop
 8005bdc:	e006      	b.n	8005bec <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 8005bde:	bf00      	nop
 8005be0:	e004      	b.n	8005bec <LL_RCC_GetUSARTClockFreq+0x1dc>
        break;
 8005be2:	bf00      	nop
 8005be4:	e002      	b.n	8005bec <LL_RCC_GetUSARTClockFreq+0x1dc>
          break;
 8005be6:	bf00      	nop
 8005be8:	e000      	b.n	8005bec <LL_RCC_GetUSARTClockFreq+0x1dc>
          break;
 8005bea:	bf00      	nop
      }
    }
  }
  return usart_frequency;
 8005bec:	68fb      	ldr	r3, [r7, #12]
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3710      	adds	r7, #16
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	00030001 	.word	0x00030001
 8005bfc:	00030002 	.word	0x00030002
 8005c00:	00f42400 	.word	0x00f42400
 8005c04:	000c0004 	.word	0x000c0004
 8005c08:	000c0008 	.word	0x000c0008
 8005c0c:	0c000400 	.word	0x0c000400
 8005c10:	0c000800 	.word	0x0c000800
 8005c14:	00300010 	.word	0x00300010
 8005c18:	00300020 	.word	0x00300020

08005c1c <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART8_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8005c24:	2300      	movs	r3, #0
 8005c26:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005c2c:	d133      	bne.n	8005c96 <LL_RCC_GetUARTClockFreq+0x7a>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f7ff fea2 	bl	8005978 <LL_RCC_GetUARTClockSource>
 8005c34:	4603      	mov	r3, r0
 8005c36:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 8005c3a:	d016      	beq.n	8005c6a <LL_RCC_GetUARTClockFreq+0x4e>
 8005c3c:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 8005c40:	d81d      	bhi.n	8005c7e <LL_RCC_GetUARTClockFreq+0x62>
 8005c42:	4a71      	ldr	r2, [pc, #452]	@ (8005e08 <LL_RCC_GetUARTClockFreq+0x1ec>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d003      	beq.n	8005c50 <LL_RCC_GetUARTClockFreq+0x34>
 8005c48:	4a70      	ldr	r2, [pc, #448]	@ (8005e0c <LL_RCC_GetUARTClockFreq+0x1f0>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d004      	beq.n	8005c58 <LL_RCC_GetUARTClockFreq+0x3c>
 8005c4e:	e016      	b.n	8005c7e <LL_RCC_GetUARTClockFreq+0x62>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8005c50:	f000 f8ec 	bl	8005e2c <RCC_GetSystemClockFreq>
 8005c54:	60f8      	str	r0, [r7, #12]
        break;
 8005c56:	e0d1      	b.n	8005dfc <LL_RCC_GetUARTClockFreq+0x1e0>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8005c58:	f7ff fe1e 	bl	8005898 <LL_RCC_HSI_IsReady>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	f000 80bd 	beq.w	8005dde <LL_RCC_GetUARTClockFreq+0x1c2>
        {
          uart_frequency = HSI_VALUE;
 8005c64:	4b6a      	ldr	r3, [pc, #424]	@ (8005e10 <LL_RCC_GetUARTClockFreq+0x1f4>)
 8005c66:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005c68:	e0b9      	b.n	8005dde <LL_RCC_GetUARTClockFreq+0x1c2>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8005c6a:	f7ff fe27 	bl	80058bc <LL_RCC_LSE_IsReady>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	f000 80b6 	beq.w	8005de2 <LL_RCC_GetUARTClockFreq+0x1c6>
        {
          uart_frequency = LSE_VALUE;
 8005c76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c7a:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005c7c:	e0b1      	b.n	8005de2 <LL_RCC_GetUARTClockFreq+0x1c6>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005c7e:	f000 f8d5 	bl	8005e2c <RCC_GetSystemClockFreq>
 8005c82:	4603      	mov	r3, r0
 8005c84:	4618      	mov	r0, r3
 8005c86:	f000 f8f9 	bl	8005e7c <RCC_GetHCLKClockFreq>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f000 f90b 	bl	8005ea8 <RCC_GetPCLK1ClockFreq>
 8005c92:	60f8      	str	r0, [r7, #12]
        break;
 8005c94:	e0b2      	b.n	8005dfc <LL_RCC_GetUARTClockFreq+0x1e0>
    }
  }
  else if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c9c:	d133      	bne.n	8005d06 <LL_RCC_GetUARTClockFreq+0xea>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f7ff fe6a 	bl	8005978 <LL_RCC_GetUARTClockSource>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	f1b3 2f03 	cmp.w	r3, #50332416	@ 0x3000300
 8005caa:	d016      	beq.n	8005cda <LL_RCC_GetUARTClockFreq+0xbe>
 8005cac:	f1b3 2f03 	cmp.w	r3, #50332416	@ 0x3000300
 8005cb0:	d81d      	bhi.n	8005cee <LL_RCC_GetUARTClockFreq+0xd2>
 8005cb2:	4a58      	ldr	r2, [pc, #352]	@ (8005e14 <LL_RCC_GetUARTClockFreq+0x1f8>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d003      	beq.n	8005cc0 <LL_RCC_GetUARTClockFreq+0xa4>
 8005cb8:	4a57      	ldr	r2, [pc, #348]	@ (8005e18 <LL_RCC_GetUARTClockFreq+0x1fc>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d004      	beq.n	8005cc8 <LL_RCC_GetUARTClockFreq+0xac>
 8005cbe:	e016      	b.n	8005cee <LL_RCC_GetUARTClockFreq+0xd2>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8005cc0:	f000 f8b4 	bl	8005e2c <RCC_GetSystemClockFreq>
 8005cc4:	60f8      	str	r0, [r7, #12]
        break;
 8005cc6:	e099      	b.n	8005dfc <LL_RCC_GetUARTClockFreq+0x1e0>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8005cc8:	f7ff fde6 	bl	8005898 <LL_RCC_HSI_IsReady>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	f000 8089 	beq.w	8005de6 <LL_RCC_GetUARTClockFreq+0x1ca>
        {
          uart_frequency = HSI_VALUE;
 8005cd4:	4b4e      	ldr	r3, [pc, #312]	@ (8005e10 <LL_RCC_GetUARTClockFreq+0x1f4>)
 8005cd6:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005cd8:	e085      	b.n	8005de6 <LL_RCC_GetUARTClockFreq+0x1ca>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8005cda:	f7ff fdef 	bl	80058bc <LL_RCC_LSE_IsReady>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f000 8082 	beq.w	8005dea <LL_RCC_GetUARTClockFreq+0x1ce>
        {
          uart_frequency = LSE_VALUE;
 8005ce6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cea:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005cec:	e07d      	b.n	8005dea <LL_RCC_GetUARTClockFreq+0x1ce>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005cee:	f000 f89d 	bl	8005e2c <RCC_GetSystemClockFreq>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f000 f8c1 	bl	8005e7c <RCC_GetHCLKClockFreq>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f000 f8d3 	bl	8005ea8 <RCC_GetPCLK1ClockFreq>
 8005d02:	60f8      	str	r0, [r7, #12]
        break;
 8005d04:	e07a      	b.n	8005dfc <LL_RCC_GetUARTClockFreq+0x1e0>
    }
  }
  else if (UARTxSource == LL_RCC_UART7_CLKSOURCE)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005d0c:	d131      	bne.n	8005d72 <LL_RCC_GetUARTClockFreq+0x156>
  {
    /* UART7CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f7ff fe32 	bl	8005978 <LL_RCC_GetUARTClockSource>
 8005d14:	4603      	mov	r3, r0
 8005d16:	f1b3 2f30 	cmp.w	r3, #805318656	@ 0x30003000
 8005d1a:	d015      	beq.n	8005d48 <LL_RCC_GetUARTClockFreq+0x12c>
 8005d1c:	f1b3 2f30 	cmp.w	r3, #805318656	@ 0x30003000
 8005d20:	d81b      	bhi.n	8005d5a <LL_RCC_GetUARTClockFreq+0x13e>
 8005d22:	4a3e      	ldr	r2, [pc, #248]	@ (8005e1c <LL_RCC_GetUARTClockFreq+0x200>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d003      	beq.n	8005d30 <LL_RCC_GetUARTClockFreq+0x114>
 8005d28:	4a3d      	ldr	r2, [pc, #244]	@ (8005e20 <LL_RCC_GetUARTClockFreq+0x204>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d004      	beq.n	8005d38 <LL_RCC_GetUARTClockFreq+0x11c>
 8005d2e:	e014      	b.n	8005d5a <LL_RCC_GetUARTClockFreq+0x13e>
    {
      case LL_RCC_UART7_CLKSOURCE_SYSCLK: /* UART7 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8005d30:	f000 f87c 	bl	8005e2c <RCC_GetSystemClockFreq>
 8005d34:	60f8      	str	r0, [r7, #12]
        break;
 8005d36:	e061      	b.n	8005dfc <LL_RCC_GetUARTClockFreq+0x1e0>

      case LL_RCC_UART7_CLKSOURCE_HSI:    /* UART7 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8005d38:	f7ff fdae 	bl	8005898 <LL_RCC_HSI_IsReady>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d055      	beq.n	8005dee <LL_RCC_GetUARTClockFreq+0x1d2>
        {
          uart_frequency = HSI_VALUE;
 8005d42:	4b33      	ldr	r3, [pc, #204]	@ (8005e10 <LL_RCC_GetUARTClockFreq+0x1f4>)
 8005d44:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005d46:	e052      	b.n	8005dee <LL_RCC_GetUARTClockFreq+0x1d2>

      case LL_RCC_UART7_CLKSOURCE_LSE:    /* UART7 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8005d48:	f7ff fdb8 	bl	80058bc <LL_RCC_LSE_IsReady>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d04f      	beq.n	8005df2 <LL_RCC_GetUARTClockFreq+0x1d6>
        {
          uart_frequency = LSE_VALUE;
 8005d52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d56:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005d58:	e04b      	b.n	8005df2 <LL_RCC_GetUARTClockFreq+0x1d6>

      case LL_RCC_UART7_CLKSOURCE_PCLK1:  /* UART7 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005d5a:	f000 f867 	bl	8005e2c <RCC_GetSystemClockFreq>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	4618      	mov	r0, r3
 8005d62:	f000 f88b 	bl	8005e7c <RCC_GetHCLKClockFreq>
 8005d66:	4603      	mov	r3, r0
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f000 f89d 	bl	8005ea8 <RCC_GetPCLK1ClockFreq>
 8005d6e:	60f8      	str	r0, [r7, #12]
        break;
 8005d70:	e044      	b.n	8005dfc <LL_RCC_GetUARTClockFreq+0x1e0>
    }
  }
  else
  {
    if (UARTxSource == LL_RCC_UART8_CLKSOURCE)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005d78:	d140      	bne.n	8005dfc <LL_RCC_GetUARTClockFreq+0x1e0>
    {
      /* UART8CLK clock frequency */
      switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f7ff fdfc 	bl	8005978 <LL_RCC_GetUARTClockSource>
 8005d80:	4603      	mov	r3, r0
 8005d82:	f1b3 2fc0 	cmp.w	r3, #3221274624	@ 0xc000c000
 8005d86:	d015      	beq.n	8005db4 <LL_RCC_GetUARTClockFreq+0x198>
 8005d88:	f1b3 2fc0 	cmp.w	r3, #3221274624	@ 0xc000c000
 8005d8c:	d81b      	bhi.n	8005dc6 <LL_RCC_GetUARTClockFreq+0x1aa>
 8005d8e:	4a25      	ldr	r2, [pc, #148]	@ (8005e24 <LL_RCC_GetUARTClockFreq+0x208>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d003      	beq.n	8005d9c <LL_RCC_GetUARTClockFreq+0x180>
 8005d94:	4a24      	ldr	r2, [pc, #144]	@ (8005e28 <LL_RCC_GetUARTClockFreq+0x20c>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d004      	beq.n	8005da4 <LL_RCC_GetUARTClockFreq+0x188>
 8005d9a:	e014      	b.n	8005dc6 <LL_RCC_GetUARTClockFreq+0x1aa>
      {
        case LL_RCC_UART8_CLKSOURCE_SYSCLK: /* UART8 Clock is System Clock */
          uart_frequency = RCC_GetSystemClockFreq();
 8005d9c:	f000 f846 	bl	8005e2c <RCC_GetSystemClockFreq>
 8005da0:	60f8      	str	r0, [r7, #12]
          break;
 8005da2:	e02b      	b.n	8005dfc <LL_RCC_GetUARTClockFreq+0x1e0>

        case LL_RCC_UART8_CLKSOURCE_HSI:    /* UART8 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady())
 8005da4:	f7ff fd78 	bl	8005898 <LL_RCC_HSI_IsReady>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d023      	beq.n	8005df6 <LL_RCC_GetUARTClockFreq+0x1da>
          {
            uart_frequency = HSI_VALUE;
 8005dae:	4b18      	ldr	r3, [pc, #96]	@ (8005e10 <LL_RCC_GetUARTClockFreq+0x1f4>)
 8005db0:	60fb      	str	r3, [r7, #12]
          }
          break;
 8005db2:	e020      	b.n	8005df6 <LL_RCC_GetUARTClockFreq+0x1da>

        case LL_RCC_UART8_CLKSOURCE_LSE:    /* UART8 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady())
 8005db4:	f7ff fd82 	bl	80058bc <LL_RCC_LSE_IsReady>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d01d      	beq.n	8005dfa <LL_RCC_GetUARTClockFreq+0x1de>
          {
            uart_frequency = LSE_VALUE;
 8005dbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005dc2:	60fb      	str	r3, [r7, #12]
          }
          break;
 8005dc4:	e019      	b.n	8005dfa <LL_RCC_GetUARTClockFreq+0x1de>

        case LL_RCC_UART8_CLKSOURCE_PCLK1:  /* UART8 Clock is PCLK1 */
        default:
          uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005dc6:	f000 f831 	bl	8005e2c <RCC_GetSystemClockFreq>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f000 f855 	bl	8005e7c <RCC_GetHCLKClockFreq>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f000 f867 	bl	8005ea8 <RCC_GetPCLK1ClockFreq>
 8005dda:	60f8      	str	r0, [r7, #12]
          break;
 8005ddc:	e00e      	b.n	8005dfc <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 8005dde:	bf00      	nop
 8005de0:	e00c      	b.n	8005dfc <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 8005de2:	bf00      	nop
 8005de4:	e00a      	b.n	8005dfc <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 8005de6:	bf00      	nop
 8005de8:	e008      	b.n	8005dfc <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 8005dea:	bf00      	nop
 8005dec:	e006      	b.n	8005dfc <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 8005dee:	bf00      	nop
 8005df0:	e004      	b.n	8005dfc <LL_RCC_GetUARTClockFreq+0x1e0>
        break;
 8005df2:	bf00      	nop
 8005df4:	e002      	b.n	8005dfc <LL_RCC_GetUARTClockFreq+0x1e0>
          break;
 8005df6:	bf00      	nop
 8005df8:	e000      	b.n	8005dfc <LL_RCC_GetUARTClockFreq+0x1e0>
          break;
 8005dfa:	bf00      	nop
      }
    }
  }
  return uart_frequency;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3710      	adds	r7, #16
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	00c00040 	.word	0x00c00040
 8005e0c:	00c00080 	.word	0x00c00080
 8005e10:	00f42400 	.word	0x00f42400
 8005e14:	03000100 	.word	0x03000100
 8005e18:	03000200 	.word	0x03000200
 8005e1c:	30001000 	.word	0x30001000
 8005e20:	30002000 	.word	0x30002000
 8005e24:	c0004000 	.word	0xc0004000
 8005e28:	c0008000 	.word	0xc0008000

08005e2c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b082      	sub	sp, #8
 8005e30:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8005e32:	2300      	movs	r3, #0
 8005e34:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8005e36:	f7ff fd53 	bl	80058e0 <LL_RCC_GetSysClkSource>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b08      	cmp	r3, #8
 8005e3e:	d00c      	beq.n	8005e5a <RCC_GetSystemClockFreq+0x2e>
 8005e40:	2b08      	cmp	r3, #8
 8005e42:	d80e      	bhi.n	8005e62 <RCC_GetSystemClockFreq+0x36>
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d002      	beq.n	8005e4e <RCC_GetSystemClockFreq+0x22>
 8005e48:	2b04      	cmp	r3, #4
 8005e4a:	d003      	beq.n	8005e54 <RCC_GetSystemClockFreq+0x28>
 8005e4c:	e009      	b.n	8005e62 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8005e4e:	4b09      	ldr	r3, [pc, #36]	@ (8005e74 <RCC_GetSystemClockFreq+0x48>)
 8005e50:	607b      	str	r3, [r7, #4]
      break;
 8005e52:	e009      	b.n	8005e68 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8005e54:	4b08      	ldr	r3, [pc, #32]	@ (8005e78 <RCC_GetSystemClockFreq+0x4c>)
 8005e56:	607b      	str	r3, [r7, #4]
      break;
 8005e58:	e006      	b.n	8005e68 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8005e5a:	f000 f84d 	bl	8005ef8 <RCC_PLL_GetFreqDomain_SYS>
 8005e5e:	6078      	str	r0, [r7, #4]
      break;
 8005e60:	e002      	b.n	8005e68 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8005e62:	4b04      	ldr	r3, [pc, #16]	@ (8005e74 <RCC_GetSystemClockFreq+0x48>)
 8005e64:	607b      	str	r3, [r7, #4]
      break;
 8005e66:	bf00      	nop
  }

  return frequency;
 8005e68:	687b      	ldr	r3, [r7, #4]
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3708      	adds	r7, #8
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	00f42400 	.word	0x00f42400
 8005e78:	017d7840 	.word	0x017d7840

08005e7c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8005e84:	f7ff fd3a 	bl	80058fc <LL_RCC_GetAHBPrescaler>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	091b      	lsrs	r3, r3, #4
 8005e8c:	f003 030f 	and.w	r3, r3, #15
 8005e90:	4a04      	ldr	r2, [pc, #16]	@ (8005ea4 <RCC_GetHCLKClockFreq+0x28>)
 8005e92:	5cd3      	ldrb	r3, [r2, r3]
 8005e94:	461a      	mov	r2, r3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	40d3      	lsrs	r3, r2
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3708      	adds	r7, #8
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	080106a0 	.word	0x080106a0

08005ea8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8005eb0:	f7ff fd32 	bl	8005918 <LL_RCC_GetAPB1Prescaler>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	0a9b      	lsrs	r3, r3, #10
 8005eb8:	4a04      	ldr	r2, [pc, #16]	@ (8005ecc <RCC_GetPCLK1ClockFreq+0x24>)
 8005eba:	5cd3      	ldrb	r3, [r2, r3]
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	40d3      	lsrs	r3, r2
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3708      	adds	r7, #8
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	080106b0 	.word	0x080106b0

08005ed0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8005ed8:	f7ff fd2c 	bl	8005934 <LL_RCC_GetAPB2Prescaler>
 8005edc:	4603      	mov	r3, r0
 8005ede:	0b5b      	lsrs	r3, r3, #13
 8005ee0:	4a04      	ldr	r2, [pc, #16]	@ (8005ef4 <RCC_GetPCLK2ClockFreq+0x24>)
 8005ee2:	5cd3      	ldrb	r3, [r2, r3]
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	40d3      	lsrs	r3, r2
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3708      	adds	r7, #8
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	080106b0 	.word	0x080106b0

08005ef8 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8005ef8:	b590      	push	{r4, r7, lr}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8005efe:	2300      	movs	r3, #0
 8005f00:	607b      	str	r3, [r7, #4]
 8005f02:	2300      	movs	r3, #0
 8005f04:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8005f06:	f7ff fd4b 	bl	80059a0 <LL_RCC_PLL_GetMainSource>
 8005f0a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d004      	beq.n	8005f1c <RCC_PLL_GetFreqDomain_SYS+0x24>
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f18:	d003      	beq.n	8005f22 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8005f1a:	e005      	b.n	8005f28 <RCC_PLL_GetFreqDomain_SYS+0x30>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8005f1c:	4b0f      	ldr	r3, [pc, #60]	@ (8005f5c <RCC_PLL_GetFreqDomain_SYS+0x64>)
 8005f1e:	607b      	str	r3, [r7, #4]
      break;
 8005f20:	e005      	b.n	8005f2e <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8005f22:	4b0f      	ldr	r3, [pc, #60]	@ (8005f60 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 8005f24:	607b      	str	r3, [r7, #4]
      break;
 8005f26:	e002      	b.n	8005f2e <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
      pllinputfreq = HSI_VALUE;
 8005f28:	4b0c      	ldr	r3, [pc, #48]	@ (8005f5c <RCC_PLL_GetFreqDomain_SYS+0x64>)
 8005f2a:	607b      	str	r3, [r7, #4]
      break;
 8005f2c:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005f2e:	f7ff fd61 	bl	80059f4 <LL_RCC_PLL_GetDivider>
 8005f32:	4602      	mov	r2, r0
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	fbb3 f4f2 	udiv	r4, r3, r2
 8005f3a:	f7ff fd3f 	bl	80059bc <LL_RCC_PLL_GetN>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	fb03 f404 	mul.w	r4, r3, r4
 8005f44:	f7ff fd48 	bl	80059d8 <LL_RCC_PLL_GetP>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	0c1b      	lsrs	r3, r3, #16
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	005b      	lsls	r3, r3, #1
 8005f50:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd90      	pop	{r4, r7, pc}
 8005f5c:	00f42400 	.word	0x00f42400
 8005f60:	017d7840 	.word	0x017d7840

08005f64 <LL_USART_IsEnabled>:
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 0301 	and.w	r3, r3, #1
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d101      	bne.n	8005f7c <LL_USART_IsEnabled+0x18>
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e000      	b.n	8005f7e <LL_USART_IsEnabled+0x1a>
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	370c      	adds	r7, #12
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr

08005f8a <LL_USART_SetStopBitsLength>:
{
 8005f8a:	b480      	push	{r7}
 8005f8c:	b083      	sub	sp, #12
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
 8005f92:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	431a      	orrs	r2, r3
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	605a      	str	r2, [r3, #4]
}
 8005fa4:	bf00      	nop
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <LL_USART_SetHWFlowCtrl>:
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	431a      	orrs	r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	609a      	str	r2, [r3, #8]
}
 8005fca:	bf00      	nop
 8005fcc:	370c      	adds	r7, #12
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr

08005fd6 <LL_USART_SetBaudRate>:
{
 8005fd6:	b480      	push	{r7}
 8005fd8:	b087      	sub	sp, #28
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	60f8      	str	r0, [r7, #12]
 8005fde:	60b9      	str	r1, [r7, #8]
 8005fe0:	607a      	str	r2, [r7, #4]
 8005fe2:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fea:	d11a      	bne.n	8006022 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	005a      	lsls	r2, r3, #1
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	085b      	lsrs	r3, r3, #1
 8005ff4:	441a      	add	r2, r3
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8006000:	697a      	ldr	r2, [r7, #20]
 8006002:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8006006:	4013      	ands	r3, r2
 8006008:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	085b      	lsrs	r3, r3, #1
 800600e:	b29b      	uxth	r3, r3
 8006010:	f003 0307 	and.w	r3, r3, #7
 8006014:	693a      	ldr	r2, [r7, #16]
 8006016:	4313      	orrs	r3, r2
 8006018:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	693a      	ldr	r2, [r7, #16]
 800601e:	60da      	str	r2, [r3, #12]
}
 8006020:	e00a      	b.n	8006038 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	085a      	lsrs	r2, r3, #1
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	441a      	add	r2, r3
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006030:	b29b      	uxth	r3, r3
 8006032:	461a      	mov	r2, r3
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	60da      	str	r2, [r3, #12]
}
 8006038:	bf00      	nop
 800603a:	371c      	adds	r7, #28
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8006052:	2300      	movs	r3, #0
 8006054:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f7ff ff84 	bl	8005f64 <LL_USART_IsEnabled>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d179      	bne.n	8006156 <LL_USART_Init+0x112>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	4b3e      	ldr	r3, [pc, #248]	@ (8006160 <LL_USART_Init+0x11c>)
 8006068:	4013      	ands	r3, r2
 800606a:	683a      	ldr	r2, [r7, #0]
 800606c:	6851      	ldr	r1, [r2, #4]
 800606e:	683a      	ldr	r2, [r7, #0]
 8006070:	68d2      	ldr	r2, [r2, #12]
 8006072:	4311      	orrs	r1, r2
 8006074:	683a      	ldr	r2, [r7, #0]
 8006076:	6912      	ldr	r2, [r2, #16]
 8006078:	4311      	orrs	r1, r2
 800607a:	683a      	ldr	r2, [r7, #0]
 800607c:	6992      	ldr	r2, [r2, #24]
 800607e:	430a      	orrs	r2, r1
 8006080:	431a      	orrs	r2, r3
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	4619      	mov	r1, r3
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f7ff ff7c 	bl	8005f8a <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	695b      	ldr	r3, [r3, #20]
 8006096:	4619      	mov	r1, r3
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f7ff ff89 	bl	8005fb0 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a30      	ldr	r2, [pc, #192]	@ (8006164 <LL_USART_Init+0x120>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d104      	bne.n	80060b0 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80060a6:	2003      	movs	r0, #3
 80060a8:	f7ff fcb2 	bl	8005a10 <LL_RCC_GetUSARTClockFreq>
 80060ac:	60b8      	str	r0, [r7, #8]
 80060ae:	e041      	b.n	8006134 <LL_USART_Init+0xf0>
    }
    else if (USARTx == USART2)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4a2d      	ldr	r2, [pc, #180]	@ (8006168 <LL_USART_Init+0x124>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d104      	bne.n	80060c2 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 80060b8:	200c      	movs	r0, #12
 80060ba:	f7ff fca9 	bl	8005a10 <LL_RCC_GetUSARTClockFreq>
 80060be:	60b8      	str	r0, [r7, #8]
 80060c0:	e038      	b.n	8006134 <LL_USART_Init+0xf0>
    }
    else if (USARTx == USART3)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a29      	ldr	r2, [pc, #164]	@ (800616c <LL_USART_Init+0x128>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d104      	bne.n	80060d4 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 80060ca:	2030      	movs	r0, #48	@ 0x30
 80060cc:	f7ff fca0 	bl	8005a10 <LL_RCC_GetUSARTClockFreq>
 80060d0:	60b8      	str	r0, [r7, #8]
 80060d2:	e02f      	b.n	8006134 <LL_USART_Init+0xf0>
    }
    else if (USARTx == UART4)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4a26      	ldr	r2, [pc, #152]	@ (8006170 <LL_USART_Init+0x12c>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d104      	bne.n	80060e6 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 80060dc:	20c0      	movs	r0, #192	@ 0xc0
 80060de:	f7ff fd9d 	bl	8005c1c <LL_RCC_GetUARTClockFreq>
 80060e2:	60b8      	str	r0, [r7, #8]
 80060e4:	e026      	b.n	8006134 <LL_USART_Init+0xf0>
    }
    else if (USARTx == UART5)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4a22      	ldr	r2, [pc, #136]	@ (8006174 <LL_USART_Init+0x130>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d105      	bne.n	80060fa <LL_USART_Init+0xb6>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 80060ee:	f44f 7040 	mov.w	r0, #768	@ 0x300
 80060f2:	f7ff fd93 	bl	8005c1c <LL_RCC_GetUARTClockFreq>
 80060f6:	60b8      	str	r0, [r7, #8]
 80060f8:	e01c      	b.n	8006134 <LL_USART_Init+0xf0>
    }
    else if (USARTx == USART6)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a1e      	ldr	r2, [pc, #120]	@ (8006178 <LL_USART_Init+0x134>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d105      	bne.n	800610e <LL_USART_Init+0xca>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART6_CLKSOURCE);
 8006102:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8006106:	f7ff fc83 	bl	8005a10 <LL_RCC_GetUSARTClockFreq>
 800610a:	60b8      	str	r0, [r7, #8]
 800610c:	e012      	b.n	8006134 <LL_USART_Init+0xf0>
    }
    else if (USARTx == UART7)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4a1a      	ldr	r2, [pc, #104]	@ (800617c <LL_USART_Init+0x138>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d105      	bne.n	8006122 <LL_USART_Init+0xde>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART7_CLKSOURCE);
 8006116:	f44f 5040 	mov.w	r0, #12288	@ 0x3000
 800611a:	f7ff fd7f 	bl	8005c1c <LL_RCC_GetUARTClockFreq>
 800611e:	60b8      	str	r0, [r7, #8]
 8006120:	e008      	b.n	8006134 <LL_USART_Init+0xf0>
    }
    else if (USARTx == UART8)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a16      	ldr	r2, [pc, #88]	@ (8006180 <LL_USART_Init+0x13c>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d104      	bne.n	8006134 <LL_USART_Init+0xf0>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART8_CLKSOURCE);
 800612a:	f44f 4040 	mov.w	r0, #49152	@ 0xc000
 800612e:	f7ff fd75 	bl	8005c1c <LL_RCC_GetUARTClockFreq>
 8006132:	60b8      	str	r0, [r7, #8]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d00d      	beq.n	8006156 <LL_USART_Init+0x112>
        && (USART_InitStruct->BaudRate != 0U))
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d009      	beq.n	8006156 <LL_USART_Init+0x112>
    {
      status = SUCCESS;
 8006142:	2300      	movs	r3, #0
 8006144:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800614e:	68b9      	ldr	r1, [r7, #8]
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f7ff ff40 	bl	8005fd6 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8006156:	7bfb      	ldrb	r3, [r7, #15]
}
 8006158:	4618      	mov	r0, r3
 800615a:	3710      	adds	r7, #16
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}
 8006160:	efff69f3 	.word	0xefff69f3
 8006164:	40011000 	.word	0x40011000
 8006168:	40004400 	.word	0x40004400
 800616c:	40004800 	.word	0x40004800
 8006170:	40004c00 	.word	0x40004c00
 8006174:	40005000 	.word	0x40005000
 8006178:	40011400 	.word	0x40011400
 800617c:	40007800 	.word	0x40007800
 8006180:	40007c00 	.word	0x40007c00

08006184 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006184:	b084      	sub	sp, #16
 8006186:	b580      	push	{r7, lr}
 8006188:	b084      	sub	sp, #16
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
 800618e:	f107 001c 	add.w	r0, r7, #28
 8006192:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006196:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800619a:	2b01      	cmp	r3, #1
 800619c:	d121      	bne.n	80061e2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061a2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	68da      	ldr	r2, [r3, #12]
 80061ae:	4b21      	ldr	r3, [pc, #132]	@ (8006234 <USB_CoreInit+0xb0>)
 80061b0:	4013      	ands	r3, r2
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80061c2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d105      	bne.n	80061d6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f001 fae2 	bl	80077a0 <USB_CoreReset>
 80061dc:	4603      	mov	r3, r0
 80061de:	73fb      	strb	r3, [r7, #15]
 80061e0:	e010      	b.n	8006204 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f001 fad6 	bl	80077a0 <USB_CoreReset>
 80061f4:	4603      	mov	r3, r0
 80061f6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061fc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8006204:	7fbb      	ldrb	r3, [r7, #30]
 8006206:	2b01      	cmp	r3, #1
 8006208:	d10b      	bne.n	8006222 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	f043 0206 	orr.w	r2, r3, #6
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	f043 0220 	orr.w	r2, r3, #32
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006222:	7bfb      	ldrb	r3, [r7, #15]
}
 8006224:	4618      	mov	r0, r3
 8006226:	3710      	adds	r7, #16
 8006228:	46bd      	mov	sp, r7
 800622a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800622e:	b004      	add	sp, #16
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	ffbdffbf 	.word	0xffbdffbf

08006238 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006238:	b480      	push	{r7}
 800623a:	b087      	sub	sp, #28
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	4613      	mov	r3, r2
 8006244:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006246:	79fb      	ldrb	r3, [r7, #7]
 8006248:	2b02      	cmp	r3, #2
 800624a:	d165      	bne.n	8006318 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	4a41      	ldr	r2, [pc, #260]	@ (8006354 <USB_SetTurnaroundTime+0x11c>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d906      	bls.n	8006262 <USB_SetTurnaroundTime+0x2a>
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	4a40      	ldr	r2, [pc, #256]	@ (8006358 <USB_SetTurnaroundTime+0x120>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d202      	bcs.n	8006262 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800625c:	230f      	movs	r3, #15
 800625e:	617b      	str	r3, [r7, #20]
 8006260:	e062      	b.n	8006328 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	4a3c      	ldr	r2, [pc, #240]	@ (8006358 <USB_SetTurnaroundTime+0x120>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d306      	bcc.n	8006278 <USB_SetTurnaroundTime+0x40>
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	4a3b      	ldr	r2, [pc, #236]	@ (800635c <USB_SetTurnaroundTime+0x124>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d202      	bcs.n	8006278 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006272:	230e      	movs	r3, #14
 8006274:	617b      	str	r3, [r7, #20]
 8006276:	e057      	b.n	8006328 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	4a38      	ldr	r2, [pc, #224]	@ (800635c <USB_SetTurnaroundTime+0x124>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d306      	bcc.n	800628e <USB_SetTurnaroundTime+0x56>
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	4a37      	ldr	r2, [pc, #220]	@ (8006360 <USB_SetTurnaroundTime+0x128>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d202      	bcs.n	800628e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006288:	230d      	movs	r3, #13
 800628a:	617b      	str	r3, [r7, #20]
 800628c:	e04c      	b.n	8006328 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	4a33      	ldr	r2, [pc, #204]	@ (8006360 <USB_SetTurnaroundTime+0x128>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d306      	bcc.n	80062a4 <USB_SetTurnaroundTime+0x6c>
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	4a32      	ldr	r2, [pc, #200]	@ (8006364 <USB_SetTurnaroundTime+0x12c>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d802      	bhi.n	80062a4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800629e:	230c      	movs	r3, #12
 80062a0:	617b      	str	r3, [r7, #20]
 80062a2:	e041      	b.n	8006328 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	4a2f      	ldr	r2, [pc, #188]	@ (8006364 <USB_SetTurnaroundTime+0x12c>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d906      	bls.n	80062ba <USB_SetTurnaroundTime+0x82>
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	4a2e      	ldr	r2, [pc, #184]	@ (8006368 <USB_SetTurnaroundTime+0x130>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d802      	bhi.n	80062ba <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80062b4:	230b      	movs	r3, #11
 80062b6:	617b      	str	r3, [r7, #20]
 80062b8:	e036      	b.n	8006328 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	4a2a      	ldr	r2, [pc, #168]	@ (8006368 <USB_SetTurnaroundTime+0x130>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d906      	bls.n	80062d0 <USB_SetTurnaroundTime+0x98>
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	4a29      	ldr	r2, [pc, #164]	@ (800636c <USB_SetTurnaroundTime+0x134>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d802      	bhi.n	80062d0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80062ca:	230a      	movs	r3, #10
 80062cc:	617b      	str	r3, [r7, #20]
 80062ce:	e02b      	b.n	8006328 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	4a26      	ldr	r2, [pc, #152]	@ (800636c <USB_SetTurnaroundTime+0x134>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d906      	bls.n	80062e6 <USB_SetTurnaroundTime+0xae>
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	4a25      	ldr	r2, [pc, #148]	@ (8006370 <USB_SetTurnaroundTime+0x138>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d202      	bcs.n	80062e6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80062e0:	2309      	movs	r3, #9
 80062e2:	617b      	str	r3, [r7, #20]
 80062e4:	e020      	b.n	8006328 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	4a21      	ldr	r2, [pc, #132]	@ (8006370 <USB_SetTurnaroundTime+0x138>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d306      	bcc.n	80062fc <USB_SetTurnaroundTime+0xc4>
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	4a20      	ldr	r2, [pc, #128]	@ (8006374 <USB_SetTurnaroundTime+0x13c>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d802      	bhi.n	80062fc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80062f6:	2308      	movs	r3, #8
 80062f8:	617b      	str	r3, [r7, #20]
 80062fa:	e015      	b.n	8006328 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	4a1d      	ldr	r2, [pc, #116]	@ (8006374 <USB_SetTurnaroundTime+0x13c>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d906      	bls.n	8006312 <USB_SetTurnaroundTime+0xda>
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	4a1c      	ldr	r2, [pc, #112]	@ (8006378 <USB_SetTurnaroundTime+0x140>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d202      	bcs.n	8006312 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800630c:	2307      	movs	r3, #7
 800630e:	617b      	str	r3, [r7, #20]
 8006310:	e00a      	b.n	8006328 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006312:	2306      	movs	r3, #6
 8006314:	617b      	str	r3, [r7, #20]
 8006316:	e007      	b.n	8006328 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006318:	79fb      	ldrb	r3, [r7, #7]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d102      	bne.n	8006324 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800631e:	2309      	movs	r3, #9
 8006320:	617b      	str	r3, [r7, #20]
 8006322:	e001      	b.n	8006328 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006324:	2309      	movs	r3, #9
 8006326:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	68da      	ldr	r2, [r3, #12]
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	029b      	lsls	r3, r3, #10
 800633c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006340:	431a      	orrs	r2, r3
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006346:	2300      	movs	r3, #0
}
 8006348:	4618      	mov	r0, r3
 800634a:	371c      	adds	r7, #28
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr
 8006354:	00d8acbf 	.word	0x00d8acbf
 8006358:	00e4e1c0 	.word	0x00e4e1c0
 800635c:	00f42400 	.word	0x00f42400
 8006360:	01067380 	.word	0x01067380
 8006364:	011a499f 	.word	0x011a499f
 8006368:	01312cff 	.word	0x01312cff
 800636c:	014ca43f 	.word	0x014ca43f
 8006370:	016e3600 	.word	0x016e3600
 8006374:	01a6ab1f 	.word	0x01a6ab1f
 8006378:	01e84800 	.word	0x01e84800

0800637c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	f043 0201 	orr.w	r2, r3, #1
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	370c      	adds	r7, #12
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr

0800639e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800639e:	b480      	push	{r7}
 80063a0:	b083      	sub	sp, #12
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	f023 0201 	bic.w	r2, r3, #1
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80063b2:	2300      	movs	r3, #0
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	370c      	adds	r7, #12
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	460b      	mov	r3, r1
 80063ca:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80063cc:	2300      	movs	r3, #0
 80063ce:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80063dc:	78fb      	ldrb	r3, [r7, #3]
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d115      	bne.n	800640e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80063ee:	200a      	movs	r0, #10
 80063f0:	f7fb fcb2 	bl	8001d58 <HAL_Delay>
      ms += 10U;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	330a      	adds	r3, #10
 80063f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f001 f93f 	bl	800767e <USB_GetMode>
 8006400:	4603      	mov	r3, r0
 8006402:	2b01      	cmp	r3, #1
 8006404:	d01e      	beq.n	8006444 <USB_SetCurrentMode+0x84>
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2bc7      	cmp	r3, #199	@ 0xc7
 800640a:	d9f0      	bls.n	80063ee <USB_SetCurrentMode+0x2e>
 800640c:	e01a      	b.n	8006444 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800640e:	78fb      	ldrb	r3, [r7, #3]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d115      	bne.n	8006440 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006420:	200a      	movs	r0, #10
 8006422:	f7fb fc99 	bl	8001d58 <HAL_Delay>
      ms += 10U;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	330a      	adds	r3, #10
 800642a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f001 f926 	bl	800767e <USB_GetMode>
 8006432:	4603      	mov	r3, r0
 8006434:	2b00      	cmp	r3, #0
 8006436:	d005      	beq.n	8006444 <USB_SetCurrentMode+0x84>
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2bc7      	cmp	r3, #199	@ 0xc7
 800643c:	d9f0      	bls.n	8006420 <USB_SetCurrentMode+0x60>
 800643e:	e001      	b.n	8006444 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	e005      	b.n	8006450 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2bc8      	cmp	r3, #200	@ 0xc8
 8006448:	d101      	bne.n	800644e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e000      	b.n	8006450 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800644e:	2300      	movs	r3, #0
}
 8006450:	4618      	mov	r0, r3
 8006452:	3710      	adds	r7, #16
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006458:	b084      	sub	sp, #16
 800645a:	b580      	push	{r7, lr}
 800645c:	b086      	sub	sp, #24
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
 8006462:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006466:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800646a:	2300      	movs	r3, #0
 800646c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006472:	2300      	movs	r3, #0
 8006474:	613b      	str	r3, [r7, #16]
 8006476:	e009      	b.n	800648c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	3340      	adds	r3, #64	@ 0x40
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	4413      	add	r3, r2
 8006482:	2200      	movs	r2, #0
 8006484:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	3301      	adds	r3, #1
 800648a:	613b      	str	r3, [r7, #16]
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	2b0e      	cmp	r3, #14
 8006490:	d9f2      	bls.n	8006478 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006492:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006496:	2b00      	cmp	r3, #0
 8006498:	d11c      	bne.n	80064d4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80064a8:	f043 0302 	orr.w	r3, r3, #2
 80064ac:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064b2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	601a      	str	r2, [r3, #0]
 80064d2:	e005      	b.n	80064e0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064d8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80064e6:	461a      	mov	r2, r3
 80064e8:	2300      	movs	r3, #0
 80064ea:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80064ec:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d10d      	bne.n	8006510 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80064f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d104      	bne.n	8006506 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80064fc:	2100      	movs	r1, #0
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 f968 	bl	80067d4 <USB_SetDevSpeed>
 8006504:	e008      	b.n	8006518 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006506:	2101      	movs	r1, #1
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 f963 	bl	80067d4 <USB_SetDevSpeed>
 800650e:	e003      	b.n	8006518 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006510:	2103      	movs	r1, #3
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 f95e 	bl	80067d4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006518:	2110      	movs	r1, #16
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 f8fa 	bl	8006714 <USB_FlushTxFifo>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d001      	beq.n	800652a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 f924 	bl	8006778 <USB_FlushRxFifo>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	d001      	beq.n	800653a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006540:	461a      	mov	r2, r3
 8006542:	2300      	movs	r3, #0
 8006544:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800654c:	461a      	mov	r2, r3
 800654e:	2300      	movs	r3, #0
 8006550:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006558:	461a      	mov	r2, r3
 800655a:	2300      	movs	r3, #0
 800655c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800655e:	2300      	movs	r3, #0
 8006560:	613b      	str	r3, [r7, #16]
 8006562:	e043      	b.n	80065ec <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	015a      	lsls	r2, r3, #5
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	4413      	add	r3, r2
 800656c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006576:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800657a:	d118      	bne.n	80065ae <USB_DevInit+0x156>
    {
      if (i == 0U)
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d10a      	bne.n	8006598 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	015a      	lsls	r2, r3, #5
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	4413      	add	r3, r2
 800658a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800658e:	461a      	mov	r2, r3
 8006590:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006594:	6013      	str	r3, [r2, #0]
 8006596:	e013      	b.n	80065c0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	015a      	lsls	r2, r3, #5
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	4413      	add	r3, r2
 80065a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065a4:	461a      	mov	r2, r3
 80065a6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80065aa:	6013      	str	r3, [r2, #0]
 80065ac:	e008      	b.n	80065c0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	015a      	lsls	r2, r3, #5
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	4413      	add	r3, r2
 80065b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065ba:	461a      	mov	r2, r3
 80065bc:	2300      	movs	r3, #0
 80065be:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	015a      	lsls	r2, r3, #5
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	4413      	add	r3, r2
 80065c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065cc:	461a      	mov	r2, r3
 80065ce:	2300      	movs	r3, #0
 80065d0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	015a      	lsls	r2, r3, #5
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	4413      	add	r3, r2
 80065da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065de:	461a      	mov	r2, r3
 80065e0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80065e4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	3301      	adds	r3, #1
 80065ea:	613b      	str	r3, [r7, #16]
 80065ec:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80065f0:	461a      	mov	r2, r3
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d3b5      	bcc.n	8006564 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065f8:	2300      	movs	r3, #0
 80065fa:	613b      	str	r3, [r7, #16]
 80065fc:	e043      	b.n	8006686 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	015a      	lsls	r2, r3, #5
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	4413      	add	r3, r2
 8006606:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006610:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006614:	d118      	bne.n	8006648 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d10a      	bne.n	8006632 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	015a      	lsls	r2, r3, #5
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	4413      	add	r3, r2
 8006624:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006628:	461a      	mov	r2, r3
 800662a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800662e:	6013      	str	r3, [r2, #0]
 8006630:	e013      	b.n	800665a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	015a      	lsls	r2, r3, #5
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	4413      	add	r3, r2
 800663a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800663e:	461a      	mov	r2, r3
 8006640:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006644:	6013      	str	r3, [r2, #0]
 8006646:	e008      	b.n	800665a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	015a      	lsls	r2, r3, #5
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	4413      	add	r3, r2
 8006650:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006654:	461a      	mov	r2, r3
 8006656:	2300      	movs	r3, #0
 8006658:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	015a      	lsls	r2, r3, #5
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	4413      	add	r3, r2
 8006662:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006666:	461a      	mov	r2, r3
 8006668:	2300      	movs	r3, #0
 800666a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	015a      	lsls	r2, r3, #5
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	4413      	add	r3, r2
 8006674:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006678:	461a      	mov	r2, r3
 800667a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800667e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	3301      	adds	r3, #1
 8006684:	613b      	str	r3, [r7, #16]
 8006686:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800668a:	461a      	mov	r2, r3
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	4293      	cmp	r3, r2
 8006690:	d3b5      	bcc.n	80065fe <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006698:	691b      	ldr	r3, [r3, #16]
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80066a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80066a4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80066b2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80066b4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d105      	bne.n	80066c8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	699b      	ldr	r3, [r3, #24]
 80066c0:	f043 0210 	orr.w	r2, r3, #16
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	699a      	ldr	r2, [r3, #24]
 80066cc:	4b0f      	ldr	r3, [pc, #60]	@ (800670c <USB_DevInit+0x2b4>)
 80066ce:	4313      	orrs	r3, r2
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80066d4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d005      	beq.n	80066e8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	699b      	ldr	r3, [r3, #24]
 80066e0:	f043 0208 	orr.w	r2, r3, #8
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80066e8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	d105      	bne.n	80066fc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	699a      	ldr	r2, [r3, #24]
 80066f4:	4b06      	ldr	r3, [pc, #24]	@ (8006710 <USB_DevInit+0x2b8>)
 80066f6:	4313      	orrs	r3, r2
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80066fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3718      	adds	r7, #24
 8006702:	46bd      	mov	sp, r7
 8006704:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006708:	b004      	add	sp, #16
 800670a:	4770      	bx	lr
 800670c:	803c3800 	.word	0x803c3800
 8006710:	40000004 	.word	0x40000004

08006714 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006714:	b480      	push	{r7}
 8006716:	b085      	sub	sp, #20
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800671e:	2300      	movs	r3, #0
 8006720:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	3301      	adds	r3, #1
 8006726:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800672e:	d901      	bls.n	8006734 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006730:	2303      	movs	r3, #3
 8006732:	e01b      	b.n	800676c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	691b      	ldr	r3, [r3, #16]
 8006738:	2b00      	cmp	r3, #0
 800673a:	daf2      	bge.n	8006722 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800673c:	2300      	movs	r3, #0
 800673e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	019b      	lsls	r3, r3, #6
 8006744:	f043 0220 	orr.w	r2, r3, #32
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	3301      	adds	r3, #1
 8006750:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006758:	d901      	bls.n	800675e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800675a:	2303      	movs	r3, #3
 800675c:	e006      	b.n	800676c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	f003 0320 	and.w	r3, r3, #32
 8006766:	2b20      	cmp	r3, #32
 8006768:	d0f0      	beq.n	800674c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3714      	adds	r7, #20
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006780:	2300      	movs	r3, #0
 8006782:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	3301      	adds	r3, #1
 8006788:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006790:	d901      	bls.n	8006796 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006792:	2303      	movs	r3, #3
 8006794:	e018      	b.n	80067c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	691b      	ldr	r3, [r3, #16]
 800679a:	2b00      	cmp	r3, #0
 800679c:	daf2      	bge.n	8006784 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800679e:	2300      	movs	r3, #0
 80067a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2210      	movs	r2, #16
 80067a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	3301      	adds	r3, #1
 80067ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80067b4:	d901      	bls.n	80067ba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80067b6:	2303      	movs	r3, #3
 80067b8:	e006      	b.n	80067c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	691b      	ldr	r3, [r3, #16]
 80067be:	f003 0310 	and.w	r3, r3, #16
 80067c2:	2b10      	cmp	r3, #16
 80067c4:	d0f0      	beq.n	80067a8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80067c6:	2300      	movs	r3, #0
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3714      	adds	r7, #20
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b085      	sub	sp, #20
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	460b      	mov	r3, r1
 80067de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	78fb      	ldrb	r3, [r7, #3]
 80067ee:	68f9      	ldr	r1, [r7, #12]
 80067f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80067f4:	4313      	orrs	r3, r2
 80067f6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3714      	adds	r7, #20
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr

08006806 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006806:	b480      	push	{r7}
 8006808:	b087      	sub	sp, #28
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	f003 0306 	and.w	r3, r3, #6
 800681e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d102      	bne.n	800682c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006826:	2300      	movs	r3, #0
 8006828:	75fb      	strb	r3, [r7, #23]
 800682a:	e00a      	b.n	8006842 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2b02      	cmp	r3, #2
 8006830:	d002      	beq.n	8006838 <USB_GetDevSpeed+0x32>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2b06      	cmp	r3, #6
 8006836:	d102      	bne.n	800683e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006838:	2302      	movs	r3, #2
 800683a:	75fb      	strb	r3, [r7, #23]
 800683c:	e001      	b.n	8006842 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800683e:	230f      	movs	r3, #15
 8006840:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006842:	7dfb      	ldrb	r3, [r7, #23]
}
 8006844:	4618      	mov	r0, r3
 8006846:	371c      	adds	r7, #28
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006850:	b480      	push	{r7}
 8006852:	b085      	sub	sp, #20
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	785b      	ldrb	r3, [r3, #1]
 8006868:	2b01      	cmp	r3, #1
 800686a:	d139      	bne.n	80068e0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006872:	69da      	ldr	r2, [r3, #28]
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	f003 030f 	and.w	r3, r3, #15
 800687c:	2101      	movs	r1, #1
 800687e:	fa01 f303 	lsl.w	r3, r1, r3
 8006882:	b29b      	uxth	r3, r3
 8006884:	68f9      	ldr	r1, [r7, #12]
 8006886:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800688a:	4313      	orrs	r3, r2
 800688c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	015a      	lsls	r2, r3, #5
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	4413      	add	r3, r2
 8006896:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d153      	bne.n	800694c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	015a      	lsls	r2, r3, #5
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	4413      	add	r3, r2
 80068ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	791b      	ldrb	r3, [r3, #4]
 80068be:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80068c0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	059b      	lsls	r3, r3, #22
 80068c6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80068c8:	431a      	orrs	r2, r3
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	0159      	lsls	r1, r3, #5
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	440b      	add	r3, r1
 80068d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068d6:	4619      	mov	r1, r3
 80068d8:	4b20      	ldr	r3, [pc, #128]	@ (800695c <USB_ActivateEndpoint+0x10c>)
 80068da:	4313      	orrs	r3, r2
 80068dc:	600b      	str	r3, [r1, #0]
 80068de:	e035      	b.n	800694c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068e6:	69da      	ldr	r2, [r3, #28]
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	f003 030f 	and.w	r3, r3, #15
 80068f0:	2101      	movs	r1, #1
 80068f2:	fa01 f303 	lsl.w	r3, r1, r3
 80068f6:	041b      	lsls	r3, r3, #16
 80068f8:	68f9      	ldr	r1, [r7, #12]
 80068fa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80068fe:	4313      	orrs	r3, r2
 8006900:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	015a      	lsls	r2, r3, #5
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	4413      	add	r3, r2
 800690a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006914:	2b00      	cmp	r3, #0
 8006916:	d119      	bne.n	800694c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	015a      	lsls	r2, r3, #5
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	4413      	add	r3, r2
 8006920:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	791b      	ldrb	r3, [r3, #4]
 8006932:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006934:	430b      	orrs	r3, r1
 8006936:	431a      	orrs	r2, r3
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	0159      	lsls	r1, r3, #5
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	440b      	add	r3, r1
 8006940:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006944:	4619      	mov	r1, r3
 8006946:	4b05      	ldr	r3, [pc, #20]	@ (800695c <USB_ActivateEndpoint+0x10c>)
 8006948:	4313      	orrs	r3, r2
 800694a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800694c:	2300      	movs	r3, #0
}
 800694e:	4618      	mov	r0, r3
 8006950:	3714      	adds	r7, #20
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr
 800695a:	bf00      	nop
 800695c:	10008000 	.word	0x10008000

08006960 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006960:	b480      	push	{r7}
 8006962:	b085      	sub	sp, #20
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	785b      	ldrb	r3, [r3, #1]
 8006978:	2b01      	cmp	r3, #1
 800697a:	d161      	bne.n	8006a40 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	015a      	lsls	r2, r3, #5
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	4413      	add	r3, r2
 8006984:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800698e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006992:	d11f      	bne.n	80069d4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	015a      	lsls	r2, r3, #5
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	4413      	add	r3, r2
 800699c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68ba      	ldr	r2, [r7, #8]
 80069a4:	0151      	lsls	r1, r2, #5
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	440a      	add	r2, r1
 80069aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069ae:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80069b2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	015a      	lsls	r2, r3, #5
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	4413      	add	r3, r2
 80069bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	68ba      	ldr	r2, [r7, #8]
 80069c4:	0151      	lsls	r1, r2, #5
 80069c6:	68fa      	ldr	r2, [r7, #12]
 80069c8:	440a      	add	r2, r1
 80069ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069ce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80069d2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	f003 030f 	and.w	r3, r3, #15
 80069e4:	2101      	movs	r1, #1
 80069e6:	fa01 f303 	lsl.w	r3, r1, r3
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	43db      	mvns	r3, r3
 80069ee:	68f9      	ldr	r1, [r7, #12]
 80069f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80069f4:	4013      	ands	r3, r2
 80069f6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069fe:	69da      	ldr	r2, [r3, #28]
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	f003 030f 	and.w	r3, r3, #15
 8006a08:	2101      	movs	r1, #1
 8006a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	43db      	mvns	r3, r3
 8006a12:	68f9      	ldr	r1, [r7, #12]
 8006a14:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a18:	4013      	ands	r3, r2
 8006a1a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	015a      	lsls	r2, r3, #5
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	4413      	add	r3, r2
 8006a24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	0159      	lsls	r1, r3, #5
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	440b      	add	r3, r1
 8006a32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a36:	4619      	mov	r1, r3
 8006a38:	4b35      	ldr	r3, [pc, #212]	@ (8006b10 <USB_DeactivateEndpoint+0x1b0>)
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	600b      	str	r3, [r1, #0]
 8006a3e:	e060      	b.n	8006b02 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	015a      	lsls	r2, r3, #5
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	4413      	add	r3, r2
 8006a48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a52:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a56:	d11f      	bne.n	8006a98 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	015a      	lsls	r2, r3, #5
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	4413      	add	r3, r2
 8006a60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	68ba      	ldr	r2, [r7, #8]
 8006a68:	0151      	lsls	r1, r2, #5
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	440a      	add	r2, r1
 8006a6e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a72:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006a76:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	015a      	lsls	r2, r3, #5
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	4413      	add	r3, r2
 8006a80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	68ba      	ldr	r2, [r7, #8]
 8006a88:	0151      	lsls	r1, r2, #5
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	440a      	add	r2, r1
 8006a8e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a92:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006a96:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	f003 030f 	and.w	r3, r3, #15
 8006aa8:	2101      	movs	r1, #1
 8006aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8006aae:	041b      	lsls	r3, r3, #16
 8006ab0:	43db      	mvns	r3, r3
 8006ab2:	68f9      	ldr	r1, [r7, #12]
 8006ab4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006ab8:	4013      	ands	r3, r2
 8006aba:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ac2:	69da      	ldr	r2, [r3, #28]
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	f003 030f 	and.w	r3, r3, #15
 8006acc:	2101      	movs	r1, #1
 8006ace:	fa01 f303 	lsl.w	r3, r1, r3
 8006ad2:	041b      	lsls	r3, r3, #16
 8006ad4:	43db      	mvns	r3, r3
 8006ad6:	68f9      	ldr	r1, [r7, #12]
 8006ad8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006adc:	4013      	ands	r3, r2
 8006ade:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	015a      	lsls	r2, r3, #5
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	4413      	add	r3, r2
 8006ae8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	0159      	lsls	r1, r3, #5
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	440b      	add	r3, r1
 8006af6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006afa:	4619      	mov	r1, r3
 8006afc:	4b05      	ldr	r3, [pc, #20]	@ (8006b14 <USB_DeactivateEndpoint+0x1b4>)
 8006afe:	4013      	ands	r3, r2
 8006b00:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006b02:	2300      	movs	r3, #0
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3714      	adds	r7, #20
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr
 8006b10:	ec337800 	.word	0xec337800
 8006b14:	eff37800 	.word	0xeff37800

08006b18 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b08a      	sub	sp, #40	@ 0x28
 8006b1c:	af02      	add	r7, sp, #8
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	60b9      	str	r1, [r7, #8]
 8006b22:	4613      	mov	r3, r2
 8006b24:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	785b      	ldrb	r3, [r3, #1]
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	f040 8185 	bne.w	8006e44 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	691b      	ldr	r3, [r3, #16]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d132      	bne.n	8006ba8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	015a      	lsls	r2, r3, #5
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	4413      	add	r3, r2
 8006b4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b4e:	691a      	ldr	r2, [r3, #16]
 8006b50:	69bb      	ldr	r3, [r7, #24]
 8006b52:	0159      	lsls	r1, r3, #5
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	440b      	add	r3, r1
 8006b58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	4ba7      	ldr	r3, [pc, #668]	@ (8006dfc <USB_EPStartXfer+0x2e4>)
 8006b60:	4013      	ands	r3, r2
 8006b62:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b64:	69bb      	ldr	r3, [r7, #24]
 8006b66:	015a      	lsls	r2, r3, #5
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b70:	691b      	ldr	r3, [r3, #16]
 8006b72:	69ba      	ldr	r2, [r7, #24]
 8006b74:	0151      	lsls	r1, r2, #5
 8006b76:	69fa      	ldr	r2, [r7, #28]
 8006b78:	440a      	add	r2, r1
 8006b7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b7e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006b82:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	015a      	lsls	r2, r3, #5
 8006b88:	69fb      	ldr	r3, [r7, #28]
 8006b8a:	4413      	add	r3, r2
 8006b8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b90:	691a      	ldr	r2, [r3, #16]
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	0159      	lsls	r1, r3, #5
 8006b96:	69fb      	ldr	r3, [r7, #28]
 8006b98:	440b      	add	r3, r1
 8006b9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	4b97      	ldr	r3, [pc, #604]	@ (8006e00 <USB_EPStartXfer+0x2e8>)
 8006ba2:	4013      	ands	r3, r2
 8006ba4:	610b      	str	r3, [r1, #16]
 8006ba6:	e097      	b.n	8006cd8 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	015a      	lsls	r2, r3, #5
 8006bac:	69fb      	ldr	r3, [r7, #28]
 8006bae:	4413      	add	r3, r2
 8006bb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bb4:	691a      	ldr	r2, [r3, #16]
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	0159      	lsls	r1, r3, #5
 8006bba:	69fb      	ldr	r3, [r7, #28]
 8006bbc:	440b      	add	r3, r1
 8006bbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	4b8e      	ldr	r3, [pc, #568]	@ (8006e00 <USB_EPStartXfer+0x2e8>)
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006bca:	69bb      	ldr	r3, [r7, #24]
 8006bcc:	015a      	lsls	r2, r3, #5
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bd6:	691a      	ldr	r2, [r3, #16]
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	0159      	lsls	r1, r3, #5
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	440b      	add	r3, r1
 8006be0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006be4:	4619      	mov	r1, r3
 8006be6:	4b85      	ldr	r3, [pc, #532]	@ (8006dfc <USB_EPStartXfer+0x2e4>)
 8006be8:	4013      	ands	r3, r2
 8006bea:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8006bec:	69bb      	ldr	r3, [r7, #24]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d11a      	bne.n	8006c28 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	691a      	ldr	r2, [r3, #16]
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d903      	bls.n	8006c06 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	689a      	ldr	r2, [r3, #8]
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	015a      	lsls	r2, r3, #5
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	4413      	add	r3, r2
 8006c0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c12:	691b      	ldr	r3, [r3, #16]
 8006c14:	69ba      	ldr	r2, [r7, #24]
 8006c16:	0151      	lsls	r1, r2, #5
 8006c18:	69fa      	ldr	r2, [r7, #28]
 8006c1a:	440a      	add	r2, r1
 8006c1c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c20:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006c24:	6113      	str	r3, [r2, #16]
 8006c26:	e044      	b.n	8006cb2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	691a      	ldr	r2, [r3, #16]
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	4413      	add	r3, r2
 8006c32:	1e5a      	subs	r2, r3, #1
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c3c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	015a      	lsls	r2, r3, #5
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	4413      	add	r3, r2
 8006c46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c4a:	691a      	ldr	r2, [r3, #16]
 8006c4c:	8afb      	ldrh	r3, [r7, #22]
 8006c4e:	04d9      	lsls	r1, r3, #19
 8006c50:	4b6c      	ldr	r3, [pc, #432]	@ (8006e04 <USB_EPStartXfer+0x2ec>)
 8006c52:	400b      	ands	r3, r1
 8006c54:	69b9      	ldr	r1, [r7, #24]
 8006c56:	0148      	lsls	r0, r1, #5
 8006c58:	69f9      	ldr	r1, [r7, #28]
 8006c5a:	4401      	add	r1, r0
 8006c5c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006c60:	4313      	orrs	r3, r2
 8006c62:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	791b      	ldrb	r3, [r3, #4]
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d122      	bne.n	8006cb2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	015a      	lsls	r2, r3, #5
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	4413      	add	r3, r2
 8006c74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	69ba      	ldr	r2, [r7, #24]
 8006c7c:	0151      	lsls	r1, r2, #5
 8006c7e:	69fa      	ldr	r2, [r7, #28]
 8006c80:	440a      	add	r2, r1
 8006c82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c86:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006c8a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	015a      	lsls	r2, r3, #5
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	4413      	add	r3, r2
 8006c94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c98:	691a      	ldr	r2, [r3, #16]
 8006c9a:	8afb      	ldrh	r3, [r7, #22]
 8006c9c:	075b      	lsls	r3, r3, #29
 8006c9e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006ca2:	69b9      	ldr	r1, [r7, #24]
 8006ca4:	0148      	lsls	r0, r1, #5
 8006ca6:	69f9      	ldr	r1, [r7, #28]
 8006ca8:	4401      	add	r1, r0
 8006caa:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006cb2:	69bb      	ldr	r3, [r7, #24]
 8006cb4:	015a      	lsls	r2, r3, #5
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	4413      	add	r3, r2
 8006cba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cbe:	691a      	ldr	r2, [r3, #16]
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	691b      	ldr	r3, [r3, #16]
 8006cc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cc8:	69b9      	ldr	r1, [r7, #24]
 8006cca:	0148      	lsls	r0, r1, #5
 8006ccc:	69f9      	ldr	r1, [r7, #28]
 8006cce:	4401      	add	r1, r0
 8006cd0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006cd8:	79fb      	ldrb	r3, [r7, #7]
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d14b      	bne.n	8006d76 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	69db      	ldr	r3, [r3, #28]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d009      	beq.n	8006cfa <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006ce6:	69bb      	ldr	r3, [r7, #24]
 8006ce8:	015a      	lsls	r2, r3, #5
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	4413      	add	r3, r2
 8006cee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	69db      	ldr	r3, [r3, #28]
 8006cf8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	791b      	ldrb	r3, [r3, #4]
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d128      	bne.n	8006d54 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006d02:	69fb      	ldr	r3, [r7, #28]
 8006d04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d110      	bne.n	8006d34 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	015a      	lsls	r2, r3, #5
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	4413      	add	r3, r2
 8006d1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	69ba      	ldr	r2, [r7, #24]
 8006d22:	0151      	lsls	r1, r2, #5
 8006d24:	69fa      	ldr	r2, [r7, #28]
 8006d26:	440a      	add	r2, r1
 8006d28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d2c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006d30:	6013      	str	r3, [r2, #0]
 8006d32:	e00f      	b.n	8006d54 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	015a      	lsls	r2, r3, #5
 8006d38:	69fb      	ldr	r3, [r7, #28]
 8006d3a:	4413      	add	r3, r2
 8006d3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	69ba      	ldr	r2, [r7, #24]
 8006d44:	0151      	lsls	r1, r2, #5
 8006d46:	69fa      	ldr	r2, [r7, #28]
 8006d48:	440a      	add	r2, r1
 8006d4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d52:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006d54:	69bb      	ldr	r3, [r7, #24]
 8006d56:	015a      	lsls	r2, r3, #5
 8006d58:	69fb      	ldr	r3, [r7, #28]
 8006d5a:	4413      	add	r3, r2
 8006d5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	69ba      	ldr	r2, [r7, #24]
 8006d64:	0151      	lsls	r1, r2, #5
 8006d66:	69fa      	ldr	r2, [r7, #28]
 8006d68:	440a      	add	r2, r1
 8006d6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d6e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006d72:	6013      	str	r3, [r2, #0]
 8006d74:	e169      	b.n	800704a <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006d76:	69bb      	ldr	r3, [r7, #24]
 8006d78:	015a      	lsls	r2, r3, #5
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	69ba      	ldr	r2, [r7, #24]
 8006d86:	0151      	lsls	r1, r2, #5
 8006d88:	69fa      	ldr	r2, [r7, #28]
 8006d8a:	440a      	add	r2, r1
 8006d8c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d90:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006d94:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	791b      	ldrb	r3, [r3, #4]
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d015      	beq.n	8006dca <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	691b      	ldr	r3, [r3, #16]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	f000 8151 	beq.w	800704a <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	f003 030f 	and.w	r3, r3, #15
 8006db8:	2101      	movs	r1, #1
 8006dba:	fa01 f303 	lsl.w	r3, r1, r3
 8006dbe:	69f9      	ldr	r1, [r7, #28]
 8006dc0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	634b      	str	r3, [r1, #52]	@ 0x34
 8006dc8:	e13f      	b.n	800704a <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d116      	bne.n	8006e08 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006dda:	69bb      	ldr	r3, [r7, #24]
 8006ddc:	015a      	lsls	r2, r3, #5
 8006dde:	69fb      	ldr	r3, [r7, #28]
 8006de0:	4413      	add	r3, r2
 8006de2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	69ba      	ldr	r2, [r7, #24]
 8006dea:	0151      	lsls	r1, r2, #5
 8006dec:	69fa      	ldr	r2, [r7, #28]
 8006dee:	440a      	add	r2, r1
 8006df0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006df4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006df8:	6013      	str	r3, [r2, #0]
 8006dfa:	e015      	b.n	8006e28 <USB_EPStartXfer+0x310>
 8006dfc:	e007ffff 	.word	0xe007ffff
 8006e00:	fff80000 	.word	0xfff80000
 8006e04:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006e08:	69bb      	ldr	r3, [r7, #24]
 8006e0a:	015a      	lsls	r2, r3, #5
 8006e0c:	69fb      	ldr	r3, [r7, #28]
 8006e0e:	4413      	add	r3, r2
 8006e10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	69ba      	ldr	r2, [r7, #24]
 8006e18:	0151      	lsls	r1, r2, #5
 8006e1a:	69fa      	ldr	r2, [r7, #28]
 8006e1c:	440a      	add	r2, r1
 8006e1e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e26:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	68d9      	ldr	r1, [r3, #12]
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	781a      	ldrb	r2, [r3, #0]
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	b298      	uxth	r0, r3
 8006e36:	79fb      	ldrb	r3, [r7, #7]
 8006e38:	9300      	str	r3, [sp, #0]
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	68f8      	ldr	r0, [r7, #12]
 8006e3e:	f000 f9b9 	bl	80071b4 <USB_WritePacket>
 8006e42:	e102      	b.n	800704a <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006e44:	69bb      	ldr	r3, [r7, #24]
 8006e46:	015a      	lsls	r2, r3, #5
 8006e48:	69fb      	ldr	r3, [r7, #28]
 8006e4a:	4413      	add	r3, r2
 8006e4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e50:	691a      	ldr	r2, [r3, #16]
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	0159      	lsls	r1, r3, #5
 8006e56:	69fb      	ldr	r3, [r7, #28]
 8006e58:	440b      	add	r3, r1
 8006e5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e5e:	4619      	mov	r1, r3
 8006e60:	4b7c      	ldr	r3, [pc, #496]	@ (8007054 <USB_EPStartXfer+0x53c>)
 8006e62:	4013      	ands	r3, r2
 8006e64:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	015a      	lsls	r2, r3, #5
 8006e6a:	69fb      	ldr	r3, [r7, #28]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e72:	691a      	ldr	r2, [r3, #16]
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	0159      	lsls	r1, r3, #5
 8006e78:	69fb      	ldr	r3, [r7, #28]
 8006e7a:	440b      	add	r3, r1
 8006e7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e80:	4619      	mov	r1, r3
 8006e82:	4b75      	ldr	r3, [pc, #468]	@ (8007058 <USB_EPStartXfer+0x540>)
 8006e84:	4013      	ands	r3, r2
 8006e86:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d12f      	bne.n	8006eee <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	691b      	ldr	r3, [r3, #16]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d003      	beq.n	8006e9e <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	689a      	ldr	r2, [r3, #8]
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	689a      	ldr	r2, [r3, #8]
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	015a      	lsls	r2, r3, #5
 8006eaa:	69fb      	ldr	r3, [r7, #28]
 8006eac:	4413      	add	r3, r2
 8006eae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006eb2:	691a      	ldr	r2, [r3, #16]
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	6a1b      	ldr	r3, [r3, #32]
 8006eb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ebc:	69b9      	ldr	r1, [r7, #24]
 8006ebe:	0148      	lsls	r0, r1, #5
 8006ec0:	69f9      	ldr	r1, [r7, #28]
 8006ec2:	4401      	add	r1, r0
 8006ec4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	015a      	lsls	r2, r3, #5
 8006ed0:	69fb      	ldr	r3, [r7, #28]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ed8:	691b      	ldr	r3, [r3, #16]
 8006eda:	69ba      	ldr	r2, [r7, #24]
 8006edc:	0151      	lsls	r1, r2, #5
 8006ede:	69fa      	ldr	r2, [r7, #28]
 8006ee0:	440a      	add	r2, r1
 8006ee2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ee6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006eea:	6113      	str	r3, [r2, #16]
 8006eec:	e05f      	b.n	8006fae <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d123      	bne.n	8006f3e <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006ef6:	69bb      	ldr	r3, [r7, #24]
 8006ef8:	015a      	lsls	r2, r3, #5
 8006efa:	69fb      	ldr	r3, [r7, #28]
 8006efc:	4413      	add	r3, r2
 8006efe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f02:	691a      	ldr	r2, [r3, #16]
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f0c:	69b9      	ldr	r1, [r7, #24]
 8006f0e:	0148      	lsls	r0, r1, #5
 8006f10:	69f9      	ldr	r1, [r7, #28]
 8006f12:	4401      	add	r1, r0
 8006f14:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006f1c:	69bb      	ldr	r3, [r7, #24]
 8006f1e:	015a      	lsls	r2, r3, #5
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	4413      	add	r3, r2
 8006f24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	69ba      	ldr	r2, [r7, #24]
 8006f2c:	0151      	lsls	r1, r2, #5
 8006f2e:	69fa      	ldr	r2, [r7, #28]
 8006f30:	440a      	add	r2, r1
 8006f32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f36:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006f3a:	6113      	str	r3, [r2, #16]
 8006f3c:	e037      	b.n	8006fae <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	691a      	ldr	r2, [r3, #16]
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	4413      	add	r3, r2
 8006f48:	1e5a      	subs	r2, r3, #1
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f52:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	8afa      	ldrh	r2, [r7, #22]
 8006f5a:	fb03 f202 	mul.w	r2, r3, r2
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	015a      	lsls	r2, r3, #5
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	4413      	add	r3, r2
 8006f6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f6e:	691a      	ldr	r2, [r3, #16]
 8006f70:	8afb      	ldrh	r3, [r7, #22]
 8006f72:	04d9      	lsls	r1, r3, #19
 8006f74:	4b39      	ldr	r3, [pc, #228]	@ (800705c <USB_EPStartXfer+0x544>)
 8006f76:	400b      	ands	r3, r1
 8006f78:	69b9      	ldr	r1, [r7, #24]
 8006f7a:	0148      	lsls	r0, r1, #5
 8006f7c:	69f9      	ldr	r1, [r7, #28]
 8006f7e:	4401      	add	r1, r0
 8006f80:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006f84:	4313      	orrs	r3, r2
 8006f86:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006f88:	69bb      	ldr	r3, [r7, #24]
 8006f8a:	015a      	lsls	r2, r3, #5
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	4413      	add	r3, r2
 8006f90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f94:	691a      	ldr	r2, [r3, #16]
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	6a1b      	ldr	r3, [r3, #32]
 8006f9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f9e:	69b9      	ldr	r1, [r7, #24]
 8006fa0:	0148      	lsls	r0, r1, #5
 8006fa2:	69f9      	ldr	r1, [r7, #28]
 8006fa4:	4401      	add	r1, r0
 8006fa6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006faa:	4313      	orrs	r3, r2
 8006fac:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006fae:	79fb      	ldrb	r3, [r7, #7]
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d10d      	bne.n	8006fd0 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d009      	beq.n	8006fd0 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	68d9      	ldr	r1, [r3, #12]
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	015a      	lsls	r2, r3, #5
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	4413      	add	r3, r2
 8006fc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fcc:	460a      	mov	r2, r1
 8006fce:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	791b      	ldrb	r3, [r3, #4]
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d128      	bne.n	800702a <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006fd8:	69fb      	ldr	r3, [r7, #28]
 8006fda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d110      	bne.n	800700a <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006fe8:	69bb      	ldr	r3, [r7, #24]
 8006fea:	015a      	lsls	r2, r3, #5
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	4413      	add	r3, r2
 8006ff0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	69ba      	ldr	r2, [r7, #24]
 8006ff8:	0151      	lsls	r1, r2, #5
 8006ffa:	69fa      	ldr	r2, [r7, #28]
 8006ffc:	440a      	add	r2, r1
 8006ffe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007002:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007006:	6013      	str	r3, [r2, #0]
 8007008:	e00f      	b.n	800702a <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	015a      	lsls	r2, r3, #5
 800700e:	69fb      	ldr	r3, [r7, #28]
 8007010:	4413      	add	r3, r2
 8007012:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	69ba      	ldr	r2, [r7, #24]
 800701a:	0151      	lsls	r1, r2, #5
 800701c:	69fa      	ldr	r2, [r7, #28]
 800701e:	440a      	add	r2, r1
 8007020:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007024:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007028:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	015a      	lsls	r2, r3, #5
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	4413      	add	r3, r2
 8007032:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	69ba      	ldr	r2, [r7, #24]
 800703a:	0151      	lsls	r1, r2, #5
 800703c:	69fa      	ldr	r2, [r7, #28]
 800703e:	440a      	add	r2, r1
 8007040:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007044:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007048:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800704a:	2300      	movs	r3, #0
}
 800704c:	4618      	mov	r0, r3
 800704e:	3720      	adds	r7, #32
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}
 8007054:	fff80000 	.word	0xfff80000
 8007058:	e007ffff 	.word	0xe007ffff
 800705c:	1ff80000 	.word	0x1ff80000

08007060 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007060:	b480      	push	{r7}
 8007062:	b087      	sub	sp, #28
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800706a:	2300      	movs	r3, #0
 800706c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800706e:	2300      	movs	r3, #0
 8007070:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	785b      	ldrb	r3, [r3, #1]
 800707a:	2b01      	cmp	r3, #1
 800707c:	d14a      	bne.n	8007114 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	015a      	lsls	r2, r3, #5
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	4413      	add	r3, r2
 8007088:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007092:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007096:	f040 8086 	bne.w	80071a6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	015a      	lsls	r2, r3, #5
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	4413      	add	r3, r2
 80070a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	683a      	ldr	r2, [r7, #0]
 80070ac:	7812      	ldrb	r2, [r2, #0]
 80070ae:	0151      	lsls	r1, r2, #5
 80070b0:	693a      	ldr	r2, [r7, #16]
 80070b2:	440a      	add	r2, r1
 80070b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070b8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80070bc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	015a      	lsls	r2, r3, #5
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	4413      	add	r3, r2
 80070c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	683a      	ldr	r2, [r7, #0]
 80070d0:	7812      	ldrb	r2, [r2, #0]
 80070d2:	0151      	lsls	r1, r2, #5
 80070d4:	693a      	ldr	r2, [r7, #16]
 80070d6:	440a      	add	r2, r1
 80070d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80070e0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	3301      	adds	r3, #1
 80070e6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f242 7210 	movw	r2, #10000	@ 0x2710
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d902      	bls.n	80070f8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80070f2:	2301      	movs	r3, #1
 80070f4:	75fb      	strb	r3, [r7, #23]
          break;
 80070f6:	e056      	b.n	80071a6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	015a      	lsls	r2, r3, #5
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	4413      	add	r3, r2
 8007102:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800710c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007110:	d0e7      	beq.n	80070e2 <USB_EPStopXfer+0x82>
 8007112:	e048      	b.n	80071a6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	015a      	lsls	r2, r3, #5
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	4413      	add	r3, r2
 800711e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007128:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800712c:	d13b      	bne.n	80071a6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	015a      	lsls	r2, r3, #5
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	4413      	add	r3, r2
 8007138:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	683a      	ldr	r2, [r7, #0]
 8007140:	7812      	ldrb	r2, [r2, #0]
 8007142:	0151      	lsls	r1, r2, #5
 8007144:	693a      	ldr	r2, [r7, #16]
 8007146:	440a      	add	r2, r1
 8007148:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800714c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007150:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	015a      	lsls	r2, r3, #5
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	4413      	add	r3, r2
 800715c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	683a      	ldr	r2, [r7, #0]
 8007164:	7812      	ldrb	r2, [r2, #0]
 8007166:	0151      	lsls	r1, r2, #5
 8007168:	693a      	ldr	r2, [r7, #16]
 800716a:	440a      	add	r2, r1
 800716c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007170:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007174:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	3301      	adds	r3, #1
 800717a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007182:	4293      	cmp	r3, r2
 8007184:	d902      	bls.n	800718c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	75fb      	strb	r3, [r7, #23]
          break;
 800718a:	e00c      	b.n	80071a6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	781b      	ldrb	r3, [r3, #0]
 8007190:	015a      	lsls	r2, r3, #5
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	4413      	add	r3, r2
 8007196:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80071a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80071a4:	d0e7      	beq.n	8007176 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80071a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	371c      	adds	r7, #28
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr

080071b4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b089      	sub	sp, #36	@ 0x24
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	60b9      	str	r1, [r7, #8]
 80071be:	4611      	mov	r1, r2
 80071c0:	461a      	mov	r2, r3
 80071c2:	460b      	mov	r3, r1
 80071c4:	71fb      	strb	r3, [r7, #7]
 80071c6:	4613      	mov	r3, r2
 80071c8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80071d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d123      	bne.n	8007222 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80071da:	88bb      	ldrh	r3, [r7, #4]
 80071dc:	3303      	adds	r3, #3
 80071de:	089b      	lsrs	r3, r3, #2
 80071e0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80071e2:	2300      	movs	r3, #0
 80071e4:	61bb      	str	r3, [r7, #24]
 80071e6:	e018      	b.n	800721a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80071e8:	79fb      	ldrb	r3, [r7, #7]
 80071ea:	031a      	lsls	r2, r3, #12
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	4413      	add	r3, r2
 80071f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80071f4:	461a      	mov	r2, r3
 80071f6:	69fb      	ldr	r3, [r7, #28]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	3301      	adds	r3, #1
 8007200:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007202:	69fb      	ldr	r3, [r7, #28]
 8007204:	3301      	adds	r3, #1
 8007206:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	3301      	adds	r3, #1
 800720c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800720e:	69fb      	ldr	r3, [r7, #28]
 8007210:	3301      	adds	r3, #1
 8007212:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	3301      	adds	r3, #1
 8007218:	61bb      	str	r3, [r7, #24]
 800721a:	69ba      	ldr	r2, [r7, #24]
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	429a      	cmp	r2, r3
 8007220:	d3e2      	bcc.n	80071e8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007222:	2300      	movs	r3, #0
}
 8007224:	4618      	mov	r0, r3
 8007226:	3724      	adds	r7, #36	@ 0x24
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007230:	b480      	push	{r7}
 8007232:	b08b      	sub	sp, #44	@ 0x2c
 8007234:	af00      	add	r7, sp, #0
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	60b9      	str	r1, [r7, #8]
 800723a:	4613      	mov	r3, r2
 800723c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007246:	88fb      	ldrh	r3, [r7, #6]
 8007248:	089b      	lsrs	r3, r3, #2
 800724a:	b29b      	uxth	r3, r3
 800724c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800724e:	88fb      	ldrh	r3, [r7, #6]
 8007250:	f003 0303 	and.w	r3, r3, #3
 8007254:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007256:	2300      	movs	r3, #0
 8007258:	623b      	str	r3, [r7, #32]
 800725a:	e014      	b.n	8007286 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800725c:	69bb      	ldr	r3, [r7, #24]
 800725e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007266:	601a      	str	r2, [r3, #0]
    pDest++;
 8007268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800726a:	3301      	adds	r3, #1
 800726c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800726e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007270:	3301      	adds	r3, #1
 8007272:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007276:	3301      	adds	r3, #1
 8007278:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800727a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800727c:	3301      	adds	r3, #1
 800727e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007280:	6a3b      	ldr	r3, [r7, #32]
 8007282:	3301      	adds	r3, #1
 8007284:	623b      	str	r3, [r7, #32]
 8007286:	6a3a      	ldr	r2, [r7, #32]
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	429a      	cmp	r2, r3
 800728c:	d3e6      	bcc.n	800725c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800728e:	8bfb      	ldrh	r3, [r7, #30]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d01e      	beq.n	80072d2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007294:	2300      	movs	r3, #0
 8007296:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007298:	69bb      	ldr	r3, [r7, #24]
 800729a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800729e:	461a      	mov	r2, r3
 80072a0:	f107 0310 	add.w	r3, r7, #16
 80072a4:	6812      	ldr	r2, [r2, #0]
 80072a6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80072a8:	693a      	ldr	r2, [r7, #16]
 80072aa:	6a3b      	ldr	r3, [r7, #32]
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	00db      	lsls	r3, r3, #3
 80072b0:	fa22 f303 	lsr.w	r3, r2, r3
 80072b4:	b2da      	uxtb	r2, r3
 80072b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b8:	701a      	strb	r2, [r3, #0]
      i++;
 80072ba:	6a3b      	ldr	r3, [r7, #32]
 80072bc:	3301      	adds	r3, #1
 80072be:	623b      	str	r3, [r7, #32]
      pDest++;
 80072c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072c2:	3301      	adds	r3, #1
 80072c4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80072c6:	8bfb      	ldrh	r3, [r7, #30]
 80072c8:	3b01      	subs	r3, #1
 80072ca:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80072cc:	8bfb      	ldrh	r3, [r7, #30]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d1ea      	bne.n	80072a8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80072d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	372c      	adds	r7, #44	@ 0x2c
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b085      	sub	sp, #20
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	785b      	ldrb	r3, [r3, #1]
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d12c      	bne.n	8007356 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	015a      	lsls	r2, r3, #5
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	4413      	add	r3, r2
 8007304:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	2b00      	cmp	r3, #0
 800730c:	db12      	blt.n	8007334 <USB_EPSetStall+0x54>
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d00f      	beq.n	8007334 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	015a      	lsls	r2, r3, #5
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	4413      	add	r3, r2
 800731c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	68ba      	ldr	r2, [r7, #8]
 8007324:	0151      	lsls	r1, r2, #5
 8007326:	68fa      	ldr	r2, [r7, #12]
 8007328:	440a      	add	r2, r1
 800732a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800732e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007332:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	015a      	lsls	r2, r3, #5
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	4413      	add	r3, r2
 800733c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	68ba      	ldr	r2, [r7, #8]
 8007344:	0151      	lsls	r1, r2, #5
 8007346:	68fa      	ldr	r2, [r7, #12]
 8007348:	440a      	add	r2, r1
 800734a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800734e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007352:	6013      	str	r3, [r2, #0]
 8007354:	e02b      	b.n	80073ae <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	015a      	lsls	r2, r3, #5
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	4413      	add	r3, r2
 800735e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	2b00      	cmp	r3, #0
 8007366:	db12      	blt.n	800738e <USB_EPSetStall+0xae>
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d00f      	beq.n	800738e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	015a      	lsls	r2, r3, #5
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	4413      	add	r3, r2
 8007376:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	68ba      	ldr	r2, [r7, #8]
 800737e:	0151      	lsls	r1, r2, #5
 8007380:	68fa      	ldr	r2, [r7, #12]
 8007382:	440a      	add	r2, r1
 8007384:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007388:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800738c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	015a      	lsls	r2, r3, #5
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	4413      	add	r3, r2
 8007396:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	68ba      	ldr	r2, [r7, #8]
 800739e:	0151      	lsls	r1, r2, #5
 80073a0:	68fa      	ldr	r2, [r7, #12]
 80073a2:	440a      	add	r2, r1
 80073a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80073a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80073ac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80073ae:	2300      	movs	r3, #0
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3714      	adds	r7, #20
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80073bc:	b480      	push	{r7}
 80073be:	b085      	sub	sp, #20
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	785b      	ldrb	r3, [r3, #1]
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d128      	bne.n	800742a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	015a      	lsls	r2, r3, #5
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	4413      	add	r3, r2
 80073e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	68ba      	ldr	r2, [r7, #8]
 80073e8:	0151      	lsls	r1, r2, #5
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	440a      	add	r2, r1
 80073ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80073f6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	791b      	ldrb	r3, [r3, #4]
 80073fc:	2b03      	cmp	r3, #3
 80073fe:	d003      	beq.n	8007408 <USB_EPClearStall+0x4c>
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	791b      	ldrb	r3, [r3, #4]
 8007404:	2b02      	cmp	r3, #2
 8007406:	d138      	bne.n	800747a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	015a      	lsls	r2, r3, #5
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	4413      	add	r3, r2
 8007410:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	68ba      	ldr	r2, [r7, #8]
 8007418:	0151      	lsls	r1, r2, #5
 800741a:	68fa      	ldr	r2, [r7, #12]
 800741c:	440a      	add	r2, r1
 800741e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007422:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007426:	6013      	str	r3, [r2, #0]
 8007428:	e027      	b.n	800747a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	015a      	lsls	r2, r3, #5
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	4413      	add	r3, r2
 8007432:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	68ba      	ldr	r2, [r7, #8]
 800743a:	0151      	lsls	r1, r2, #5
 800743c:	68fa      	ldr	r2, [r7, #12]
 800743e:	440a      	add	r2, r1
 8007440:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007444:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007448:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	791b      	ldrb	r3, [r3, #4]
 800744e:	2b03      	cmp	r3, #3
 8007450:	d003      	beq.n	800745a <USB_EPClearStall+0x9e>
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	791b      	ldrb	r3, [r3, #4]
 8007456:	2b02      	cmp	r3, #2
 8007458:	d10f      	bne.n	800747a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	015a      	lsls	r2, r3, #5
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	4413      	add	r3, r2
 8007462:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	68ba      	ldr	r2, [r7, #8]
 800746a:	0151      	lsls	r1, r2, #5
 800746c:	68fa      	ldr	r2, [r7, #12]
 800746e:	440a      	add	r2, r1
 8007470:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007474:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007478:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800747a:	2300      	movs	r3, #0
}
 800747c:	4618      	mov	r0, r3
 800747e:	3714      	adds	r7, #20
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr

08007488 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007488:	b480      	push	{r7}
 800748a:	b085      	sub	sp, #20
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	460b      	mov	r3, r1
 8007492:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	68fa      	ldr	r2, [r7, #12]
 80074a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80074a6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80074aa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	78fb      	ldrb	r3, [r7, #3]
 80074b6:	011b      	lsls	r3, r3, #4
 80074b8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80074bc:	68f9      	ldr	r1, [r7, #12]
 80074be:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80074c2:	4313      	orrs	r3, r2
 80074c4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80074c6:	2300      	movs	r3, #0
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3714      	adds	r7, #20
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr

080074d4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b085      	sub	sp, #20
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	68fa      	ldr	r2, [r7, #12]
 80074ea:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80074ee:	f023 0303 	bic.w	r3, r3, #3
 80074f2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	68fa      	ldr	r2, [r7, #12]
 80074fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007502:	f023 0302 	bic.w	r3, r3, #2
 8007506:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	3714      	adds	r7, #20
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr

08007516 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007516:	b480      	push	{r7}
 8007518:	b085      	sub	sp, #20
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	68fa      	ldr	r2, [r7, #12]
 800752c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007530:	f023 0303 	bic.w	r3, r3, #3
 8007534:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	68fa      	ldr	r2, [r7, #12]
 8007540:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007544:	f043 0302 	orr.w	r3, r3, #2
 8007548:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800754a:	2300      	movs	r3, #0
}
 800754c:	4618      	mov	r0, r3
 800754e:	3714      	adds	r7, #20
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007558:	b480      	push	{r7}
 800755a:	b085      	sub	sp, #20
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	695b      	ldr	r3, [r3, #20]
 8007564:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	699b      	ldr	r3, [r3, #24]
 800756a:	68fa      	ldr	r2, [r7, #12]
 800756c:	4013      	ands	r3, r2
 800756e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007570:	68fb      	ldr	r3, [r7, #12]
}
 8007572:	4618      	mov	r0, r3
 8007574:	3714      	adds	r7, #20
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr

0800757e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800757e:	b480      	push	{r7}
 8007580:	b085      	sub	sp, #20
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007590:	699b      	ldr	r3, [r3, #24]
 8007592:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800759a:	69db      	ldr	r3, [r3, #28]
 800759c:	68ba      	ldr	r2, [r7, #8]
 800759e:	4013      	ands	r3, r2
 80075a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	0c1b      	lsrs	r3, r3, #16
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3714      	adds	r7, #20
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr

080075b2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80075b2:	b480      	push	{r7}
 80075b4:	b085      	sub	sp, #20
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075c4:	699b      	ldr	r3, [r3, #24]
 80075c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075ce:	69db      	ldr	r3, [r3, #28]
 80075d0:	68ba      	ldr	r2, [r7, #8]
 80075d2:	4013      	ands	r3, r2
 80075d4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	b29b      	uxth	r3, r3
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3714      	adds	r7, #20
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr

080075e6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80075e6:	b480      	push	{r7}
 80075e8:	b085      	sub	sp, #20
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	6078      	str	r0, [r7, #4]
 80075ee:	460b      	mov	r3, r1
 80075f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80075f6:	78fb      	ldrb	r3, [r7, #3]
 80075f8:	015a      	lsls	r2, r3, #5
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	4413      	add	r3, r2
 80075fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800760c:	695b      	ldr	r3, [r3, #20]
 800760e:	68ba      	ldr	r2, [r7, #8]
 8007610:	4013      	ands	r3, r2
 8007612:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007614:	68bb      	ldr	r3, [r7, #8]
}
 8007616:	4618      	mov	r0, r3
 8007618:	3714      	adds	r7, #20
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr

08007622 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007622:	b480      	push	{r7}
 8007624:	b087      	sub	sp, #28
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
 800762a:	460b      	mov	r3, r1
 800762c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007638:	691b      	ldr	r3, [r3, #16]
 800763a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007642:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007644:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007646:	78fb      	ldrb	r3, [r7, #3]
 8007648:	f003 030f 	and.w	r3, r3, #15
 800764c:	68fa      	ldr	r2, [r7, #12]
 800764e:	fa22 f303 	lsr.w	r3, r2, r3
 8007652:	01db      	lsls	r3, r3, #7
 8007654:	b2db      	uxtb	r3, r3
 8007656:	693a      	ldr	r2, [r7, #16]
 8007658:	4313      	orrs	r3, r2
 800765a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800765c:	78fb      	ldrb	r3, [r7, #3]
 800765e:	015a      	lsls	r2, r3, #5
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	4413      	add	r3, r2
 8007664:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	693a      	ldr	r2, [r7, #16]
 800766c:	4013      	ands	r3, r2
 800766e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007670:	68bb      	ldr	r3, [r7, #8]
}
 8007672:	4618      	mov	r0, r3
 8007674:	371c      	adds	r7, #28
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr

0800767e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800767e:	b480      	push	{r7}
 8007680:	b083      	sub	sp, #12
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	695b      	ldr	r3, [r3, #20]
 800768a:	f003 0301 	and.w	r3, r3, #1
}
 800768e:	4618      	mov	r0, r3
 8007690:	370c      	adds	r7, #12
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr
	...

0800769c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800769c:	b480      	push	{r7}
 800769e:	b085      	sub	sp, #20
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076b6:	4619      	mov	r1, r3
 80076b8:	4b09      	ldr	r3, [pc, #36]	@ (80076e0 <USB_ActivateSetup+0x44>)
 80076ba:	4013      	ands	r3, r2
 80076bc:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	68fa      	ldr	r2, [r7, #12]
 80076c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80076cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80076d2:	2300      	movs	r3, #0
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3714      	adds	r7, #20
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr
 80076e0:	fffff800 	.word	0xfffff800

080076e4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b087      	sub	sp, #28
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	60f8      	str	r0, [r7, #12]
 80076ec:	460b      	mov	r3, r1
 80076ee:	607a      	str	r2, [r7, #4]
 80076f0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	333c      	adds	r3, #60	@ 0x3c
 80076fa:	3304      	adds	r3, #4
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	4a26      	ldr	r2, [pc, #152]	@ (800779c <USB_EP0_OutStart+0xb8>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d90a      	bls.n	800771e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007714:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007718:	d101      	bne.n	800771e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800771a:	2300      	movs	r3, #0
 800771c:	e037      	b.n	800778e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007724:	461a      	mov	r2, r3
 8007726:	2300      	movs	r3, #0
 8007728:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007730:	691b      	ldr	r3, [r3, #16]
 8007732:	697a      	ldr	r2, [r7, #20]
 8007734:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007738:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800773c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007744:	691b      	ldr	r3, [r3, #16]
 8007746:	697a      	ldr	r2, [r7, #20]
 8007748:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800774c:	f043 0318 	orr.w	r3, r3, #24
 8007750:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007758:	691b      	ldr	r3, [r3, #16]
 800775a:	697a      	ldr	r2, [r7, #20]
 800775c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007760:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007764:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007766:	7afb      	ldrb	r3, [r7, #11]
 8007768:	2b01      	cmp	r3, #1
 800776a:	d10f      	bne.n	800778c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007772:	461a      	mov	r2, r3
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	697a      	ldr	r2, [r7, #20]
 8007782:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007786:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800778a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800778c:	2300      	movs	r3, #0
}
 800778e:	4618      	mov	r0, r3
 8007790:	371c      	adds	r7, #28
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr
 800779a:	bf00      	nop
 800779c:	4f54300a 	.word	0x4f54300a

080077a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b085      	sub	sp, #20
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80077a8:	2300      	movs	r3, #0
 80077aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	3301      	adds	r3, #1
 80077b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80077b8:	d901      	bls.n	80077be <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80077ba:	2303      	movs	r3, #3
 80077bc:	e022      	b.n	8007804 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	daf2      	bge.n	80077ac <USB_CoreReset+0xc>

  count = 10U;
 80077c6:	230a      	movs	r3, #10
 80077c8:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80077ca:	e002      	b.n	80077d2 <USB_CoreReset+0x32>
  {
    count--;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	3b01      	subs	r3, #1
 80077d0:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d1f9      	bne.n	80077cc <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	691b      	ldr	r3, [r3, #16]
 80077dc:	f043 0201 	orr.w	r2, r3, #1
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	3301      	adds	r3, #1
 80077e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80077f0:	d901      	bls.n	80077f6 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80077f2:	2303      	movs	r3, #3
 80077f4:	e006      	b.n	8007804 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	691b      	ldr	r3, [r3, #16]
 80077fa:	f003 0301 	and.w	r3, r3, #1
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d0f0      	beq.n	80077e4 <USB_CoreReset+0x44>

  return HAL_OK;
 8007802:	2300      	movs	r3, #0
}
 8007804:	4618      	mov	r0, r3
 8007806:	3714      	adds	r7, #20
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr

08007810 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	460b      	mov	r3, r1
 800781a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800781c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007820:	f006 f9ce 	bl	800dbc0 <malloc>
 8007824:	4603      	mov	r3, r0
 8007826:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d109      	bne.n	8007842 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	32b0      	adds	r2, #176	@ 0xb0
 8007838:	2100      	movs	r1, #0
 800783a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800783e:	2302      	movs	r3, #2
 8007840:	e0d4      	b.n	80079ec <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007842:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007846:	2100      	movs	r1, #0
 8007848:	68f8      	ldr	r0, [r7, #12]
 800784a:	f006 ffd2 	bl	800e7f2 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	32b0      	adds	r2, #176	@ 0xb0
 8007858:	68f9      	ldr	r1, [r7, #12]
 800785a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	32b0      	adds	r2, #176	@ 0xb0
 8007868:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	7c1b      	ldrb	r3, [r3, #16]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d138      	bne.n	80078ec <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800787a:	4b5e      	ldr	r3, [pc, #376]	@ (80079f4 <USBD_CDC_Init+0x1e4>)
 800787c:	7819      	ldrb	r1, [r3, #0]
 800787e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007882:	2202      	movs	r2, #2
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f005 fff8 	bl	800d87a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800788a:	4b5a      	ldr	r3, [pc, #360]	@ (80079f4 <USBD_CDC_Init+0x1e4>)
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	f003 020f 	and.w	r2, r3, #15
 8007892:	6879      	ldr	r1, [r7, #4]
 8007894:	4613      	mov	r3, r2
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	4413      	add	r3, r2
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	440b      	add	r3, r1
 800789e:	3323      	adds	r3, #35	@ 0x23
 80078a0:	2201      	movs	r2, #1
 80078a2:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80078a4:	4b54      	ldr	r3, [pc, #336]	@ (80079f8 <USBD_CDC_Init+0x1e8>)
 80078a6:	7819      	ldrb	r1, [r3, #0]
 80078a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80078ac:	2202      	movs	r2, #2
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f005 ffe3 	bl	800d87a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80078b4:	4b50      	ldr	r3, [pc, #320]	@ (80079f8 <USBD_CDC_Init+0x1e8>)
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	f003 020f 	and.w	r2, r3, #15
 80078bc:	6879      	ldr	r1, [r7, #4]
 80078be:	4613      	mov	r3, r2
 80078c0:	009b      	lsls	r3, r3, #2
 80078c2:	4413      	add	r3, r2
 80078c4:	009b      	lsls	r3, r3, #2
 80078c6:	440b      	add	r3, r1
 80078c8:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80078cc:	2201      	movs	r2, #1
 80078ce:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80078d0:	4b4a      	ldr	r3, [pc, #296]	@ (80079fc <USBD_CDC_Init+0x1ec>)
 80078d2:	781b      	ldrb	r3, [r3, #0]
 80078d4:	f003 020f 	and.w	r2, r3, #15
 80078d8:	6879      	ldr	r1, [r7, #4]
 80078da:	4613      	mov	r3, r2
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	4413      	add	r3, r2
 80078e0:	009b      	lsls	r3, r3, #2
 80078e2:	440b      	add	r3, r1
 80078e4:	331c      	adds	r3, #28
 80078e6:	2210      	movs	r2, #16
 80078e8:	601a      	str	r2, [r3, #0]
 80078ea:	e035      	b.n	8007958 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80078ec:	4b41      	ldr	r3, [pc, #260]	@ (80079f4 <USBD_CDC_Init+0x1e4>)
 80078ee:	7819      	ldrb	r1, [r3, #0]
 80078f0:	2340      	movs	r3, #64	@ 0x40
 80078f2:	2202      	movs	r2, #2
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f005 ffc0 	bl	800d87a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80078fa:	4b3e      	ldr	r3, [pc, #248]	@ (80079f4 <USBD_CDC_Init+0x1e4>)
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	f003 020f 	and.w	r2, r3, #15
 8007902:	6879      	ldr	r1, [r7, #4]
 8007904:	4613      	mov	r3, r2
 8007906:	009b      	lsls	r3, r3, #2
 8007908:	4413      	add	r3, r2
 800790a:	009b      	lsls	r3, r3, #2
 800790c:	440b      	add	r3, r1
 800790e:	3323      	adds	r3, #35	@ 0x23
 8007910:	2201      	movs	r2, #1
 8007912:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007914:	4b38      	ldr	r3, [pc, #224]	@ (80079f8 <USBD_CDC_Init+0x1e8>)
 8007916:	7819      	ldrb	r1, [r3, #0]
 8007918:	2340      	movs	r3, #64	@ 0x40
 800791a:	2202      	movs	r2, #2
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f005 ffac 	bl	800d87a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007922:	4b35      	ldr	r3, [pc, #212]	@ (80079f8 <USBD_CDC_Init+0x1e8>)
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	f003 020f 	and.w	r2, r3, #15
 800792a:	6879      	ldr	r1, [r7, #4]
 800792c:	4613      	mov	r3, r2
 800792e:	009b      	lsls	r3, r3, #2
 8007930:	4413      	add	r3, r2
 8007932:	009b      	lsls	r3, r3, #2
 8007934:	440b      	add	r3, r1
 8007936:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800793a:	2201      	movs	r2, #1
 800793c:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800793e:	4b2f      	ldr	r3, [pc, #188]	@ (80079fc <USBD_CDC_Init+0x1ec>)
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	f003 020f 	and.w	r2, r3, #15
 8007946:	6879      	ldr	r1, [r7, #4]
 8007948:	4613      	mov	r3, r2
 800794a:	009b      	lsls	r3, r3, #2
 800794c:	4413      	add	r3, r2
 800794e:	009b      	lsls	r3, r3, #2
 8007950:	440b      	add	r3, r1
 8007952:	331c      	adds	r3, #28
 8007954:	2210      	movs	r2, #16
 8007956:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007958:	4b28      	ldr	r3, [pc, #160]	@ (80079fc <USBD_CDC_Init+0x1ec>)
 800795a:	7819      	ldrb	r1, [r3, #0]
 800795c:	2308      	movs	r3, #8
 800795e:	2203      	movs	r2, #3
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f005 ff8a 	bl	800d87a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007966:	4b25      	ldr	r3, [pc, #148]	@ (80079fc <USBD_CDC_Init+0x1ec>)
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	f003 020f 	and.w	r2, r3, #15
 800796e:	6879      	ldr	r1, [r7, #4]
 8007970:	4613      	mov	r3, r2
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	4413      	add	r3, r2
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	440b      	add	r3, r1
 800797a:	3323      	adds	r3, #35	@ 0x23
 800797c:	2201      	movs	r2, #1
 800797e:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2200      	movs	r2, #0
 8007984:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	33b0      	adds	r3, #176	@ 0xb0
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	4413      	add	r3, r2
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2200      	movs	r2, #0
 80079a0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2200      	movs	r2, #0
 80079a8:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d101      	bne.n	80079ba <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 80079b6:	2302      	movs	r3, #2
 80079b8:	e018      	b.n	80079ec <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	7c1b      	ldrb	r3, [r3, #16]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d10a      	bne.n	80079d8 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80079c2:	4b0d      	ldr	r3, [pc, #52]	@ (80079f8 <USBD_CDC_Init+0x1e8>)
 80079c4:	7819      	ldrb	r1, [r3, #0]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80079cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f006 f841 	bl	800da58 <USBD_LL_PrepareReceive>
 80079d6:	e008      	b.n	80079ea <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80079d8:	4b07      	ldr	r3, [pc, #28]	@ (80079f8 <USBD_CDC_Init+0x1e8>)
 80079da:	7819      	ldrb	r1, [r3, #0]
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80079e2:	2340      	movs	r3, #64	@ 0x40
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f006 f837 	bl	800da58 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80079ea:	2300      	movs	r3, #0
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3710      	adds	r7, #16
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	20000093 	.word	0x20000093
 80079f8:	20000094 	.word	0x20000094
 80079fc:	20000095 	.word	0x20000095

08007a00 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	460b      	mov	r3, r1
 8007a0a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007a0c:	4b3a      	ldr	r3, [pc, #232]	@ (8007af8 <USBD_CDC_DeInit+0xf8>)
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	4619      	mov	r1, r3
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f005 ff57 	bl	800d8c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007a18:	4b37      	ldr	r3, [pc, #220]	@ (8007af8 <USBD_CDC_DeInit+0xf8>)
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	f003 020f 	and.w	r2, r3, #15
 8007a20:	6879      	ldr	r1, [r7, #4]
 8007a22:	4613      	mov	r3, r2
 8007a24:	009b      	lsls	r3, r3, #2
 8007a26:	4413      	add	r3, r2
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	440b      	add	r3, r1
 8007a2c:	3323      	adds	r3, #35	@ 0x23
 8007a2e:	2200      	movs	r2, #0
 8007a30:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007a32:	4b32      	ldr	r3, [pc, #200]	@ (8007afc <USBD_CDC_DeInit+0xfc>)
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	4619      	mov	r1, r3
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f005 ff44 	bl	800d8c6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007a3e:	4b2f      	ldr	r3, [pc, #188]	@ (8007afc <USBD_CDC_DeInit+0xfc>)
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	f003 020f 	and.w	r2, r3, #15
 8007a46:	6879      	ldr	r1, [r7, #4]
 8007a48:	4613      	mov	r3, r2
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	4413      	add	r3, r2
 8007a4e:	009b      	lsls	r3, r3, #2
 8007a50:	440b      	add	r3, r1
 8007a52:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007a56:	2200      	movs	r2, #0
 8007a58:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007a5a:	4b29      	ldr	r3, [pc, #164]	@ (8007b00 <USBD_CDC_DeInit+0x100>)
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	4619      	mov	r1, r3
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f005 ff30 	bl	800d8c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007a66:	4b26      	ldr	r3, [pc, #152]	@ (8007b00 <USBD_CDC_DeInit+0x100>)
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	f003 020f 	and.w	r2, r3, #15
 8007a6e:	6879      	ldr	r1, [r7, #4]
 8007a70:	4613      	mov	r3, r2
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	4413      	add	r3, r2
 8007a76:	009b      	lsls	r3, r3, #2
 8007a78:	440b      	add	r3, r1
 8007a7a:	3323      	adds	r3, #35	@ 0x23
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007a80:	4b1f      	ldr	r3, [pc, #124]	@ (8007b00 <USBD_CDC_DeInit+0x100>)
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	f003 020f 	and.w	r2, r3, #15
 8007a88:	6879      	ldr	r1, [r7, #4]
 8007a8a:	4613      	mov	r3, r2
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	4413      	add	r3, r2
 8007a90:	009b      	lsls	r3, r3, #2
 8007a92:	440b      	add	r3, r1
 8007a94:	331c      	adds	r3, #28
 8007a96:	2200      	movs	r2, #0
 8007a98:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	32b0      	adds	r2, #176	@ 0xb0
 8007aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d01f      	beq.n	8007aec <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	33b0      	adds	r3, #176	@ 0xb0
 8007ab6:	009b      	lsls	r3, r3, #2
 8007ab8:	4413      	add	r3, r2
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	32b0      	adds	r2, #176	@ 0xb0
 8007aca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f006 f87e 	bl	800dbd0 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	32b0      	adds	r2, #176	@ 0xb0
 8007ade:	2100      	movs	r1, #0
 8007ae0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007aec:	2300      	movs	r3, #0
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3708      	adds	r7, #8
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop
 8007af8:	20000093 	.word	0x20000093
 8007afc:	20000094 	.word	0x20000094
 8007b00:	20000095 	.word	0x20000095

08007b04 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b086      	sub	sp, #24
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	32b0      	adds	r2, #176	@ 0xb0
 8007b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b1c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007b22:	2300      	movs	r3, #0
 8007b24:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b26:	2300      	movs	r3, #0
 8007b28:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d101      	bne.n	8007b34 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007b30:	2303      	movs	r3, #3
 8007b32:	e0bf      	b.n	8007cb4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d050      	beq.n	8007be2 <USBD_CDC_Setup+0xde>
 8007b40:	2b20      	cmp	r3, #32
 8007b42:	f040 80af 	bne.w	8007ca4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	88db      	ldrh	r3, [r3, #6]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d03a      	beq.n	8007bc4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	b25b      	sxtb	r3, r3
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	da1b      	bge.n	8007b90 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	33b0      	adds	r3, #176	@ 0xb0
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	4413      	add	r3, r2
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	683a      	ldr	r2, [r7, #0]
 8007b6c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007b6e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007b70:	683a      	ldr	r2, [r7, #0]
 8007b72:	88d2      	ldrh	r2, [r2, #6]
 8007b74:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	88db      	ldrh	r3, [r3, #6]
 8007b7a:	2b07      	cmp	r3, #7
 8007b7c:	bf28      	it	cs
 8007b7e:	2307      	movcs	r3, #7
 8007b80:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	89fa      	ldrh	r2, [r7, #14]
 8007b86:	4619      	mov	r1, r3
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f001 fdd3 	bl	8009734 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007b8e:	e090      	b.n	8007cb2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	785a      	ldrb	r2, [r3, #1]
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	88db      	ldrh	r3, [r3, #6]
 8007b9e:	2b3f      	cmp	r3, #63	@ 0x3f
 8007ba0:	d803      	bhi.n	8007baa <USBD_CDC_Setup+0xa6>
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	88db      	ldrh	r3, [r3, #6]
 8007ba6:	b2da      	uxtb	r2, r3
 8007ba8:	e000      	b.n	8007bac <USBD_CDC_Setup+0xa8>
 8007baa:	2240      	movs	r2, #64	@ 0x40
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007bb2:	6939      	ldr	r1, [r7, #16]
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007bba:	461a      	mov	r2, r3
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f001 fde8 	bl	8009792 <USBD_CtlPrepareRx>
      break;
 8007bc2:	e076      	b.n	8007cb2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	33b0      	adds	r3, #176	@ 0xb0
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	4413      	add	r3, r2
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	683a      	ldr	r2, [r7, #0]
 8007bd8:	7850      	ldrb	r0, [r2, #1]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	6839      	ldr	r1, [r7, #0]
 8007bde:	4798      	blx	r3
      break;
 8007be0:	e067      	b.n	8007cb2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	785b      	ldrb	r3, [r3, #1]
 8007be6:	2b0b      	cmp	r3, #11
 8007be8:	d851      	bhi.n	8007c8e <USBD_CDC_Setup+0x18a>
 8007bea:	a201      	add	r2, pc, #4	@ (adr r2, 8007bf0 <USBD_CDC_Setup+0xec>)
 8007bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf0:	08007c21 	.word	0x08007c21
 8007bf4:	08007c9d 	.word	0x08007c9d
 8007bf8:	08007c8f 	.word	0x08007c8f
 8007bfc:	08007c8f 	.word	0x08007c8f
 8007c00:	08007c8f 	.word	0x08007c8f
 8007c04:	08007c8f 	.word	0x08007c8f
 8007c08:	08007c8f 	.word	0x08007c8f
 8007c0c:	08007c8f 	.word	0x08007c8f
 8007c10:	08007c8f 	.word	0x08007c8f
 8007c14:	08007c8f 	.word	0x08007c8f
 8007c18:	08007c4b 	.word	0x08007c4b
 8007c1c:	08007c75 	.word	0x08007c75
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	2b03      	cmp	r3, #3
 8007c2a:	d107      	bne.n	8007c3c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007c2c:	f107 030a 	add.w	r3, r7, #10
 8007c30:	2202      	movs	r2, #2
 8007c32:	4619      	mov	r1, r3
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f001 fd7d 	bl	8009734 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007c3a:	e032      	b.n	8007ca2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007c3c:	6839      	ldr	r1, [r7, #0]
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f001 fcfb 	bl	800963a <USBD_CtlError>
            ret = USBD_FAIL;
 8007c44:	2303      	movs	r3, #3
 8007c46:	75fb      	strb	r3, [r7, #23]
          break;
 8007c48:	e02b      	b.n	8007ca2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	2b03      	cmp	r3, #3
 8007c54:	d107      	bne.n	8007c66 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007c56:	f107 030d 	add.w	r3, r7, #13
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f001 fd68 	bl	8009734 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007c64:	e01d      	b.n	8007ca2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007c66:	6839      	ldr	r1, [r7, #0]
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f001 fce6 	bl	800963a <USBD_CtlError>
            ret = USBD_FAIL;
 8007c6e:	2303      	movs	r3, #3
 8007c70:	75fb      	strb	r3, [r7, #23]
          break;
 8007c72:	e016      	b.n	8007ca2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	2b03      	cmp	r3, #3
 8007c7e:	d00f      	beq.n	8007ca0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007c80:	6839      	ldr	r1, [r7, #0]
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f001 fcd9 	bl	800963a <USBD_CtlError>
            ret = USBD_FAIL;
 8007c88:	2303      	movs	r3, #3
 8007c8a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007c8c:	e008      	b.n	8007ca0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007c8e:	6839      	ldr	r1, [r7, #0]
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f001 fcd2 	bl	800963a <USBD_CtlError>
          ret = USBD_FAIL;
 8007c96:	2303      	movs	r3, #3
 8007c98:	75fb      	strb	r3, [r7, #23]
          break;
 8007c9a:	e002      	b.n	8007ca2 <USBD_CDC_Setup+0x19e>
          break;
 8007c9c:	bf00      	nop
 8007c9e:	e008      	b.n	8007cb2 <USBD_CDC_Setup+0x1ae>
          break;
 8007ca0:	bf00      	nop
      }
      break;
 8007ca2:	e006      	b.n	8007cb2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007ca4:	6839      	ldr	r1, [r7, #0]
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f001 fcc7 	bl	800963a <USBD_CtlError>
      ret = USBD_FAIL;
 8007cac:	2303      	movs	r3, #3
 8007cae:	75fb      	strb	r3, [r7, #23]
      break;
 8007cb0:	bf00      	nop
  }

  return (uint8_t)ret;
 8007cb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3718      	adds	r7, #24
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007cce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	32b0      	adds	r2, #176	@ 0xb0
 8007cda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d101      	bne.n	8007ce6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007ce2:	2303      	movs	r3, #3
 8007ce4:	e065      	b.n	8007db2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	32b0      	adds	r2, #176	@ 0xb0
 8007cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cf4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007cf6:	78fb      	ldrb	r3, [r7, #3]
 8007cf8:	f003 020f 	and.w	r2, r3, #15
 8007cfc:	6879      	ldr	r1, [r7, #4]
 8007cfe:	4613      	mov	r3, r2
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	4413      	add	r3, r2
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	440b      	add	r3, r1
 8007d08:	3314      	adds	r3, #20
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d02f      	beq.n	8007d70 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007d10:	78fb      	ldrb	r3, [r7, #3]
 8007d12:	f003 020f 	and.w	r2, r3, #15
 8007d16:	6879      	ldr	r1, [r7, #4]
 8007d18:	4613      	mov	r3, r2
 8007d1a:	009b      	lsls	r3, r3, #2
 8007d1c:	4413      	add	r3, r2
 8007d1e:	009b      	lsls	r3, r3, #2
 8007d20:	440b      	add	r3, r1
 8007d22:	3314      	adds	r3, #20
 8007d24:	681a      	ldr	r2, [r3, #0]
 8007d26:	78fb      	ldrb	r3, [r7, #3]
 8007d28:	f003 010f 	and.w	r1, r3, #15
 8007d2c:	68f8      	ldr	r0, [r7, #12]
 8007d2e:	460b      	mov	r3, r1
 8007d30:	00db      	lsls	r3, r3, #3
 8007d32:	440b      	add	r3, r1
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	4403      	add	r3, r0
 8007d38:	331c      	adds	r3, #28
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	fbb2 f1f3 	udiv	r1, r2, r3
 8007d40:	fb01 f303 	mul.w	r3, r1, r3
 8007d44:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d112      	bne.n	8007d70 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007d4a:	78fb      	ldrb	r3, [r7, #3]
 8007d4c:	f003 020f 	and.w	r2, r3, #15
 8007d50:	6879      	ldr	r1, [r7, #4]
 8007d52:	4613      	mov	r3, r2
 8007d54:	009b      	lsls	r3, r3, #2
 8007d56:	4413      	add	r3, r2
 8007d58:	009b      	lsls	r3, r3, #2
 8007d5a:	440b      	add	r3, r1
 8007d5c:	3314      	adds	r3, #20
 8007d5e:	2200      	movs	r2, #0
 8007d60:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007d62:	78f9      	ldrb	r1, [r7, #3]
 8007d64:	2300      	movs	r3, #0
 8007d66:	2200      	movs	r2, #0
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f005 fe54 	bl	800da16 <USBD_LL_Transmit>
 8007d6e:	e01f      	b.n	8007db0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	2200      	movs	r2, #0
 8007d74:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	33b0      	adds	r3, #176	@ 0xb0
 8007d82:	009b      	lsls	r3, r3, #2
 8007d84:	4413      	add	r3, r2
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	691b      	ldr	r3, [r3, #16]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d010      	beq.n	8007db0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d94:	687a      	ldr	r2, [r7, #4]
 8007d96:	33b0      	adds	r3, #176	@ 0xb0
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	4413      	add	r3, r2
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	691b      	ldr	r3, [r3, #16]
 8007da0:	68ba      	ldr	r2, [r7, #8]
 8007da2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007da6:	68ba      	ldr	r2, [r7, #8]
 8007da8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007dac:	78fa      	ldrb	r2, [r7, #3]
 8007dae:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007db0:	2300      	movs	r3, #0
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3710      	adds	r7, #16
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}

08007dba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007dba:	b580      	push	{r7, lr}
 8007dbc:	b084      	sub	sp, #16
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
 8007dc2:	460b      	mov	r3, r1
 8007dc4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	32b0      	adds	r2, #176	@ 0xb0
 8007dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dd4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	32b0      	adds	r2, #176	@ 0xb0
 8007de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d101      	bne.n	8007dec <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007de8:	2303      	movs	r3, #3
 8007dea:	e01a      	b.n	8007e22 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007dec:	78fb      	ldrb	r3, [r7, #3]
 8007dee:	4619      	mov	r1, r3
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f005 fe52 	bl	800da9a <USBD_LL_GetRxDataSize>
 8007df6:	4602      	mov	r2, r0
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	33b0      	adds	r3, #176	@ 0xb0
 8007e08:	009b      	lsls	r3, r3, #2
 8007e0a:	4413      	add	r3, r2
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	68fa      	ldr	r2, [r7, #12]
 8007e12:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007e16:	68fa      	ldr	r2, [r7, #12]
 8007e18:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007e1c:	4611      	mov	r1, r2
 8007e1e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007e20:	2300      	movs	r3, #0
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3710      	adds	r7, #16
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}

08007e2a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007e2a:	b580      	push	{r7, lr}
 8007e2c:	b084      	sub	sp, #16
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	32b0      	adds	r2, #176	@ 0xb0
 8007e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e40:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d101      	bne.n	8007e4c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007e48:	2303      	movs	r3, #3
 8007e4a:	e024      	b.n	8007e96 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	33b0      	adds	r3, #176	@ 0xb0
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	4413      	add	r3, r2
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d019      	beq.n	8007e94 <USBD_CDC_EP0_RxReady+0x6a>
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007e66:	2bff      	cmp	r3, #255	@ 0xff
 8007e68:	d014      	beq.n	8007e94 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	33b0      	adds	r3, #176	@ 0xb0
 8007e74:	009b      	lsls	r3, r3, #2
 8007e76:	4413      	add	r3, r2
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	68fa      	ldr	r2, [r7, #12]
 8007e7e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007e82:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007e84:	68fa      	ldr	r2, [r7, #12]
 8007e86:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007e8a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	22ff      	movs	r2, #255	@ 0xff
 8007e90:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007e94:	2300      	movs	r3, #0
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3710      	adds	r7, #16
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
	...

08007ea0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b086      	sub	sp, #24
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007ea8:	2182      	movs	r1, #130	@ 0x82
 8007eaa:	4818      	ldr	r0, [pc, #96]	@ (8007f0c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007eac:	f000 fd62 	bl	8008974 <USBD_GetEpDesc>
 8007eb0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007eb2:	2101      	movs	r1, #1
 8007eb4:	4815      	ldr	r0, [pc, #84]	@ (8007f0c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007eb6:	f000 fd5d 	bl	8008974 <USBD_GetEpDesc>
 8007eba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007ebc:	2181      	movs	r1, #129	@ 0x81
 8007ebe:	4813      	ldr	r0, [pc, #76]	@ (8007f0c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007ec0:	f000 fd58 	bl	8008974 <USBD_GetEpDesc>
 8007ec4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d002      	beq.n	8007ed2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	2210      	movs	r2, #16
 8007ed0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d006      	beq.n	8007ee6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	2200      	movs	r2, #0
 8007edc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007ee0:	711a      	strb	r2, [r3, #4]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d006      	beq.n	8007efa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007ef4:	711a      	strb	r2, [r3, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2243      	movs	r2, #67	@ 0x43
 8007efe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007f00:	4b02      	ldr	r3, [pc, #8]	@ (8007f0c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3718      	adds	r7, #24
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop
 8007f0c:	20000050 	.word	0x20000050

08007f10 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b086      	sub	sp, #24
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007f18:	2182      	movs	r1, #130	@ 0x82
 8007f1a:	4818      	ldr	r0, [pc, #96]	@ (8007f7c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007f1c:	f000 fd2a 	bl	8008974 <USBD_GetEpDesc>
 8007f20:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007f22:	2101      	movs	r1, #1
 8007f24:	4815      	ldr	r0, [pc, #84]	@ (8007f7c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007f26:	f000 fd25 	bl	8008974 <USBD_GetEpDesc>
 8007f2a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007f2c:	2181      	movs	r1, #129	@ 0x81
 8007f2e:	4813      	ldr	r0, [pc, #76]	@ (8007f7c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007f30:	f000 fd20 	bl	8008974 <USBD_GetEpDesc>
 8007f34:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d002      	beq.n	8007f42 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	2210      	movs	r2, #16
 8007f40:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d006      	beq.n	8007f56 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	711a      	strb	r2, [r3, #4]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	f042 0202 	orr.w	r2, r2, #2
 8007f54:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d006      	beq.n	8007f6a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	711a      	strb	r2, [r3, #4]
 8007f62:	2200      	movs	r2, #0
 8007f64:	f042 0202 	orr.w	r2, r2, #2
 8007f68:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2243      	movs	r2, #67	@ 0x43
 8007f6e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007f70:	4b02      	ldr	r3, [pc, #8]	@ (8007f7c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3718      	adds	r7, #24
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	20000050 	.word	0x20000050

08007f80 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b086      	sub	sp, #24
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007f88:	2182      	movs	r1, #130	@ 0x82
 8007f8a:	4818      	ldr	r0, [pc, #96]	@ (8007fec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007f8c:	f000 fcf2 	bl	8008974 <USBD_GetEpDesc>
 8007f90:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007f92:	2101      	movs	r1, #1
 8007f94:	4815      	ldr	r0, [pc, #84]	@ (8007fec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007f96:	f000 fced 	bl	8008974 <USBD_GetEpDesc>
 8007f9a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007f9c:	2181      	movs	r1, #129	@ 0x81
 8007f9e:	4813      	ldr	r0, [pc, #76]	@ (8007fec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007fa0:	f000 fce8 	bl	8008974 <USBD_GetEpDesc>
 8007fa4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d002      	beq.n	8007fb2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	2210      	movs	r2, #16
 8007fb0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d006      	beq.n	8007fc6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007fc0:	711a      	strb	r2, [r3, #4]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d006      	beq.n	8007fda <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007fd4:	711a      	strb	r2, [r3, #4]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2243      	movs	r2, #67	@ 0x43
 8007fde:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007fe0:	4b02      	ldr	r3, [pc, #8]	@ (8007fec <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3718      	adds	r7, #24
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	bf00      	nop
 8007fec:	20000050 	.word	0x20000050

08007ff0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b083      	sub	sp, #12
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	220a      	movs	r2, #10
 8007ffc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007ffe:	4b03      	ldr	r3, [pc, #12]	@ (800800c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008000:	4618      	mov	r0, r3
 8008002:	370c      	adds	r7, #12
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr
 800800c:	2000000c 	.word	0x2000000c

08008010 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d101      	bne.n	8008024 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008020:	2303      	movs	r3, #3
 8008022:	e009      	b.n	8008038 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800802a:	687a      	ldr	r2, [r7, #4]
 800802c:	33b0      	adds	r3, #176	@ 0xb0
 800802e:	009b      	lsls	r3, r3, #2
 8008030:	4413      	add	r3, r2
 8008032:	683a      	ldr	r2, [r7, #0]
 8008034:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008036:	2300      	movs	r3, #0
}
 8008038:	4618      	mov	r0, r3
 800803a:	370c      	adds	r7, #12
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr

08008044 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008044:	b480      	push	{r7}
 8008046:	b087      	sub	sp, #28
 8008048:	af00      	add	r7, sp, #0
 800804a:	60f8      	str	r0, [r7, #12]
 800804c:	60b9      	str	r1, [r7, #8]
 800804e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	32b0      	adds	r2, #176	@ 0xb0
 800805a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800805e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d101      	bne.n	800806a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008066:	2303      	movs	r3, #3
 8008068:	e008      	b.n	800807c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	68ba      	ldr	r2, [r7, #8]
 800806e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800807a:	2300      	movs	r3, #0
}
 800807c:	4618      	mov	r0, r3
 800807e:	371c      	adds	r7, #28
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr

08008088 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008088:	b480      	push	{r7}
 800808a:	b085      	sub	sp, #20
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	32b0      	adds	r2, #176	@ 0xb0
 800809c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080a0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d101      	bne.n	80080ac <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80080a8:	2303      	movs	r3, #3
 80080aa:	e004      	b.n	80080b6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	683a      	ldr	r2, [r7, #0]
 80080b0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80080b4:	2300      	movs	r3, #0
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3714      	adds	r7, #20
 80080ba:	46bd      	mov	sp, r7
 80080bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c0:	4770      	bx	lr
	...

080080c4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	32b0      	adds	r2, #176	@ 0xb0
 80080d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080da:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80080dc:	2301      	movs	r3, #1
 80080de:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d101      	bne.n	80080ea <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80080e6:	2303      	movs	r3, #3
 80080e8:	e025      	b.n	8008136 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d11f      	bne.n	8008134 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	2201      	movs	r2, #1
 80080f8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80080fc:	4b10      	ldr	r3, [pc, #64]	@ (8008140 <USBD_CDC_TransmitPacket+0x7c>)
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	f003 020f 	and.w	r2, r3, #15
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	4613      	mov	r3, r2
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	4413      	add	r3, r2
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	4403      	add	r3, r0
 8008116:	3314      	adds	r3, #20
 8008118:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800811a:	4b09      	ldr	r3, [pc, #36]	@ (8008140 <USBD_CDC_TransmitPacket+0x7c>)
 800811c:	7819      	ldrb	r1, [r3, #0]
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f005 fc73 	bl	800da16 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008130:	2300      	movs	r3, #0
 8008132:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008134:	7bfb      	ldrb	r3, [r7, #15]
}
 8008136:	4618      	mov	r0, r3
 8008138:	3710      	adds	r7, #16
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
 800813e:	bf00      	nop
 8008140:	20000093 	.word	0x20000093

08008144 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	32b0      	adds	r2, #176	@ 0xb0
 8008156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800815a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	32b0      	adds	r2, #176	@ 0xb0
 8008166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d101      	bne.n	8008172 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800816e:	2303      	movs	r3, #3
 8008170:	e018      	b.n	80081a4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	7c1b      	ldrb	r3, [r3, #16]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d10a      	bne.n	8008190 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800817a:	4b0c      	ldr	r3, [pc, #48]	@ (80081ac <USBD_CDC_ReceivePacket+0x68>)
 800817c:	7819      	ldrb	r1, [r3, #0]
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008184:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f005 fc65 	bl	800da58 <USBD_LL_PrepareReceive>
 800818e:	e008      	b.n	80081a2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008190:	4b06      	ldr	r3, [pc, #24]	@ (80081ac <USBD_CDC_ReceivePacket+0x68>)
 8008192:	7819      	ldrb	r1, [r3, #0]
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800819a:	2340      	movs	r3, #64	@ 0x40
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f005 fc5b 	bl	800da58 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80081a2:	2300      	movs	r3, #0
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3710      	adds	r7, #16
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}
 80081ac:	20000094 	.word	0x20000094

080081b0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b086      	sub	sp, #24
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	60f8      	str	r0, [r7, #12]
 80081b8:	60b9      	str	r1, [r7, #8]
 80081ba:	4613      	mov	r3, r2
 80081bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d101      	bne.n	80081c8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80081c4:	2303      	movs	r3, #3
 80081c6:	e01f      	b.n	8008208 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2200      	movs	r2, #0
 80081cc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2200      	movs	r2, #0
 80081d4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2200      	movs	r2, #0
 80081dc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d003      	beq.n	80081ee <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	68ba      	ldr	r2, [r7, #8]
 80081ea:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2201      	movs	r2, #1
 80081f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	79fa      	ldrb	r2, [r7, #7]
 80081fa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80081fc:	68f8      	ldr	r0, [r7, #12]
 80081fe:	f005 facf 	bl	800d7a0 <USBD_LL_Init>
 8008202:	4603      	mov	r3, r0
 8008204:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008206:	7dfb      	ldrb	r3, [r7, #23]
}
 8008208:	4618      	mov	r0, r3
 800820a:	3718      	adds	r7, #24
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800821a:	2300      	movs	r3, #0
 800821c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d101      	bne.n	8008228 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008224:	2303      	movs	r3, #3
 8008226:	e025      	b.n	8008274 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	683a      	ldr	r2, [r7, #0]
 800822c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	32ae      	adds	r2, #174	@ 0xae
 800823a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800823e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008240:	2b00      	cmp	r3, #0
 8008242:	d00f      	beq.n	8008264 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	32ae      	adds	r2, #174	@ 0xae
 800824e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008254:	f107 020e 	add.w	r2, r7, #14
 8008258:	4610      	mov	r0, r2
 800825a:	4798      	blx	r3
 800825c:	4602      	mov	r2, r0
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800826a:	1c5a      	adds	r2, r3, #1
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008272:	2300      	movs	r3, #0
}
 8008274:	4618      	mov	r0, r3
 8008276:	3710      	adds	r7, #16
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f005 fadd 	bl	800d844 <USBD_LL_Start>
 800828a:	4603      	mov	r3, r0
}
 800828c:	4618      	mov	r0, r3
 800828e:	3708      	adds	r7, #8
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800829c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800829e:	4618      	mov	r0, r3
 80082a0:	370c      	adds	r7, #12
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr

080082aa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80082aa:	b580      	push	{r7, lr}
 80082ac:	b084      	sub	sp, #16
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
 80082b2:	460b      	mov	r3, r1
 80082b4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80082b6:	2300      	movs	r3, #0
 80082b8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d009      	beq.n	80082d8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	78fa      	ldrb	r2, [r7, #3]
 80082ce:	4611      	mov	r1, r2
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	4798      	blx	r3
 80082d4:	4603      	mov	r3, r0
 80082d6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80082d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3710      	adds	r7, #16
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}

080082e2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80082e2:	b580      	push	{r7, lr}
 80082e4:	b084      	sub	sp, #16
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
 80082ea:	460b      	mov	r3, r1
 80082ec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80082ee:	2300      	movs	r3, #0
 80082f0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	78fa      	ldrb	r2, [r7, #3]
 80082fc:	4611      	mov	r1, r2
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	4798      	blx	r3
 8008302:	4603      	mov	r3, r0
 8008304:	2b00      	cmp	r3, #0
 8008306:	d001      	beq.n	800830c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008308:	2303      	movs	r3, #3
 800830a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800830c:	7bfb      	ldrb	r3, [r7, #15]
}
 800830e:	4618      	mov	r0, r3
 8008310:	3710      	adds	r7, #16
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}

08008316 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008316:	b580      	push	{r7, lr}
 8008318:	b084      	sub	sp, #16
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
 800831e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008326:	6839      	ldr	r1, [r7, #0]
 8008328:	4618      	mov	r0, r3
 800832a:	f001 f94c 	bl	80095c6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2201      	movs	r2, #1
 8008332:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800833c:	461a      	mov	r2, r3
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800834a:	f003 031f 	and.w	r3, r3, #31
 800834e:	2b02      	cmp	r3, #2
 8008350:	d01a      	beq.n	8008388 <USBD_LL_SetupStage+0x72>
 8008352:	2b02      	cmp	r3, #2
 8008354:	d822      	bhi.n	800839c <USBD_LL_SetupStage+0x86>
 8008356:	2b00      	cmp	r3, #0
 8008358:	d002      	beq.n	8008360 <USBD_LL_SetupStage+0x4a>
 800835a:	2b01      	cmp	r3, #1
 800835c:	d00a      	beq.n	8008374 <USBD_LL_SetupStage+0x5e>
 800835e:	e01d      	b.n	800839c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008366:	4619      	mov	r1, r3
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 fb77 	bl	8008a5c <USBD_StdDevReq>
 800836e:	4603      	mov	r3, r0
 8008370:	73fb      	strb	r3, [r7, #15]
      break;
 8008372:	e020      	b.n	80083b6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800837a:	4619      	mov	r1, r3
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f000 fbdf 	bl	8008b40 <USBD_StdItfReq>
 8008382:	4603      	mov	r3, r0
 8008384:	73fb      	strb	r3, [r7, #15]
      break;
 8008386:	e016      	b.n	80083b6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800838e:	4619      	mov	r1, r3
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 fc41 	bl	8008c18 <USBD_StdEPReq>
 8008396:	4603      	mov	r3, r0
 8008398:	73fb      	strb	r3, [r7, #15]
      break;
 800839a:	e00c      	b.n	80083b6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80083a2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	4619      	mov	r1, r3
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f005 faaa 	bl	800d904 <USBD_LL_StallEP>
 80083b0:	4603      	mov	r3, r0
 80083b2:	73fb      	strb	r3, [r7, #15]
      break;
 80083b4:	bf00      	nop
  }

  return ret;
 80083b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3710      	adds	r7, #16
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b086      	sub	sp, #24
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	60f8      	str	r0, [r7, #12]
 80083c8:	460b      	mov	r3, r1
 80083ca:	607a      	str	r2, [r7, #4]
 80083cc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80083ce:	2300      	movs	r3, #0
 80083d0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80083d2:	7afb      	ldrb	r3, [r7, #11]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d177      	bne.n	80084c8 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80083de:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80083e6:	2b03      	cmp	r3, #3
 80083e8:	f040 80a1 	bne.w	800852e <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	693a      	ldr	r2, [r7, #16]
 80083f2:	8992      	ldrh	r2, [r2, #12]
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d91c      	bls.n	8008432 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	693a      	ldr	r2, [r7, #16]
 80083fe:	8992      	ldrh	r2, [r2, #12]
 8008400:	1a9a      	subs	r2, r3, r2
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	691b      	ldr	r3, [r3, #16]
 800840a:	693a      	ldr	r2, [r7, #16]
 800840c:	8992      	ldrh	r2, [r2, #12]
 800840e:	441a      	add	r2, r3
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	6919      	ldr	r1, [r3, #16]
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	899b      	ldrh	r3, [r3, #12]
 800841c:	461a      	mov	r2, r3
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	4293      	cmp	r3, r2
 8008424:	bf38      	it	cc
 8008426:	4613      	movcc	r3, r2
 8008428:	461a      	mov	r2, r3
 800842a:	68f8      	ldr	r0, [r7, #12]
 800842c:	f001 f9d2 	bl	80097d4 <USBD_CtlContinueRx>
 8008430:	e07d      	b.n	800852e <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008438:	f003 031f 	and.w	r3, r3, #31
 800843c:	2b02      	cmp	r3, #2
 800843e:	d014      	beq.n	800846a <USBD_LL_DataOutStage+0xaa>
 8008440:	2b02      	cmp	r3, #2
 8008442:	d81d      	bhi.n	8008480 <USBD_LL_DataOutStage+0xc0>
 8008444:	2b00      	cmp	r3, #0
 8008446:	d002      	beq.n	800844e <USBD_LL_DataOutStage+0x8e>
 8008448:	2b01      	cmp	r3, #1
 800844a:	d003      	beq.n	8008454 <USBD_LL_DataOutStage+0x94>
 800844c:	e018      	b.n	8008480 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800844e:	2300      	movs	r3, #0
 8008450:	75bb      	strb	r3, [r7, #22]
            break;
 8008452:	e018      	b.n	8008486 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800845a:	b2db      	uxtb	r3, r3
 800845c:	4619      	mov	r1, r3
 800845e:	68f8      	ldr	r0, [r7, #12]
 8008460:	f000 fa6e 	bl	8008940 <USBD_CoreFindIF>
 8008464:	4603      	mov	r3, r0
 8008466:	75bb      	strb	r3, [r7, #22]
            break;
 8008468:	e00d      	b.n	8008486 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008470:	b2db      	uxtb	r3, r3
 8008472:	4619      	mov	r1, r3
 8008474:	68f8      	ldr	r0, [r7, #12]
 8008476:	f000 fa70 	bl	800895a <USBD_CoreFindEP>
 800847a:	4603      	mov	r3, r0
 800847c:	75bb      	strb	r3, [r7, #22]
            break;
 800847e:	e002      	b.n	8008486 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008480:	2300      	movs	r3, #0
 8008482:	75bb      	strb	r3, [r7, #22]
            break;
 8008484:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008486:	7dbb      	ldrb	r3, [r7, #22]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d119      	bne.n	80084c0 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008492:	b2db      	uxtb	r3, r3
 8008494:	2b03      	cmp	r3, #3
 8008496:	d113      	bne.n	80084c0 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008498:	7dba      	ldrb	r2, [r7, #22]
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	32ae      	adds	r2, #174	@ 0xae
 800849e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084a2:	691b      	ldr	r3, [r3, #16]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d00b      	beq.n	80084c0 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 80084a8:	7dba      	ldrb	r2, [r7, #22]
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80084b0:	7dba      	ldrb	r2, [r7, #22]
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	32ae      	adds	r2, #174	@ 0xae
 80084b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084ba:	691b      	ldr	r3, [r3, #16]
 80084bc:	68f8      	ldr	r0, [r7, #12]
 80084be:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80084c0:	68f8      	ldr	r0, [r7, #12]
 80084c2:	f001 f998 	bl	80097f6 <USBD_CtlSendStatus>
 80084c6:	e032      	b.n	800852e <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80084c8:	7afb      	ldrb	r3, [r7, #11]
 80084ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	4619      	mov	r1, r3
 80084d2:	68f8      	ldr	r0, [r7, #12]
 80084d4:	f000 fa41 	bl	800895a <USBD_CoreFindEP>
 80084d8:	4603      	mov	r3, r0
 80084da:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80084dc:	7dbb      	ldrb	r3, [r7, #22]
 80084de:	2bff      	cmp	r3, #255	@ 0xff
 80084e0:	d025      	beq.n	800852e <USBD_LL_DataOutStage+0x16e>
 80084e2:	7dbb      	ldrb	r3, [r7, #22]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d122      	bne.n	800852e <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084ee:	b2db      	uxtb	r3, r3
 80084f0:	2b03      	cmp	r3, #3
 80084f2:	d117      	bne.n	8008524 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80084f4:	7dba      	ldrb	r2, [r7, #22]
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	32ae      	adds	r2, #174	@ 0xae
 80084fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084fe:	699b      	ldr	r3, [r3, #24]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d00f      	beq.n	8008524 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8008504:	7dba      	ldrb	r2, [r7, #22]
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800850c:	7dba      	ldrb	r2, [r7, #22]
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	32ae      	adds	r2, #174	@ 0xae
 8008512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008516:	699b      	ldr	r3, [r3, #24]
 8008518:	7afa      	ldrb	r2, [r7, #11]
 800851a:	4611      	mov	r1, r2
 800851c:	68f8      	ldr	r0, [r7, #12]
 800851e:	4798      	blx	r3
 8008520:	4603      	mov	r3, r0
 8008522:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008524:	7dfb      	ldrb	r3, [r7, #23]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d001      	beq.n	800852e <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800852a:	7dfb      	ldrb	r3, [r7, #23]
 800852c:	e000      	b.n	8008530 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800852e:	2300      	movs	r3, #0
}
 8008530:	4618      	mov	r0, r3
 8008532:	3718      	adds	r7, #24
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b086      	sub	sp, #24
 800853c:	af00      	add	r7, sp, #0
 800853e:	60f8      	str	r0, [r7, #12]
 8008540:	460b      	mov	r3, r1
 8008542:	607a      	str	r2, [r7, #4]
 8008544:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8008546:	7afb      	ldrb	r3, [r7, #11]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d178      	bne.n	800863e <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	3314      	adds	r3, #20
 8008550:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008558:	2b02      	cmp	r3, #2
 800855a:	d163      	bne.n	8008624 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	693a      	ldr	r2, [r7, #16]
 8008562:	8992      	ldrh	r2, [r2, #12]
 8008564:	4293      	cmp	r3, r2
 8008566:	d91c      	bls.n	80085a2 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	693a      	ldr	r2, [r7, #16]
 800856e:	8992      	ldrh	r2, [r2, #12]
 8008570:	1a9a      	subs	r2, r3, r2
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	691b      	ldr	r3, [r3, #16]
 800857a:	693a      	ldr	r2, [r7, #16]
 800857c:	8992      	ldrh	r2, [r2, #12]
 800857e:	441a      	add	r2, r3
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	6919      	ldr	r1, [r3, #16]
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	461a      	mov	r2, r3
 800858e:	68f8      	ldr	r0, [r7, #12]
 8008590:	f001 f8ee 	bl	8009770 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008594:	2300      	movs	r3, #0
 8008596:	2200      	movs	r2, #0
 8008598:	2100      	movs	r1, #0
 800859a:	68f8      	ldr	r0, [r7, #12]
 800859c:	f005 fa5c 	bl	800da58 <USBD_LL_PrepareReceive>
 80085a0:	e040      	b.n	8008624 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	899b      	ldrh	r3, [r3, #12]
 80085a6:	461a      	mov	r2, r3
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d11c      	bne.n	80085ea <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	693a      	ldr	r2, [r7, #16]
 80085b6:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d316      	bcc.n	80085ea <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	681a      	ldr	r2, [r3, #0]
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d20f      	bcs.n	80085ea <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80085ca:	2200      	movs	r2, #0
 80085cc:	2100      	movs	r1, #0
 80085ce:	68f8      	ldr	r0, [r7, #12]
 80085d0:	f001 f8ce 	bl	8009770 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2200      	movs	r2, #0
 80085d8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80085dc:	2300      	movs	r3, #0
 80085de:	2200      	movs	r2, #0
 80085e0:	2100      	movs	r1, #0
 80085e2:	68f8      	ldr	r0, [r7, #12]
 80085e4:	f005 fa38 	bl	800da58 <USBD_LL_PrepareReceive>
 80085e8:	e01c      	b.n	8008624 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085f0:	b2db      	uxtb	r3, r3
 80085f2:	2b03      	cmp	r3, #3
 80085f4:	d10f      	bne.n	8008616 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085fc:	68db      	ldr	r3, [r3, #12]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d009      	beq.n	8008616 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2200      	movs	r2, #0
 8008606:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008610:	68db      	ldr	r3, [r3, #12]
 8008612:	68f8      	ldr	r0, [r7, #12]
 8008614:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008616:	2180      	movs	r1, #128	@ 0x80
 8008618:	68f8      	ldr	r0, [r7, #12]
 800861a:	f005 f973 	bl	800d904 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800861e:	68f8      	ldr	r0, [r7, #12]
 8008620:	f001 f8fc 	bl	800981c <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800862a:	2b00      	cmp	r3, #0
 800862c:	d03a      	beq.n	80086a4 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800862e:	68f8      	ldr	r0, [r7, #12]
 8008630:	f7ff fe30 	bl	8008294 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2200      	movs	r2, #0
 8008638:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800863c:	e032      	b.n	80086a4 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800863e:	7afb      	ldrb	r3, [r7, #11]
 8008640:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008644:	b2db      	uxtb	r3, r3
 8008646:	4619      	mov	r1, r3
 8008648:	68f8      	ldr	r0, [r7, #12]
 800864a:	f000 f986 	bl	800895a <USBD_CoreFindEP>
 800864e:	4603      	mov	r3, r0
 8008650:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008652:	7dfb      	ldrb	r3, [r7, #23]
 8008654:	2bff      	cmp	r3, #255	@ 0xff
 8008656:	d025      	beq.n	80086a4 <USBD_LL_DataInStage+0x16c>
 8008658:	7dfb      	ldrb	r3, [r7, #23]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d122      	bne.n	80086a4 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008664:	b2db      	uxtb	r3, r3
 8008666:	2b03      	cmp	r3, #3
 8008668:	d11c      	bne.n	80086a4 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800866a:	7dfa      	ldrb	r2, [r7, #23]
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	32ae      	adds	r2, #174	@ 0xae
 8008670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008674:	695b      	ldr	r3, [r3, #20]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d014      	beq.n	80086a4 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800867a:	7dfa      	ldrb	r2, [r7, #23]
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008682:	7dfa      	ldrb	r2, [r7, #23]
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	32ae      	adds	r2, #174	@ 0xae
 8008688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800868c:	695b      	ldr	r3, [r3, #20]
 800868e:	7afa      	ldrb	r2, [r7, #11]
 8008690:	4611      	mov	r1, r2
 8008692:	68f8      	ldr	r0, [r7, #12]
 8008694:	4798      	blx	r3
 8008696:	4603      	mov	r3, r0
 8008698:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800869a:	7dbb      	ldrb	r3, [r7, #22]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d001      	beq.n	80086a4 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 80086a0:	7dbb      	ldrb	r3, [r7, #22]
 80086a2:	e000      	b.n	80086a6 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 80086a4:	2300      	movs	r3, #0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3718      	adds	r7, #24
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}

080086ae <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80086ae:	b580      	push	{r7, lr}
 80086b0:	b084      	sub	sp, #16
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80086b6:	2300      	movs	r3, #0
 80086b8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2201      	movs	r2, #1
 80086be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2200      	movs	r2, #0
 80086c6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2200      	movs	r2, #0
 80086ce:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2200      	movs	r2, #0
 80086d4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2200      	movs	r2, #0
 80086dc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d014      	beq.n	8008714 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d00e      	beq.n	8008714 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	687a      	ldr	r2, [r7, #4]
 8008700:	6852      	ldr	r2, [r2, #4]
 8008702:	b2d2      	uxtb	r2, r2
 8008704:	4611      	mov	r1, r2
 8008706:	6878      	ldr	r0, [r7, #4]
 8008708:	4798      	blx	r3
 800870a:	4603      	mov	r3, r0
 800870c:	2b00      	cmp	r3, #0
 800870e:	d001      	beq.n	8008714 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008710:	2303      	movs	r3, #3
 8008712:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008714:	2340      	movs	r3, #64	@ 0x40
 8008716:	2200      	movs	r2, #0
 8008718:	2100      	movs	r1, #0
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f005 f8ad 	bl	800d87a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2201      	movs	r2, #1
 8008724:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2240      	movs	r2, #64	@ 0x40
 800872c:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008730:	2340      	movs	r3, #64	@ 0x40
 8008732:	2200      	movs	r2, #0
 8008734:	2180      	movs	r1, #128	@ 0x80
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f005 f89f 	bl	800d87a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2201      	movs	r2, #1
 8008740:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2240      	movs	r2, #64	@ 0x40
 8008748:	841a      	strh	r2, [r3, #32]

  return ret;
 800874a:	7bfb      	ldrb	r3, [r7, #15]
}
 800874c:	4618      	mov	r0, r3
 800874e:	3710      	adds	r7, #16
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	460b      	mov	r3, r1
 800875e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	78fa      	ldrb	r2, [r7, #3]
 8008764:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008766:	2300      	movs	r3, #0
}
 8008768:	4618      	mov	r0, r3
 800876a:	370c      	adds	r7, #12
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr

08008774 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008774:	b480      	push	{r7}
 8008776:	b083      	sub	sp, #12
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008782:	b2db      	uxtb	r3, r3
 8008784:	2b04      	cmp	r3, #4
 8008786:	d006      	beq.n	8008796 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800878e:	b2da      	uxtb	r2, r3
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2204      	movs	r2, #4
 800879a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800879e:	2300      	movs	r3, #0
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	370c      	adds	r7, #12
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr

080087ac <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b083      	sub	sp, #12
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087ba:	b2db      	uxtb	r3, r3
 80087bc:	2b04      	cmp	r3, #4
 80087be:	d106      	bne.n	80087ce <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80087c6:	b2da      	uxtb	r2, r3
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80087ce:	2300      	movs	r3, #0
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	370c      	adds	r7, #12
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr

080087dc <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b082      	sub	sp, #8
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087ea:	b2db      	uxtb	r3, r3
 80087ec:	2b03      	cmp	r3, #3
 80087ee:	d110      	bne.n	8008812 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d00b      	beq.n	8008812 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008800:	69db      	ldr	r3, [r3, #28]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d005      	beq.n	8008812 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800880c:	69db      	ldr	r3, [r3, #28]
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008812:	2300      	movs	r3, #0
}
 8008814:	4618      	mov	r0, r3
 8008816:	3708      	adds	r7, #8
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}

0800881c <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b082      	sub	sp, #8
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	460b      	mov	r3, r1
 8008826:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	32ae      	adds	r2, #174	@ 0xae
 8008832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d101      	bne.n	800883e <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800883a:	2303      	movs	r3, #3
 800883c:	e01c      	b.n	8008878 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008844:	b2db      	uxtb	r3, r3
 8008846:	2b03      	cmp	r3, #3
 8008848:	d115      	bne.n	8008876 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	32ae      	adds	r2, #174	@ 0xae
 8008854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008858:	6a1b      	ldr	r3, [r3, #32]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d00b      	beq.n	8008876 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	32ae      	adds	r2, #174	@ 0xae
 8008868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800886c:	6a1b      	ldr	r3, [r3, #32]
 800886e:	78fa      	ldrb	r2, [r7, #3]
 8008870:	4611      	mov	r1, r2
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008876:	2300      	movs	r3, #0
}
 8008878:	4618      	mov	r0, r3
 800887a:	3708      	adds	r7, #8
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b082      	sub	sp, #8
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	460b      	mov	r3, r1
 800888a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	32ae      	adds	r2, #174	@ 0xae
 8008896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d101      	bne.n	80088a2 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800889e:	2303      	movs	r3, #3
 80088a0:	e01c      	b.n	80088dc <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	2b03      	cmp	r3, #3
 80088ac:	d115      	bne.n	80088da <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	32ae      	adds	r2, #174	@ 0xae
 80088b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d00b      	beq.n	80088da <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	32ae      	adds	r2, #174	@ 0xae
 80088cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088d2:	78fa      	ldrb	r2, [r7, #3]
 80088d4:	4611      	mov	r1, r2
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80088da:	2300      	movs	r3, #0
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3708      	adds	r7, #8
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b083      	sub	sp, #12
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80088ec:	2300      	movs	r3, #0
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	370c      	adds	r7, #12
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr

080088fa <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b084      	sub	sp, #16
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008902:	2300      	movs	r3, #0
 8008904:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2201      	movs	r2, #1
 800890a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008914:	2b00      	cmp	r3, #0
 8008916:	d00e      	beq.n	8008936 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	6852      	ldr	r2, [r2, #4]
 8008924:	b2d2      	uxtb	r2, r2
 8008926:	4611      	mov	r1, r2
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	4798      	blx	r3
 800892c:	4603      	mov	r3, r0
 800892e:	2b00      	cmp	r3, #0
 8008930:	d001      	beq.n	8008936 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008932:	2303      	movs	r3, #3
 8008934:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008936:	7bfb      	ldrb	r3, [r7, #15]
}
 8008938:	4618      	mov	r0, r3
 800893a:	3710      	adds	r7, #16
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008940:	b480      	push	{r7}
 8008942:	b083      	sub	sp, #12
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	460b      	mov	r3, r1
 800894a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800894c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800894e:	4618      	mov	r0, r3
 8008950:	370c      	adds	r7, #12
 8008952:	46bd      	mov	sp, r7
 8008954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008958:	4770      	bx	lr

0800895a <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800895a:	b480      	push	{r7}
 800895c:	b083      	sub	sp, #12
 800895e:	af00      	add	r7, sp, #0
 8008960:	6078      	str	r0, [r7, #4]
 8008962:	460b      	mov	r3, r1
 8008964:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008966:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008968:	4618      	mov	r0, r3
 800896a:	370c      	adds	r7, #12
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr

08008974 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b086      	sub	sp, #24
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	460b      	mov	r3, r1
 800897e:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008988:	2300      	movs	r3, #0
 800898a:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	885b      	ldrh	r3, [r3, #2]
 8008990:	b29b      	uxth	r3, r3
 8008992:	68fa      	ldr	r2, [r7, #12]
 8008994:	7812      	ldrb	r2, [r2, #0]
 8008996:	4293      	cmp	r3, r2
 8008998:	d91f      	bls.n	80089da <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80089a0:	e013      	b.n	80089ca <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80089a2:	f107 030a 	add.w	r3, r7, #10
 80089a6:	4619      	mov	r1, r3
 80089a8:	6978      	ldr	r0, [r7, #20]
 80089aa:	f000 f81b 	bl	80089e4 <USBD_GetNextDesc>
 80089ae:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	785b      	ldrb	r3, [r3, #1]
 80089b4:	2b05      	cmp	r3, #5
 80089b6:	d108      	bne.n	80089ca <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	789b      	ldrb	r3, [r3, #2]
 80089c0:	78fa      	ldrb	r2, [r7, #3]
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d008      	beq.n	80089d8 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80089c6:	2300      	movs	r3, #0
 80089c8:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	885b      	ldrh	r3, [r3, #2]
 80089ce:	b29a      	uxth	r2, r3
 80089d0:	897b      	ldrh	r3, [r7, #10]
 80089d2:	429a      	cmp	r2, r3
 80089d4:	d8e5      	bhi.n	80089a2 <USBD_GetEpDesc+0x2e>
 80089d6:	e000      	b.n	80089da <USBD_GetEpDesc+0x66>
          break;
 80089d8:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80089da:	693b      	ldr	r3, [r7, #16]
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3718      	adds	r7, #24
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b085      	sub	sp, #20
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	881b      	ldrh	r3, [r3, #0]
 80089f6:	68fa      	ldr	r2, [r7, #12]
 80089f8:	7812      	ldrb	r2, [r2, #0]
 80089fa:	4413      	add	r3, r2
 80089fc:	b29a      	uxth	r2, r3
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	781b      	ldrb	r3, [r3, #0]
 8008a06:	461a      	mov	r2, r3
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	4413      	add	r3, r2
 8008a0c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3714      	adds	r7, #20
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b087      	sub	sp, #28
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	3301      	adds	r3, #1
 8008a32:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008a3a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008a3e:	021b      	lsls	r3, r3, #8
 8008a40:	b21a      	sxth	r2, r3
 8008a42:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008a46:	4313      	orrs	r3, r2
 8008a48:	b21b      	sxth	r3, r3
 8008a4a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008a4c:	89fb      	ldrh	r3, [r7, #14]
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	371c      	adds	r7, #28
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr
	...

08008a5c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b084      	sub	sp, #16
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a66:	2300      	movs	r3, #0
 8008a68:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	781b      	ldrb	r3, [r3, #0]
 8008a6e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008a72:	2b40      	cmp	r3, #64	@ 0x40
 8008a74:	d005      	beq.n	8008a82 <USBD_StdDevReq+0x26>
 8008a76:	2b40      	cmp	r3, #64	@ 0x40
 8008a78:	d857      	bhi.n	8008b2a <USBD_StdDevReq+0xce>
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d00f      	beq.n	8008a9e <USBD_StdDevReq+0x42>
 8008a7e:	2b20      	cmp	r3, #32
 8008a80:	d153      	bne.n	8008b2a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	32ae      	adds	r2, #174	@ 0xae
 8008a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	6839      	ldr	r1, [r7, #0]
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	4798      	blx	r3
 8008a98:	4603      	mov	r3, r0
 8008a9a:	73fb      	strb	r3, [r7, #15]
      break;
 8008a9c:	e04a      	b.n	8008b34 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	785b      	ldrb	r3, [r3, #1]
 8008aa2:	2b09      	cmp	r3, #9
 8008aa4:	d83b      	bhi.n	8008b1e <USBD_StdDevReq+0xc2>
 8008aa6:	a201      	add	r2, pc, #4	@ (adr r2, 8008aac <USBD_StdDevReq+0x50>)
 8008aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aac:	08008b01 	.word	0x08008b01
 8008ab0:	08008b15 	.word	0x08008b15
 8008ab4:	08008b1f 	.word	0x08008b1f
 8008ab8:	08008b0b 	.word	0x08008b0b
 8008abc:	08008b1f 	.word	0x08008b1f
 8008ac0:	08008adf 	.word	0x08008adf
 8008ac4:	08008ad5 	.word	0x08008ad5
 8008ac8:	08008b1f 	.word	0x08008b1f
 8008acc:	08008af7 	.word	0x08008af7
 8008ad0:	08008ae9 	.word	0x08008ae9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008ad4:	6839      	ldr	r1, [r7, #0]
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 fa3e 	bl	8008f58 <USBD_GetDescriptor>
          break;
 8008adc:	e024      	b.n	8008b28 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008ade:	6839      	ldr	r1, [r7, #0]
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f000 fbcd 	bl	8009280 <USBD_SetAddress>
          break;
 8008ae6:	e01f      	b.n	8008b28 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008ae8:	6839      	ldr	r1, [r7, #0]
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f000 fc0c 	bl	8009308 <USBD_SetConfig>
 8008af0:	4603      	mov	r3, r0
 8008af2:	73fb      	strb	r3, [r7, #15]
          break;
 8008af4:	e018      	b.n	8008b28 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008af6:	6839      	ldr	r1, [r7, #0]
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 fcaf 	bl	800945c <USBD_GetConfig>
          break;
 8008afe:	e013      	b.n	8008b28 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008b00:	6839      	ldr	r1, [r7, #0]
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 fce0 	bl	80094c8 <USBD_GetStatus>
          break;
 8008b08:	e00e      	b.n	8008b28 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008b0a:	6839      	ldr	r1, [r7, #0]
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f000 fd0f 	bl	8009530 <USBD_SetFeature>
          break;
 8008b12:	e009      	b.n	8008b28 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008b14:	6839      	ldr	r1, [r7, #0]
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 fd33 	bl	8009582 <USBD_ClrFeature>
          break;
 8008b1c:	e004      	b.n	8008b28 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008b1e:	6839      	ldr	r1, [r7, #0]
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 fd8a 	bl	800963a <USBD_CtlError>
          break;
 8008b26:	bf00      	nop
      }
      break;
 8008b28:	e004      	b.n	8008b34 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008b2a:	6839      	ldr	r1, [r7, #0]
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f000 fd84 	bl	800963a <USBD_CtlError>
      break;
 8008b32:	bf00      	nop
  }

  return ret;
 8008b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3710      	adds	r7, #16
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bd80      	pop	{r7, pc}
 8008b3e:	bf00      	nop

08008b40 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008b56:	2b40      	cmp	r3, #64	@ 0x40
 8008b58:	d005      	beq.n	8008b66 <USBD_StdItfReq+0x26>
 8008b5a:	2b40      	cmp	r3, #64	@ 0x40
 8008b5c:	d852      	bhi.n	8008c04 <USBD_StdItfReq+0xc4>
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d001      	beq.n	8008b66 <USBD_StdItfReq+0x26>
 8008b62:	2b20      	cmp	r3, #32
 8008b64:	d14e      	bne.n	8008c04 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b6c:	b2db      	uxtb	r3, r3
 8008b6e:	3b01      	subs	r3, #1
 8008b70:	2b02      	cmp	r3, #2
 8008b72:	d840      	bhi.n	8008bf6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	889b      	ldrh	r3, [r3, #4]
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	d836      	bhi.n	8008bec <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	889b      	ldrh	r3, [r3, #4]
 8008b82:	b2db      	uxtb	r3, r3
 8008b84:	4619      	mov	r1, r3
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f7ff feda 	bl	8008940 <USBD_CoreFindIF>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008b90:	7bbb      	ldrb	r3, [r7, #14]
 8008b92:	2bff      	cmp	r3, #255	@ 0xff
 8008b94:	d01d      	beq.n	8008bd2 <USBD_StdItfReq+0x92>
 8008b96:	7bbb      	ldrb	r3, [r7, #14]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d11a      	bne.n	8008bd2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008b9c:	7bba      	ldrb	r2, [r7, #14]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	32ae      	adds	r2, #174	@ 0xae
 8008ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ba6:	689b      	ldr	r3, [r3, #8]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d00f      	beq.n	8008bcc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008bac:	7bba      	ldrb	r2, [r7, #14]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008bb4:	7bba      	ldrb	r2, [r7, #14]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	32ae      	adds	r2, #174	@ 0xae
 8008bba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bbe:	689b      	ldr	r3, [r3, #8]
 8008bc0:	6839      	ldr	r1, [r7, #0]
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	4798      	blx	r3
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008bca:	e004      	b.n	8008bd6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008bcc:	2303      	movs	r3, #3
 8008bce:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008bd0:	e001      	b.n	8008bd6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008bd2:	2303      	movs	r3, #3
 8008bd4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	88db      	ldrh	r3, [r3, #6]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d110      	bne.n	8008c00 <USBD_StdItfReq+0xc0>
 8008bde:	7bfb      	ldrb	r3, [r7, #15]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d10d      	bne.n	8008c00 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f000 fe06 	bl	80097f6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008bea:	e009      	b.n	8008c00 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008bec:	6839      	ldr	r1, [r7, #0]
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 fd23 	bl	800963a <USBD_CtlError>
          break;
 8008bf4:	e004      	b.n	8008c00 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008bf6:	6839      	ldr	r1, [r7, #0]
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f000 fd1e 	bl	800963a <USBD_CtlError>
          break;
 8008bfe:	e000      	b.n	8008c02 <USBD_StdItfReq+0xc2>
          break;
 8008c00:	bf00      	nop
      }
      break;
 8008c02:	e004      	b.n	8008c0e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008c04:	6839      	ldr	r1, [r7, #0]
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 fd17 	bl	800963a <USBD_CtlError>
      break;
 8008c0c:	bf00      	nop
  }

  return ret;
 8008c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3710      	adds	r7, #16
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b084      	sub	sp, #16
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008c22:	2300      	movs	r3, #0
 8008c24:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	889b      	ldrh	r3, [r3, #4]
 8008c2a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008c34:	2b40      	cmp	r3, #64	@ 0x40
 8008c36:	d007      	beq.n	8008c48 <USBD_StdEPReq+0x30>
 8008c38:	2b40      	cmp	r3, #64	@ 0x40
 8008c3a:	f200 8181 	bhi.w	8008f40 <USBD_StdEPReq+0x328>
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d02a      	beq.n	8008c98 <USBD_StdEPReq+0x80>
 8008c42:	2b20      	cmp	r3, #32
 8008c44:	f040 817c 	bne.w	8008f40 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008c48:	7bbb      	ldrb	r3, [r7, #14]
 8008c4a:	4619      	mov	r1, r3
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f7ff fe84 	bl	800895a <USBD_CoreFindEP>
 8008c52:	4603      	mov	r3, r0
 8008c54:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008c56:	7b7b      	ldrb	r3, [r7, #13]
 8008c58:	2bff      	cmp	r3, #255	@ 0xff
 8008c5a:	f000 8176 	beq.w	8008f4a <USBD_StdEPReq+0x332>
 8008c5e:	7b7b      	ldrb	r3, [r7, #13]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	f040 8172 	bne.w	8008f4a <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8008c66:	7b7a      	ldrb	r2, [r7, #13]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008c6e:	7b7a      	ldrb	r2, [r7, #13]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	32ae      	adds	r2, #174	@ 0xae
 8008c74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c78:	689b      	ldr	r3, [r3, #8]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	f000 8165 	beq.w	8008f4a <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008c80:	7b7a      	ldrb	r2, [r7, #13]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	32ae      	adds	r2, #174	@ 0xae
 8008c86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c8a:	689b      	ldr	r3, [r3, #8]
 8008c8c:	6839      	ldr	r1, [r7, #0]
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	4798      	blx	r3
 8008c92:	4603      	mov	r3, r0
 8008c94:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008c96:	e158      	b.n	8008f4a <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	785b      	ldrb	r3, [r3, #1]
 8008c9c:	2b03      	cmp	r3, #3
 8008c9e:	d008      	beq.n	8008cb2 <USBD_StdEPReq+0x9a>
 8008ca0:	2b03      	cmp	r3, #3
 8008ca2:	f300 8147 	bgt.w	8008f34 <USBD_StdEPReq+0x31c>
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	f000 809b 	beq.w	8008de2 <USBD_StdEPReq+0x1ca>
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d03c      	beq.n	8008d2a <USBD_StdEPReq+0x112>
 8008cb0:	e140      	b.n	8008f34 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cb8:	b2db      	uxtb	r3, r3
 8008cba:	2b02      	cmp	r3, #2
 8008cbc:	d002      	beq.n	8008cc4 <USBD_StdEPReq+0xac>
 8008cbe:	2b03      	cmp	r3, #3
 8008cc0:	d016      	beq.n	8008cf0 <USBD_StdEPReq+0xd8>
 8008cc2:	e02c      	b.n	8008d1e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008cc4:	7bbb      	ldrb	r3, [r7, #14]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d00d      	beq.n	8008ce6 <USBD_StdEPReq+0xce>
 8008cca:	7bbb      	ldrb	r3, [r7, #14]
 8008ccc:	2b80      	cmp	r3, #128	@ 0x80
 8008cce:	d00a      	beq.n	8008ce6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008cd0:	7bbb      	ldrb	r3, [r7, #14]
 8008cd2:	4619      	mov	r1, r3
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f004 fe15 	bl	800d904 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008cda:	2180      	movs	r1, #128	@ 0x80
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f004 fe11 	bl	800d904 <USBD_LL_StallEP>
 8008ce2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008ce4:	e020      	b.n	8008d28 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008ce6:	6839      	ldr	r1, [r7, #0]
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f000 fca6 	bl	800963a <USBD_CtlError>
              break;
 8008cee:	e01b      	b.n	8008d28 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	885b      	ldrh	r3, [r3, #2]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d10e      	bne.n	8008d16 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008cf8:	7bbb      	ldrb	r3, [r7, #14]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d00b      	beq.n	8008d16 <USBD_StdEPReq+0xfe>
 8008cfe:	7bbb      	ldrb	r3, [r7, #14]
 8008d00:	2b80      	cmp	r3, #128	@ 0x80
 8008d02:	d008      	beq.n	8008d16 <USBD_StdEPReq+0xfe>
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	88db      	ldrh	r3, [r3, #6]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d104      	bne.n	8008d16 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008d0c:	7bbb      	ldrb	r3, [r7, #14]
 8008d0e:	4619      	mov	r1, r3
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f004 fdf7 	bl	800d904 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 fd6d 	bl	80097f6 <USBD_CtlSendStatus>

              break;
 8008d1c:	e004      	b.n	8008d28 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008d1e:	6839      	ldr	r1, [r7, #0]
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f000 fc8a 	bl	800963a <USBD_CtlError>
              break;
 8008d26:	bf00      	nop
          }
          break;
 8008d28:	e109      	b.n	8008f3e <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d30:	b2db      	uxtb	r3, r3
 8008d32:	2b02      	cmp	r3, #2
 8008d34:	d002      	beq.n	8008d3c <USBD_StdEPReq+0x124>
 8008d36:	2b03      	cmp	r3, #3
 8008d38:	d016      	beq.n	8008d68 <USBD_StdEPReq+0x150>
 8008d3a:	e04b      	b.n	8008dd4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d3c:	7bbb      	ldrb	r3, [r7, #14]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d00d      	beq.n	8008d5e <USBD_StdEPReq+0x146>
 8008d42:	7bbb      	ldrb	r3, [r7, #14]
 8008d44:	2b80      	cmp	r3, #128	@ 0x80
 8008d46:	d00a      	beq.n	8008d5e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008d48:	7bbb      	ldrb	r3, [r7, #14]
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f004 fdd9 	bl	800d904 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d52:	2180      	movs	r1, #128	@ 0x80
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f004 fdd5 	bl	800d904 <USBD_LL_StallEP>
 8008d5a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008d5c:	e040      	b.n	8008de0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008d5e:	6839      	ldr	r1, [r7, #0]
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f000 fc6a 	bl	800963a <USBD_CtlError>
              break;
 8008d66:	e03b      	b.n	8008de0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	885b      	ldrh	r3, [r3, #2]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d136      	bne.n	8008dde <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008d70:	7bbb      	ldrb	r3, [r7, #14]
 8008d72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d004      	beq.n	8008d84 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008d7a:	7bbb      	ldrb	r3, [r7, #14]
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f004 fddf 	bl	800d942 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 fd36 	bl	80097f6 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008d8a:	7bbb      	ldrb	r3, [r7, #14]
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f7ff fde3 	bl	800895a <USBD_CoreFindEP>
 8008d94:	4603      	mov	r3, r0
 8008d96:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008d98:	7b7b      	ldrb	r3, [r7, #13]
 8008d9a:	2bff      	cmp	r3, #255	@ 0xff
 8008d9c:	d01f      	beq.n	8008dde <USBD_StdEPReq+0x1c6>
 8008d9e:	7b7b      	ldrb	r3, [r7, #13]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d11c      	bne.n	8008dde <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008da4:	7b7a      	ldrb	r2, [r7, #13]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008dac:	7b7a      	ldrb	r2, [r7, #13]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	32ae      	adds	r2, #174	@ 0xae
 8008db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008db6:	689b      	ldr	r3, [r3, #8]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d010      	beq.n	8008dde <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008dbc:	7b7a      	ldrb	r2, [r7, #13]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	32ae      	adds	r2, #174	@ 0xae
 8008dc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dc6:	689b      	ldr	r3, [r3, #8]
 8008dc8:	6839      	ldr	r1, [r7, #0]
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	4798      	blx	r3
 8008dce:	4603      	mov	r3, r0
 8008dd0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008dd2:	e004      	b.n	8008dde <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008dd4:	6839      	ldr	r1, [r7, #0]
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f000 fc2f 	bl	800963a <USBD_CtlError>
              break;
 8008ddc:	e000      	b.n	8008de0 <USBD_StdEPReq+0x1c8>
              break;
 8008dde:	bf00      	nop
          }
          break;
 8008de0:	e0ad      	b.n	8008f3e <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008de8:	b2db      	uxtb	r3, r3
 8008dea:	2b02      	cmp	r3, #2
 8008dec:	d002      	beq.n	8008df4 <USBD_StdEPReq+0x1dc>
 8008dee:	2b03      	cmp	r3, #3
 8008df0:	d033      	beq.n	8008e5a <USBD_StdEPReq+0x242>
 8008df2:	e099      	b.n	8008f28 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008df4:	7bbb      	ldrb	r3, [r7, #14]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d007      	beq.n	8008e0a <USBD_StdEPReq+0x1f2>
 8008dfa:	7bbb      	ldrb	r3, [r7, #14]
 8008dfc:	2b80      	cmp	r3, #128	@ 0x80
 8008dfe:	d004      	beq.n	8008e0a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008e00:	6839      	ldr	r1, [r7, #0]
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f000 fc19 	bl	800963a <USBD_CtlError>
                break;
 8008e08:	e093      	b.n	8008f32 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	da0b      	bge.n	8008e2a <USBD_StdEPReq+0x212>
 8008e12:	7bbb      	ldrb	r3, [r7, #14]
 8008e14:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008e18:	4613      	mov	r3, r2
 8008e1a:	009b      	lsls	r3, r3, #2
 8008e1c:	4413      	add	r3, r2
 8008e1e:	009b      	lsls	r3, r3, #2
 8008e20:	3310      	adds	r3, #16
 8008e22:	687a      	ldr	r2, [r7, #4]
 8008e24:	4413      	add	r3, r2
 8008e26:	3304      	adds	r3, #4
 8008e28:	e00b      	b.n	8008e42 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008e2a:	7bbb      	ldrb	r3, [r7, #14]
 8008e2c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e30:	4613      	mov	r3, r2
 8008e32:	009b      	lsls	r3, r3, #2
 8008e34:	4413      	add	r3, r2
 8008e36:	009b      	lsls	r3, r3, #2
 8008e38:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	4413      	add	r3, r2
 8008e40:	3304      	adds	r3, #4
 8008e42:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	2200      	movs	r2, #0
 8008e48:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	330e      	adds	r3, #14
 8008e4e:	2202      	movs	r2, #2
 8008e50:	4619      	mov	r1, r3
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 fc6e 	bl	8009734 <USBD_CtlSendData>
              break;
 8008e58:	e06b      	b.n	8008f32 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008e5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	da11      	bge.n	8008e86 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008e62:	7bbb      	ldrb	r3, [r7, #14]
 8008e64:	f003 020f 	and.w	r2, r3, #15
 8008e68:	6879      	ldr	r1, [r7, #4]
 8008e6a:	4613      	mov	r3, r2
 8008e6c:	009b      	lsls	r3, r3, #2
 8008e6e:	4413      	add	r3, r2
 8008e70:	009b      	lsls	r3, r3, #2
 8008e72:	440b      	add	r3, r1
 8008e74:	3323      	adds	r3, #35	@ 0x23
 8008e76:	781b      	ldrb	r3, [r3, #0]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d117      	bne.n	8008eac <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8008e7c:	6839      	ldr	r1, [r7, #0]
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 fbdb 	bl	800963a <USBD_CtlError>
                  break;
 8008e84:	e055      	b.n	8008f32 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008e86:	7bbb      	ldrb	r3, [r7, #14]
 8008e88:	f003 020f 	and.w	r2, r3, #15
 8008e8c:	6879      	ldr	r1, [r7, #4]
 8008e8e:	4613      	mov	r3, r2
 8008e90:	009b      	lsls	r3, r3, #2
 8008e92:	4413      	add	r3, r2
 8008e94:	009b      	lsls	r3, r3, #2
 8008e96:	440b      	add	r3, r1
 8008e98:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8008e9c:	781b      	ldrb	r3, [r3, #0]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d104      	bne.n	8008eac <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8008ea2:	6839      	ldr	r1, [r7, #0]
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f000 fbc8 	bl	800963a <USBD_CtlError>
                  break;
 8008eaa:	e042      	b.n	8008f32 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008eac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	da0b      	bge.n	8008ecc <USBD_StdEPReq+0x2b4>
 8008eb4:	7bbb      	ldrb	r3, [r7, #14]
 8008eb6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008eba:	4613      	mov	r3, r2
 8008ebc:	009b      	lsls	r3, r3, #2
 8008ebe:	4413      	add	r3, r2
 8008ec0:	009b      	lsls	r3, r3, #2
 8008ec2:	3310      	adds	r3, #16
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	4413      	add	r3, r2
 8008ec8:	3304      	adds	r3, #4
 8008eca:	e00b      	b.n	8008ee4 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ecc:	7bbb      	ldrb	r3, [r7, #14]
 8008ece:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ed2:	4613      	mov	r3, r2
 8008ed4:	009b      	lsls	r3, r3, #2
 8008ed6:	4413      	add	r3, r2
 8008ed8:	009b      	lsls	r3, r3, #2
 8008eda:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008ede:	687a      	ldr	r2, [r7, #4]
 8008ee0:	4413      	add	r3, r2
 8008ee2:	3304      	adds	r3, #4
 8008ee4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008ee6:	7bbb      	ldrb	r3, [r7, #14]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d002      	beq.n	8008ef2 <USBD_StdEPReq+0x2da>
 8008eec:	7bbb      	ldrb	r3, [r7, #14]
 8008eee:	2b80      	cmp	r3, #128	@ 0x80
 8008ef0:	d103      	bne.n	8008efa <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	739a      	strb	r2, [r3, #14]
 8008ef8:	e00e      	b.n	8008f18 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008efa:	7bbb      	ldrb	r3, [r7, #14]
 8008efc:	4619      	mov	r1, r3
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f004 fd3e 	bl	800d980 <USBD_LL_IsStallEP>
 8008f04:	4603      	mov	r3, r0
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d003      	beq.n	8008f12 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	739a      	strb	r2, [r3, #14]
 8008f10:	e002      	b.n	8008f18 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	2200      	movs	r2, #0
 8008f16:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	330e      	adds	r3, #14
 8008f1c:	2202      	movs	r2, #2
 8008f1e:	4619      	mov	r1, r3
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 fc07 	bl	8009734 <USBD_CtlSendData>
              break;
 8008f26:	e004      	b.n	8008f32 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8008f28:	6839      	ldr	r1, [r7, #0]
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f000 fb85 	bl	800963a <USBD_CtlError>
              break;
 8008f30:	bf00      	nop
          }
          break;
 8008f32:	e004      	b.n	8008f3e <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8008f34:	6839      	ldr	r1, [r7, #0]
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f000 fb7f 	bl	800963a <USBD_CtlError>
          break;
 8008f3c:	bf00      	nop
      }
      break;
 8008f3e:	e005      	b.n	8008f4c <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8008f40:	6839      	ldr	r1, [r7, #0]
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 fb79 	bl	800963a <USBD_CtlError>
      break;
 8008f48:	e000      	b.n	8008f4c <USBD_StdEPReq+0x334>
      break;
 8008f4a:	bf00      	nop
  }

  return ret;
 8008f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3710      	adds	r7, #16
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
	...

08008f58 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b084      	sub	sp, #16
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008f62:	2300      	movs	r3, #0
 8008f64:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008f66:	2300      	movs	r3, #0
 8008f68:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	885b      	ldrh	r3, [r3, #2]
 8008f72:	0a1b      	lsrs	r3, r3, #8
 8008f74:	b29b      	uxth	r3, r3
 8008f76:	3b01      	subs	r3, #1
 8008f78:	2b0e      	cmp	r3, #14
 8008f7a:	f200 8152 	bhi.w	8009222 <USBD_GetDescriptor+0x2ca>
 8008f7e:	a201      	add	r2, pc, #4	@ (adr r2, 8008f84 <USBD_GetDescriptor+0x2c>)
 8008f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f84:	08008ff5 	.word	0x08008ff5
 8008f88:	0800900d 	.word	0x0800900d
 8008f8c:	0800904d 	.word	0x0800904d
 8008f90:	08009223 	.word	0x08009223
 8008f94:	08009223 	.word	0x08009223
 8008f98:	080091c3 	.word	0x080091c3
 8008f9c:	080091ef 	.word	0x080091ef
 8008fa0:	08009223 	.word	0x08009223
 8008fa4:	08009223 	.word	0x08009223
 8008fa8:	08009223 	.word	0x08009223
 8008fac:	08009223 	.word	0x08009223
 8008fb0:	08009223 	.word	0x08009223
 8008fb4:	08009223 	.word	0x08009223
 8008fb8:	08009223 	.word	0x08009223
 8008fbc:	08008fc1 	.word	0x08008fc1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fc6:	69db      	ldr	r3, [r3, #28]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d00b      	beq.n	8008fe4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fd2:	69db      	ldr	r3, [r3, #28]
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	7c12      	ldrb	r2, [r2, #16]
 8008fd8:	f107 0108 	add.w	r1, r7, #8
 8008fdc:	4610      	mov	r0, r2
 8008fde:	4798      	blx	r3
 8008fe0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008fe2:	e126      	b.n	8009232 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008fe4:	6839      	ldr	r1, [r7, #0]
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 fb27 	bl	800963a <USBD_CtlError>
        err++;
 8008fec:	7afb      	ldrb	r3, [r7, #11]
 8008fee:	3301      	adds	r3, #1
 8008ff0:	72fb      	strb	r3, [r7, #11]
      break;
 8008ff2:	e11e      	b.n	8009232 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	687a      	ldr	r2, [r7, #4]
 8008ffe:	7c12      	ldrb	r2, [r2, #16]
 8009000:	f107 0108 	add.w	r1, r7, #8
 8009004:	4610      	mov	r0, r2
 8009006:	4798      	blx	r3
 8009008:	60f8      	str	r0, [r7, #12]
      break;
 800900a:	e112      	b.n	8009232 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	7c1b      	ldrb	r3, [r3, #16]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d10d      	bne.n	8009030 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800901a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800901c:	f107 0208 	add.w	r2, r7, #8
 8009020:	4610      	mov	r0, r2
 8009022:	4798      	blx	r3
 8009024:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	3301      	adds	r3, #1
 800902a:	2202      	movs	r2, #2
 800902c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800902e:	e100      	b.n	8009232 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009038:	f107 0208 	add.w	r2, r7, #8
 800903c:	4610      	mov	r0, r2
 800903e:	4798      	blx	r3
 8009040:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	3301      	adds	r3, #1
 8009046:	2202      	movs	r2, #2
 8009048:	701a      	strb	r2, [r3, #0]
      break;
 800904a:	e0f2      	b.n	8009232 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	885b      	ldrh	r3, [r3, #2]
 8009050:	b2db      	uxtb	r3, r3
 8009052:	2b05      	cmp	r3, #5
 8009054:	f200 80ac 	bhi.w	80091b0 <USBD_GetDescriptor+0x258>
 8009058:	a201      	add	r2, pc, #4	@ (adr r2, 8009060 <USBD_GetDescriptor+0x108>)
 800905a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800905e:	bf00      	nop
 8009060:	08009079 	.word	0x08009079
 8009064:	080090ad 	.word	0x080090ad
 8009068:	080090e1 	.word	0x080090e1
 800906c:	08009115 	.word	0x08009115
 8009070:	08009149 	.word	0x08009149
 8009074:	0800917d 	.word	0x0800917d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d00b      	beq.n	800909c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	687a      	ldr	r2, [r7, #4]
 800908e:	7c12      	ldrb	r2, [r2, #16]
 8009090:	f107 0108 	add.w	r1, r7, #8
 8009094:	4610      	mov	r0, r2
 8009096:	4798      	blx	r3
 8009098:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800909a:	e091      	b.n	80091c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800909c:	6839      	ldr	r1, [r7, #0]
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f000 facb 	bl	800963a <USBD_CtlError>
            err++;
 80090a4:	7afb      	ldrb	r3, [r7, #11]
 80090a6:	3301      	adds	r3, #1
 80090a8:	72fb      	strb	r3, [r7, #11]
          break;
 80090aa:	e089      	b.n	80091c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090b2:	689b      	ldr	r3, [r3, #8]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d00b      	beq.n	80090d0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090be:	689b      	ldr	r3, [r3, #8]
 80090c0:	687a      	ldr	r2, [r7, #4]
 80090c2:	7c12      	ldrb	r2, [r2, #16]
 80090c4:	f107 0108 	add.w	r1, r7, #8
 80090c8:	4610      	mov	r0, r2
 80090ca:	4798      	blx	r3
 80090cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090ce:	e077      	b.n	80091c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80090d0:	6839      	ldr	r1, [r7, #0]
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 fab1 	bl	800963a <USBD_CtlError>
            err++;
 80090d8:	7afb      	ldrb	r3, [r7, #11]
 80090da:	3301      	adds	r3, #1
 80090dc:	72fb      	strb	r3, [r7, #11]
          break;
 80090de:	e06f      	b.n	80091c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090e6:	68db      	ldr	r3, [r3, #12]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d00b      	beq.n	8009104 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090f2:	68db      	ldr	r3, [r3, #12]
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	7c12      	ldrb	r2, [r2, #16]
 80090f8:	f107 0108 	add.w	r1, r7, #8
 80090fc:	4610      	mov	r0, r2
 80090fe:	4798      	blx	r3
 8009100:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009102:	e05d      	b.n	80091c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009104:	6839      	ldr	r1, [r7, #0]
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 fa97 	bl	800963a <USBD_CtlError>
            err++;
 800910c:	7afb      	ldrb	r3, [r7, #11]
 800910e:	3301      	adds	r3, #1
 8009110:	72fb      	strb	r3, [r7, #11]
          break;
 8009112:	e055      	b.n	80091c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800911a:	691b      	ldr	r3, [r3, #16]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d00b      	beq.n	8009138 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009126:	691b      	ldr	r3, [r3, #16]
 8009128:	687a      	ldr	r2, [r7, #4]
 800912a:	7c12      	ldrb	r2, [r2, #16]
 800912c:	f107 0108 	add.w	r1, r7, #8
 8009130:	4610      	mov	r0, r2
 8009132:	4798      	blx	r3
 8009134:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009136:	e043      	b.n	80091c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009138:	6839      	ldr	r1, [r7, #0]
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f000 fa7d 	bl	800963a <USBD_CtlError>
            err++;
 8009140:	7afb      	ldrb	r3, [r7, #11]
 8009142:	3301      	adds	r3, #1
 8009144:	72fb      	strb	r3, [r7, #11]
          break;
 8009146:	e03b      	b.n	80091c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800914e:	695b      	ldr	r3, [r3, #20]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d00b      	beq.n	800916c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800915a:	695b      	ldr	r3, [r3, #20]
 800915c:	687a      	ldr	r2, [r7, #4]
 800915e:	7c12      	ldrb	r2, [r2, #16]
 8009160:	f107 0108 	add.w	r1, r7, #8
 8009164:	4610      	mov	r0, r2
 8009166:	4798      	blx	r3
 8009168:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800916a:	e029      	b.n	80091c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800916c:	6839      	ldr	r1, [r7, #0]
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 fa63 	bl	800963a <USBD_CtlError>
            err++;
 8009174:	7afb      	ldrb	r3, [r7, #11]
 8009176:	3301      	adds	r3, #1
 8009178:	72fb      	strb	r3, [r7, #11]
          break;
 800917a:	e021      	b.n	80091c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009182:	699b      	ldr	r3, [r3, #24]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d00b      	beq.n	80091a0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800918e:	699b      	ldr	r3, [r3, #24]
 8009190:	687a      	ldr	r2, [r7, #4]
 8009192:	7c12      	ldrb	r2, [r2, #16]
 8009194:	f107 0108 	add.w	r1, r7, #8
 8009198:	4610      	mov	r0, r2
 800919a:	4798      	blx	r3
 800919c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800919e:	e00f      	b.n	80091c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80091a0:	6839      	ldr	r1, [r7, #0]
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f000 fa49 	bl	800963a <USBD_CtlError>
            err++;
 80091a8:	7afb      	ldrb	r3, [r7, #11]
 80091aa:	3301      	adds	r3, #1
 80091ac:	72fb      	strb	r3, [r7, #11]
          break;
 80091ae:	e007      	b.n	80091c0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80091b0:	6839      	ldr	r1, [r7, #0]
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 fa41 	bl	800963a <USBD_CtlError>
          err++;
 80091b8:	7afb      	ldrb	r3, [r7, #11]
 80091ba:	3301      	adds	r3, #1
 80091bc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80091be:	bf00      	nop
      }
      break;
 80091c0:	e037      	b.n	8009232 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	7c1b      	ldrb	r3, [r3, #16]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d109      	bne.n	80091de <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091d2:	f107 0208 	add.w	r2, r7, #8
 80091d6:	4610      	mov	r0, r2
 80091d8:	4798      	blx	r3
 80091da:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80091dc:	e029      	b.n	8009232 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80091de:	6839      	ldr	r1, [r7, #0]
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f000 fa2a 	bl	800963a <USBD_CtlError>
        err++;
 80091e6:	7afb      	ldrb	r3, [r7, #11]
 80091e8:	3301      	adds	r3, #1
 80091ea:	72fb      	strb	r3, [r7, #11]
      break;
 80091ec:	e021      	b.n	8009232 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	7c1b      	ldrb	r3, [r3, #16]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d10d      	bne.n	8009212 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091fe:	f107 0208 	add.w	r2, r7, #8
 8009202:	4610      	mov	r0, r2
 8009204:	4798      	blx	r3
 8009206:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	3301      	adds	r3, #1
 800920c:	2207      	movs	r2, #7
 800920e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009210:	e00f      	b.n	8009232 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009212:	6839      	ldr	r1, [r7, #0]
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f000 fa10 	bl	800963a <USBD_CtlError>
        err++;
 800921a:	7afb      	ldrb	r3, [r7, #11]
 800921c:	3301      	adds	r3, #1
 800921e:	72fb      	strb	r3, [r7, #11]
      break;
 8009220:	e007      	b.n	8009232 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009222:	6839      	ldr	r1, [r7, #0]
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f000 fa08 	bl	800963a <USBD_CtlError>
      err++;
 800922a:	7afb      	ldrb	r3, [r7, #11]
 800922c:	3301      	adds	r3, #1
 800922e:	72fb      	strb	r3, [r7, #11]
      break;
 8009230:	bf00      	nop
  }

  if (err != 0U)
 8009232:	7afb      	ldrb	r3, [r7, #11]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d11e      	bne.n	8009276 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	88db      	ldrh	r3, [r3, #6]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d016      	beq.n	800926e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009240:	893b      	ldrh	r3, [r7, #8]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d00e      	beq.n	8009264 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	88da      	ldrh	r2, [r3, #6]
 800924a:	893b      	ldrh	r3, [r7, #8]
 800924c:	4293      	cmp	r3, r2
 800924e:	bf28      	it	cs
 8009250:	4613      	movcs	r3, r2
 8009252:	b29b      	uxth	r3, r3
 8009254:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009256:	893b      	ldrh	r3, [r7, #8]
 8009258:	461a      	mov	r2, r3
 800925a:	68f9      	ldr	r1, [r7, #12]
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f000 fa69 	bl	8009734 <USBD_CtlSendData>
 8009262:	e009      	b.n	8009278 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009264:	6839      	ldr	r1, [r7, #0]
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 f9e7 	bl	800963a <USBD_CtlError>
 800926c:	e004      	b.n	8009278 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f000 fac1 	bl	80097f6 <USBD_CtlSendStatus>
 8009274:	e000      	b.n	8009278 <USBD_GetDescriptor+0x320>
    return;
 8009276:	bf00      	nop
  }
}
 8009278:	3710      	adds	r7, #16
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}
 800927e:	bf00      	nop

08009280 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b084      	sub	sp, #16
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
 8009288:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	889b      	ldrh	r3, [r3, #4]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d131      	bne.n	80092f6 <USBD_SetAddress+0x76>
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	88db      	ldrh	r3, [r3, #6]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d12d      	bne.n	80092f6 <USBD_SetAddress+0x76>
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	885b      	ldrh	r3, [r3, #2]
 800929e:	2b7f      	cmp	r3, #127	@ 0x7f
 80092a0:	d829      	bhi.n	80092f6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	885b      	ldrh	r3, [r3, #2]
 80092a6:	b2db      	uxtb	r3, r3
 80092a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092ac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092b4:	b2db      	uxtb	r3, r3
 80092b6:	2b03      	cmp	r3, #3
 80092b8:	d104      	bne.n	80092c4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80092ba:	6839      	ldr	r1, [r7, #0]
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f000 f9bc 	bl	800963a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092c2:	e01d      	b.n	8009300 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	7bfa      	ldrb	r2, [r7, #15]
 80092c8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80092cc:	7bfb      	ldrb	r3, [r7, #15]
 80092ce:	4619      	mov	r1, r3
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f004 fb81 	bl	800d9d8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 fa8d 	bl	80097f6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80092dc:	7bfb      	ldrb	r3, [r7, #15]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d004      	beq.n	80092ec <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2202      	movs	r2, #2
 80092e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092ea:	e009      	b.n	8009300 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2201      	movs	r2, #1
 80092f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092f4:	e004      	b.n	8009300 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80092f6:	6839      	ldr	r1, [r7, #0]
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f000 f99e 	bl	800963a <USBD_CtlError>
  }
}
 80092fe:	bf00      	nop
 8009300:	bf00      	nop
 8009302:	3710      	adds	r7, #16
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b084      	sub	sp, #16
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
 8009310:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009312:	2300      	movs	r3, #0
 8009314:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	885b      	ldrh	r3, [r3, #2]
 800931a:	b2da      	uxtb	r2, r3
 800931c:	4b4e      	ldr	r3, [pc, #312]	@ (8009458 <USBD_SetConfig+0x150>)
 800931e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009320:	4b4d      	ldr	r3, [pc, #308]	@ (8009458 <USBD_SetConfig+0x150>)
 8009322:	781b      	ldrb	r3, [r3, #0]
 8009324:	2b01      	cmp	r3, #1
 8009326:	d905      	bls.n	8009334 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009328:	6839      	ldr	r1, [r7, #0]
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f000 f985 	bl	800963a <USBD_CtlError>
    return USBD_FAIL;
 8009330:	2303      	movs	r3, #3
 8009332:	e08c      	b.n	800944e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800933a:	b2db      	uxtb	r3, r3
 800933c:	2b02      	cmp	r3, #2
 800933e:	d002      	beq.n	8009346 <USBD_SetConfig+0x3e>
 8009340:	2b03      	cmp	r3, #3
 8009342:	d029      	beq.n	8009398 <USBD_SetConfig+0x90>
 8009344:	e075      	b.n	8009432 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009346:	4b44      	ldr	r3, [pc, #272]	@ (8009458 <USBD_SetConfig+0x150>)
 8009348:	781b      	ldrb	r3, [r3, #0]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d020      	beq.n	8009390 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800934e:	4b42      	ldr	r3, [pc, #264]	@ (8009458 <USBD_SetConfig+0x150>)
 8009350:	781b      	ldrb	r3, [r3, #0]
 8009352:	461a      	mov	r2, r3
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009358:	4b3f      	ldr	r3, [pc, #252]	@ (8009458 <USBD_SetConfig+0x150>)
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	4619      	mov	r1, r3
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f7fe ffa3 	bl	80082aa <USBD_SetClassConfig>
 8009364:	4603      	mov	r3, r0
 8009366:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009368:	7bfb      	ldrb	r3, [r7, #15]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d008      	beq.n	8009380 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800936e:	6839      	ldr	r1, [r7, #0]
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f000 f962 	bl	800963a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2202      	movs	r2, #2
 800937a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800937e:	e065      	b.n	800944c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f000 fa38 	bl	80097f6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2203      	movs	r2, #3
 800938a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800938e:	e05d      	b.n	800944c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f000 fa30 	bl	80097f6 <USBD_CtlSendStatus>
      break;
 8009396:	e059      	b.n	800944c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009398:	4b2f      	ldr	r3, [pc, #188]	@ (8009458 <USBD_SetConfig+0x150>)
 800939a:	781b      	ldrb	r3, [r3, #0]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d112      	bne.n	80093c6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2202      	movs	r2, #2
 80093a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80093a8:	4b2b      	ldr	r3, [pc, #172]	@ (8009458 <USBD_SetConfig+0x150>)
 80093aa:	781b      	ldrb	r3, [r3, #0]
 80093ac:	461a      	mov	r2, r3
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80093b2:	4b29      	ldr	r3, [pc, #164]	@ (8009458 <USBD_SetConfig+0x150>)
 80093b4:	781b      	ldrb	r3, [r3, #0]
 80093b6:	4619      	mov	r1, r3
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f7fe ff92 	bl	80082e2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f000 fa19 	bl	80097f6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80093c4:	e042      	b.n	800944c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80093c6:	4b24      	ldr	r3, [pc, #144]	@ (8009458 <USBD_SetConfig+0x150>)
 80093c8:	781b      	ldrb	r3, [r3, #0]
 80093ca:	461a      	mov	r2, r3
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	429a      	cmp	r2, r3
 80093d2:	d02a      	beq.n	800942a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	b2db      	uxtb	r3, r3
 80093da:	4619      	mov	r1, r3
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f7fe ff80 	bl	80082e2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80093e2:	4b1d      	ldr	r3, [pc, #116]	@ (8009458 <USBD_SetConfig+0x150>)
 80093e4:	781b      	ldrb	r3, [r3, #0]
 80093e6:	461a      	mov	r2, r3
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80093ec:	4b1a      	ldr	r3, [pc, #104]	@ (8009458 <USBD_SetConfig+0x150>)
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	4619      	mov	r1, r3
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f7fe ff59 	bl	80082aa <USBD_SetClassConfig>
 80093f8:	4603      	mov	r3, r0
 80093fa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80093fc:	7bfb      	ldrb	r3, [r7, #15]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d00f      	beq.n	8009422 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009402:	6839      	ldr	r1, [r7, #0]
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f000 f918 	bl	800963a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	685b      	ldr	r3, [r3, #4]
 800940e:	b2db      	uxtb	r3, r3
 8009410:	4619      	mov	r1, r3
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f7fe ff65 	bl	80082e2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2202      	movs	r2, #2
 800941c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009420:	e014      	b.n	800944c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 f9e7 	bl	80097f6 <USBD_CtlSendStatus>
      break;
 8009428:	e010      	b.n	800944c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f000 f9e3 	bl	80097f6 <USBD_CtlSendStatus>
      break;
 8009430:	e00c      	b.n	800944c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009432:	6839      	ldr	r1, [r7, #0]
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f000 f900 	bl	800963a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800943a:	4b07      	ldr	r3, [pc, #28]	@ (8009458 <USBD_SetConfig+0x150>)
 800943c:	781b      	ldrb	r3, [r3, #0]
 800943e:	4619      	mov	r1, r3
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f7fe ff4e 	bl	80082e2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009446:	2303      	movs	r3, #3
 8009448:	73fb      	strb	r3, [r7, #15]
      break;
 800944a:	bf00      	nop
  }

  return ret;
 800944c:	7bfb      	ldrb	r3, [r7, #15]
}
 800944e:	4618      	mov	r0, r3
 8009450:	3710      	adds	r7, #16
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}
 8009456:	bf00      	nop
 8009458:	200003c4 	.word	0x200003c4

0800945c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b082      	sub	sp, #8
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	88db      	ldrh	r3, [r3, #6]
 800946a:	2b01      	cmp	r3, #1
 800946c:	d004      	beq.n	8009478 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800946e:	6839      	ldr	r1, [r7, #0]
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f000 f8e2 	bl	800963a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009476:	e023      	b.n	80094c0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800947e:	b2db      	uxtb	r3, r3
 8009480:	2b02      	cmp	r3, #2
 8009482:	dc02      	bgt.n	800948a <USBD_GetConfig+0x2e>
 8009484:	2b00      	cmp	r3, #0
 8009486:	dc03      	bgt.n	8009490 <USBD_GetConfig+0x34>
 8009488:	e015      	b.n	80094b6 <USBD_GetConfig+0x5a>
 800948a:	2b03      	cmp	r3, #3
 800948c:	d00b      	beq.n	80094a6 <USBD_GetConfig+0x4a>
 800948e:	e012      	b.n	80094b6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2200      	movs	r2, #0
 8009494:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	3308      	adds	r3, #8
 800949a:	2201      	movs	r2, #1
 800949c:	4619      	mov	r1, r3
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 f948 	bl	8009734 <USBD_CtlSendData>
        break;
 80094a4:	e00c      	b.n	80094c0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	3304      	adds	r3, #4
 80094aa:	2201      	movs	r2, #1
 80094ac:	4619      	mov	r1, r3
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f000 f940 	bl	8009734 <USBD_CtlSendData>
        break;
 80094b4:	e004      	b.n	80094c0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80094b6:	6839      	ldr	r1, [r7, #0]
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f000 f8be 	bl	800963a <USBD_CtlError>
        break;
 80094be:	bf00      	nop
}
 80094c0:	bf00      	nop
 80094c2:	3708      	adds	r7, #8
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}

080094c8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b082      	sub	sp, #8
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
 80094d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094d8:	b2db      	uxtb	r3, r3
 80094da:	3b01      	subs	r3, #1
 80094dc:	2b02      	cmp	r3, #2
 80094de:	d81e      	bhi.n	800951e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	88db      	ldrh	r3, [r3, #6]
 80094e4:	2b02      	cmp	r3, #2
 80094e6:	d004      	beq.n	80094f2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80094e8:	6839      	ldr	r1, [r7, #0]
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f000 f8a5 	bl	800963a <USBD_CtlError>
        break;
 80094f0:	e01a      	b.n	8009528 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2201      	movs	r2, #1
 80094f6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d005      	beq.n	800950e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	68db      	ldr	r3, [r3, #12]
 8009506:	f043 0202 	orr.w	r2, r3, #2
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	330c      	adds	r3, #12
 8009512:	2202      	movs	r2, #2
 8009514:	4619      	mov	r1, r3
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 f90c 	bl	8009734 <USBD_CtlSendData>
      break;
 800951c:	e004      	b.n	8009528 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800951e:	6839      	ldr	r1, [r7, #0]
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f000 f88a 	bl	800963a <USBD_CtlError>
      break;
 8009526:	bf00      	nop
  }
}
 8009528:	bf00      	nop
 800952a:	3708      	adds	r7, #8
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}

08009530 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b082      	sub	sp, #8
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	885b      	ldrh	r3, [r3, #2]
 800953e:	2b01      	cmp	r3, #1
 8009540:	d107      	bne.n	8009552 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2201      	movs	r2, #1
 8009546:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f000 f953 	bl	80097f6 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009550:	e013      	b.n	800957a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	885b      	ldrh	r3, [r3, #2]
 8009556:	2b02      	cmp	r3, #2
 8009558:	d10b      	bne.n	8009572 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	889b      	ldrh	r3, [r3, #4]
 800955e:	0a1b      	lsrs	r3, r3, #8
 8009560:	b29b      	uxth	r3, r3
 8009562:	b2da      	uxtb	r2, r3
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f000 f943 	bl	80097f6 <USBD_CtlSendStatus>
}
 8009570:	e003      	b.n	800957a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009572:	6839      	ldr	r1, [r7, #0]
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f000 f860 	bl	800963a <USBD_CtlError>
}
 800957a:	bf00      	nop
 800957c:	3708      	adds	r7, #8
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}

08009582 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009582:	b580      	push	{r7, lr}
 8009584:	b082      	sub	sp, #8
 8009586:	af00      	add	r7, sp, #0
 8009588:	6078      	str	r0, [r7, #4]
 800958a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009592:	b2db      	uxtb	r3, r3
 8009594:	3b01      	subs	r3, #1
 8009596:	2b02      	cmp	r3, #2
 8009598:	d80b      	bhi.n	80095b2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	885b      	ldrh	r3, [r3, #2]
 800959e:	2b01      	cmp	r3, #1
 80095a0:	d10c      	bne.n	80095bc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2200      	movs	r2, #0
 80095a6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f000 f923 	bl	80097f6 <USBD_CtlSendStatus>
      }
      break;
 80095b0:	e004      	b.n	80095bc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80095b2:	6839      	ldr	r1, [r7, #0]
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 f840 	bl	800963a <USBD_CtlError>
      break;
 80095ba:	e000      	b.n	80095be <USBD_ClrFeature+0x3c>
      break;
 80095bc:	bf00      	nop
  }
}
 80095be:	bf00      	nop
 80095c0:	3708      	adds	r7, #8
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}

080095c6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80095c6:	b580      	push	{r7, lr}
 80095c8:	b084      	sub	sp, #16
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	6078      	str	r0, [r7, #4]
 80095ce:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	781a      	ldrb	r2, [r3, #0]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	3301      	adds	r3, #1
 80095e0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	781a      	ldrb	r2, [r3, #0]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	3301      	adds	r3, #1
 80095ee:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80095f0:	68f8      	ldr	r0, [r7, #12]
 80095f2:	f7ff fa13 	bl	8008a1c <SWAPBYTE>
 80095f6:	4603      	mov	r3, r0
 80095f8:	461a      	mov	r2, r3
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	3301      	adds	r3, #1
 8009602:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	3301      	adds	r3, #1
 8009608:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800960a:	68f8      	ldr	r0, [r7, #12]
 800960c:	f7ff fa06 	bl	8008a1c <SWAPBYTE>
 8009610:	4603      	mov	r3, r0
 8009612:	461a      	mov	r2, r3
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	3301      	adds	r3, #1
 800961c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	3301      	adds	r3, #1
 8009622:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009624:	68f8      	ldr	r0, [r7, #12]
 8009626:	f7ff f9f9 	bl	8008a1c <SWAPBYTE>
 800962a:	4603      	mov	r3, r0
 800962c:	461a      	mov	r2, r3
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	80da      	strh	r2, [r3, #6]
}
 8009632:	bf00      	nop
 8009634:	3710      	adds	r7, #16
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}

0800963a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800963a:	b580      	push	{r7, lr}
 800963c:	b082      	sub	sp, #8
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
 8009642:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009644:	2180      	movs	r1, #128	@ 0x80
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f004 f95c 	bl	800d904 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800964c:	2100      	movs	r1, #0
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f004 f958 	bl	800d904 <USBD_LL_StallEP>
}
 8009654:	bf00      	nop
 8009656:	3708      	adds	r7, #8
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b086      	sub	sp, #24
 8009660:	af00      	add	r7, sp, #0
 8009662:	60f8      	str	r0, [r7, #12]
 8009664:	60b9      	str	r1, [r7, #8]
 8009666:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009668:	2300      	movs	r3, #0
 800966a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d042      	beq.n	80096f8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8009676:	6938      	ldr	r0, [r7, #16]
 8009678:	f000 f842 	bl	8009700 <USBD_GetLen>
 800967c:	4603      	mov	r3, r0
 800967e:	3301      	adds	r3, #1
 8009680:	005b      	lsls	r3, r3, #1
 8009682:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009686:	d808      	bhi.n	800969a <USBD_GetString+0x3e>
 8009688:	6938      	ldr	r0, [r7, #16]
 800968a:	f000 f839 	bl	8009700 <USBD_GetLen>
 800968e:	4603      	mov	r3, r0
 8009690:	3301      	adds	r3, #1
 8009692:	b29b      	uxth	r3, r3
 8009694:	005b      	lsls	r3, r3, #1
 8009696:	b29a      	uxth	r2, r3
 8009698:	e001      	b.n	800969e <USBD_GetString+0x42>
 800969a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80096a2:	7dfb      	ldrb	r3, [r7, #23]
 80096a4:	68ba      	ldr	r2, [r7, #8]
 80096a6:	4413      	add	r3, r2
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	7812      	ldrb	r2, [r2, #0]
 80096ac:	701a      	strb	r2, [r3, #0]
  idx++;
 80096ae:	7dfb      	ldrb	r3, [r7, #23]
 80096b0:	3301      	adds	r3, #1
 80096b2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80096b4:	7dfb      	ldrb	r3, [r7, #23]
 80096b6:	68ba      	ldr	r2, [r7, #8]
 80096b8:	4413      	add	r3, r2
 80096ba:	2203      	movs	r2, #3
 80096bc:	701a      	strb	r2, [r3, #0]
  idx++;
 80096be:	7dfb      	ldrb	r3, [r7, #23]
 80096c0:	3301      	adds	r3, #1
 80096c2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80096c4:	e013      	b.n	80096ee <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80096c6:	7dfb      	ldrb	r3, [r7, #23]
 80096c8:	68ba      	ldr	r2, [r7, #8]
 80096ca:	4413      	add	r3, r2
 80096cc:	693a      	ldr	r2, [r7, #16]
 80096ce:	7812      	ldrb	r2, [r2, #0]
 80096d0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	3301      	adds	r3, #1
 80096d6:	613b      	str	r3, [r7, #16]
    idx++;
 80096d8:	7dfb      	ldrb	r3, [r7, #23]
 80096da:	3301      	adds	r3, #1
 80096dc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80096de:	7dfb      	ldrb	r3, [r7, #23]
 80096e0:	68ba      	ldr	r2, [r7, #8]
 80096e2:	4413      	add	r3, r2
 80096e4:	2200      	movs	r2, #0
 80096e6:	701a      	strb	r2, [r3, #0]
    idx++;
 80096e8:	7dfb      	ldrb	r3, [r7, #23]
 80096ea:	3301      	adds	r3, #1
 80096ec:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	781b      	ldrb	r3, [r3, #0]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d1e7      	bne.n	80096c6 <USBD_GetString+0x6a>
 80096f6:	e000      	b.n	80096fa <USBD_GetString+0x9e>
    return;
 80096f8:	bf00      	nop
  }
}
 80096fa:	3718      	adds	r7, #24
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}

08009700 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009700:	b480      	push	{r7}
 8009702:	b085      	sub	sp, #20
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009708:	2300      	movs	r3, #0
 800970a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009710:	e005      	b.n	800971e <USBD_GetLen+0x1e>
  {
    len++;
 8009712:	7bfb      	ldrb	r3, [r7, #15]
 8009714:	3301      	adds	r3, #1
 8009716:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	3301      	adds	r3, #1
 800971c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	781b      	ldrb	r3, [r3, #0]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d1f5      	bne.n	8009712 <USBD_GetLen+0x12>
  }

  return len;
 8009726:	7bfb      	ldrb	r3, [r7, #15]
}
 8009728:	4618      	mov	r0, r3
 800972a:	3714      	adds	r7, #20
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr

08009734 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b084      	sub	sp, #16
 8009738:	af00      	add	r7, sp, #0
 800973a:	60f8      	str	r0, [r7, #12]
 800973c:	60b9      	str	r1, [r7, #8]
 800973e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	2202      	movs	r2, #2
 8009744:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	687a      	ldr	r2, [r7, #4]
 800974c:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	68ba      	ldr	r2, [r7, #8]
 8009752:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	687a      	ldr	r2, [r7, #4]
 8009758:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	68ba      	ldr	r2, [r7, #8]
 800975e:	2100      	movs	r1, #0
 8009760:	68f8      	ldr	r0, [r7, #12]
 8009762:	f004 f958 	bl	800da16 <USBD_LL_Transmit>

  return USBD_OK;
 8009766:	2300      	movs	r3, #0
}
 8009768:	4618      	mov	r0, r3
 800976a:	3710      	adds	r7, #16
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}

08009770 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b084      	sub	sp, #16
 8009774:	af00      	add	r7, sp, #0
 8009776:	60f8      	str	r0, [r7, #12]
 8009778:	60b9      	str	r1, [r7, #8]
 800977a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	68ba      	ldr	r2, [r7, #8]
 8009780:	2100      	movs	r1, #0
 8009782:	68f8      	ldr	r0, [r7, #12]
 8009784:	f004 f947 	bl	800da16 <USBD_LL_Transmit>

  return USBD_OK;
 8009788:	2300      	movs	r3, #0
}
 800978a:	4618      	mov	r0, r3
 800978c:	3710      	adds	r7, #16
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}

08009792 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009792:	b580      	push	{r7, lr}
 8009794:	b084      	sub	sp, #16
 8009796:	af00      	add	r7, sp, #0
 8009798:	60f8      	str	r0, [r7, #12]
 800979a:	60b9      	str	r1, [r7, #8]
 800979c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2203      	movs	r2, #3
 80097a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	687a      	ldr	r2, [r7, #4]
 80097aa:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	68ba      	ldr	r2, [r7, #8]
 80097b2:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	687a      	ldr	r2, [r7, #4]
 80097ba:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	68ba      	ldr	r2, [r7, #8]
 80097c2:	2100      	movs	r1, #0
 80097c4:	68f8      	ldr	r0, [r7, #12]
 80097c6:	f004 f947 	bl	800da58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80097ca:	2300      	movs	r3, #0
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3710      	adds	r7, #16
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}

080097d4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b084      	sub	sp, #16
 80097d8:	af00      	add	r7, sp, #0
 80097da:	60f8      	str	r0, [r7, #12]
 80097dc:	60b9      	str	r1, [r7, #8]
 80097de:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	68ba      	ldr	r2, [r7, #8]
 80097e4:	2100      	movs	r1, #0
 80097e6:	68f8      	ldr	r0, [r7, #12]
 80097e8:	f004 f936 	bl	800da58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80097ec:	2300      	movs	r3, #0
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3710      	adds	r7, #16
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}

080097f6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80097f6:	b580      	push	{r7, lr}
 80097f8:	b082      	sub	sp, #8
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2204      	movs	r2, #4
 8009802:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009806:	2300      	movs	r3, #0
 8009808:	2200      	movs	r2, #0
 800980a:	2100      	movs	r1, #0
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f004 f902 	bl	800da16 <USBD_LL_Transmit>

  return USBD_OK;
 8009812:	2300      	movs	r3, #0
}
 8009814:	4618      	mov	r0, r3
 8009816:	3708      	adds	r7, #8
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}

0800981c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b082      	sub	sp, #8
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2205      	movs	r2, #5
 8009828:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800982c:	2300      	movs	r3, #0
 800982e:	2200      	movs	r2, #0
 8009830:	2100      	movs	r1, #0
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f004 f910 	bl	800da58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009838:	2300      	movs	r3, #0
}
 800983a:	4618      	mov	r0, r3
 800983c:	3708      	adds	r7, #8
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}

08009842 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009842:	b480      	push	{r7}
 8009844:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8009846:	bf00      	nop
 8009848:	46bd      	mov	sp, r7
 800984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984e:	4770      	bx	lr

08009850 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009850:	b480      	push	{r7}
 8009852:	b085      	sub	sp, #20
 8009854:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009856:	f3ef 8305 	mrs	r3, IPSR
 800985a:	60bb      	str	r3, [r7, #8]
  return(result);
 800985c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800985e:	2b00      	cmp	r3, #0
 8009860:	d10f      	bne.n	8009882 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009862:	f3ef 8310 	mrs	r3, PRIMASK
 8009866:	607b      	str	r3, [r7, #4]
  return(result);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d105      	bne.n	800987a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800986e:	f3ef 8311 	mrs	r3, BASEPRI
 8009872:	603b      	str	r3, [r7, #0]
  return(result);
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d007      	beq.n	800988a <osKernelInitialize+0x3a>
 800987a:	4b0e      	ldr	r3, [pc, #56]	@ (80098b4 <osKernelInitialize+0x64>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	2b02      	cmp	r3, #2
 8009880:	d103      	bne.n	800988a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8009882:	f06f 0305 	mvn.w	r3, #5
 8009886:	60fb      	str	r3, [r7, #12]
 8009888:	e00c      	b.n	80098a4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800988a:	4b0a      	ldr	r3, [pc, #40]	@ (80098b4 <osKernelInitialize+0x64>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d105      	bne.n	800989e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009892:	4b08      	ldr	r3, [pc, #32]	@ (80098b4 <osKernelInitialize+0x64>)
 8009894:	2201      	movs	r2, #1
 8009896:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009898:	2300      	movs	r3, #0
 800989a:	60fb      	str	r3, [r7, #12]
 800989c:	e002      	b.n	80098a4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800989e:	f04f 33ff 	mov.w	r3, #4294967295
 80098a2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80098a4:	68fb      	ldr	r3, [r7, #12]
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3714      	adds	r7, #20
 80098aa:	46bd      	mov	sp, r7
 80098ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b0:	4770      	bx	lr
 80098b2:	bf00      	nop
 80098b4:	200003c8 	.word	0x200003c8

080098b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b084      	sub	sp, #16
 80098bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098be:	f3ef 8305 	mrs	r3, IPSR
 80098c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80098c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d10f      	bne.n	80098ea <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80098ca:	f3ef 8310 	mrs	r3, PRIMASK
 80098ce:	607b      	str	r3, [r7, #4]
  return(result);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d105      	bne.n	80098e2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80098d6:	f3ef 8311 	mrs	r3, BASEPRI
 80098da:	603b      	str	r3, [r7, #0]
  return(result);
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d007      	beq.n	80098f2 <osKernelStart+0x3a>
 80098e2:	4b0f      	ldr	r3, [pc, #60]	@ (8009920 <osKernelStart+0x68>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	2b02      	cmp	r3, #2
 80098e8:	d103      	bne.n	80098f2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80098ea:	f06f 0305 	mvn.w	r3, #5
 80098ee:	60fb      	str	r3, [r7, #12]
 80098f0:	e010      	b.n	8009914 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80098f2:	4b0b      	ldr	r3, [pc, #44]	@ (8009920 <osKernelStart+0x68>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	2b01      	cmp	r3, #1
 80098f8:	d109      	bne.n	800990e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80098fa:	f7ff ffa2 	bl	8009842 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80098fe:	4b08      	ldr	r3, [pc, #32]	@ (8009920 <osKernelStart+0x68>)
 8009900:	2202      	movs	r2, #2
 8009902:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009904:	f001 f8c8 	bl	800aa98 <vTaskStartScheduler>
      stat = osOK;
 8009908:	2300      	movs	r3, #0
 800990a:	60fb      	str	r3, [r7, #12]
 800990c:	e002      	b.n	8009914 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800990e:	f04f 33ff 	mov.w	r3, #4294967295
 8009912:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009914:	68fb      	ldr	r3, [r7, #12]
}
 8009916:	4618      	mov	r0, r3
 8009918:	3710      	adds	r7, #16
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}
 800991e:	bf00      	nop
 8009920:	200003c8 	.word	0x200003c8

08009924 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009924:	b480      	push	{r7}
 8009926:	b085      	sub	sp, #20
 8009928:	af00      	add	r7, sp, #0
 800992a:	60f8      	str	r0, [r7, #12]
 800992c:	60b9      	str	r1, [r7, #8]
 800992e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	4a07      	ldr	r2, [pc, #28]	@ (8009950 <vApplicationGetIdleTaskMemory+0x2c>)
 8009934:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	4a06      	ldr	r2, [pc, #24]	@ (8009954 <vApplicationGetIdleTaskMemory+0x30>)
 800993a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009942:	601a      	str	r2, [r3, #0]
}
 8009944:	bf00      	nop
 8009946:	3714      	adds	r7, #20
 8009948:	46bd      	mov	sp, r7
 800994a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994e:	4770      	bx	lr
 8009950:	200003cc 	.word	0x200003cc
 8009954:	20000474 	.word	0x20000474

08009958 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009958:	b480      	push	{r7}
 800995a:	b085      	sub	sp, #20
 800995c:	af00      	add	r7, sp, #0
 800995e:	60f8      	str	r0, [r7, #12]
 8009960:	60b9      	str	r1, [r7, #8]
 8009962:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	4a07      	ldr	r2, [pc, #28]	@ (8009984 <vApplicationGetTimerTaskMemory+0x2c>)
 8009968:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	4a06      	ldr	r2, [pc, #24]	@ (8009988 <vApplicationGetTimerTaskMemory+0x30>)
 800996e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009976:	601a      	str	r2, [r3, #0]
}
 8009978:	bf00      	nop
 800997a:	3714      	adds	r7, #20
 800997c:	46bd      	mov	sp, r7
 800997e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009982:	4770      	bx	lr
 8009984:	20000874 	.word	0x20000874
 8009988:	2000091c 	.word	0x2000091c

0800998c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800998c:	b480      	push	{r7}
 800998e:	b083      	sub	sp, #12
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f103 0208 	add.w	r2, r3, #8
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f04f 32ff 	mov.w	r2, #4294967295
 80099a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f103 0208 	add.w	r2, r3, #8
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f103 0208 	add.w	r2, r3, #8
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2200      	movs	r2, #0
 80099be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80099c0:	bf00      	nop
 80099c2:	370c      	adds	r7, #12
 80099c4:	46bd      	mov	sp, r7
 80099c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ca:	4770      	bx	lr

080099cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80099cc:	b480      	push	{r7}
 80099ce:	b083      	sub	sp, #12
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2200      	movs	r2, #0
 80099d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80099da:	bf00      	nop
 80099dc:	370c      	adds	r7, #12
 80099de:	46bd      	mov	sp, r7
 80099e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e4:	4770      	bx	lr

080099e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80099e6:	b480      	push	{r7}
 80099e8:	b085      	sub	sp, #20
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
 80099ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	685b      	ldr	r3, [r3, #4]
 80099f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	68fa      	ldr	r2, [r7, #12]
 80099fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	689a      	ldr	r2, [r3, #8]
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	689b      	ldr	r3, [r3, #8]
 8009a08:	683a      	ldr	r2, [r7, #0]
 8009a0a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	683a      	ldr	r2, [r7, #0]
 8009a10:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	687a      	ldr	r2, [r7, #4]
 8009a16:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	1c5a      	adds	r2, r3, #1
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	601a      	str	r2, [r3, #0]
}
 8009a22:	bf00      	nop
 8009a24:	3714      	adds	r7, #20
 8009a26:	46bd      	mov	sp, r7
 8009a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2c:	4770      	bx	lr

08009a2e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009a2e:	b480      	push	{r7}
 8009a30:	b085      	sub	sp, #20
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	6078      	str	r0, [r7, #4]
 8009a36:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a44:	d103      	bne.n	8009a4e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	691b      	ldr	r3, [r3, #16]
 8009a4a:	60fb      	str	r3, [r7, #12]
 8009a4c:	e00c      	b.n	8009a68 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	3308      	adds	r3, #8
 8009a52:	60fb      	str	r3, [r7, #12]
 8009a54:	e002      	b.n	8009a5c <vListInsert+0x2e>
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	60fb      	str	r3, [r7, #12]
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	68ba      	ldr	r2, [r7, #8]
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d2f6      	bcs.n	8009a56 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	685a      	ldr	r2, [r3, #4]
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	683a      	ldr	r2, [r7, #0]
 8009a76:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	68fa      	ldr	r2, [r7, #12]
 8009a7c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	683a      	ldr	r2, [r7, #0]
 8009a82:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	687a      	ldr	r2, [r7, #4]
 8009a88:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	1c5a      	adds	r2, r3, #1
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	601a      	str	r2, [r3, #0]
}
 8009a94:	bf00      	nop
 8009a96:	3714      	adds	r7, #20
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr

08009aa0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b085      	sub	sp, #20
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	691b      	ldr	r3, [r3, #16]
 8009aac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	685b      	ldr	r3, [r3, #4]
 8009ab2:	687a      	ldr	r2, [r7, #4]
 8009ab4:	6892      	ldr	r2, [r2, #8]
 8009ab6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	689b      	ldr	r3, [r3, #8]
 8009abc:	687a      	ldr	r2, [r7, #4]
 8009abe:	6852      	ldr	r2, [r2, #4]
 8009ac0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	685b      	ldr	r3, [r3, #4]
 8009ac6:	687a      	ldr	r2, [r7, #4]
 8009ac8:	429a      	cmp	r2, r3
 8009aca:	d103      	bne.n	8009ad4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	689a      	ldr	r2, [r3, #8]
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	1e5a      	subs	r2, r3, #1
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	3714      	adds	r7, #20
 8009aec:	46bd      	mov	sp, r7
 8009aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af2:	4770      	bx	lr

08009af4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b084      	sub	sp, #16
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
 8009afc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d10d      	bne.n	8009b24 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009b08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b0c:	b672      	cpsid	i
 8009b0e:	f383 8811 	msr	BASEPRI, r3
 8009b12:	f3bf 8f6f 	isb	sy
 8009b16:	f3bf 8f4f 	dsb	sy
 8009b1a:	b662      	cpsie	i
 8009b1c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009b1e:	bf00      	nop
 8009b20:	bf00      	nop
 8009b22:	e7fd      	b.n	8009b20 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8009b24:	f002 f9b2 	bl	800be8c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681a      	ldr	r2, [r3, #0]
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b30:	68f9      	ldr	r1, [r7, #12]
 8009b32:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009b34:	fb01 f303 	mul.w	r3, r1, r3
 8009b38:	441a      	add	r2, r3
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	2200      	movs	r2, #0
 8009b42:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	681a      	ldr	r2, [r3, #0]
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681a      	ldr	r2, [r3, #0]
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b54:	3b01      	subs	r3, #1
 8009b56:	68f9      	ldr	r1, [r7, #12]
 8009b58:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009b5a:	fb01 f303 	mul.w	r3, r1, r3
 8009b5e:	441a      	add	r2, r3
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	22ff      	movs	r2, #255	@ 0xff
 8009b68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	22ff      	movs	r2, #255	@ 0xff
 8009b70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d114      	bne.n	8009ba4 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	691b      	ldr	r3, [r3, #16]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d01a      	beq.n	8009bb8 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	3310      	adds	r3, #16
 8009b86:	4618      	mov	r0, r3
 8009b88:	f001 fa56 	bl	800b038 <xTaskRemoveFromEventList>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d012      	beq.n	8009bb8 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009b92:	4b0d      	ldr	r3, [pc, #52]	@ (8009bc8 <xQueueGenericReset+0xd4>)
 8009b94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b98:	601a      	str	r2, [r3, #0]
 8009b9a:	f3bf 8f4f 	dsb	sy
 8009b9e:	f3bf 8f6f 	isb	sy
 8009ba2:	e009      	b.n	8009bb8 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	3310      	adds	r3, #16
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f7ff feef 	bl	800998c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	3324      	adds	r3, #36	@ 0x24
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f7ff feea 	bl	800998c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009bb8:	f002 f99e 	bl	800bef8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009bbc:	2301      	movs	r3, #1
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3710      	adds	r7, #16
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}
 8009bc6:	bf00      	nop
 8009bc8:	e000ed04 	.word	0xe000ed04

08009bcc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b08e      	sub	sp, #56	@ 0x38
 8009bd0:	af02      	add	r7, sp, #8
 8009bd2:	60f8      	str	r0, [r7, #12]
 8009bd4:	60b9      	str	r1, [r7, #8]
 8009bd6:	607a      	str	r2, [r7, #4]
 8009bd8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d10d      	bne.n	8009bfc <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8009be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009be4:	b672      	cpsid	i
 8009be6:	f383 8811 	msr	BASEPRI, r3
 8009bea:	f3bf 8f6f 	isb	sy
 8009bee:	f3bf 8f4f 	dsb	sy
 8009bf2:	b662      	cpsie	i
 8009bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009bf6:	bf00      	nop
 8009bf8:	bf00      	nop
 8009bfa:	e7fd      	b.n	8009bf8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d10d      	bne.n	8009c1e <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8009c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c06:	b672      	cpsid	i
 8009c08:	f383 8811 	msr	BASEPRI, r3
 8009c0c:	f3bf 8f6f 	isb	sy
 8009c10:	f3bf 8f4f 	dsb	sy
 8009c14:	b662      	cpsie	i
 8009c16:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009c18:	bf00      	nop
 8009c1a:	bf00      	nop
 8009c1c:	e7fd      	b.n	8009c1a <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d002      	beq.n	8009c2a <xQueueGenericCreateStatic+0x5e>
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d001      	beq.n	8009c2e <xQueueGenericCreateStatic+0x62>
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	e000      	b.n	8009c30 <xQueueGenericCreateStatic+0x64>
 8009c2e:	2300      	movs	r3, #0
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d10d      	bne.n	8009c50 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8009c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c38:	b672      	cpsid	i
 8009c3a:	f383 8811 	msr	BASEPRI, r3
 8009c3e:	f3bf 8f6f 	isb	sy
 8009c42:	f3bf 8f4f 	dsb	sy
 8009c46:	b662      	cpsie	i
 8009c48:	623b      	str	r3, [r7, #32]
}
 8009c4a:	bf00      	nop
 8009c4c:	bf00      	nop
 8009c4e:	e7fd      	b.n	8009c4c <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d102      	bne.n	8009c5c <xQueueGenericCreateStatic+0x90>
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d101      	bne.n	8009c60 <xQueueGenericCreateStatic+0x94>
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	e000      	b.n	8009c62 <xQueueGenericCreateStatic+0x96>
 8009c60:	2300      	movs	r3, #0
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d10d      	bne.n	8009c82 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8009c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c6a:	b672      	cpsid	i
 8009c6c:	f383 8811 	msr	BASEPRI, r3
 8009c70:	f3bf 8f6f 	isb	sy
 8009c74:	f3bf 8f4f 	dsb	sy
 8009c78:	b662      	cpsie	i
 8009c7a:	61fb      	str	r3, [r7, #28]
}
 8009c7c:	bf00      	nop
 8009c7e:	bf00      	nop
 8009c80:	e7fd      	b.n	8009c7e <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009c82:	2350      	movs	r3, #80	@ 0x50
 8009c84:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	2b50      	cmp	r3, #80	@ 0x50
 8009c8a:	d00d      	beq.n	8009ca8 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8009c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c90:	b672      	cpsid	i
 8009c92:	f383 8811 	msr	BASEPRI, r3
 8009c96:	f3bf 8f6f 	isb	sy
 8009c9a:	f3bf 8f4f 	dsb	sy
 8009c9e:	b662      	cpsie	i
 8009ca0:	61bb      	str	r3, [r7, #24]
}
 8009ca2:	bf00      	nop
 8009ca4:	bf00      	nop
 8009ca6:	e7fd      	b.n	8009ca4 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009ca8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d00d      	beq.n	8009cd0 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cb6:	2201      	movs	r2, #1
 8009cb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009cbc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cc2:	9300      	str	r3, [sp, #0]
 8009cc4:	4613      	mov	r3, r2
 8009cc6:	687a      	ldr	r2, [r7, #4]
 8009cc8:	68b9      	ldr	r1, [r7, #8]
 8009cca:	68f8      	ldr	r0, [r7, #12]
 8009ccc:	f000 f805 	bl	8009cda <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3730      	adds	r7, #48	@ 0x30
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}

08009cda <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009cda:	b580      	push	{r7, lr}
 8009cdc:	b084      	sub	sp, #16
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	60f8      	str	r0, [r7, #12]
 8009ce2:	60b9      	str	r1, [r7, #8]
 8009ce4:	607a      	str	r2, [r7, #4]
 8009ce6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d103      	bne.n	8009cf6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009cee:	69bb      	ldr	r3, [r7, #24]
 8009cf0:	69ba      	ldr	r2, [r7, #24]
 8009cf2:	601a      	str	r2, [r3, #0]
 8009cf4:	e002      	b.n	8009cfc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009cf6:	69bb      	ldr	r3, [r7, #24]
 8009cf8:	687a      	ldr	r2, [r7, #4]
 8009cfa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009cfc:	69bb      	ldr	r3, [r7, #24]
 8009cfe:	68fa      	ldr	r2, [r7, #12]
 8009d00:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009d02:	69bb      	ldr	r3, [r7, #24]
 8009d04:	68ba      	ldr	r2, [r7, #8]
 8009d06:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009d08:	2101      	movs	r1, #1
 8009d0a:	69b8      	ldr	r0, [r7, #24]
 8009d0c:	f7ff fef2 	bl	8009af4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009d10:	69bb      	ldr	r3, [r7, #24]
 8009d12:	78fa      	ldrb	r2, [r7, #3]
 8009d14:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009d18:	bf00      	nop
 8009d1a:	3710      	adds	r7, #16
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}

08009d20 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b08e      	sub	sp, #56	@ 0x38
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	60f8      	str	r0, [r7, #12]
 8009d28:	60b9      	str	r1, [r7, #8]
 8009d2a:	607a      	str	r2, [r7, #4]
 8009d2c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d10d      	bne.n	8009d58 <xQueueGenericSend+0x38>
	__asm volatile
 8009d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d40:	b672      	cpsid	i
 8009d42:	f383 8811 	msr	BASEPRI, r3
 8009d46:	f3bf 8f6f 	isb	sy
 8009d4a:	f3bf 8f4f 	dsb	sy
 8009d4e:	b662      	cpsie	i
 8009d50:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009d52:	bf00      	nop
 8009d54:	bf00      	nop
 8009d56:	e7fd      	b.n	8009d54 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d103      	bne.n	8009d66 <xQueueGenericSend+0x46>
 8009d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d101      	bne.n	8009d6a <xQueueGenericSend+0x4a>
 8009d66:	2301      	movs	r3, #1
 8009d68:	e000      	b.n	8009d6c <xQueueGenericSend+0x4c>
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d10d      	bne.n	8009d8c <xQueueGenericSend+0x6c>
	__asm volatile
 8009d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d74:	b672      	cpsid	i
 8009d76:	f383 8811 	msr	BASEPRI, r3
 8009d7a:	f3bf 8f6f 	isb	sy
 8009d7e:	f3bf 8f4f 	dsb	sy
 8009d82:	b662      	cpsie	i
 8009d84:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009d86:	bf00      	nop
 8009d88:	bf00      	nop
 8009d8a:	e7fd      	b.n	8009d88 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	2b02      	cmp	r3, #2
 8009d90:	d103      	bne.n	8009d9a <xQueueGenericSend+0x7a>
 8009d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d96:	2b01      	cmp	r3, #1
 8009d98:	d101      	bne.n	8009d9e <xQueueGenericSend+0x7e>
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	e000      	b.n	8009da0 <xQueueGenericSend+0x80>
 8009d9e:	2300      	movs	r3, #0
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d10d      	bne.n	8009dc0 <xQueueGenericSend+0xa0>
	__asm volatile
 8009da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009da8:	b672      	cpsid	i
 8009daa:	f383 8811 	msr	BASEPRI, r3
 8009dae:	f3bf 8f6f 	isb	sy
 8009db2:	f3bf 8f4f 	dsb	sy
 8009db6:	b662      	cpsie	i
 8009db8:	623b      	str	r3, [r7, #32]
}
 8009dba:	bf00      	nop
 8009dbc:	bf00      	nop
 8009dbe:	e7fd      	b.n	8009dbc <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009dc0:	f001 fb08 	bl	800b3d4 <xTaskGetSchedulerState>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d102      	bne.n	8009dd0 <xQueueGenericSend+0xb0>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d101      	bne.n	8009dd4 <xQueueGenericSend+0xb4>
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	e000      	b.n	8009dd6 <xQueueGenericSend+0xb6>
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d10d      	bne.n	8009df6 <xQueueGenericSend+0xd6>
	__asm volatile
 8009dda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dde:	b672      	cpsid	i
 8009de0:	f383 8811 	msr	BASEPRI, r3
 8009de4:	f3bf 8f6f 	isb	sy
 8009de8:	f3bf 8f4f 	dsb	sy
 8009dec:	b662      	cpsie	i
 8009dee:	61fb      	str	r3, [r7, #28]
}
 8009df0:	bf00      	nop
 8009df2:	bf00      	nop
 8009df4:	e7fd      	b.n	8009df2 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009df6:	f002 f849 	bl	800be8c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dfc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e02:	429a      	cmp	r2, r3
 8009e04:	d302      	bcc.n	8009e0c <xQueueGenericSend+0xec>
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	2b02      	cmp	r3, #2
 8009e0a:	d129      	bne.n	8009e60 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009e0c:	683a      	ldr	r2, [r7, #0]
 8009e0e:	68b9      	ldr	r1, [r7, #8]
 8009e10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009e12:	f000 fa1b 	bl	800a24c <prvCopyDataToQueue>
 8009e16:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d010      	beq.n	8009e42 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e22:	3324      	adds	r3, #36	@ 0x24
 8009e24:	4618      	mov	r0, r3
 8009e26:	f001 f907 	bl	800b038 <xTaskRemoveFromEventList>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d013      	beq.n	8009e58 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009e30:	4b3f      	ldr	r3, [pc, #252]	@ (8009f30 <xQueueGenericSend+0x210>)
 8009e32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e36:	601a      	str	r2, [r3, #0]
 8009e38:	f3bf 8f4f 	dsb	sy
 8009e3c:	f3bf 8f6f 	isb	sy
 8009e40:	e00a      	b.n	8009e58 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d007      	beq.n	8009e58 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009e48:	4b39      	ldr	r3, [pc, #228]	@ (8009f30 <xQueueGenericSend+0x210>)
 8009e4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e4e:	601a      	str	r2, [r3, #0]
 8009e50:	f3bf 8f4f 	dsb	sy
 8009e54:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009e58:	f002 f84e 	bl	800bef8 <vPortExitCritical>
				return pdPASS;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	e063      	b.n	8009f28 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d103      	bne.n	8009e6e <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009e66:	f002 f847 	bl	800bef8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	e05c      	b.n	8009f28 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009e6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d106      	bne.n	8009e82 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009e74:	f107 0314 	add.w	r3, r7, #20
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f001 f943 	bl	800b104 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009e7e:	2301      	movs	r3, #1
 8009e80:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009e82:	f002 f839 	bl	800bef8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009e86:	f000 fe7b 	bl	800ab80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009e8a:	f001 ffff 	bl	800be8c <vPortEnterCritical>
 8009e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e90:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009e94:	b25b      	sxtb	r3, r3
 8009e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e9a:	d103      	bne.n	8009ea4 <xQueueGenericSend+0x184>
 8009e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ea6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009eaa:	b25b      	sxtb	r3, r3
 8009eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eb0:	d103      	bne.n	8009eba <xQueueGenericSend+0x19a>
 8009eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009eba:	f002 f81d 	bl	800bef8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009ebe:	1d3a      	adds	r2, r7, #4
 8009ec0:	f107 0314 	add.w	r3, r7, #20
 8009ec4:	4611      	mov	r1, r2
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f001 f932 	bl	800b130 <xTaskCheckForTimeOut>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d124      	bne.n	8009f1c <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009ed2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009ed4:	f000 fab2 	bl	800a43c <prvIsQueueFull>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d018      	beq.n	8009f10 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ee0:	3310      	adds	r3, #16
 8009ee2:	687a      	ldr	r2, [r7, #4]
 8009ee4:	4611      	mov	r1, r2
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f001 f850 	bl	800af8c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009eec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009eee:	f000 fa3d 	bl	800a36c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009ef2:	f000 fe53 	bl	800ab9c <xTaskResumeAll>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	f47f af7c 	bne.w	8009df6 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8009efe:	4b0c      	ldr	r3, [pc, #48]	@ (8009f30 <xQueueGenericSend+0x210>)
 8009f00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f04:	601a      	str	r2, [r3, #0]
 8009f06:	f3bf 8f4f 	dsb	sy
 8009f0a:	f3bf 8f6f 	isb	sy
 8009f0e:	e772      	b.n	8009df6 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009f10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009f12:	f000 fa2b 	bl	800a36c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009f16:	f000 fe41 	bl	800ab9c <xTaskResumeAll>
 8009f1a:	e76c      	b.n	8009df6 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009f1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009f1e:	f000 fa25 	bl	800a36c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009f22:	f000 fe3b 	bl	800ab9c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009f26:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3738      	adds	r7, #56	@ 0x38
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}
 8009f30:	e000ed04 	.word	0xe000ed04

08009f34 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b08e      	sub	sp, #56	@ 0x38
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	60f8      	str	r0, [r7, #12]
 8009f3c:	60b9      	str	r1, [r7, #8]
 8009f3e:	607a      	str	r2, [r7, #4]
 8009f40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d10d      	bne.n	8009f68 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8009f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f50:	b672      	cpsid	i
 8009f52:	f383 8811 	msr	BASEPRI, r3
 8009f56:	f3bf 8f6f 	isb	sy
 8009f5a:	f3bf 8f4f 	dsb	sy
 8009f5e:	b662      	cpsie	i
 8009f60:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009f62:	bf00      	nop
 8009f64:	bf00      	nop
 8009f66:	e7fd      	b.n	8009f64 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d103      	bne.n	8009f76 <xQueueGenericSendFromISR+0x42>
 8009f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d101      	bne.n	8009f7a <xQueueGenericSendFromISR+0x46>
 8009f76:	2301      	movs	r3, #1
 8009f78:	e000      	b.n	8009f7c <xQueueGenericSendFromISR+0x48>
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d10d      	bne.n	8009f9c <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8009f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f84:	b672      	cpsid	i
 8009f86:	f383 8811 	msr	BASEPRI, r3
 8009f8a:	f3bf 8f6f 	isb	sy
 8009f8e:	f3bf 8f4f 	dsb	sy
 8009f92:	b662      	cpsie	i
 8009f94:	623b      	str	r3, [r7, #32]
}
 8009f96:	bf00      	nop
 8009f98:	bf00      	nop
 8009f9a:	e7fd      	b.n	8009f98 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	2b02      	cmp	r3, #2
 8009fa0:	d103      	bne.n	8009faa <xQueueGenericSendFromISR+0x76>
 8009fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fa6:	2b01      	cmp	r3, #1
 8009fa8:	d101      	bne.n	8009fae <xQueueGenericSendFromISR+0x7a>
 8009faa:	2301      	movs	r3, #1
 8009fac:	e000      	b.n	8009fb0 <xQueueGenericSendFromISR+0x7c>
 8009fae:	2300      	movs	r3, #0
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d10d      	bne.n	8009fd0 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8009fb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fb8:	b672      	cpsid	i
 8009fba:	f383 8811 	msr	BASEPRI, r3
 8009fbe:	f3bf 8f6f 	isb	sy
 8009fc2:	f3bf 8f4f 	dsb	sy
 8009fc6:	b662      	cpsie	i
 8009fc8:	61fb      	str	r3, [r7, #28]
}
 8009fca:	bf00      	nop
 8009fcc:	bf00      	nop
 8009fce:	e7fd      	b.n	8009fcc <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009fd0:	f002 f844 	bl	800c05c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009fd4:	f3ef 8211 	mrs	r2, BASEPRI
 8009fd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fdc:	b672      	cpsid	i
 8009fde:	f383 8811 	msr	BASEPRI, r3
 8009fe2:	f3bf 8f6f 	isb	sy
 8009fe6:	f3bf 8f4f 	dsb	sy
 8009fea:	b662      	cpsie	i
 8009fec:	61ba      	str	r2, [r7, #24]
 8009fee:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009ff0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ff6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ffa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	d302      	bcc.n	800a006 <xQueueGenericSendFromISR+0xd2>
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	2b02      	cmp	r3, #2
 800a004:	d12c      	bne.n	800a060 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a008:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a00c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a010:	683a      	ldr	r2, [r7, #0]
 800a012:	68b9      	ldr	r1, [r7, #8]
 800a014:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a016:	f000 f919 	bl	800a24c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a01a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800a01e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a022:	d112      	bne.n	800a04a <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d016      	beq.n	800a05a <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a02c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a02e:	3324      	adds	r3, #36	@ 0x24
 800a030:	4618      	mov	r0, r3
 800a032:	f001 f801 	bl	800b038 <xTaskRemoveFromEventList>
 800a036:	4603      	mov	r3, r0
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d00e      	beq.n	800a05a <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d00b      	beq.n	800a05a <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2201      	movs	r2, #1
 800a046:	601a      	str	r2, [r3, #0]
 800a048:	e007      	b.n	800a05a <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a04a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a04e:	3301      	adds	r3, #1
 800a050:	b2db      	uxtb	r3, r3
 800a052:	b25a      	sxtb	r2, r3
 800a054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a056:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a05a:	2301      	movs	r3, #1
 800a05c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800a05e:	e001      	b.n	800a064 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a060:	2300      	movs	r3, #0
 800a062:	637b      	str	r3, [r7, #52]	@ 0x34
 800a064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a066:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a06e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a072:	4618      	mov	r0, r3
 800a074:	3738      	adds	r7, #56	@ 0x38
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}
	...

0800a07c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b08c      	sub	sp, #48	@ 0x30
 800a080:	af00      	add	r7, sp, #0
 800a082:	60f8      	str	r0, [r7, #12]
 800a084:	60b9      	str	r1, [r7, #8]
 800a086:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a088:	2300      	movs	r3, #0
 800a08a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a092:	2b00      	cmp	r3, #0
 800a094:	d10d      	bne.n	800a0b2 <xQueueReceive+0x36>
	__asm volatile
 800a096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a09a:	b672      	cpsid	i
 800a09c:	f383 8811 	msr	BASEPRI, r3
 800a0a0:	f3bf 8f6f 	isb	sy
 800a0a4:	f3bf 8f4f 	dsb	sy
 800a0a8:	b662      	cpsie	i
 800a0aa:	623b      	str	r3, [r7, #32]
}
 800a0ac:	bf00      	nop
 800a0ae:	bf00      	nop
 800a0b0:	e7fd      	b.n	800a0ae <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d103      	bne.n	800a0c0 <xQueueReceive+0x44>
 800a0b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d101      	bne.n	800a0c4 <xQueueReceive+0x48>
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	e000      	b.n	800a0c6 <xQueueReceive+0x4a>
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d10d      	bne.n	800a0e6 <xQueueReceive+0x6a>
	__asm volatile
 800a0ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0ce:	b672      	cpsid	i
 800a0d0:	f383 8811 	msr	BASEPRI, r3
 800a0d4:	f3bf 8f6f 	isb	sy
 800a0d8:	f3bf 8f4f 	dsb	sy
 800a0dc:	b662      	cpsie	i
 800a0de:	61fb      	str	r3, [r7, #28]
}
 800a0e0:	bf00      	nop
 800a0e2:	bf00      	nop
 800a0e4:	e7fd      	b.n	800a0e2 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a0e6:	f001 f975 	bl	800b3d4 <xTaskGetSchedulerState>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d102      	bne.n	800a0f6 <xQueueReceive+0x7a>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d101      	bne.n	800a0fa <xQueueReceive+0x7e>
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	e000      	b.n	800a0fc <xQueueReceive+0x80>
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d10d      	bne.n	800a11c <xQueueReceive+0xa0>
	__asm volatile
 800a100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a104:	b672      	cpsid	i
 800a106:	f383 8811 	msr	BASEPRI, r3
 800a10a:	f3bf 8f6f 	isb	sy
 800a10e:	f3bf 8f4f 	dsb	sy
 800a112:	b662      	cpsie	i
 800a114:	61bb      	str	r3, [r7, #24]
}
 800a116:	bf00      	nop
 800a118:	bf00      	nop
 800a11a:	e7fd      	b.n	800a118 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a11c:	f001 feb6 	bl	800be8c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a124:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d01f      	beq.n	800a16c <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a12c:	68b9      	ldr	r1, [r7, #8]
 800a12e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a130:	f000 f8f6 	bl	800a320 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a136:	1e5a      	subs	r2, r3, #1
 800a138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a13a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a13c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a13e:	691b      	ldr	r3, [r3, #16]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d00f      	beq.n	800a164 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a146:	3310      	adds	r3, #16
 800a148:	4618      	mov	r0, r3
 800a14a:	f000 ff75 	bl	800b038 <xTaskRemoveFromEventList>
 800a14e:	4603      	mov	r3, r0
 800a150:	2b00      	cmp	r3, #0
 800a152:	d007      	beq.n	800a164 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a154:	4b3c      	ldr	r3, [pc, #240]	@ (800a248 <xQueueReceive+0x1cc>)
 800a156:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a15a:	601a      	str	r2, [r3, #0]
 800a15c:	f3bf 8f4f 	dsb	sy
 800a160:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a164:	f001 fec8 	bl	800bef8 <vPortExitCritical>
				return pdPASS;
 800a168:	2301      	movs	r3, #1
 800a16a:	e069      	b.n	800a240 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d103      	bne.n	800a17a <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a172:	f001 fec1 	bl	800bef8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a176:	2300      	movs	r3, #0
 800a178:	e062      	b.n	800a240 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a17a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d106      	bne.n	800a18e <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a180:	f107 0310 	add.w	r3, r7, #16
 800a184:	4618      	mov	r0, r3
 800a186:	f000 ffbd 	bl	800b104 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a18a:	2301      	movs	r3, #1
 800a18c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a18e:	f001 feb3 	bl	800bef8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a192:	f000 fcf5 	bl	800ab80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a196:	f001 fe79 	bl	800be8c <vPortEnterCritical>
 800a19a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a19c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a1a0:	b25b      	sxtb	r3, r3
 800a1a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1a6:	d103      	bne.n	800a1b0 <xQueueReceive+0x134>
 800a1a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a1b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a1b6:	b25b      	sxtb	r3, r3
 800a1b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1bc:	d103      	bne.n	800a1c6 <xQueueReceive+0x14a>
 800a1be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a1c6:	f001 fe97 	bl	800bef8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a1ca:	1d3a      	adds	r2, r7, #4
 800a1cc:	f107 0310 	add.w	r3, r7, #16
 800a1d0:	4611      	mov	r1, r2
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f000 ffac 	bl	800b130 <xTaskCheckForTimeOut>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d123      	bne.n	800a226 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a1de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a1e0:	f000 f916 	bl	800a410 <prvIsQueueEmpty>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d017      	beq.n	800a21a <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a1ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1ec:	3324      	adds	r3, #36	@ 0x24
 800a1ee:	687a      	ldr	r2, [r7, #4]
 800a1f0:	4611      	mov	r1, r2
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f000 feca 	bl	800af8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a1f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a1fa:	f000 f8b7 	bl	800a36c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a1fe:	f000 fccd 	bl	800ab9c <xTaskResumeAll>
 800a202:	4603      	mov	r3, r0
 800a204:	2b00      	cmp	r3, #0
 800a206:	d189      	bne.n	800a11c <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800a208:	4b0f      	ldr	r3, [pc, #60]	@ (800a248 <xQueueReceive+0x1cc>)
 800a20a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a20e:	601a      	str	r2, [r3, #0]
 800a210:	f3bf 8f4f 	dsb	sy
 800a214:	f3bf 8f6f 	isb	sy
 800a218:	e780      	b.n	800a11c <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a21a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a21c:	f000 f8a6 	bl	800a36c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a220:	f000 fcbc 	bl	800ab9c <xTaskResumeAll>
 800a224:	e77a      	b.n	800a11c <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a226:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a228:	f000 f8a0 	bl	800a36c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a22c:	f000 fcb6 	bl	800ab9c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a230:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a232:	f000 f8ed 	bl	800a410 <prvIsQueueEmpty>
 800a236:	4603      	mov	r3, r0
 800a238:	2b00      	cmp	r3, #0
 800a23a:	f43f af6f 	beq.w	800a11c <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a23e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a240:	4618      	mov	r0, r3
 800a242:	3730      	adds	r7, #48	@ 0x30
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}
 800a248:	e000ed04 	.word	0xe000ed04

0800a24c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b086      	sub	sp, #24
 800a250:	af00      	add	r7, sp, #0
 800a252:	60f8      	str	r0, [r7, #12]
 800a254:	60b9      	str	r1, [r7, #8]
 800a256:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a258:	2300      	movs	r3, #0
 800a25a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a260:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a266:	2b00      	cmp	r3, #0
 800a268:	d10d      	bne.n	800a286 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d14d      	bne.n	800a30e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	689b      	ldr	r3, [r3, #8]
 800a276:	4618      	mov	r0, r3
 800a278:	f001 f8ca 	bl	800b410 <xTaskPriorityDisinherit>
 800a27c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	2200      	movs	r2, #0
 800a282:	609a      	str	r2, [r3, #8]
 800a284:	e043      	b.n	800a30e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d119      	bne.n	800a2c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	6858      	ldr	r0, [r3, #4]
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a294:	461a      	mov	r2, r3
 800a296:	68b9      	ldr	r1, [r7, #8]
 800a298:	f004 fb99 	bl	800e9ce <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	685a      	ldr	r2, [r3, #4]
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2a4:	441a      	add	r2, r3
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	685a      	ldr	r2, [r3, #4]
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	689b      	ldr	r3, [r3, #8]
 800a2b2:	429a      	cmp	r2, r3
 800a2b4:	d32b      	bcc.n	800a30e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681a      	ldr	r2, [r3, #0]
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	605a      	str	r2, [r3, #4]
 800a2be:	e026      	b.n	800a30e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	68d8      	ldr	r0, [r3, #12]
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2c8:	461a      	mov	r2, r3
 800a2ca:	68b9      	ldr	r1, [r7, #8]
 800a2cc:	f004 fb7f 	bl	800e9ce <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	68da      	ldr	r2, [r3, #12]
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2d8:	425b      	negs	r3, r3
 800a2da:	441a      	add	r2, r3
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	68da      	ldr	r2, [r3, #12]
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d207      	bcs.n	800a2fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	689a      	ldr	r2, [r3, #8]
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2f4:	425b      	negs	r3, r3
 800a2f6:	441a      	add	r2, r3
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2b02      	cmp	r3, #2
 800a300:	d105      	bne.n	800a30e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d002      	beq.n	800a30e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	3b01      	subs	r3, #1
 800a30c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	1c5a      	adds	r2, r3, #1
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a316:	697b      	ldr	r3, [r7, #20]
}
 800a318:	4618      	mov	r0, r3
 800a31a:	3718      	adds	r7, #24
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}

0800a320 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b082      	sub	sp, #8
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d018      	beq.n	800a364 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	68da      	ldr	r2, [r3, #12]
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a33a:	441a      	add	r2, r3
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	68da      	ldr	r2, [r3, #12]
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	689b      	ldr	r3, [r3, #8]
 800a348:	429a      	cmp	r2, r3
 800a34a:	d303      	bcc.n	800a354 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681a      	ldr	r2, [r3, #0]
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	68d9      	ldr	r1, [r3, #12]
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a35c:	461a      	mov	r2, r3
 800a35e:	6838      	ldr	r0, [r7, #0]
 800a360:	f004 fb35 	bl	800e9ce <memcpy>
	}
}
 800a364:	bf00      	nop
 800a366:	3708      	adds	r7, #8
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}

0800a36c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b084      	sub	sp, #16
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a374:	f001 fd8a 	bl	800be8c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a37e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a380:	e011      	b.n	800a3a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a386:	2b00      	cmp	r3, #0
 800a388:	d012      	beq.n	800a3b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	3324      	adds	r3, #36	@ 0x24
 800a38e:	4618      	mov	r0, r3
 800a390:	f000 fe52 	bl	800b038 <xTaskRemoveFromEventList>
 800a394:	4603      	mov	r3, r0
 800a396:	2b00      	cmp	r3, #0
 800a398:	d001      	beq.n	800a39e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a39a:	f000 ff31 	bl	800b200 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a39e:	7bfb      	ldrb	r3, [r7, #15]
 800a3a0:	3b01      	subs	r3, #1
 800a3a2:	b2db      	uxtb	r3, r3
 800a3a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a3a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	dce9      	bgt.n	800a382 <prvUnlockQueue+0x16>
 800a3ae:	e000      	b.n	800a3b2 <prvUnlockQueue+0x46>
					break;
 800a3b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	22ff      	movs	r2, #255	@ 0xff
 800a3b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a3ba:	f001 fd9d 	bl	800bef8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a3be:	f001 fd65 	bl	800be8c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a3c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a3ca:	e011      	b.n	800a3f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	691b      	ldr	r3, [r3, #16]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d012      	beq.n	800a3fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	3310      	adds	r3, #16
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f000 fe2d 	bl	800b038 <xTaskRemoveFromEventList>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d001      	beq.n	800a3e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a3e4:	f000 ff0c 	bl	800b200 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a3e8:	7bbb      	ldrb	r3, [r7, #14]
 800a3ea:	3b01      	subs	r3, #1
 800a3ec:	b2db      	uxtb	r3, r3
 800a3ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a3f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	dce9      	bgt.n	800a3cc <prvUnlockQueue+0x60>
 800a3f8:	e000      	b.n	800a3fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a3fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	22ff      	movs	r2, #255	@ 0xff
 800a400:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a404:	f001 fd78 	bl	800bef8 <vPortExitCritical>
}
 800a408:	bf00      	nop
 800a40a:	3710      	adds	r7, #16
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}

0800a410 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a418:	f001 fd38 	bl	800be8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a420:	2b00      	cmp	r3, #0
 800a422:	d102      	bne.n	800a42a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a424:	2301      	movs	r3, #1
 800a426:	60fb      	str	r3, [r7, #12]
 800a428:	e001      	b.n	800a42e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a42a:	2300      	movs	r3, #0
 800a42c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a42e:	f001 fd63 	bl	800bef8 <vPortExitCritical>

	return xReturn;
 800a432:	68fb      	ldr	r3, [r7, #12]
}
 800a434:	4618      	mov	r0, r3
 800a436:	3710      	adds	r7, #16
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}

0800a43c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b084      	sub	sp, #16
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a444:	f001 fd22 	bl	800be8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a450:	429a      	cmp	r2, r3
 800a452:	d102      	bne.n	800a45a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a454:	2301      	movs	r3, #1
 800a456:	60fb      	str	r3, [r7, #12]
 800a458:	e001      	b.n	800a45e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a45a:	2300      	movs	r3, #0
 800a45c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a45e:	f001 fd4b 	bl	800bef8 <vPortExitCritical>

	return xReturn;
 800a462:	68fb      	ldr	r3, [r7, #12]
}
 800a464:	4618      	mov	r0, r3
 800a466:	3710      	adds	r7, #16
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}

0800a46c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a46c:	b480      	push	{r7}
 800a46e:	b085      	sub	sp, #20
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a476:	2300      	movs	r3, #0
 800a478:	60fb      	str	r3, [r7, #12]
 800a47a:	e014      	b.n	800a4a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a47c:	4a0f      	ldr	r2, [pc, #60]	@ (800a4bc <vQueueAddToRegistry+0x50>)
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d10b      	bne.n	800a4a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a488:	490c      	ldr	r1, [pc, #48]	@ (800a4bc <vQueueAddToRegistry+0x50>)
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	683a      	ldr	r2, [r7, #0]
 800a48e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a492:	4a0a      	ldr	r2, [pc, #40]	@ (800a4bc <vQueueAddToRegistry+0x50>)
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	00db      	lsls	r3, r3, #3
 800a498:	4413      	add	r3, r2
 800a49a:	687a      	ldr	r2, [r7, #4]
 800a49c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a49e:	e006      	b.n	800a4ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	3301      	adds	r3, #1
 800a4a4:	60fb      	str	r3, [r7, #12]
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	2b07      	cmp	r3, #7
 800a4aa:	d9e7      	bls.n	800a47c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a4ac:	bf00      	nop
 800a4ae:	bf00      	nop
 800a4b0:	3714      	adds	r7, #20
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b8:	4770      	bx	lr
 800a4ba:	bf00      	nop
 800a4bc:	2000111c 	.word	0x2000111c

0800a4c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b086      	sub	sp, #24
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	60f8      	str	r0, [r7, #12]
 800a4c8:	60b9      	str	r1, [r7, #8]
 800a4ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a4d0:	f001 fcdc 	bl	800be8c <vPortEnterCritical>
 800a4d4:	697b      	ldr	r3, [r7, #20]
 800a4d6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a4da:	b25b      	sxtb	r3, r3
 800a4dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4e0:	d103      	bne.n	800a4ea <vQueueWaitForMessageRestricted+0x2a>
 800a4e2:	697b      	ldr	r3, [r7, #20]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a4ea:	697b      	ldr	r3, [r7, #20]
 800a4ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a4f0:	b25b      	sxtb	r3, r3
 800a4f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4f6:	d103      	bne.n	800a500 <vQueueWaitForMessageRestricted+0x40>
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a500:	f001 fcfa 	bl	800bef8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d106      	bne.n	800a51a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	3324      	adds	r3, #36	@ 0x24
 800a510:	687a      	ldr	r2, [r7, #4]
 800a512:	68b9      	ldr	r1, [r7, #8]
 800a514:	4618      	mov	r0, r3
 800a516:	f000 fd61 	bl	800afdc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a51a:	6978      	ldr	r0, [r7, #20]
 800a51c:	f7ff ff26 	bl	800a36c <prvUnlockQueue>
	}
 800a520:	bf00      	nop
 800a522:	3718      	adds	r7, #24
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}

0800a528 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b08e      	sub	sp, #56	@ 0x38
 800a52c:	af04      	add	r7, sp, #16
 800a52e:	60f8      	str	r0, [r7, #12]
 800a530:	60b9      	str	r1, [r7, #8]
 800a532:	607a      	str	r2, [r7, #4]
 800a534:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a536:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d10d      	bne.n	800a558 <xTaskCreateStatic+0x30>
	__asm volatile
 800a53c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a540:	b672      	cpsid	i
 800a542:	f383 8811 	msr	BASEPRI, r3
 800a546:	f3bf 8f6f 	isb	sy
 800a54a:	f3bf 8f4f 	dsb	sy
 800a54e:	b662      	cpsie	i
 800a550:	623b      	str	r3, [r7, #32]
}
 800a552:	bf00      	nop
 800a554:	bf00      	nop
 800a556:	e7fd      	b.n	800a554 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800a558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d10d      	bne.n	800a57a <xTaskCreateStatic+0x52>
	__asm volatile
 800a55e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a562:	b672      	cpsid	i
 800a564:	f383 8811 	msr	BASEPRI, r3
 800a568:	f3bf 8f6f 	isb	sy
 800a56c:	f3bf 8f4f 	dsb	sy
 800a570:	b662      	cpsie	i
 800a572:	61fb      	str	r3, [r7, #28]
}
 800a574:	bf00      	nop
 800a576:	bf00      	nop
 800a578:	e7fd      	b.n	800a576 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a57a:	23a8      	movs	r3, #168	@ 0xa8
 800a57c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	2ba8      	cmp	r3, #168	@ 0xa8
 800a582:	d00d      	beq.n	800a5a0 <xTaskCreateStatic+0x78>
	__asm volatile
 800a584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a588:	b672      	cpsid	i
 800a58a:	f383 8811 	msr	BASEPRI, r3
 800a58e:	f3bf 8f6f 	isb	sy
 800a592:	f3bf 8f4f 	dsb	sy
 800a596:	b662      	cpsie	i
 800a598:	61bb      	str	r3, [r7, #24]
}
 800a59a:	bf00      	nop
 800a59c:	bf00      	nop
 800a59e:	e7fd      	b.n	800a59c <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a5a0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a5a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d01e      	beq.n	800a5e6 <xTaskCreateStatic+0xbe>
 800a5a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d01b      	beq.n	800a5e6 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a5ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5b0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a5b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a5b6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a5b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ba:	2202      	movs	r2, #2
 800a5bc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	9303      	str	r3, [sp, #12]
 800a5c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5c6:	9302      	str	r3, [sp, #8]
 800a5c8:	f107 0314 	add.w	r3, r7, #20
 800a5cc:	9301      	str	r3, [sp, #4]
 800a5ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5d0:	9300      	str	r3, [sp, #0]
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	687a      	ldr	r2, [r7, #4]
 800a5d6:	68b9      	ldr	r1, [r7, #8]
 800a5d8:	68f8      	ldr	r0, [r7, #12]
 800a5da:	f000 f851 	bl	800a680 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a5de:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a5e0:	f000 f8f8 	bl	800a7d4 <prvAddNewTaskToReadyList>
 800a5e4:	e001      	b.n	800a5ea <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a5ea:	697b      	ldr	r3, [r7, #20]
	}
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	3728      	adds	r7, #40	@ 0x28
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}

0800a5f4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b08c      	sub	sp, #48	@ 0x30
 800a5f8:	af04      	add	r7, sp, #16
 800a5fa:	60f8      	str	r0, [r7, #12]
 800a5fc:	60b9      	str	r1, [r7, #8]
 800a5fe:	603b      	str	r3, [r7, #0]
 800a600:	4613      	mov	r3, r2
 800a602:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a604:	88fb      	ldrh	r3, [r7, #6]
 800a606:	009b      	lsls	r3, r3, #2
 800a608:	4618      	mov	r0, r3
 800a60a:	f001 fd6d 	bl	800c0e8 <pvPortMalloc>
 800a60e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d00e      	beq.n	800a634 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a616:	20a8      	movs	r0, #168	@ 0xa8
 800a618:	f001 fd66 	bl	800c0e8 <pvPortMalloc>
 800a61c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a61e:	69fb      	ldr	r3, [r7, #28]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d003      	beq.n	800a62c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a624:	69fb      	ldr	r3, [r7, #28]
 800a626:	697a      	ldr	r2, [r7, #20]
 800a628:	631a      	str	r2, [r3, #48]	@ 0x30
 800a62a:	e005      	b.n	800a638 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a62c:	6978      	ldr	r0, [r7, #20]
 800a62e:	f001 fe29 	bl	800c284 <vPortFree>
 800a632:	e001      	b.n	800a638 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a634:	2300      	movs	r3, #0
 800a636:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a638:	69fb      	ldr	r3, [r7, #28]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d017      	beq.n	800a66e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a63e:	69fb      	ldr	r3, [r7, #28]
 800a640:	2200      	movs	r2, #0
 800a642:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a646:	88fa      	ldrh	r2, [r7, #6]
 800a648:	2300      	movs	r3, #0
 800a64a:	9303      	str	r3, [sp, #12]
 800a64c:	69fb      	ldr	r3, [r7, #28]
 800a64e:	9302      	str	r3, [sp, #8]
 800a650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a652:	9301      	str	r3, [sp, #4]
 800a654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a656:	9300      	str	r3, [sp, #0]
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	68b9      	ldr	r1, [r7, #8]
 800a65c:	68f8      	ldr	r0, [r7, #12]
 800a65e:	f000 f80f 	bl	800a680 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a662:	69f8      	ldr	r0, [r7, #28]
 800a664:	f000 f8b6 	bl	800a7d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a668:	2301      	movs	r3, #1
 800a66a:	61bb      	str	r3, [r7, #24]
 800a66c:	e002      	b.n	800a674 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a66e:	f04f 33ff 	mov.w	r3, #4294967295
 800a672:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a674:	69bb      	ldr	r3, [r7, #24]
	}
 800a676:	4618      	mov	r0, r3
 800a678:	3720      	adds	r7, #32
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}
	...

0800a680 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b088      	sub	sp, #32
 800a684:	af00      	add	r7, sp, #0
 800a686:	60f8      	str	r0, [r7, #12]
 800a688:	60b9      	str	r1, [r7, #8]
 800a68a:	607a      	str	r2, [r7, #4]
 800a68c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a68e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a690:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	009b      	lsls	r3, r3, #2
 800a696:	461a      	mov	r2, r3
 800a698:	21a5      	movs	r1, #165	@ 0xa5
 800a69a:	f004 f8aa 	bl	800e7f2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a69e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a6a2:	6879      	ldr	r1, [r7, #4]
 800a6a4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800a6a8:	440b      	add	r3, r1
 800a6aa:	009b      	lsls	r3, r3, #2
 800a6ac:	4413      	add	r3, r2
 800a6ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a6b0:	69bb      	ldr	r3, [r7, #24]
 800a6b2:	f023 0307 	bic.w	r3, r3, #7
 800a6b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a6b8:	69bb      	ldr	r3, [r7, #24]
 800a6ba:	f003 0307 	and.w	r3, r3, #7
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d00d      	beq.n	800a6de <prvInitialiseNewTask+0x5e>
	__asm volatile
 800a6c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6c6:	b672      	cpsid	i
 800a6c8:	f383 8811 	msr	BASEPRI, r3
 800a6cc:	f3bf 8f6f 	isb	sy
 800a6d0:	f3bf 8f4f 	dsb	sy
 800a6d4:	b662      	cpsie	i
 800a6d6:	617b      	str	r3, [r7, #20]
}
 800a6d8:	bf00      	nop
 800a6da:	bf00      	nop
 800a6dc:	e7fd      	b.n	800a6da <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d01f      	beq.n	800a724 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	61fb      	str	r3, [r7, #28]
 800a6e8:	e012      	b.n	800a710 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a6ea:	68ba      	ldr	r2, [r7, #8]
 800a6ec:	69fb      	ldr	r3, [r7, #28]
 800a6ee:	4413      	add	r3, r2
 800a6f0:	7819      	ldrb	r1, [r3, #0]
 800a6f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a6f4:	69fb      	ldr	r3, [r7, #28]
 800a6f6:	4413      	add	r3, r2
 800a6f8:	3334      	adds	r3, #52	@ 0x34
 800a6fa:	460a      	mov	r2, r1
 800a6fc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a6fe:	68ba      	ldr	r2, [r7, #8]
 800a700:	69fb      	ldr	r3, [r7, #28]
 800a702:	4413      	add	r3, r2
 800a704:	781b      	ldrb	r3, [r3, #0]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d006      	beq.n	800a718 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a70a:	69fb      	ldr	r3, [r7, #28]
 800a70c:	3301      	adds	r3, #1
 800a70e:	61fb      	str	r3, [r7, #28]
 800a710:	69fb      	ldr	r3, [r7, #28]
 800a712:	2b0f      	cmp	r3, #15
 800a714:	d9e9      	bls.n	800a6ea <prvInitialiseNewTask+0x6a>
 800a716:	e000      	b.n	800a71a <prvInitialiseNewTask+0x9a>
			{
				break;
 800a718:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a71a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a71c:	2200      	movs	r2, #0
 800a71e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a722:	e003      	b.n	800a72c <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a726:	2200      	movs	r2, #0
 800a728:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a72c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a72e:	2b37      	cmp	r3, #55	@ 0x37
 800a730:	d901      	bls.n	800a736 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a732:	2337      	movs	r3, #55	@ 0x37
 800a734:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a738:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a73a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a73c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a73e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a740:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a744:	2200      	movs	r2, #0
 800a746:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a74a:	3304      	adds	r3, #4
 800a74c:	4618      	mov	r0, r3
 800a74e:	f7ff f93d 	bl	80099cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a754:	3318      	adds	r3, #24
 800a756:	4618      	mov	r0, r3
 800a758:	f7ff f938 	bl	80099cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a75c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a75e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a760:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a764:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a76a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a76c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a76e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a770:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a774:	2200      	movs	r2, #0
 800a776:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a77a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a77c:	2200      	movs	r2, #0
 800a77e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a784:	3354      	adds	r3, #84	@ 0x54
 800a786:	224c      	movs	r2, #76	@ 0x4c
 800a788:	2100      	movs	r1, #0
 800a78a:	4618      	mov	r0, r3
 800a78c:	f004 f831 	bl	800e7f2 <memset>
 800a790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a792:	4a0d      	ldr	r2, [pc, #52]	@ (800a7c8 <prvInitialiseNewTask+0x148>)
 800a794:	659a      	str	r2, [r3, #88]	@ 0x58
 800a796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a798:	4a0c      	ldr	r2, [pc, #48]	@ (800a7cc <prvInitialiseNewTask+0x14c>)
 800a79a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a79c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a79e:	4a0c      	ldr	r2, [pc, #48]	@ (800a7d0 <prvInitialiseNewTask+0x150>)
 800a7a0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a7a2:	683a      	ldr	r2, [r7, #0]
 800a7a4:	68f9      	ldr	r1, [r7, #12]
 800a7a6:	69b8      	ldr	r0, [r7, #24]
 800a7a8:	f001 fa62 	bl	800bc70 <pxPortInitialiseStack>
 800a7ac:	4602      	mov	r2, r0
 800a7ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7b0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a7b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d002      	beq.n	800a7be <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a7b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a7bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a7be:	bf00      	nop
 800a7c0:	3720      	adds	r7, #32
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}
 800a7c6:	bf00      	nop
 800a7c8:	2000fbd8 	.word	0x2000fbd8
 800a7cc:	2000fc40 	.word	0x2000fc40
 800a7d0:	2000fca8 	.word	0x2000fca8

0800a7d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b082      	sub	sp, #8
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a7dc:	f001 fb56 	bl	800be8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a7e0:	4b2d      	ldr	r3, [pc, #180]	@ (800a898 <prvAddNewTaskToReadyList+0xc4>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	3301      	adds	r3, #1
 800a7e6:	4a2c      	ldr	r2, [pc, #176]	@ (800a898 <prvAddNewTaskToReadyList+0xc4>)
 800a7e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a7ea:	4b2c      	ldr	r3, [pc, #176]	@ (800a89c <prvAddNewTaskToReadyList+0xc8>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d109      	bne.n	800a806 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a7f2:	4a2a      	ldr	r2, [pc, #168]	@ (800a89c <prvAddNewTaskToReadyList+0xc8>)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a7f8:	4b27      	ldr	r3, [pc, #156]	@ (800a898 <prvAddNewTaskToReadyList+0xc4>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	2b01      	cmp	r3, #1
 800a7fe:	d110      	bne.n	800a822 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a800:	f000 fd22 	bl	800b248 <prvInitialiseTaskLists>
 800a804:	e00d      	b.n	800a822 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a806:	4b26      	ldr	r3, [pc, #152]	@ (800a8a0 <prvAddNewTaskToReadyList+0xcc>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d109      	bne.n	800a822 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a80e:	4b23      	ldr	r3, [pc, #140]	@ (800a89c <prvAddNewTaskToReadyList+0xc8>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a818:	429a      	cmp	r2, r3
 800a81a:	d802      	bhi.n	800a822 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a81c:	4a1f      	ldr	r2, [pc, #124]	@ (800a89c <prvAddNewTaskToReadyList+0xc8>)
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a822:	4b20      	ldr	r3, [pc, #128]	@ (800a8a4 <prvAddNewTaskToReadyList+0xd0>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	3301      	adds	r3, #1
 800a828:	4a1e      	ldr	r2, [pc, #120]	@ (800a8a4 <prvAddNewTaskToReadyList+0xd0>)
 800a82a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a82c:	4b1d      	ldr	r3, [pc, #116]	@ (800a8a4 <prvAddNewTaskToReadyList+0xd0>)
 800a82e:	681a      	ldr	r2, [r3, #0]
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a838:	4b1b      	ldr	r3, [pc, #108]	@ (800a8a8 <prvAddNewTaskToReadyList+0xd4>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	429a      	cmp	r2, r3
 800a83e:	d903      	bls.n	800a848 <prvAddNewTaskToReadyList+0x74>
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a844:	4a18      	ldr	r2, [pc, #96]	@ (800a8a8 <prvAddNewTaskToReadyList+0xd4>)
 800a846:	6013      	str	r3, [r2, #0]
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a84c:	4613      	mov	r3, r2
 800a84e:	009b      	lsls	r3, r3, #2
 800a850:	4413      	add	r3, r2
 800a852:	009b      	lsls	r3, r3, #2
 800a854:	4a15      	ldr	r2, [pc, #84]	@ (800a8ac <prvAddNewTaskToReadyList+0xd8>)
 800a856:	441a      	add	r2, r3
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	3304      	adds	r3, #4
 800a85c:	4619      	mov	r1, r3
 800a85e:	4610      	mov	r0, r2
 800a860:	f7ff f8c1 	bl	80099e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a864:	f001 fb48 	bl	800bef8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a868:	4b0d      	ldr	r3, [pc, #52]	@ (800a8a0 <prvAddNewTaskToReadyList+0xcc>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d00e      	beq.n	800a88e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a870:	4b0a      	ldr	r3, [pc, #40]	@ (800a89c <prvAddNewTaskToReadyList+0xc8>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d207      	bcs.n	800a88e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a87e:	4b0c      	ldr	r3, [pc, #48]	@ (800a8b0 <prvAddNewTaskToReadyList+0xdc>)
 800a880:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a884:	601a      	str	r2, [r3, #0]
 800a886:	f3bf 8f4f 	dsb	sy
 800a88a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a88e:	bf00      	nop
 800a890:	3708      	adds	r7, #8
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}
 800a896:	bf00      	nop
 800a898:	20001630 	.word	0x20001630
 800a89c:	2000115c 	.word	0x2000115c
 800a8a0:	2000163c 	.word	0x2000163c
 800a8a4:	2000164c 	.word	0x2000164c
 800a8a8:	20001638 	.word	0x20001638
 800a8ac:	20001160 	.word	0x20001160
 800a8b0:	e000ed04 	.word	0xe000ed04

0800a8b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b084      	sub	sp, #16
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d01a      	beq.n	800a8fc <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a8c6:	4b15      	ldr	r3, [pc, #84]	@ (800a91c <vTaskDelay+0x68>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d00d      	beq.n	800a8ea <vTaskDelay+0x36>
	__asm volatile
 800a8ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8d2:	b672      	cpsid	i
 800a8d4:	f383 8811 	msr	BASEPRI, r3
 800a8d8:	f3bf 8f6f 	isb	sy
 800a8dc:	f3bf 8f4f 	dsb	sy
 800a8e0:	b662      	cpsie	i
 800a8e2:	60bb      	str	r3, [r7, #8]
}
 800a8e4:	bf00      	nop
 800a8e6:	bf00      	nop
 800a8e8:	e7fd      	b.n	800a8e6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800a8ea:	f000 f949 	bl	800ab80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a8ee:	2100      	movs	r1, #0
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	f000 fe01 	bl	800b4f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a8f6:	f000 f951 	bl	800ab9c <xTaskResumeAll>
 800a8fa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d107      	bne.n	800a912 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800a902:	4b07      	ldr	r3, [pc, #28]	@ (800a920 <vTaskDelay+0x6c>)
 800a904:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a908:	601a      	str	r2, [r3, #0]
 800a90a:	f3bf 8f4f 	dsb	sy
 800a90e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a912:	bf00      	nop
 800a914:	3710      	adds	r7, #16
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}
 800a91a:	bf00      	nop
 800a91c:	20001658 	.word	0x20001658
 800a920:	e000ed04 	.word	0xe000ed04

0800a924 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
	{
 800a924:	b580      	push	{r7, lr}
 800a926:	b084      	sub	sp, #16
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
	TCB_t const *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 800a92c:	f001 faae 	bl	800be8c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the task
			that called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d102      	bne.n	800a93c <uxTaskPriorityGet+0x18>
 800a936:	4b07      	ldr	r3, [pc, #28]	@ (800a954 <uxTaskPriorityGet+0x30>)
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	e000      	b.n	800a93e <uxTaskPriorityGet+0x1a>
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a944:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
 800a946:	f001 fad7 	bl	800bef8 <vPortExitCritical>

		return uxReturn;
 800a94a:	68bb      	ldr	r3, [r7, #8]
	}
 800a94c:	4618      	mov	r0, r3
 800a94e:	3710      	adds	r7, #16
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}
 800a954:	2000115c 	.word	0x2000115c

0800a958 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b088      	sub	sp, #32
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
 800a960:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 800a962:	2300      	movs	r3, #0
 800a964:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	2b37      	cmp	r3, #55	@ 0x37
 800a96a:	d90d      	bls.n	800a988 <vTaskPrioritySet+0x30>
	__asm volatile
 800a96c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a970:	b672      	cpsid	i
 800a972:	f383 8811 	msr	BASEPRI, r3
 800a976:	f3bf 8f6f 	isb	sy
 800a97a:	f3bf 8f4f 	dsb	sy
 800a97e:	b662      	cpsie	i
 800a980:	60fb      	str	r3, [r7, #12]
}
 800a982:	bf00      	nop
 800a984:	bf00      	nop
 800a986:	e7fd      	b.n	800a984 <vTaskPrioritySet+0x2c>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	2b37      	cmp	r3, #55	@ 0x37
 800a98c:	d901      	bls.n	800a992 <vTaskPrioritySet+0x3a>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a98e:	2337      	movs	r3, #55	@ 0x37
 800a990:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 800a992:	f001 fa7b 	bl	800be8c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d102      	bne.n	800a9a2 <vTaskPrioritySet+0x4a>
 800a99c:	4b3a      	ldr	r3, [pc, #232]	@ (800aa88 <vTaskPrioritySet+0x130>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	e000      	b.n	800a9a4 <vTaskPrioritySet+0x4c>
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800a9a6:	69bb      	ldr	r3, [r7, #24]
 800a9a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a9aa:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 800a9ac:	697a      	ldr	r2, [r7, #20]
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	429a      	cmp	r2, r3
 800a9b2:	d063      	beq.n	800aa7c <vTaskPrioritySet+0x124>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 800a9b4:	683a      	ldr	r2, [r7, #0]
 800a9b6:	697b      	ldr	r3, [r7, #20]
 800a9b8:	429a      	cmp	r2, r3
 800a9ba:	d90d      	bls.n	800a9d8 <vTaskPrioritySet+0x80>
				{
					if( pxTCB != pxCurrentTCB )
 800a9bc:	4b32      	ldr	r3, [pc, #200]	@ (800aa88 <vTaskPrioritySet+0x130>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	69ba      	ldr	r2, [r7, #24]
 800a9c2:	429a      	cmp	r2, r3
 800a9c4:	d00f      	beq.n	800a9e6 <vTaskPrioritySet+0x8e>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800a9c6:	4b30      	ldr	r3, [pc, #192]	@ (800aa88 <vTaskPrioritySet+0x130>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9cc:	683a      	ldr	r2, [r7, #0]
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	d309      	bcc.n	800a9e6 <vTaskPrioritySet+0x8e>
						{
							xYieldRequired = pdTRUE;
 800a9d2:	2301      	movs	r3, #1
 800a9d4:	61fb      	str	r3, [r7, #28]
 800a9d6:	e006      	b.n	800a9e6 <vTaskPrioritySet+0x8e>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 800a9d8:	4b2b      	ldr	r3, [pc, #172]	@ (800aa88 <vTaskPrioritySet+0x130>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	69ba      	ldr	r2, [r7, #24]
 800a9de:	429a      	cmp	r2, r3
 800a9e0:	d101      	bne.n	800a9e6 <vTaskPrioritySet+0x8e>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a9e6:	69bb      	ldr	r3, [r7, #24]
 800a9e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9ea:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800a9ec:	69bb      	ldr	r3, [r7, #24]
 800a9ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a9f0:	69bb      	ldr	r3, [r7, #24]
 800a9f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	d102      	bne.n	800a9fe <vTaskPrioritySet+0xa6>
					{
						pxTCB->uxPriority = uxNewPriority;
 800a9f8:	69bb      	ldr	r3, [r7, #24]
 800a9fa:	683a      	ldr	r2, [r7, #0]
 800a9fc:	62da      	str	r2, [r3, #44]	@ 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 800a9fe:	69bb      	ldr	r3, [r7, #24]
 800aa00:	683a      	ldr	r2, [r7, #0]
 800aa02:	64da      	str	r2, [r3, #76]	@ 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800aa04:	69bb      	ldr	r3, [r7, #24]
 800aa06:	699b      	ldr	r3, [r3, #24]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	db04      	blt.n	800aa16 <vTaskPrioritySet+0xbe>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800aa12:	69bb      	ldr	r3, [r7, #24]
 800aa14:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800aa16:	69bb      	ldr	r3, [r7, #24]
 800aa18:	6959      	ldr	r1, [r3, #20]
 800aa1a:	693a      	ldr	r2, [r7, #16]
 800aa1c:	4613      	mov	r3, r2
 800aa1e:	009b      	lsls	r3, r3, #2
 800aa20:	4413      	add	r3, r2
 800aa22:	009b      	lsls	r3, r3, #2
 800aa24:	4a19      	ldr	r2, [pc, #100]	@ (800aa8c <vTaskPrioritySet+0x134>)
 800aa26:	4413      	add	r3, r2
 800aa28:	4299      	cmp	r1, r3
 800aa2a:	d11c      	bne.n	800aa66 <vTaskPrioritySet+0x10e>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa2c:	69bb      	ldr	r3, [r7, #24]
 800aa2e:	3304      	adds	r3, #4
 800aa30:	4618      	mov	r0, r3
 800aa32:	f7ff f835 	bl	8009aa0 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 800aa36:	69bb      	ldr	r3, [r7, #24]
 800aa38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa3a:	4b15      	ldr	r3, [pc, #84]	@ (800aa90 <vTaskPrioritySet+0x138>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	429a      	cmp	r2, r3
 800aa40:	d903      	bls.n	800aa4a <vTaskPrioritySet+0xf2>
 800aa42:	69bb      	ldr	r3, [r7, #24]
 800aa44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa46:	4a12      	ldr	r2, [pc, #72]	@ (800aa90 <vTaskPrioritySet+0x138>)
 800aa48:	6013      	str	r3, [r2, #0]
 800aa4a:	69bb      	ldr	r3, [r7, #24]
 800aa4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa4e:	4613      	mov	r3, r2
 800aa50:	009b      	lsls	r3, r3, #2
 800aa52:	4413      	add	r3, r2
 800aa54:	009b      	lsls	r3, r3, #2
 800aa56:	4a0d      	ldr	r2, [pc, #52]	@ (800aa8c <vTaskPrioritySet+0x134>)
 800aa58:	441a      	add	r2, r3
 800aa5a:	69bb      	ldr	r3, [r7, #24]
 800aa5c:	3304      	adds	r3, #4
 800aa5e:	4619      	mov	r1, r3
 800aa60:	4610      	mov	r0, r2
 800aa62:	f7fe ffc0 	bl	80099e6 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 800aa66:	69fb      	ldr	r3, [r7, #28]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d007      	beq.n	800aa7c <vTaskPrioritySet+0x124>
				{
					taskYIELD_IF_USING_PREEMPTION();
 800aa6c:	4b09      	ldr	r3, [pc, #36]	@ (800aa94 <vTaskPrioritySet+0x13c>)
 800aa6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa72:	601a      	str	r2, [r3, #0]
 800aa74:	f3bf 8f4f 	dsb	sy
 800aa78:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 800aa7c:	f001 fa3c 	bl	800bef8 <vPortExitCritical>
	}
 800aa80:	bf00      	nop
 800aa82:	3720      	adds	r7, #32
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}
 800aa88:	2000115c 	.word	0x2000115c
 800aa8c:	20001160 	.word	0x20001160
 800aa90:	20001638 	.word	0x20001638
 800aa94:	e000ed04 	.word	0xe000ed04

0800aa98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b08a      	sub	sp, #40	@ 0x28
 800aa9c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800aaa6:	463a      	mov	r2, r7
 800aaa8:	1d39      	adds	r1, r7, #4
 800aaaa:	f107 0308 	add.w	r3, r7, #8
 800aaae:	4618      	mov	r0, r3
 800aab0:	f7fe ff38 	bl	8009924 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800aab4:	6839      	ldr	r1, [r7, #0]
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	68ba      	ldr	r2, [r7, #8]
 800aaba:	9202      	str	r2, [sp, #8]
 800aabc:	9301      	str	r3, [sp, #4]
 800aabe:	2300      	movs	r3, #0
 800aac0:	9300      	str	r3, [sp, #0]
 800aac2:	2300      	movs	r3, #0
 800aac4:	460a      	mov	r2, r1
 800aac6:	4926      	ldr	r1, [pc, #152]	@ (800ab60 <vTaskStartScheduler+0xc8>)
 800aac8:	4826      	ldr	r0, [pc, #152]	@ (800ab64 <vTaskStartScheduler+0xcc>)
 800aaca:	f7ff fd2d 	bl	800a528 <xTaskCreateStatic>
 800aace:	4603      	mov	r3, r0
 800aad0:	4a25      	ldr	r2, [pc, #148]	@ (800ab68 <vTaskStartScheduler+0xd0>)
 800aad2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800aad4:	4b24      	ldr	r3, [pc, #144]	@ (800ab68 <vTaskStartScheduler+0xd0>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d002      	beq.n	800aae2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800aadc:	2301      	movs	r3, #1
 800aade:	617b      	str	r3, [r7, #20]
 800aae0:	e001      	b.n	800aae6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800aae2:	2300      	movs	r3, #0
 800aae4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	2b01      	cmp	r3, #1
 800aaea:	d102      	bne.n	800aaf2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800aaec:	f000 fd58 	bl	800b5a0 <xTimerCreateTimerTask>
 800aaf0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800aaf2:	697b      	ldr	r3, [r7, #20]
 800aaf4:	2b01      	cmp	r3, #1
 800aaf6:	d11d      	bne.n	800ab34 <vTaskStartScheduler+0x9c>
	__asm volatile
 800aaf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aafc:	b672      	cpsid	i
 800aafe:	f383 8811 	msr	BASEPRI, r3
 800ab02:	f3bf 8f6f 	isb	sy
 800ab06:	f3bf 8f4f 	dsb	sy
 800ab0a:	b662      	cpsie	i
 800ab0c:	613b      	str	r3, [r7, #16]
}
 800ab0e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ab10:	4b16      	ldr	r3, [pc, #88]	@ (800ab6c <vTaskStartScheduler+0xd4>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	3354      	adds	r3, #84	@ 0x54
 800ab16:	4a16      	ldr	r2, [pc, #88]	@ (800ab70 <vTaskStartScheduler+0xd8>)
 800ab18:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ab1a:	4b16      	ldr	r3, [pc, #88]	@ (800ab74 <vTaskStartScheduler+0xdc>)
 800ab1c:	f04f 32ff 	mov.w	r2, #4294967295
 800ab20:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ab22:	4b15      	ldr	r3, [pc, #84]	@ (800ab78 <vTaskStartScheduler+0xe0>)
 800ab24:	2201      	movs	r2, #1
 800ab26:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ab28:	4b14      	ldr	r3, [pc, #80]	@ (800ab7c <vTaskStartScheduler+0xe4>)
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ab2e:	f001 f92f 	bl	800bd90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ab32:	e011      	b.n	800ab58 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ab34:	697b      	ldr	r3, [r7, #20]
 800ab36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab3a:	d10d      	bne.n	800ab58 <vTaskStartScheduler+0xc0>
	__asm volatile
 800ab3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab40:	b672      	cpsid	i
 800ab42:	f383 8811 	msr	BASEPRI, r3
 800ab46:	f3bf 8f6f 	isb	sy
 800ab4a:	f3bf 8f4f 	dsb	sy
 800ab4e:	b662      	cpsie	i
 800ab50:	60fb      	str	r3, [r7, #12]
}
 800ab52:	bf00      	nop
 800ab54:	bf00      	nop
 800ab56:	e7fd      	b.n	800ab54 <vTaskStartScheduler+0xbc>
}
 800ab58:	bf00      	nop
 800ab5a:	3718      	adds	r7, #24
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}
 800ab60:	080105f0 	.word	0x080105f0
 800ab64:	0800b219 	.word	0x0800b219
 800ab68:	20001654 	.word	0x20001654
 800ab6c:	2000115c 	.word	0x2000115c
 800ab70:	2000011c 	.word	0x2000011c
 800ab74:	20001650 	.word	0x20001650
 800ab78:	2000163c 	.word	0x2000163c
 800ab7c:	20001634 	.word	0x20001634

0800ab80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ab80:	b480      	push	{r7}
 800ab82:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800ab84:	4b04      	ldr	r3, [pc, #16]	@ (800ab98 <vTaskSuspendAll+0x18>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	3301      	adds	r3, #1
 800ab8a:	4a03      	ldr	r2, [pc, #12]	@ (800ab98 <vTaskSuspendAll+0x18>)
 800ab8c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800ab8e:	bf00      	nop
 800ab90:	46bd      	mov	sp, r7
 800ab92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab96:	4770      	bx	lr
 800ab98:	20001658 	.word	0x20001658

0800ab9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b084      	sub	sp, #16
 800aba0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800aba2:	2300      	movs	r3, #0
 800aba4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800aba6:	2300      	movs	r3, #0
 800aba8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800abaa:	4b43      	ldr	r3, [pc, #268]	@ (800acb8 <xTaskResumeAll+0x11c>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d10d      	bne.n	800abce <xTaskResumeAll+0x32>
	__asm volatile
 800abb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abb6:	b672      	cpsid	i
 800abb8:	f383 8811 	msr	BASEPRI, r3
 800abbc:	f3bf 8f6f 	isb	sy
 800abc0:	f3bf 8f4f 	dsb	sy
 800abc4:	b662      	cpsie	i
 800abc6:	603b      	str	r3, [r7, #0]
}
 800abc8:	bf00      	nop
 800abca:	bf00      	nop
 800abcc:	e7fd      	b.n	800abca <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800abce:	f001 f95d 	bl	800be8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800abd2:	4b39      	ldr	r3, [pc, #228]	@ (800acb8 <xTaskResumeAll+0x11c>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	3b01      	subs	r3, #1
 800abd8:	4a37      	ldr	r2, [pc, #220]	@ (800acb8 <xTaskResumeAll+0x11c>)
 800abda:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800abdc:	4b36      	ldr	r3, [pc, #216]	@ (800acb8 <xTaskResumeAll+0x11c>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d162      	bne.n	800acaa <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800abe4:	4b35      	ldr	r3, [pc, #212]	@ (800acbc <xTaskResumeAll+0x120>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d05e      	beq.n	800acaa <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800abec:	e02f      	b.n	800ac4e <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abee:	4b34      	ldr	r3, [pc, #208]	@ (800acc0 <xTaskResumeAll+0x124>)
 800abf0:	68db      	ldr	r3, [r3, #12]
 800abf2:	68db      	ldr	r3, [r3, #12]
 800abf4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	3318      	adds	r3, #24
 800abfa:	4618      	mov	r0, r3
 800abfc:	f7fe ff50 	bl	8009aa0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	3304      	adds	r3, #4
 800ac04:	4618      	mov	r0, r3
 800ac06:	f7fe ff4b 	bl	8009aa0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac0e:	4b2d      	ldr	r3, [pc, #180]	@ (800acc4 <xTaskResumeAll+0x128>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	429a      	cmp	r2, r3
 800ac14:	d903      	bls.n	800ac1e <xTaskResumeAll+0x82>
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac1a:	4a2a      	ldr	r2, [pc, #168]	@ (800acc4 <xTaskResumeAll+0x128>)
 800ac1c:	6013      	str	r3, [r2, #0]
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac22:	4613      	mov	r3, r2
 800ac24:	009b      	lsls	r3, r3, #2
 800ac26:	4413      	add	r3, r2
 800ac28:	009b      	lsls	r3, r3, #2
 800ac2a:	4a27      	ldr	r2, [pc, #156]	@ (800acc8 <xTaskResumeAll+0x12c>)
 800ac2c:	441a      	add	r2, r3
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	3304      	adds	r3, #4
 800ac32:	4619      	mov	r1, r3
 800ac34:	4610      	mov	r0, r2
 800ac36:	f7fe fed6 	bl	80099e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac3e:	4b23      	ldr	r3, [pc, #140]	@ (800accc <xTaskResumeAll+0x130>)
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac44:	429a      	cmp	r2, r3
 800ac46:	d302      	bcc.n	800ac4e <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 800ac48:	4b21      	ldr	r3, [pc, #132]	@ (800acd0 <xTaskResumeAll+0x134>)
 800ac4a:	2201      	movs	r2, #1
 800ac4c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ac4e:	4b1c      	ldr	r3, [pc, #112]	@ (800acc0 <xTaskResumeAll+0x124>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d1cb      	bne.n	800abee <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d001      	beq.n	800ac60 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ac5c:	f000 fb9a 	bl	800b394 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ac60:	4b1c      	ldr	r3, [pc, #112]	@ (800acd4 <xTaskResumeAll+0x138>)
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d010      	beq.n	800ac8e <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ac6c:	f000 f846 	bl	800acfc <xTaskIncrementTick>
 800ac70:	4603      	mov	r3, r0
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d002      	beq.n	800ac7c <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 800ac76:	4b16      	ldr	r3, [pc, #88]	@ (800acd0 <xTaskResumeAll+0x134>)
 800ac78:	2201      	movs	r2, #1
 800ac7a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	3b01      	subs	r3, #1
 800ac80:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d1f1      	bne.n	800ac6c <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 800ac88:	4b12      	ldr	r3, [pc, #72]	@ (800acd4 <xTaskResumeAll+0x138>)
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ac8e:	4b10      	ldr	r3, [pc, #64]	@ (800acd0 <xTaskResumeAll+0x134>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d009      	beq.n	800acaa <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ac96:	2301      	movs	r3, #1
 800ac98:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ac9a:	4b0f      	ldr	r3, [pc, #60]	@ (800acd8 <xTaskResumeAll+0x13c>)
 800ac9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aca0:	601a      	str	r2, [r3, #0]
 800aca2:	f3bf 8f4f 	dsb	sy
 800aca6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800acaa:	f001 f925 	bl	800bef8 <vPortExitCritical>

	return xAlreadyYielded;
 800acae:	68bb      	ldr	r3, [r7, #8]
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	3710      	adds	r7, #16
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}
 800acb8:	20001658 	.word	0x20001658
 800acbc:	20001630 	.word	0x20001630
 800acc0:	200015f0 	.word	0x200015f0
 800acc4:	20001638 	.word	0x20001638
 800acc8:	20001160 	.word	0x20001160
 800accc:	2000115c 	.word	0x2000115c
 800acd0:	20001644 	.word	0x20001644
 800acd4:	20001640 	.word	0x20001640
 800acd8:	e000ed04 	.word	0xe000ed04

0800acdc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800acdc:	b480      	push	{r7}
 800acde:	b083      	sub	sp, #12
 800ace0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ace2:	4b05      	ldr	r3, [pc, #20]	@ (800acf8 <xTaskGetTickCount+0x1c>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ace8:	687b      	ldr	r3, [r7, #4]
}
 800acea:	4618      	mov	r0, r3
 800acec:	370c      	adds	r7, #12
 800acee:	46bd      	mov	sp, r7
 800acf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf4:	4770      	bx	lr
 800acf6:	bf00      	nop
 800acf8:	20001634 	.word	0x20001634

0800acfc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b086      	sub	sp, #24
 800ad00:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ad02:	2300      	movs	r3, #0
 800ad04:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad06:	4b50      	ldr	r3, [pc, #320]	@ (800ae48 <xTaskIncrementTick+0x14c>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	f040 808c 	bne.w	800ae28 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ad10:	4b4e      	ldr	r3, [pc, #312]	@ (800ae4c <xTaskIncrementTick+0x150>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	3301      	adds	r3, #1
 800ad16:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ad18:	4a4c      	ldr	r2, [pc, #304]	@ (800ae4c <xTaskIncrementTick+0x150>)
 800ad1a:	693b      	ldr	r3, [r7, #16]
 800ad1c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d123      	bne.n	800ad6c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800ad24:	4b4a      	ldr	r3, [pc, #296]	@ (800ae50 <xTaskIncrementTick+0x154>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d00d      	beq.n	800ad4a <xTaskIncrementTick+0x4e>
	__asm volatile
 800ad2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad32:	b672      	cpsid	i
 800ad34:	f383 8811 	msr	BASEPRI, r3
 800ad38:	f3bf 8f6f 	isb	sy
 800ad3c:	f3bf 8f4f 	dsb	sy
 800ad40:	b662      	cpsie	i
 800ad42:	603b      	str	r3, [r7, #0]
}
 800ad44:	bf00      	nop
 800ad46:	bf00      	nop
 800ad48:	e7fd      	b.n	800ad46 <xTaskIncrementTick+0x4a>
 800ad4a:	4b41      	ldr	r3, [pc, #260]	@ (800ae50 <xTaskIncrementTick+0x154>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	60fb      	str	r3, [r7, #12]
 800ad50:	4b40      	ldr	r3, [pc, #256]	@ (800ae54 <xTaskIncrementTick+0x158>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	4a3e      	ldr	r2, [pc, #248]	@ (800ae50 <xTaskIncrementTick+0x154>)
 800ad56:	6013      	str	r3, [r2, #0]
 800ad58:	4a3e      	ldr	r2, [pc, #248]	@ (800ae54 <xTaskIncrementTick+0x158>)
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	6013      	str	r3, [r2, #0]
 800ad5e:	4b3e      	ldr	r3, [pc, #248]	@ (800ae58 <xTaskIncrementTick+0x15c>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	3301      	adds	r3, #1
 800ad64:	4a3c      	ldr	r2, [pc, #240]	@ (800ae58 <xTaskIncrementTick+0x15c>)
 800ad66:	6013      	str	r3, [r2, #0]
 800ad68:	f000 fb14 	bl	800b394 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ad6c:	4b3b      	ldr	r3, [pc, #236]	@ (800ae5c <xTaskIncrementTick+0x160>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	693a      	ldr	r2, [r7, #16]
 800ad72:	429a      	cmp	r2, r3
 800ad74:	d349      	bcc.n	800ae0a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad76:	4b36      	ldr	r3, [pc, #216]	@ (800ae50 <xTaskIncrementTick+0x154>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d104      	bne.n	800ad8a <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad80:	4b36      	ldr	r3, [pc, #216]	@ (800ae5c <xTaskIncrementTick+0x160>)
 800ad82:	f04f 32ff 	mov.w	r2, #4294967295
 800ad86:	601a      	str	r2, [r3, #0]
					break;
 800ad88:	e03f      	b.n	800ae0a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad8a:	4b31      	ldr	r3, [pc, #196]	@ (800ae50 <xTaskIncrementTick+0x154>)
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	68db      	ldr	r3, [r3, #12]
 800ad90:	68db      	ldr	r3, [r3, #12]
 800ad92:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	685b      	ldr	r3, [r3, #4]
 800ad98:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ad9a:	693a      	ldr	r2, [r7, #16]
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	429a      	cmp	r2, r3
 800ada0:	d203      	bcs.n	800adaa <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ada2:	4a2e      	ldr	r2, [pc, #184]	@ (800ae5c <xTaskIncrementTick+0x160>)
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ada8:	e02f      	b.n	800ae0a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	3304      	adds	r3, #4
 800adae:	4618      	mov	r0, r3
 800adb0:	f7fe fe76 	bl	8009aa0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d004      	beq.n	800adc6 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	3318      	adds	r3, #24
 800adc0:	4618      	mov	r0, r3
 800adc2:	f7fe fe6d 	bl	8009aa0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adca:	4b25      	ldr	r3, [pc, #148]	@ (800ae60 <xTaskIncrementTick+0x164>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	429a      	cmp	r2, r3
 800add0:	d903      	bls.n	800adda <xTaskIncrementTick+0xde>
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800add6:	4a22      	ldr	r2, [pc, #136]	@ (800ae60 <xTaskIncrementTick+0x164>)
 800add8:	6013      	str	r3, [r2, #0]
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adde:	4613      	mov	r3, r2
 800ade0:	009b      	lsls	r3, r3, #2
 800ade2:	4413      	add	r3, r2
 800ade4:	009b      	lsls	r3, r3, #2
 800ade6:	4a1f      	ldr	r2, [pc, #124]	@ (800ae64 <xTaskIncrementTick+0x168>)
 800ade8:	441a      	add	r2, r3
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	3304      	adds	r3, #4
 800adee:	4619      	mov	r1, r3
 800adf0:	4610      	mov	r0, r2
 800adf2:	f7fe fdf8 	bl	80099e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adfa:	4b1b      	ldr	r3, [pc, #108]	@ (800ae68 <xTaskIncrementTick+0x16c>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae00:	429a      	cmp	r2, r3
 800ae02:	d3b8      	bcc.n	800ad76 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800ae04:	2301      	movs	r3, #1
 800ae06:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ae08:	e7b5      	b.n	800ad76 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ae0a:	4b17      	ldr	r3, [pc, #92]	@ (800ae68 <xTaskIncrementTick+0x16c>)
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae10:	4914      	ldr	r1, [pc, #80]	@ (800ae64 <xTaskIncrementTick+0x168>)
 800ae12:	4613      	mov	r3, r2
 800ae14:	009b      	lsls	r3, r3, #2
 800ae16:	4413      	add	r3, r2
 800ae18:	009b      	lsls	r3, r3, #2
 800ae1a:	440b      	add	r3, r1
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	2b01      	cmp	r3, #1
 800ae20:	d907      	bls.n	800ae32 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800ae22:	2301      	movs	r3, #1
 800ae24:	617b      	str	r3, [r7, #20]
 800ae26:	e004      	b.n	800ae32 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ae28:	4b10      	ldr	r3, [pc, #64]	@ (800ae6c <xTaskIncrementTick+0x170>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	3301      	adds	r3, #1
 800ae2e:	4a0f      	ldr	r2, [pc, #60]	@ (800ae6c <xTaskIncrementTick+0x170>)
 800ae30:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ae32:	4b0f      	ldr	r3, [pc, #60]	@ (800ae70 <xTaskIncrementTick+0x174>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d001      	beq.n	800ae3e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800ae3e:	697b      	ldr	r3, [r7, #20]
}
 800ae40:	4618      	mov	r0, r3
 800ae42:	3718      	adds	r7, #24
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}
 800ae48:	20001658 	.word	0x20001658
 800ae4c:	20001634 	.word	0x20001634
 800ae50:	200015e8 	.word	0x200015e8
 800ae54:	200015ec 	.word	0x200015ec
 800ae58:	20001648 	.word	0x20001648
 800ae5c:	20001650 	.word	0x20001650
 800ae60:	20001638 	.word	0x20001638
 800ae64:	20001160 	.word	0x20001160
 800ae68:	2000115c 	.word	0x2000115c
 800ae6c:	20001640 	.word	0x20001640
 800ae70:	20001644 	.word	0x20001644

0800ae74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b086      	sub	sp, #24
 800ae78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ae7a:	4b3e      	ldr	r3, [pc, #248]	@ (800af74 <vTaskSwitchContext+0x100>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d003      	beq.n	800ae8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ae82:	4b3d      	ldr	r3, [pc, #244]	@ (800af78 <vTaskSwitchContext+0x104>)
 800ae84:	2201      	movs	r2, #1
 800ae86:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ae88:	e070      	b.n	800af6c <vTaskSwitchContext+0xf8>
		xYieldPending = pdFALSE;
 800ae8a:	4b3b      	ldr	r3, [pc, #236]	@ (800af78 <vTaskSwitchContext+0x104>)
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800ae90:	4b3a      	ldr	r3, [pc, #232]	@ (800af7c <vTaskSwitchContext+0x108>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae96:	613b      	str	r3, [r7, #16]
 800ae98:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800ae9c:	60fb      	str	r3, [r7, #12]
 800ae9e:	693b      	ldr	r3, [r7, #16]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	68fa      	ldr	r2, [r7, #12]
 800aea4:	429a      	cmp	r2, r3
 800aea6:	d111      	bne.n	800aecc <vTaskSwitchContext+0x58>
 800aea8:	693b      	ldr	r3, [r7, #16]
 800aeaa:	3304      	adds	r3, #4
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	68fa      	ldr	r2, [r7, #12]
 800aeb0:	429a      	cmp	r2, r3
 800aeb2:	d10b      	bne.n	800aecc <vTaskSwitchContext+0x58>
 800aeb4:	693b      	ldr	r3, [r7, #16]
 800aeb6:	3308      	adds	r3, #8
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	68fa      	ldr	r2, [r7, #12]
 800aebc:	429a      	cmp	r2, r3
 800aebe:	d105      	bne.n	800aecc <vTaskSwitchContext+0x58>
 800aec0:	693b      	ldr	r3, [r7, #16]
 800aec2:	330c      	adds	r3, #12
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	68fa      	ldr	r2, [r7, #12]
 800aec8:	429a      	cmp	r2, r3
 800aeca:	d008      	beq.n	800aede <vTaskSwitchContext+0x6a>
 800aecc:	4b2b      	ldr	r3, [pc, #172]	@ (800af7c <vTaskSwitchContext+0x108>)
 800aece:	681a      	ldr	r2, [r3, #0]
 800aed0:	4b2a      	ldr	r3, [pc, #168]	@ (800af7c <vTaskSwitchContext+0x108>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	3334      	adds	r3, #52	@ 0x34
 800aed6:	4619      	mov	r1, r3
 800aed8:	4610      	mov	r0, r2
 800aeda:	f7f6 fc94 	bl	8001806 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aede:	4b28      	ldr	r3, [pc, #160]	@ (800af80 <vTaskSwitchContext+0x10c>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	617b      	str	r3, [r7, #20]
 800aee4:	e013      	b.n	800af0e <vTaskSwitchContext+0x9a>
 800aee6:	697b      	ldr	r3, [r7, #20]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d10d      	bne.n	800af08 <vTaskSwitchContext+0x94>
	__asm volatile
 800aeec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aef0:	b672      	cpsid	i
 800aef2:	f383 8811 	msr	BASEPRI, r3
 800aef6:	f3bf 8f6f 	isb	sy
 800aefa:	f3bf 8f4f 	dsb	sy
 800aefe:	b662      	cpsie	i
 800af00:	607b      	str	r3, [r7, #4]
}
 800af02:	bf00      	nop
 800af04:	bf00      	nop
 800af06:	e7fd      	b.n	800af04 <vTaskSwitchContext+0x90>
 800af08:	697b      	ldr	r3, [r7, #20]
 800af0a:	3b01      	subs	r3, #1
 800af0c:	617b      	str	r3, [r7, #20]
 800af0e:	491d      	ldr	r1, [pc, #116]	@ (800af84 <vTaskSwitchContext+0x110>)
 800af10:	697a      	ldr	r2, [r7, #20]
 800af12:	4613      	mov	r3, r2
 800af14:	009b      	lsls	r3, r3, #2
 800af16:	4413      	add	r3, r2
 800af18:	009b      	lsls	r3, r3, #2
 800af1a:	440b      	add	r3, r1
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d0e1      	beq.n	800aee6 <vTaskSwitchContext+0x72>
 800af22:	697a      	ldr	r2, [r7, #20]
 800af24:	4613      	mov	r3, r2
 800af26:	009b      	lsls	r3, r3, #2
 800af28:	4413      	add	r3, r2
 800af2a:	009b      	lsls	r3, r3, #2
 800af2c:	4a15      	ldr	r2, [pc, #84]	@ (800af84 <vTaskSwitchContext+0x110>)
 800af2e:	4413      	add	r3, r2
 800af30:	60bb      	str	r3, [r7, #8]
 800af32:	68bb      	ldr	r3, [r7, #8]
 800af34:	685b      	ldr	r3, [r3, #4]
 800af36:	685a      	ldr	r2, [r3, #4]
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	605a      	str	r2, [r3, #4]
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	685a      	ldr	r2, [r3, #4]
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	3308      	adds	r3, #8
 800af44:	429a      	cmp	r2, r3
 800af46:	d104      	bne.n	800af52 <vTaskSwitchContext+0xde>
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	685b      	ldr	r3, [r3, #4]
 800af4c:	685a      	ldr	r2, [r3, #4]
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	605a      	str	r2, [r3, #4]
 800af52:	68bb      	ldr	r3, [r7, #8]
 800af54:	685b      	ldr	r3, [r3, #4]
 800af56:	68db      	ldr	r3, [r3, #12]
 800af58:	4a08      	ldr	r2, [pc, #32]	@ (800af7c <vTaskSwitchContext+0x108>)
 800af5a:	6013      	str	r3, [r2, #0]
 800af5c:	4a08      	ldr	r2, [pc, #32]	@ (800af80 <vTaskSwitchContext+0x10c>)
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800af62:	4b06      	ldr	r3, [pc, #24]	@ (800af7c <vTaskSwitchContext+0x108>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	3354      	adds	r3, #84	@ 0x54
 800af68:	4a07      	ldr	r2, [pc, #28]	@ (800af88 <vTaskSwitchContext+0x114>)
 800af6a:	6013      	str	r3, [r2, #0]
}
 800af6c:	bf00      	nop
 800af6e:	3718      	adds	r7, #24
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}
 800af74:	20001658 	.word	0x20001658
 800af78:	20001644 	.word	0x20001644
 800af7c:	2000115c 	.word	0x2000115c
 800af80:	20001638 	.word	0x20001638
 800af84:	20001160 	.word	0x20001160
 800af88:	2000011c 	.word	0x2000011c

0800af8c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b084      	sub	sp, #16
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
 800af94:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d10d      	bne.n	800afb8 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800af9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afa0:	b672      	cpsid	i
 800afa2:	f383 8811 	msr	BASEPRI, r3
 800afa6:	f3bf 8f6f 	isb	sy
 800afaa:	f3bf 8f4f 	dsb	sy
 800afae:	b662      	cpsie	i
 800afb0:	60fb      	str	r3, [r7, #12]
}
 800afb2:	bf00      	nop
 800afb4:	bf00      	nop
 800afb6:	e7fd      	b.n	800afb4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800afb8:	4b07      	ldr	r3, [pc, #28]	@ (800afd8 <vTaskPlaceOnEventList+0x4c>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	3318      	adds	r3, #24
 800afbe:	4619      	mov	r1, r3
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f7fe fd34 	bl	8009a2e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800afc6:	2101      	movs	r1, #1
 800afc8:	6838      	ldr	r0, [r7, #0]
 800afca:	f000 fa95 	bl	800b4f8 <prvAddCurrentTaskToDelayedList>
}
 800afce:	bf00      	nop
 800afd0:	3710      	adds	r7, #16
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}
 800afd6:	bf00      	nop
 800afd8:	2000115c 	.word	0x2000115c

0800afdc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b086      	sub	sp, #24
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	60f8      	str	r0, [r7, #12]
 800afe4:	60b9      	str	r1, [r7, #8]
 800afe6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d10d      	bne.n	800b00a <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 800afee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aff2:	b672      	cpsid	i
 800aff4:	f383 8811 	msr	BASEPRI, r3
 800aff8:	f3bf 8f6f 	isb	sy
 800affc:	f3bf 8f4f 	dsb	sy
 800b000:	b662      	cpsie	i
 800b002:	617b      	str	r3, [r7, #20]
}
 800b004:	bf00      	nop
 800b006:	bf00      	nop
 800b008:	e7fd      	b.n	800b006 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b00a:	4b0a      	ldr	r3, [pc, #40]	@ (800b034 <vTaskPlaceOnEventListRestricted+0x58>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	3318      	adds	r3, #24
 800b010:	4619      	mov	r1, r3
 800b012:	68f8      	ldr	r0, [r7, #12]
 800b014:	f7fe fce7 	bl	80099e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d002      	beq.n	800b024 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 800b01e:	f04f 33ff 	mov.w	r3, #4294967295
 800b022:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b024:	6879      	ldr	r1, [r7, #4]
 800b026:	68b8      	ldr	r0, [r7, #8]
 800b028:	f000 fa66 	bl	800b4f8 <prvAddCurrentTaskToDelayedList>
	}
 800b02c:	bf00      	nop
 800b02e:	3718      	adds	r7, #24
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}
 800b034:	2000115c 	.word	0x2000115c

0800b038 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b086      	sub	sp, #24
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	68db      	ldr	r3, [r3, #12]
 800b044:	68db      	ldr	r3, [r3, #12]
 800b046:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b048:	693b      	ldr	r3, [r7, #16]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d10d      	bne.n	800b06a <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800b04e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b052:	b672      	cpsid	i
 800b054:	f383 8811 	msr	BASEPRI, r3
 800b058:	f3bf 8f6f 	isb	sy
 800b05c:	f3bf 8f4f 	dsb	sy
 800b060:	b662      	cpsie	i
 800b062:	60fb      	str	r3, [r7, #12]
}
 800b064:	bf00      	nop
 800b066:	bf00      	nop
 800b068:	e7fd      	b.n	800b066 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b06a:	693b      	ldr	r3, [r7, #16]
 800b06c:	3318      	adds	r3, #24
 800b06e:	4618      	mov	r0, r3
 800b070:	f7fe fd16 	bl	8009aa0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b074:	4b1d      	ldr	r3, [pc, #116]	@ (800b0ec <xTaskRemoveFromEventList+0xb4>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d11d      	bne.n	800b0b8 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b07c:	693b      	ldr	r3, [r7, #16]
 800b07e:	3304      	adds	r3, #4
 800b080:	4618      	mov	r0, r3
 800b082:	f7fe fd0d 	bl	8009aa0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b086:	693b      	ldr	r3, [r7, #16]
 800b088:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b08a:	4b19      	ldr	r3, [pc, #100]	@ (800b0f0 <xTaskRemoveFromEventList+0xb8>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	429a      	cmp	r2, r3
 800b090:	d903      	bls.n	800b09a <xTaskRemoveFromEventList+0x62>
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b096:	4a16      	ldr	r2, [pc, #88]	@ (800b0f0 <xTaskRemoveFromEventList+0xb8>)
 800b098:	6013      	str	r3, [r2, #0]
 800b09a:	693b      	ldr	r3, [r7, #16]
 800b09c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b09e:	4613      	mov	r3, r2
 800b0a0:	009b      	lsls	r3, r3, #2
 800b0a2:	4413      	add	r3, r2
 800b0a4:	009b      	lsls	r3, r3, #2
 800b0a6:	4a13      	ldr	r2, [pc, #76]	@ (800b0f4 <xTaskRemoveFromEventList+0xbc>)
 800b0a8:	441a      	add	r2, r3
 800b0aa:	693b      	ldr	r3, [r7, #16]
 800b0ac:	3304      	adds	r3, #4
 800b0ae:	4619      	mov	r1, r3
 800b0b0:	4610      	mov	r0, r2
 800b0b2:	f7fe fc98 	bl	80099e6 <vListInsertEnd>
 800b0b6:	e005      	b.n	800b0c4 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b0b8:	693b      	ldr	r3, [r7, #16]
 800b0ba:	3318      	adds	r3, #24
 800b0bc:	4619      	mov	r1, r3
 800b0be:	480e      	ldr	r0, [pc, #56]	@ (800b0f8 <xTaskRemoveFromEventList+0xc0>)
 800b0c0:	f7fe fc91 	bl	80099e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b0c4:	693b      	ldr	r3, [r7, #16]
 800b0c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0c8:	4b0c      	ldr	r3, [pc, #48]	@ (800b0fc <xTaskRemoveFromEventList+0xc4>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0ce:	429a      	cmp	r2, r3
 800b0d0:	d905      	bls.n	800b0de <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b0d6:	4b0a      	ldr	r3, [pc, #40]	@ (800b100 <xTaskRemoveFromEventList+0xc8>)
 800b0d8:	2201      	movs	r2, #1
 800b0da:	601a      	str	r2, [r3, #0]
 800b0dc:	e001      	b.n	800b0e2 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b0e2:	697b      	ldr	r3, [r7, #20]
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3718      	adds	r7, #24
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}
 800b0ec:	20001658 	.word	0x20001658
 800b0f0:	20001638 	.word	0x20001638
 800b0f4:	20001160 	.word	0x20001160
 800b0f8:	200015f0 	.word	0x200015f0
 800b0fc:	2000115c 	.word	0x2000115c
 800b100:	20001644 	.word	0x20001644

0800b104 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b104:	b480      	push	{r7}
 800b106:	b083      	sub	sp, #12
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b10c:	4b06      	ldr	r3, [pc, #24]	@ (800b128 <vTaskInternalSetTimeOutState+0x24>)
 800b10e:	681a      	ldr	r2, [r3, #0]
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b114:	4b05      	ldr	r3, [pc, #20]	@ (800b12c <vTaskInternalSetTimeOutState+0x28>)
 800b116:	681a      	ldr	r2, [r3, #0]
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	605a      	str	r2, [r3, #4]
}
 800b11c:	bf00      	nop
 800b11e:	370c      	adds	r7, #12
 800b120:	46bd      	mov	sp, r7
 800b122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b126:	4770      	bx	lr
 800b128:	20001648 	.word	0x20001648
 800b12c:	20001634 	.word	0x20001634

0800b130 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b088      	sub	sp, #32
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
 800b138:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d10d      	bne.n	800b15c <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800b140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b144:	b672      	cpsid	i
 800b146:	f383 8811 	msr	BASEPRI, r3
 800b14a:	f3bf 8f6f 	isb	sy
 800b14e:	f3bf 8f4f 	dsb	sy
 800b152:	b662      	cpsie	i
 800b154:	613b      	str	r3, [r7, #16]
}
 800b156:	bf00      	nop
 800b158:	bf00      	nop
 800b15a:	e7fd      	b.n	800b158 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d10d      	bne.n	800b17e <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800b162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b166:	b672      	cpsid	i
 800b168:	f383 8811 	msr	BASEPRI, r3
 800b16c:	f3bf 8f6f 	isb	sy
 800b170:	f3bf 8f4f 	dsb	sy
 800b174:	b662      	cpsie	i
 800b176:	60fb      	str	r3, [r7, #12]
}
 800b178:	bf00      	nop
 800b17a:	bf00      	nop
 800b17c:	e7fd      	b.n	800b17a <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800b17e:	f000 fe85 	bl	800be8c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b182:	4b1d      	ldr	r3, [pc, #116]	@ (800b1f8 <xTaskCheckForTimeOut+0xc8>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	685b      	ldr	r3, [r3, #4]
 800b18c:	69ba      	ldr	r2, [r7, #24]
 800b18e:	1ad3      	subs	r3, r2, r3
 800b190:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b19a:	d102      	bne.n	800b1a2 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b19c:	2300      	movs	r3, #0
 800b19e:	61fb      	str	r3, [r7, #28]
 800b1a0:	e023      	b.n	800b1ea <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681a      	ldr	r2, [r3, #0]
 800b1a6:	4b15      	ldr	r3, [pc, #84]	@ (800b1fc <xTaskCheckForTimeOut+0xcc>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	429a      	cmp	r2, r3
 800b1ac:	d007      	beq.n	800b1be <xTaskCheckForTimeOut+0x8e>
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	685b      	ldr	r3, [r3, #4]
 800b1b2:	69ba      	ldr	r2, [r7, #24]
 800b1b4:	429a      	cmp	r2, r3
 800b1b6:	d302      	bcc.n	800b1be <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	61fb      	str	r3, [r7, #28]
 800b1bc:	e015      	b.n	800b1ea <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	697a      	ldr	r2, [r7, #20]
 800b1c4:	429a      	cmp	r2, r3
 800b1c6:	d20b      	bcs.n	800b1e0 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b1c8:	683b      	ldr	r3, [r7, #0]
 800b1ca:	681a      	ldr	r2, [r3, #0]
 800b1cc:	697b      	ldr	r3, [r7, #20]
 800b1ce:	1ad2      	subs	r2, r2, r3
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f7ff ff95 	bl	800b104 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	61fb      	str	r3, [r7, #28]
 800b1de:	e004      	b.n	800b1ea <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b1e6:	2301      	movs	r3, #1
 800b1e8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b1ea:	f000 fe85 	bl	800bef8 <vPortExitCritical>

	return xReturn;
 800b1ee:	69fb      	ldr	r3, [r7, #28]
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	3720      	adds	r7, #32
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}
 800b1f8:	20001634 	.word	0x20001634
 800b1fc:	20001648 	.word	0x20001648

0800b200 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b200:	b480      	push	{r7}
 800b202:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b204:	4b03      	ldr	r3, [pc, #12]	@ (800b214 <vTaskMissedYield+0x14>)
 800b206:	2201      	movs	r2, #1
 800b208:	601a      	str	r2, [r3, #0]
}
 800b20a:	bf00      	nop
 800b20c:	46bd      	mov	sp, r7
 800b20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b212:	4770      	bx	lr
 800b214:	20001644 	.word	0x20001644

0800b218 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b082      	sub	sp, #8
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b220:	f000 f852 	bl	800b2c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b224:	4b06      	ldr	r3, [pc, #24]	@ (800b240 <prvIdleTask+0x28>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	2b01      	cmp	r3, #1
 800b22a:	d9f9      	bls.n	800b220 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b22c:	4b05      	ldr	r3, [pc, #20]	@ (800b244 <prvIdleTask+0x2c>)
 800b22e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b232:	601a      	str	r2, [r3, #0]
 800b234:	f3bf 8f4f 	dsb	sy
 800b238:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b23c:	e7f0      	b.n	800b220 <prvIdleTask+0x8>
 800b23e:	bf00      	nop
 800b240:	20001160 	.word	0x20001160
 800b244:	e000ed04 	.word	0xe000ed04

0800b248 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b082      	sub	sp, #8
 800b24c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b24e:	2300      	movs	r3, #0
 800b250:	607b      	str	r3, [r7, #4]
 800b252:	e00c      	b.n	800b26e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b254:	687a      	ldr	r2, [r7, #4]
 800b256:	4613      	mov	r3, r2
 800b258:	009b      	lsls	r3, r3, #2
 800b25a:	4413      	add	r3, r2
 800b25c:	009b      	lsls	r3, r3, #2
 800b25e:	4a12      	ldr	r2, [pc, #72]	@ (800b2a8 <prvInitialiseTaskLists+0x60>)
 800b260:	4413      	add	r3, r2
 800b262:	4618      	mov	r0, r3
 800b264:	f7fe fb92 	bl	800998c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	3301      	adds	r3, #1
 800b26c:	607b      	str	r3, [r7, #4]
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2b37      	cmp	r3, #55	@ 0x37
 800b272:	d9ef      	bls.n	800b254 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b274:	480d      	ldr	r0, [pc, #52]	@ (800b2ac <prvInitialiseTaskLists+0x64>)
 800b276:	f7fe fb89 	bl	800998c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b27a:	480d      	ldr	r0, [pc, #52]	@ (800b2b0 <prvInitialiseTaskLists+0x68>)
 800b27c:	f7fe fb86 	bl	800998c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b280:	480c      	ldr	r0, [pc, #48]	@ (800b2b4 <prvInitialiseTaskLists+0x6c>)
 800b282:	f7fe fb83 	bl	800998c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b286:	480c      	ldr	r0, [pc, #48]	@ (800b2b8 <prvInitialiseTaskLists+0x70>)
 800b288:	f7fe fb80 	bl	800998c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b28c:	480b      	ldr	r0, [pc, #44]	@ (800b2bc <prvInitialiseTaskLists+0x74>)
 800b28e:	f7fe fb7d 	bl	800998c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b292:	4b0b      	ldr	r3, [pc, #44]	@ (800b2c0 <prvInitialiseTaskLists+0x78>)
 800b294:	4a05      	ldr	r2, [pc, #20]	@ (800b2ac <prvInitialiseTaskLists+0x64>)
 800b296:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b298:	4b0a      	ldr	r3, [pc, #40]	@ (800b2c4 <prvInitialiseTaskLists+0x7c>)
 800b29a:	4a05      	ldr	r2, [pc, #20]	@ (800b2b0 <prvInitialiseTaskLists+0x68>)
 800b29c:	601a      	str	r2, [r3, #0]
}
 800b29e:	bf00      	nop
 800b2a0:	3708      	adds	r7, #8
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}
 800b2a6:	bf00      	nop
 800b2a8:	20001160 	.word	0x20001160
 800b2ac:	200015c0 	.word	0x200015c0
 800b2b0:	200015d4 	.word	0x200015d4
 800b2b4:	200015f0 	.word	0x200015f0
 800b2b8:	20001604 	.word	0x20001604
 800b2bc:	2000161c 	.word	0x2000161c
 800b2c0:	200015e8 	.word	0x200015e8
 800b2c4:	200015ec 	.word	0x200015ec

0800b2c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b082      	sub	sp, #8
 800b2cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b2ce:	e019      	b.n	800b304 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b2d0:	f000 fddc 	bl	800be8c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2d4:	4b10      	ldr	r3, [pc, #64]	@ (800b318 <prvCheckTasksWaitingTermination+0x50>)
 800b2d6:	68db      	ldr	r3, [r3, #12]
 800b2d8:	68db      	ldr	r3, [r3, #12]
 800b2da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	3304      	adds	r3, #4
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f7fe fbdd 	bl	8009aa0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b2e6:	4b0d      	ldr	r3, [pc, #52]	@ (800b31c <prvCheckTasksWaitingTermination+0x54>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	3b01      	subs	r3, #1
 800b2ec:	4a0b      	ldr	r2, [pc, #44]	@ (800b31c <prvCheckTasksWaitingTermination+0x54>)
 800b2ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b2f0:	4b0b      	ldr	r3, [pc, #44]	@ (800b320 <prvCheckTasksWaitingTermination+0x58>)
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	3b01      	subs	r3, #1
 800b2f6:	4a0a      	ldr	r2, [pc, #40]	@ (800b320 <prvCheckTasksWaitingTermination+0x58>)
 800b2f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b2fa:	f000 fdfd 	bl	800bef8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	f000 f810 	bl	800b324 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b304:	4b06      	ldr	r3, [pc, #24]	@ (800b320 <prvCheckTasksWaitingTermination+0x58>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d1e1      	bne.n	800b2d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b30c:	bf00      	nop
 800b30e:	bf00      	nop
 800b310:	3708      	adds	r7, #8
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}
 800b316:	bf00      	nop
 800b318:	20001604 	.word	0x20001604
 800b31c:	20001630 	.word	0x20001630
 800b320:	20001618 	.word	0x20001618

0800b324 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b324:	b580      	push	{r7, lr}
 800b326:	b084      	sub	sp, #16
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	3354      	adds	r3, #84	@ 0x54
 800b330:	4618      	mov	r0, r3
 800b332:	f003 fa7b 	bl	800e82c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d108      	bne.n	800b352 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b344:	4618      	mov	r0, r3
 800b346:	f000 ff9d 	bl	800c284 <vPortFree>
				vPortFree( pxTCB );
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f000 ff9a 	bl	800c284 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b350:	e01b      	b.n	800b38a <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b358:	2b01      	cmp	r3, #1
 800b35a:	d103      	bne.n	800b364 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f000 ff91 	bl	800c284 <vPortFree>
	}
 800b362:	e012      	b.n	800b38a <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b36a:	2b02      	cmp	r3, #2
 800b36c:	d00d      	beq.n	800b38a <prvDeleteTCB+0x66>
	__asm volatile
 800b36e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b372:	b672      	cpsid	i
 800b374:	f383 8811 	msr	BASEPRI, r3
 800b378:	f3bf 8f6f 	isb	sy
 800b37c:	f3bf 8f4f 	dsb	sy
 800b380:	b662      	cpsie	i
 800b382:	60fb      	str	r3, [r7, #12]
}
 800b384:	bf00      	nop
 800b386:	bf00      	nop
 800b388:	e7fd      	b.n	800b386 <prvDeleteTCB+0x62>
	}
 800b38a:	bf00      	nop
 800b38c:	3710      	adds	r7, #16
 800b38e:	46bd      	mov	sp, r7
 800b390:	bd80      	pop	{r7, pc}
	...

0800b394 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b394:	b480      	push	{r7}
 800b396:	b083      	sub	sp, #12
 800b398:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b39a:	4b0c      	ldr	r3, [pc, #48]	@ (800b3cc <prvResetNextTaskUnblockTime+0x38>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d104      	bne.n	800b3ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b3a4:	4b0a      	ldr	r3, [pc, #40]	@ (800b3d0 <prvResetNextTaskUnblockTime+0x3c>)
 800b3a6:	f04f 32ff 	mov.w	r2, #4294967295
 800b3aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b3ac:	e008      	b.n	800b3c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3ae:	4b07      	ldr	r3, [pc, #28]	@ (800b3cc <prvResetNextTaskUnblockTime+0x38>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	68db      	ldr	r3, [r3, #12]
 800b3b4:	68db      	ldr	r3, [r3, #12]
 800b3b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	685b      	ldr	r3, [r3, #4]
 800b3bc:	4a04      	ldr	r2, [pc, #16]	@ (800b3d0 <prvResetNextTaskUnblockTime+0x3c>)
 800b3be:	6013      	str	r3, [r2, #0]
}
 800b3c0:	bf00      	nop
 800b3c2:	370c      	adds	r7, #12
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ca:	4770      	bx	lr
 800b3cc:	200015e8 	.word	0x200015e8
 800b3d0:	20001650 	.word	0x20001650

0800b3d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b083      	sub	sp, #12
 800b3d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b3da:	4b0b      	ldr	r3, [pc, #44]	@ (800b408 <xTaskGetSchedulerState+0x34>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d102      	bne.n	800b3e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	607b      	str	r3, [r7, #4]
 800b3e6:	e008      	b.n	800b3fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3e8:	4b08      	ldr	r3, [pc, #32]	@ (800b40c <xTaskGetSchedulerState+0x38>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d102      	bne.n	800b3f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b3f0:	2302      	movs	r3, #2
 800b3f2:	607b      	str	r3, [r7, #4]
 800b3f4:	e001      	b.n	800b3fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b3fa:	687b      	ldr	r3, [r7, #4]
	}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	370c      	adds	r7, #12
 800b400:	46bd      	mov	sp, r7
 800b402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b406:	4770      	bx	lr
 800b408:	2000163c 	.word	0x2000163c
 800b40c:	20001658 	.word	0x20001658

0800b410 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b410:	b580      	push	{r7, lr}
 800b412:	b086      	sub	sp, #24
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b41c:	2300      	movs	r3, #0
 800b41e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d05c      	beq.n	800b4e0 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b426:	4b31      	ldr	r3, [pc, #196]	@ (800b4ec <xTaskPriorityDisinherit+0xdc>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	693a      	ldr	r2, [r7, #16]
 800b42c:	429a      	cmp	r2, r3
 800b42e:	d00d      	beq.n	800b44c <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800b430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b434:	b672      	cpsid	i
 800b436:	f383 8811 	msr	BASEPRI, r3
 800b43a:	f3bf 8f6f 	isb	sy
 800b43e:	f3bf 8f4f 	dsb	sy
 800b442:	b662      	cpsie	i
 800b444:	60fb      	str	r3, [r7, #12]
}
 800b446:	bf00      	nop
 800b448:	bf00      	nop
 800b44a:	e7fd      	b.n	800b448 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800b44c:	693b      	ldr	r3, [r7, #16]
 800b44e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b450:	2b00      	cmp	r3, #0
 800b452:	d10d      	bne.n	800b470 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800b454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b458:	b672      	cpsid	i
 800b45a:	f383 8811 	msr	BASEPRI, r3
 800b45e:	f3bf 8f6f 	isb	sy
 800b462:	f3bf 8f4f 	dsb	sy
 800b466:	b662      	cpsie	i
 800b468:	60bb      	str	r3, [r7, #8]
}
 800b46a:	bf00      	nop
 800b46c:	bf00      	nop
 800b46e:	e7fd      	b.n	800b46c <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800b470:	693b      	ldr	r3, [r7, #16]
 800b472:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b474:	1e5a      	subs	r2, r3, #1
 800b476:	693b      	ldr	r3, [r7, #16]
 800b478:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b47a:	693b      	ldr	r3, [r7, #16]
 800b47c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b47e:	693b      	ldr	r3, [r7, #16]
 800b480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b482:	429a      	cmp	r2, r3
 800b484:	d02c      	beq.n	800b4e0 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b486:	693b      	ldr	r3, [r7, #16]
 800b488:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d128      	bne.n	800b4e0 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b48e:	693b      	ldr	r3, [r7, #16]
 800b490:	3304      	adds	r3, #4
 800b492:	4618      	mov	r0, r3
 800b494:	f7fe fb04 	bl	8009aa0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b498:	693b      	ldr	r3, [r7, #16]
 800b49a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b49c:	693b      	ldr	r3, [r7, #16]
 800b49e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4a0:	693b      	ldr	r3, [r7, #16]
 800b4a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4a4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b4a8:	693b      	ldr	r3, [r7, #16]
 800b4aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b4ac:	693b      	ldr	r3, [r7, #16]
 800b4ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4b0:	4b0f      	ldr	r3, [pc, #60]	@ (800b4f0 <xTaskPriorityDisinherit+0xe0>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	429a      	cmp	r2, r3
 800b4b6:	d903      	bls.n	800b4c0 <xTaskPriorityDisinherit+0xb0>
 800b4b8:	693b      	ldr	r3, [r7, #16]
 800b4ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4bc:	4a0c      	ldr	r2, [pc, #48]	@ (800b4f0 <xTaskPriorityDisinherit+0xe0>)
 800b4be:	6013      	str	r3, [r2, #0]
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4c4:	4613      	mov	r3, r2
 800b4c6:	009b      	lsls	r3, r3, #2
 800b4c8:	4413      	add	r3, r2
 800b4ca:	009b      	lsls	r3, r3, #2
 800b4cc:	4a09      	ldr	r2, [pc, #36]	@ (800b4f4 <xTaskPriorityDisinherit+0xe4>)
 800b4ce:	441a      	add	r2, r3
 800b4d0:	693b      	ldr	r3, [r7, #16]
 800b4d2:	3304      	adds	r3, #4
 800b4d4:	4619      	mov	r1, r3
 800b4d6:	4610      	mov	r0, r2
 800b4d8:	f7fe fa85 	bl	80099e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b4dc:	2301      	movs	r3, #1
 800b4de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b4e0:	697b      	ldr	r3, [r7, #20]
	}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3718      	adds	r7, #24
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}
 800b4ea:	bf00      	nop
 800b4ec:	2000115c 	.word	0x2000115c
 800b4f0:	20001638 	.word	0x20001638
 800b4f4:	20001160 	.word	0x20001160

0800b4f8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b084      	sub	sp, #16
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
 800b500:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b502:	4b21      	ldr	r3, [pc, #132]	@ (800b588 <prvAddCurrentTaskToDelayedList+0x90>)
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b508:	4b20      	ldr	r3, [pc, #128]	@ (800b58c <prvAddCurrentTaskToDelayedList+0x94>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	3304      	adds	r3, #4
 800b50e:	4618      	mov	r0, r3
 800b510:	f7fe fac6 	bl	8009aa0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b51a:	d10a      	bne.n	800b532 <prvAddCurrentTaskToDelayedList+0x3a>
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d007      	beq.n	800b532 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b522:	4b1a      	ldr	r3, [pc, #104]	@ (800b58c <prvAddCurrentTaskToDelayedList+0x94>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	3304      	adds	r3, #4
 800b528:	4619      	mov	r1, r3
 800b52a:	4819      	ldr	r0, [pc, #100]	@ (800b590 <prvAddCurrentTaskToDelayedList+0x98>)
 800b52c:	f7fe fa5b 	bl	80099e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b530:	e026      	b.n	800b580 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b532:	68fa      	ldr	r2, [r7, #12]
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	4413      	add	r3, r2
 800b538:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b53a:	4b14      	ldr	r3, [pc, #80]	@ (800b58c <prvAddCurrentTaskToDelayedList+0x94>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	68ba      	ldr	r2, [r7, #8]
 800b540:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b542:	68ba      	ldr	r2, [r7, #8]
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	429a      	cmp	r2, r3
 800b548:	d209      	bcs.n	800b55e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b54a:	4b12      	ldr	r3, [pc, #72]	@ (800b594 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b54c:	681a      	ldr	r2, [r3, #0]
 800b54e:	4b0f      	ldr	r3, [pc, #60]	@ (800b58c <prvAddCurrentTaskToDelayedList+0x94>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	3304      	adds	r3, #4
 800b554:	4619      	mov	r1, r3
 800b556:	4610      	mov	r0, r2
 800b558:	f7fe fa69 	bl	8009a2e <vListInsert>
}
 800b55c:	e010      	b.n	800b580 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b55e:	4b0e      	ldr	r3, [pc, #56]	@ (800b598 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b560:	681a      	ldr	r2, [r3, #0]
 800b562:	4b0a      	ldr	r3, [pc, #40]	@ (800b58c <prvAddCurrentTaskToDelayedList+0x94>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	3304      	adds	r3, #4
 800b568:	4619      	mov	r1, r3
 800b56a:	4610      	mov	r0, r2
 800b56c:	f7fe fa5f 	bl	8009a2e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b570:	4b0a      	ldr	r3, [pc, #40]	@ (800b59c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	68ba      	ldr	r2, [r7, #8]
 800b576:	429a      	cmp	r2, r3
 800b578:	d202      	bcs.n	800b580 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b57a:	4a08      	ldr	r2, [pc, #32]	@ (800b59c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b57c:	68bb      	ldr	r3, [r7, #8]
 800b57e:	6013      	str	r3, [r2, #0]
}
 800b580:	bf00      	nop
 800b582:	3710      	adds	r7, #16
 800b584:	46bd      	mov	sp, r7
 800b586:	bd80      	pop	{r7, pc}
 800b588:	20001634 	.word	0x20001634
 800b58c:	2000115c 	.word	0x2000115c
 800b590:	2000161c 	.word	0x2000161c
 800b594:	200015ec 	.word	0x200015ec
 800b598:	200015e8 	.word	0x200015e8
 800b59c:	20001650 	.word	0x20001650

0800b5a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b08a      	sub	sp, #40	@ 0x28
 800b5a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b5aa:	f000 fb21 	bl	800bbf0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b5ae:	4b1e      	ldr	r3, [pc, #120]	@ (800b628 <xTimerCreateTimerTask+0x88>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d021      	beq.n	800b5fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b5be:	1d3a      	adds	r2, r7, #4
 800b5c0:	f107 0108 	add.w	r1, r7, #8
 800b5c4:	f107 030c 	add.w	r3, r7, #12
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f7fe f9c5 	bl	8009958 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b5ce:	6879      	ldr	r1, [r7, #4]
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	68fa      	ldr	r2, [r7, #12]
 800b5d4:	9202      	str	r2, [sp, #8]
 800b5d6:	9301      	str	r3, [sp, #4]
 800b5d8:	2302      	movs	r3, #2
 800b5da:	9300      	str	r3, [sp, #0]
 800b5dc:	2300      	movs	r3, #0
 800b5de:	460a      	mov	r2, r1
 800b5e0:	4912      	ldr	r1, [pc, #72]	@ (800b62c <xTimerCreateTimerTask+0x8c>)
 800b5e2:	4813      	ldr	r0, [pc, #76]	@ (800b630 <xTimerCreateTimerTask+0x90>)
 800b5e4:	f7fe ffa0 	bl	800a528 <xTaskCreateStatic>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	4a12      	ldr	r2, [pc, #72]	@ (800b634 <xTimerCreateTimerTask+0x94>)
 800b5ec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b5ee:	4b11      	ldr	r3, [pc, #68]	@ (800b634 <xTimerCreateTimerTask+0x94>)
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d001      	beq.n	800b5fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b5f6:	2301      	movs	r3, #1
 800b5f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b5fa:	697b      	ldr	r3, [r7, #20]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d10d      	bne.n	800b61c <xTimerCreateTimerTask+0x7c>
	__asm volatile
 800b600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b604:	b672      	cpsid	i
 800b606:	f383 8811 	msr	BASEPRI, r3
 800b60a:	f3bf 8f6f 	isb	sy
 800b60e:	f3bf 8f4f 	dsb	sy
 800b612:	b662      	cpsie	i
 800b614:	613b      	str	r3, [r7, #16]
}
 800b616:	bf00      	nop
 800b618:	bf00      	nop
 800b61a:	e7fd      	b.n	800b618 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800b61c:	697b      	ldr	r3, [r7, #20]
}
 800b61e:	4618      	mov	r0, r3
 800b620:	3718      	adds	r7, #24
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}
 800b626:	bf00      	nop
 800b628:	2000168c 	.word	0x2000168c
 800b62c:	080105f8 	.word	0x080105f8
 800b630:	0800b779 	.word	0x0800b779
 800b634:	20001690 	.word	0x20001690

0800b638 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b08a      	sub	sp, #40	@ 0x28
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	60f8      	str	r0, [r7, #12]
 800b640:	60b9      	str	r1, [r7, #8]
 800b642:	607a      	str	r2, [r7, #4]
 800b644:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b646:	2300      	movs	r3, #0
 800b648:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d10d      	bne.n	800b66c <xTimerGenericCommand+0x34>
	__asm volatile
 800b650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b654:	b672      	cpsid	i
 800b656:	f383 8811 	msr	BASEPRI, r3
 800b65a:	f3bf 8f6f 	isb	sy
 800b65e:	f3bf 8f4f 	dsb	sy
 800b662:	b662      	cpsie	i
 800b664:	623b      	str	r3, [r7, #32]
}
 800b666:	bf00      	nop
 800b668:	bf00      	nop
 800b66a:	e7fd      	b.n	800b668 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b66c:	4b19      	ldr	r3, [pc, #100]	@ (800b6d4 <xTimerGenericCommand+0x9c>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d02a      	beq.n	800b6ca <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b680:	68bb      	ldr	r3, [r7, #8]
 800b682:	2b05      	cmp	r3, #5
 800b684:	dc18      	bgt.n	800b6b8 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b686:	f7ff fea5 	bl	800b3d4 <xTaskGetSchedulerState>
 800b68a:	4603      	mov	r3, r0
 800b68c:	2b02      	cmp	r3, #2
 800b68e:	d109      	bne.n	800b6a4 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b690:	4b10      	ldr	r3, [pc, #64]	@ (800b6d4 <xTimerGenericCommand+0x9c>)
 800b692:	6818      	ldr	r0, [r3, #0]
 800b694:	f107 0110 	add.w	r1, r7, #16
 800b698:	2300      	movs	r3, #0
 800b69a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b69c:	f7fe fb40 	bl	8009d20 <xQueueGenericSend>
 800b6a0:	6278      	str	r0, [r7, #36]	@ 0x24
 800b6a2:	e012      	b.n	800b6ca <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b6a4:	4b0b      	ldr	r3, [pc, #44]	@ (800b6d4 <xTimerGenericCommand+0x9c>)
 800b6a6:	6818      	ldr	r0, [r3, #0]
 800b6a8:	f107 0110 	add.w	r1, r7, #16
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	f7fe fb36 	bl	8009d20 <xQueueGenericSend>
 800b6b4:	6278      	str	r0, [r7, #36]	@ 0x24
 800b6b6:	e008      	b.n	800b6ca <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b6b8:	4b06      	ldr	r3, [pc, #24]	@ (800b6d4 <xTimerGenericCommand+0x9c>)
 800b6ba:	6818      	ldr	r0, [r3, #0]
 800b6bc:	f107 0110 	add.w	r1, r7, #16
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	683a      	ldr	r2, [r7, #0]
 800b6c4:	f7fe fc36 	bl	8009f34 <xQueueGenericSendFromISR>
 800b6c8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b6ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	3728      	adds	r7, #40	@ 0x28
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bd80      	pop	{r7, pc}
 800b6d4:	2000168c 	.word	0x2000168c

0800b6d8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b088      	sub	sp, #32
 800b6dc:	af02      	add	r7, sp, #8
 800b6de:	6078      	str	r0, [r7, #4]
 800b6e0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6e2:	4b24      	ldr	r3, [pc, #144]	@ (800b774 <prvProcessExpiredTimer+0x9c>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	68db      	ldr	r3, [r3, #12]
 800b6e8:	68db      	ldr	r3, [r3, #12]
 800b6ea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b6ec:	697b      	ldr	r3, [r7, #20]
 800b6ee:	3304      	adds	r3, #4
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	f7fe f9d5 	bl	8009aa0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b6fc:	f003 0304 	and.w	r3, r3, #4
 800b700:	2b00      	cmp	r3, #0
 800b702:	d025      	beq.n	800b750 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	699a      	ldr	r2, [r3, #24]
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	18d1      	adds	r1, r2, r3
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	683a      	ldr	r2, [r7, #0]
 800b710:	6978      	ldr	r0, [r7, #20]
 800b712:	f000 f8d7 	bl	800b8c4 <prvInsertTimerInActiveList>
 800b716:	4603      	mov	r3, r0
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d022      	beq.n	800b762 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b71c:	2300      	movs	r3, #0
 800b71e:	9300      	str	r3, [sp, #0]
 800b720:	2300      	movs	r3, #0
 800b722:	687a      	ldr	r2, [r7, #4]
 800b724:	2100      	movs	r1, #0
 800b726:	6978      	ldr	r0, [r7, #20]
 800b728:	f7ff ff86 	bl	800b638 <xTimerGenericCommand>
 800b72c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b72e:	693b      	ldr	r3, [r7, #16]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d116      	bne.n	800b762 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 800b734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b738:	b672      	cpsid	i
 800b73a:	f383 8811 	msr	BASEPRI, r3
 800b73e:	f3bf 8f6f 	isb	sy
 800b742:	f3bf 8f4f 	dsb	sy
 800b746:	b662      	cpsie	i
 800b748:	60fb      	str	r3, [r7, #12]
}
 800b74a:	bf00      	nop
 800b74c:	bf00      	nop
 800b74e:	e7fd      	b.n	800b74c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b750:	697b      	ldr	r3, [r7, #20]
 800b752:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b756:	f023 0301 	bic.w	r3, r3, #1
 800b75a:	b2da      	uxtb	r2, r3
 800b75c:	697b      	ldr	r3, [r7, #20]
 800b75e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b762:	697b      	ldr	r3, [r7, #20]
 800b764:	6a1b      	ldr	r3, [r3, #32]
 800b766:	6978      	ldr	r0, [r7, #20]
 800b768:	4798      	blx	r3
}
 800b76a:	bf00      	nop
 800b76c:	3718      	adds	r7, #24
 800b76e:	46bd      	mov	sp, r7
 800b770:	bd80      	pop	{r7, pc}
 800b772:	bf00      	nop
 800b774:	20001684 	.word	0x20001684

0800b778 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b084      	sub	sp, #16
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b780:	f107 0308 	add.w	r3, r7, #8
 800b784:	4618      	mov	r0, r3
 800b786:	f000 f859 	bl	800b83c <prvGetNextExpireTime>
 800b78a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	4619      	mov	r1, r3
 800b790:	68f8      	ldr	r0, [r7, #12]
 800b792:	f000 f805 	bl	800b7a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b796:	f000 f8d7 	bl	800b948 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b79a:	bf00      	nop
 800b79c:	e7f0      	b.n	800b780 <prvTimerTask+0x8>
	...

0800b7a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b084      	sub	sp, #16
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
 800b7a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b7aa:	f7ff f9e9 	bl	800ab80 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b7ae:	f107 0308 	add.w	r3, r7, #8
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f000 f866 	bl	800b884 <prvSampleTimeNow>
 800b7b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d130      	bne.n	800b822 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d10a      	bne.n	800b7dc <prvProcessTimerOrBlockTask+0x3c>
 800b7c6:	687a      	ldr	r2, [r7, #4]
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	429a      	cmp	r2, r3
 800b7cc:	d806      	bhi.n	800b7dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b7ce:	f7ff f9e5 	bl	800ab9c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b7d2:	68f9      	ldr	r1, [r7, #12]
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f7ff ff7f 	bl	800b6d8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b7da:	e024      	b.n	800b826 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d008      	beq.n	800b7f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b7e2:	4b13      	ldr	r3, [pc, #76]	@ (800b830 <prvProcessTimerOrBlockTask+0x90>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d101      	bne.n	800b7f0 <prvProcessTimerOrBlockTask+0x50>
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	e000      	b.n	800b7f2 <prvProcessTimerOrBlockTask+0x52>
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b7f4:	4b0f      	ldr	r3, [pc, #60]	@ (800b834 <prvProcessTimerOrBlockTask+0x94>)
 800b7f6:	6818      	ldr	r0, [r3, #0]
 800b7f8:	687a      	ldr	r2, [r7, #4]
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	1ad3      	subs	r3, r2, r3
 800b7fe:	683a      	ldr	r2, [r7, #0]
 800b800:	4619      	mov	r1, r3
 800b802:	f7fe fe5d 	bl	800a4c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b806:	f7ff f9c9 	bl	800ab9c <xTaskResumeAll>
 800b80a:	4603      	mov	r3, r0
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d10a      	bne.n	800b826 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b810:	4b09      	ldr	r3, [pc, #36]	@ (800b838 <prvProcessTimerOrBlockTask+0x98>)
 800b812:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b816:	601a      	str	r2, [r3, #0]
 800b818:	f3bf 8f4f 	dsb	sy
 800b81c:	f3bf 8f6f 	isb	sy
}
 800b820:	e001      	b.n	800b826 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b822:	f7ff f9bb 	bl	800ab9c <xTaskResumeAll>
}
 800b826:	bf00      	nop
 800b828:	3710      	adds	r7, #16
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}
 800b82e:	bf00      	nop
 800b830:	20001688 	.word	0x20001688
 800b834:	2000168c 	.word	0x2000168c
 800b838:	e000ed04 	.word	0xe000ed04

0800b83c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b83c:	b480      	push	{r7}
 800b83e:	b085      	sub	sp, #20
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b844:	4b0e      	ldr	r3, [pc, #56]	@ (800b880 <prvGetNextExpireTime+0x44>)
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d101      	bne.n	800b852 <prvGetNextExpireTime+0x16>
 800b84e:	2201      	movs	r2, #1
 800b850:	e000      	b.n	800b854 <prvGetNextExpireTime+0x18>
 800b852:	2200      	movs	r2, #0
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d105      	bne.n	800b86c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b860:	4b07      	ldr	r3, [pc, #28]	@ (800b880 <prvGetNextExpireTime+0x44>)
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	68db      	ldr	r3, [r3, #12]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	60fb      	str	r3, [r7, #12]
 800b86a:	e001      	b.n	800b870 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b86c:	2300      	movs	r3, #0
 800b86e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b870:	68fb      	ldr	r3, [r7, #12]
}
 800b872:	4618      	mov	r0, r3
 800b874:	3714      	adds	r7, #20
 800b876:	46bd      	mov	sp, r7
 800b878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87c:	4770      	bx	lr
 800b87e:	bf00      	nop
 800b880:	20001684 	.word	0x20001684

0800b884 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b084      	sub	sp, #16
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b88c:	f7ff fa26 	bl	800acdc <xTaskGetTickCount>
 800b890:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b892:	4b0b      	ldr	r3, [pc, #44]	@ (800b8c0 <prvSampleTimeNow+0x3c>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	68fa      	ldr	r2, [r7, #12]
 800b898:	429a      	cmp	r2, r3
 800b89a:	d205      	bcs.n	800b8a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b89c:	f000 f940 	bl	800bb20 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2201      	movs	r2, #1
 800b8a4:	601a      	str	r2, [r3, #0]
 800b8a6:	e002      	b.n	800b8ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b8ae:	4a04      	ldr	r2, [pc, #16]	@ (800b8c0 <prvSampleTimeNow+0x3c>)
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
}
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	3710      	adds	r7, #16
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd80      	pop	{r7, pc}
 800b8be:	bf00      	nop
 800b8c0:	20001694 	.word	0x20001694

0800b8c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b086      	sub	sp, #24
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	60f8      	str	r0, [r7, #12]
 800b8cc:	60b9      	str	r1, [r7, #8]
 800b8ce:	607a      	str	r2, [r7, #4]
 800b8d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	68ba      	ldr	r2, [r7, #8]
 800b8da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	68fa      	ldr	r2, [r7, #12]
 800b8e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b8e2:	68ba      	ldr	r2, [r7, #8]
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	429a      	cmp	r2, r3
 800b8e8:	d812      	bhi.n	800b910 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8ea:	687a      	ldr	r2, [r7, #4]
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	1ad2      	subs	r2, r2, r3
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	699b      	ldr	r3, [r3, #24]
 800b8f4:	429a      	cmp	r2, r3
 800b8f6:	d302      	bcc.n	800b8fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	617b      	str	r3, [r7, #20]
 800b8fc:	e01b      	b.n	800b936 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b8fe:	4b10      	ldr	r3, [pc, #64]	@ (800b940 <prvInsertTimerInActiveList+0x7c>)
 800b900:	681a      	ldr	r2, [r3, #0]
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	3304      	adds	r3, #4
 800b906:	4619      	mov	r1, r3
 800b908:	4610      	mov	r0, r2
 800b90a:	f7fe f890 	bl	8009a2e <vListInsert>
 800b90e:	e012      	b.n	800b936 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b910:	687a      	ldr	r2, [r7, #4]
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	429a      	cmp	r2, r3
 800b916:	d206      	bcs.n	800b926 <prvInsertTimerInActiveList+0x62>
 800b918:	68ba      	ldr	r2, [r7, #8]
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	429a      	cmp	r2, r3
 800b91e:	d302      	bcc.n	800b926 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b920:	2301      	movs	r3, #1
 800b922:	617b      	str	r3, [r7, #20]
 800b924:	e007      	b.n	800b936 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b926:	4b07      	ldr	r3, [pc, #28]	@ (800b944 <prvInsertTimerInActiveList+0x80>)
 800b928:	681a      	ldr	r2, [r3, #0]
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	3304      	adds	r3, #4
 800b92e:	4619      	mov	r1, r3
 800b930:	4610      	mov	r0, r2
 800b932:	f7fe f87c 	bl	8009a2e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b936:	697b      	ldr	r3, [r7, #20]
}
 800b938:	4618      	mov	r0, r3
 800b93a:	3718      	adds	r7, #24
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}
 800b940:	20001688 	.word	0x20001688
 800b944:	20001684 	.word	0x20001684

0800b948 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b08e      	sub	sp, #56	@ 0x38
 800b94c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b94e:	e0d4      	b.n	800bafa <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2b00      	cmp	r3, #0
 800b954:	da1b      	bge.n	800b98e <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b956:	1d3b      	adds	r3, r7, #4
 800b958:	3304      	adds	r3, #4
 800b95a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b95c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d10d      	bne.n	800b97e <prvProcessReceivedCommands+0x36>
	__asm volatile
 800b962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b966:	b672      	cpsid	i
 800b968:	f383 8811 	msr	BASEPRI, r3
 800b96c:	f3bf 8f6f 	isb	sy
 800b970:	f3bf 8f4f 	dsb	sy
 800b974:	b662      	cpsie	i
 800b976:	61fb      	str	r3, [r7, #28]
}
 800b978:	bf00      	nop
 800b97a:	bf00      	nop
 800b97c:	e7fd      	b.n	800b97a <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b97e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b984:	6850      	ldr	r0, [r2, #4]
 800b986:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b988:	6892      	ldr	r2, [r2, #8]
 800b98a:	4611      	mov	r1, r2
 800b98c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	2b00      	cmp	r3, #0
 800b992:	f2c0 80b2 	blt.w	800bafa <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b99a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b99c:	695b      	ldr	r3, [r3, #20]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d004      	beq.n	800b9ac <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b9a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9a4:	3304      	adds	r3, #4
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	f7fe f87a 	bl	8009aa0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b9ac:	463b      	mov	r3, r7
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f7ff ff68 	bl	800b884 <prvSampleTimeNow>
 800b9b4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2b09      	cmp	r3, #9
 800b9ba:	f200 809b 	bhi.w	800baf4 <prvProcessReceivedCommands+0x1ac>
 800b9be:	a201      	add	r2, pc, #4	@ (adr r2, 800b9c4 <prvProcessReceivedCommands+0x7c>)
 800b9c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9c4:	0800b9ed 	.word	0x0800b9ed
 800b9c8:	0800b9ed 	.word	0x0800b9ed
 800b9cc:	0800b9ed 	.word	0x0800b9ed
 800b9d0:	0800ba67 	.word	0x0800ba67
 800b9d4:	0800ba7b 	.word	0x0800ba7b
 800b9d8:	0800bacb 	.word	0x0800bacb
 800b9dc:	0800b9ed 	.word	0x0800b9ed
 800b9e0:	0800b9ed 	.word	0x0800b9ed
 800b9e4:	0800ba67 	.word	0x0800ba67
 800b9e8:	0800ba7b 	.word	0x0800ba7b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b9ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b9f2:	f043 0301 	orr.w	r3, r3, #1
 800b9f6:	b2da      	uxtb	r2, r3
 800b9f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b9fe:	68ba      	ldr	r2, [r7, #8]
 800ba00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba02:	699b      	ldr	r3, [r3, #24]
 800ba04:	18d1      	adds	r1, r2, r3
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ba0c:	f7ff ff5a 	bl	800b8c4 <prvInsertTimerInActiveList>
 800ba10:	4603      	mov	r3, r0
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d070      	beq.n	800baf8 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ba16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba18:	6a1b      	ldr	r3, [r3, #32]
 800ba1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ba1c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ba1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ba24:	f003 0304 	and.w	r3, r3, #4
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d065      	beq.n	800baf8 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ba2c:	68ba      	ldr	r2, [r7, #8]
 800ba2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba30:	699b      	ldr	r3, [r3, #24]
 800ba32:	441a      	add	r2, r3
 800ba34:	2300      	movs	r3, #0
 800ba36:	9300      	str	r3, [sp, #0]
 800ba38:	2300      	movs	r3, #0
 800ba3a:	2100      	movs	r1, #0
 800ba3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ba3e:	f7ff fdfb 	bl	800b638 <xTimerGenericCommand>
 800ba42:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ba44:	6a3b      	ldr	r3, [r7, #32]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d156      	bne.n	800baf8 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800ba4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba4e:	b672      	cpsid	i
 800ba50:	f383 8811 	msr	BASEPRI, r3
 800ba54:	f3bf 8f6f 	isb	sy
 800ba58:	f3bf 8f4f 	dsb	sy
 800ba5c:	b662      	cpsie	i
 800ba5e:	61bb      	str	r3, [r7, #24]
}
 800ba60:	bf00      	nop
 800ba62:	bf00      	nop
 800ba64:	e7fd      	b.n	800ba62 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ba66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ba6c:	f023 0301 	bic.w	r3, r3, #1
 800ba70:	b2da      	uxtb	r2, r3
 800ba72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba74:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800ba78:	e03f      	b.n	800bafa <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ba7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ba80:	f043 0301 	orr.w	r3, r3, #1
 800ba84:	b2da      	uxtb	r2, r3
 800ba86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba88:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ba8c:	68ba      	ldr	r2, [r7, #8]
 800ba8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba90:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ba92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba94:	699b      	ldr	r3, [r3, #24]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d10d      	bne.n	800bab6 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800ba9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba9e:	b672      	cpsid	i
 800baa0:	f383 8811 	msr	BASEPRI, r3
 800baa4:	f3bf 8f6f 	isb	sy
 800baa8:	f3bf 8f4f 	dsb	sy
 800baac:	b662      	cpsie	i
 800baae:	617b      	str	r3, [r7, #20]
}
 800bab0:	bf00      	nop
 800bab2:	bf00      	nop
 800bab4:	e7fd      	b.n	800bab2 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bab8:	699a      	ldr	r2, [r3, #24]
 800baba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800babc:	18d1      	adds	r1, r2, r3
 800babe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bac0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bac2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bac4:	f7ff fefe 	bl	800b8c4 <prvInsertTimerInActiveList>
					break;
 800bac8:	e017      	b.n	800bafa <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800baca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bacc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bad0:	f003 0302 	and.w	r3, r3, #2
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d103      	bne.n	800bae0 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 800bad8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bada:	f000 fbd3 	bl	800c284 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bade:	e00c      	b.n	800bafa <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bae2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bae6:	f023 0301 	bic.w	r3, r3, #1
 800baea:	b2da      	uxtb	r2, r3
 800baec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800baf2:	e002      	b.n	800bafa <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 800baf4:	bf00      	nop
 800baf6:	e000      	b.n	800bafa <prvProcessReceivedCommands+0x1b2>
					break;
 800baf8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bafa:	4b08      	ldr	r3, [pc, #32]	@ (800bb1c <prvProcessReceivedCommands+0x1d4>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	1d39      	adds	r1, r7, #4
 800bb00:	2200      	movs	r2, #0
 800bb02:	4618      	mov	r0, r3
 800bb04:	f7fe faba 	bl	800a07c <xQueueReceive>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	f47f af20 	bne.w	800b950 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800bb10:	bf00      	nop
 800bb12:	bf00      	nop
 800bb14:	3730      	adds	r7, #48	@ 0x30
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bd80      	pop	{r7, pc}
 800bb1a:	bf00      	nop
 800bb1c:	2000168c 	.word	0x2000168c

0800bb20 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b088      	sub	sp, #32
 800bb24:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bb26:	e04b      	b.n	800bbc0 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bb28:	4b2f      	ldr	r3, [pc, #188]	@ (800bbe8 <prvSwitchTimerLists+0xc8>)
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	68db      	ldr	r3, [r3, #12]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb32:	4b2d      	ldr	r3, [pc, #180]	@ (800bbe8 <prvSwitchTimerLists+0xc8>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	68db      	ldr	r3, [r3, #12]
 800bb38:	68db      	ldr	r3, [r3, #12]
 800bb3a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	3304      	adds	r3, #4
 800bb40:	4618      	mov	r0, r3
 800bb42:	f7fd ffad 	bl	8009aa0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	6a1b      	ldr	r3, [r3, #32]
 800bb4a:	68f8      	ldr	r0, [r7, #12]
 800bb4c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bb54:	f003 0304 	and.w	r3, r3, #4
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d031      	beq.n	800bbc0 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	699b      	ldr	r3, [r3, #24]
 800bb60:	693a      	ldr	r2, [r7, #16]
 800bb62:	4413      	add	r3, r2
 800bb64:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bb66:	68ba      	ldr	r2, [r7, #8]
 800bb68:	693b      	ldr	r3, [r7, #16]
 800bb6a:	429a      	cmp	r2, r3
 800bb6c:	d90e      	bls.n	800bb8c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	68ba      	ldr	r2, [r7, #8]
 800bb72:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	68fa      	ldr	r2, [r7, #12]
 800bb78:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bb7a:	4b1b      	ldr	r3, [pc, #108]	@ (800bbe8 <prvSwitchTimerLists+0xc8>)
 800bb7c:	681a      	ldr	r2, [r3, #0]
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	3304      	adds	r3, #4
 800bb82:	4619      	mov	r1, r3
 800bb84:	4610      	mov	r0, r2
 800bb86:	f7fd ff52 	bl	8009a2e <vListInsert>
 800bb8a:	e019      	b.n	800bbc0 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	9300      	str	r3, [sp, #0]
 800bb90:	2300      	movs	r3, #0
 800bb92:	693a      	ldr	r2, [r7, #16]
 800bb94:	2100      	movs	r1, #0
 800bb96:	68f8      	ldr	r0, [r7, #12]
 800bb98:	f7ff fd4e 	bl	800b638 <xTimerGenericCommand>
 800bb9c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d10d      	bne.n	800bbc0 <prvSwitchTimerLists+0xa0>
	__asm volatile
 800bba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bba8:	b672      	cpsid	i
 800bbaa:	f383 8811 	msr	BASEPRI, r3
 800bbae:	f3bf 8f6f 	isb	sy
 800bbb2:	f3bf 8f4f 	dsb	sy
 800bbb6:	b662      	cpsie	i
 800bbb8:	603b      	str	r3, [r7, #0]
}
 800bbba:	bf00      	nop
 800bbbc:	bf00      	nop
 800bbbe:	e7fd      	b.n	800bbbc <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bbc0:	4b09      	ldr	r3, [pc, #36]	@ (800bbe8 <prvSwitchTimerLists+0xc8>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d1ae      	bne.n	800bb28 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bbca:	4b07      	ldr	r3, [pc, #28]	@ (800bbe8 <prvSwitchTimerLists+0xc8>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bbd0:	4b06      	ldr	r3, [pc, #24]	@ (800bbec <prvSwitchTimerLists+0xcc>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	4a04      	ldr	r2, [pc, #16]	@ (800bbe8 <prvSwitchTimerLists+0xc8>)
 800bbd6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bbd8:	4a04      	ldr	r2, [pc, #16]	@ (800bbec <prvSwitchTimerLists+0xcc>)
 800bbda:	697b      	ldr	r3, [r7, #20]
 800bbdc:	6013      	str	r3, [r2, #0]
}
 800bbde:	bf00      	nop
 800bbe0:	3718      	adds	r7, #24
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}
 800bbe6:	bf00      	nop
 800bbe8:	20001684 	.word	0x20001684
 800bbec:	20001688 	.word	0x20001688

0800bbf0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b082      	sub	sp, #8
 800bbf4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bbf6:	f000 f949 	bl	800be8c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bbfa:	4b15      	ldr	r3, [pc, #84]	@ (800bc50 <prvCheckForValidListAndQueue+0x60>)
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d120      	bne.n	800bc44 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bc02:	4814      	ldr	r0, [pc, #80]	@ (800bc54 <prvCheckForValidListAndQueue+0x64>)
 800bc04:	f7fd fec2 	bl	800998c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bc08:	4813      	ldr	r0, [pc, #76]	@ (800bc58 <prvCheckForValidListAndQueue+0x68>)
 800bc0a:	f7fd febf 	bl	800998c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bc0e:	4b13      	ldr	r3, [pc, #76]	@ (800bc5c <prvCheckForValidListAndQueue+0x6c>)
 800bc10:	4a10      	ldr	r2, [pc, #64]	@ (800bc54 <prvCheckForValidListAndQueue+0x64>)
 800bc12:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bc14:	4b12      	ldr	r3, [pc, #72]	@ (800bc60 <prvCheckForValidListAndQueue+0x70>)
 800bc16:	4a10      	ldr	r2, [pc, #64]	@ (800bc58 <prvCheckForValidListAndQueue+0x68>)
 800bc18:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	9300      	str	r3, [sp, #0]
 800bc1e:	4b11      	ldr	r3, [pc, #68]	@ (800bc64 <prvCheckForValidListAndQueue+0x74>)
 800bc20:	4a11      	ldr	r2, [pc, #68]	@ (800bc68 <prvCheckForValidListAndQueue+0x78>)
 800bc22:	2110      	movs	r1, #16
 800bc24:	200a      	movs	r0, #10
 800bc26:	f7fd ffd1 	bl	8009bcc <xQueueGenericCreateStatic>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	4a08      	ldr	r2, [pc, #32]	@ (800bc50 <prvCheckForValidListAndQueue+0x60>)
 800bc2e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bc30:	4b07      	ldr	r3, [pc, #28]	@ (800bc50 <prvCheckForValidListAndQueue+0x60>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d005      	beq.n	800bc44 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bc38:	4b05      	ldr	r3, [pc, #20]	@ (800bc50 <prvCheckForValidListAndQueue+0x60>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	490b      	ldr	r1, [pc, #44]	@ (800bc6c <prvCheckForValidListAndQueue+0x7c>)
 800bc3e:	4618      	mov	r0, r3
 800bc40:	f7fe fc14 	bl	800a46c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bc44:	f000 f958 	bl	800bef8 <vPortExitCritical>
}
 800bc48:	bf00      	nop
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}
 800bc4e:	bf00      	nop
 800bc50:	2000168c 	.word	0x2000168c
 800bc54:	2000165c 	.word	0x2000165c
 800bc58:	20001670 	.word	0x20001670
 800bc5c:	20001684 	.word	0x20001684
 800bc60:	20001688 	.word	0x20001688
 800bc64:	20001738 	.word	0x20001738
 800bc68:	20001698 	.word	0x20001698
 800bc6c:	08010600 	.word	0x08010600

0800bc70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bc70:	b480      	push	{r7}
 800bc72:	b085      	sub	sp, #20
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	60f8      	str	r0, [r7, #12]
 800bc78:	60b9      	str	r1, [r7, #8]
 800bc7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	3b04      	subs	r3, #4
 800bc80:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800bc88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	3b04      	subs	r3, #4
 800bc8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	f023 0201 	bic.w	r2, r3, #1
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	3b04      	subs	r3, #4
 800bc9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bca0:	4a0c      	ldr	r2, [pc, #48]	@ (800bcd4 <pxPortInitialiseStack+0x64>)
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	3b14      	subs	r3, #20
 800bcaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bcac:	687a      	ldr	r2, [r7, #4]
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	3b04      	subs	r3, #4
 800bcb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	f06f 0202 	mvn.w	r2, #2
 800bcbe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	3b20      	subs	r3, #32
 800bcc4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
}
 800bcc8:	4618      	mov	r0, r3
 800bcca:	3714      	adds	r7, #20
 800bccc:	46bd      	mov	sp, r7
 800bcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd2:	4770      	bx	lr
 800bcd4:	0800bcd9 	.word	0x0800bcd9

0800bcd8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bcd8:	b480      	push	{r7}
 800bcda:	b085      	sub	sp, #20
 800bcdc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bcde:	2300      	movs	r3, #0
 800bce0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bce2:	4b15      	ldr	r3, [pc, #84]	@ (800bd38 <prvTaskExitError+0x60>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcea:	d00d      	beq.n	800bd08 <prvTaskExitError+0x30>
	__asm volatile
 800bcec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcf0:	b672      	cpsid	i
 800bcf2:	f383 8811 	msr	BASEPRI, r3
 800bcf6:	f3bf 8f6f 	isb	sy
 800bcfa:	f3bf 8f4f 	dsb	sy
 800bcfe:	b662      	cpsie	i
 800bd00:	60fb      	str	r3, [r7, #12]
}
 800bd02:	bf00      	nop
 800bd04:	bf00      	nop
 800bd06:	e7fd      	b.n	800bd04 <prvTaskExitError+0x2c>
	__asm volatile
 800bd08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd0c:	b672      	cpsid	i
 800bd0e:	f383 8811 	msr	BASEPRI, r3
 800bd12:	f3bf 8f6f 	isb	sy
 800bd16:	f3bf 8f4f 	dsb	sy
 800bd1a:	b662      	cpsie	i
 800bd1c:	60bb      	str	r3, [r7, #8]
}
 800bd1e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bd20:	bf00      	nop
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d0fc      	beq.n	800bd22 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bd28:	bf00      	nop
 800bd2a:	bf00      	nop
 800bd2c:	3714      	adds	r7, #20
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd34:	4770      	bx	lr
 800bd36:	bf00      	nop
 800bd38:	20000098 	.word	0x20000098
 800bd3c:	00000000 	.word	0x00000000

0800bd40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bd40:	4b07      	ldr	r3, [pc, #28]	@ (800bd60 <pxCurrentTCBConst2>)
 800bd42:	6819      	ldr	r1, [r3, #0]
 800bd44:	6808      	ldr	r0, [r1, #0]
 800bd46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd4a:	f380 8809 	msr	PSP, r0
 800bd4e:	f3bf 8f6f 	isb	sy
 800bd52:	f04f 0000 	mov.w	r0, #0
 800bd56:	f380 8811 	msr	BASEPRI, r0
 800bd5a:	4770      	bx	lr
 800bd5c:	f3af 8000 	nop.w

0800bd60 <pxCurrentTCBConst2>:
 800bd60:	2000115c 	.word	0x2000115c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bd64:	bf00      	nop
 800bd66:	bf00      	nop

0800bd68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bd68:	4808      	ldr	r0, [pc, #32]	@ (800bd8c <prvPortStartFirstTask+0x24>)
 800bd6a:	6800      	ldr	r0, [r0, #0]
 800bd6c:	6800      	ldr	r0, [r0, #0]
 800bd6e:	f380 8808 	msr	MSP, r0
 800bd72:	f04f 0000 	mov.w	r0, #0
 800bd76:	f380 8814 	msr	CONTROL, r0
 800bd7a:	b662      	cpsie	i
 800bd7c:	b661      	cpsie	f
 800bd7e:	f3bf 8f4f 	dsb	sy
 800bd82:	f3bf 8f6f 	isb	sy
 800bd86:	df00      	svc	0
 800bd88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bd8a:	bf00      	nop
 800bd8c:	e000ed08 	.word	0xe000ed08

0800bd90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b084      	sub	sp, #16
 800bd94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bd96:	4b37      	ldr	r3, [pc, #220]	@ (800be74 <xPortStartScheduler+0xe4>)
 800bd98:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	781b      	ldrb	r3, [r3, #0]
 800bd9e:	b2db      	uxtb	r3, r3
 800bda0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	22ff      	movs	r2, #255	@ 0xff
 800bda6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	781b      	ldrb	r3, [r3, #0]
 800bdac:	b2db      	uxtb	r3, r3
 800bdae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bdb0:	78fb      	ldrb	r3, [r7, #3]
 800bdb2:	b2db      	uxtb	r3, r3
 800bdb4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800bdb8:	b2da      	uxtb	r2, r3
 800bdba:	4b2f      	ldr	r3, [pc, #188]	@ (800be78 <xPortStartScheduler+0xe8>)
 800bdbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bdbe:	4b2f      	ldr	r3, [pc, #188]	@ (800be7c <xPortStartScheduler+0xec>)
 800bdc0:	2207      	movs	r2, #7
 800bdc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bdc4:	e009      	b.n	800bdda <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800bdc6:	4b2d      	ldr	r3, [pc, #180]	@ (800be7c <xPortStartScheduler+0xec>)
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	3b01      	subs	r3, #1
 800bdcc:	4a2b      	ldr	r2, [pc, #172]	@ (800be7c <xPortStartScheduler+0xec>)
 800bdce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bdd0:	78fb      	ldrb	r3, [r7, #3]
 800bdd2:	b2db      	uxtb	r3, r3
 800bdd4:	005b      	lsls	r3, r3, #1
 800bdd6:	b2db      	uxtb	r3, r3
 800bdd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bdda:	78fb      	ldrb	r3, [r7, #3]
 800bddc:	b2db      	uxtb	r3, r3
 800bdde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bde2:	2b80      	cmp	r3, #128	@ 0x80
 800bde4:	d0ef      	beq.n	800bdc6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bde6:	4b25      	ldr	r3, [pc, #148]	@ (800be7c <xPortStartScheduler+0xec>)
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	f1c3 0307 	rsb	r3, r3, #7
 800bdee:	2b04      	cmp	r3, #4
 800bdf0:	d00d      	beq.n	800be0e <xPortStartScheduler+0x7e>
	__asm volatile
 800bdf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdf6:	b672      	cpsid	i
 800bdf8:	f383 8811 	msr	BASEPRI, r3
 800bdfc:	f3bf 8f6f 	isb	sy
 800be00:	f3bf 8f4f 	dsb	sy
 800be04:	b662      	cpsie	i
 800be06:	60bb      	str	r3, [r7, #8]
}
 800be08:	bf00      	nop
 800be0a:	bf00      	nop
 800be0c:	e7fd      	b.n	800be0a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800be0e:	4b1b      	ldr	r3, [pc, #108]	@ (800be7c <xPortStartScheduler+0xec>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	021b      	lsls	r3, r3, #8
 800be14:	4a19      	ldr	r2, [pc, #100]	@ (800be7c <xPortStartScheduler+0xec>)
 800be16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800be18:	4b18      	ldr	r3, [pc, #96]	@ (800be7c <xPortStartScheduler+0xec>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800be20:	4a16      	ldr	r2, [pc, #88]	@ (800be7c <xPortStartScheduler+0xec>)
 800be22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	b2da      	uxtb	r2, r3
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800be2c:	4b14      	ldr	r3, [pc, #80]	@ (800be80 <xPortStartScheduler+0xf0>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	4a13      	ldr	r2, [pc, #76]	@ (800be80 <xPortStartScheduler+0xf0>)
 800be32:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800be36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800be38:	4b11      	ldr	r3, [pc, #68]	@ (800be80 <xPortStartScheduler+0xf0>)
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	4a10      	ldr	r2, [pc, #64]	@ (800be80 <xPortStartScheduler+0xf0>)
 800be3e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800be42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800be44:	f000 f8dc 	bl	800c000 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800be48:	4b0e      	ldr	r3, [pc, #56]	@ (800be84 <xPortStartScheduler+0xf4>)
 800be4a:	2200      	movs	r2, #0
 800be4c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800be4e:	f000 f8fb 	bl	800c048 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800be52:	4b0d      	ldr	r3, [pc, #52]	@ (800be88 <xPortStartScheduler+0xf8>)
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	4a0c      	ldr	r2, [pc, #48]	@ (800be88 <xPortStartScheduler+0xf8>)
 800be58:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800be5c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800be5e:	f7ff ff83 	bl	800bd68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800be62:	f7ff f807 	bl	800ae74 <vTaskSwitchContext>
	prvTaskExitError();
 800be66:	f7ff ff37 	bl	800bcd8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800be6a:	2300      	movs	r3, #0
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	3710      	adds	r7, #16
 800be70:	46bd      	mov	sp, r7
 800be72:	bd80      	pop	{r7, pc}
 800be74:	e000e400 	.word	0xe000e400
 800be78:	20001788 	.word	0x20001788
 800be7c:	2000178c 	.word	0x2000178c
 800be80:	e000ed20 	.word	0xe000ed20
 800be84:	20000098 	.word	0x20000098
 800be88:	e000ef34 	.word	0xe000ef34

0800be8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800be8c:	b480      	push	{r7}
 800be8e:	b083      	sub	sp, #12
 800be90:	af00      	add	r7, sp, #0
	__asm volatile
 800be92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be96:	b672      	cpsid	i
 800be98:	f383 8811 	msr	BASEPRI, r3
 800be9c:	f3bf 8f6f 	isb	sy
 800bea0:	f3bf 8f4f 	dsb	sy
 800bea4:	b662      	cpsie	i
 800bea6:	607b      	str	r3, [r7, #4]
}
 800bea8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800beaa:	4b11      	ldr	r3, [pc, #68]	@ (800bef0 <vPortEnterCritical+0x64>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	3301      	adds	r3, #1
 800beb0:	4a0f      	ldr	r2, [pc, #60]	@ (800bef0 <vPortEnterCritical+0x64>)
 800beb2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800beb4:	4b0e      	ldr	r3, [pc, #56]	@ (800bef0 <vPortEnterCritical+0x64>)
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	2b01      	cmp	r3, #1
 800beba:	d112      	bne.n	800bee2 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bebc:	4b0d      	ldr	r3, [pc, #52]	@ (800bef4 <vPortEnterCritical+0x68>)
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	b2db      	uxtb	r3, r3
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d00d      	beq.n	800bee2 <vPortEnterCritical+0x56>
	__asm volatile
 800bec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beca:	b672      	cpsid	i
 800becc:	f383 8811 	msr	BASEPRI, r3
 800bed0:	f3bf 8f6f 	isb	sy
 800bed4:	f3bf 8f4f 	dsb	sy
 800bed8:	b662      	cpsie	i
 800beda:	603b      	str	r3, [r7, #0]
}
 800bedc:	bf00      	nop
 800bede:	bf00      	nop
 800bee0:	e7fd      	b.n	800bede <vPortEnterCritical+0x52>
	}
}
 800bee2:	bf00      	nop
 800bee4:	370c      	adds	r7, #12
 800bee6:	46bd      	mov	sp, r7
 800bee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beec:	4770      	bx	lr
 800beee:	bf00      	nop
 800bef0:	20000098 	.word	0x20000098
 800bef4:	e000ed04 	.word	0xe000ed04

0800bef8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bef8:	b480      	push	{r7}
 800befa:	b083      	sub	sp, #12
 800befc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800befe:	4b13      	ldr	r3, [pc, #76]	@ (800bf4c <vPortExitCritical+0x54>)
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d10d      	bne.n	800bf22 <vPortExitCritical+0x2a>
	__asm volatile
 800bf06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf0a:	b672      	cpsid	i
 800bf0c:	f383 8811 	msr	BASEPRI, r3
 800bf10:	f3bf 8f6f 	isb	sy
 800bf14:	f3bf 8f4f 	dsb	sy
 800bf18:	b662      	cpsie	i
 800bf1a:	607b      	str	r3, [r7, #4]
}
 800bf1c:	bf00      	nop
 800bf1e:	bf00      	nop
 800bf20:	e7fd      	b.n	800bf1e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800bf22:	4b0a      	ldr	r3, [pc, #40]	@ (800bf4c <vPortExitCritical+0x54>)
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	3b01      	subs	r3, #1
 800bf28:	4a08      	ldr	r2, [pc, #32]	@ (800bf4c <vPortExitCritical+0x54>)
 800bf2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bf2c:	4b07      	ldr	r3, [pc, #28]	@ (800bf4c <vPortExitCritical+0x54>)
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d105      	bne.n	800bf40 <vPortExitCritical+0x48>
 800bf34:	2300      	movs	r3, #0
 800bf36:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	f383 8811 	msr	BASEPRI, r3
}
 800bf3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bf40:	bf00      	nop
 800bf42:	370c      	adds	r7, #12
 800bf44:	46bd      	mov	sp, r7
 800bf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4a:	4770      	bx	lr
 800bf4c:	20000098 	.word	0x20000098

0800bf50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bf50:	f3ef 8009 	mrs	r0, PSP
 800bf54:	f3bf 8f6f 	isb	sy
 800bf58:	4b15      	ldr	r3, [pc, #84]	@ (800bfb0 <pxCurrentTCBConst>)
 800bf5a:	681a      	ldr	r2, [r3, #0]
 800bf5c:	f01e 0f10 	tst.w	lr, #16
 800bf60:	bf08      	it	eq
 800bf62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bf66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf6a:	6010      	str	r0, [r2, #0]
 800bf6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bf70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800bf74:	b672      	cpsid	i
 800bf76:	f380 8811 	msr	BASEPRI, r0
 800bf7a:	f3bf 8f4f 	dsb	sy
 800bf7e:	f3bf 8f6f 	isb	sy
 800bf82:	b662      	cpsie	i
 800bf84:	f7fe ff76 	bl	800ae74 <vTaskSwitchContext>
 800bf88:	f04f 0000 	mov.w	r0, #0
 800bf8c:	f380 8811 	msr	BASEPRI, r0
 800bf90:	bc09      	pop	{r0, r3}
 800bf92:	6819      	ldr	r1, [r3, #0]
 800bf94:	6808      	ldr	r0, [r1, #0]
 800bf96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf9a:	f01e 0f10 	tst.w	lr, #16
 800bf9e:	bf08      	it	eq
 800bfa0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bfa4:	f380 8809 	msr	PSP, r0
 800bfa8:	f3bf 8f6f 	isb	sy
 800bfac:	4770      	bx	lr
 800bfae:	bf00      	nop

0800bfb0 <pxCurrentTCBConst>:
 800bfb0:	2000115c 	.word	0x2000115c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bfb4:	bf00      	nop
 800bfb6:	bf00      	nop

0800bfb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b082      	sub	sp, #8
 800bfbc:	af00      	add	r7, sp, #0
	__asm volatile
 800bfbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfc2:	b672      	cpsid	i
 800bfc4:	f383 8811 	msr	BASEPRI, r3
 800bfc8:	f3bf 8f6f 	isb	sy
 800bfcc:	f3bf 8f4f 	dsb	sy
 800bfd0:	b662      	cpsie	i
 800bfd2:	607b      	str	r3, [r7, #4]
}
 800bfd4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bfd6:	f7fe fe91 	bl	800acfc <xTaskIncrementTick>
 800bfda:	4603      	mov	r3, r0
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d003      	beq.n	800bfe8 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bfe0:	4b06      	ldr	r3, [pc, #24]	@ (800bffc <xPortSysTickHandler+0x44>)
 800bfe2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bfe6:	601a      	str	r2, [r3, #0]
 800bfe8:	2300      	movs	r3, #0
 800bfea:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	f383 8811 	msr	BASEPRI, r3
}
 800bff2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bff4:	bf00      	nop
 800bff6:	3708      	adds	r7, #8
 800bff8:	46bd      	mov	sp, r7
 800bffa:	bd80      	pop	{r7, pc}
 800bffc:	e000ed04 	.word	0xe000ed04

0800c000 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c000:	b480      	push	{r7}
 800c002:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c004:	4b0b      	ldr	r3, [pc, #44]	@ (800c034 <vPortSetupTimerInterrupt+0x34>)
 800c006:	2200      	movs	r2, #0
 800c008:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c00a:	4b0b      	ldr	r3, [pc, #44]	@ (800c038 <vPortSetupTimerInterrupt+0x38>)
 800c00c:	2200      	movs	r2, #0
 800c00e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c010:	4b0a      	ldr	r3, [pc, #40]	@ (800c03c <vPortSetupTimerInterrupt+0x3c>)
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	4a0a      	ldr	r2, [pc, #40]	@ (800c040 <vPortSetupTimerInterrupt+0x40>)
 800c016:	fba2 2303 	umull	r2, r3, r2, r3
 800c01a:	099b      	lsrs	r3, r3, #6
 800c01c:	4a09      	ldr	r2, [pc, #36]	@ (800c044 <vPortSetupTimerInterrupt+0x44>)
 800c01e:	3b01      	subs	r3, #1
 800c020:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c022:	4b04      	ldr	r3, [pc, #16]	@ (800c034 <vPortSetupTimerInterrupt+0x34>)
 800c024:	2207      	movs	r2, #7
 800c026:	601a      	str	r2, [r3, #0]
}
 800c028:	bf00      	nop
 800c02a:	46bd      	mov	sp, r7
 800c02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c030:	4770      	bx	lr
 800c032:	bf00      	nop
 800c034:	e000e010 	.word	0xe000e010
 800c038:	e000e018 	.word	0xe000e018
 800c03c:	20000000 	.word	0x20000000
 800c040:	10624dd3 	.word	0x10624dd3
 800c044:	e000e014 	.word	0xe000e014

0800c048 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c048:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c058 <vPortEnableVFP+0x10>
 800c04c:	6801      	ldr	r1, [r0, #0]
 800c04e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c052:	6001      	str	r1, [r0, #0]
 800c054:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c056:	bf00      	nop
 800c058:	e000ed88 	.word	0xe000ed88

0800c05c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c05c:	b480      	push	{r7}
 800c05e:	b085      	sub	sp, #20
 800c060:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c062:	f3ef 8305 	mrs	r3, IPSR
 800c066:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	2b0f      	cmp	r3, #15
 800c06c:	d917      	bls.n	800c09e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c06e:	4a1a      	ldr	r2, [pc, #104]	@ (800c0d8 <vPortValidateInterruptPriority+0x7c>)
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	4413      	add	r3, r2
 800c074:	781b      	ldrb	r3, [r3, #0]
 800c076:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c078:	4b18      	ldr	r3, [pc, #96]	@ (800c0dc <vPortValidateInterruptPriority+0x80>)
 800c07a:	781b      	ldrb	r3, [r3, #0]
 800c07c:	7afa      	ldrb	r2, [r7, #11]
 800c07e:	429a      	cmp	r2, r3
 800c080:	d20d      	bcs.n	800c09e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 800c082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c086:	b672      	cpsid	i
 800c088:	f383 8811 	msr	BASEPRI, r3
 800c08c:	f3bf 8f6f 	isb	sy
 800c090:	f3bf 8f4f 	dsb	sy
 800c094:	b662      	cpsie	i
 800c096:	607b      	str	r3, [r7, #4]
}
 800c098:	bf00      	nop
 800c09a:	bf00      	nop
 800c09c:	e7fd      	b.n	800c09a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c09e:	4b10      	ldr	r3, [pc, #64]	@ (800c0e0 <vPortValidateInterruptPriority+0x84>)
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c0a6:	4b0f      	ldr	r3, [pc, #60]	@ (800c0e4 <vPortValidateInterruptPriority+0x88>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	429a      	cmp	r2, r3
 800c0ac:	d90d      	bls.n	800c0ca <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800c0ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0b2:	b672      	cpsid	i
 800c0b4:	f383 8811 	msr	BASEPRI, r3
 800c0b8:	f3bf 8f6f 	isb	sy
 800c0bc:	f3bf 8f4f 	dsb	sy
 800c0c0:	b662      	cpsie	i
 800c0c2:	603b      	str	r3, [r7, #0]
}
 800c0c4:	bf00      	nop
 800c0c6:	bf00      	nop
 800c0c8:	e7fd      	b.n	800c0c6 <vPortValidateInterruptPriority+0x6a>
	}
 800c0ca:	bf00      	nop
 800c0cc:	3714      	adds	r7, #20
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d4:	4770      	bx	lr
 800c0d6:	bf00      	nop
 800c0d8:	e000e3f0 	.word	0xe000e3f0
 800c0dc:	20001788 	.word	0x20001788
 800c0e0:	e000ed0c 	.word	0xe000ed0c
 800c0e4:	2000178c 	.word	0x2000178c

0800c0e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b08a      	sub	sp, #40	@ 0x28
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c0f4:	f7fe fd44 	bl	800ab80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c0f8:	4b5d      	ldr	r3, [pc, #372]	@ (800c270 <pvPortMalloc+0x188>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d101      	bne.n	800c104 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c100:	f000 f920 	bl	800c344 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c104:	4b5b      	ldr	r3, [pc, #364]	@ (800c274 <pvPortMalloc+0x18c>)
 800c106:	681a      	ldr	r2, [r3, #0]
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	4013      	ands	r3, r2
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	f040 8094 	bne.w	800c23a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d020      	beq.n	800c15a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 800c118:	2208      	movs	r2, #8
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	4413      	add	r3, r2
 800c11e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f003 0307 	and.w	r3, r3, #7
 800c126:	2b00      	cmp	r3, #0
 800c128:	d017      	beq.n	800c15a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f023 0307 	bic.w	r3, r3, #7
 800c130:	3308      	adds	r3, #8
 800c132:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f003 0307 	and.w	r3, r3, #7
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d00d      	beq.n	800c15a <pvPortMalloc+0x72>
	__asm volatile
 800c13e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c142:	b672      	cpsid	i
 800c144:	f383 8811 	msr	BASEPRI, r3
 800c148:	f3bf 8f6f 	isb	sy
 800c14c:	f3bf 8f4f 	dsb	sy
 800c150:	b662      	cpsie	i
 800c152:	617b      	str	r3, [r7, #20]
}
 800c154:	bf00      	nop
 800c156:	bf00      	nop
 800c158:	e7fd      	b.n	800c156 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d06c      	beq.n	800c23a <pvPortMalloc+0x152>
 800c160:	4b45      	ldr	r3, [pc, #276]	@ (800c278 <pvPortMalloc+0x190>)
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	687a      	ldr	r2, [r7, #4]
 800c166:	429a      	cmp	r2, r3
 800c168:	d867      	bhi.n	800c23a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c16a:	4b44      	ldr	r3, [pc, #272]	@ (800c27c <pvPortMalloc+0x194>)
 800c16c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c16e:	4b43      	ldr	r3, [pc, #268]	@ (800c27c <pvPortMalloc+0x194>)
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c174:	e004      	b.n	800c180 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 800c176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c178:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c17a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c182:	685b      	ldr	r3, [r3, #4]
 800c184:	687a      	ldr	r2, [r7, #4]
 800c186:	429a      	cmp	r2, r3
 800c188:	d903      	bls.n	800c192 <pvPortMalloc+0xaa>
 800c18a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d1f1      	bne.n	800c176 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c192:	4b37      	ldr	r3, [pc, #220]	@ (800c270 <pvPortMalloc+0x188>)
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c198:	429a      	cmp	r2, r3
 800c19a:	d04e      	beq.n	800c23a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c19c:	6a3b      	ldr	r3, [r7, #32]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	2208      	movs	r2, #8
 800c1a2:	4413      	add	r3, r2
 800c1a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c1a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1a8:	681a      	ldr	r2, [r3, #0]
 800c1aa:	6a3b      	ldr	r3, [r7, #32]
 800c1ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c1ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1b0:	685a      	ldr	r2, [r3, #4]
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	1ad2      	subs	r2, r2, r3
 800c1b6:	2308      	movs	r3, #8
 800c1b8:	005b      	lsls	r3, r3, #1
 800c1ba:	429a      	cmp	r2, r3
 800c1bc:	d922      	bls.n	800c204 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c1be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	4413      	add	r3, r2
 800c1c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c1c6:	69bb      	ldr	r3, [r7, #24]
 800c1c8:	f003 0307 	and.w	r3, r3, #7
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d00d      	beq.n	800c1ec <pvPortMalloc+0x104>
	__asm volatile
 800c1d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1d4:	b672      	cpsid	i
 800c1d6:	f383 8811 	msr	BASEPRI, r3
 800c1da:	f3bf 8f6f 	isb	sy
 800c1de:	f3bf 8f4f 	dsb	sy
 800c1e2:	b662      	cpsie	i
 800c1e4:	613b      	str	r3, [r7, #16]
}
 800c1e6:	bf00      	nop
 800c1e8:	bf00      	nop
 800c1ea:	e7fd      	b.n	800c1e8 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c1ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1ee:	685a      	ldr	r2, [r3, #4]
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	1ad2      	subs	r2, r2, r3
 800c1f4:	69bb      	ldr	r3, [r7, #24]
 800c1f6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c1f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1fa:	687a      	ldr	r2, [r7, #4]
 800c1fc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c1fe:	69b8      	ldr	r0, [r7, #24]
 800c200:	f000 f902 	bl	800c408 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c204:	4b1c      	ldr	r3, [pc, #112]	@ (800c278 <pvPortMalloc+0x190>)
 800c206:	681a      	ldr	r2, [r3, #0]
 800c208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c20a:	685b      	ldr	r3, [r3, #4]
 800c20c:	1ad3      	subs	r3, r2, r3
 800c20e:	4a1a      	ldr	r2, [pc, #104]	@ (800c278 <pvPortMalloc+0x190>)
 800c210:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c212:	4b19      	ldr	r3, [pc, #100]	@ (800c278 <pvPortMalloc+0x190>)
 800c214:	681a      	ldr	r2, [r3, #0]
 800c216:	4b1a      	ldr	r3, [pc, #104]	@ (800c280 <pvPortMalloc+0x198>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	429a      	cmp	r2, r3
 800c21c:	d203      	bcs.n	800c226 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c21e:	4b16      	ldr	r3, [pc, #88]	@ (800c278 <pvPortMalloc+0x190>)
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	4a17      	ldr	r2, [pc, #92]	@ (800c280 <pvPortMalloc+0x198>)
 800c224:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c228:	685a      	ldr	r2, [r3, #4]
 800c22a:	4b12      	ldr	r3, [pc, #72]	@ (800c274 <pvPortMalloc+0x18c>)
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	431a      	orrs	r2, r3
 800c230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c232:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c236:	2200      	movs	r2, #0
 800c238:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c23a:	f7fe fcaf 	bl	800ab9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c23e:	69fb      	ldr	r3, [r7, #28]
 800c240:	f003 0307 	and.w	r3, r3, #7
 800c244:	2b00      	cmp	r3, #0
 800c246:	d00d      	beq.n	800c264 <pvPortMalloc+0x17c>
	__asm volatile
 800c248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c24c:	b672      	cpsid	i
 800c24e:	f383 8811 	msr	BASEPRI, r3
 800c252:	f3bf 8f6f 	isb	sy
 800c256:	f3bf 8f4f 	dsb	sy
 800c25a:	b662      	cpsie	i
 800c25c:	60fb      	str	r3, [r7, #12]
}
 800c25e:	bf00      	nop
 800c260:	bf00      	nop
 800c262:	e7fd      	b.n	800c260 <pvPortMalloc+0x178>
	return pvReturn;
 800c264:	69fb      	ldr	r3, [r7, #28]
}
 800c266:	4618      	mov	r0, r3
 800c268:	3728      	adds	r7, #40	@ 0x28
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd80      	pop	{r7, pc}
 800c26e:	bf00      	nop
 800c270:	2000df98 	.word	0x2000df98
 800c274:	2000dfa4 	.word	0x2000dfa4
 800c278:	2000df9c 	.word	0x2000df9c
 800c27c:	2000df90 	.word	0x2000df90
 800c280:	2000dfa0 	.word	0x2000dfa0

0800c284 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b086      	sub	sp, #24
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d04e      	beq.n	800c334 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c296:	2308      	movs	r3, #8
 800c298:	425b      	negs	r3, r3
 800c29a:	697a      	ldr	r2, [r7, #20]
 800c29c:	4413      	add	r3, r2
 800c29e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c2a0:	697b      	ldr	r3, [r7, #20]
 800c2a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c2a4:	693b      	ldr	r3, [r7, #16]
 800c2a6:	685a      	ldr	r2, [r3, #4]
 800c2a8:	4b24      	ldr	r3, [pc, #144]	@ (800c33c <vPortFree+0xb8>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	4013      	ands	r3, r2
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d10d      	bne.n	800c2ce <vPortFree+0x4a>
	__asm volatile
 800c2b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2b6:	b672      	cpsid	i
 800c2b8:	f383 8811 	msr	BASEPRI, r3
 800c2bc:	f3bf 8f6f 	isb	sy
 800c2c0:	f3bf 8f4f 	dsb	sy
 800c2c4:	b662      	cpsie	i
 800c2c6:	60fb      	str	r3, [r7, #12]
}
 800c2c8:	bf00      	nop
 800c2ca:	bf00      	nop
 800c2cc:	e7fd      	b.n	800c2ca <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c2ce:	693b      	ldr	r3, [r7, #16]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d00d      	beq.n	800c2f2 <vPortFree+0x6e>
	__asm volatile
 800c2d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2da:	b672      	cpsid	i
 800c2dc:	f383 8811 	msr	BASEPRI, r3
 800c2e0:	f3bf 8f6f 	isb	sy
 800c2e4:	f3bf 8f4f 	dsb	sy
 800c2e8:	b662      	cpsie	i
 800c2ea:	60bb      	str	r3, [r7, #8]
}
 800c2ec:	bf00      	nop
 800c2ee:	bf00      	nop
 800c2f0:	e7fd      	b.n	800c2ee <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c2f2:	693b      	ldr	r3, [r7, #16]
 800c2f4:	685a      	ldr	r2, [r3, #4]
 800c2f6:	4b11      	ldr	r3, [pc, #68]	@ (800c33c <vPortFree+0xb8>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	4013      	ands	r3, r2
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d019      	beq.n	800c334 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c300:	693b      	ldr	r3, [r7, #16]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d115      	bne.n	800c334 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c308:	693b      	ldr	r3, [r7, #16]
 800c30a:	685a      	ldr	r2, [r3, #4]
 800c30c:	4b0b      	ldr	r3, [pc, #44]	@ (800c33c <vPortFree+0xb8>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	43db      	mvns	r3, r3
 800c312:	401a      	ands	r2, r3
 800c314:	693b      	ldr	r3, [r7, #16]
 800c316:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c318:	f7fe fc32 	bl	800ab80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c31c:	693b      	ldr	r3, [r7, #16]
 800c31e:	685a      	ldr	r2, [r3, #4]
 800c320:	4b07      	ldr	r3, [pc, #28]	@ (800c340 <vPortFree+0xbc>)
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	4413      	add	r3, r2
 800c326:	4a06      	ldr	r2, [pc, #24]	@ (800c340 <vPortFree+0xbc>)
 800c328:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c32a:	6938      	ldr	r0, [r7, #16]
 800c32c:	f000 f86c 	bl	800c408 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c330:	f7fe fc34 	bl	800ab9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c334:	bf00      	nop
 800c336:	3718      	adds	r7, #24
 800c338:	46bd      	mov	sp, r7
 800c33a:	bd80      	pop	{r7, pc}
 800c33c:	2000dfa4 	.word	0x2000dfa4
 800c340:	2000df9c 	.word	0x2000df9c

0800c344 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c344:	b480      	push	{r7}
 800c346:	b085      	sub	sp, #20
 800c348:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c34a:	f44f 4348 	mov.w	r3, #51200	@ 0xc800
 800c34e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c350:	4b27      	ldr	r3, [pc, #156]	@ (800c3f0 <prvHeapInit+0xac>)
 800c352:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	f003 0307 	and.w	r3, r3, #7
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d00c      	beq.n	800c378 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	3307      	adds	r3, #7
 800c362:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	f023 0307 	bic.w	r3, r3, #7
 800c36a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c36c:	68ba      	ldr	r2, [r7, #8]
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	1ad3      	subs	r3, r2, r3
 800c372:	4a1f      	ldr	r2, [pc, #124]	@ (800c3f0 <prvHeapInit+0xac>)
 800c374:	4413      	add	r3, r2
 800c376:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c37c:	4a1d      	ldr	r2, [pc, #116]	@ (800c3f4 <prvHeapInit+0xb0>)
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c382:	4b1c      	ldr	r3, [pc, #112]	@ (800c3f4 <prvHeapInit+0xb0>)
 800c384:	2200      	movs	r2, #0
 800c386:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	68ba      	ldr	r2, [r7, #8]
 800c38c:	4413      	add	r3, r2
 800c38e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c390:	2208      	movs	r2, #8
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	1a9b      	subs	r3, r3, r2
 800c396:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	f023 0307 	bic.w	r3, r3, #7
 800c39e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	4a15      	ldr	r2, [pc, #84]	@ (800c3f8 <prvHeapInit+0xb4>)
 800c3a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c3a6:	4b14      	ldr	r3, [pc, #80]	@ (800c3f8 <prvHeapInit+0xb4>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c3ae:	4b12      	ldr	r3, [pc, #72]	@ (800c3f8 <prvHeapInit+0xb4>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	68fa      	ldr	r2, [r7, #12]
 800c3be:	1ad2      	subs	r2, r2, r3
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c3c4:	4b0c      	ldr	r3, [pc, #48]	@ (800c3f8 <prvHeapInit+0xb4>)
 800c3c6:	681a      	ldr	r2, [r3, #0]
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	685b      	ldr	r3, [r3, #4]
 800c3d0:	4a0a      	ldr	r2, [pc, #40]	@ (800c3fc <prvHeapInit+0xb8>)
 800c3d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	685b      	ldr	r3, [r3, #4]
 800c3d8:	4a09      	ldr	r2, [pc, #36]	@ (800c400 <prvHeapInit+0xbc>)
 800c3da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c3dc:	4b09      	ldr	r3, [pc, #36]	@ (800c404 <prvHeapInit+0xc0>)
 800c3de:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c3e2:	601a      	str	r2, [r3, #0]
}
 800c3e4:	bf00      	nop
 800c3e6:	3714      	adds	r7, #20
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ee:	4770      	bx	lr
 800c3f0:	20001790 	.word	0x20001790
 800c3f4:	2000df90 	.word	0x2000df90
 800c3f8:	2000df98 	.word	0x2000df98
 800c3fc:	2000dfa0 	.word	0x2000dfa0
 800c400:	2000df9c 	.word	0x2000df9c
 800c404:	2000dfa4 	.word	0x2000dfa4

0800c408 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c408:	b480      	push	{r7}
 800c40a:	b085      	sub	sp, #20
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c410:	4b28      	ldr	r3, [pc, #160]	@ (800c4b4 <prvInsertBlockIntoFreeList+0xac>)
 800c412:	60fb      	str	r3, [r7, #12]
 800c414:	e002      	b.n	800c41c <prvInsertBlockIntoFreeList+0x14>
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	60fb      	str	r3, [r7, #12]
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	687a      	ldr	r2, [r7, #4]
 800c422:	429a      	cmp	r2, r3
 800c424:	d8f7      	bhi.n	800c416 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	685b      	ldr	r3, [r3, #4]
 800c42e:	68ba      	ldr	r2, [r7, #8]
 800c430:	4413      	add	r3, r2
 800c432:	687a      	ldr	r2, [r7, #4]
 800c434:	429a      	cmp	r2, r3
 800c436:	d108      	bne.n	800c44a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	685a      	ldr	r2, [r3, #4]
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	685b      	ldr	r3, [r3, #4]
 800c440:	441a      	add	r2, r3
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	685b      	ldr	r3, [r3, #4]
 800c452:	68ba      	ldr	r2, [r7, #8]
 800c454:	441a      	add	r2, r3
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	429a      	cmp	r2, r3
 800c45c:	d118      	bne.n	800c490 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	681a      	ldr	r2, [r3, #0]
 800c462:	4b15      	ldr	r3, [pc, #84]	@ (800c4b8 <prvInsertBlockIntoFreeList+0xb0>)
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	429a      	cmp	r2, r3
 800c468:	d00d      	beq.n	800c486 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	685a      	ldr	r2, [r3, #4]
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	685b      	ldr	r3, [r3, #4]
 800c474:	441a      	add	r2, r3
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	681a      	ldr	r2, [r3, #0]
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	601a      	str	r2, [r3, #0]
 800c484:	e008      	b.n	800c498 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c486:	4b0c      	ldr	r3, [pc, #48]	@ (800c4b8 <prvInsertBlockIntoFreeList+0xb0>)
 800c488:	681a      	ldr	r2, [r3, #0]
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	601a      	str	r2, [r3, #0]
 800c48e:	e003      	b.n	800c498 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	681a      	ldr	r2, [r3, #0]
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c498:	68fa      	ldr	r2, [r7, #12]
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	429a      	cmp	r2, r3
 800c49e:	d002      	beq.n	800c4a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	687a      	ldr	r2, [r7, #4]
 800c4a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c4a6:	bf00      	nop
 800c4a8:	3714      	adds	r7, #20
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b0:	4770      	bx	lr
 800c4b2:	bf00      	nop
 800c4b4:	2000df90 	.word	0x2000df90
 800c4b8:	2000df98 	.word	0x2000df98

0800c4bc <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 800c4bc:	b480      	push	{r7}
 800c4be:	b083      	sub	sp, #12
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	69db      	ldr	r3, [r3, #28]
 800c4c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c4cc:	2b40      	cmp	r3, #64	@ 0x40
 800c4ce:	d101      	bne.n	800c4d4 <LL_USART_IsActiveFlag_TC+0x18>
 800c4d0:	2301      	movs	r3, #1
 800c4d2:	e000      	b.n	800c4d6 <LL_USART_IsActiveFlag_TC+0x1a>
 800c4d4:	2300      	movs	r3, #0
}
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	370c      	adds	r7, #12
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e0:	4770      	bx	lr

0800c4e2 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 800c4e2:	b480      	push	{r7}
 800c4e4:	b083      	sub	sp, #12
 800c4e6:	af00      	add	r7, sp, #0
 800c4e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	69db      	ldr	r3, [r3, #28]
 800c4ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c4f2:	2b80      	cmp	r3, #128	@ 0x80
 800c4f4:	d101      	bne.n	800c4fa <LL_USART_IsActiveFlag_TXE+0x18>
 800c4f6:	2301      	movs	r3, #1
 800c4f8:	e000      	b.n	800c4fc <LL_USART_IsActiveFlag_TXE+0x1a>
 800c4fa:	2300      	movs	r3, #0
}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	370c      	adds	r7, #12
 800c500:	46bd      	mov	sp, r7
 800c502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c506:	4770      	bx	lr

0800c508 <LL_USART_ClearFlag_TC>:
  * @rmtoll ICR          TCCF          LL_USART_ClearFlag_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
 800c508:	b480      	push	{r7}
 800c50a:	b083      	sub	sp, #12
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2240      	movs	r2, #64	@ 0x40
 800c514:	621a      	str	r2, [r3, #32]
}
 800c516:	bf00      	nop
 800c518:	370c      	adds	r7, #12
 800c51a:	46bd      	mov	sp, r7
 800c51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c520:	4770      	bx	lr

0800c522 <LL_USART_EnableIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_EnableIT_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TC(USART_TypeDef *USARTx)
{
 800c522:	b480      	push	{r7}
 800c524:	b089      	sub	sp, #36	@ 0x24
 800c526:	af00      	add	r7, sp, #0
 800c528:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	e853 3f00 	ldrex	r3, [r3]
 800c534:	60bb      	str	r3, [r7, #8]
   return(result);
 800c536:	68bb      	ldr	r3, [r7, #8]
 800c538:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c53c:	61fb      	str	r3, [r7, #28]
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	69fa      	ldr	r2, [r7, #28]
 800c542:	61ba      	str	r2, [r7, #24]
 800c544:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c546:	6979      	ldr	r1, [r7, #20]
 800c548:	69ba      	ldr	r2, [r7, #24]
 800c54a:	e841 2300 	strex	r3, r2, [r1]
 800c54e:	613b      	str	r3, [r7, #16]
   return(result);
 800c550:	693b      	ldr	r3, [r7, #16]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d1e9      	bne.n	800c52a <LL_USART_EnableIT_TC+0x8>
}
 800c556:	bf00      	nop
 800c558:	bf00      	nop
 800c55a:	3724      	adds	r7, #36	@ 0x24
 800c55c:	46bd      	mov	sp, r7
 800c55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c562:	4770      	bx	lr

0800c564 <LL_USART_EnableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
{
 800c564:	b480      	push	{r7}
 800c566:	b089      	sub	sp, #36	@ 0x24
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	e853 3f00 	ldrex	r3, [r3]
 800c576:	60bb      	str	r3, [r7, #8]
   return(result);
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c57e:	61fb      	str	r3, [r7, #28]
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	69fa      	ldr	r2, [r7, #28]
 800c584:	61ba      	str	r2, [r7, #24]
 800c586:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c588:	6979      	ldr	r1, [r7, #20]
 800c58a:	69ba      	ldr	r2, [r7, #24]
 800c58c:	e841 2300 	strex	r3, r2, [r1]
 800c590:	613b      	str	r3, [r7, #16]
   return(result);
 800c592:	693b      	ldr	r3, [r7, #16]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d1e9      	bne.n	800c56c <LL_USART_EnableIT_TXE+0x8>
}
 800c598:	bf00      	nop
 800c59a:	bf00      	nop
 800c59c:	3724      	adds	r7, #36	@ 0x24
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a4:	4770      	bx	lr

0800c5a6 <LL_USART_DisableIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_DisableIT_TC
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TC(USART_TypeDef *USARTx)
{
 800c5a6:	b480      	push	{r7}
 800c5a8:	b089      	sub	sp, #36	@ 0x24
 800c5aa:	af00      	add	r7, sp, #0
 800c5ac:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	e853 3f00 	ldrex	r3, [r3]
 800c5b8:	60bb      	str	r3, [r7, #8]
   return(result);
 800c5ba:	68bb      	ldr	r3, [r7, #8]
 800c5bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c5c0:	61fb      	str	r3, [r7, #28]
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	69fa      	ldr	r2, [r7, #28]
 800c5c6:	61ba      	str	r2, [r7, #24]
 800c5c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5ca:	6979      	ldr	r1, [r7, #20]
 800c5cc:	69ba      	ldr	r2, [r7, #24]
 800c5ce:	e841 2300 	strex	r3, r2, [r1]
 800c5d2:	613b      	str	r3, [r7, #16]
   return(result);
 800c5d4:	693b      	ldr	r3, [r7, #16]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d1e9      	bne.n	800c5ae <LL_USART_DisableIT_TC+0x8>
}
 800c5da:	bf00      	nop
 800c5dc:	bf00      	nop
 800c5de:	3724      	adds	r7, #36	@ 0x24
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e6:	4770      	bx	lr

0800c5e8 <LL_USART_DisableIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
{
 800c5e8:	b480      	push	{r7}
 800c5ea:	b089      	sub	sp, #36	@ 0x24
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	e853 3f00 	ldrex	r3, [r3]
 800c5fa:	60bb      	str	r3, [r7, #8]
   return(result);
 800c5fc:	68bb      	ldr	r3, [r7, #8]
 800c5fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c602:	61fb      	str	r3, [r7, #28]
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	69fa      	ldr	r2, [r7, #28]
 800c608:	61ba      	str	r2, [r7, #24]
 800c60a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c60c:	6979      	ldr	r1, [r7, #20]
 800c60e:	69ba      	ldr	r2, [r7, #24]
 800c610:	e841 2300 	strex	r3, r2, [r1]
 800c614:	613b      	str	r3, [r7, #16]
   return(result);
 800c616:	693b      	ldr	r3, [r7, #16]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d1e9      	bne.n	800c5f0 <LL_USART_DisableIT_TXE+0x8>
}
 800c61c:	bf00      	nop
 800c61e:	bf00      	nop
 800c620:	3724      	adds	r7, #36	@ 0x24
 800c622:	46bd      	mov	sp, r7
 800c624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c628:	4770      	bx	lr

0800c62a <LL_USART_IsEnabledIT_TC>:
  * @rmtoll CR1          TCIE          LL_USART_IsEnabledIT_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TC(const USART_TypeDef *USARTx)
{
 800c62a:	b480      	push	{r7}
 800c62c:	b083      	sub	sp, #12
 800c62e:	af00      	add	r7, sp, #0
 800c630:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE)) ? 1UL : 0UL);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c63a:	2b40      	cmp	r3, #64	@ 0x40
 800c63c:	d101      	bne.n	800c642 <LL_USART_IsEnabledIT_TC+0x18>
 800c63e:	2301      	movs	r3, #1
 800c640:	e000      	b.n	800c644 <LL_USART_IsEnabledIT_TC+0x1a>
 800c642:	2300      	movs	r3, #0
}
 800c644:	4618      	mov	r0, r3
 800c646:	370c      	adds	r7, #12
 800c648:	46bd      	mov	sp, r7
 800c64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64e:	4770      	bx	lr

0800c650 <LL_USART_IsEnabledIT_TXE>:
  * @rmtoll CR1          TXEIE         LL_USART_IsEnabledIT_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE(const USART_TypeDef *USARTx)
{
 800c650:	b480      	push	{r7}
 800c652:	b083      	sub	sp, #12
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE)) ? 1U : 0U);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c660:	2b80      	cmp	r3, #128	@ 0x80
 800c662:	d101      	bne.n	800c668 <LL_USART_IsEnabledIT_TXE+0x18>
 800c664:	2301      	movs	r3, #1
 800c666:	e000      	b.n	800c66a <LL_USART_IsEnabledIT_TXE+0x1a>
 800c668:	2300      	movs	r3, #0
}
 800c66a:	4618      	mov	r0, r3
 800c66c:	370c      	adds	r7, #12
 800c66e:	46bd      	mov	sp, r7
 800c670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c674:	4770      	bx	lr

0800c676 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800c676:	b480      	push	{r7}
 800c678:	b083      	sub	sp, #12
 800c67a:	af00      	add	r7, sp, #0
 800c67c:	6078      	str	r0, [r7, #4]
 800c67e:	460b      	mov	r3, r1
 800c680:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 800c682:	78fa      	ldrb	r2, [r7, #3]
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800c688:	bf00      	nop
 800c68a:	370c      	adds	r7, #12
 800c68c:	46bd      	mov	sp, r7
 800c68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c692:	4770      	bx	lr

0800c694 <uart_ring_buffer_init>:

/**
 * @brief Initialize ring buffer
 */
void uart_ring_buffer_init(void)
{
 800c694:	b480      	push	{r7}
 800c696:	af00      	add	r7, sp, #0
    uart_ring_buffer.head = 0;
 800c698:	4b09      	ldr	r3, [pc, #36]	@ (800c6c0 <uart_ring_buffer_init+0x2c>)
 800c69a:	2200      	movs	r2, #0
 800c69c:	f8a3 2200 	strh.w	r2, [r3, #512]	@ 0x200
    uart_ring_buffer.tail = 0;
 800c6a0:	4b07      	ldr	r3, [pc, #28]	@ (800c6c0 <uart_ring_buffer_init+0x2c>)
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	f8a3 2202 	strh.w	r2, [r3, #514]	@ 0x202
    uart_ring_buffer.count = 0;
 800c6a8:	4b05      	ldr	r3, [pc, #20]	@ (800c6c0 <uart_ring_buffer_init+0x2c>)
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204
    uart_tx_busy = 0;
 800c6b0:	4b04      	ldr	r3, [pc, #16]	@ (800c6c4 <uart_ring_buffer_init+0x30>)
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	701a      	strb	r2, [r3, #0]
}
 800c6b6:	bf00      	nop
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6be:	4770      	bx	lr
 800c6c0:	2000dfa8 	.word	0x2000dfa8
 800c6c4:	2000e1ae 	.word	0x2000e1ae

0800c6c8 <uart_ring_buffer_get>:
 * @brief Get one byte from ring buffer
 * @param byte: Pointer to store the byte
 * @return 1 if success, 0 if buffer empty
 */
uint8_t uart_ring_buffer_get(uint8_t* byte)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b082      	sub	sp, #8
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
    if (uart_ring_buffer_is_empty())
 800c6d0:	f000 f82e 	bl	800c730 <uart_ring_buffer_is_empty>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d001      	beq.n	800c6de <uart_ring_buffer_get+0x16>
    {
        return 0;
 800c6da:	2300      	movs	r3, #0
 800c6dc:	e022      	b.n	800c724 <uart_ring_buffer_get+0x5c>
    }

    *byte = uart_ring_buffer.data[uart_ring_buffer.tail];
 800c6de:	4b13      	ldr	r3, [pc, #76]	@ (800c72c <uart_ring_buffer_get+0x64>)
 800c6e0:	f8b3 3202 	ldrh.w	r3, [r3, #514]	@ 0x202
 800c6e4:	b29b      	uxth	r3, r3
 800c6e6:	461a      	mov	r2, r3
 800c6e8:	4b10      	ldr	r3, [pc, #64]	@ (800c72c <uart_ring_buffer_get+0x64>)
 800c6ea:	5c9a      	ldrb	r2, [r3, r2]
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	701a      	strb	r2, [r3, #0]
    uart_ring_buffer.tail = (uart_ring_buffer.tail + 1) % RING_BUFFER_SIZE;
 800c6f0:	4b0e      	ldr	r3, [pc, #56]	@ (800c72c <uart_ring_buffer_get+0x64>)
 800c6f2:	f8b3 3202 	ldrh.w	r3, [r3, #514]	@ 0x202
 800c6f6:	b29b      	uxth	r3, r3
 800c6f8:	3301      	adds	r3, #1
 800c6fa:	425a      	negs	r2, r3
 800c6fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c700:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c704:	bf58      	it	pl
 800c706:	4253      	negpl	r3, r2
 800c708:	b29a      	uxth	r2, r3
 800c70a:	4b08      	ldr	r3, [pc, #32]	@ (800c72c <uart_ring_buffer_get+0x64>)
 800c70c:	f8a3 2202 	strh.w	r2, [r3, #514]	@ 0x202
    uart_ring_buffer.count--;
 800c710:	4b06      	ldr	r3, [pc, #24]	@ (800c72c <uart_ring_buffer_get+0x64>)
 800c712:	f8b3 3204 	ldrh.w	r3, [r3, #516]	@ 0x204
 800c716:	b29b      	uxth	r3, r3
 800c718:	3b01      	subs	r3, #1
 800c71a:	b29a      	uxth	r2, r3
 800c71c:	4b03      	ldr	r3, [pc, #12]	@ (800c72c <uart_ring_buffer_get+0x64>)
 800c71e:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204

    return 1;
 800c722:	2301      	movs	r3, #1
}
 800c724:	4618      	mov	r0, r3
 800c726:	3708      	adds	r7, #8
 800c728:	46bd      	mov	sp, r7
 800c72a:	bd80      	pop	{r7, pc}
 800c72c:	2000dfa8 	.word	0x2000dfa8

0800c730 <uart_ring_buffer_is_empty>:

/**
 * @brief Check if ring buffer is empty
 */
uint8_t uart_ring_buffer_is_empty(void)
{
 800c730:	b480      	push	{r7}
 800c732:	af00      	add	r7, sp, #0
    return (uart_ring_buffer.count == 0);
 800c734:	4b06      	ldr	r3, [pc, #24]	@ (800c750 <uart_ring_buffer_is_empty+0x20>)
 800c736:	f8b3 3204 	ldrh.w	r3, [r3, #516]	@ 0x204
 800c73a:	b29b      	uxth	r3, r3
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	bf0c      	ite	eq
 800c740:	2301      	moveq	r3, #1
 800c742:	2300      	movne	r3, #0
 800c744:	b2db      	uxtb	r3, r3
}
 800c746:	4618      	mov	r0, r3
 800c748:	46bd      	mov	sp, r7
 800c74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74e:	4770      	bx	lr
 800c750:	2000dfa8 	.word	0x2000dfa8

0800c754 <task_debug_logging>:
/**
 * @brief Task for processing debug logging
 * Call this in main loop
 */
void task_debug_logging(void)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	af00      	add	r7, sp, #0
    // If UART not busy and buffer has data, start transmission
    if (!uart_tx_busy && !uart_ring_buffer_is_empty())
 800c758:	4b06      	ldr	r3, [pc, #24]	@ (800c774 <task_debug_logging+0x20>)
 800c75a:	781b      	ldrb	r3, [r3, #0]
 800c75c:	b2db      	uxtb	r3, r3
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d106      	bne.n	800c770 <task_debug_logging+0x1c>
 800c762:	f7ff ffe5 	bl	800c730 <uart_ring_buffer_is_empty>
 800c766:	4603      	mov	r3, r0
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d101      	bne.n	800c770 <task_debug_logging+0x1c>
    {
        uart_transmit_IT_start();
 800c76c:	f000 f804 	bl	800c778 <uart_transmit_IT_start>
    }
}
 800c770:	bf00      	nop
 800c772:	bd80      	pop	{r7, pc}
 800c774:	2000e1ae 	.word	0x2000e1ae

0800c778 <uart_transmit_IT_start>:

/**
 * @brief Start UART transmission
 */
void uart_transmit_IT_start(void)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b082      	sub	sp, #8
 800c77c:	af00      	add	r7, sp, #0
    uint8_t first_byte;

    if (uart_ring_buffer_get(&first_byte))
 800c77e:	1dfb      	adds	r3, r7, #7
 800c780:	4618      	mov	r0, r3
 800c782:	f7ff ffa1 	bl	800c6c8 <uart_ring_buffer_get>
 800c786:	4603      	mov	r3, r0
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d00d      	beq.n	800c7a8 <uart_transmit_IT_start+0x30>
    {
        uart_tx_busy = 1;
 800c78c:	4b08      	ldr	r3, [pc, #32]	@ (800c7b0 <uart_transmit_IT_start+0x38>)
 800c78e:	2201      	movs	r2, #1
 800c790:	701a      	strb	r2, [r3, #0]
        current_tx_count = 1;
 800c792:	4b08      	ldr	r3, [pc, #32]	@ (800c7b4 <uart_transmit_IT_start+0x3c>)
 800c794:	2201      	movs	r2, #1
 800c796:	801a      	strh	r2, [r3, #0]

        // Enable TXE interrupt and send first byte
        LL_USART_TransmitData8(USART6, first_byte);
 800c798:	79fb      	ldrb	r3, [r7, #7]
 800c79a:	4619      	mov	r1, r3
 800c79c:	4806      	ldr	r0, [pc, #24]	@ (800c7b8 <uart_transmit_IT_start+0x40>)
 800c79e:	f7ff ff6a 	bl	800c676 <LL_USART_TransmitData8>
        LL_USART_EnableIT_TXE(USART6);
 800c7a2:	4805      	ldr	r0, [pc, #20]	@ (800c7b8 <uart_transmit_IT_start+0x40>)
 800c7a4:	f7ff fede 	bl	800c564 <LL_USART_EnableIT_TXE>

    }
}
 800c7a8:	bf00      	nop
 800c7aa:	3708      	adds	r7, #8
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}
 800c7b0:	2000e1ae 	.word	0x2000e1ae
 800c7b4:	2000e1b0 	.word	0x2000e1b0
 800c7b8:	40011400 	.word	0x40011400

0800c7bc <uart_IRQ_handler>:
/**
 * @brief UART interrupt handler
 * Call this in UART IRQ handler
 */
void uart_IRQ_handler(void)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b082      	sub	sp, #8
 800c7c0:	af00      	add	r7, sp, #0
    // TXE interrupt - ready to send next byte
    if (LL_USART_IsActiveFlag_TXE(USART6) && LL_USART_IsEnabledIT_TXE(USART6))
 800c7c2:	4821      	ldr	r0, [pc, #132]	@ (800c848 <uart_IRQ_handler+0x8c>)
 800c7c4:	f7ff fe8d 	bl	800c4e2 <LL_USART_IsActiveFlag_TXE>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d01f      	beq.n	800c80e <uart_IRQ_handler+0x52>
 800c7ce:	481e      	ldr	r0, [pc, #120]	@ (800c848 <uart_IRQ_handler+0x8c>)
 800c7d0:	f7ff ff3e 	bl	800c650 <LL_USART_IsEnabledIT_TXE>
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d019      	beq.n	800c80e <uart_IRQ_handler+0x52>
    {
        uint8_t next_byte;

        if (uart_ring_buffer_get(&next_byte))
 800c7da:	1dfb      	adds	r3, r7, #7
 800c7dc:	4618      	mov	r0, r3
 800c7de:	f7ff ff73 	bl	800c6c8 <uart_ring_buffer_get>
 800c7e2:	4603      	mov	r3, r0
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d00c      	beq.n	800c802 <uart_IRQ_handler+0x46>
        {
            // Send next byte
            LL_USART_TransmitData8(USART6, next_byte);
 800c7e8:	79fb      	ldrb	r3, [r7, #7]
 800c7ea:	4619      	mov	r1, r3
 800c7ec:	4816      	ldr	r0, [pc, #88]	@ (800c848 <uart_IRQ_handler+0x8c>)
 800c7ee:	f7ff ff42 	bl	800c676 <LL_USART_TransmitData8>
            current_tx_count++;
 800c7f2:	4b16      	ldr	r3, [pc, #88]	@ (800c84c <uart_IRQ_handler+0x90>)
 800c7f4:	881b      	ldrh	r3, [r3, #0]
 800c7f6:	b29b      	uxth	r3, r3
 800c7f8:	3301      	adds	r3, #1
 800c7fa:	b29a      	uxth	r2, r3
 800c7fc:	4b13      	ldr	r3, [pc, #76]	@ (800c84c <uart_IRQ_handler+0x90>)
 800c7fe:	801a      	strh	r2, [r3, #0]
 800c800:	e005      	b.n	800c80e <uart_IRQ_handler+0x52>
        }
        else
        {
            // No more data, wait for transmission complete
            LL_USART_DisableIT_TXE(USART6);
 800c802:	4811      	ldr	r0, [pc, #68]	@ (800c848 <uart_IRQ_handler+0x8c>)
 800c804:	f7ff fef0 	bl	800c5e8 <LL_USART_DisableIT_TXE>
            LL_USART_EnableIT_TC(USART6);
 800c808:	480f      	ldr	r0, [pc, #60]	@ (800c848 <uart_IRQ_handler+0x8c>)
 800c80a:	f7ff fe8a 	bl	800c522 <LL_USART_EnableIT_TC>
        }
    }

    // TC interrupt - transmission complete
    if (LL_USART_IsActiveFlag_TC(USART6) && LL_USART_IsEnabledIT_TC(USART6))
 800c80e:	480e      	ldr	r0, [pc, #56]	@ (800c848 <uart_IRQ_handler+0x8c>)
 800c810:	f7ff fe54 	bl	800c4bc <LL_USART_IsActiveFlag_TC>
 800c814:	4603      	mov	r3, r0
 800c816:	2b00      	cmp	r3, #0
 800c818:	d011      	beq.n	800c83e <uart_IRQ_handler+0x82>
 800c81a:	480b      	ldr	r0, [pc, #44]	@ (800c848 <uart_IRQ_handler+0x8c>)
 800c81c:	f7ff ff05 	bl	800c62a <LL_USART_IsEnabledIT_TC>
 800c820:	4603      	mov	r3, r0
 800c822:	2b00      	cmp	r3, #0
 800c824:	d00b      	beq.n	800c83e <uart_IRQ_handler+0x82>
    {
        LL_USART_ClearFlag_TC(USART6);
 800c826:	4808      	ldr	r0, [pc, #32]	@ (800c848 <uart_IRQ_handler+0x8c>)
 800c828:	f7ff fe6e 	bl	800c508 <LL_USART_ClearFlag_TC>
        LL_USART_DisableIT_TC(USART6);
 800c82c:	4806      	ldr	r0, [pc, #24]	@ (800c848 <uart_IRQ_handler+0x8c>)
 800c82e:	f7ff feba 	bl	800c5a6 <LL_USART_DisableIT_TC>

        // Mark as not busy
        uart_tx_busy = 0;
 800c832:	4b07      	ldr	r3, [pc, #28]	@ (800c850 <uart_IRQ_handler+0x94>)
 800c834:	2200      	movs	r2, #0
 800c836:	701a      	strb	r2, [r3, #0]
        current_tx_count = 0;
 800c838:	4b04      	ldr	r3, [pc, #16]	@ (800c84c <uart_IRQ_handler+0x90>)
 800c83a:	2200      	movs	r2, #0
 800c83c:	801a      	strh	r2, [r3, #0]
    }
}
 800c83e:	bf00      	nop
 800c840:	3708      	adds	r7, #8
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}
 800c846:	bf00      	nop
 800c848:	40011400 	.word	0x40011400
 800c84c:	2000e1b0 	.word	0x2000e1b0
 800c850:	2000e1ae 	.word	0x2000e1ae

0800c854 <uart_debug_init>:

/**
 * @brief Initialize debug system
 */
void uart_debug_init(void)
{
 800c854:	b580      	push	{r7, lr}
 800c856:	af00      	add	r7, sp, #0
    uart_ring_buffer_init();
 800c858:	f7ff ff1c 	bl	800c694 <uart_ring_buffer_init>

    // Enable UART interrupt
//    NVIC_SetPriority(USART6_IRQn, 0);
//    NVIC_EnableIRQ(USART6_IRQn);
}
 800c85c:	bf00      	nop
 800c85e:	bd80      	pop	{r7, pc}

0800c860 <Queue_Init>:
 * @param queue: Con trỏ tới cấu trúc hàng đợi
 * @param buffer: Buffer để lưu dữ liệu
 * @param size: Kích thước buffer
 * @return true nếu thành công
 */
bool Queue_Init(Queuex_t* queue, uint8_t* buffer, uint32_t size) {
 800c860:	b580      	push	{r7, lr}
 800c862:	b084      	sub	sp, #16
 800c864:	af00      	add	r7, sp, #0
 800c866:	60f8      	str	r0, [r7, #12]
 800c868:	60b9      	str	r1, [r7, #8]
 800c86a:	607a      	str	r2, [r7, #4]
    if (queue == NULL || buffer == NULL || size == 0) {
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d005      	beq.n	800c87e <Queue_Init+0x1e>
 800c872:	68bb      	ldr	r3, [r7, #8]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d002      	beq.n	800c87e <Queue_Init+0x1e>
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d101      	bne.n	800c882 <Queue_Init+0x22>
        return false;
 800c87e:	2300      	movs	r3, #0
 800c880:	e011      	b.n	800c8a6 <Queue_Init+0x46>
    }

    queue->buffer = buffer;
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	68ba      	ldr	r2, [r7, #8]
 800c886:	601a      	str	r2, [r3, #0]
    queue->size = size;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	687a      	ldr	r2, [r7, #4]
 800c88c:	605a      	str	r2, [r3, #4]
    queue->head = 0;
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	2200      	movs	r2, #0
 800c892:	609a      	str	r2, [r3, #8]
    queue->tail = 0;
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	2200      	movs	r2, #0
 800c898:	60da      	str	r2, [r3, #12]

    // Xóa buffer
    memset(buffer, 0, size);
 800c89a:	687a      	ldr	r2, [r7, #4]
 800c89c:	2100      	movs	r1, #0
 800c89e:	68b8      	ldr	r0, [r7, #8]
 800c8a0:	f001 ffa7 	bl	800e7f2 <memset>

    return true;
 800c8a4:	2301      	movs	r3, #1
}
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	3710      	adds	r7, #16
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	bd80      	pop	{r7, pc}

0800c8ae <Queue_Push_Buffer>:
 * @param data: Con trỏ tới dữ liệu
 * @param len: Số byte cần đẩy
 * @return Số byte thực tế đã đẩy vào
 */
uint32_t Queue_Push_Buffer(Queuex_t* queue, const uint8_t* data, uint32_t len)
{
 800c8ae:	b580      	push	{r7, lr}
 800c8b0:	b088      	sub	sp, #32
 800c8b2:	af00      	add	r7, sp, #0
 800c8b4:	60f8      	str	r0, [r7, #12]
 800c8b6:	60b9      	str	r1, [r7, #8]
 800c8b8:	607a      	str	r2, [r7, #4]
    if (queue == NULL || data == NULL || len == 0)
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d005      	beq.n	800c8cc <Queue_Push_Buffer+0x1e>
 800c8c0:	68bb      	ldr	r3, [r7, #8]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d002      	beq.n	800c8cc <Queue_Push_Buffer+0x1e>
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d101      	bne.n	800c8d0 <Queue_Push_Buffer+0x22>
    {
        return 0;
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	e045      	b.n	800c95c <Queue_Push_Buffer+0xae>
    }

    uint32_t free_space = Queue_Free_Space(queue);
 800c8d0:	68f8      	ldr	r0, [r7, #12]
 800c8d2:	f000 f896 	bl	800ca02 <Queue_Free_Space>
 800c8d6:	61f8      	str	r0, [r7, #28]
    uint32_t to_push = (len > free_space) ? free_space : len;
 800c8d8:	687a      	ldr	r2, [r7, #4]
 800c8da:	69fb      	ldr	r3, [r7, #28]
 800c8dc:	4293      	cmp	r3, r2
 800c8de:	bf28      	it	cs
 800c8e0:	4613      	movcs	r3, r2
 800c8e2:	61bb      	str	r3, [r7, #24]
//    for (uint32_t i = 0; i < to_push; i++) {
//        queue->buffer[queue->head] = data[i];
//        queue->head = (queue->head + 1) % queue->size;

    // Vị trí bắt đầu
    uint32_t first_chunk = queue->size - queue->head;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	685a      	ldr	r2, [r3, #4]
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	689b      	ldr	r3, [r3, #8]
 800c8ec:	1ad3      	subs	r3, r2, r3
 800c8ee:	617b      	str	r3, [r7, #20]
    if (first_chunk > to_push)
 800c8f0:	697a      	ldr	r2, [r7, #20]
 800c8f2:	69bb      	ldr	r3, [r7, #24]
 800c8f4:	429a      	cmp	r2, r3
 800c8f6:	d90c      	bls.n	800c912 <Queue_Push_Buffer+0x64>
    {
        first_chunk = to_push;
 800c8f8:	69bb      	ldr	r3, [r7, #24]
 800c8fa:	617b      	str	r3, [r7, #20]
        memcpy(&queue->buffer[queue->head], data, first_chunk);
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	681a      	ldr	r2, [r3, #0]
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	689b      	ldr	r3, [r3, #8]
 800c904:	4413      	add	r3, r2
 800c906:	697a      	ldr	r2, [r7, #20]
 800c908:	68b9      	ldr	r1, [r7, #8]
 800c90a:	4618      	mov	r0, r3
 800c90c:	f002 f85f 	bl	800e9ce <memcpy>
 800c910:	e016      	b.n	800c940 <Queue_Push_Buffer+0x92>
    }
    else
    {
		memcpy(&queue->buffer[queue->head], data, first_chunk); // Copy phần đầu
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	681a      	ldr	r2, [r3, #0]
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	689b      	ldr	r3, [r3, #8]
 800c91a:	4413      	add	r3, r2
 800c91c:	697a      	ldr	r2, [r7, #20]
 800c91e:	68b9      	ldr	r1, [r7, #8]
 800c920:	4618      	mov	r0, r3
 800c922:	f002 f854 	bl	800e9ce <memcpy>
	    uint32_t second_chunk = to_push - first_chunk;
 800c926:	69ba      	ldr	r2, [r7, #24]
 800c928:	697b      	ldr	r3, [r7, #20]
 800c92a:	1ad3      	subs	r3, r2, r3
 800c92c:	613b      	str	r3, [r7, #16]
	    memcpy(queue->buffer, data + first_chunk, second_chunk); // Copy phần còn lại
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	6818      	ldr	r0, [r3, #0]
 800c932:	68ba      	ldr	r2, [r7, #8]
 800c934:	697b      	ldr	r3, [r7, #20]
 800c936:	4413      	add	r3, r2
 800c938:	693a      	ldr	r2, [r7, #16]
 800c93a:	4619      	mov	r1, r3
 800c93c:	f002 f847 	bl	800e9ce <memcpy>
    }

    // Cập nhật head
    queue->head = (queue->head + to_push) % queue->size;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	689a      	ldr	r2, [r3, #8]
 800c944:	69bb      	ldr	r3, [r7, #24]
 800c946:	4413      	add	r3, r2
 800c948:	68fa      	ldr	r2, [r7, #12]
 800c94a:	6852      	ldr	r2, [r2, #4]
 800c94c:	fbb3 f1f2 	udiv	r1, r3, r2
 800c950:	fb01 f202 	mul.w	r2, r1, r2
 800c954:	1a9a      	subs	r2, r3, r2
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	609a      	str	r2, [r3, #8]

    return to_push;
 800c95a:	69bb      	ldr	r3, [r7, #24]
}
 800c95c:	4618      	mov	r0, r3
 800c95e:	3720      	adds	r7, #32
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}

0800c964 <Queue_Pop>:
 * @brief Lấy một byte từ hàng đợi
 * @param queue: Con trỏ tới hàng đợi
 * @param data: Con trỏ để lưu byte lấy ra
 * @return true nếu thành công
 */
bool Queue_Pop(Queuex_t* queue, uint8_t* data) {
 800c964:	b580      	push	{r7, lr}
 800c966:	b082      	sub	sp, #8
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
 800c96c:	6039      	str	r1, [r7, #0]
    if (queue == NULL || data == NULL || Queue_Is_Empty(queue)) {
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d008      	beq.n	800c986 <Queue_Pop+0x22>
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d005      	beq.n	800c986 <Queue_Pop+0x22>
 800c97a:	6878      	ldr	r0, [r7, #4]
 800c97c:	f000 f856 	bl	800ca2c <Queue_Is_Empty>
 800c980:	4603      	mov	r3, r0
 800c982:	2b00      	cmp	r3, #0
 800c984:	d001      	beq.n	800c98a <Queue_Pop+0x26>
        return false;
 800c986:	2300      	movs	r3, #0
 800c988:	e014      	b.n	800c9b4 <Queue_Pop+0x50>
    }

    *data = queue->buffer[queue->tail];
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681a      	ldr	r2, [r3, #0]
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	68db      	ldr	r3, [r3, #12]
 800c992:	4413      	add	r3, r2
 800c994:	781a      	ldrb	r2, [r3, #0]
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	701a      	strb	r2, [r3, #0]
    queue->tail = (queue->tail + 1) % queue->size;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	68db      	ldr	r3, [r3, #12]
 800c99e:	3301      	adds	r3, #1
 800c9a0:	687a      	ldr	r2, [r7, #4]
 800c9a2:	6852      	ldr	r2, [r2, #4]
 800c9a4:	fbb3 f1f2 	udiv	r1, r3, r2
 800c9a8:	fb01 f202 	mul.w	r2, r1, r2
 800c9ac:	1a9a      	subs	r2, r3, r2
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	60da      	str	r2, [r3, #12]

    return true;
 800c9b2:	2301      	movs	r3, #1
}
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	3708      	adds	r7, #8
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bd80      	pop	{r7, pc}

0800c9bc <Queue_Available>:
/**
 * @brief Lấy số byte có sẵn trong hàng đợi
 * @param queue: Con trỏ tới hàng đợi
 * @return Số byte có sẵn
 */
uint32_t Queue_Available(Queuex_t* queue) {
 800c9bc:	b480      	push	{r7}
 800c9be:	b083      	sub	sp, #12
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
    if (queue == NULL) {
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d101      	bne.n	800c9ce <Queue_Available+0x12>
        return 0;
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	e013      	b.n	800c9f6 <Queue_Available+0x3a>
    }

    if (queue->head >= queue->tail) {
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	689a      	ldr	r2, [r3, #8]
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	68db      	ldr	r3, [r3, #12]
 800c9d6:	429a      	cmp	r2, r3
 800c9d8:	d305      	bcc.n	800c9e6 <Queue_Available+0x2a>
        return queue->head - queue->tail;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	689a      	ldr	r2, [r3, #8]
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	68db      	ldr	r3, [r3, #12]
 800c9e2:	1ad3      	subs	r3, r2, r3
 800c9e4:	e007      	b.n	800c9f6 <Queue_Available+0x3a>
    } else {
        return queue->size - queue->tail + queue->head;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	685a      	ldr	r2, [r3, #4]
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	68db      	ldr	r3, [r3, #12]
 800c9ee:	1ad2      	subs	r2, r2, r3
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	689b      	ldr	r3, [r3, #8]
 800c9f4:	4413      	add	r3, r2
    }
}
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	370c      	adds	r7, #12
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca00:	4770      	bx	lr

0800ca02 <Queue_Free_Space>:
/**
 * @brief Lấy số byte trống trong hàng đợi
 * @param queue: Con trỏ tới hàng đợi
 * @return Số byte trống
 */
uint32_t Queue_Free_Space(Queuex_t* queue) {
 800ca02:	b590      	push	{r4, r7, lr}
 800ca04:	b083      	sub	sp, #12
 800ca06:	af00      	add	r7, sp, #0
 800ca08:	6078      	str	r0, [r7, #4]
    if (queue == NULL) {
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d101      	bne.n	800ca14 <Queue_Free_Space+0x12>
        return 0;
 800ca10:	2300      	movs	r3, #0
 800ca12:	e007      	b.n	800ca24 <Queue_Free_Space+0x22>
    }

    return queue->size - 1 - Queue_Available(queue);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	685c      	ldr	r4, [r3, #4]
 800ca18:	6878      	ldr	r0, [r7, #4]
 800ca1a:	f7ff ffcf 	bl	800c9bc <Queue_Available>
 800ca1e:	4603      	mov	r3, r0
 800ca20:	1ae3      	subs	r3, r4, r3
 800ca22:	3b01      	subs	r3, #1
}
 800ca24:	4618      	mov	r0, r3
 800ca26:	370c      	adds	r7, #12
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	bd90      	pop	{r4, r7, pc}

0800ca2c <Queue_Is_Empty>:
/**
 * @brief Kiểm tra hàng đợi có rỗng không
 * @param queue: Con trỏ tới hàng đợi
 * @return true nếu rỗng
 */
bool Queue_Is_Empty(Queuex_t* queue) {
 800ca2c:	b480      	push	{r7}
 800ca2e:	b083      	sub	sp, #12
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
    if (queue == NULL) {
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d101      	bne.n	800ca3e <Queue_Is_Empty+0x12>
        return true;
 800ca3a:	2301      	movs	r3, #1
 800ca3c:	e008      	b.n	800ca50 <Queue_Is_Empty+0x24>
    }

    return queue->head == queue->tail;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	689a      	ldr	r2, [r3, #8]
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	68db      	ldr	r3, [r3, #12]
 800ca46:	429a      	cmp	r2, r3
 800ca48:	bf0c      	ite	eq
 800ca4a:	2301      	moveq	r3, #1
 800ca4c:	2300      	movne	r3, #0
 800ca4e:	b2db      	uxtb	r3, r3
}
 800ca50:	4618      	mov	r0, r3
 800ca52:	370c      	adds	r7, #12
 800ca54:	46bd      	mov	sp, r7
 800ca56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5a:	4770      	bx	lr

0800ca5c <Queue_Set_Header_Position>:
    }
    return queue->head;
}

uint32_t Queue_Set_Header_Position(Queuex_t* queue, uint32_t index)
{
 800ca5c:	b480      	push	{r7}
 800ca5e:	b083      	sub	sp, #12
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
 800ca64:	6039      	str	r1, [r7, #0]
    if (queue == NULL || index >= queue->size)
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d004      	beq.n	800ca76 <Queue_Set_Header_Position+0x1a>
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	685b      	ldr	r3, [r3, #4]
 800ca70:	683a      	ldr	r2, [r7, #0]
 800ca72:	429a      	cmp	r2, r3
 800ca74:	d301      	bcc.n	800ca7a <Queue_Set_Header_Position+0x1e>
    {
        return 0;
 800ca76:	2300      	movs	r3, #0
 800ca78:	e004      	b.n	800ca84 <Queue_Set_Header_Position+0x28>
    }
    queue->head = index;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	683a      	ldr	r2, [r7, #0]
 800ca7e:	609a      	str	r2, [r3, #8]
    return queue->head;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	689b      	ldr	r3, [r3, #8]
}
 800ca84:	4618      	mov	r0, r3
 800ca86:	370c      	adds	r7, #12
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8e:	4770      	bx	lr

0800ca90 <Queue_Get_Tail_Address>:

uint8_t* Queue_Get_Tail_Address(Queuex_t* queue)
{
 800ca90:	b480      	push	{r7}
 800ca92:	b083      	sub	sp, #12
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
    if (queue == NULL)
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d101      	bne.n	800caa2 <Queue_Get_Tail_Address+0x12>
    {
        return NULL;
 800ca9e:	2300      	movs	r3, #0
 800caa0:	e004      	b.n	800caac <Queue_Get_Tail_Address+0x1c>
    }
    return &queue->buffer[queue->tail];
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681a      	ldr	r2, [r3, #0]
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	68db      	ldr	r3, [r3, #12]
 800caaa:	4413      	add	r3, r2
}
 800caac:	4618      	mov	r0, r3
 800caae:	370c      	adds	r7, #12
 800cab0:	46bd      	mov	sp, r7
 800cab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab6:	4770      	bx	lr

0800cab8 <Queue_Get_Tail_Index>:

uint32_t Queue_Get_Tail_Index(Queuex_t* queue)
{
 800cab8:	b480      	push	{r7}
 800caba:	b083      	sub	sp, #12
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
    if (queue == NULL)
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d101      	bne.n	800caca <Queue_Get_Tail_Index+0x12>
    {
        return 0;
 800cac6:	2300      	movs	r3, #0
 800cac8:	e001      	b.n	800cace <Queue_Get_Tail_Index+0x16>
    }
    return queue->tail;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	68db      	ldr	r3, [r3, #12]
}
 800cace:	4618      	mov	r0, r3
 800cad0:	370c      	adds	r7, #12
 800cad2:	46bd      	mov	sp, r7
 800cad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad8:	4770      	bx	lr

0800cada <Queue_Set_Tail_Position>:

uint32_t Queue_Set_Tail_Position(Queuex_t* queue, uint32_t index)
{
 800cada:	b480      	push	{r7}
 800cadc:	b083      	sub	sp, #12
 800cade:	af00      	add	r7, sp, #0
 800cae0:	6078      	str	r0, [r7, #4]
 800cae2:	6039      	str	r1, [r7, #0]
    if (queue == NULL || index >= queue->size)
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d004      	beq.n	800caf4 <Queue_Set_Tail_Position+0x1a>
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	685b      	ldr	r3, [r3, #4]
 800caee:	683a      	ldr	r2, [r7, #0]
 800caf0:	429a      	cmp	r2, r3
 800caf2:	d301      	bcc.n	800caf8 <Queue_Set_Tail_Position+0x1e>
    {
        return 0;
 800caf4:	2300      	movs	r3, #0
 800caf6:	e004      	b.n	800cb02 <Queue_Set_Tail_Position+0x28>
    }
    queue->tail = index;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	683a      	ldr	r2, [r7, #0]
 800cafc:	60da      	str	r2, [r3, #12]
    return queue->tail;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	68db      	ldr	r3, [r3, #12]
}
 800cb02:	4618      	mov	r0, r3
 800cb04:	370c      	adds	r7, #12
 800cb06:	46bd      	mov	sp, r7
 800cb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0c:	4770      	bx	lr
	...

0800cb10 <File_Init>:
FileState_t current_file_state = FILE_STATE_GET_SIZE;
volatile FileInfoStruct_t current_file;


void File_Init(void)
{
 800cb10:	b480      	push	{r7}
 800cb12:	af00      	add	r7, sp, #0
	current_file.size = 0;
 800cb14:	4b0f      	ldr	r3, [pc, #60]	@ (800cb54 <File_Init+0x44>)
 800cb16:	2200      	movs	r2, #0
 800cb18:	601a      	str	r2, [r3, #0]
	current_file.received_crc = 0;
 800cb1a:	4b0e      	ldr	r3, [pc, #56]	@ (800cb54 <File_Init+0x44>)
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	605a      	str	r2, [r3, #4]
	current_file.calculated_crc = 0;
 800cb20:	4b0c      	ldr	r3, [pc, #48]	@ (800cb54 <File_Init+0x44>)
 800cb22:	2200      	movs	r2, #0
 800cb24:	609a      	str	r2, [r3, #8]
	current_file.size_received = 0;
 800cb26:	4b0b      	ldr	r3, [pc, #44]	@ (800cb54 <File_Init+0x44>)
 800cb28:	2200      	movs	r2, #0
 800cb2a:	60da      	str	r2, [r3, #12]
	current_file.start_file_index = 0;
 800cb2c:	4b09      	ldr	r3, [pc, #36]	@ (800cb54 <File_Init+0x44>)
 800cb2e:	2200      	movs	r2, #0
 800cb30:	611a      	str	r2, [r3, #16]
	current_file.end_file_index = 0;
 800cb32:	4b08      	ldr	r3, [pc, #32]	@ (800cb54 <File_Init+0x44>)
 800cb34:	2200      	movs	r2, #0
 800cb36:	615a      	str	r2, [r3, #20]
	current_file.is_valid = 0;
 800cb38:	4b06      	ldr	r3, [pc, #24]	@ (800cb54 <File_Init+0x44>)
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	761a      	strb	r2, [r3, #24]
	current_file.data = NULL;
 800cb3e:	4b05      	ldr	r3, [pc, #20]	@ (800cb54 <File_Init+0x44>)
 800cb40:	2200      	movs	r2, #0
 800cb42:	61da      	str	r2, [r3, #28]
	current_file_state = FILE_STATE_GET_SIZE;
 800cb44:	4b04      	ldr	r3, [pc, #16]	@ (800cb58 <File_Init+0x48>)
 800cb46:	2200      	movs	r2, #0
 800cb48:	701a      	strb	r2, [r3, #0]
}
 800cb4a:	bf00      	nop
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb52:	4770      	bx	lr
 800cb54:	2000e1c4 	.word	0x2000e1c4
 800cb58:	2000e1c1 	.word	0x2000e1c1

0800cb5c <Send_Response>:




//// Utility function to send response safely
static void Send_Response(const char* response) {
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b082      	sub	sp, #8
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
   CDC_Transmit_HS((uint8_t*)response, strlen(response));
 800cb64:	6878      	ldr	r0, [r7, #4]
 800cb66:	f7f3 fbb3 	bl	80002d0 <strlen>
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	b29b      	uxth	r3, r3
 800cb6e:	4619      	mov	r1, r3
 800cb70:	6878      	ldr	r0, [r7, #4]
 800cb72:	f000 fafd 	bl	800d170 <CDC_Transmit_HS>
}
 800cb76:	bf00      	nop
 800cb78:	3708      	adds	r7, #8
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}
	...

0800cb80 <Task_Command>:
/**
 * @brief Main USB data processing task - ONLY this task processes USB queue
 * This task has exclusive access to USB_Queue_Pop to prevent race conditions
 */
void Task_Command(void *pvParameters)
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b084      	sub	sp, #16
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
    static uint8_t cmd_buf[32];
    static uint8_t cmd_index = 0;

    for (;;)
    {
    	if(uxTaskPriorityGet(hTaskCommand) == 2)
 800cb88:	4b31      	ldr	r3, [pc, #196]	@ (800cc50 <Task_Command+0xd0>)
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f7fd fec9 	bl	800a924 <uxTaskPriorityGet>
 800cb92:	4603      	mov	r3, r0
 800cb94:	2b02      	cmp	r3, #2
 800cb96:	d105      	bne.n	800cba4 <Task_Command+0x24>
    	{
    		vTaskPrioritySet(hTaskCommand, 4);
 800cb98:	4b2d      	ldr	r3, [pc, #180]	@ (800cc50 <Task_Command+0xd0>)
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	2104      	movs	r1, #4
 800cb9e:	4618      	mov	r0, r3
 800cba0:	f7fd feda 	bl	800a958 <vTaskPrioritySet>
    	}

		if (current_device_state == STATE_WAIT_COMMAND)
 800cba4:	4b2b      	ldr	r3, [pc, #172]	@ (800cc54 <Task_Command+0xd4>)
 800cba6:	781b      	ldrb	r3, [r3, #0]
 800cba8:	b2db      	uxtb	r3, r3
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d14b      	bne.n	800cc46 <Task_Command+0xc6>
		{
			if (Queue_Pop(&usb_rx_cmd_queue, &byte))
 800cbae:	f107 030f 	add.w	r3, r7, #15
 800cbb2:	4619      	mov	r1, r3
 800cbb4:	4828      	ldr	r0, [pc, #160]	@ (800cc58 <Task_Command+0xd8>)
 800cbb6:	f7ff fed5 	bl	800c964 <Queue_Pop>
 800cbba:	4603      	mov	r3, r0
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d042      	beq.n	800cc46 <Task_Command+0xc6>
			{
				if (byte == '\n')
 800cbc0:	7bfb      	ldrb	r3, [r7, #15]
 800cbc2:	2b0a      	cmp	r3, #10
 800cbc4:	d131      	bne.n	800cc2a <Task_Command+0xaa>
				{
					cmd_buf[cmd_index] = '\0';
 800cbc6:	4b25      	ldr	r3, [pc, #148]	@ (800cc5c <Task_Command+0xdc>)
 800cbc8:	781b      	ldrb	r3, [r3, #0]
 800cbca:	461a      	mov	r2, r3
 800cbcc:	4b24      	ldr	r3, [pc, #144]	@ (800cc60 <Task_Command+0xe0>)
 800cbce:	2100      	movs	r1, #0
 800cbd0:	5499      	strb	r1, [r3, r2]
					cmd_index = 0;
 800cbd2:	4b22      	ldr	r3, [pc, #136]	@ (800cc5c <Task_Command+0xdc>)
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	701a      	strb	r2, [r3, #0]

					if (strcmp((char*)cmd_buf, "SEND") == 0)
 800cbd8:	4922      	ldr	r1, [pc, #136]	@ (800cc64 <Task_Command+0xe4>)
 800cbda:	4821      	ldr	r0, [pc, #132]	@ (800cc60 <Task_Command+0xe0>)
 800cbdc:	f7f3 fb18 	bl	8000210 <strcmp>
 800cbe0:	4603      	mov	r3, r0
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d10c      	bne.n	800cc00 <Task_Command+0x80>
					{
						current_device_state = STATE_RECEIVE_IMAGE;
 800cbe6:	4b1b      	ldr	r3, [pc, #108]	@ (800cc54 <Task_Command+0xd4>)
 800cbe8:	2201      	movs	r2, #1
 800cbea:	701a      	strb	r2, [r3, #0]
						Send_Response("READY\n");
 800cbec:	481e      	ldr	r0, [pc, #120]	@ (800cc68 <Task_Command+0xe8>)
 800cbee:	f7ff ffb5 	bl	800cb5c <Send_Response>
						vTaskPrioritySet(hTaskReceive, 5);
 800cbf2:	4b1e      	ldr	r3, [pc, #120]	@ (800cc6c <Task_Command+0xec>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	2105      	movs	r1, #5
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	f7fd fead 	bl	800a958 <vTaskPrioritySet>
 800cbfe:	e022      	b.n	800cc46 <Task_Command+0xc6>
					}
					else if (strcmp((char*)cmd_buf, "GET") == 0)   // Xử lý gửi file ở đây
 800cc00:	491b      	ldr	r1, [pc, #108]	@ (800cc70 <Task_Command+0xf0>)
 800cc02:	4817      	ldr	r0, [pc, #92]	@ (800cc60 <Task_Command+0xe0>)
 800cc04:	f7f3 fb04 	bl	8000210 <strcmp>
 800cc08:	4603      	mov	r3, r0
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d109      	bne.n	800cc22 <Task_Command+0xa2>
					{
						current_device_state = STATE_SEND_IMAGE;
 800cc0e:	4b11      	ldr	r3, [pc, #68]	@ (800cc54 <Task_Command+0xd4>)
 800cc10:	2202      	movs	r2, #2
 800cc12:	701a      	strb	r2, [r3, #0]
						vTaskPrioritySet(hTaskSend, 5);
 800cc14:	4b17      	ldr	r3, [pc, #92]	@ (800cc74 <Task_Command+0xf4>)
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	2105      	movs	r1, #5
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	f7fd fe9c 	bl	800a958 <vTaskPrioritySet>
 800cc20:	e011      	b.n	800cc46 <Task_Command+0xc6>
					}
					else
					{
						Send_Response("ERR:UNKNOWN_CMD\n");
 800cc22:	4815      	ldr	r0, [pc, #84]	@ (800cc78 <Task_Command+0xf8>)
 800cc24:	f7ff ff9a 	bl	800cb5c <Send_Response>
 800cc28:	e00d      	b.n	800cc46 <Task_Command+0xc6>
					}
				}
				else
				{
					if (cmd_index < sizeof(cmd_buf) - 1)
 800cc2a:	4b0c      	ldr	r3, [pc, #48]	@ (800cc5c <Task_Command+0xdc>)
 800cc2c:	781b      	ldrb	r3, [r3, #0]
 800cc2e:	2b1e      	cmp	r3, #30
 800cc30:	d809      	bhi.n	800cc46 <Task_Command+0xc6>
					{
						cmd_buf[cmd_index++] = byte;
 800cc32:	4b0a      	ldr	r3, [pc, #40]	@ (800cc5c <Task_Command+0xdc>)
 800cc34:	781b      	ldrb	r3, [r3, #0]
 800cc36:	1c5a      	adds	r2, r3, #1
 800cc38:	b2d1      	uxtb	r1, r2
 800cc3a:	4a08      	ldr	r2, [pc, #32]	@ (800cc5c <Task_Command+0xdc>)
 800cc3c:	7011      	strb	r1, [r2, #0]
 800cc3e:	461a      	mov	r2, r3
 800cc40:	7bf9      	ldrb	r1, [r7, #15]
 800cc42:	4b07      	ldr	r3, [pc, #28]	@ (800cc60 <Task_Command+0xe0>)
 800cc44:	5499      	strb	r1, [r3, r2]
					}
				}
			}
		}

		vTaskDelay(pdMS_TO_TICKS(1));
 800cc46:	2001      	movs	r0, #1
 800cc48:	f7fd fe34 	bl	800a8b4 <vTaskDelay>
    	if(uxTaskPriorityGet(hTaskCommand) == 2)
 800cc4c:	e79c      	b.n	800cb88 <Task_Command+0x8>
 800cc4e:	bf00      	nop
 800cc50:	2000e1b4 	.word	0x2000e1b4
 800cc54:	2000e1c0 	.word	0x2000e1c0
 800cc58:	20000398 	.word	0x20000398
 800cc5c:	2000e1f1 	.word	0x2000e1f1
 800cc60:	2000e1f4 	.word	0x2000e1f4
 800cc64:	08010608 	.word	0x08010608
 800cc68:	08010610 	.word	0x08010610
 800cc6c:	2000e1b8 	.word	0x2000e1b8
 800cc70:	08010618 	.word	0x08010618
 800cc74:	2000e1bc 	.word	0x2000e1bc
 800cc78:	0801061c 	.word	0x0801061c

0800cc7c <Task_Receive>:
uint8_t file_size_index = 0;
uint8_t file_crc_bytes[4] = {0};
uint8_t file_crc_index = 0;

void Task_Receive(void *pvParameters)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b084      	sub	sp, #16
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
    uint8_t byte;
    for (;;)
    {
        if(current_device_state == STATE_RECEIVE_IMAGE)
 800cc84:	4b62      	ldr	r3, [pc, #392]	@ (800ce10 <Task_Receive+0x194>)
 800cc86:	781b      	ldrb	r3, [r3, #0]
 800cc88:	b2db      	uxtb	r3, r3
 800cc8a:	2b01      	cmp	r3, #1
 800cc8c:	d1fa      	bne.n	800cc84 <Task_Receive+0x8>
        {
        	if(Queue_Pop(&usb_rx_file_queue, &byte))
 800cc8e:	f107 030f 	add.w	r3, r7, #15
 800cc92:	4619      	mov	r1, r3
 800cc94:	485f      	ldr	r0, [pc, #380]	@ (800ce14 <Task_Receive+0x198>)
 800cc96:	f7ff fe65 	bl	800c964 <Queue_Pop>
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d0f1      	beq.n	800cc84 <Task_Receive+0x8>
        	{
        		switch(current_file_state)
 800cca0:	4b5d      	ldr	r3, [pc, #372]	@ (800ce18 <Task_Receive+0x19c>)
 800cca2:	781b      	ldrb	r3, [r3, #0]
 800cca4:	2b02      	cmp	r3, #2
 800cca6:	f000 80ac 	beq.w	800ce02 <Task_Receive+0x186>
 800ccaa:	2b02      	cmp	r3, #2
 800ccac:	dcea      	bgt.n	800cc84 <Task_Receive+0x8>
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d002      	beq.n	800ccb8 <Task_Receive+0x3c>
 800ccb2:	2b01      	cmp	r3, #1
 800ccb4:	d05d      	beq.n	800cd72 <Task_Receive+0xf6>
 800ccb6:	e0a9      	b.n	800ce0c <Task_Receive+0x190>
        		{
        			case FILE_STATE_GET_SIZE:
        	            file_size_bytes[file_size_index++] = byte;
 800ccb8:	4b58      	ldr	r3, [pc, #352]	@ (800ce1c <Task_Receive+0x1a0>)
 800ccba:	781b      	ldrb	r3, [r3, #0]
 800ccbc:	1c5a      	adds	r2, r3, #1
 800ccbe:	b2d1      	uxtb	r1, r2
 800ccc0:	4a56      	ldr	r2, [pc, #344]	@ (800ce1c <Task_Receive+0x1a0>)
 800ccc2:	7011      	strb	r1, [r2, #0]
 800ccc4:	461a      	mov	r2, r3
 800ccc6:	7bf9      	ldrb	r1, [r7, #15]
 800ccc8:	4b55      	ldr	r3, [pc, #340]	@ (800ce20 <Task_Receive+0x1a4>)
 800ccca:	5499      	strb	r1, [r3, r2]
        	            if (file_size_index >= 4)
 800cccc:	4b53      	ldr	r3, [pc, #332]	@ (800ce1c <Task_Receive+0x1a0>)
 800ccce:	781b      	ldrb	r3, [r3, #0]
 800ccd0:	2b03      	cmp	r3, #3
 800ccd2:	f240 8098 	bls.w	800ce06 <Task_Receive+0x18a>
        	            {
        	                current_file.size = file_size_bytes[0] |
 800ccd6:	4b52      	ldr	r3, [pc, #328]	@ (800ce20 <Task_Receive+0x1a4>)
 800ccd8:	781b      	ldrb	r3, [r3, #0]
 800ccda:	461a      	mov	r2, r3
        	                                   (file_size_bytes[1] << 8) |
 800ccdc:	4b50      	ldr	r3, [pc, #320]	@ (800ce20 <Task_Receive+0x1a4>)
 800ccde:	785b      	ldrb	r3, [r3, #1]
 800cce0:	021b      	lsls	r3, r3, #8
        	                current_file.size = file_size_bytes[0] |
 800cce2:	431a      	orrs	r2, r3
        	                                   (file_size_bytes[2] << 16) |
 800cce4:	4b4e      	ldr	r3, [pc, #312]	@ (800ce20 <Task_Receive+0x1a4>)
 800cce6:	789b      	ldrb	r3, [r3, #2]
 800cce8:	041b      	lsls	r3, r3, #16
        	                                   (file_size_bytes[1] << 8) |
 800ccea:	431a      	orrs	r2, r3
        	                                   (file_size_bytes[3] << 24);
 800ccec:	4b4c      	ldr	r3, [pc, #304]	@ (800ce20 <Task_Receive+0x1a4>)
 800ccee:	78db      	ldrb	r3, [r3, #3]
 800ccf0:	061b      	lsls	r3, r3, #24
        	                                   (file_size_bytes[2] << 16) |
 800ccf2:	4313      	orrs	r3, r2
 800ccf4:	461a      	mov	r2, r3
        	                current_file.size = file_size_bytes[0] |
 800ccf6:	4b4b      	ldr	r3, [pc, #300]	@ (800ce24 <Task_Receive+0x1a8>)
 800ccf8:	601a      	str	r2, [r3, #0]
        	                if (current_file.size > SIZE_FILE_MAX)
 800ccfa:	4b4a      	ldr	r3, [pc, #296]	@ (800ce24 <Task_Receive+0x1a8>)
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	4a4a      	ldr	r2, [pc, #296]	@ (800ce28 <Task_Receive+0x1ac>)
 800cd00:	4293      	cmp	r3, r2
 800cd02:	d90c      	bls.n	800cd1e <Task_Receive+0xa2>
        	                {
        	                	current_file.size = 0;
 800cd04:	4b47      	ldr	r3, [pc, #284]	@ (800ce24 <Task_Receive+0x1a8>)
 800cd06:	2200      	movs	r2, #0
 800cd08:	601a      	str	r2, [r3, #0]
        	                	current_device_state = STATE_WAIT_COMMAND;
 800cd0a:	4b41      	ldr	r3, [pc, #260]	@ (800ce10 <Task_Receive+0x194>)
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	701a      	strb	r2, [r3, #0]
			                	vTaskPrioritySet(hTaskReceive, 3);
 800cd10:	4b46      	ldr	r3, [pc, #280]	@ (800ce2c <Task_Receive+0x1b0>)
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	2103      	movs	r1, #3
 800cd16:	4618      	mov	r0, r3
 800cd18:	f7fd fe1e 	bl	800a958 <vTaskPrioritySet>
								current_file.end_file_index = current_file.start_file_index + current_file.size;
		        				current_file_state = FILE_STATE_GET_CRC;
							}
        	            }

        				break;
 800cd1c:	e073      	b.n	800ce06 <Task_Receive+0x18a>
								vTaskDelay(100); // đợi nhận đủ file tồi mới tính CRC
 800cd1e:	2064      	movs	r0, #100	@ 0x64
 800cd20:	f7fd fdc8 	bl	800a8b4 <vTaskDelay>
								current_file.start_file_index = Queue_Get_Tail_Index(&usb_rx_file_queue);
 800cd24:	483b      	ldr	r0, [pc, #236]	@ (800ce14 <Task_Receive+0x198>)
 800cd26:	f7ff fec7 	bl	800cab8 <Queue_Get_Tail_Index>
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	4a3d      	ldr	r2, [pc, #244]	@ (800ce24 <Task_Receive+0x1a8>)
 800cd2e:	6113      	str	r3, [r2, #16]
								current_file.calculated_crc = CRC_HW_Calculation(Queue_Get_Tail_Address(&usb_rx_file_queue), current_file.size);
 800cd30:	4838      	ldr	r0, [pc, #224]	@ (800ce14 <Task_Receive+0x198>)
 800cd32:	f7ff fead 	bl	800ca90 <Queue_Get_Tail_Address>
 800cd36:	4602      	mov	r2, r0
 800cd38:	4b3a      	ldr	r3, [pc, #232]	@ (800ce24 <Task_Receive+0x1a8>)
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	4619      	mov	r1, r3
 800cd3e:	4610      	mov	r0, r2
 800cd40:	f7f4 f8f8 	bl	8000f34 <CRC_HW_Calculation>
 800cd44:	4603      	mov	r3, r0
 800cd46:	4a37      	ldr	r2, [pc, #220]	@ (800ce24 <Task_Receive+0x1a8>)
 800cd48:	6093      	str	r3, [r2, #8]
								Queue_Set_Tail_Position(&usb_rx_file_queue, current_file.start_file_index + current_file.size);   // Bỏ qua dữ liệu đã tính CRC
 800cd4a:	4b36      	ldr	r3, [pc, #216]	@ (800ce24 <Task_Receive+0x1a8>)
 800cd4c:	691a      	ldr	r2, [r3, #16]
 800cd4e:	4b35      	ldr	r3, [pc, #212]	@ (800ce24 <Task_Receive+0x1a8>)
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	4413      	add	r3, r2
 800cd54:	4619      	mov	r1, r3
 800cd56:	482f      	ldr	r0, [pc, #188]	@ (800ce14 <Task_Receive+0x198>)
 800cd58:	f7ff febf 	bl	800cada <Queue_Set_Tail_Position>
								current_file.end_file_index = current_file.start_file_index + current_file.size;
 800cd5c:	4b31      	ldr	r3, [pc, #196]	@ (800ce24 <Task_Receive+0x1a8>)
 800cd5e:	691a      	ldr	r2, [r3, #16]
 800cd60:	4b30      	ldr	r3, [pc, #192]	@ (800ce24 <Task_Receive+0x1a8>)
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	4413      	add	r3, r2
 800cd66:	4a2f      	ldr	r2, [pc, #188]	@ (800ce24 <Task_Receive+0x1a8>)
 800cd68:	6153      	str	r3, [r2, #20]
		        				current_file_state = FILE_STATE_GET_CRC;
 800cd6a:	4b2b      	ldr	r3, [pc, #172]	@ (800ce18 <Task_Receive+0x19c>)
 800cd6c:	2201      	movs	r2, #1
 800cd6e:	701a      	strb	r2, [r3, #0]
        				break;
 800cd70:	e049      	b.n	800ce06 <Task_Receive+0x18a>

        			case FILE_STATE_GET_CRC:
			            file_crc_bytes[file_crc_index++] = byte;
 800cd72:	4b2f      	ldr	r3, [pc, #188]	@ (800ce30 <Task_Receive+0x1b4>)
 800cd74:	781b      	ldrb	r3, [r3, #0]
 800cd76:	1c5a      	adds	r2, r3, #1
 800cd78:	b2d1      	uxtb	r1, r2
 800cd7a:	4a2d      	ldr	r2, [pc, #180]	@ (800ce30 <Task_Receive+0x1b4>)
 800cd7c:	7011      	strb	r1, [r2, #0]
 800cd7e:	461a      	mov	r2, r3
 800cd80:	7bf9      	ldrb	r1, [r7, #15]
 800cd82:	4b2c      	ldr	r3, [pc, #176]	@ (800ce34 <Task_Receive+0x1b8>)
 800cd84:	5499      	strb	r1, [r3, r2]
			            if (file_crc_index >= 4)
 800cd86:	4b2a      	ldr	r3, [pc, #168]	@ (800ce30 <Task_Receive+0x1b4>)
 800cd88:	781b      	ldrb	r3, [r3, #0]
 800cd8a:	2b03      	cmp	r3, #3
 800cd8c:	d93d      	bls.n	800ce0a <Task_Receive+0x18e>
			            {
			                current_file.received_crc = file_crc_bytes[0] |
 800cd8e:	4b29      	ldr	r3, [pc, #164]	@ (800ce34 <Task_Receive+0x1b8>)
 800cd90:	781b      	ldrb	r3, [r3, #0]
 800cd92:	461a      	mov	r2, r3
			                                             (file_crc_bytes[1] << 8) |
 800cd94:	4b27      	ldr	r3, [pc, #156]	@ (800ce34 <Task_Receive+0x1b8>)
 800cd96:	785b      	ldrb	r3, [r3, #1]
 800cd98:	021b      	lsls	r3, r3, #8
			                current_file.received_crc = file_crc_bytes[0] |
 800cd9a:	431a      	orrs	r2, r3
			                                             (file_crc_bytes[2] << 16) |
 800cd9c:	4b25      	ldr	r3, [pc, #148]	@ (800ce34 <Task_Receive+0x1b8>)
 800cd9e:	789b      	ldrb	r3, [r3, #2]
 800cda0:	041b      	lsls	r3, r3, #16
			                                             (file_crc_bytes[1] << 8) |
 800cda2:	431a      	orrs	r2, r3
			                                             (file_crc_bytes[3] << 24);
 800cda4:	4b23      	ldr	r3, [pc, #140]	@ (800ce34 <Task_Receive+0x1b8>)
 800cda6:	78db      	ldrb	r3, [r3, #3]
 800cda8:	061b      	lsls	r3, r3, #24
			                                             (file_crc_bytes[2] << 16) |
 800cdaa:	4313      	orrs	r3, r2
 800cdac:	461a      	mov	r2, r3
			                current_file.received_crc = file_crc_bytes[0] |
 800cdae:	4b1d      	ldr	r3, [pc, #116]	@ (800ce24 <Task_Receive+0x1a8>)
 800cdb0:	605a      	str	r2, [r3, #4]
//			                current_file_state = FILE_STATE_CHECK_CRC;
							if(current_file.calculated_crc == current_file.received_crc)
 800cdb2:	4b1c      	ldr	r3, [pc, #112]	@ (800ce24 <Task_Receive+0x1a8>)
 800cdb4:	689a      	ldr	r2, [r3, #8]
 800cdb6:	4b1b      	ldr	r3, [pc, #108]	@ (800ce24 <Task_Receive+0x1a8>)
 800cdb8:	685b      	ldr	r3, [r3, #4]
 800cdba:	429a      	cmp	r2, r3
 800cdbc:	d112      	bne.n	800cde4 <Task_Receive+0x168>
							{
								current_file.is_valid = 1;
 800cdbe:	4b19      	ldr	r3, [pc, #100]	@ (800ce24 <Task_Receive+0x1a8>)
 800cdc0:	2201      	movs	r2, #1
 800cdc2:	761a      	strb	r2, [r3, #24]
								Send_Response("OK\n");
 800cdc4:	481c      	ldr	r0, [pc, #112]	@ (800ce38 <Task_Receive+0x1bc>)
 800cdc6:	f7ff fec9 	bl	800cb5c <Send_Response>
								current_file_state = FILE_STATE_GET_SIZE;
 800cdca:	4b13      	ldr	r3, [pc, #76]	@ (800ce18 <Task_Receive+0x19c>)
 800cdcc:	2200      	movs	r2, #0
 800cdce:	701a      	strb	r2, [r3, #0]
								current_device_state = STATE_WAIT_COMMAND;
 800cdd0:	4b0f      	ldr	r3, [pc, #60]	@ (800ce10 <Task_Receive+0x194>)
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	701a      	strb	r2, [r3, #0]
								vTaskPrioritySet(hTaskReceive, 3);
 800cdd6:	4b15      	ldr	r3, [pc, #84]	@ (800ce2c <Task_Receive+0x1b0>)
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	2103      	movs	r1, #3
 800cddc:	4618      	mov	r0, r3
 800cdde:	f7fd fdbb 	bl	800a958 <vTaskPrioritySet>
								Send_Response("ERR:CRC_MISMATCH\n");
								current_device_state = STATE_WAIT_COMMAND;
								vTaskPrioritySet(hTaskReceive, 3);
							}
						}
			            break;
 800cde2:	e012      	b.n	800ce0a <Task_Receive+0x18e>
								File_Init();
 800cde4:	f7ff fe94 	bl	800cb10 <File_Init>
								Send_Response("ERR:CRC_MISMATCH\n");
 800cde8:	4814      	ldr	r0, [pc, #80]	@ (800ce3c <Task_Receive+0x1c0>)
 800cdea:	f7ff feb7 	bl	800cb5c <Send_Response>
								current_device_state = STATE_WAIT_COMMAND;
 800cdee:	4b08      	ldr	r3, [pc, #32]	@ (800ce10 <Task_Receive+0x194>)
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	701a      	strb	r2, [r3, #0]
								vTaskPrioritySet(hTaskReceive, 3);
 800cdf4:	4b0d      	ldr	r3, [pc, #52]	@ (800ce2c <Task_Receive+0x1b0>)
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	2103      	movs	r1, #3
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	f7fd fdac 	bl	800a958 <vTaskPrioritySet>
			            break;
 800ce00:	e003      	b.n	800ce0a <Task_Receive+0x18e>
//							File_Init();
//							Send_Response("ERR:CRC_MISMATCH\n");
//							current_device_state = STATE_WAIT_COMMAND;
//							vTaskPrioritySet(hTaskReceive, 3);
//						}
        				break;
 800ce02:	bf00      	nop
 800ce04:	e73e      	b.n	800cc84 <Task_Receive+0x8>
        				break;
 800ce06:	bf00      	nop
 800ce08:	e73c      	b.n	800cc84 <Task_Receive+0x8>
			            break;
 800ce0a:	bf00      	nop
        if(current_device_state == STATE_RECEIVE_IMAGE)
 800ce0c:	e73a      	b.n	800cc84 <Task_Receive+0x8>
 800ce0e:	bf00      	nop
 800ce10:	2000e1c0 	.word	0x2000e1c0
 800ce14:	200003a8 	.word	0x200003a8
 800ce18:	2000e1c1 	.word	0x2000e1c1
 800ce1c:	2000e1e8 	.word	0x2000e1e8
 800ce20:	2000e1e4 	.word	0x2000e1e4
 800ce24:	2000e1c4 	.word	0x2000e1c4
 800ce28:	007ffff0 	.word	0x007ffff0
 800ce2c:	2000e1b8 	.word	0x2000e1b8
 800ce30:	2000e1f0 	.word	0x2000e1f0
 800ce34:	2000e1ec 	.word	0x2000e1ec
 800ce38:	08010630 	.word	0x08010630
 800ce3c:	08010634 	.word	0x08010634

0800ce40 <TaskSendImage>:
 * This task monitors transmission state and calls Transmit_Task
 */


void TaskSendImage(void *pvParameters)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b088      	sub	sp, #32
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]

	for (;;)
	{
		if(current_device_state == STATE_SEND_IMAGE)
 800ce48:	4b57      	ldr	r3, [pc, #348]	@ (800cfa8 <TaskSendImage+0x168>)
 800ce4a:	781b      	ldrb	r3, [r3, #0]
 800ce4c:	b2db      	uxtb	r3, r3
 800ce4e:	2b02      	cmp	r3, #2
 800ce50:	d1fa      	bne.n	800ce48 <TaskSendImage+0x8>
		{
			if (current_file.size == 0 && current_file.is_valid == 0)
 800ce52:	4b56      	ldr	r3, [pc, #344]	@ (800cfac <TaskSendImage+0x16c>)
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d111      	bne.n	800ce7e <TaskSendImage+0x3e>
 800ce5a:	4b54      	ldr	r3, [pc, #336]	@ (800cfac <TaskSendImage+0x16c>)
 800ce5c:	7e1b      	ldrb	r3, [r3, #24]
 800ce5e:	b2db      	uxtb	r3, r3
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d10c      	bne.n	800ce7e <TaskSendImage+0x3e>
			{
				Send_Response("ERR:NO_FILE\n");
 800ce64:	4852      	ldr	r0, [pc, #328]	@ (800cfb0 <TaskSendImage+0x170>)
 800ce66:	f7ff fe79 	bl	800cb5c <Send_Response>
				current_device_state = STATE_WAIT_COMMAND;
 800ce6a:	4b4f      	ldr	r3, [pc, #316]	@ (800cfa8 <TaskSendImage+0x168>)
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	701a      	strb	r2, [r3, #0]
				vTaskPrioritySet(hTaskSend, 3);
 800ce70:	4b50      	ldr	r3, [pc, #320]	@ (800cfb4 <TaskSendImage+0x174>)
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	2103      	movs	r1, #3
 800ce76:	4618      	mov	r0, r3
 800ce78:	f7fd fd6e 	bl	800a958 <vTaskPrioritySet>
 800ce7c:	e093      	b.n	800cfa6 <TaskSendImage+0x166>
			}
			else
			{
				// Gửi kích thước file
				uint8_t size_bytes[4];
				size_bytes[0] = (current_file.size >> 0) & 0xFF;
 800ce7e:	4b4b      	ldr	r3, [pc, #300]	@ (800cfac <TaskSendImage+0x16c>)
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	b2db      	uxtb	r3, r3
 800ce84:	743b      	strb	r3, [r7, #16]
				size_bytes[1] = (current_file.size >> 8) & 0xFF;
 800ce86:	4b49      	ldr	r3, [pc, #292]	@ (800cfac <TaskSendImage+0x16c>)
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	0a1b      	lsrs	r3, r3, #8
 800ce8c:	b2db      	uxtb	r3, r3
 800ce8e:	747b      	strb	r3, [r7, #17]
				size_bytes[2] = (current_file.size >> 16) & 0xFF;
 800ce90:	4b46      	ldr	r3, [pc, #280]	@ (800cfac <TaskSendImage+0x16c>)
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	0c1b      	lsrs	r3, r3, #16
 800ce96:	b2db      	uxtb	r3, r3
 800ce98:	74bb      	strb	r3, [r7, #18]
				size_bytes[3] = (current_file.size >> 24) & 0xFF;
 800ce9a:	4b44      	ldr	r3, [pc, #272]	@ (800cfac <TaskSendImage+0x16c>)
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	0e1b      	lsrs	r3, r3, #24
 800cea0:	b2db      	uxtb	r3, r3
 800cea2:	74fb      	strb	r3, [r7, #19]
				CDC_Transmit_HS(size_bytes, 4);
 800cea4:	f107 0310 	add.w	r3, r7, #16
 800cea8:	2104      	movs	r1, #4
 800ceaa:	4618      	mov	r0, r3
 800ceac:	f000 f960 	bl	800d170 <CDC_Transmit_HS>

				// Gửi dữ liệu file
				Queue_Set_Tail_Position(&usb_rx_file_queue, current_file.start_file_index);
 800ceb0:	4b3e      	ldr	r3, [pc, #248]	@ (800cfac <TaskSendImage+0x16c>)
 800ceb2:	691b      	ldr	r3, [r3, #16]
 800ceb4:	4619      	mov	r1, r3
 800ceb6:	4840      	ldr	r0, [pc, #256]	@ (800cfb8 <TaskSendImage+0x178>)
 800ceb8:	f7ff fe0f 	bl	800cada <Queue_Set_Tail_Position>
				Queue_Set_Header_Position(&usb_rx_file_queue, current_file.end_file_index);
 800cebc:	4b3b      	ldr	r3, [pc, #236]	@ (800cfac <TaskSendImage+0x16c>)
 800cebe:	695b      	ldr	r3, [r3, #20]
 800cec0:	4619      	mov	r1, r3
 800cec2:	483d      	ldr	r0, [pc, #244]	@ (800cfb8 <TaskSendImage+0x178>)
 800cec4:	f7ff fdca 	bl	800ca5c <Queue_Set_Header_Position>
//			        }
//					CDC_Transmit_HS(Queue_Get_Tail_Address(&usb_rx_file_queue), send_size);
//					Queue_Set_Tail_Position(&usb_rx_file_queue, Queue_Get_Tail_Index(&usb_rx_file_queue) + send_size);
//				}

				uint32_t offset = 0;
 800cec8:	2300      	movs	r3, #0
 800ceca:	61fb      	str	r3, [r7, #28]

				while (offset < current_file.size)
 800cecc:	e02c      	b.n	800cf28 <TaskSendImage+0xe8>
				{
				    // Tính số byte cần gửi trong lần này
				    uint32_t send_size = (current_file.size - offset > APP_TX_DATA_SIZE) ?
 800cece:	4b37      	ldr	r3, [pc, #220]	@ (800cfac <TaskSendImage+0x16c>)
 800ced0:	681a      	ldr	r2, [r3, #0]
 800ced2:	69fb      	ldr	r3, [r7, #28]
 800ced4:	1ad3      	subs	r3, r2, r3
				                         APP_TX_DATA_SIZE :
 800ced6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ceda:	d804      	bhi.n	800cee6 <TaskSendImage+0xa6>
				                         (current_file.size - offset);
 800cedc:	4b33      	ldr	r3, [pc, #204]	@ (800cfac <TaskSendImage+0x16c>)
 800cede:	681a      	ldr	r2, [r3, #0]
				                         APP_TX_DATA_SIZE :
 800cee0:	69fb      	ldr	r3, [r7, #28]
 800cee2:	1ad3      	subs	r3, r2, r3
 800cee4:	e001      	b.n	800ceea <TaskSendImage+0xaa>
 800cee6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
				    uint32_t send_size = (current_file.size - offset > APP_TX_DATA_SIZE) ?
 800ceea:	61bb      	str	r3, [r7, #24]

				    // Đợi cho tới khi truyền xong lần trước
				    while (Check_Flag_Complete_Transmit() != 0)
 800ceec:	bf00      	nop
 800ceee:	f000 f977 	bl	800d1e0 <Check_Flag_Complete_Transmit>
 800cef2:	4603      	mov	r3, r0
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d1fa      	bne.n	800ceee <TaskSendImage+0xae>
				    {
				        // chờ truyền xong
				    }

				    // Lấy địa chỉ dữ liệu ở tail của queue
				    uint8_t *data_ptr = Queue_Get_Tail_Address(&usb_rx_file_queue);
 800cef8:	482f      	ldr	r0, [pc, #188]	@ (800cfb8 <TaskSendImage+0x178>)
 800cefa:	f7ff fdc9 	bl	800ca90 <Queue_Get_Tail_Address>
 800cefe:	6178      	str	r0, [r7, #20]

				    // Truyền dữ liệu qua USB CDC
				    CDC_Transmit_HS(data_ptr, send_size);
 800cf00:	69bb      	ldr	r3, [r7, #24]
 800cf02:	b29b      	uxth	r3, r3
 800cf04:	4619      	mov	r1, r3
 800cf06:	6978      	ldr	r0, [r7, #20]
 800cf08:	f000 f932 	bl	800d170 <CDC_Transmit_HS>

				    // Cập nhật vị trí tail
				    Queue_Set_Tail_Position(&usb_rx_file_queue, Queue_Get_Tail_Index(&usb_rx_file_queue) + send_size);
 800cf0c:	482a      	ldr	r0, [pc, #168]	@ (800cfb8 <TaskSendImage+0x178>)
 800cf0e:	f7ff fdd3 	bl	800cab8 <Queue_Get_Tail_Index>
 800cf12:	4602      	mov	r2, r0
 800cf14:	69bb      	ldr	r3, [r7, #24]
 800cf16:	4413      	add	r3, r2
 800cf18:	4619      	mov	r1, r3
 800cf1a:	4827      	ldr	r0, [pc, #156]	@ (800cfb8 <TaskSendImage+0x178>)
 800cf1c:	f7ff fddd 	bl	800cada <Queue_Set_Tail_Position>

				    // Tăng offset lên
				    offset += send_size;
 800cf20:	69fa      	ldr	r2, [r7, #28]
 800cf22:	69bb      	ldr	r3, [r7, #24]
 800cf24:	4413      	add	r3, r2
 800cf26:	61fb      	str	r3, [r7, #28]
				while (offset < current_file.size)
 800cf28:	4b20      	ldr	r3, [pc, #128]	@ (800cfac <TaskSendImage+0x16c>)
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	69fa      	ldr	r2, [r7, #28]
 800cf2e:	429a      	cmp	r2, r3
 800cf30:	d3cd      	bcc.n	800cece <TaskSendImage+0x8e>
				}
				Queue_Set_Tail_Position(&usb_rx_file_queue, current_file.start_file_index);
 800cf32:	4b1e      	ldr	r3, [pc, #120]	@ (800cfac <TaskSendImage+0x16c>)
 800cf34:	691b      	ldr	r3, [r3, #16]
 800cf36:	4619      	mov	r1, r3
 800cf38:	481f      	ldr	r0, [pc, #124]	@ (800cfb8 <TaskSendImage+0x178>)
 800cf3a:	f7ff fdce 	bl	800cada <Queue_Set_Tail_Position>
				current_file.calculated_crc = CRC_HW_Calculation(Queue_Get_Tail_Address(&usb_rx_file_queue), current_file.size);
 800cf3e:	481e      	ldr	r0, [pc, #120]	@ (800cfb8 <TaskSendImage+0x178>)
 800cf40:	f7ff fda6 	bl	800ca90 <Queue_Get_Tail_Address>
 800cf44:	4602      	mov	r2, r0
 800cf46:	4b19      	ldr	r3, [pc, #100]	@ (800cfac <TaskSendImage+0x16c>)
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	4619      	mov	r1, r3
 800cf4c:	4610      	mov	r0, r2
 800cf4e:	f7f3 fff1 	bl	8000f34 <CRC_HW_Calculation>
 800cf52:	4603      	mov	r3, r0
 800cf54:	4a15      	ldr	r2, [pc, #84]	@ (800cfac <TaskSendImage+0x16c>)
 800cf56:	6093      	str	r3, [r2, #8]
				// Gửi CRC
				uint8_t crc_bytes[4] = {0};
 800cf58:	2300      	movs	r3, #0
 800cf5a:	60fb      	str	r3, [r7, #12]
				crc_bytes[0] = (current_file.calculated_crc >> 0) & 0xFF;
 800cf5c:	4b13      	ldr	r3, [pc, #76]	@ (800cfac <TaskSendImage+0x16c>)
 800cf5e:	689b      	ldr	r3, [r3, #8]
 800cf60:	b2db      	uxtb	r3, r3
 800cf62:	733b      	strb	r3, [r7, #12]
				crc_bytes[1] = (current_file.calculated_crc >> 8) & 0xFF;
 800cf64:	4b11      	ldr	r3, [pc, #68]	@ (800cfac <TaskSendImage+0x16c>)
 800cf66:	689b      	ldr	r3, [r3, #8]
 800cf68:	0a1b      	lsrs	r3, r3, #8
 800cf6a:	b2db      	uxtb	r3, r3
 800cf6c:	737b      	strb	r3, [r7, #13]
				crc_bytes[2] = (current_file.calculated_crc >> 16) & 0xFF;
 800cf6e:	4b0f      	ldr	r3, [pc, #60]	@ (800cfac <TaskSendImage+0x16c>)
 800cf70:	689b      	ldr	r3, [r3, #8]
 800cf72:	0c1b      	lsrs	r3, r3, #16
 800cf74:	b2db      	uxtb	r3, r3
 800cf76:	73bb      	strb	r3, [r7, #14]
				crc_bytes[3] = (current_file.calculated_crc >> 24) & 0xFF;
 800cf78:	4b0c      	ldr	r3, [pc, #48]	@ (800cfac <TaskSendImage+0x16c>)
 800cf7a:	689b      	ldr	r3, [r3, #8]
 800cf7c:	0e1b      	lsrs	r3, r3, #24
 800cf7e:	b2db      	uxtb	r3, r3
 800cf80:	73fb      	strb	r3, [r7, #15]
				CDC_Transmit_HS(crc_bytes, 4);
 800cf82:	f107 030c 	add.w	r3, r7, #12
 800cf86:	2104      	movs	r1, #4
 800cf88:	4618      	mov	r0, r3
 800cf8a:	f000 f8f1 	bl	800d170 <CDC_Transmit_HS>

				vTaskDelay(pdMS_TO_TICKS(10));  // Đợi đảm bảo dữ liệu được gửi hết
 800cf8e:	200a      	movs	r0, #10
 800cf90:	f7fd fc90 	bl	800a8b4 <vTaskDelay>

				current_device_state = STATE_WAIT_COMMAND;
 800cf94:	4b04      	ldr	r3, [pc, #16]	@ (800cfa8 <TaskSendImage+0x168>)
 800cf96:	2200      	movs	r2, #0
 800cf98:	701a      	strb	r2, [r3, #0]
				vTaskPrioritySet(hTaskSend, 3);
 800cf9a:	4b06      	ldr	r3, [pc, #24]	@ (800cfb4 <TaskSendImage+0x174>)
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	2103      	movs	r1, #3
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	f7fd fcd9 	bl	800a958 <vTaskPrioritySet>
		if(current_device_state == STATE_SEND_IMAGE)
 800cfa6:	e74f      	b.n	800ce48 <TaskSendImage+0x8>
 800cfa8:	2000e1c0 	.word	0x2000e1c0
 800cfac:	2000e1c4 	.word	0x2000e1c4
 800cfb0:	08010648 	.word	0x08010648
 800cfb4:	2000e1bc 	.word	0x2000e1bc
 800cfb8:	200003a8 	.word	0x200003a8

0800cfbc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800cfc0:	2201      	movs	r2, #1
 800cfc2:	4912      	ldr	r1, [pc, #72]	@ (800d00c <MX_USB_DEVICE_Init+0x50>)
 800cfc4:	4812      	ldr	r0, [pc, #72]	@ (800d010 <MX_USB_DEVICE_Init+0x54>)
 800cfc6:	f7fb f8f3 	bl	80081b0 <USBD_Init>
 800cfca:	4603      	mov	r3, r0
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d001      	beq.n	800cfd4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cfd0:	f7f4 fc24 	bl	800181c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800cfd4:	490f      	ldr	r1, [pc, #60]	@ (800d014 <MX_USB_DEVICE_Init+0x58>)
 800cfd6:	480e      	ldr	r0, [pc, #56]	@ (800d010 <MX_USB_DEVICE_Init+0x54>)
 800cfd8:	f7fb f91a 	bl	8008210 <USBD_RegisterClass>
 800cfdc:	4603      	mov	r3, r0
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d001      	beq.n	800cfe6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cfe2:	f7f4 fc1b 	bl	800181c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800cfe6:	490c      	ldr	r1, [pc, #48]	@ (800d018 <MX_USB_DEVICE_Init+0x5c>)
 800cfe8:	4809      	ldr	r0, [pc, #36]	@ (800d010 <MX_USB_DEVICE_Init+0x54>)
 800cfea:	f7fb f811 	bl	8008010 <USBD_CDC_RegisterInterface>
 800cfee:	4603      	mov	r3, r0
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d001      	beq.n	800cff8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cff4:	f7f4 fc12 	bl	800181c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800cff8:	4805      	ldr	r0, [pc, #20]	@ (800d010 <MX_USB_DEVICE_Init+0x54>)
 800cffa:	f7fb f93f 	bl	800827c <USBD_Start>
 800cffe:	4603      	mov	r3, r0
 800d000:	2b00      	cmp	r3, #0
 800d002:	d001      	beq.n	800d008 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d004:	f7f4 fc0a 	bl	800181c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d008:	bf00      	nop
 800d00a:	bd80      	pop	{r7, pc}
 800d00c:	200000b0 	.word	0x200000b0
 800d010:	2000e214 	.word	0x2000e214
 800d014:	20000018 	.word	0x20000018
 800d018:	2000009c 	.word	0x2000009c

0800d01c <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800d020:	2200      	movs	r2, #0
 800d022:	4905      	ldr	r1, [pc, #20]	@ (800d038 <CDC_Init_HS+0x1c>)
 800d024:	4805      	ldr	r0, [pc, #20]	@ (800d03c <CDC_Init_HS+0x20>)
 800d026:	f7fb f80d 	bl	8008044 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800d02a:	4905      	ldr	r1, [pc, #20]	@ (800d040 <CDC_Init_HS+0x24>)
 800d02c:	4803      	ldr	r0, [pc, #12]	@ (800d03c <CDC_Init_HS+0x20>)
 800d02e:	f7fb f82b 	bl	8008088 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d032:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800d034:	4618      	mov	r0, r3
 800d036:	bd80      	pop	{r7, pc}
 800d038:	2000ecf0 	.word	0x2000ecf0
 800d03c:	2000e214 	.word	0x2000e214
 800d040:	2000e4f0 	.word	0x2000e4f0

0800d044 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800d044:	b480      	push	{r7}
 800d046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800d048:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800d04a:	4618      	mov	r0, r3
 800d04c:	46bd      	mov	sp, r7
 800d04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d052:	4770      	bx	lr

0800d054 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d054:	b480      	push	{r7}
 800d056:	b083      	sub	sp, #12
 800d058:	af00      	add	r7, sp, #0
 800d05a:	4603      	mov	r3, r0
 800d05c:	6039      	str	r1, [r7, #0]
 800d05e:	71fb      	strb	r3, [r7, #7]
 800d060:	4613      	mov	r3, r2
 800d062:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800d064:	79fb      	ldrb	r3, [r7, #7]
 800d066:	2b23      	cmp	r3, #35	@ 0x23
 800d068:	d84a      	bhi.n	800d100 <CDC_Control_HS+0xac>
 800d06a:	a201      	add	r2, pc, #4	@ (adr r2, 800d070 <CDC_Control_HS+0x1c>)
 800d06c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d070:	0800d101 	.word	0x0800d101
 800d074:	0800d101 	.word	0x0800d101
 800d078:	0800d101 	.word	0x0800d101
 800d07c:	0800d101 	.word	0x0800d101
 800d080:	0800d101 	.word	0x0800d101
 800d084:	0800d101 	.word	0x0800d101
 800d088:	0800d101 	.word	0x0800d101
 800d08c:	0800d101 	.word	0x0800d101
 800d090:	0800d101 	.word	0x0800d101
 800d094:	0800d101 	.word	0x0800d101
 800d098:	0800d101 	.word	0x0800d101
 800d09c:	0800d101 	.word	0x0800d101
 800d0a0:	0800d101 	.word	0x0800d101
 800d0a4:	0800d101 	.word	0x0800d101
 800d0a8:	0800d101 	.word	0x0800d101
 800d0ac:	0800d101 	.word	0x0800d101
 800d0b0:	0800d101 	.word	0x0800d101
 800d0b4:	0800d101 	.word	0x0800d101
 800d0b8:	0800d101 	.word	0x0800d101
 800d0bc:	0800d101 	.word	0x0800d101
 800d0c0:	0800d101 	.word	0x0800d101
 800d0c4:	0800d101 	.word	0x0800d101
 800d0c8:	0800d101 	.word	0x0800d101
 800d0cc:	0800d101 	.word	0x0800d101
 800d0d0:	0800d101 	.word	0x0800d101
 800d0d4:	0800d101 	.word	0x0800d101
 800d0d8:	0800d101 	.word	0x0800d101
 800d0dc:	0800d101 	.word	0x0800d101
 800d0e0:	0800d101 	.word	0x0800d101
 800d0e4:	0800d101 	.word	0x0800d101
 800d0e8:	0800d101 	.word	0x0800d101
 800d0ec:	0800d101 	.word	0x0800d101
 800d0f0:	0800d101 	.word	0x0800d101
 800d0f4:	0800d101 	.word	0x0800d101
 800d0f8:	0800d101 	.word	0x0800d101
 800d0fc:	0800d101 	.word	0x0800d101
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d100:	bf00      	nop
  }

  return (USBD_OK);
 800d102:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800d104:	4618      	mov	r0, r3
 800d106:	370c      	adds	r7, #12
 800d108:	46bd      	mov	sp, r7
 800d10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10e:	4770      	bx	lr

0800d110 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b082      	sub	sp, #8
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
 800d118:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */

  if(current_device_state == STATE_RECEIVE_IMAGE)
 800d11a:	4b11      	ldr	r3, [pc, #68]	@ (800d160 <CDC_Receive_HS+0x50>)
 800d11c:	781b      	ldrb	r3, [r3, #0]
 800d11e:	2b01      	cmp	r3, #1
 800d120:	d107      	bne.n	800d132 <CDC_Receive_HS+0x22>
  {
    Queue_Push_Buffer(&usb_rx_file_queue, Buf, *Len);
 800d122:	683b      	ldr	r3, [r7, #0]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	461a      	mov	r2, r3
 800d128:	6879      	ldr	r1, [r7, #4]
 800d12a:	480e      	ldr	r0, [pc, #56]	@ (800d164 <CDC_Receive_HS+0x54>)
 800d12c:	f7ff fbbf 	bl	800c8ae <Queue_Push_Buffer>
 800d130:	e00a      	b.n	800d148 <CDC_Receive_HS+0x38>
  }
  else if(current_device_state == STATE_WAIT_COMMAND)
 800d132:	4b0b      	ldr	r3, [pc, #44]	@ (800d160 <CDC_Receive_HS+0x50>)
 800d134:	781b      	ldrb	r3, [r3, #0]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d106      	bne.n	800d148 <CDC_Receive_HS+0x38>
  {
    Queue_Push_Buffer(&usb_rx_cmd_queue, Buf, *Len);
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	461a      	mov	r2, r3
 800d140:	6879      	ldr	r1, [r7, #4]
 800d142:	4809      	ldr	r0, [pc, #36]	@ (800d168 <CDC_Receive_HS+0x58>)
 800d144:	f7ff fbb3 	bl	800c8ae <Queue_Push_Buffer>
  }

  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800d148:	6879      	ldr	r1, [r7, #4]
 800d14a:	4808      	ldr	r0, [pc, #32]	@ (800d16c <CDC_Receive_HS+0x5c>)
 800d14c:	f7fa ff9c 	bl	8008088 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800d150:	4806      	ldr	r0, [pc, #24]	@ (800d16c <CDC_Receive_HS+0x5c>)
 800d152:	f7fa fff7 	bl	8008144 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d156:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800d158:	4618      	mov	r0, r3
 800d15a:	3708      	adds	r7, #8
 800d15c:	46bd      	mov	sp, r7
 800d15e:	bd80      	pop	{r7, pc}
 800d160:	2000e1c0 	.word	0x2000e1c0
 800d164:	200003a8 	.word	0x200003a8
 800d168:	20000398 	.word	0x20000398
 800d16c:	2000e214 	.word	0x2000e214

0800d170 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b084      	sub	sp, #16
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
 800d178:	460b      	mov	r3, r1
 800d17a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d17c:	2300      	movs	r3, #0
 800d17e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800d180:	4b0d      	ldr	r3, [pc, #52]	@ (800d1b8 <CDC_Transmit_HS+0x48>)
 800d182:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d186:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d188:	68bb      	ldr	r3, [r7, #8]
 800d18a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d001      	beq.n	800d196 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 800d192:	2301      	movs	r3, #1
 800d194:	e00b      	b.n	800d1ae <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800d196:	887b      	ldrh	r3, [r7, #2]
 800d198:	461a      	mov	r2, r3
 800d19a:	6879      	ldr	r1, [r7, #4]
 800d19c:	4806      	ldr	r0, [pc, #24]	@ (800d1b8 <CDC_Transmit_HS+0x48>)
 800d19e:	f7fa ff51 	bl	8008044 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800d1a2:	4805      	ldr	r0, [pc, #20]	@ (800d1b8 <CDC_Transmit_HS+0x48>)
 800d1a4:	f7fa ff8e 	bl	80080c4 <USBD_CDC_TransmitPacket>
 800d1a8:	4603      	mov	r3, r0
 800d1aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800d1ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	3710      	adds	r7, #16
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	bd80      	pop	{r7, pc}
 800d1b6:	bf00      	nop
 800d1b8:	2000e214 	.word	0x2000e214

0800d1bc <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d1bc:	b480      	push	{r7}
 800d1be:	b087      	sub	sp, #28
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	60f8      	str	r0, [r7, #12]
 800d1c4:	60b9      	str	r1, [r7, #8]
 800d1c6:	4613      	mov	r3, r2
 800d1c8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800d1ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	371c      	adds	r7, #28
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1dc:	4770      	bx	lr
	...

0800d1e0 <Check_Flag_Complete_Transmit>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */

uint8_t Check_Flag_Complete_Transmit(void)
{
 800d1e0:	b480      	push	{r7}
 800d1e2:	b083      	sub	sp, #12
 800d1e4:	af00      	add	r7, sp, #0
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800d1e6:	4b09      	ldr	r3, [pc, #36]	@ (800d20c <Check_Flag_Complete_Transmit+0x2c>)
 800d1e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d1ec:	607b      	str	r3, [r7, #4]
	  if (hcdc->TxState == 0)
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d101      	bne.n	800d1fc <Check_Flag_Complete_Transmit+0x1c>
	  {
		return 0;
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	e000      	b.n	800d1fe <Check_Flag_Complete_Transmit+0x1e>
	  }
	  return 1;
 800d1fc:	2301      	movs	r3, #1
}
 800d1fe:	4618      	mov	r0, r3
 800d200:	370c      	adds	r7, #12
 800d202:	46bd      	mov	sp, r7
 800d204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d208:	4770      	bx	lr
 800d20a:	bf00      	nop
 800d20c:	2000e214 	.word	0x2000e214

0800d210 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d210:	b480      	push	{r7}
 800d212:	b083      	sub	sp, #12
 800d214:	af00      	add	r7, sp, #0
 800d216:	4603      	mov	r3, r0
 800d218:	6039      	str	r1, [r7, #0]
 800d21a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800d21c:	683b      	ldr	r3, [r7, #0]
 800d21e:	2212      	movs	r2, #18
 800d220:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800d222:	4b03      	ldr	r3, [pc, #12]	@ (800d230 <USBD_HS_DeviceDescriptor+0x20>)
}
 800d224:	4618      	mov	r0, r3
 800d226:	370c      	adds	r7, #12
 800d228:	46bd      	mov	sp, r7
 800d22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22e:	4770      	bx	lr
 800d230:	200000d0 	.word	0x200000d0

0800d234 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d234:	b480      	push	{r7}
 800d236:	b083      	sub	sp, #12
 800d238:	af00      	add	r7, sp, #0
 800d23a:	4603      	mov	r3, r0
 800d23c:	6039      	str	r1, [r7, #0]
 800d23e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d240:	683b      	ldr	r3, [r7, #0]
 800d242:	2204      	movs	r2, #4
 800d244:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d246:	4b03      	ldr	r3, [pc, #12]	@ (800d254 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800d248:	4618      	mov	r0, r3
 800d24a:	370c      	adds	r7, #12
 800d24c:	46bd      	mov	sp, r7
 800d24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d252:	4770      	bx	lr
 800d254:	200000f0 	.word	0x200000f0

0800d258 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d258:	b580      	push	{r7, lr}
 800d25a:	b082      	sub	sp, #8
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	4603      	mov	r3, r0
 800d260:	6039      	str	r1, [r7, #0]
 800d262:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d264:	79fb      	ldrb	r3, [r7, #7]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d105      	bne.n	800d276 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800d26a:	683a      	ldr	r2, [r7, #0]
 800d26c:	4907      	ldr	r1, [pc, #28]	@ (800d28c <USBD_HS_ProductStrDescriptor+0x34>)
 800d26e:	4808      	ldr	r0, [pc, #32]	@ (800d290 <USBD_HS_ProductStrDescriptor+0x38>)
 800d270:	f7fc f9f4 	bl	800965c <USBD_GetString>
 800d274:	e004      	b.n	800d280 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800d276:	683a      	ldr	r2, [r7, #0]
 800d278:	4904      	ldr	r1, [pc, #16]	@ (800d28c <USBD_HS_ProductStrDescriptor+0x34>)
 800d27a:	4805      	ldr	r0, [pc, #20]	@ (800d290 <USBD_HS_ProductStrDescriptor+0x38>)
 800d27c:	f7fc f9ee 	bl	800965c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d280:	4b02      	ldr	r3, [pc, #8]	@ (800d28c <USBD_HS_ProductStrDescriptor+0x34>)
}
 800d282:	4618      	mov	r0, r3
 800d284:	3708      	adds	r7, #8
 800d286:	46bd      	mov	sp, r7
 800d288:	bd80      	pop	{r7, pc}
 800d28a:	bf00      	nop
 800d28c:	2000f4f0 	.word	0x2000f4f0
 800d290:	08010658 	.word	0x08010658

0800d294 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b082      	sub	sp, #8
 800d298:	af00      	add	r7, sp, #0
 800d29a:	4603      	mov	r3, r0
 800d29c:	6039      	str	r1, [r7, #0]
 800d29e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d2a0:	683a      	ldr	r2, [r7, #0]
 800d2a2:	4904      	ldr	r1, [pc, #16]	@ (800d2b4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800d2a4:	4804      	ldr	r0, [pc, #16]	@ (800d2b8 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800d2a6:	f7fc f9d9 	bl	800965c <USBD_GetString>
  return USBD_StrDesc;
 800d2aa:	4b02      	ldr	r3, [pc, #8]	@ (800d2b4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	3708      	adds	r7, #8
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	bd80      	pop	{r7, pc}
 800d2b4:	2000f4f0 	.word	0x2000f4f0
 800d2b8:	08010670 	.word	0x08010670

0800d2bc <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b082      	sub	sp, #8
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	6039      	str	r1, [r7, #0]
 800d2c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d2c8:	683b      	ldr	r3, [r7, #0]
 800d2ca:	221a      	movs	r2, #26
 800d2cc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d2ce:	f000 f855 	bl	800d37c <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800d2d2:	4b02      	ldr	r3, [pc, #8]	@ (800d2dc <USBD_HS_SerialStrDescriptor+0x20>)
}
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	3708      	adds	r7, #8
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	bd80      	pop	{r7, pc}
 800d2dc:	200000f4 	.word	0x200000f4

0800d2e0 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b082      	sub	sp, #8
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	4603      	mov	r3, r0
 800d2e8:	6039      	str	r1, [r7, #0]
 800d2ea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d2ec:	79fb      	ldrb	r3, [r7, #7]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d105      	bne.n	800d2fe <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800d2f2:	683a      	ldr	r2, [r7, #0]
 800d2f4:	4907      	ldr	r1, [pc, #28]	@ (800d314 <USBD_HS_ConfigStrDescriptor+0x34>)
 800d2f6:	4808      	ldr	r0, [pc, #32]	@ (800d318 <USBD_HS_ConfigStrDescriptor+0x38>)
 800d2f8:	f7fc f9b0 	bl	800965c <USBD_GetString>
 800d2fc:	e004      	b.n	800d308 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800d2fe:	683a      	ldr	r2, [r7, #0]
 800d300:	4904      	ldr	r1, [pc, #16]	@ (800d314 <USBD_HS_ConfigStrDescriptor+0x34>)
 800d302:	4805      	ldr	r0, [pc, #20]	@ (800d318 <USBD_HS_ConfigStrDescriptor+0x38>)
 800d304:	f7fc f9aa 	bl	800965c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d308:	4b02      	ldr	r3, [pc, #8]	@ (800d314 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800d30a:	4618      	mov	r0, r3
 800d30c:	3708      	adds	r7, #8
 800d30e:	46bd      	mov	sp, r7
 800d310:	bd80      	pop	{r7, pc}
 800d312:	bf00      	nop
 800d314:	2000f4f0 	.word	0x2000f4f0
 800d318:	08010684 	.word	0x08010684

0800d31c <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b082      	sub	sp, #8
 800d320:	af00      	add	r7, sp, #0
 800d322:	4603      	mov	r3, r0
 800d324:	6039      	str	r1, [r7, #0]
 800d326:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d328:	79fb      	ldrb	r3, [r7, #7]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d105      	bne.n	800d33a <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800d32e:	683a      	ldr	r2, [r7, #0]
 800d330:	4907      	ldr	r1, [pc, #28]	@ (800d350 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800d332:	4808      	ldr	r0, [pc, #32]	@ (800d354 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800d334:	f7fc f992 	bl	800965c <USBD_GetString>
 800d338:	e004      	b.n	800d344 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800d33a:	683a      	ldr	r2, [r7, #0]
 800d33c:	4904      	ldr	r1, [pc, #16]	@ (800d350 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800d33e:	4805      	ldr	r0, [pc, #20]	@ (800d354 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800d340:	f7fc f98c 	bl	800965c <USBD_GetString>
  }
  return USBD_StrDesc;
 800d344:	4b02      	ldr	r3, [pc, #8]	@ (800d350 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800d346:	4618      	mov	r0, r3
 800d348:	3708      	adds	r7, #8
 800d34a:	46bd      	mov	sp, r7
 800d34c:	bd80      	pop	{r7, pc}
 800d34e:	bf00      	nop
 800d350:	2000f4f0 	.word	0x2000f4f0
 800d354:	08010690 	.word	0x08010690

0800d358 <USBD_HS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d358:	b480      	push	{r7}
 800d35a:	b083      	sub	sp, #12
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	4603      	mov	r3, r0
 800d360:	6039      	str	r1, [r7, #0]
 800d362:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_BOSDesc);
 800d364:	683b      	ldr	r3, [r7, #0]
 800d366:	220c      	movs	r2, #12
 800d368:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_HS_BOSDesc;
 800d36a:	4b03      	ldr	r3, [pc, #12]	@ (800d378 <USBD_HS_USR_BOSDescriptor+0x20>)
}
 800d36c:	4618      	mov	r0, r3
 800d36e:	370c      	adds	r7, #12
 800d370:	46bd      	mov	sp, r7
 800d372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d376:	4770      	bx	lr
 800d378:	200000e4 	.word	0x200000e4

0800d37c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b084      	sub	sp, #16
 800d380:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d382:	4b0f      	ldr	r3, [pc, #60]	@ (800d3c0 <Get_SerialNum+0x44>)
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d388:	4b0e      	ldr	r3, [pc, #56]	@ (800d3c4 <Get_SerialNum+0x48>)
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d38e:	4b0e      	ldr	r3, [pc, #56]	@ (800d3c8 <Get_SerialNum+0x4c>)
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d394:	68fa      	ldr	r2, [r7, #12]
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	4413      	add	r3, r2
 800d39a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d009      	beq.n	800d3b6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d3a2:	2208      	movs	r2, #8
 800d3a4:	4909      	ldr	r1, [pc, #36]	@ (800d3cc <Get_SerialNum+0x50>)
 800d3a6:	68f8      	ldr	r0, [r7, #12]
 800d3a8:	f000 f814 	bl	800d3d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d3ac:	2204      	movs	r2, #4
 800d3ae:	4908      	ldr	r1, [pc, #32]	@ (800d3d0 <Get_SerialNum+0x54>)
 800d3b0:	68b8      	ldr	r0, [r7, #8]
 800d3b2:	f000 f80f 	bl	800d3d4 <IntToUnicode>
  }
}
 800d3b6:	bf00      	nop
 800d3b8:	3710      	adds	r7, #16
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	bd80      	pop	{r7, pc}
 800d3be:	bf00      	nop
 800d3c0:	1ff0f420 	.word	0x1ff0f420
 800d3c4:	1ff0f424 	.word	0x1ff0f424
 800d3c8:	1ff0f428 	.word	0x1ff0f428
 800d3cc:	200000f6 	.word	0x200000f6
 800d3d0:	20000106 	.word	0x20000106

0800d3d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d3d4:	b480      	push	{r7}
 800d3d6:	b087      	sub	sp, #28
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	60f8      	str	r0, [r7, #12]
 800d3dc:	60b9      	str	r1, [r7, #8]
 800d3de:	4613      	mov	r3, r2
 800d3e0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	75fb      	strb	r3, [r7, #23]
 800d3ea:	e027      	b.n	800d43c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	0f1b      	lsrs	r3, r3, #28
 800d3f0:	2b09      	cmp	r3, #9
 800d3f2:	d80b      	bhi.n	800d40c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	0f1b      	lsrs	r3, r3, #28
 800d3f8:	b2da      	uxtb	r2, r3
 800d3fa:	7dfb      	ldrb	r3, [r7, #23]
 800d3fc:	005b      	lsls	r3, r3, #1
 800d3fe:	4619      	mov	r1, r3
 800d400:	68bb      	ldr	r3, [r7, #8]
 800d402:	440b      	add	r3, r1
 800d404:	3230      	adds	r2, #48	@ 0x30
 800d406:	b2d2      	uxtb	r2, r2
 800d408:	701a      	strb	r2, [r3, #0]
 800d40a:	e00a      	b.n	800d422 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	0f1b      	lsrs	r3, r3, #28
 800d410:	b2da      	uxtb	r2, r3
 800d412:	7dfb      	ldrb	r3, [r7, #23]
 800d414:	005b      	lsls	r3, r3, #1
 800d416:	4619      	mov	r1, r3
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	440b      	add	r3, r1
 800d41c:	3237      	adds	r2, #55	@ 0x37
 800d41e:	b2d2      	uxtb	r2, r2
 800d420:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	011b      	lsls	r3, r3, #4
 800d426:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d428:	7dfb      	ldrb	r3, [r7, #23]
 800d42a:	005b      	lsls	r3, r3, #1
 800d42c:	3301      	adds	r3, #1
 800d42e:	68ba      	ldr	r2, [r7, #8]
 800d430:	4413      	add	r3, r2
 800d432:	2200      	movs	r2, #0
 800d434:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d436:	7dfb      	ldrb	r3, [r7, #23]
 800d438:	3301      	adds	r3, #1
 800d43a:	75fb      	strb	r3, [r7, #23]
 800d43c:	7dfa      	ldrb	r2, [r7, #23]
 800d43e:	79fb      	ldrb	r3, [r7, #7]
 800d440:	429a      	cmp	r2, r3
 800d442:	d3d3      	bcc.n	800d3ec <IntToUnicode+0x18>
  }
}
 800d444:	bf00      	nop
 800d446:	bf00      	nop
 800d448:	371c      	adds	r7, #28
 800d44a:	46bd      	mov	sp, r7
 800d44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d450:	4770      	bx	lr
	...

0800d454 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b08e      	sub	sp, #56	@ 0x38
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d45c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d460:	2200      	movs	r2, #0
 800d462:	601a      	str	r2, [r3, #0]
 800d464:	605a      	str	r2, [r3, #4]
 800d466:	609a      	str	r2, [r3, #8]
 800d468:	60da      	str	r2, [r3, #12]
 800d46a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	4a4c      	ldr	r2, [pc, #304]	@ (800d5a4 <HAL_PCD_MspInit+0x150>)
 800d472:	4293      	cmp	r3, r2
 800d474:	f040 8091 	bne.w	800d59a <HAL_PCD_MspInit+0x146>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d478:	4b4b      	ldr	r3, [pc, #300]	@ (800d5a8 <HAL_PCD_MspInit+0x154>)
 800d47a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d47c:	4a4a      	ldr	r2, [pc, #296]	@ (800d5a8 <HAL_PCD_MspInit+0x154>)
 800d47e:	f043 0302 	orr.w	r3, r3, #2
 800d482:	6313      	str	r3, [r2, #48]	@ 0x30
 800d484:	4b48      	ldr	r3, [pc, #288]	@ (800d5a8 <HAL_PCD_MspInit+0x154>)
 800d486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d488:	f003 0302 	and.w	r3, r3, #2
 800d48c:	623b      	str	r3, [r7, #32]
 800d48e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800d490:	4b45      	ldr	r3, [pc, #276]	@ (800d5a8 <HAL_PCD_MspInit+0x154>)
 800d492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d494:	4a44      	ldr	r2, [pc, #272]	@ (800d5a8 <HAL_PCD_MspInit+0x154>)
 800d496:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d49a:	6313      	str	r3, [r2, #48]	@ 0x30
 800d49c:	4b42      	ldr	r3, [pc, #264]	@ (800d5a8 <HAL_PCD_MspInit+0x154>)
 800d49e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d4a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d4a4:	61fb      	str	r3, [r7, #28]
 800d4a6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d4a8:	4b3f      	ldr	r3, [pc, #252]	@ (800d5a8 <HAL_PCD_MspInit+0x154>)
 800d4aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d4ac:	4a3e      	ldr	r2, [pc, #248]	@ (800d5a8 <HAL_PCD_MspInit+0x154>)
 800d4ae:	f043 0304 	orr.w	r3, r3, #4
 800d4b2:	6313      	str	r3, [r2, #48]	@ 0x30
 800d4b4:	4b3c      	ldr	r3, [pc, #240]	@ (800d5a8 <HAL_PCD_MspInit+0x154>)
 800d4b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d4b8:	f003 0304 	and.w	r3, r3, #4
 800d4bc:	61bb      	str	r3, [r7, #24]
 800d4be:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d4c0:	4b39      	ldr	r3, [pc, #228]	@ (800d5a8 <HAL_PCD_MspInit+0x154>)
 800d4c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d4c4:	4a38      	ldr	r2, [pc, #224]	@ (800d5a8 <HAL_PCD_MspInit+0x154>)
 800d4c6:	f043 0301 	orr.w	r3, r3, #1
 800d4ca:	6313      	str	r3, [r2, #48]	@ 0x30
 800d4cc:	4b36      	ldr	r3, [pc, #216]	@ (800d5a8 <HAL_PCD_MspInit+0x154>)
 800d4ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d4d0:	f003 0301 	and.w	r3, r3, #1
 800d4d4:	617b      	str	r3, [r7, #20]
 800d4d6:	697b      	ldr	r3, [r7, #20]
    PA3     ------> USB_OTG_HS_ULPI_D0
    PB1     ------> USB_OTG_HS_ULPI_D2
    PB0     ------> USB_OTG_HS_ULPI_D1
    PB11     ------> USB_OTG_HS_ULPI_D4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_10
 800d4d8:	f643 4323 	movw	r3, #15395	@ 0x3c23
 800d4dc:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d4de:	2302      	movs	r3, #2
 800d4e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d4e6:	2303      	movs	r3, #3
 800d4e8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800d4ea:	230a      	movs	r3, #10
 800d4ec:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d4ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d4f2:	4619      	mov	r1, r3
 800d4f4:	482d      	ldr	r0, [pc, #180]	@ (800d5ac <HAL_PCD_MspInit+0x158>)
 800d4f6:	f7f4 fe57 	bl	80021a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800d4fa:	2310      	movs	r3, #16
 800d4fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d4fe:	2302      	movs	r3, #2
 800d500:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d502:	2300      	movs	r3, #0
 800d504:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d506:	2303      	movs	r3, #3
 800d508:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800d50a:	230a      	movs	r3, #10
 800d50c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800d50e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d512:	4619      	mov	r1, r3
 800d514:	4826      	ldr	r0, [pc, #152]	@ (800d5b0 <HAL_PCD_MspInit+0x15c>)
 800d516:	f7f4 fe47 	bl	80021a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800d51a:	2305      	movs	r3, #5
 800d51c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d51e:	2302      	movs	r3, #2
 800d520:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d522:	2300      	movs	r3, #0
 800d524:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d526:	2303      	movs	r3, #3
 800d528:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800d52a:	230a      	movs	r3, #10
 800d52c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d52e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d532:	4619      	mov	r1, r3
 800d534:	481f      	ldr	r0, [pc, #124]	@ (800d5b4 <HAL_PCD_MspInit+0x160>)
 800d536:	f7f4 fe37 	bl	80021a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 800d53a:	2328      	movs	r3, #40	@ 0x28
 800d53c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d53e:	2302      	movs	r3, #2
 800d540:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d542:	2300      	movs	r3, #0
 800d544:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d546:	2303      	movs	r3, #3
 800d548:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800d54a:	230a      	movs	r3, #10
 800d54c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d54e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d552:	4619      	mov	r1, r3
 800d554:	4818      	ldr	r0, [pc, #96]	@ (800d5b8 <HAL_PCD_MspInit+0x164>)
 800d556:	f7f4 fe27 	bl	80021a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800d55a:	4b13      	ldr	r3, [pc, #76]	@ (800d5a8 <HAL_PCD_MspInit+0x154>)
 800d55c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d55e:	4a12      	ldr	r2, [pc, #72]	@ (800d5a8 <HAL_PCD_MspInit+0x154>)
 800d560:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800d564:	6313      	str	r3, [r2, #48]	@ 0x30
 800d566:	4b10      	ldr	r3, [pc, #64]	@ (800d5a8 <HAL_PCD_MspInit+0x154>)
 800d568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d56a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d56e:	613b      	str	r3, [r7, #16]
 800d570:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 800d572:	4b0d      	ldr	r3, [pc, #52]	@ (800d5a8 <HAL_PCD_MspInit+0x154>)
 800d574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d576:	4a0c      	ldr	r2, [pc, #48]	@ (800d5a8 <HAL_PCD_MspInit+0x154>)
 800d578:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d57c:	6313      	str	r3, [r2, #48]	@ 0x30
 800d57e:	4b0a      	ldr	r3, [pc, #40]	@ (800d5a8 <HAL_PCD_MspInit+0x154>)
 800d580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d582:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d586:	60fb      	str	r3, [r7, #12]
 800d588:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800d58a:	2200      	movs	r2, #0
 800d58c:	2105      	movs	r1, #5
 800d58e:	204d      	movs	r0, #77	@ 0x4d
 800d590:	f7f4 fce1 	bl	8001f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800d594:	204d      	movs	r0, #77	@ 0x4d
 800d596:	f7f4 fcfa 	bl	8001f8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800d59a:	bf00      	nop
 800d59c:	3738      	adds	r7, #56	@ 0x38
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	bd80      	pop	{r7, pc}
 800d5a2:	bf00      	nop
 800d5a4:	40040000 	.word	0x40040000
 800d5a8:	40023800 	.word	0x40023800
 800d5ac:	40020400 	.word	0x40020400
 800d5b0:	40021c00 	.word	0x40021c00
 800d5b4:	40020800 	.word	0x40020800
 800d5b8:	40020000 	.word	0x40020000

0800d5bc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b082      	sub	sp, #8
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f8d3 24dc 	ldr.w	r2, [r3, #1244]	@ 0x4dc
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d5d0:	4619      	mov	r1, r3
 800d5d2:	4610      	mov	r0, r2
 800d5d4:	f7fa fe9f 	bl	8008316 <USBD_LL_SetupStage>
}
 800d5d8:	bf00      	nop
 800d5da:	3708      	adds	r7, #8
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}

0800d5e0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b082      	sub	sp, #8
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
 800d5e8:	460b      	mov	r3, r1
 800d5ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 800d5f2:	78fa      	ldrb	r2, [r7, #3]
 800d5f4:	6879      	ldr	r1, [r7, #4]
 800d5f6:	4613      	mov	r3, r2
 800d5f8:	00db      	lsls	r3, r3, #3
 800d5fa:	4413      	add	r3, r2
 800d5fc:	009b      	lsls	r3, r3, #2
 800d5fe:	440b      	add	r3, r1
 800d600:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d604:	681a      	ldr	r2, [r3, #0]
 800d606:	78fb      	ldrb	r3, [r7, #3]
 800d608:	4619      	mov	r1, r3
 800d60a:	f7fa fed9 	bl	80083c0 <USBD_LL_DataOutStage>
}
 800d60e:	bf00      	nop
 800d610:	3708      	adds	r7, #8
 800d612:	46bd      	mov	sp, r7
 800d614:	bd80      	pop	{r7, pc}

0800d616 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d616:	b580      	push	{r7, lr}
 800d618:	b082      	sub	sp, #8
 800d61a:	af00      	add	r7, sp, #0
 800d61c:	6078      	str	r0, [r7, #4]
 800d61e:	460b      	mov	r3, r1
 800d620:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	f8d3 04dc 	ldr.w	r0, [r3, #1244]	@ 0x4dc
 800d628:	78fa      	ldrb	r2, [r7, #3]
 800d62a:	6879      	ldr	r1, [r7, #4]
 800d62c:	4613      	mov	r3, r2
 800d62e:	00db      	lsls	r3, r3, #3
 800d630:	4413      	add	r3, r2
 800d632:	009b      	lsls	r3, r3, #2
 800d634:	440b      	add	r3, r1
 800d636:	3320      	adds	r3, #32
 800d638:	681a      	ldr	r2, [r3, #0]
 800d63a:	78fb      	ldrb	r3, [r7, #3]
 800d63c:	4619      	mov	r1, r3
 800d63e:	f7fa ff7b 	bl	8008538 <USBD_LL_DataInStage>
}
 800d642:	bf00      	nop
 800d644:	3708      	adds	r7, #8
 800d646:	46bd      	mov	sp, r7
 800d648:	bd80      	pop	{r7, pc}

0800d64a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d64a:	b580      	push	{r7, lr}
 800d64c:	b082      	sub	sp, #8
 800d64e:	af00      	add	r7, sp, #0
 800d650:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d658:	4618      	mov	r0, r3
 800d65a:	f7fb f8bf 	bl	80087dc <USBD_LL_SOF>
}
 800d65e:	bf00      	nop
 800d660:	3708      	adds	r7, #8
 800d662:	46bd      	mov	sp, r7
 800d664:	bd80      	pop	{r7, pc}

0800d666 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d666:	b580      	push	{r7, lr}
 800d668:	b084      	sub	sp, #16
 800d66a:	af00      	add	r7, sp, #0
 800d66c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d66e:	2301      	movs	r3, #1
 800d670:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	79db      	ldrb	r3, [r3, #7]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d102      	bne.n	800d680 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d67a:	2300      	movs	r3, #0
 800d67c:	73fb      	strb	r3, [r7, #15]
 800d67e:	e008      	b.n	800d692 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	79db      	ldrb	r3, [r3, #7]
 800d684:	2b02      	cmp	r3, #2
 800d686:	d102      	bne.n	800d68e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d688:	2301      	movs	r3, #1
 800d68a:	73fb      	strb	r3, [r7, #15]
 800d68c:	e001      	b.n	800d692 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d68e:	f7f4 f8c5 	bl	800181c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d698:	7bfa      	ldrb	r2, [r7, #15]
 800d69a:	4611      	mov	r1, r2
 800d69c:	4618      	mov	r0, r3
 800d69e:	f7fb f859 	bl	8008754 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	f7fb f800 	bl	80086ae <USBD_LL_Reset>
}
 800d6ae:	bf00      	nop
 800d6b0:	3710      	adds	r7, #16
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	bd80      	pop	{r7, pc}
	...

0800d6b8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b082      	sub	sp, #8
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	f7fb f854 	bl	8008774 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	687a      	ldr	r2, [r7, #4]
 800d6d8:	6812      	ldr	r2, [r2, #0]
 800d6da:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d6de:	f043 0301 	orr.w	r3, r3, #1
 800d6e2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	7adb      	ldrb	r3, [r3, #11]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d005      	beq.n	800d6f8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d6ec:	4b04      	ldr	r3, [pc, #16]	@ (800d700 <HAL_PCD_SuspendCallback+0x48>)
 800d6ee:	691b      	ldr	r3, [r3, #16]
 800d6f0:	4a03      	ldr	r2, [pc, #12]	@ (800d700 <HAL_PCD_SuspendCallback+0x48>)
 800d6f2:	f043 0306 	orr.w	r3, r3, #6
 800d6f6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d6f8:	bf00      	nop
 800d6fa:	3708      	adds	r7, #8
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	bd80      	pop	{r7, pc}
 800d700:	e000ed00 	.word	0xe000ed00

0800d704 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b082      	sub	sp, #8
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d712:	4618      	mov	r0, r3
 800d714:	f7fb f84a 	bl	80087ac <USBD_LL_Resume>
}
 800d718:	bf00      	nop
 800d71a:	3708      	adds	r7, #8
 800d71c:	46bd      	mov	sp, r7
 800d71e:	bd80      	pop	{r7, pc}

0800d720 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b082      	sub	sp, #8
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
 800d728:	460b      	mov	r3, r1
 800d72a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d732:	78fa      	ldrb	r2, [r7, #3]
 800d734:	4611      	mov	r1, r2
 800d736:	4618      	mov	r0, r3
 800d738:	f7fb f8a2 	bl	8008880 <USBD_LL_IsoOUTIncomplete>
}
 800d73c:	bf00      	nop
 800d73e:	3708      	adds	r7, #8
 800d740:	46bd      	mov	sp, r7
 800d742:	bd80      	pop	{r7, pc}

0800d744 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b082      	sub	sp, #8
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
 800d74c:	460b      	mov	r3, r1
 800d74e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d756:	78fa      	ldrb	r2, [r7, #3]
 800d758:	4611      	mov	r1, r2
 800d75a:	4618      	mov	r0, r3
 800d75c:	f7fb f85e 	bl	800881c <USBD_LL_IsoINIncomplete>
}
 800d760:	bf00      	nop
 800d762:	3708      	adds	r7, #8
 800d764:	46bd      	mov	sp, r7
 800d766:	bd80      	pop	{r7, pc}

0800d768 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b082      	sub	sp, #8
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d776:	4618      	mov	r0, r3
 800d778:	f7fb f8b4 	bl	80088e4 <USBD_LL_DevConnected>
}
 800d77c:	bf00      	nop
 800d77e:	3708      	adds	r7, #8
 800d780:	46bd      	mov	sp, r7
 800d782:	bd80      	pop	{r7, pc}

0800d784 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b082      	sub	sp, #8
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800d792:	4618      	mov	r0, r3
 800d794:	f7fb f8b1 	bl	80088fa <USBD_LL_DevDisconnected>
}
 800d798:	bf00      	nop
 800d79a:	3708      	adds	r7, #8
 800d79c:	46bd      	mov	sp, r7
 800d79e:	bd80      	pop	{r7, pc}

0800d7a0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b082      	sub	sp, #8
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	781b      	ldrb	r3, [r3, #0]
 800d7ac:	2b01      	cmp	r3, #1
 800d7ae:	d140      	bne.n	800d832 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800d7b0:	4a22      	ldr	r2, [pc, #136]	@ (800d83c <USBD_LL_Init+0x9c>)
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	f8c2 34dc 	str.w	r3, [r2, #1244]	@ 0x4dc
  pdev->pData = &hpcd_USB_OTG_HS;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	4a20      	ldr	r2, [pc, #128]	@ (800d83c <USBD_LL_Init+0x9c>)
 800d7bc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800d7c0:	4b1e      	ldr	r3, [pc, #120]	@ (800d83c <USBD_LL_Init+0x9c>)
 800d7c2:	4a1f      	ldr	r2, [pc, #124]	@ (800d840 <USBD_LL_Init+0xa0>)
 800d7c4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 8;
 800d7c6:	4b1d      	ldr	r3, [pc, #116]	@ (800d83c <USBD_LL_Init+0x9c>)
 800d7c8:	2208      	movs	r2, #8
 800d7ca:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 800d7cc:	4b1b      	ldr	r3, [pc, #108]	@ (800d83c <USBD_LL_Init+0x9c>)
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800d7d2:	4b1a      	ldr	r3, [pc, #104]	@ (800d83c <USBD_LL_Init+0x9c>)
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 800d7d8:	4b18      	ldr	r3, [pc, #96]	@ (800d83c <USBD_LL_Init+0x9c>)
 800d7da:	2201      	movs	r2, #1
 800d7dc:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800d7de:	4b17      	ldr	r3, [pc, #92]	@ (800d83c <USBD_LL_Init+0x9c>)
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800d7e4:	4b15      	ldr	r3, [pc, #84]	@ (800d83c <USBD_LL_Init+0x9c>)
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800d7ea:	4b14      	ldr	r3, [pc, #80]	@ (800d83c <USBD_LL_Init+0x9c>)
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800d7f0:	4b12      	ldr	r3, [pc, #72]	@ (800d83c <USBD_LL_Init+0x9c>)
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800d7f6:	4b11      	ldr	r3, [pc, #68]	@ (800d83c <USBD_LL_Init+0x9c>)
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800d7fc:	4b0f      	ldr	r3, [pc, #60]	@ (800d83c <USBD_LL_Init+0x9c>)
 800d7fe:	2200      	movs	r2, #0
 800d800:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800d802:	480e      	ldr	r0, [pc, #56]	@ (800d83c <USBD_LL_Init+0x9c>)
 800d804:	f7f4 feaf 	bl	8002566 <HAL_PCD_Init>
 800d808:	4603      	mov	r3, r0
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d001      	beq.n	800d812 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800d80e:	f7f4 f805 	bl	800181c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800d812:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800d816:	4809      	ldr	r0, [pc, #36]	@ (800d83c <USBD_LL_Init+0x9c>)
 800d818:	f7f6 f8fb 	bl	8003a12 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800d81c:	2280      	movs	r2, #128	@ 0x80
 800d81e:	2100      	movs	r1, #0
 800d820:	4806      	ldr	r0, [pc, #24]	@ (800d83c <USBD_LL_Init+0x9c>)
 800d822:	f7f6 f8af 	bl	8003984 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800d826:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 800d82a:	2101      	movs	r1, #1
 800d82c:	4803      	ldr	r0, [pc, #12]	@ (800d83c <USBD_LL_Init+0x9c>)
 800d82e:	f7f6 f8a9 	bl	8003984 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d832:	2300      	movs	r3, #0
}
 800d834:	4618      	mov	r0, r3
 800d836:	3708      	adds	r7, #8
 800d838:	46bd      	mov	sp, r7
 800d83a:	bd80      	pop	{r7, pc}
 800d83c:	2000f6f0 	.word	0x2000f6f0
 800d840:	40040000 	.word	0x40040000

0800d844 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b084      	sub	sp, #16
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d84c:	2300      	movs	r3, #0
 800d84e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d850:	2300      	movs	r3, #0
 800d852:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d85a:	4618      	mov	r0, r3
 800d85c:	f7f4 ff99 	bl	8002792 <HAL_PCD_Start>
 800d860:	4603      	mov	r3, r0
 800d862:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d864:	7bfb      	ldrb	r3, [r7, #15]
 800d866:	4618      	mov	r0, r3
 800d868:	f000 f97e 	bl	800db68 <USBD_Get_USB_Status>
 800d86c:	4603      	mov	r3, r0
 800d86e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d870:	7bbb      	ldrb	r3, [r7, #14]
}
 800d872:	4618      	mov	r0, r3
 800d874:	3710      	adds	r7, #16
 800d876:	46bd      	mov	sp, r7
 800d878:	bd80      	pop	{r7, pc}

0800d87a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d87a:	b580      	push	{r7, lr}
 800d87c:	b084      	sub	sp, #16
 800d87e:	af00      	add	r7, sp, #0
 800d880:	6078      	str	r0, [r7, #4]
 800d882:	4608      	mov	r0, r1
 800d884:	4611      	mov	r1, r2
 800d886:	461a      	mov	r2, r3
 800d888:	4603      	mov	r3, r0
 800d88a:	70fb      	strb	r3, [r7, #3]
 800d88c:	460b      	mov	r3, r1
 800d88e:	70bb      	strb	r3, [r7, #2]
 800d890:	4613      	mov	r3, r2
 800d892:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d894:	2300      	movs	r3, #0
 800d896:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d898:	2300      	movs	r3, #0
 800d89a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d8a2:	78bb      	ldrb	r3, [r7, #2]
 800d8a4:	883a      	ldrh	r2, [r7, #0]
 800d8a6:	78f9      	ldrb	r1, [r7, #3]
 800d8a8:	f7f5 fc87 	bl	80031ba <HAL_PCD_EP_Open>
 800d8ac:	4603      	mov	r3, r0
 800d8ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8b0:	7bfb      	ldrb	r3, [r7, #15]
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	f000 f958 	bl	800db68 <USBD_Get_USB_Status>
 800d8b8:	4603      	mov	r3, r0
 800d8ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d8bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8be:	4618      	mov	r0, r3
 800d8c0:	3710      	adds	r7, #16
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	bd80      	pop	{r7, pc}

0800d8c6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d8c6:	b580      	push	{r7, lr}
 800d8c8:	b084      	sub	sp, #16
 800d8ca:	af00      	add	r7, sp, #0
 800d8cc:	6078      	str	r0, [r7, #4]
 800d8ce:	460b      	mov	r3, r1
 800d8d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d8e0:	78fa      	ldrb	r2, [r7, #3]
 800d8e2:	4611      	mov	r1, r2
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	f7f5 fcd2 	bl	800328e <HAL_PCD_EP_Close>
 800d8ea:	4603      	mov	r3, r0
 800d8ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8ee:	7bfb      	ldrb	r3, [r7, #15]
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	f000 f939 	bl	800db68 <USBD_Get_USB_Status>
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d8fa:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	3710      	adds	r7, #16
 800d900:	46bd      	mov	sp, r7
 800d902:	bd80      	pop	{r7, pc}

0800d904 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b084      	sub	sp, #16
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
 800d90c:	460b      	mov	r3, r1
 800d90e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d910:	2300      	movs	r3, #0
 800d912:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d914:	2300      	movs	r3, #0
 800d916:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d91e:	78fa      	ldrb	r2, [r7, #3]
 800d920:	4611      	mov	r1, r2
 800d922:	4618      	mov	r0, r3
 800d924:	f7f5 fd8a 	bl	800343c <HAL_PCD_EP_SetStall>
 800d928:	4603      	mov	r3, r0
 800d92a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d92c:	7bfb      	ldrb	r3, [r7, #15]
 800d92e:	4618      	mov	r0, r3
 800d930:	f000 f91a 	bl	800db68 <USBD_Get_USB_Status>
 800d934:	4603      	mov	r3, r0
 800d936:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d938:	7bbb      	ldrb	r3, [r7, #14]
}
 800d93a:	4618      	mov	r0, r3
 800d93c:	3710      	adds	r7, #16
 800d93e:	46bd      	mov	sp, r7
 800d940:	bd80      	pop	{r7, pc}

0800d942 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d942:	b580      	push	{r7, lr}
 800d944:	b084      	sub	sp, #16
 800d946:	af00      	add	r7, sp, #0
 800d948:	6078      	str	r0, [r7, #4]
 800d94a:	460b      	mov	r3, r1
 800d94c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d94e:	2300      	movs	r3, #0
 800d950:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d952:	2300      	movs	r3, #0
 800d954:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d95c:	78fa      	ldrb	r2, [r7, #3]
 800d95e:	4611      	mov	r1, r2
 800d960:	4618      	mov	r0, r3
 800d962:	f7f5 fdce 	bl	8003502 <HAL_PCD_EP_ClrStall>
 800d966:	4603      	mov	r3, r0
 800d968:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d96a:	7bfb      	ldrb	r3, [r7, #15]
 800d96c:	4618      	mov	r0, r3
 800d96e:	f000 f8fb 	bl	800db68 <USBD_Get_USB_Status>
 800d972:	4603      	mov	r3, r0
 800d974:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d976:	7bbb      	ldrb	r3, [r7, #14]
}
 800d978:	4618      	mov	r0, r3
 800d97a:	3710      	adds	r7, #16
 800d97c:	46bd      	mov	sp, r7
 800d97e:	bd80      	pop	{r7, pc}

0800d980 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d980:	b480      	push	{r7}
 800d982:	b085      	sub	sp, #20
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
 800d988:	460b      	mov	r3, r1
 800d98a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d992:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d994:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	da0b      	bge.n	800d9b4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d99c:	78fb      	ldrb	r3, [r7, #3]
 800d99e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d9a2:	68f9      	ldr	r1, [r7, #12]
 800d9a4:	4613      	mov	r3, r2
 800d9a6:	00db      	lsls	r3, r3, #3
 800d9a8:	4413      	add	r3, r2
 800d9aa:	009b      	lsls	r3, r3, #2
 800d9ac:	440b      	add	r3, r1
 800d9ae:	3316      	adds	r3, #22
 800d9b0:	781b      	ldrb	r3, [r3, #0]
 800d9b2:	e00b      	b.n	800d9cc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d9b4:	78fb      	ldrb	r3, [r7, #3]
 800d9b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d9ba:	68f9      	ldr	r1, [r7, #12]
 800d9bc:	4613      	mov	r3, r2
 800d9be:	00db      	lsls	r3, r3, #3
 800d9c0:	4413      	add	r3, r2
 800d9c2:	009b      	lsls	r3, r3, #2
 800d9c4:	440b      	add	r3, r1
 800d9c6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800d9ca:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	3714      	adds	r7, #20
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d6:	4770      	bx	lr

0800d9d8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b084      	sub	sp, #16
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
 800d9e0:	460b      	mov	r3, r1
 800d9e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9e8:	2300      	movs	r3, #0
 800d9ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d9f2:	78fa      	ldrb	r2, [r7, #3]
 800d9f4:	4611      	mov	r1, r2
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	f7f5 fbbb 	bl	8003172 <HAL_PCD_SetAddress>
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da00:	7bfb      	ldrb	r3, [r7, #15]
 800da02:	4618      	mov	r0, r3
 800da04:	f000 f8b0 	bl	800db68 <USBD_Get_USB_Status>
 800da08:	4603      	mov	r3, r0
 800da0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da0c:	7bbb      	ldrb	r3, [r7, #14]
}
 800da0e:	4618      	mov	r0, r3
 800da10:	3710      	adds	r7, #16
 800da12:	46bd      	mov	sp, r7
 800da14:	bd80      	pop	{r7, pc}

0800da16 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800da16:	b580      	push	{r7, lr}
 800da18:	b086      	sub	sp, #24
 800da1a:	af00      	add	r7, sp, #0
 800da1c:	60f8      	str	r0, [r7, #12]
 800da1e:	607a      	str	r2, [r7, #4]
 800da20:	603b      	str	r3, [r7, #0]
 800da22:	460b      	mov	r3, r1
 800da24:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da26:	2300      	movs	r3, #0
 800da28:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da2a:	2300      	movs	r3, #0
 800da2c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800da34:	7af9      	ldrb	r1, [r7, #11]
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	687a      	ldr	r2, [r7, #4]
 800da3a:	f7f5 fcc5 	bl	80033c8 <HAL_PCD_EP_Transmit>
 800da3e:	4603      	mov	r3, r0
 800da40:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da42:	7dfb      	ldrb	r3, [r7, #23]
 800da44:	4618      	mov	r0, r3
 800da46:	f000 f88f 	bl	800db68 <USBD_Get_USB_Status>
 800da4a:	4603      	mov	r3, r0
 800da4c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800da4e:	7dbb      	ldrb	r3, [r7, #22]
}
 800da50:	4618      	mov	r0, r3
 800da52:	3718      	adds	r7, #24
 800da54:	46bd      	mov	sp, r7
 800da56:	bd80      	pop	{r7, pc}

0800da58 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800da58:	b580      	push	{r7, lr}
 800da5a:	b086      	sub	sp, #24
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	60f8      	str	r0, [r7, #12]
 800da60:	607a      	str	r2, [r7, #4]
 800da62:	603b      	str	r3, [r7, #0]
 800da64:	460b      	mov	r3, r1
 800da66:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da68:	2300      	movs	r3, #0
 800da6a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da6c:	2300      	movs	r3, #0
 800da6e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800da76:	7af9      	ldrb	r1, [r7, #11]
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	687a      	ldr	r2, [r7, #4]
 800da7c:	f7f5 fc51 	bl	8003322 <HAL_PCD_EP_Receive>
 800da80:	4603      	mov	r3, r0
 800da82:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da84:	7dfb      	ldrb	r3, [r7, #23]
 800da86:	4618      	mov	r0, r3
 800da88:	f000 f86e 	bl	800db68 <USBD_Get_USB_Status>
 800da8c:	4603      	mov	r3, r0
 800da8e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800da90:	7dbb      	ldrb	r3, [r7, #22]
}
 800da92:	4618      	mov	r0, r3
 800da94:	3718      	adds	r7, #24
 800da96:	46bd      	mov	sp, r7
 800da98:	bd80      	pop	{r7, pc}

0800da9a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da9a:	b580      	push	{r7, lr}
 800da9c:	b082      	sub	sp, #8
 800da9e:	af00      	add	r7, sp, #0
 800daa0:	6078      	str	r0, [r7, #4]
 800daa2:	460b      	mov	r3, r1
 800daa4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800daac:	78fa      	ldrb	r2, [r7, #3]
 800daae:	4611      	mov	r1, r2
 800dab0:	4618      	mov	r0, r3
 800dab2:	f7f5 fc71 	bl	8003398 <HAL_PCD_EP_GetRxCount>
 800dab6:	4603      	mov	r3, r0
}
 800dab8:	4618      	mov	r0, r3
 800daba:	3708      	adds	r7, #8
 800dabc:	46bd      	mov	sp, r7
 800dabe:	bd80      	pop	{r7, pc}

0800dac0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b082      	sub	sp, #8
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
 800dac8:	460b      	mov	r3, r1
 800daca:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800dacc:	78fb      	ldrb	r3, [r7, #3]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d002      	beq.n	800dad8 <HAL_PCDEx_LPM_Callback+0x18>
 800dad2:	2b01      	cmp	r3, #1
 800dad4:	d01f      	beq.n	800db16 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800dad6:	e03b      	b.n	800db50 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	7adb      	ldrb	r3, [r3, #11]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d007      	beq.n	800daf0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800dae0:	f000 f83c 	bl	800db5c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dae4:	4b1c      	ldr	r3, [pc, #112]	@ (800db58 <HAL_PCDEx_LPM_Callback+0x98>)
 800dae6:	691b      	ldr	r3, [r3, #16]
 800dae8:	4a1b      	ldr	r2, [pc, #108]	@ (800db58 <HAL_PCDEx_LPM_Callback+0x98>)
 800daea:	f023 0306 	bic.w	r3, r3, #6
 800daee:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	687a      	ldr	r2, [r7, #4]
 800dafc:	6812      	ldr	r2, [r2, #0]
 800dafe:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800db02:	f023 0301 	bic.w	r3, r3, #1
 800db06:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800db0e:	4618      	mov	r0, r3
 800db10:	f7fa fe4c 	bl	80087ac <USBD_LL_Resume>
    break;
 800db14:	e01c      	b.n	800db50 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	687a      	ldr	r2, [r7, #4]
 800db22:	6812      	ldr	r2, [r2, #0]
 800db24:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800db28:	f043 0301 	orr.w	r3, r3, #1
 800db2c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	f8d3 34dc 	ldr.w	r3, [r3, #1244]	@ 0x4dc
 800db34:	4618      	mov	r0, r3
 800db36:	f7fa fe1d 	bl	8008774 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	7adb      	ldrb	r3, [r3, #11]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d005      	beq.n	800db4e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800db42:	4b05      	ldr	r3, [pc, #20]	@ (800db58 <HAL_PCDEx_LPM_Callback+0x98>)
 800db44:	691b      	ldr	r3, [r3, #16]
 800db46:	4a04      	ldr	r2, [pc, #16]	@ (800db58 <HAL_PCDEx_LPM_Callback+0x98>)
 800db48:	f043 0306 	orr.w	r3, r3, #6
 800db4c:	6113      	str	r3, [r2, #16]
    break;
 800db4e:	bf00      	nop
}
 800db50:	bf00      	nop
 800db52:	3708      	adds	r7, #8
 800db54:	46bd      	mov	sp, r7
 800db56:	bd80      	pop	{r7, pc}
 800db58:	e000ed00 	.word	0xe000ed00

0800db5c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800db60:	f7f3 fb72 	bl	8001248 <SystemClock_Config>
}
 800db64:	bf00      	nop
 800db66:	bd80      	pop	{r7, pc}

0800db68 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800db68:	b480      	push	{r7}
 800db6a:	b085      	sub	sp, #20
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	4603      	mov	r3, r0
 800db70:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db72:	2300      	movs	r3, #0
 800db74:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800db76:	79fb      	ldrb	r3, [r7, #7]
 800db78:	2b03      	cmp	r3, #3
 800db7a:	d817      	bhi.n	800dbac <USBD_Get_USB_Status+0x44>
 800db7c:	a201      	add	r2, pc, #4	@ (adr r2, 800db84 <USBD_Get_USB_Status+0x1c>)
 800db7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db82:	bf00      	nop
 800db84:	0800db95 	.word	0x0800db95
 800db88:	0800db9b 	.word	0x0800db9b
 800db8c:	0800dba1 	.word	0x0800dba1
 800db90:	0800dba7 	.word	0x0800dba7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800db94:	2300      	movs	r3, #0
 800db96:	73fb      	strb	r3, [r7, #15]
    break;
 800db98:	e00b      	b.n	800dbb2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800db9a:	2303      	movs	r3, #3
 800db9c:	73fb      	strb	r3, [r7, #15]
    break;
 800db9e:	e008      	b.n	800dbb2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dba0:	2301      	movs	r3, #1
 800dba2:	73fb      	strb	r3, [r7, #15]
    break;
 800dba4:	e005      	b.n	800dbb2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dba6:	2303      	movs	r3, #3
 800dba8:	73fb      	strb	r3, [r7, #15]
    break;
 800dbaa:	e002      	b.n	800dbb2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800dbac:	2303      	movs	r3, #3
 800dbae:	73fb      	strb	r3, [r7, #15]
    break;
 800dbb0:	bf00      	nop
  }
  return usb_status;
 800dbb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	3714      	adds	r7, #20
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbbe:	4770      	bx	lr

0800dbc0 <malloc>:
 800dbc0:	4b02      	ldr	r3, [pc, #8]	@ (800dbcc <malloc+0xc>)
 800dbc2:	4601      	mov	r1, r0
 800dbc4:	6818      	ldr	r0, [r3, #0]
 800dbc6:	f000 b82d 	b.w	800dc24 <_malloc_r>
 800dbca:	bf00      	nop
 800dbcc:	2000011c 	.word	0x2000011c

0800dbd0 <free>:
 800dbd0:	4b02      	ldr	r3, [pc, #8]	@ (800dbdc <free+0xc>)
 800dbd2:	4601      	mov	r1, r0
 800dbd4:	6818      	ldr	r0, [r3, #0]
 800dbd6:	f001 bd63 	b.w	800f6a0 <_free_r>
 800dbda:	bf00      	nop
 800dbdc:	2000011c 	.word	0x2000011c

0800dbe0 <sbrk_aligned>:
 800dbe0:	b570      	push	{r4, r5, r6, lr}
 800dbe2:	4e0f      	ldr	r6, [pc, #60]	@ (800dc20 <sbrk_aligned+0x40>)
 800dbe4:	460c      	mov	r4, r1
 800dbe6:	6831      	ldr	r1, [r6, #0]
 800dbe8:	4605      	mov	r5, r0
 800dbea:	b911      	cbnz	r1, 800dbf2 <sbrk_aligned+0x12>
 800dbec:	f000 fea0 	bl	800e930 <_sbrk_r>
 800dbf0:	6030      	str	r0, [r6, #0]
 800dbf2:	4621      	mov	r1, r4
 800dbf4:	4628      	mov	r0, r5
 800dbf6:	f000 fe9b 	bl	800e930 <_sbrk_r>
 800dbfa:	1c43      	adds	r3, r0, #1
 800dbfc:	d103      	bne.n	800dc06 <sbrk_aligned+0x26>
 800dbfe:	f04f 34ff 	mov.w	r4, #4294967295
 800dc02:	4620      	mov	r0, r4
 800dc04:	bd70      	pop	{r4, r5, r6, pc}
 800dc06:	1cc4      	adds	r4, r0, #3
 800dc08:	f024 0403 	bic.w	r4, r4, #3
 800dc0c:	42a0      	cmp	r0, r4
 800dc0e:	d0f8      	beq.n	800dc02 <sbrk_aligned+0x22>
 800dc10:	1a21      	subs	r1, r4, r0
 800dc12:	4628      	mov	r0, r5
 800dc14:	f000 fe8c 	bl	800e930 <_sbrk_r>
 800dc18:	3001      	adds	r0, #1
 800dc1a:	d1f2      	bne.n	800dc02 <sbrk_aligned+0x22>
 800dc1c:	e7ef      	b.n	800dbfe <sbrk_aligned+0x1e>
 800dc1e:	bf00      	nop
 800dc20:	2000fbd0 	.word	0x2000fbd0

0800dc24 <_malloc_r>:
 800dc24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc28:	1ccd      	adds	r5, r1, #3
 800dc2a:	f025 0503 	bic.w	r5, r5, #3
 800dc2e:	3508      	adds	r5, #8
 800dc30:	2d0c      	cmp	r5, #12
 800dc32:	bf38      	it	cc
 800dc34:	250c      	movcc	r5, #12
 800dc36:	2d00      	cmp	r5, #0
 800dc38:	4606      	mov	r6, r0
 800dc3a:	db01      	blt.n	800dc40 <_malloc_r+0x1c>
 800dc3c:	42a9      	cmp	r1, r5
 800dc3e:	d904      	bls.n	800dc4a <_malloc_r+0x26>
 800dc40:	230c      	movs	r3, #12
 800dc42:	6033      	str	r3, [r6, #0]
 800dc44:	2000      	movs	r0, #0
 800dc46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dd20 <_malloc_r+0xfc>
 800dc4e:	f000 f869 	bl	800dd24 <__malloc_lock>
 800dc52:	f8d8 3000 	ldr.w	r3, [r8]
 800dc56:	461c      	mov	r4, r3
 800dc58:	bb44      	cbnz	r4, 800dcac <_malloc_r+0x88>
 800dc5a:	4629      	mov	r1, r5
 800dc5c:	4630      	mov	r0, r6
 800dc5e:	f7ff ffbf 	bl	800dbe0 <sbrk_aligned>
 800dc62:	1c43      	adds	r3, r0, #1
 800dc64:	4604      	mov	r4, r0
 800dc66:	d158      	bne.n	800dd1a <_malloc_r+0xf6>
 800dc68:	f8d8 4000 	ldr.w	r4, [r8]
 800dc6c:	4627      	mov	r7, r4
 800dc6e:	2f00      	cmp	r7, #0
 800dc70:	d143      	bne.n	800dcfa <_malloc_r+0xd6>
 800dc72:	2c00      	cmp	r4, #0
 800dc74:	d04b      	beq.n	800dd0e <_malloc_r+0xea>
 800dc76:	6823      	ldr	r3, [r4, #0]
 800dc78:	4639      	mov	r1, r7
 800dc7a:	4630      	mov	r0, r6
 800dc7c:	eb04 0903 	add.w	r9, r4, r3
 800dc80:	f000 fe56 	bl	800e930 <_sbrk_r>
 800dc84:	4581      	cmp	r9, r0
 800dc86:	d142      	bne.n	800dd0e <_malloc_r+0xea>
 800dc88:	6821      	ldr	r1, [r4, #0]
 800dc8a:	1a6d      	subs	r5, r5, r1
 800dc8c:	4629      	mov	r1, r5
 800dc8e:	4630      	mov	r0, r6
 800dc90:	f7ff ffa6 	bl	800dbe0 <sbrk_aligned>
 800dc94:	3001      	adds	r0, #1
 800dc96:	d03a      	beq.n	800dd0e <_malloc_r+0xea>
 800dc98:	6823      	ldr	r3, [r4, #0]
 800dc9a:	442b      	add	r3, r5
 800dc9c:	6023      	str	r3, [r4, #0]
 800dc9e:	f8d8 3000 	ldr.w	r3, [r8]
 800dca2:	685a      	ldr	r2, [r3, #4]
 800dca4:	bb62      	cbnz	r2, 800dd00 <_malloc_r+0xdc>
 800dca6:	f8c8 7000 	str.w	r7, [r8]
 800dcaa:	e00f      	b.n	800dccc <_malloc_r+0xa8>
 800dcac:	6822      	ldr	r2, [r4, #0]
 800dcae:	1b52      	subs	r2, r2, r5
 800dcb0:	d420      	bmi.n	800dcf4 <_malloc_r+0xd0>
 800dcb2:	2a0b      	cmp	r2, #11
 800dcb4:	d917      	bls.n	800dce6 <_malloc_r+0xc2>
 800dcb6:	1961      	adds	r1, r4, r5
 800dcb8:	42a3      	cmp	r3, r4
 800dcba:	6025      	str	r5, [r4, #0]
 800dcbc:	bf18      	it	ne
 800dcbe:	6059      	strne	r1, [r3, #4]
 800dcc0:	6863      	ldr	r3, [r4, #4]
 800dcc2:	bf08      	it	eq
 800dcc4:	f8c8 1000 	streq.w	r1, [r8]
 800dcc8:	5162      	str	r2, [r4, r5]
 800dcca:	604b      	str	r3, [r1, #4]
 800dccc:	4630      	mov	r0, r6
 800dcce:	f000 f82f 	bl	800dd30 <__malloc_unlock>
 800dcd2:	f104 000b 	add.w	r0, r4, #11
 800dcd6:	1d23      	adds	r3, r4, #4
 800dcd8:	f020 0007 	bic.w	r0, r0, #7
 800dcdc:	1ac2      	subs	r2, r0, r3
 800dcde:	bf1c      	itt	ne
 800dce0:	1a1b      	subne	r3, r3, r0
 800dce2:	50a3      	strne	r3, [r4, r2]
 800dce4:	e7af      	b.n	800dc46 <_malloc_r+0x22>
 800dce6:	6862      	ldr	r2, [r4, #4]
 800dce8:	42a3      	cmp	r3, r4
 800dcea:	bf0c      	ite	eq
 800dcec:	f8c8 2000 	streq.w	r2, [r8]
 800dcf0:	605a      	strne	r2, [r3, #4]
 800dcf2:	e7eb      	b.n	800dccc <_malloc_r+0xa8>
 800dcf4:	4623      	mov	r3, r4
 800dcf6:	6864      	ldr	r4, [r4, #4]
 800dcf8:	e7ae      	b.n	800dc58 <_malloc_r+0x34>
 800dcfa:	463c      	mov	r4, r7
 800dcfc:	687f      	ldr	r7, [r7, #4]
 800dcfe:	e7b6      	b.n	800dc6e <_malloc_r+0x4a>
 800dd00:	461a      	mov	r2, r3
 800dd02:	685b      	ldr	r3, [r3, #4]
 800dd04:	42a3      	cmp	r3, r4
 800dd06:	d1fb      	bne.n	800dd00 <_malloc_r+0xdc>
 800dd08:	2300      	movs	r3, #0
 800dd0a:	6053      	str	r3, [r2, #4]
 800dd0c:	e7de      	b.n	800dccc <_malloc_r+0xa8>
 800dd0e:	230c      	movs	r3, #12
 800dd10:	6033      	str	r3, [r6, #0]
 800dd12:	4630      	mov	r0, r6
 800dd14:	f000 f80c 	bl	800dd30 <__malloc_unlock>
 800dd18:	e794      	b.n	800dc44 <_malloc_r+0x20>
 800dd1a:	6005      	str	r5, [r0, #0]
 800dd1c:	e7d6      	b.n	800dccc <_malloc_r+0xa8>
 800dd1e:	bf00      	nop
 800dd20:	2000fbd4 	.word	0x2000fbd4

0800dd24 <__malloc_lock>:
 800dd24:	4801      	ldr	r0, [pc, #4]	@ (800dd2c <__malloc_lock+0x8>)
 800dd26:	f000 be50 	b.w	800e9ca <__retarget_lock_acquire_recursive>
 800dd2a:	bf00      	nop
 800dd2c:	2000fd18 	.word	0x2000fd18

0800dd30 <__malloc_unlock>:
 800dd30:	4801      	ldr	r0, [pc, #4]	@ (800dd38 <__malloc_unlock+0x8>)
 800dd32:	f000 be4b 	b.w	800e9cc <__retarget_lock_release_recursive>
 800dd36:	bf00      	nop
 800dd38:	2000fd18 	.word	0x2000fd18

0800dd3c <__cvt>:
 800dd3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dd40:	ec57 6b10 	vmov	r6, r7, d0
 800dd44:	2f00      	cmp	r7, #0
 800dd46:	460c      	mov	r4, r1
 800dd48:	4619      	mov	r1, r3
 800dd4a:	463b      	mov	r3, r7
 800dd4c:	bfbb      	ittet	lt
 800dd4e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800dd52:	461f      	movlt	r7, r3
 800dd54:	2300      	movge	r3, #0
 800dd56:	232d      	movlt	r3, #45	@ 0x2d
 800dd58:	700b      	strb	r3, [r1, #0]
 800dd5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dd5c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800dd60:	4691      	mov	r9, r2
 800dd62:	f023 0820 	bic.w	r8, r3, #32
 800dd66:	bfbc      	itt	lt
 800dd68:	4632      	movlt	r2, r6
 800dd6a:	4616      	movlt	r6, r2
 800dd6c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800dd70:	d005      	beq.n	800dd7e <__cvt+0x42>
 800dd72:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800dd76:	d100      	bne.n	800dd7a <__cvt+0x3e>
 800dd78:	3401      	adds	r4, #1
 800dd7a:	2102      	movs	r1, #2
 800dd7c:	e000      	b.n	800dd80 <__cvt+0x44>
 800dd7e:	2103      	movs	r1, #3
 800dd80:	ab03      	add	r3, sp, #12
 800dd82:	9301      	str	r3, [sp, #4]
 800dd84:	ab02      	add	r3, sp, #8
 800dd86:	9300      	str	r3, [sp, #0]
 800dd88:	ec47 6b10 	vmov	d0, r6, r7
 800dd8c:	4653      	mov	r3, sl
 800dd8e:	4622      	mov	r2, r4
 800dd90:	f000 feb6 	bl	800eb00 <_dtoa_r>
 800dd94:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800dd98:	4605      	mov	r5, r0
 800dd9a:	d119      	bne.n	800ddd0 <__cvt+0x94>
 800dd9c:	f019 0f01 	tst.w	r9, #1
 800dda0:	d00e      	beq.n	800ddc0 <__cvt+0x84>
 800dda2:	eb00 0904 	add.w	r9, r0, r4
 800dda6:	2200      	movs	r2, #0
 800dda8:	2300      	movs	r3, #0
 800ddaa:	4630      	mov	r0, r6
 800ddac:	4639      	mov	r1, r7
 800ddae:	f7f2 febb 	bl	8000b28 <__aeabi_dcmpeq>
 800ddb2:	b108      	cbz	r0, 800ddb8 <__cvt+0x7c>
 800ddb4:	f8cd 900c 	str.w	r9, [sp, #12]
 800ddb8:	2230      	movs	r2, #48	@ 0x30
 800ddba:	9b03      	ldr	r3, [sp, #12]
 800ddbc:	454b      	cmp	r3, r9
 800ddbe:	d31e      	bcc.n	800ddfe <__cvt+0xc2>
 800ddc0:	9b03      	ldr	r3, [sp, #12]
 800ddc2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ddc4:	1b5b      	subs	r3, r3, r5
 800ddc6:	4628      	mov	r0, r5
 800ddc8:	6013      	str	r3, [r2, #0]
 800ddca:	b004      	add	sp, #16
 800ddcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddd0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ddd4:	eb00 0904 	add.w	r9, r0, r4
 800ddd8:	d1e5      	bne.n	800dda6 <__cvt+0x6a>
 800ddda:	7803      	ldrb	r3, [r0, #0]
 800dddc:	2b30      	cmp	r3, #48	@ 0x30
 800ddde:	d10a      	bne.n	800ddf6 <__cvt+0xba>
 800dde0:	2200      	movs	r2, #0
 800dde2:	2300      	movs	r3, #0
 800dde4:	4630      	mov	r0, r6
 800dde6:	4639      	mov	r1, r7
 800dde8:	f7f2 fe9e 	bl	8000b28 <__aeabi_dcmpeq>
 800ddec:	b918      	cbnz	r0, 800ddf6 <__cvt+0xba>
 800ddee:	f1c4 0401 	rsb	r4, r4, #1
 800ddf2:	f8ca 4000 	str.w	r4, [sl]
 800ddf6:	f8da 3000 	ldr.w	r3, [sl]
 800ddfa:	4499      	add	r9, r3
 800ddfc:	e7d3      	b.n	800dda6 <__cvt+0x6a>
 800ddfe:	1c59      	adds	r1, r3, #1
 800de00:	9103      	str	r1, [sp, #12]
 800de02:	701a      	strb	r2, [r3, #0]
 800de04:	e7d9      	b.n	800ddba <__cvt+0x7e>

0800de06 <__exponent>:
 800de06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800de08:	2900      	cmp	r1, #0
 800de0a:	bfba      	itte	lt
 800de0c:	4249      	neglt	r1, r1
 800de0e:	232d      	movlt	r3, #45	@ 0x2d
 800de10:	232b      	movge	r3, #43	@ 0x2b
 800de12:	2909      	cmp	r1, #9
 800de14:	7002      	strb	r2, [r0, #0]
 800de16:	7043      	strb	r3, [r0, #1]
 800de18:	dd29      	ble.n	800de6e <__exponent+0x68>
 800de1a:	f10d 0307 	add.w	r3, sp, #7
 800de1e:	461d      	mov	r5, r3
 800de20:	270a      	movs	r7, #10
 800de22:	461a      	mov	r2, r3
 800de24:	fbb1 f6f7 	udiv	r6, r1, r7
 800de28:	fb07 1416 	mls	r4, r7, r6, r1
 800de2c:	3430      	adds	r4, #48	@ 0x30
 800de2e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800de32:	460c      	mov	r4, r1
 800de34:	2c63      	cmp	r4, #99	@ 0x63
 800de36:	f103 33ff 	add.w	r3, r3, #4294967295
 800de3a:	4631      	mov	r1, r6
 800de3c:	dcf1      	bgt.n	800de22 <__exponent+0x1c>
 800de3e:	3130      	adds	r1, #48	@ 0x30
 800de40:	1e94      	subs	r4, r2, #2
 800de42:	f803 1c01 	strb.w	r1, [r3, #-1]
 800de46:	1c41      	adds	r1, r0, #1
 800de48:	4623      	mov	r3, r4
 800de4a:	42ab      	cmp	r3, r5
 800de4c:	d30a      	bcc.n	800de64 <__exponent+0x5e>
 800de4e:	f10d 0309 	add.w	r3, sp, #9
 800de52:	1a9b      	subs	r3, r3, r2
 800de54:	42ac      	cmp	r4, r5
 800de56:	bf88      	it	hi
 800de58:	2300      	movhi	r3, #0
 800de5a:	3302      	adds	r3, #2
 800de5c:	4403      	add	r3, r0
 800de5e:	1a18      	subs	r0, r3, r0
 800de60:	b003      	add	sp, #12
 800de62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800de64:	f813 6b01 	ldrb.w	r6, [r3], #1
 800de68:	f801 6f01 	strb.w	r6, [r1, #1]!
 800de6c:	e7ed      	b.n	800de4a <__exponent+0x44>
 800de6e:	2330      	movs	r3, #48	@ 0x30
 800de70:	3130      	adds	r1, #48	@ 0x30
 800de72:	7083      	strb	r3, [r0, #2]
 800de74:	70c1      	strb	r1, [r0, #3]
 800de76:	1d03      	adds	r3, r0, #4
 800de78:	e7f1      	b.n	800de5e <__exponent+0x58>
	...

0800de7c <_printf_float>:
 800de7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de80:	b08d      	sub	sp, #52	@ 0x34
 800de82:	460c      	mov	r4, r1
 800de84:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800de88:	4616      	mov	r6, r2
 800de8a:	461f      	mov	r7, r3
 800de8c:	4605      	mov	r5, r0
 800de8e:	f000 fcb9 	bl	800e804 <_localeconv_r>
 800de92:	6803      	ldr	r3, [r0, #0]
 800de94:	9304      	str	r3, [sp, #16]
 800de96:	4618      	mov	r0, r3
 800de98:	f7f2 fa1a 	bl	80002d0 <strlen>
 800de9c:	2300      	movs	r3, #0
 800de9e:	930a      	str	r3, [sp, #40]	@ 0x28
 800dea0:	f8d8 3000 	ldr.w	r3, [r8]
 800dea4:	9005      	str	r0, [sp, #20]
 800dea6:	3307      	adds	r3, #7
 800dea8:	f023 0307 	bic.w	r3, r3, #7
 800deac:	f103 0208 	add.w	r2, r3, #8
 800deb0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800deb4:	f8d4 b000 	ldr.w	fp, [r4]
 800deb8:	f8c8 2000 	str.w	r2, [r8]
 800debc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dec0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800dec4:	9307      	str	r3, [sp, #28]
 800dec6:	f8cd 8018 	str.w	r8, [sp, #24]
 800deca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800dece:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ded2:	4b9c      	ldr	r3, [pc, #624]	@ (800e144 <_printf_float+0x2c8>)
 800ded4:	f04f 32ff 	mov.w	r2, #4294967295
 800ded8:	f7f2 fe58 	bl	8000b8c <__aeabi_dcmpun>
 800dedc:	bb70      	cbnz	r0, 800df3c <_printf_float+0xc0>
 800dede:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dee2:	4b98      	ldr	r3, [pc, #608]	@ (800e144 <_printf_float+0x2c8>)
 800dee4:	f04f 32ff 	mov.w	r2, #4294967295
 800dee8:	f7f2 fe32 	bl	8000b50 <__aeabi_dcmple>
 800deec:	bb30      	cbnz	r0, 800df3c <_printf_float+0xc0>
 800deee:	2200      	movs	r2, #0
 800def0:	2300      	movs	r3, #0
 800def2:	4640      	mov	r0, r8
 800def4:	4649      	mov	r1, r9
 800def6:	f7f2 fe21 	bl	8000b3c <__aeabi_dcmplt>
 800defa:	b110      	cbz	r0, 800df02 <_printf_float+0x86>
 800defc:	232d      	movs	r3, #45	@ 0x2d
 800defe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800df02:	4a91      	ldr	r2, [pc, #580]	@ (800e148 <_printf_float+0x2cc>)
 800df04:	4b91      	ldr	r3, [pc, #580]	@ (800e14c <_printf_float+0x2d0>)
 800df06:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800df0a:	bf8c      	ite	hi
 800df0c:	4690      	movhi	r8, r2
 800df0e:	4698      	movls	r8, r3
 800df10:	2303      	movs	r3, #3
 800df12:	6123      	str	r3, [r4, #16]
 800df14:	f02b 0304 	bic.w	r3, fp, #4
 800df18:	6023      	str	r3, [r4, #0]
 800df1a:	f04f 0900 	mov.w	r9, #0
 800df1e:	9700      	str	r7, [sp, #0]
 800df20:	4633      	mov	r3, r6
 800df22:	aa0b      	add	r2, sp, #44	@ 0x2c
 800df24:	4621      	mov	r1, r4
 800df26:	4628      	mov	r0, r5
 800df28:	f000 f9d2 	bl	800e2d0 <_printf_common>
 800df2c:	3001      	adds	r0, #1
 800df2e:	f040 808d 	bne.w	800e04c <_printf_float+0x1d0>
 800df32:	f04f 30ff 	mov.w	r0, #4294967295
 800df36:	b00d      	add	sp, #52	@ 0x34
 800df38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df3c:	4642      	mov	r2, r8
 800df3e:	464b      	mov	r3, r9
 800df40:	4640      	mov	r0, r8
 800df42:	4649      	mov	r1, r9
 800df44:	f7f2 fe22 	bl	8000b8c <__aeabi_dcmpun>
 800df48:	b140      	cbz	r0, 800df5c <_printf_float+0xe0>
 800df4a:	464b      	mov	r3, r9
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	bfbc      	itt	lt
 800df50:	232d      	movlt	r3, #45	@ 0x2d
 800df52:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800df56:	4a7e      	ldr	r2, [pc, #504]	@ (800e150 <_printf_float+0x2d4>)
 800df58:	4b7e      	ldr	r3, [pc, #504]	@ (800e154 <_printf_float+0x2d8>)
 800df5a:	e7d4      	b.n	800df06 <_printf_float+0x8a>
 800df5c:	6863      	ldr	r3, [r4, #4]
 800df5e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800df62:	9206      	str	r2, [sp, #24]
 800df64:	1c5a      	adds	r2, r3, #1
 800df66:	d13b      	bne.n	800dfe0 <_printf_float+0x164>
 800df68:	2306      	movs	r3, #6
 800df6a:	6063      	str	r3, [r4, #4]
 800df6c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800df70:	2300      	movs	r3, #0
 800df72:	6022      	str	r2, [r4, #0]
 800df74:	9303      	str	r3, [sp, #12]
 800df76:	ab0a      	add	r3, sp, #40	@ 0x28
 800df78:	e9cd a301 	strd	sl, r3, [sp, #4]
 800df7c:	ab09      	add	r3, sp, #36	@ 0x24
 800df7e:	9300      	str	r3, [sp, #0]
 800df80:	6861      	ldr	r1, [r4, #4]
 800df82:	ec49 8b10 	vmov	d0, r8, r9
 800df86:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800df8a:	4628      	mov	r0, r5
 800df8c:	f7ff fed6 	bl	800dd3c <__cvt>
 800df90:	9b06      	ldr	r3, [sp, #24]
 800df92:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800df94:	2b47      	cmp	r3, #71	@ 0x47
 800df96:	4680      	mov	r8, r0
 800df98:	d129      	bne.n	800dfee <_printf_float+0x172>
 800df9a:	1cc8      	adds	r0, r1, #3
 800df9c:	db02      	blt.n	800dfa4 <_printf_float+0x128>
 800df9e:	6863      	ldr	r3, [r4, #4]
 800dfa0:	4299      	cmp	r1, r3
 800dfa2:	dd41      	ble.n	800e028 <_printf_float+0x1ac>
 800dfa4:	f1aa 0a02 	sub.w	sl, sl, #2
 800dfa8:	fa5f fa8a 	uxtb.w	sl, sl
 800dfac:	3901      	subs	r1, #1
 800dfae:	4652      	mov	r2, sl
 800dfb0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800dfb4:	9109      	str	r1, [sp, #36]	@ 0x24
 800dfb6:	f7ff ff26 	bl	800de06 <__exponent>
 800dfba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dfbc:	1813      	adds	r3, r2, r0
 800dfbe:	2a01      	cmp	r2, #1
 800dfc0:	4681      	mov	r9, r0
 800dfc2:	6123      	str	r3, [r4, #16]
 800dfc4:	dc02      	bgt.n	800dfcc <_printf_float+0x150>
 800dfc6:	6822      	ldr	r2, [r4, #0]
 800dfc8:	07d2      	lsls	r2, r2, #31
 800dfca:	d501      	bpl.n	800dfd0 <_printf_float+0x154>
 800dfcc:	3301      	adds	r3, #1
 800dfce:	6123      	str	r3, [r4, #16]
 800dfd0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d0a2      	beq.n	800df1e <_printf_float+0xa2>
 800dfd8:	232d      	movs	r3, #45	@ 0x2d
 800dfda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dfde:	e79e      	b.n	800df1e <_printf_float+0xa2>
 800dfe0:	9a06      	ldr	r2, [sp, #24]
 800dfe2:	2a47      	cmp	r2, #71	@ 0x47
 800dfe4:	d1c2      	bne.n	800df6c <_printf_float+0xf0>
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d1c0      	bne.n	800df6c <_printf_float+0xf0>
 800dfea:	2301      	movs	r3, #1
 800dfec:	e7bd      	b.n	800df6a <_printf_float+0xee>
 800dfee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800dff2:	d9db      	bls.n	800dfac <_printf_float+0x130>
 800dff4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800dff8:	d118      	bne.n	800e02c <_printf_float+0x1b0>
 800dffa:	2900      	cmp	r1, #0
 800dffc:	6863      	ldr	r3, [r4, #4]
 800dffe:	dd0b      	ble.n	800e018 <_printf_float+0x19c>
 800e000:	6121      	str	r1, [r4, #16]
 800e002:	b913      	cbnz	r3, 800e00a <_printf_float+0x18e>
 800e004:	6822      	ldr	r2, [r4, #0]
 800e006:	07d0      	lsls	r0, r2, #31
 800e008:	d502      	bpl.n	800e010 <_printf_float+0x194>
 800e00a:	3301      	adds	r3, #1
 800e00c:	440b      	add	r3, r1
 800e00e:	6123      	str	r3, [r4, #16]
 800e010:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e012:	f04f 0900 	mov.w	r9, #0
 800e016:	e7db      	b.n	800dfd0 <_printf_float+0x154>
 800e018:	b913      	cbnz	r3, 800e020 <_printf_float+0x1a4>
 800e01a:	6822      	ldr	r2, [r4, #0]
 800e01c:	07d2      	lsls	r2, r2, #31
 800e01e:	d501      	bpl.n	800e024 <_printf_float+0x1a8>
 800e020:	3302      	adds	r3, #2
 800e022:	e7f4      	b.n	800e00e <_printf_float+0x192>
 800e024:	2301      	movs	r3, #1
 800e026:	e7f2      	b.n	800e00e <_printf_float+0x192>
 800e028:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e02c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e02e:	4299      	cmp	r1, r3
 800e030:	db05      	blt.n	800e03e <_printf_float+0x1c2>
 800e032:	6823      	ldr	r3, [r4, #0]
 800e034:	6121      	str	r1, [r4, #16]
 800e036:	07d8      	lsls	r0, r3, #31
 800e038:	d5ea      	bpl.n	800e010 <_printf_float+0x194>
 800e03a:	1c4b      	adds	r3, r1, #1
 800e03c:	e7e7      	b.n	800e00e <_printf_float+0x192>
 800e03e:	2900      	cmp	r1, #0
 800e040:	bfd4      	ite	le
 800e042:	f1c1 0202 	rsble	r2, r1, #2
 800e046:	2201      	movgt	r2, #1
 800e048:	4413      	add	r3, r2
 800e04a:	e7e0      	b.n	800e00e <_printf_float+0x192>
 800e04c:	6823      	ldr	r3, [r4, #0]
 800e04e:	055a      	lsls	r2, r3, #21
 800e050:	d407      	bmi.n	800e062 <_printf_float+0x1e6>
 800e052:	6923      	ldr	r3, [r4, #16]
 800e054:	4642      	mov	r2, r8
 800e056:	4631      	mov	r1, r6
 800e058:	4628      	mov	r0, r5
 800e05a:	47b8      	blx	r7
 800e05c:	3001      	adds	r0, #1
 800e05e:	d12b      	bne.n	800e0b8 <_printf_float+0x23c>
 800e060:	e767      	b.n	800df32 <_printf_float+0xb6>
 800e062:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e066:	f240 80dd 	bls.w	800e224 <_printf_float+0x3a8>
 800e06a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e06e:	2200      	movs	r2, #0
 800e070:	2300      	movs	r3, #0
 800e072:	f7f2 fd59 	bl	8000b28 <__aeabi_dcmpeq>
 800e076:	2800      	cmp	r0, #0
 800e078:	d033      	beq.n	800e0e2 <_printf_float+0x266>
 800e07a:	4a37      	ldr	r2, [pc, #220]	@ (800e158 <_printf_float+0x2dc>)
 800e07c:	2301      	movs	r3, #1
 800e07e:	4631      	mov	r1, r6
 800e080:	4628      	mov	r0, r5
 800e082:	47b8      	blx	r7
 800e084:	3001      	adds	r0, #1
 800e086:	f43f af54 	beq.w	800df32 <_printf_float+0xb6>
 800e08a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e08e:	4543      	cmp	r3, r8
 800e090:	db02      	blt.n	800e098 <_printf_float+0x21c>
 800e092:	6823      	ldr	r3, [r4, #0]
 800e094:	07d8      	lsls	r0, r3, #31
 800e096:	d50f      	bpl.n	800e0b8 <_printf_float+0x23c>
 800e098:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e09c:	4631      	mov	r1, r6
 800e09e:	4628      	mov	r0, r5
 800e0a0:	47b8      	blx	r7
 800e0a2:	3001      	adds	r0, #1
 800e0a4:	f43f af45 	beq.w	800df32 <_printf_float+0xb6>
 800e0a8:	f04f 0900 	mov.w	r9, #0
 800e0ac:	f108 38ff 	add.w	r8, r8, #4294967295
 800e0b0:	f104 0a1a 	add.w	sl, r4, #26
 800e0b4:	45c8      	cmp	r8, r9
 800e0b6:	dc09      	bgt.n	800e0cc <_printf_float+0x250>
 800e0b8:	6823      	ldr	r3, [r4, #0]
 800e0ba:	079b      	lsls	r3, r3, #30
 800e0bc:	f100 8103 	bmi.w	800e2c6 <_printf_float+0x44a>
 800e0c0:	68e0      	ldr	r0, [r4, #12]
 800e0c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e0c4:	4298      	cmp	r0, r3
 800e0c6:	bfb8      	it	lt
 800e0c8:	4618      	movlt	r0, r3
 800e0ca:	e734      	b.n	800df36 <_printf_float+0xba>
 800e0cc:	2301      	movs	r3, #1
 800e0ce:	4652      	mov	r2, sl
 800e0d0:	4631      	mov	r1, r6
 800e0d2:	4628      	mov	r0, r5
 800e0d4:	47b8      	blx	r7
 800e0d6:	3001      	adds	r0, #1
 800e0d8:	f43f af2b 	beq.w	800df32 <_printf_float+0xb6>
 800e0dc:	f109 0901 	add.w	r9, r9, #1
 800e0e0:	e7e8      	b.n	800e0b4 <_printf_float+0x238>
 800e0e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	dc39      	bgt.n	800e15c <_printf_float+0x2e0>
 800e0e8:	4a1b      	ldr	r2, [pc, #108]	@ (800e158 <_printf_float+0x2dc>)
 800e0ea:	2301      	movs	r3, #1
 800e0ec:	4631      	mov	r1, r6
 800e0ee:	4628      	mov	r0, r5
 800e0f0:	47b8      	blx	r7
 800e0f2:	3001      	adds	r0, #1
 800e0f4:	f43f af1d 	beq.w	800df32 <_printf_float+0xb6>
 800e0f8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e0fc:	ea59 0303 	orrs.w	r3, r9, r3
 800e100:	d102      	bne.n	800e108 <_printf_float+0x28c>
 800e102:	6823      	ldr	r3, [r4, #0]
 800e104:	07d9      	lsls	r1, r3, #31
 800e106:	d5d7      	bpl.n	800e0b8 <_printf_float+0x23c>
 800e108:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e10c:	4631      	mov	r1, r6
 800e10e:	4628      	mov	r0, r5
 800e110:	47b8      	blx	r7
 800e112:	3001      	adds	r0, #1
 800e114:	f43f af0d 	beq.w	800df32 <_printf_float+0xb6>
 800e118:	f04f 0a00 	mov.w	sl, #0
 800e11c:	f104 0b1a 	add.w	fp, r4, #26
 800e120:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e122:	425b      	negs	r3, r3
 800e124:	4553      	cmp	r3, sl
 800e126:	dc01      	bgt.n	800e12c <_printf_float+0x2b0>
 800e128:	464b      	mov	r3, r9
 800e12a:	e793      	b.n	800e054 <_printf_float+0x1d8>
 800e12c:	2301      	movs	r3, #1
 800e12e:	465a      	mov	r2, fp
 800e130:	4631      	mov	r1, r6
 800e132:	4628      	mov	r0, r5
 800e134:	47b8      	blx	r7
 800e136:	3001      	adds	r0, #1
 800e138:	f43f aefb 	beq.w	800df32 <_printf_float+0xb6>
 800e13c:	f10a 0a01 	add.w	sl, sl, #1
 800e140:	e7ee      	b.n	800e120 <_printf_float+0x2a4>
 800e142:	bf00      	nop
 800e144:	7fefffff 	.word	0x7fefffff
 800e148:	080106bc 	.word	0x080106bc
 800e14c:	080106b8 	.word	0x080106b8
 800e150:	080106c4 	.word	0x080106c4
 800e154:	080106c0 	.word	0x080106c0
 800e158:	080106c8 	.word	0x080106c8
 800e15c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e15e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e162:	4553      	cmp	r3, sl
 800e164:	bfa8      	it	ge
 800e166:	4653      	movge	r3, sl
 800e168:	2b00      	cmp	r3, #0
 800e16a:	4699      	mov	r9, r3
 800e16c:	dc36      	bgt.n	800e1dc <_printf_float+0x360>
 800e16e:	f04f 0b00 	mov.w	fp, #0
 800e172:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e176:	f104 021a 	add.w	r2, r4, #26
 800e17a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e17c:	9306      	str	r3, [sp, #24]
 800e17e:	eba3 0309 	sub.w	r3, r3, r9
 800e182:	455b      	cmp	r3, fp
 800e184:	dc31      	bgt.n	800e1ea <_printf_float+0x36e>
 800e186:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e188:	459a      	cmp	sl, r3
 800e18a:	dc3a      	bgt.n	800e202 <_printf_float+0x386>
 800e18c:	6823      	ldr	r3, [r4, #0]
 800e18e:	07da      	lsls	r2, r3, #31
 800e190:	d437      	bmi.n	800e202 <_printf_float+0x386>
 800e192:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e194:	ebaa 0903 	sub.w	r9, sl, r3
 800e198:	9b06      	ldr	r3, [sp, #24]
 800e19a:	ebaa 0303 	sub.w	r3, sl, r3
 800e19e:	4599      	cmp	r9, r3
 800e1a0:	bfa8      	it	ge
 800e1a2:	4699      	movge	r9, r3
 800e1a4:	f1b9 0f00 	cmp.w	r9, #0
 800e1a8:	dc33      	bgt.n	800e212 <_printf_float+0x396>
 800e1aa:	f04f 0800 	mov.w	r8, #0
 800e1ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e1b2:	f104 0b1a 	add.w	fp, r4, #26
 800e1b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e1b8:	ebaa 0303 	sub.w	r3, sl, r3
 800e1bc:	eba3 0309 	sub.w	r3, r3, r9
 800e1c0:	4543      	cmp	r3, r8
 800e1c2:	f77f af79 	ble.w	800e0b8 <_printf_float+0x23c>
 800e1c6:	2301      	movs	r3, #1
 800e1c8:	465a      	mov	r2, fp
 800e1ca:	4631      	mov	r1, r6
 800e1cc:	4628      	mov	r0, r5
 800e1ce:	47b8      	blx	r7
 800e1d0:	3001      	adds	r0, #1
 800e1d2:	f43f aeae 	beq.w	800df32 <_printf_float+0xb6>
 800e1d6:	f108 0801 	add.w	r8, r8, #1
 800e1da:	e7ec      	b.n	800e1b6 <_printf_float+0x33a>
 800e1dc:	4642      	mov	r2, r8
 800e1de:	4631      	mov	r1, r6
 800e1e0:	4628      	mov	r0, r5
 800e1e2:	47b8      	blx	r7
 800e1e4:	3001      	adds	r0, #1
 800e1e6:	d1c2      	bne.n	800e16e <_printf_float+0x2f2>
 800e1e8:	e6a3      	b.n	800df32 <_printf_float+0xb6>
 800e1ea:	2301      	movs	r3, #1
 800e1ec:	4631      	mov	r1, r6
 800e1ee:	4628      	mov	r0, r5
 800e1f0:	9206      	str	r2, [sp, #24]
 800e1f2:	47b8      	blx	r7
 800e1f4:	3001      	adds	r0, #1
 800e1f6:	f43f ae9c 	beq.w	800df32 <_printf_float+0xb6>
 800e1fa:	9a06      	ldr	r2, [sp, #24]
 800e1fc:	f10b 0b01 	add.w	fp, fp, #1
 800e200:	e7bb      	b.n	800e17a <_printf_float+0x2fe>
 800e202:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e206:	4631      	mov	r1, r6
 800e208:	4628      	mov	r0, r5
 800e20a:	47b8      	blx	r7
 800e20c:	3001      	adds	r0, #1
 800e20e:	d1c0      	bne.n	800e192 <_printf_float+0x316>
 800e210:	e68f      	b.n	800df32 <_printf_float+0xb6>
 800e212:	9a06      	ldr	r2, [sp, #24]
 800e214:	464b      	mov	r3, r9
 800e216:	4442      	add	r2, r8
 800e218:	4631      	mov	r1, r6
 800e21a:	4628      	mov	r0, r5
 800e21c:	47b8      	blx	r7
 800e21e:	3001      	adds	r0, #1
 800e220:	d1c3      	bne.n	800e1aa <_printf_float+0x32e>
 800e222:	e686      	b.n	800df32 <_printf_float+0xb6>
 800e224:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e228:	f1ba 0f01 	cmp.w	sl, #1
 800e22c:	dc01      	bgt.n	800e232 <_printf_float+0x3b6>
 800e22e:	07db      	lsls	r3, r3, #31
 800e230:	d536      	bpl.n	800e2a0 <_printf_float+0x424>
 800e232:	2301      	movs	r3, #1
 800e234:	4642      	mov	r2, r8
 800e236:	4631      	mov	r1, r6
 800e238:	4628      	mov	r0, r5
 800e23a:	47b8      	blx	r7
 800e23c:	3001      	adds	r0, #1
 800e23e:	f43f ae78 	beq.w	800df32 <_printf_float+0xb6>
 800e242:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e246:	4631      	mov	r1, r6
 800e248:	4628      	mov	r0, r5
 800e24a:	47b8      	blx	r7
 800e24c:	3001      	adds	r0, #1
 800e24e:	f43f ae70 	beq.w	800df32 <_printf_float+0xb6>
 800e252:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e256:	2200      	movs	r2, #0
 800e258:	2300      	movs	r3, #0
 800e25a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e25e:	f7f2 fc63 	bl	8000b28 <__aeabi_dcmpeq>
 800e262:	b9c0      	cbnz	r0, 800e296 <_printf_float+0x41a>
 800e264:	4653      	mov	r3, sl
 800e266:	f108 0201 	add.w	r2, r8, #1
 800e26a:	4631      	mov	r1, r6
 800e26c:	4628      	mov	r0, r5
 800e26e:	47b8      	blx	r7
 800e270:	3001      	adds	r0, #1
 800e272:	d10c      	bne.n	800e28e <_printf_float+0x412>
 800e274:	e65d      	b.n	800df32 <_printf_float+0xb6>
 800e276:	2301      	movs	r3, #1
 800e278:	465a      	mov	r2, fp
 800e27a:	4631      	mov	r1, r6
 800e27c:	4628      	mov	r0, r5
 800e27e:	47b8      	blx	r7
 800e280:	3001      	adds	r0, #1
 800e282:	f43f ae56 	beq.w	800df32 <_printf_float+0xb6>
 800e286:	f108 0801 	add.w	r8, r8, #1
 800e28a:	45d0      	cmp	r8, sl
 800e28c:	dbf3      	blt.n	800e276 <_printf_float+0x3fa>
 800e28e:	464b      	mov	r3, r9
 800e290:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e294:	e6df      	b.n	800e056 <_printf_float+0x1da>
 800e296:	f04f 0800 	mov.w	r8, #0
 800e29a:	f104 0b1a 	add.w	fp, r4, #26
 800e29e:	e7f4      	b.n	800e28a <_printf_float+0x40e>
 800e2a0:	2301      	movs	r3, #1
 800e2a2:	4642      	mov	r2, r8
 800e2a4:	e7e1      	b.n	800e26a <_printf_float+0x3ee>
 800e2a6:	2301      	movs	r3, #1
 800e2a8:	464a      	mov	r2, r9
 800e2aa:	4631      	mov	r1, r6
 800e2ac:	4628      	mov	r0, r5
 800e2ae:	47b8      	blx	r7
 800e2b0:	3001      	adds	r0, #1
 800e2b2:	f43f ae3e 	beq.w	800df32 <_printf_float+0xb6>
 800e2b6:	f108 0801 	add.w	r8, r8, #1
 800e2ba:	68e3      	ldr	r3, [r4, #12]
 800e2bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e2be:	1a5b      	subs	r3, r3, r1
 800e2c0:	4543      	cmp	r3, r8
 800e2c2:	dcf0      	bgt.n	800e2a6 <_printf_float+0x42a>
 800e2c4:	e6fc      	b.n	800e0c0 <_printf_float+0x244>
 800e2c6:	f04f 0800 	mov.w	r8, #0
 800e2ca:	f104 0919 	add.w	r9, r4, #25
 800e2ce:	e7f4      	b.n	800e2ba <_printf_float+0x43e>

0800e2d0 <_printf_common>:
 800e2d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2d4:	4616      	mov	r6, r2
 800e2d6:	4698      	mov	r8, r3
 800e2d8:	688a      	ldr	r2, [r1, #8]
 800e2da:	690b      	ldr	r3, [r1, #16]
 800e2dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e2e0:	4293      	cmp	r3, r2
 800e2e2:	bfb8      	it	lt
 800e2e4:	4613      	movlt	r3, r2
 800e2e6:	6033      	str	r3, [r6, #0]
 800e2e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e2ec:	4607      	mov	r7, r0
 800e2ee:	460c      	mov	r4, r1
 800e2f0:	b10a      	cbz	r2, 800e2f6 <_printf_common+0x26>
 800e2f2:	3301      	adds	r3, #1
 800e2f4:	6033      	str	r3, [r6, #0]
 800e2f6:	6823      	ldr	r3, [r4, #0]
 800e2f8:	0699      	lsls	r1, r3, #26
 800e2fa:	bf42      	ittt	mi
 800e2fc:	6833      	ldrmi	r3, [r6, #0]
 800e2fe:	3302      	addmi	r3, #2
 800e300:	6033      	strmi	r3, [r6, #0]
 800e302:	6825      	ldr	r5, [r4, #0]
 800e304:	f015 0506 	ands.w	r5, r5, #6
 800e308:	d106      	bne.n	800e318 <_printf_common+0x48>
 800e30a:	f104 0a19 	add.w	sl, r4, #25
 800e30e:	68e3      	ldr	r3, [r4, #12]
 800e310:	6832      	ldr	r2, [r6, #0]
 800e312:	1a9b      	subs	r3, r3, r2
 800e314:	42ab      	cmp	r3, r5
 800e316:	dc26      	bgt.n	800e366 <_printf_common+0x96>
 800e318:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e31c:	6822      	ldr	r2, [r4, #0]
 800e31e:	3b00      	subs	r3, #0
 800e320:	bf18      	it	ne
 800e322:	2301      	movne	r3, #1
 800e324:	0692      	lsls	r2, r2, #26
 800e326:	d42b      	bmi.n	800e380 <_printf_common+0xb0>
 800e328:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e32c:	4641      	mov	r1, r8
 800e32e:	4638      	mov	r0, r7
 800e330:	47c8      	blx	r9
 800e332:	3001      	adds	r0, #1
 800e334:	d01e      	beq.n	800e374 <_printf_common+0xa4>
 800e336:	6823      	ldr	r3, [r4, #0]
 800e338:	6922      	ldr	r2, [r4, #16]
 800e33a:	f003 0306 	and.w	r3, r3, #6
 800e33e:	2b04      	cmp	r3, #4
 800e340:	bf02      	ittt	eq
 800e342:	68e5      	ldreq	r5, [r4, #12]
 800e344:	6833      	ldreq	r3, [r6, #0]
 800e346:	1aed      	subeq	r5, r5, r3
 800e348:	68a3      	ldr	r3, [r4, #8]
 800e34a:	bf0c      	ite	eq
 800e34c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e350:	2500      	movne	r5, #0
 800e352:	4293      	cmp	r3, r2
 800e354:	bfc4      	itt	gt
 800e356:	1a9b      	subgt	r3, r3, r2
 800e358:	18ed      	addgt	r5, r5, r3
 800e35a:	2600      	movs	r6, #0
 800e35c:	341a      	adds	r4, #26
 800e35e:	42b5      	cmp	r5, r6
 800e360:	d11a      	bne.n	800e398 <_printf_common+0xc8>
 800e362:	2000      	movs	r0, #0
 800e364:	e008      	b.n	800e378 <_printf_common+0xa8>
 800e366:	2301      	movs	r3, #1
 800e368:	4652      	mov	r2, sl
 800e36a:	4641      	mov	r1, r8
 800e36c:	4638      	mov	r0, r7
 800e36e:	47c8      	blx	r9
 800e370:	3001      	adds	r0, #1
 800e372:	d103      	bne.n	800e37c <_printf_common+0xac>
 800e374:	f04f 30ff 	mov.w	r0, #4294967295
 800e378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e37c:	3501      	adds	r5, #1
 800e37e:	e7c6      	b.n	800e30e <_printf_common+0x3e>
 800e380:	18e1      	adds	r1, r4, r3
 800e382:	1c5a      	adds	r2, r3, #1
 800e384:	2030      	movs	r0, #48	@ 0x30
 800e386:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e38a:	4422      	add	r2, r4
 800e38c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e390:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e394:	3302      	adds	r3, #2
 800e396:	e7c7      	b.n	800e328 <_printf_common+0x58>
 800e398:	2301      	movs	r3, #1
 800e39a:	4622      	mov	r2, r4
 800e39c:	4641      	mov	r1, r8
 800e39e:	4638      	mov	r0, r7
 800e3a0:	47c8      	blx	r9
 800e3a2:	3001      	adds	r0, #1
 800e3a4:	d0e6      	beq.n	800e374 <_printf_common+0xa4>
 800e3a6:	3601      	adds	r6, #1
 800e3a8:	e7d9      	b.n	800e35e <_printf_common+0x8e>
	...

0800e3ac <_printf_i>:
 800e3ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e3b0:	7e0f      	ldrb	r7, [r1, #24]
 800e3b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e3b4:	2f78      	cmp	r7, #120	@ 0x78
 800e3b6:	4691      	mov	r9, r2
 800e3b8:	4680      	mov	r8, r0
 800e3ba:	460c      	mov	r4, r1
 800e3bc:	469a      	mov	sl, r3
 800e3be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e3c2:	d807      	bhi.n	800e3d4 <_printf_i+0x28>
 800e3c4:	2f62      	cmp	r7, #98	@ 0x62
 800e3c6:	d80a      	bhi.n	800e3de <_printf_i+0x32>
 800e3c8:	2f00      	cmp	r7, #0
 800e3ca:	f000 80d1 	beq.w	800e570 <_printf_i+0x1c4>
 800e3ce:	2f58      	cmp	r7, #88	@ 0x58
 800e3d0:	f000 80b8 	beq.w	800e544 <_printf_i+0x198>
 800e3d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e3d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e3dc:	e03a      	b.n	800e454 <_printf_i+0xa8>
 800e3de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e3e2:	2b15      	cmp	r3, #21
 800e3e4:	d8f6      	bhi.n	800e3d4 <_printf_i+0x28>
 800e3e6:	a101      	add	r1, pc, #4	@ (adr r1, 800e3ec <_printf_i+0x40>)
 800e3e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e3ec:	0800e445 	.word	0x0800e445
 800e3f0:	0800e459 	.word	0x0800e459
 800e3f4:	0800e3d5 	.word	0x0800e3d5
 800e3f8:	0800e3d5 	.word	0x0800e3d5
 800e3fc:	0800e3d5 	.word	0x0800e3d5
 800e400:	0800e3d5 	.word	0x0800e3d5
 800e404:	0800e459 	.word	0x0800e459
 800e408:	0800e3d5 	.word	0x0800e3d5
 800e40c:	0800e3d5 	.word	0x0800e3d5
 800e410:	0800e3d5 	.word	0x0800e3d5
 800e414:	0800e3d5 	.word	0x0800e3d5
 800e418:	0800e557 	.word	0x0800e557
 800e41c:	0800e483 	.word	0x0800e483
 800e420:	0800e511 	.word	0x0800e511
 800e424:	0800e3d5 	.word	0x0800e3d5
 800e428:	0800e3d5 	.word	0x0800e3d5
 800e42c:	0800e579 	.word	0x0800e579
 800e430:	0800e3d5 	.word	0x0800e3d5
 800e434:	0800e483 	.word	0x0800e483
 800e438:	0800e3d5 	.word	0x0800e3d5
 800e43c:	0800e3d5 	.word	0x0800e3d5
 800e440:	0800e519 	.word	0x0800e519
 800e444:	6833      	ldr	r3, [r6, #0]
 800e446:	1d1a      	adds	r2, r3, #4
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	6032      	str	r2, [r6, #0]
 800e44c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e450:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e454:	2301      	movs	r3, #1
 800e456:	e09c      	b.n	800e592 <_printf_i+0x1e6>
 800e458:	6833      	ldr	r3, [r6, #0]
 800e45a:	6820      	ldr	r0, [r4, #0]
 800e45c:	1d19      	adds	r1, r3, #4
 800e45e:	6031      	str	r1, [r6, #0]
 800e460:	0606      	lsls	r6, r0, #24
 800e462:	d501      	bpl.n	800e468 <_printf_i+0xbc>
 800e464:	681d      	ldr	r5, [r3, #0]
 800e466:	e003      	b.n	800e470 <_printf_i+0xc4>
 800e468:	0645      	lsls	r5, r0, #25
 800e46a:	d5fb      	bpl.n	800e464 <_printf_i+0xb8>
 800e46c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e470:	2d00      	cmp	r5, #0
 800e472:	da03      	bge.n	800e47c <_printf_i+0xd0>
 800e474:	232d      	movs	r3, #45	@ 0x2d
 800e476:	426d      	negs	r5, r5
 800e478:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e47c:	4858      	ldr	r0, [pc, #352]	@ (800e5e0 <_printf_i+0x234>)
 800e47e:	230a      	movs	r3, #10
 800e480:	e011      	b.n	800e4a6 <_printf_i+0xfa>
 800e482:	6821      	ldr	r1, [r4, #0]
 800e484:	6833      	ldr	r3, [r6, #0]
 800e486:	0608      	lsls	r0, r1, #24
 800e488:	f853 5b04 	ldr.w	r5, [r3], #4
 800e48c:	d402      	bmi.n	800e494 <_printf_i+0xe8>
 800e48e:	0649      	lsls	r1, r1, #25
 800e490:	bf48      	it	mi
 800e492:	b2ad      	uxthmi	r5, r5
 800e494:	2f6f      	cmp	r7, #111	@ 0x6f
 800e496:	4852      	ldr	r0, [pc, #328]	@ (800e5e0 <_printf_i+0x234>)
 800e498:	6033      	str	r3, [r6, #0]
 800e49a:	bf14      	ite	ne
 800e49c:	230a      	movne	r3, #10
 800e49e:	2308      	moveq	r3, #8
 800e4a0:	2100      	movs	r1, #0
 800e4a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e4a6:	6866      	ldr	r6, [r4, #4]
 800e4a8:	60a6      	str	r6, [r4, #8]
 800e4aa:	2e00      	cmp	r6, #0
 800e4ac:	db05      	blt.n	800e4ba <_printf_i+0x10e>
 800e4ae:	6821      	ldr	r1, [r4, #0]
 800e4b0:	432e      	orrs	r6, r5
 800e4b2:	f021 0104 	bic.w	r1, r1, #4
 800e4b6:	6021      	str	r1, [r4, #0]
 800e4b8:	d04b      	beq.n	800e552 <_printf_i+0x1a6>
 800e4ba:	4616      	mov	r6, r2
 800e4bc:	fbb5 f1f3 	udiv	r1, r5, r3
 800e4c0:	fb03 5711 	mls	r7, r3, r1, r5
 800e4c4:	5dc7      	ldrb	r7, [r0, r7]
 800e4c6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e4ca:	462f      	mov	r7, r5
 800e4cc:	42bb      	cmp	r3, r7
 800e4ce:	460d      	mov	r5, r1
 800e4d0:	d9f4      	bls.n	800e4bc <_printf_i+0x110>
 800e4d2:	2b08      	cmp	r3, #8
 800e4d4:	d10b      	bne.n	800e4ee <_printf_i+0x142>
 800e4d6:	6823      	ldr	r3, [r4, #0]
 800e4d8:	07df      	lsls	r7, r3, #31
 800e4da:	d508      	bpl.n	800e4ee <_printf_i+0x142>
 800e4dc:	6923      	ldr	r3, [r4, #16]
 800e4de:	6861      	ldr	r1, [r4, #4]
 800e4e0:	4299      	cmp	r1, r3
 800e4e2:	bfde      	ittt	le
 800e4e4:	2330      	movle	r3, #48	@ 0x30
 800e4e6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e4ea:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e4ee:	1b92      	subs	r2, r2, r6
 800e4f0:	6122      	str	r2, [r4, #16]
 800e4f2:	f8cd a000 	str.w	sl, [sp]
 800e4f6:	464b      	mov	r3, r9
 800e4f8:	aa03      	add	r2, sp, #12
 800e4fa:	4621      	mov	r1, r4
 800e4fc:	4640      	mov	r0, r8
 800e4fe:	f7ff fee7 	bl	800e2d0 <_printf_common>
 800e502:	3001      	adds	r0, #1
 800e504:	d14a      	bne.n	800e59c <_printf_i+0x1f0>
 800e506:	f04f 30ff 	mov.w	r0, #4294967295
 800e50a:	b004      	add	sp, #16
 800e50c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e510:	6823      	ldr	r3, [r4, #0]
 800e512:	f043 0320 	orr.w	r3, r3, #32
 800e516:	6023      	str	r3, [r4, #0]
 800e518:	4832      	ldr	r0, [pc, #200]	@ (800e5e4 <_printf_i+0x238>)
 800e51a:	2778      	movs	r7, #120	@ 0x78
 800e51c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e520:	6823      	ldr	r3, [r4, #0]
 800e522:	6831      	ldr	r1, [r6, #0]
 800e524:	061f      	lsls	r7, r3, #24
 800e526:	f851 5b04 	ldr.w	r5, [r1], #4
 800e52a:	d402      	bmi.n	800e532 <_printf_i+0x186>
 800e52c:	065f      	lsls	r7, r3, #25
 800e52e:	bf48      	it	mi
 800e530:	b2ad      	uxthmi	r5, r5
 800e532:	6031      	str	r1, [r6, #0]
 800e534:	07d9      	lsls	r1, r3, #31
 800e536:	bf44      	itt	mi
 800e538:	f043 0320 	orrmi.w	r3, r3, #32
 800e53c:	6023      	strmi	r3, [r4, #0]
 800e53e:	b11d      	cbz	r5, 800e548 <_printf_i+0x19c>
 800e540:	2310      	movs	r3, #16
 800e542:	e7ad      	b.n	800e4a0 <_printf_i+0xf4>
 800e544:	4826      	ldr	r0, [pc, #152]	@ (800e5e0 <_printf_i+0x234>)
 800e546:	e7e9      	b.n	800e51c <_printf_i+0x170>
 800e548:	6823      	ldr	r3, [r4, #0]
 800e54a:	f023 0320 	bic.w	r3, r3, #32
 800e54e:	6023      	str	r3, [r4, #0]
 800e550:	e7f6      	b.n	800e540 <_printf_i+0x194>
 800e552:	4616      	mov	r6, r2
 800e554:	e7bd      	b.n	800e4d2 <_printf_i+0x126>
 800e556:	6833      	ldr	r3, [r6, #0]
 800e558:	6825      	ldr	r5, [r4, #0]
 800e55a:	6961      	ldr	r1, [r4, #20]
 800e55c:	1d18      	adds	r0, r3, #4
 800e55e:	6030      	str	r0, [r6, #0]
 800e560:	062e      	lsls	r6, r5, #24
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	d501      	bpl.n	800e56a <_printf_i+0x1be>
 800e566:	6019      	str	r1, [r3, #0]
 800e568:	e002      	b.n	800e570 <_printf_i+0x1c4>
 800e56a:	0668      	lsls	r0, r5, #25
 800e56c:	d5fb      	bpl.n	800e566 <_printf_i+0x1ba>
 800e56e:	8019      	strh	r1, [r3, #0]
 800e570:	2300      	movs	r3, #0
 800e572:	6123      	str	r3, [r4, #16]
 800e574:	4616      	mov	r6, r2
 800e576:	e7bc      	b.n	800e4f2 <_printf_i+0x146>
 800e578:	6833      	ldr	r3, [r6, #0]
 800e57a:	1d1a      	adds	r2, r3, #4
 800e57c:	6032      	str	r2, [r6, #0]
 800e57e:	681e      	ldr	r6, [r3, #0]
 800e580:	6862      	ldr	r2, [r4, #4]
 800e582:	2100      	movs	r1, #0
 800e584:	4630      	mov	r0, r6
 800e586:	f7f1 fe53 	bl	8000230 <memchr>
 800e58a:	b108      	cbz	r0, 800e590 <_printf_i+0x1e4>
 800e58c:	1b80      	subs	r0, r0, r6
 800e58e:	6060      	str	r0, [r4, #4]
 800e590:	6863      	ldr	r3, [r4, #4]
 800e592:	6123      	str	r3, [r4, #16]
 800e594:	2300      	movs	r3, #0
 800e596:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e59a:	e7aa      	b.n	800e4f2 <_printf_i+0x146>
 800e59c:	6923      	ldr	r3, [r4, #16]
 800e59e:	4632      	mov	r2, r6
 800e5a0:	4649      	mov	r1, r9
 800e5a2:	4640      	mov	r0, r8
 800e5a4:	47d0      	blx	sl
 800e5a6:	3001      	adds	r0, #1
 800e5a8:	d0ad      	beq.n	800e506 <_printf_i+0x15a>
 800e5aa:	6823      	ldr	r3, [r4, #0]
 800e5ac:	079b      	lsls	r3, r3, #30
 800e5ae:	d413      	bmi.n	800e5d8 <_printf_i+0x22c>
 800e5b0:	68e0      	ldr	r0, [r4, #12]
 800e5b2:	9b03      	ldr	r3, [sp, #12]
 800e5b4:	4298      	cmp	r0, r3
 800e5b6:	bfb8      	it	lt
 800e5b8:	4618      	movlt	r0, r3
 800e5ba:	e7a6      	b.n	800e50a <_printf_i+0x15e>
 800e5bc:	2301      	movs	r3, #1
 800e5be:	4632      	mov	r2, r6
 800e5c0:	4649      	mov	r1, r9
 800e5c2:	4640      	mov	r0, r8
 800e5c4:	47d0      	blx	sl
 800e5c6:	3001      	adds	r0, #1
 800e5c8:	d09d      	beq.n	800e506 <_printf_i+0x15a>
 800e5ca:	3501      	adds	r5, #1
 800e5cc:	68e3      	ldr	r3, [r4, #12]
 800e5ce:	9903      	ldr	r1, [sp, #12]
 800e5d0:	1a5b      	subs	r3, r3, r1
 800e5d2:	42ab      	cmp	r3, r5
 800e5d4:	dcf2      	bgt.n	800e5bc <_printf_i+0x210>
 800e5d6:	e7eb      	b.n	800e5b0 <_printf_i+0x204>
 800e5d8:	2500      	movs	r5, #0
 800e5da:	f104 0619 	add.w	r6, r4, #25
 800e5de:	e7f5      	b.n	800e5cc <_printf_i+0x220>
 800e5e0:	080106ca 	.word	0x080106ca
 800e5e4:	080106db 	.word	0x080106db

0800e5e8 <std>:
 800e5e8:	2300      	movs	r3, #0
 800e5ea:	b510      	push	{r4, lr}
 800e5ec:	4604      	mov	r4, r0
 800e5ee:	e9c0 3300 	strd	r3, r3, [r0]
 800e5f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e5f6:	6083      	str	r3, [r0, #8]
 800e5f8:	8181      	strh	r1, [r0, #12]
 800e5fa:	6643      	str	r3, [r0, #100]	@ 0x64
 800e5fc:	81c2      	strh	r2, [r0, #14]
 800e5fe:	6183      	str	r3, [r0, #24]
 800e600:	4619      	mov	r1, r3
 800e602:	2208      	movs	r2, #8
 800e604:	305c      	adds	r0, #92	@ 0x5c
 800e606:	f000 f8f4 	bl	800e7f2 <memset>
 800e60a:	4b0d      	ldr	r3, [pc, #52]	@ (800e640 <std+0x58>)
 800e60c:	6263      	str	r3, [r4, #36]	@ 0x24
 800e60e:	4b0d      	ldr	r3, [pc, #52]	@ (800e644 <std+0x5c>)
 800e610:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e612:	4b0d      	ldr	r3, [pc, #52]	@ (800e648 <std+0x60>)
 800e614:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e616:	4b0d      	ldr	r3, [pc, #52]	@ (800e64c <std+0x64>)
 800e618:	6323      	str	r3, [r4, #48]	@ 0x30
 800e61a:	4b0d      	ldr	r3, [pc, #52]	@ (800e650 <std+0x68>)
 800e61c:	6224      	str	r4, [r4, #32]
 800e61e:	429c      	cmp	r4, r3
 800e620:	d006      	beq.n	800e630 <std+0x48>
 800e622:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e626:	4294      	cmp	r4, r2
 800e628:	d002      	beq.n	800e630 <std+0x48>
 800e62a:	33d0      	adds	r3, #208	@ 0xd0
 800e62c:	429c      	cmp	r4, r3
 800e62e:	d105      	bne.n	800e63c <std+0x54>
 800e630:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e638:	f000 b9c6 	b.w	800e9c8 <__retarget_lock_init_recursive>
 800e63c:	bd10      	pop	{r4, pc}
 800e63e:	bf00      	nop
 800e640:	0800e76d 	.word	0x0800e76d
 800e644:	0800e78f 	.word	0x0800e78f
 800e648:	0800e7c7 	.word	0x0800e7c7
 800e64c:	0800e7eb 	.word	0x0800e7eb
 800e650:	2000fbd8 	.word	0x2000fbd8

0800e654 <stdio_exit_handler>:
 800e654:	4a02      	ldr	r2, [pc, #8]	@ (800e660 <stdio_exit_handler+0xc>)
 800e656:	4903      	ldr	r1, [pc, #12]	@ (800e664 <stdio_exit_handler+0x10>)
 800e658:	4803      	ldr	r0, [pc, #12]	@ (800e668 <stdio_exit_handler+0x14>)
 800e65a:	f000 b869 	b.w	800e730 <_fwalk_sglue>
 800e65e:	bf00      	nop
 800e660:	20000110 	.word	0x20000110
 800e664:	0800ff31 	.word	0x0800ff31
 800e668:	20000120 	.word	0x20000120

0800e66c <cleanup_stdio>:
 800e66c:	6841      	ldr	r1, [r0, #4]
 800e66e:	4b0c      	ldr	r3, [pc, #48]	@ (800e6a0 <cleanup_stdio+0x34>)
 800e670:	4299      	cmp	r1, r3
 800e672:	b510      	push	{r4, lr}
 800e674:	4604      	mov	r4, r0
 800e676:	d001      	beq.n	800e67c <cleanup_stdio+0x10>
 800e678:	f001 fc5a 	bl	800ff30 <_fflush_r>
 800e67c:	68a1      	ldr	r1, [r4, #8]
 800e67e:	4b09      	ldr	r3, [pc, #36]	@ (800e6a4 <cleanup_stdio+0x38>)
 800e680:	4299      	cmp	r1, r3
 800e682:	d002      	beq.n	800e68a <cleanup_stdio+0x1e>
 800e684:	4620      	mov	r0, r4
 800e686:	f001 fc53 	bl	800ff30 <_fflush_r>
 800e68a:	68e1      	ldr	r1, [r4, #12]
 800e68c:	4b06      	ldr	r3, [pc, #24]	@ (800e6a8 <cleanup_stdio+0x3c>)
 800e68e:	4299      	cmp	r1, r3
 800e690:	d004      	beq.n	800e69c <cleanup_stdio+0x30>
 800e692:	4620      	mov	r0, r4
 800e694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e698:	f001 bc4a 	b.w	800ff30 <_fflush_r>
 800e69c:	bd10      	pop	{r4, pc}
 800e69e:	bf00      	nop
 800e6a0:	2000fbd8 	.word	0x2000fbd8
 800e6a4:	2000fc40 	.word	0x2000fc40
 800e6a8:	2000fca8 	.word	0x2000fca8

0800e6ac <global_stdio_init.part.0>:
 800e6ac:	b510      	push	{r4, lr}
 800e6ae:	4b0b      	ldr	r3, [pc, #44]	@ (800e6dc <global_stdio_init.part.0+0x30>)
 800e6b0:	4c0b      	ldr	r4, [pc, #44]	@ (800e6e0 <global_stdio_init.part.0+0x34>)
 800e6b2:	4a0c      	ldr	r2, [pc, #48]	@ (800e6e4 <global_stdio_init.part.0+0x38>)
 800e6b4:	601a      	str	r2, [r3, #0]
 800e6b6:	4620      	mov	r0, r4
 800e6b8:	2200      	movs	r2, #0
 800e6ba:	2104      	movs	r1, #4
 800e6bc:	f7ff ff94 	bl	800e5e8 <std>
 800e6c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e6c4:	2201      	movs	r2, #1
 800e6c6:	2109      	movs	r1, #9
 800e6c8:	f7ff ff8e 	bl	800e5e8 <std>
 800e6cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e6d0:	2202      	movs	r2, #2
 800e6d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e6d6:	2112      	movs	r1, #18
 800e6d8:	f7ff bf86 	b.w	800e5e8 <std>
 800e6dc:	2000fd10 	.word	0x2000fd10
 800e6e0:	2000fbd8 	.word	0x2000fbd8
 800e6e4:	0800e655 	.word	0x0800e655

0800e6e8 <__sfp_lock_acquire>:
 800e6e8:	4801      	ldr	r0, [pc, #4]	@ (800e6f0 <__sfp_lock_acquire+0x8>)
 800e6ea:	f000 b96e 	b.w	800e9ca <__retarget_lock_acquire_recursive>
 800e6ee:	bf00      	nop
 800e6f0:	2000fd19 	.word	0x2000fd19

0800e6f4 <__sfp_lock_release>:
 800e6f4:	4801      	ldr	r0, [pc, #4]	@ (800e6fc <__sfp_lock_release+0x8>)
 800e6f6:	f000 b969 	b.w	800e9cc <__retarget_lock_release_recursive>
 800e6fa:	bf00      	nop
 800e6fc:	2000fd19 	.word	0x2000fd19

0800e700 <__sinit>:
 800e700:	b510      	push	{r4, lr}
 800e702:	4604      	mov	r4, r0
 800e704:	f7ff fff0 	bl	800e6e8 <__sfp_lock_acquire>
 800e708:	6a23      	ldr	r3, [r4, #32]
 800e70a:	b11b      	cbz	r3, 800e714 <__sinit+0x14>
 800e70c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e710:	f7ff bff0 	b.w	800e6f4 <__sfp_lock_release>
 800e714:	4b04      	ldr	r3, [pc, #16]	@ (800e728 <__sinit+0x28>)
 800e716:	6223      	str	r3, [r4, #32]
 800e718:	4b04      	ldr	r3, [pc, #16]	@ (800e72c <__sinit+0x2c>)
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d1f5      	bne.n	800e70c <__sinit+0xc>
 800e720:	f7ff ffc4 	bl	800e6ac <global_stdio_init.part.0>
 800e724:	e7f2      	b.n	800e70c <__sinit+0xc>
 800e726:	bf00      	nop
 800e728:	0800e66d 	.word	0x0800e66d
 800e72c:	2000fd10 	.word	0x2000fd10

0800e730 <_fwalk_sglue>:
 800e730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e734:	4607      	mov	r7, r0
 800e736:	4688      	mov	r8, r1
 800e738:	4614      	mov	r4, r2
 800e73a:	2600      	movs	r6, #0
 800e73c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e740:	f1b9 0901 	subs.w	r9, r9, #1
 800e744:	d505      	bpl.n	800e752 <_fwalk_sglue+0x22>
 800e746:	6824      	ldr	r4, [r4, #0]
 800e748:	2c00      	cmp	r4, #0
 800e74a:	d1f7      	bne.n	800e73c <_fwalk_sglue+0xc>
 800e74c:	4630      	mov	r0, r6
 800e74e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e752:	89ab      	ldrh	r3, [r5, #12]
 800e754:	2b01      	cmp	r3, #1
 800e756:	d907      	bls.n	800e768 <_fwalk_sglue+0x38>
 800e758:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e75c:	3301      	adds	r3, #1
 800e75e:	d003      	beq.n	800e768 <_fwalk_sglue+0x38>
 800e760:	4629      	mov	r1, r5
 800e762:	4638      	mov	r0, r7
 800e764:	47c0      	blx	r8
 800e766:	4306      	orrs	r6, r0
 800e768:	3568      	adds	r5, #104	@ 0x68
 800e76a:	e7e9      	b.n	800e740 <_fwalk_sglue+0x10>

0800e76c <__sread>:
 800e76c:	b510      	push	{r4, lr}
 800e76e:	460c      	mov	r4, r1
 800e770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e774:	f000 f8ca 	bl	800e90c <_read_r>
 800e778:	2800      	cmp	r0, #0
 800e77a:	bfab      	itete	ge
 800e77c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e77e:	89a3      	ldrhlt	r3, [r4, #12]
 800e780:	181b      	addge	r3, r3, r0
 800e782:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e786:	bfac      	ite	ge
 800e788:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e78a:	81a3      	strhlt	r3, [r4, #12]
 800e78c:	bd10      	pop	{r4, pc}

0800e78e <__swrite>:
 800e78e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e792:	461f      	mov	r7, r3
 800e794:	898b      	ldrh	r3, [r1, #12]
 800e796:	05db      	lsls	r3, r3, #23
 800e798:	4605      	mov	r5, r0
 800e79a:	460c      	mov	r4, r1
 800e79c:	4616      	mov	r6, r2
 800e79e:	d505      	bpl.n	800e7ac <__swrite+0x1e>
 800e7a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7a4:	2302      	movs	r3, #2
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	f000 f89e 	bl	800e8e8 <_lseek_r>
 800e7ac:	89a3      	ldrh	r3, [r4, #12]
 800e7ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e7b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e7b6:	81a3      	strh	r3, [r4, #12]
 800e7b8:	4632      	mov	r2, r6
 800e7ba:	463b      	mov	r3, r7
 800e7bc:	4628      	mov	r0, r5
 800e7be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e7c2:	f000 b8c5 	b.w	800e950 <_write_r>

0800e7c6 <__sseek>:
 800e7c6:	b510      	push	{r4, lr}
 800e7c8:	460c      	mov	r4, r1
 800e7ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7ce:	f000 f88b 	bl	800e8e8 <_lseek_r>
 800e7d2:	1c43      	adds	r3, r0, #1
 800e7d4:	89a3      	ldrh	r3, [r4, #12]
 800e7d6:	bf15      	itete	ne
 800e7d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e7da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e7de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e7e2:	81a3      	strheq	r3, [r4, #12]
 800e7e4:	bf18      	it	ne
 800e7e6:	81a3      	strhne	r3, [r4, #12]
 800e7e8:	bd10      	pop	{r4, pc}

0800e7ea <__sclose>:
 800e7ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7ee:	f000 b80d 	b.w	800e80c <_close_r>

0800e7f2 <memset>:
 800e7f2:	4402      	add	r2, r0
 800e7f4:	4603      	mov	r3, r0
 800e7f6:	4293      	cmp	r3, r2
 800e7f8:	d100      	bne.n	800e7fc <memset+0xa>
 800e7fa:	4770      	bx	lr
 800e7fc:	f803 1b01 	strb.w	r1, [r3], #1
 800e800:	e7f9      	b.n	800e7f6 <memset+0x4>
	...

0800e804 <_localeconv_r>:
 800e804:	4800      	ldr	r0, [pc, #0]	@ (800e808 <_localeconv_r+0x4>)
 800e806:	4770      	bx	lr
 800e808:	2000025c 	.word	0x2000025c

0800e80c <_close_r>:
 800e80c:	b538      	push	{r3, r4, r5, lr}
 800e80e:	4d06      	ldr	r5, [pc, #24]	@ (800e828 <_close_r+0x1c>)
 800e810:	2300      	movs	r3, #0
 800e812:	4604      	mov	r4, r0
 800e814:	4608      	mov	r0, r1
 800e816:	602b      	str	r3, [r5, #0]
 800e818:	f7f3 f99c 	bl	8001b54 <_close>
 800e81c:	1c43      	adds	r3, r0, #1
 800e81e:	d102      	bne.n	800e826 <_close_r+0x1a>
 800e820:	682b      	ldr	r3, [r5, #0]
 800e822:	b103      	cbz	r3, 800e826 <_close_r+0x1a>
 800e824:	6023      	str	r3, [r4, #0]
 800e826:	bd38      	pop	{r3, r4, r5, pc}
 800e828:	2000fd14 	.word	0x2000fd14

0800e82c <_reclaim_reent>:
 800e82c:	4b2d      	ldr	r3, [pc, #180]	@ (800e8e4 <_reclaim_reent+0xb8>)
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	4283      	cmp	r3, r0
 800e832:	b570      	push	{r4, r5, r6, lr}
 800e834:	4604      	mov	r4, r0
 800e836:	d053      	beq.n	800e8e0 <_reclaim_reent+0xb4>
 800e838:	69c3      	ldr	r3, [r0, #28]
 800e83a:	b31b      	cbz	r3, 800e884 <_reclaim_reent+0x58>
 800e83c:	68db      	ldr	r3, [r3, #12]
 800e83e:	b163      	cbz	r3, 800e85a <_reclaim_reent+0x2e>
 800e840:	2500      	movs	r5, #0
 800e842:	69e3      	ldr	r3, [r4, #28]
 800e844:	68db      	ldr	r3, [r3, #12]
 800e846:	5959      	ldr	r1, [r3, r5]
 800e848:	b9b1      	cbnz	r1, 800e878 <_reclaim_reent+0x4c>
 800e84a:	3504      	adds	r5, #4
 800e84c:	2d80      	cmp	r5, #128	@ 0x80
 800e84e:	d1f8      	bne.n	800e842 <_reclaim_reent+0x16>
 800e850:	69e3      	ldr	r3, [r4, #28]
 800e852:	4620      	mov	r0, r4
 800e854:	68d9      	ldr	r1, [r3, #12]
 800e856:	f000 ff23 	bl	800f6a0 <_free_r>
 800e85a:	69e3      	ldr	r3, [r4, #28]
 800e85c:	6819      	ldr	r1, [r3, #0]
 800e85e:	b111      	cbz	r1, 800e866 <_reclaim_reent+0x3a>
 800e860:	4620      	mov	r0, r4
 800e862:	f000 ff1d 	bl	800f6a0 <_free_r>
 800e866:	69e3      	ldr	r3, [r4, #28]
 800e868:	689d      	ldr	r5, [r3, #8]
 800e86a:	b15d      	cbz	r5, 800e884 <_reclaim_reent+0x58>
 800e86c:	4629      	mov	r1, r5
 800e86e:	4620      	mov	r0, r4
 800e870:	682d      	ldr	r5, [r5, #0]
 800e872:	f000 ff15 	bl	800f6a0 <_free_r>
 800e876:	e7f8      	b.n	800e86a <_reclaim_reent+0x3e>
 800e878:	680e      	ldr	r6, [r1, #0]
 800e87a:	4620      	mov	r0, r4
 800e87c:	f000 ff10 	bl	800f6a0 <_free_r>
 800e880:	4631      	mov	r1, r6
 800e882:	e7e1      	b.n	800e848 <_reclaim_reent+0x1c>
 800e884:	6961      	ldr	r1, [r4, #20]
 800e886:	b111      	cbz	r1, 800e88e <_reclaim_reent+0x62>
 800e888:	4620      	mov	r0, r4
 800e88a:	f000 ff09 	bl	800f6a0 <_free_r>
 800e88e:	69e1      	ldr	r1, [r4, #28]
 800e890:	b111      	cbz	r1, 800e898 <_reclaim_reent+0x6c>
 800e892:	4620      	mov	r0, r4
 800e894:	f000 ff04 	bl	800f6a0 <_free_r>
 800e898:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800e89a:	b111      	cbz	r1, 800e8a2 <_reclaim_reent+0x76>
 800e89c:	4620      	mov	r0, r4
 800e89e:	f000 feff 	bl	800f6a0 <_free_r>
 800e8a2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e8a4:	b111      	cbz	r1, 800e8ac <_reclaim_reent+0x80>
 800e8a6:	4620      	mov	r0, r4
 800e8a8:	f000 fefa 	bl	800f6a0 <_free_r>
 800e8ac:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800e8ae:	b111      	cbz	r1, 800e8b6 <_reclaim_reent+0x8a>
 800e8b0:	4620      	mov	r0, r4
 800e8b2:	f000 fef5 	bl	800f6a0 <_free_r>
 800e8b6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800e8b8:	b111      	cbz	r1, 800e8c0 <_reclaim_reent+0x94>
 800e8ba:	4620      	mov	r0, r4
 800e8bc:	f000 fef0 	bl	800f6a0 <_free_r>
 800e8c0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800e8c2:	b111      	cbz	r1, 800e8ca <_reclaim_reent+0x9e>
 800e8c4:	4620      	mov	r0, r4
 800e8c6:	f000 feeb 	bl	800f6a0 <_free_r>
 800e8ca:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800e8cc:	b111      	cbz	r1, 800e8d4 <_reclaim_reent+0xa8>
 800e8ce:	4620      	mov	r0, r4
 800e8d0:	f000 fee6 	bl	800f6a0 <_free_r>
 800e8d4:	6a23      	ldr	r3, [r4, #32]
 800e8d6:	b11b      	cbz	r3, 800e8e0 <_reclaim_reent+0xb4>
 800e8d8:	4620      	mov	r0, r4
 800e8da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e8de:	4718      	bx	r3
 800e8e0:	bd70      	pop	{r4, r5, r6, pc}
 800e8e2:	bf00      	nop
 800e8e4:	2000011c 	.word	0x2000011c

0800e8e8 <_lseek_r>:
 800e8e8:	b538      	push	{r3, r4, r5, lr}
 800e8ea:	4d07      	ldr	r5, [pc, #28]	@ (800e908 <_lseek_r+0x20>)
 800e8ec:	4604      	mov	r4, r0
 800e8ee:	4608      	mov	r0, r1
 800e8f0:	4611      	mov	r1, r2
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	602a      	str	r2, [r5, #0]
 800e8f6:	461a      	mov	r2, r3
 800e8f8:	f7f3 f953 	bl	8001ba2 <_lseek>
 800e8fc:	1c43      	adds	r3, r0, #1
 800e8fe:	d102      	bne.n	800e906 <_lseek_r+0x1e>
 800e900:	682b      	ldr	r3, [r5, #0]
 800e902:	b103      	cbz	r3, 800e906 <_lseek_r+0x1e>
 800e904:	6023      	str	r3, [r4, #0]
 800e906:	bd38      	pop	{r3, r4, r5, pc}
 800e908:	2000fd14 	.word	0x2000fd14

0800e90c <_read_r>:
 800e90c:	b538      	push	{r3, r4, r5, lr}
 800e90e:	4d07      	ldr	r5, [pc, #28]	@ (800e92c <_read_r+0x20>)
 800e910:	4604      	mov	r4, r0
 800e912:	4608      	mov	r0, r1
 800e914:	4611      	mov	r1, r2
 800e916:	2200      	movs	r2, #0
 800e918:	602a      	str	r2, [r5, #0]
 800e91a:	461a      	mov	r2, r3
 800e91c:	f7f3 f8e1 	bl	8001ae2 <_read>
 800e920:	1c43      	adds	r3, r0, #1
 800e922:	d102      	bne.n	800e92a <_read_r+0x1e>
 800e924:	682b      	ldr	r3, [r5, #0]
 800e926:	b103      	cbz	r3, 800e92a <_read_r+0x1e>
 800e928:	6023      	str	r3, [r4, #0]
 800e92a:	bd38      	pop	{r3, r4, r5, pc}
 800e92c:	2000fd14 	.word	0x2000fd14

0800e930 <_sbrk_r>:
 800e930:	b538      	push	{r3, r4, r5, lr}
 800e932:	4d06      	ldr	r5, [pc, #24]	@ (800e94c <_sbrk_r+0x1c>)
 800e934:	2300      	movs	r3, #0
 800e936:	4604      	mov	r4, r0
 800e938:	4608      	mov	r0, r1
 800e93a:	602b      	str	r3, [r5, #0]
 800e93c:	f7f3 f93e 	bl	8001bbc <_sbrk>
 800e940:	1c43      	adds	r3, r0, #1
 800e942:	d102      	bne.n	800e94a <_sbrk_r+0x1a>
 800e944:	682b      	ldr	r3, [r5, #0]
 800e946:	b103      	cbz	r3, 800e94a <_sbrk_r+0x1a>
 800e948:	6023      	str	r3, [r4, #0]
 800e94a:	bd38      	pop	{r3, r4, r5, pc}
 800e94c:	2000fd14 	.word	0x2000fd14

0800e950 <_write_r>:
 800e950:	b538      	push	{r3, r4, r5, lr}
 800e952:	4d07      	ldr	r5, [pc, #28]	@ (800e970 <_write_r+0x20>)
 800e954:	4604      	mov	r4, r0
 800e956:	4608      	mov	r0, r1
 800e958:	4611      	mov	r1, r2
 800e95a:	2200      	movs	r2, #0
 800e95c:	602a      	str	r2, [r5, #0]
 800e95e:	461a      	mov	r2, r3
 800e960:	f7f3 f8dc 	bl	8001b1c <_write>
 800e964:	1c43      	adds	r3, r0, #1
 800e966:	d102      	bne.n	800e96e <_write_r+0x1e>
 800e968:	682b      	ldr	r3, [r5, #0]
 800e96a:	b103      	cbz	r3, 800e96e <_write_r+0x1e>
 800e96c:	6023      	str	r3, [r4, #0]
 800e96e:	bd38      	pop	{r3, r4, r5, pc}
 800e970:	2000fd14 	.word	0x2000fd14

0800e974 <__errno>:
 800e974:	4b01      	ldr	r3, [pc, #4]	@ (800e97c <__errno+0x8>)
 800e976:	6818      	ldr	r0, [r3, #0]
 800e978:	4770      	bx	lr
 800e97a:	bf00      	nop
 800e97c:	2000011c 	.word	0x2000011c

0800e980 <__libc_init_array>:
 800e980:	b570      	push	{r4, r5, r6, lr}
 800e982:	4d0d      	ldr	r5, [pc, #52]	@ (800e9b8 <__libc_init_array+0x38>)
 800e984:	4c0d      	ldr	r4, [pc, #52]	@ (800e9bc <__libc_init_array+0x3c>)
 800e986:	1b64      	subs	r4, r4, r5
 800e988:	10a4      	asrs	r4, r4, #2
 800e98a:	2600      	movs	r6, #0
 800e98c:	42a6      	cmp	r6, r4
 800e98e:	d109      	bne.n	800e9a4 <__libc_init_array+0x24>
 800e990:	4d0b      	ldr	r5, [pc, #44]	@ (800e9c0 <__libc_init_array+0x40>)
 800e992:	4c0c      	ldr	r4, [pc, #48]	@ (800e9c4 <__libc_init_array+0x44>)
 800e994:	f001 fdfc 	bl	8010590 <_init>
 800e998:	1b64      	subs	r4, r4, r5
 800e99a:	10a4      	asrs	r4, r4, #2
 800e99c:	2600      	movs	r6, #0
 800e99e:	42a6      	cmp	r6, r4
 800e9a0:	d105      	bne.n	800e9ae <__libc_init_array+0x2e>
 800e9a2:	bd70      	pop	{r4, r5, r6, pc}
 800e9a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800e9a8:	4798      	blx	r3
 800e9aa:	3601      	adds	r6, #1
 800e9ac:	e7ee      	b.n	800e98c <__libc_init_array+0xc>
 800e9ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800e9b2:	4798      	blx	r3
 800e9b4:	3601      	adds	r6, #1
 800e9b6:	e7f2      	b.n	800e99e <__libc_init_array+0x1e>
 800e9b8:	08010a34 	.word	0x08010a34
 800e9bc:	08010a34 	.word	0x08010a34
 800e9c0:	08010a34 	.word	0x08010a34
 800e9c4:	08010a38 	.word	0x08010a38

0800e9c8 <__retarget_lock_init_recursive>:
 800e9c8:	4770      	bx	lr

0800e9ca <__retarget_lock_acquire_recursive>:
 800e9ca:	4770      	bx	lr

0800e9cc <__retarget_lock_release_recursive>:
 800e9cc:	4770      	bx	lr

0800e9ce <memcpy>:
 800e9ce:	440a      	add	r2, r1
 800e9d0:	4291      	cmp	r1, r2
 800e9d2:	f100 33ff 	add.w	r3, r0, #4294967295
 800e9d6:	d100      	bne.n	800e9da <memcpy+0xc>
 800e9d8:	4770      	bx	lr
 800e9da:	b510      	push	{r4, lr}
 800e9dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e9e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e9e4:	4291      	cmp	r1, r2
 800e9e6:	d1f9      	bne.n	800e9dc <memcpy+0xe>
 800e9e8:	bd10      	pop	{r4, pc}

0800e9ea <quorem>:
 800e9ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9ee:	6903      	ldr	r3, [r0, #16]
 800e9f0:	690c      	ldr	r4, [r1, #16]
 800e9f2:	42a3      	cmp	r3, r4
 800e9f4:	4607      	mov	r7, r0
 800e9f6:	db7e      	blt.n	800eaf6 <quorem+0x10c>
 800e9f8:	3c01      	subs	r4, #1
 800e9fa:	f101 0814 	add.w	r8, r1, #20
 800e9fe:	00a3      	lsls	r3, r4, #2
 800ea00:	f100 0514 	add.w	r5, r0, #20
 800ea04:	9300      	str	r3, [sp, #0]
 800ea06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ea0a:	9301      	str	r3, [sp, #4]
 800ea0c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ea10:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ea14:	3301      	adds	r3, #1
 800ea16:	429a      	cmp	r2, r3
 800ea18:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ea1c:	fbb2 f6f3 	udiv	r6, r2, r3
 800ea20:	d32e      	bcc.n	800ea80 <quorem+0x96>
 800ea22:	f04f 0a00 	mov.w	sl, #0
 800ea26:	46c4      	mov	ip, r8
 800ea28:	46ae      	mov	lr, r5
 800ea2a:	46d3      	mov	fp, sl
 800ea2c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ea30:	b298      	uxth	r0, r3
 800ea32:	fb06 a000 	mla	r0, r6, r0, sl
 800ea36:	0c02      	lsrs	r2, r0, #16
 800ea38:	0c1b      	lsrs	r3, r3, #16
 800ea3a:	fb06 2303 	mla	r3, r6, r3, r2
 800ea3e:	f8de 2000 	ldr.w	r2, [lr]
 800ea42:	b280      	uxth	r0, r0
 800ea44:	b292      	uxth	r2, r2
 800ea46:	1a12      	subs	r2, r2, r0
 800ea48:	445a      	add	r2, fp
 800ea4a:	f8de 0000 	ldr.w	r0, [lr]
 800ea4e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ea52:	b29b      	uxth	r3, r3
 800ea54:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ea58:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ea5c:	b292      	uxth	r2, r2
 800ea5e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ea62:	45e1      	cmp	r9, ip
 800ea64:	f84e 2b04 	str.w	r2, [lr], #4
 800ea68:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ea6c:	d2de      	bcs.n	800ea2c <quorem+0x42>
 800ea6e:	9b00      	ldr	r3, [sp, #0]
 800ea70:	58eb      	ldr	r3, [r5, r3]
 800ea72:	b92b      	cbnz	r3, 800ea80 <quorem+0x96>
 800ea74:	9b01      	ldr	r3, [sp, #4]
 800ea76:	3b04      	subs	r3, #4
 800ea78:	429d      	cmp	r5, r3
 800ea7a:	461a      	mov	r2, r3
 800ea7c:	d32f      	bcc.n	800eade <quorem+0xf4>
 800ea7e:	613c      	str	r4, [r7, #16]
 800ea80:	4638      	mov	r0, r7
 800ea82:	f001 f8c9 	bl	800fc18 <__mcmp>
 800ea86:	2800      	cmp	r0, #0
 800ea88:	db25      	blt.n	800ead6 <quorem+0xec>
 800ea8a:	4629      	mov	r1, r5
 800ea8c:	2000      	movs	r0, #0
 800ea8e:	f858 2b04 	ldr.w	r2, [r8], #4
 800ea92:	f8d1 c000 	ldr.w	ip, [r1]
 800ea96:	fa1f fe82 	uxth.w	lr, r2
 800ea9a:	fa1f f38c 	uxth.w	r3, ip
 800ea9e:	eba3 030e 	sub.w	r3, r3, lr
 800eaa2:	4403      	add	r3, r0
 800eaa4:	0c12      	lsrs	r2, r2, #16
 800eaa6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800eaaa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800eaae:	b29b      	uxth	r3, r3
 800eab0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eab4:	45c1      	cmp	r9, r8
 800eab6:	f841 3b04 	str.w	r3, [r1], #4
 800eaba:	ea4f 4022 	mov.w	r0, r2, asr #16
 800eabe:	d2e6      	bcs.n	800ea8e <quorem+0xa4>
 800eac0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800eac4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800eac8:	b922      	cbnz	r2, 800ead4 <quorem+0xea>
 800eaca:	3b04      	subs	r3, #4
 800eacc:	429d      	cmp	r5, r3
 800eace:	461a      	mov	r2, r3
 800ead0:	d30b      	bcc.n	800eaea <quorem+0x100>
 800ead2:	613c      	str	r4, [r7, #16]
 800ead4:	3601      	adds	r6, #1
 800ead6:	4630      	mov	r0, r6
 800ead8:	b003      	add	sp, #12
 800eada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eade:	6812      	ldr	r2, [r2, #0]
 800eae0:	3b04      	subs	r3, #4
 800eae2:	2a00      	cmp	r2, #0
 800eae4:	d1cb      	bne.n	800ea7e <quorem+0x94>
 800eae6:	3c01      	subs	r4, #1
 800eae8:	e7c6      	b.n	800ea78 <quorem+0x8e>
 800eaea:	6812      	ldr	r2, [r2, #0]
 800eaec:	3b04      	subs	r3, #4
 800eaee:	2a00      	cmp	r2, #0
 800eaf0:	d1ef      	bne.n	800ead2 <quorem+0xe8>
 800eaf2:	3c01      	subs	r4, #1
 800eaf4:	e7ea      	b.n	800eacc <quorem+0xe2>
 800eaf6:	2000      	movs	r0, #0
 800eaf8:	e7ee      	b.n	800ead8 <quorem+0xee>
 800eafa:	0000      	movs	r0, r0
 800eafc:	0000      	movs	r0, r0
	...

0800eb00 <_dtoa_r>:
 800eb00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb04:	69c7      	ldr	r7, [r0, #28]
 800eb06:	b097      	sub	sp, #92	@ 0x5c
 800eb08:	ed8d 0b04 	vstr	d0, [sp, #16]
 800eb0c:	ec55 4b10 	vmov	r4, r5, d0
 800eb10:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800eb12:	9107      	str	r1, [sp, #28]
 800eb14:	4681      	mov	r9, r0
 800eb16:	920c      	str	r2, [sp, #48]	@ 0x30
 800eb18:	9311      	str	r3, [sp, #68]	@ 0x44
 800eb1a:	b97f      	cbnz	r7, 800eb3c <_dtoa_r+0x3c>
 800eb1c:	2010      	movs	r0, #16
 800eb1e:	f7ff f84f 	bl	800dbc0 <malloc>
 800eb22:	4602      	mov	r2, r0
 800eb24:	f8c9 001c 	str.w	r0, [r9, #28]
 800eb28:	b920      	cbnz	r0, 800eb34 <_dtoa_r+0x34>
 800eb2a:	4ba9      	ldr	r3, [pc, #676]	@ (800edd0 <_dtoa_r+0x2d0>)
 800eb2c:	21ef      	movs	r1, #239	@ 0xef
 800eb2e:	48a9      	ldr	r0, [pc, #676]	@ (800edd4 <_dtoa_r+0x2d4>)
 800eb30:	f001 fa26 	bl	800ff80 <__assert_func>
 800eb34:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800eb38:	6007      	str	r7, [r0, #0]
 800eb3a:	60c7      	str	r7, [r0, #12]
 800eb3c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800eb40:	6819      	ldr	r1, [r3, #0]
 800eb42:	b159      	cbz	r1, 800eb5c <_dtoa_r+0x5c>
 800eb44:	685a      	ldr	r2, [r3, #4]
 800eb46:	604a      	str	r2, [r1, #4]
 800eb48:	2301      	movs	r3, #1
 800eb4a:	4093      	lsls	r3, r2
 800eb4c:	608b      	str	r3, [r1, #8]
 800eb4e:	4648      	mov	r0, r9
 800eb50:	f000 fe30 	bl	800f7b4 <_Bfree>
 800eb54:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800eb58:	2200      	movs	r2, #0
 800eb5a:	601a      	str	r2, [r3, #0]
 800eb5c:	1e2b      	subs	r3, r5, #0
 800eb5e:	bfb9      	ittee	lt
 800eb60:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800eb64:	9305      	strlt	r3, [sp, #20]
 800eb66:	2300      	movge	r3, #0
 800eb68:	6033      	strge	r3, [r6, #0]
 800eb6a:	9f05      	ldr	r7, [sp, #20]
 800eb6c:	4b9a      	ldr	r3, [pc, #616]	@ (800edd8 <_dtoa_r+0x2d8>)
 800eb6e:	bfbc      	itt	lt
 800eb70:	2201      	movlt	r2, #1
 800eb72:	6032      	strlt	r2, [r6, #0]
 800eb74:	43bb      	bics	r3, r7
 800eb76:	d112      	bne.n	800eb9e <_dtoa_r+0x9e>
 800eb78:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800eb7a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800eb7e:	6013      	str	r3, [r2, #0]
 800eb80:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800eb84:	4323      	orrs	r3, r4
 800eb86:	f000 855a 	beq.w	800f63e <_dtoa_r+0xb3e>
 800eb8a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800eb8c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800edec <_dtoa_r+0x2ec>
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	f000 855c 	beq.w	800f64e <_dtoa_r+0xb4e>
 800eb96:	f10a 0303 	add.w	r3, sl, #3
 800eb9a:	f000 bd56 	b.w	800f64a <_dtoa_r+0xb4a>
 800eb9e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800eba2:	2200      	movs	r2, #0
 800eba4:	ec51 0b17 	vmov	r0, r1, d7
 800eba8:	2300      	movs	r3, #0
 800ebaa:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800ebae:	f7f1 ffbb 	bl	8000b28 <__aeabi_dcmpeq>
 800ebb2:	4680      	mov	r8, r0
 800ebb4:	b158      	cbz	r0, 800ebce <_dtoa_r+0xce>
 800ebb6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ebb8:	2301      	movs	r3, #1
 800ebba:	6013      	str	r3, [r2, #0]
 800ebbc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ebbe:	b113      	cbz	r3, 800ebc6 <_dtoa_r+0xc6>
 800ebc0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ebc2:	4b86      	ldr	r3, [pc, #536]	@ (800eddc <_dtoa_r+0x2dc>)
 800ebc4:	6013      	str	r3, [r2, #0]
 800ebc6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800edf0 <_dtoa_r+0x2f0>
 800ebca:	f000 bd40 	b.w	800f64e <_dtoa_r+0xb4e>
 800ebce:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800ebd2:	aa14      	add	r2, sp, #80	@ 0x50
 800ebd4:	a915      	add	r1, sp, #84	@ 0x54
 800ebd6:	4648      	mov	r0, r9
 800ebd8:	f001 f8ce 	bl	800fd78 <__d2b>
 800ebdc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ebe0:	9002      	str	r0, [sp, #8]
 800ebe2:	2e00      	cmp	r6, #0
 800ebe4:	d078      	beq.n	800ecd8 <_dtoa_r+0x1d8>
 800ebe6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ebe8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800ebec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ebf0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ebf4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ebf8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ebfc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ec00:	4619      	mov	r1, r3
 800ec02:	2200      	movs	r2, #0
 800ec04:	4b76      	ldr	r3, [pc, #472]	@ (800ede0 <_dtoa_r+0x2e0>)
 800ec06:	f7f1 fb6f 	bl	80002e8 <__aeabi_dsub>
 800ec0a:	a36b      	add	r3, pc, #428	@ (adr r3, 800edb8 <_dtoa_r+0x2b8>)
 800ec0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec10:	f7f1 fd22 	bl	8000658 <__aeabi_dmul>
 800ec14:	a36a      	add	r3, pc, #424	@ (adr r3, 800edc0 <_dtoa_r+0x2c0>)
 800ec16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec1a:	f7f1 fb67 	bl	80002ec <__adddf3>
 800ec1e:	4604      	mov	r4, r0
 800ec20:	4630      	mov	r0, r6
 800ec22:	460d      	mov	r5, r1
 800ec24:	f7f1 fcae 	bl	8000584 <__aeabi_i2d>
 800ec28:	a367      	add	r3, pc, #412	@ (adr r3, 800edc8 <_dtoa_r+0x2c8>)
 800ec2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec2e:	f7f1 fd13 	bl	8000658 <__aeabi_dmul>
 800ec32:	4602      	mov	r2, r0
 800ec34:	460b      	mov	r3, r1
 800ec36:	4620      	mov	r0, r4
 800ec38:	4629      	mov	r1, r5
 800ec3a:	f7f1 fb57 	bl	80002ec <__adddf3>
 800ec3e:	4604      	mov	r4, r0
 800ec40:	460d      	mov	r5, r1
 800ec42:	f7f1 ffb9 	bl	8000bb8 <__aeabi_d2iz>
 800ec46:	2200      	movs	r2, #0
 800ec48:	4607      	mov	r7, r0
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	4620      	mov	r0, r4
 800ec4e:	4629      	mov	r1, r5
 800ec50:	f7f1 ff74 	bl	8000b3c <__aeabi_dcmplt>
 800ec54:	b140      	cbz	r0, 800ec68 <_dtoa_r+0x168>
 800ec56:	4638      	mov	r0, r7
 800ec58:	f7f1 fc94 	bl	8000584 <__aeabi_i2d>
 800ec5c:	4622      	mov	r2, r4
 800ec5e:	462b      	mov	r3, r5
 800ec60:	f7f1 ff62 	bl	8000b28 <__aeabi_dcmpeq>
 800ec64:	b900      	cbnz	r0, 800ec68 <_dtoa_r+0x168>
 800ec66:	3f01      	subs	r7, #1
 800ec68:	2f16      	cmp	r7, #22
 800ec6a:	d852      	bhi.n	800ed12 <_dtoa_r+0x212>
 800ec6c:	4b5d      	ldr	r3, [pc, #372]	@ (800ede4 <_dtoa_r+0x2e4>)
 800ec6e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ec72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec76:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ec7a:	f7f1 ff5f 	bl	8000b3c <__aeabi_dcmplt>
 800ec7e:	2800      	cmp	r0, #0
 800ec80:	d049      	beq.n	800ed16 <_dtoa_r+0x216>
 800ec82:	3f01      	subs	r7, #1
 800ec84:	2300      	movs	r3, #0
 800ec86:	9310      	str	r3, [sp, #64]	@ 0x40
 800ec88:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ec8a:	1b9b      	subs	r3, r3, r6
 800ec8c:	1e5a      	subs	r2, r3, #1
 800ec8e:	bf45      	ittet	mi
 800ec90:	f1c3 0301 	rsbmi	r3, r3, #1
 800ec94:	9300      	strmi	r3, [sp, #0]
 800ec96:	2300      	movpl	r3, #0
 800ec98:	2300      	movmi	r3, #0
 800ec9a:	9206      	str	r2, [sp, #24]
 800ec9c:	bf54      	ite	pl
 800ec9e:	9300      	strpl	r3, [sp, #0]
 800eca0:	9306      	strmi	r3, [sp, #24]
 800eca2:	2f00      	cmp	r7, #0
 800eca4:	db39      	blt.n	800ed1a <_dtoa_r+0x21a>
 800eca6:	9b06      	ldr	r3, [sp, #24]
 800eca8:	970d      	str	r7, [sp, #52]	@ 0x34
 800ecaa:	443b      	add	r3, r7
 800ecac:	9306      	str	r3, [sp, #24]
 800ecae:	2300      	movs	r3, #0
 800ecb0:	9308      	str	r3, [sp, #32]
 800ecb2:	9b07      	ldr	r3, [sp, #28]
 800ecb4:	2b09      	cmp	r3, #9
 800ecb6:	d863      	bhi.n	800ed80 <_dtoa_r+0x280>
 800ecb8:	2b05      	cmp	r3, #5
 800ecba:	bfc4      	itt	gt
 800ecbc:	3b04      	subgt	r3, #4
 800ecbe:	9307      	strgt	r3, [sp, #28]
 800ecc0:	9b07      	ldr	r3, [sp, #28]
 800ecc2:	f1a3 0302 	sub.w	r3, r3, #2
 800ecc6:	bfcc      	ite	gt
 800ecc8:	2400      	movgt	r4, #0
 800ecca:	2401      	movle	r4, #1
 800eccc:	2b03      	cmp	r3, #3
 800ecce:	d863      	bhi.n	800ed98 <_dtoa_r+0x298>
 800ecd0:	e8df f003 	tbb	[pc, r3]
 800ecd4:	2b375452 	.word	0x2b375452
 800ecd8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800ecdc:	441e      	add	r6, r3
 800ecde:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ece2:	2b20      	cmp	r3, #32
 800ece4:	bfc1      	itttt	gt
 800ece6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ecea:	409f      	lslgt	r7, r3
 800ecec:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ecf0:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ecf4:	bfd6      	itet	le
 800ecf6:	f1c3 0320 	rsble	r3, r3, #32
 800ecfa:	ea47 0003 	orrgt.w	r0, r7, r3
 800ecfe:	fa04 f003 	lslle.w	r0, r4, r3
 800ed02:	f7f1 fc2f 	bl	8000564 <__aeabi_ui2d>
 800ed06:	2201      	movs	r2, #1
 800ed08:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ed0c:	3e01      	subs	r6, #1
 800ed0e:	9212      	str	r2, [sp, #72]	@ 0x48
 800ed10:	e776      	b.n	800ec00 <_dtoa_r+0x100>
 800ed12:	2301      	movs	r3, #1
 800ed14:	e7b7      	b.n	800ec86 <_dtoa_r+0x186>
 800ed16:	9010      	str	r0, [sp, #64]	@ 0x40
 800ed18:	e7b6      	b.n	800ec88 <_dtoa_r+0x188>
 800ed1a:	9b00      	ldr	r3, [sp, #0]
 800ed1c:	1bdb      	subs	r3, r3, r7
 800ed1e:	9300      	str	r3, [sp, #0]
 800ed20:	427b      	negs	r3, r7
 800ed22:	9308      	str	r3, [sp, #32]
 800ed24:	2300      	movs	r3, #0
 800ed26:	930d      	str	r3, [sp, #52]	@ 0x34
 800ed28:	e7c3      	b.n	800ecb2 <_dtoa_r+0x1b2>
 800ed2a:	2301      	movs	r3, #1
 800ed2c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ed2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ed30:	eb07 0b03 	add.w	fp, r7, r3
 800ed34:	f10b 0301 	add.w	r3, fp, #1
 800ed38:	2b01      	cmp	r3, #1
 800ed3a:	9303      	str	r3, [sp, #12]
 800ed3c:	bfb8      	it	lt
 800ed3e:	2301      	movlt	r3, #1
 800ed40:	e006      	b.n	800ed50 <_dtoa_r+0x250>
 800ed42:	2301      	movs	r3, #1
 800ed44:	9309      	str	r3, [sp, #36]	@ 0x24
 800ed46:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	dd28      	ble.n	800ed9e <_dtoa_r+0x29e>
 800ed4c:	469b      	mov	fp, r3
 800ed4e:	9303      	str	r3, [sp, #12]
 800ed50:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800ed54:	2100      	movs	r1, #0
 800ed56:	2204      	movs	r2, #4
 800ed58:	f102 0514 	add.w	r5, r2, #20
 800ed5c:	429d      	cmp	r5, r3
 800ed5e:	d926      	bls.n	800edae <_dtoa_r+0x2ae>
 800ed60:	6041      	str	r1, [r0, #4]
 800ed62:	4648      	mov	r0, r9
 800ed64:	f000 fce6 	bl	800f734 <_Balloc>
 800ed68:	4682      	mov	sl, r0
 800ed6a:	2800      	cmp	r0, #0
 800ed6c:	d142      	bne.n	800edf4 <_dtoa_r+0x2f4>
 800ed6e:	4b1e      	ldr	r3, [pc, #120]	@ (800ede8 <_dtoa_r+0x2e8>)
 800ed70:	4602      	mov	r2, r0
 800ed72:	f240 11af 	movw	r1, #431	@ 0x1af
 800ed76:	e6da      	b.n	800eb2e <_dtoa_r+0x2e>
 800ed78:	2300      	movs	r3, #0
 800ed7a:	e7e3      	b.n	800ed44 <_dtoa_r+0x244>
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	e7d5      	b.n	800ed2c <_dtoa_r+0x22c>
 800ed80:	2401      	movs	r4, #1
 800ed82:	2300      	movs	r3, #0
 800ed84:	9307      	str	r3, [sp, #28]
 800ed86:	9409      	str	r4, [sp, #36]	@ 0x24
 800ed88:	f04f 3bff 	mov.w	fp, #4294967295
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	f8cd b00c 	str.w	fp, [sp, #12]
 800ed92:	2312      	movs	r3, #18
 800ed94:	920c      	str	r2, [sp, #48]	@ 0x30
 800ed96:	e7db      	b.n	800ed50 <_dtoa_r+0x250>
 800ed98:	2301      	movs	r3, #1
 800ed9a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ed9c:	e7f4      	b.n	800ed88 <_dtoa_r+0x288>
 800ed9e:	f04f 0b01 	mov.w	fp, #1
 800eda2:	f8cd b00c 	str.w	fp, [sp, #12]
 800eda6:	465b      	mov	r3, fp
 800eda8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800edac:	e7d0      	b.n	800ed50 <_dtoa_r+0x250>
 800edae:	3101      	adds	r1, #1
 800edb0:	0052      	lsls	r2, r2, #1
 800edb2:	e7d1      	b.n	800ed58 <_dtoa_r+0x258>
 800edb4:	f3af 8000 	nop.w
 800edb8:	636f4361 	.word	0x636f4361
 800edbc:	3fd287a7 	.word	0x3fd287a7
 800edc0:	8b60c8b3 	.word	0x8b60c8b3
 800edc4:	3fc68a28 	.word	0x3fc68a28
 800edc8:	509f79fb 	.word	0x509f79fb
 800edcc:	3fd34413 	.word	0x3fd34413
 800edd0:	080106f9 	.word	0x080106f9
 800edd4:	08010710 	.word	0x08010710
 800edd8:	7ff00000 	.word	0x7ff00000
 800eddc:	080106c9 	.word	0x080106c9
 800ede0:	3ff80000 	.word	0x3ff80000
 800ede4:	08010860 	.word	0x08010860
 800ede8:	08010768 	.word	0x08010768
 800edec:	080106f5 	.word	0x080106f5
 800edf0:	080106c8 	.word	0x080106c8
 800edf4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800edf8:	6018      	str	r0, [r3, #0]
 800edfa:	9b03      	ldr	r3, [sp, #12]
 800edfc:	2b0e      	cmp	r3, #14
 800edfe:	f200 80a1 	bhi.w	800ef44 <_dtoa_r+0x444>
 800ee02:	2c00      	cmp	r4, #0
 800ee04:	f000 809e 	beq.w	800ef44 <_dtoa_r+0x444>
 800ee08:	2f00      	cmp	r7, #0
 800ee0a:	dd33      	ble.n	800ee74 <_dtoa_r+0x374>
 800ee0c:	4b9c      	ldr	r3, [pc, #624]	@ (800f080 <_dtoa_r+0x580>)
 800ee0e:	f007 020f 	and.w	r2, r7, #15
 800ee12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ee16:	ed93 7b00 	vldr	d7, [r3]
 800ee1a:	05f8      	lsls	r0, r7, #23
 800ee1c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800ee20:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ee24:	d516      	bpl.n	800ee54 <_dtoa_r+0x354>
 800ee26:	4b97      	ldr	r3, [pc, #604]	@ (800f084 <_dtoa_r+0x584>)
 800ee28:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ee2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ee30:	f7f1 fd3c 	bl	80008ac <__aeabi_ddiv>
 800ee34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ee38:	f004 040f 	and.w	r4, r4, #15
 800ee3c:	2603      	movs	r6, #3
 800ee3e:	4d91      	ldr	r5, [pc, #580]	@ (800f084 <_dtoa_r+0x584>)
 800ee40:	b954      	cbnz	r4, 800ee58 <_dtoa_r+0x358>
 800ee42:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ee46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ee4a:	f7f1 fd2f 	bl	80008ac <__aeabi_ddiv>
 800ee4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ee52:	e028      	b.n	800eea6 <_dtoa_r+0x3a6>
 800ee54:	2602      	movs	r6, #2
 800ee56:	e7f2      	b.n	800ee3e <_dtoa_r+0x33e>
 800ee58:	07e1      	lsls	r1, r4, #31
 800ee5a:	d508      	bpl.n	800ee6e <_dtoa_r+0x36e>
 800ee5c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ee60:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ee64:	f7f1 fbf8 	bl	8000658 <__aeabi_dmul>
 800ee68:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ee6c:	3601      	adds	r6, #1
 800ee6e:	1064      	asrs	r4, r4, #1
 800ee70:	3508      	adds	r5, #8
 800ee72:	e7e5      	b.n	800ee40 <_dtoa_r+0x340>
 800ee74:	f000 80af 	beq.w	800efd6 <_dtoa_r+0x4d6>
 800ee78:	427c      	negs	r4, r7
 800ee7a:	4b81      	ldr	r3, [pc, #516]	@ (800f080 <_dtoa_r+0x580>)
 800ee7c:	4d81      	ldr	r5, [pc, #516]	@ (800f084 <_dtoa_r+0x584>)
 800ee7e:	f004 020f 	and.w	r2, r4, #15
 800ee82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ee86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee8a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ee8e:	f7f1 fbe3 	bl	8000658 <__aeabi_dmul>
 800ee92:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ee96:	1124      	asrs	r4, r4, #4
 800ee98:	2300      	movs	r3, #0
 800ee9a:	2602      	movs	r6, #2
 800ee9c:	2c00      	cmp	r4, #0
 800ee9e:	f040 808f 	bne.w	800efc0 <_dtoa_r+0x4c0>
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d1d3      	bne.n	800ee4e <_dtoa_r+0x34e>
 800eea6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800eea8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	f000 8094 	beq.w	800efda <_dtoa_r+0x4da>
 800eeb2:	4b75      	ldr	r3, [pc, #468]	@ (800f088 <_dtoa_r+0x588>)
 800eeb4:	2200      	movs	r2, #0
 800eeb6:	4620      	mov	r0, r4
 800eeb8:	4629      	mov	r1, r5
 800eeba:	f7f1 fe3f 	bl	8000b3c <__aeabi_dcmplt>
 800eebe:	2800      	cmp	r0, #0
 800eec0:	f000 808b 	beq.w	800efda <_dtoa_r+0x4da>
 800eec4:	9b03      	ldr	r3, [sp, #12]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	f000 8087 	beq.w	800efda <_dtoa_r+0x4da>
 800eecc:	f1bb 0f00 	cmp.w	fp, #0
 800eed0:	dd34      	ble.n	800ef3c <_dtoa_r+0x43c>
 800eed2:	4620      	mov	r0, r4
 800eed4:	4b6d      	ldr	r3, [pc, #436]	@ (800f08c <_dtoa_r+0x58c>)
 800eed6:	2200      	movs	r2, #0
 800eed8:	4629      	mov	r1, r5
 800eeda:	f7f1 fbbd 	bl	8000658 <__aeabi_dmul>
 800eede:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800eee2:	f107 38ff 	add.w	r8, r7, #4294967295
 800eee6:	3601      	adds	r6, #1
 800eee8:	465c      	mov	r4, fp
 800eeea:	4630      	mov	r0, r6
 800eeec:	f7f1 fb4a 	bl	8000584 <__aeabi_i2d>
 800eef0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eef4:	f7f1 fbb0 	bl	8000658 <__aeabi_dmul>
 800eef8:	4b65      	ldr	r3, [pc, #404]	@ (800f090 <_dtoa_r+0x590>)
 800eefa:	2200      	movs	r2, #0
 800eefc:	f7f1 f9f6 	bl	80002ec <__adddf3>
 800ef00:	4605      	mov	r5, r0
 800ef02:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ef06:	2c00      	cmp	r4, #0
 800ef08:	d16a      	bne.n	800efe0 <_dtoa_r+0x4e0>
 800ef0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ef0e:	4b61      	ldr	r3, [pc, #388]	@ (800f094 <_dtoa_r+0x594>)
 800ef10:	2200      	movs	r2, #0
 800ef12:	f7f1 f9e9 	bl	80002e8 <__aeabi_dsub>
 800ef16:	4602      	mov	r2, r0
 800ef18:	460b      	mov	r3, r1
 800ef1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ef1e:	462a      	mov	r2, r5
 800ef20:	4633      	mov	r3, r6
 800ef22:	f7f1 fe29 	bl	8000b78 <__aeabi_dcmpgt>
 800ef26:	2800      	cmp	r0, #0
 800ef28:	f040 8298 	bne.w	800f45c <_dtoa_r+0x95c>
 800ef2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ef30:	462a      	mov	r2, r5
 800ef32:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ef36:	f7f1 fe01 	bl	8000b3c <__aeabi_dcmplt>
 800ef3a:	bb38      	cbnz	r0, 800ef8c <_dtoa_r+0x48c>
 800ef3c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800ef40:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ef44:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	f2c0 8157 	blt.w	800f1fa <_dtoa_r+0x6fa>
 800ef4c:	2f0e      	cmp	r7, #14
 800ef4e:	f300 8154 	bgt.w	800f1fa <_dtoa_r+0x6fa>
 800ef52:	4b4b      	ldr	r3, [pc, #300]	@ (800f080 <_dtoa_r+0x580>)
 800ef54:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ef58:	ed93 7b00 	vldr	d7, [r3]
 800ef5c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	ed8d 7b00 	vstr	d7, [sp]
 800ef64:	f280 80e5 	bge.w	800f132 <_dtoa_r+0x632>
 800ef68:	9b03      	ldr	r3, [sp, #12]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	f300 80e1 	bgt.w	800f132 <_dtoa_r+0x632>
 800ef70:	d10c      	bne.n	800ef8c <_dtoa_r+0x48c>
 800ef72:	4b48      	ldr	r3, [pc, #288]	@ (800f094 <_dtoa_r+0x594>)
 800ef74:	2200      	movs	r2, #0
 800ef76:	ec51 0b17 	vmov	r0, r1, d7
 800ef7a:	f7f1 fb6d 	bl	8000658 <__aeabi_dmul>
 800ef7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ef82:	f7f1 fdef 	bl	8000b64 <__aeabi_dcmpge>
 800ef86:	2800      	cmp	r0, #0
 800ef88:	f000 8266 	beq.w	800f458 <_dtoa_r+0x958>
 800ef8c:	2400      	movs	r4, #0
 800ef8e:	4625      	mov	r5, r4
 800ef90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ef92:	4656      	mov	r6, sl
 800ef94:	ea6f 0803 	mvn.w	r8, r3
 800ef98:	2700      	movs	r7, #0
 800ef9a:	4621      	mov	r1, r4
 800ef9c:	4648      	mov	r0, r9
 800ef9e:	f000 fc09 	bl	800f7b4 <_Bfree>
 800efa2:	2d00      	cmp	r5, #0
 800efa4:	f000 80bd 	beq.w	800f122 <_dtoa_r+0x622>
 800efa8:	b12f      	cbz	r7, 800efb6 <_dtoa_r+0x4b6>
 800efaa:	42af      	cmp	r7, r5
 800efac:	d003      	beq.n	800efb6 <_dtoa_r+0x4b6>
 800efae:	4639      	mov	r1, r7
 800efb0:	4648      	mov	r0, r9
 800efb2:	f000 fbff 	bl	800f7b4 <_Bfree>
 800efb6:	4629      	mov	r1, r5
 800efb8:	4648      	mov	r0, r9
 800efba:	f000 fbfb 	bl	800f7b4 <_Bfree>
 800efbe:	e0b0      	b.n	800f122 <_dtoa_r+0x622>
 800efc0:	07e2      	lsls	r2, r4, #31
 800efc2:	d505      	bpl.n	800efd0 <_dtoa_r+0x4d0>
 800efc4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800efc8:	f7f1 fb46 	bl	8000658 <__aeabi_dmul>
 800efcc:	3601      	adds	r6, #1
 800efce:	2301      	movs	r3, #1
 800efd0:	1064      	asrs	r4, r4, #1
 800efd2:	3508      	adds	r5, #8
 800efd4:	e762      	b.n	800ee9c <_dtoa_r+0x39c>
 800efd6:	2602      	movs	r6, #2
 800efd8:	e765      	b.n	800eea6 <_dtoa_r+0x3a6>
 800efda:	9c03      	ldr	r4, [sp, #12]
 800efdc:	46b8      	mov	r8, r7
 800efde:	e784      	b.n	800eeea <_dtoa_r+0x3ea>
 800efe0:	4b27      	ldr	r3, [pc, #156]	@ (800f080 <_dtoa_r+0x580>)
 800efe2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800efe4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800efe8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800efec:	4454      	add	r4, sl
 800efee:	2900      	cmp	r1, #0
 800eff0:	d054      	beq.n	800f09c <_dtoa_r+0x59c>
 800eff2:	4929      	ldr	r1, [pc, #164]	@ (800f098 <_dtoa_r+0x598>)
 800eff4:	2000      	movs	r0, #0
 800eff6:	f7f1 fc59 	bl	80008ac <__aeabi_ddiv>
 800effa:	4633      	mov	r3, r6
 800effc:	462a      	mov	r2, r5
 800effe:	f7f1 f973 	bl	80002e8 <__aeabi_dsub>
 800f002:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f006:	4656      	mov	r6, sl
 800f008:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f00c:	f7f1 fdd4 	bl	8000bb8 <__aeabi_d2iz>
 800f010:	4605      	mov	r5, r0
 800f012:	f7f1 fab7 	bl	8000584 <__aeabi_i2d>
 800f016:	4602      	mov	r2, r0
 800f018:	460b      	mov	r3, r1
 800f01a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f01e:	f7f1 f963 	bl	80002e8 <__aeabi_dsub>
 800f022:	3530      	adds	r5, #48	@ 0x30
 800f024:	4602      	mov	r2, r0
 800f026:	460b      	mov	r3, r1
 800f028:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f02c:	f806 5b01 	strb.w	r5, [r6], #1
 800f030:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f034:	f7f1 fd82 	bl	8000b3c <__aeabi_dcmplt>
 800f038:	2800      	cmp	r0, #0
 800f03a:	d172      	bne.n	800f122 <_dtoa_r+0x622>
 800f03c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f040:	4911      	ldr	r1, [pc, #68]	@ (800f088 <_dtoa_r+0x588>)
 800f042:	2000      	movs	r0, #0
 800f044:	f7f1 f950 	bl	80002e8 <__aeabi_dsub>
 800f048:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f04c:	f7f1 fd76 	bl	8000b3c <__aeabi_dcmplt>
 800f050:	2800      	cmp	r0, #0
 800f052:	f040 80b4 	bne.w	800f1be <_dtoa_r+0x6be>
 800f056:	42a6      	cmp	r6, r4
 800f058:	f43f af70 	beq.w	800ef3c <_dtoa_r+0x43c>
 800f05c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800f060:	4b0a      	ldr	r3, [pc, #40]	@ (800f08c <_dtoa_r+0x58c>)
 800f062:	2200      	movs	r2, #0
 800f064:	f7f1 faf8 	bl	8000658 <__aeabi_dmul>
 800f068:	4b08      	ldr	r3, [pc, #32]	@ (800f08c <_dtoa_r+0x58c>)
 800f06a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f06e:	2200      	movs	r2, #0
 800f070:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f074:	f7f1 faf0 	bl	8000658 <__aeabi_dmul>
 800f078:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f07c:	e7c4      	b.n	800f008 <_dtoa_r+0x508>
 800f07e:	bf00      	nop
 800f080:	08010860 	.word	0x08010860
 800f084:	08010838 	.word	0x08010838
 800f088:	3ff00000 	.word	0x3ff00000
 800f08c:	40240000 	.word	0x40240000
 800f090:	401c0000 	.word	0x401c0000
 800f094:	40140000 	.word	0x40140000
 800f098:	3fe00000 	.word	0x3fe00000
 800f09c:	4631      	mov	r1, r6
 800f09e:	4628      	mov	r0, r5
 800f0a0:	f7f1 fada 	bl	8000658 <__aeabi_dmul>
 800f0a4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f0a8:	9413      	str	r4, [sp, #76]	@ 0x4c
 800f0aa:	4656      	mov	r6, sl
 800f0ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f0b0:	f7f1 fd82 	bl	8000bb8 <__aeabi_d2iz>
 800f0b4:	4605      	mov	r5, r0
 800f0b6:	f7f1 fa65 	bl	8000584 <__aeabi_i2d>
 800f0ba:	4602      	mov	r2, r0
 800f0bc:	460b      	mov	r3, r1
 800f0be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f0c2:	f7f1 f911 	bl	80002e8 <__aeabi_dsub>
 800f0c6:	3530      	adds	r5, #48	@ 0x30
 800f0c8:	f806 5b01 	strb.w	r5, [r6], #1
 800f0cc:	4602      	mov	r2, r0
 800f0ce:	460b      	mov	r3, r1
 800f0d0:	42a6      	cmp	r6, r4
 800f0d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f0d6:	f04f 0200 	mov.w	r2, #0
 800f0da:	d124      	bne.n	800f126 <_dtoa_r+0x626>
 800f0dc:	4baf      	ldr	r3, [pc, #700]	@ (800f39c <_dtoa_r+0x89c>)
 800f0de:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800f0e2:	f7f1 f903 	bl	80002ec <__adddf3>
 800f0e6:	4602      	mov	r2, r0
 800f0e8:	460b      	mov	r3, r1
 800f0ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f0ee:	f7f1 fd43 	bl	8000b78 <__aeabi_dcmpgt>
 800f0f2:	2800      	cmp	r0, #0
 800f0f4:	d163      	bne.n	800f1be <_dtoa_r+0x6be>
 800f0f6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f0fa:	49a8      	ldr	r1, [pc, #672]	@ (800f39c <_dtoa_r+0x89c>)
 800f0fc:	2000      	movs	r0, #0
 800f0fe:	f7f1 f8f3 	bl	80002e8 <__aeabi_dsub>
 800f102:	4602      	mov	r2, r0
 800f104:	460b      	mov	r3, r1
 800f106:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f10a:	f7f1 fd17 	bl	8000b3c <__aeabi_dcmplt>
 800f10e:	2800      	cmp	r0, #0
 800f110:	f43f af14 	beq.w	800ef3c <_dtoa_r+0x43c>
 800f114:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800f116:	1e73      	subs	r3, r6, #1
 800f118:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f11a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f11e:	2b30      	cmp	r3, #48	@ 0x30
 800f120:	d0f8      	beq.n	800f114 <_dtoa_r+0x614>
 800f122:	4647      	mov	r7, r8
 800f124:	e03b      	b.n	800f19e <_dtoa_r+0x69e>
 800f126:	4b9e      	ldr	r3, [pc, #632]	@ (800f3a0 <_dtoa_r+0x8a0>)
 800f128:	f7f1 fa96 	bl	8000658 <__aeabi_dmul>
 800f12c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f130:	e7bc      	b.n	800f0ac <_dtoa_r+0x5ac>
 800f132:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800f136:	4656      	mov	r6, sl
 800f138:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f13c:	4620      	mov	r0, r4
 800f13e:	4629      	mov	r1, r5
 800f140:	f7f1 fbb4 	bl	80008ac <__aeabi_ddiv>
 800f144:	f7f1 fd38 	bl	8000bb8 <__aeabi_d2iz>
 800f148:	4680      	mov	r8, r0
 800f14a:	f7f1 fa1b 	bl	8000584 <__aeabi_i2d>
 800f14e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f152:	f7f1 fa81 	bl	8000658 <__aeabi_dmul>
 800f156:	4602      	mov	r2, r0
 800f158:	460b      	mov	r3, r1
 800f15a:	4620      	mov	r0, r4
 800f15c:	4629      	mov	r1, r5
 800f15e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f162:	f7f1 f8c1 	bl	80002e8 <__aeabi_dsub>
 800f166:	f806 4b01 	strb.w	r4, [r6], #1
 800f16a:	9d03      	ldr	r5, [sp, #12]
 800f16c:	eba6 040a 	sub.w	r4, r6, sl
 800f170:	42a5      	cmp	r5, r4
 800f172:	4602      	mov	r2, r0
 800f174:	460b      	mov	r3, r1
 800f176:	d133      	bne.n	800f1e0 <_dtoa_r+0x6e0>
 800f178:	f7f1 f8b8 	bl	80002ec <__adddf3>
 800f17c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f180:	4604      	mov	r4, r0
 800f182:	460d      	mov	r5, r1
 800f184:	f7f1 fcf8 	bl	8000b78 <__aeabi_dcmpgt>
 800f188:	b9c0      	cbnz	r0, 800f1bc <_dtoa_r+0x6bc>
 800f18a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f18e:	4620      	mov	r0, r4
 800f190:	4629      	mov	r1, r5
 800f192:	f7f1 fcc9 	bl	8000b28 <__aeabi_dcmpeq>
 800f196:	b110      	cbz	r0, 800f19e <_dtoa_r+0x69e>
 800f198:	f018 0f01 	tst.w	r8, #1
 800f19c:	d10e      	bne.n	800f1bc <_dtoa_r+0x6bc>
 800f19e:	9902      	ldr	r1, [sp, #8]
 800f1a0:	4648      	mov	r0, r9
 800f1a2:	f000 fb07 	bl	800f7b4 <_Bfree>
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	7033      	strb	r3, [r6, #0]
 800f1aa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f1ac:	3701      	adds	r7, #1
 800f1ae:	601f      	str	r7, [r3, #0]
 800f1b0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	f000 824b 	beq.w	800f64e <_dtoa_r+0xb4e>
 800f1b8:	601e      	str	r6, [r3, #0]
 800f1ba:	e248      	b.n	800f64e <_dtoa_r+0xb4e>
 800f1bc:	46b8      	mov	r8, r7
 800f1be:	4633      	mov	r3, r6
 800f1c0:	461e      	mov	r6, r3
 800f1c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f1c6:	2a39      	cmp	r2, #57	@ 0x39
 800f1c8:	d106      	bne.n	800f1d8 <_dtoa_r+0x6d8>
 800f1ca:	459a      	cmp	sl, r3
 800f1cc:	d1f8      	bne.n	800f1c0 <_dtoa_r+0x6c0>
 800f1ce:	2230      	movs	r2, #48	@ 0x30
 800f1d0:	f108 0801 	add.w	r8, r8, #1
 800f1d4:	f88a 2000 	strb.w	r2, [sl]
 800f1d8:	781a      	ldrb	r2, [r3, #0]
 800f1da:	3201      	adds	r2, #1
 800f1dc:	701a      	strb	r2, [r3, #0]
 800f1de:	e7a0      	b.n	800f122 <_dtoa_r+0x622>
 800f1e0:	4b6f      	ldr	r3, [pc, #444]	@ (800f3a0 <_dtoa_r+0x8a0>)
 800f1e2:	2200      	movs	r2, #0
 800f1e4:	f7f1 fa38 	bl	8000658 <__aeabi_dmul>
 800f1e8:	2200      	movs	r2, #0
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	4604      	mov	r4, r0
 800f1ee:	460d      	mov	r5, r1
 800f1f0:	f7f1 fc9a 	bl	8000b28 <__aeabi_dcmpeq>
 800f1f4:	2800      	cmp	r0, #0
 800f1f6:	d09f      	beq.n	800f138 <_dtoa_r+0x638>
 800f1f8:	e7d1      	b.n	800f19e <_dtoa_r+0x69e>
 800f1fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f1fc:	2a00      	cmp	r2, #0
 800f1fe:	f000 80ea 	beq.w	800f3d6 <_dtoa_r+0x8d6>
 800f202:	9a07      	ldr	r2, [sp, #28]
 800f204:	2a01      	cmp	r2, #1
 800f206:	f300 80cd 	bgt.w	800f3a4 <_dtoa_r+0x8a4>
 800f20a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800f20c:	2a00      	cmp	r2, #0
 800f20e:	f000 80c1 	beq.w	800f394 <_dtoa_r+0x894>
 800f212:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f216:	9c08      	ldr	r4, [sp, #32]
 800f218:	9e00      	ldr	r6, [sp, #0]
 800f21a:	9a00      	ldr	r2, [sp, #0]
 800f21c:	441a      	add	r2, r3
 800f21e:	9200      	str	r2, [sp, #0]
 800f220:	9a06      	ldr	r2, [sp, #24]
 800f222:	2101      	movs	r1, #1
 800f224:	441a      	add	r2, r3
 800f226:	4648      	mov	r0, r9
 800f228:	9206      	str	r2, [sp, #24]
 800f22a:	f000 fb77 	bl	800f91c <__i2b>
 800f22e:	4605      	mov	r5, r0
 800f230:	b166      	cbz	r6, 800f24c <_dtoa_r+0x74c>
 800f232:	9b06      	ldr	r3, [sp, #24]
 800f234:	2b00      	cmp	r3, #0
 800f236:	dd09      	ble.n	800f24c <_dtoa_r+0x74c>
 800f238:	42b3      	cmp	r3, r6
 800f23a:	9a00      	ldr	r2, [sp, #0]
 800f23c:	bfa8      	it	ge
 800f23e:	4633      	movge	r3, r6
 800f240:	1ad2      	subs	r2, r2, r3
 800f242:	9200      	str	r2, [sp, #0]
 800f244:	9a06      	ldr	r2, [sp, #24]
 800f246:	1af6      	subs	r6, r6, r3
 800f248:	1ad3      	subs	r3, r2, r3
 800f24a:	9306      	str	r3, [sp, #24]
 800f24c:	9b08      	ldr	r3, [sp, #32]
 800f24e:	b30b      	cbz	r3, 800f294 <_dtoa_r+0x794>
 800f250:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f252:	2b00      	cmp	r3, #0
 800f254:	f000 80c6 	beq.w	800f3e4 <_dtoa_r+0x8e4>
 800f258:	2c00      	cmp	r4, #0
 800f25a:	f000 80c0 	beq.w	800f3de <_dtoa_r+0x8de>
 800f25e:	4629      	mov	r1, r5
 800f260:	4622      	mov	r2, r4
 800f262:	4648      	mov	r0, r9
 800f264:	f000 fc12 	bl	800fa8c <__pow5mult>
 800f268:	9a02      	ldr	r2, [sp, #8]
 800f26a:	4601      	mov	r1, r0
 800f26c:	4605      	mov	r5, r0
 800f26e:	4648      	mov	r0, r9
 800f270:	f000 fb6a 	bl	800f948 <__multiply>
 800f274:	9902      	ldr	r1, [sp, #8]
 800f276:	4680      	mov	r8, r0
 800f278:	4648      	mov	r0, r9
 800f27a:	f000 fa9b 	bl	800f7b4 <_Bfree>
 800f27e:	9b08      	ldr	r3, [sp, #32]
 800f280:	1b1b      	subs	r3, r3, r4
 800f282:	9308      	str	r3, [sp, #32]
 800f284:	f000 80b1 	beq.w	800f3ea <_dtoa_r+0x8ea>
 800f288:	9a08      	ldr	r2, [sp, #32]
 800f28a:	4641      	mov	r1, r8
 800f28c:	4648      	mov	r0, r9
 800f28e:	f000 fbfd 	bl	800fa8c <__pow5mult>
 800f292:	9002      	str	r0, [sp, #8]
 800f294:	2101      	movs	r1, #1
 800f296:	4648      	mov	r0, r9
 800f298:	f000 fb40 	bl	800f91c <__i2b>
 800f29c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f29e:	4604      	mov	r4, r0
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	f000 81d8 	beq.w	800f656 <_dtoa_r+0xb56>
 800f2a6:	461a      	mov	r2, r3
 800f2a8:	4601      	mov	r1, r0
 800f2aa:	4648      	mov	r0, r9
 800f2ac:	f000 fbee 	bl	800fa8c <__pow5mult>
 800f2b0:	9b07      	ldr	r3, [sp, #28]
 800f2b2:	2b01      	cmp	r3, #1
 800f2b4:	4604      	mov	r4, r0
 800f2b6:	f300 809f 	bgt.w	800f3f8 <_dtoa_r+0x8f8>
 800f2ba:	9b04      	ldr	r3, [sp, #16]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	f040 8097 	bne.w	800f3f0 <_dtoa_r+0x8f0>
 800f2c2:	9b05      	ldr	r3, [sp, #20]
 800f2c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	f040 8093 	bne.w	800f3f4 <_dtoa_r+0x8f4>
 800f2ce:	9b05      	ldr	r3, [sp, #20]
 800f2d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f2d4:	0d1b      	lsrs	r3, r3, #20
 800f2d6:	051b      	lsls	r3, r3, #20
 800f2d8:	b133      	cbz	r3, 800f2e8 <_dtoa_r+0x7e8>
 800f2da:	9b00      	ldr	r3, [sp, #0]
 800f2dc:	3301      	adds	r3, #1
 800f2de:	9300      	str	r3, [sp, #0]
 800f2e0:	9b06      	ldr	r3, [sp, #24]
 800f2e2:	3301      	adds	r3, #1
 800f2e4:	9306      	str	r3, [sp, #24]
 800f2e6:	2301      	movs	r3, #1
 800f2e8:	9308      	str	r3, [sp, #32]
 800f2ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	f000 81b8 	beq.w	800f662 <_dtoa_r+0xb62>
 800f2f2:	6923      	ldr	r3, [r4, #16]
 800f2f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f2f8:	6918      	ldr	r0, [r3, #16]
 800f2fa:	f000 fac3 	bl	800f884 <__hi0bits>
 800f2fe:	f1c0 0020 	rsb	r0, r0, #32
 800f302:	9b06      	ldr	r3, [sp, #24]
 800f304:	4418      	add	r0, r3
 800f306:	f010 001f 	ands.w	r0, r0, #31
 800f30a:	f000 8082 	beq.w	800f412 <_dtoa_r+0x912>
 800f30e:	f1c0 0320 	rsb	r3, r0, #32
 800f312:	2b04      	cmp	r3, #4
 800f314:	dd73      	ble.n	800f3fe <_dtoa_r+0x8fe>
 800f316:	9b00      	ldr	r3, [sp, #0]
 800f318:	f1c0 001c 	rsb	r0, r0, #28
 800f31c:	4403      	add	r3, r0
 800f31e:	9300      	str	r3, [sp, #0]
 800f320:	9b06      	ldr	r3, [sp, #24]
 800f322:	4403      	add	r3, r0
 800f324:	4406      	add	r6, r0
 800f326:	9306      	str	r3, [sp, #24]
 800f328:	9b00      	ldr	r3, [sp, #0]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	dd05      	ble.n	800f33a <_dtoa_r+0x83a>
 800f32e:	9902      	ldr	r1, [sp, #8]
 800f330:	461a      	mov	r2, r3
 800f332:	4648      	mov	r0, r9
 800f334:	f000 fc04 	bl	800fb40 <__lshift>
 800f338:	9002      	str	r0, [sp, #8]
 800f33a:	9b06      	ldr	r3, [sp, #24]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	dd05      	ble.n	800f34c <_dtoa_r+0x84c>
 800f340:	4621      	mov	r1, r4
 800f342:	461a      	mov	r2, r3
 800f344:	4648      	mov	r0, r9
 800f346:	f000 fbfb 	bl	800fb40 <__lshift>
 800f34a:	4604      	mov	r4, r0
 800f34c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d061      	beq.n	800f416 <_dtoa_r+0x916>
 800f352:	9802      	ldr	r0, [sp, #8]
 800f354:	4621      	mov	r1, r4
 800f356:	f000 fc5f 	bl	800fc18 <__mcmp>
 800f35a:	2800      	cmp	r0, #0
 800f35c:	da5b      	bge.n	800f416 <_dtoa_r+0x916>
 800f35e:	2300      	movs	r3, #0
 800f360:	9902      	ldr	r1, [sp, #8]
 800f362:	220a      	movs	r2, #10
 800f364:	4648      	mov	r0, r9
 800f366:	f000 fa47 	bl	800f7f8 <__multadd>
 800f36a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f36c:	9002      	str	r0, [sp, #8]
 800f36e:	f107 38ff 	add.w	r8, r7, #4294967295
 800f372:	2b00      	cmp	r3, #0
 800f374:	f000 8177 	beq.w	800f666 <_dtoa_r+0xb66>
 800f378:	4629      	mov	r1, r5
 800f37a:	2300      	movs	r3, #0
 800f37c:	220a      	movs	r2, #10
 800f37e:	4648      	mov	r0, r9
 800f380:	f000 fa3a 	bl	800f7f8 <__multadd>
 800f384:	f1bb 0f00 	cmp.w	fp, #0
 800f388:	4605      	mov	r5, r0
 800f38a:	dc6f      	bgt.n	800f46c <_dtoa_r+0x96c>
 800f38c:	9b07      	ldr	r3, [sp, #28]
 800f38e:	2b02      	cmp	r3, #2
 800f390:	dc49      	bgt.n	800f426 <_dtoa_r+0x926>
 800f392:	e06b      	b.n	800f46c <_dtoa_r+0x96c>
 800f394:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f396:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f39a:	e73c      	b.n	800f216 <_dtoa_r+0x716>
 800f39c:	3fe00000 	.word	0x3fe00000
 800f3a0:	40240000 	.word	0x40240000
 800f3a4:	9b03      	ldr	r3, [sp, #12]
 800f3a6:	1e5c      	subs	r4, r3, #1
 800f3a8:	9b08      	ldr	r3, [sp, #32]
 800f3aa:	42a3      	cmp	r3, r4
 800f3ac:	db09      	blt.n	800f3c2 <_dtoa_r+0x8c2>
 800f3ae:	1b1c      	subs	r4, r3, r4
 800f3b0:	9b03      	ldr	r3, [sp, #12]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	f6bf af30 	bge.w	800f218 <_dtoa_r+0x718>
 800f3b8:	9b00      	ldr	r3, [sp, #0]
 800f3ba:	9a03      	ldr	r2, [sp, #12]
 800f3bc:	1a9e      	subs	r6, r3, r2
 800f3be:	2300      	movs	r3, #0
 800f3c0:	e72b      	b.n	800f21a <_dtoa_r+0x71a>
 800f3c2:	9b08      	ldr	r3, [sp, #32]
 800f3c4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f3c6:	9408      	str	r4, [sp, #32]
 800f3c8:	1ae3      	subs	r3, r4, r3
 800f3ca:	441a      	add	r2, r3
 800f3cc:	9e00      	ldr	r6, [sp, #0]
 800f3ce:	9b03      	ldr	r3, [sp, #12]
 800f3d0:	920d      	str	r2, [sp, #52]	@ 0x34
 800f3d2:	2400      	movs	r4, #0
 800f3d4:	e721      	b.n	800f21a <_dtoa_r+0x71a>
 800f3d6:	9c08      	ldr	r4, [sp, #32]
 800f3d8:	9e00      	ldr	r6, [sp, #0]
 800f3da:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800f3dc:	e728      	b.n	800f230 <_dtoa_r+0x730>
 800f3de:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800f3e2:	e751      	b.n	800f288 <_dtoa_r+0x788>
 800f3e4:	9a08      	ldr	r2, [sp, #32]
 800f3e6:	9902      	ldr	r1, [sp, #8]
 800f3e8:	e750      	b.n	800f28c <_dtoa_r+0x78c>
 800f3ea:	f8cd 8008 	str.w	r8, [sp, #8]
 800f3ee:	e751      	b.n	800f294 <_dtoa_r+0x794>
 800f3f0:	2300      	movs	r3, #0
 800f3f2:	e779      	b.n	800f2e8 <_dtoa_r+0x7e8>
 800f3f4:	9b04      	ldr	r3, [sp, #16]
 800f3f6:	e777      	b.n	800f2e8 <_dtoa_r+0x7e8>
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	9308      	str	r3, [sp, #32]
 800f3fc:	e779      	b.n	800f2f2 <_dtoa_r+0x7f2>
 800f3fe:	d093      	beq.n	800f328 <_dtoa_r+0x828>
 800f400:	9a00      	ldr	r2, [sp, #0]
 800f402:	331c      	adds	r3, #28
 800f404:	441a      	add	r2, r3
 800f406:	9200      	str	r2, [sp, #0]
 800f408:	9a06      	ldr	r2, [sp, #24]
 800f40a:	441a      	add	r2, r3
 800f40c:	441e      	add	r6, r3
 800f40e:	9206      	str	r2, [sp, #24]
 800f410:	e78a      	b.n	800f328 <_dtoa_r+0x828>
 800f412:	4603      	mov	r3, r0
 800f414:	e7f4      	b.n	800f400 <_dtoa_r+0x900>
 800f416:	9b03      	ldr	r3, [sp, #12]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	46b8      	mov	r8, r7
 800f41c:	dc20      	bgt.n	800f460 <_dtoa_r+0x960>
 800f41e:	469b      	mov	fp, r3
 800f420:	9b07      	ldr	r3, [sp, #28]
 800f422:	2b02      	cmp	r3, #2
 800f424:	dd1e      	ble.n	800f464 <_dtoa_r+0x964>
 800f426:	f1bb 0f00 	cmp.w	fp, #0
 800f42a:	f47f adb1 	bne.w	800ef90 <_dtoa_r+0x490>
 800f42e:	4621      	mov	r1, r4
 800f430:	465b      	mov	r3, fp
 800f432:	2205      	movs	r2, #5
 800f434:	4648      	mov	r0, r9
 800f436:	f000 f9df 	bl	800f7f8 <__multadd>
 800f43a:	4601      	mov	r1, r0
 800f43c:	4604      	mov	r4, r0
 800f43e:	9802      	ldr	r0, [sp, #8]
 800f440:	f000 fbea 	bl	800fc18 <__mcmp>
 800f444:	2800      	cmp	r0, #0
 800f446:	f77f ada3 	ble.w	800ef90 <_dtoa_r+0x490>
 800f44a:	4656      	mov	r6, sl
 800f44c:	2331      	movs	r3, #49	@ 0x31
 800f44e:	f806 3b01 	strb.w	r3, [r6], #1
 800f452:	f108 0801 	add.w	r8, r8, #1
 800f456:	e59f      	b.n	800ef98 <_dtoa_r+0x498>
 800f458:	9c03      	ldr	r4, [sp, #12]
 800f45a:	46b8      	mov	r8, r7
 800f45c:	4625      	mov	r5, r4
 800f45e:	e7f4      	b.n	800f44a <_dtoa_r+0x94a>
 800f460:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800f464:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f466:	2b00      	cmp	r3, #0
 800f468:	f000 8101 	beq.w	800f66e <_dtoa_r+0xb6e>
 800f46c:	2e00      	cmp	r6, #0
 800f46e:	dd05      	ble.n	800f47c <_dtoa_r+0x97c>
 800f470:	4629      	mov	r1, r5
 800f472:	4632      	mov	r2, r6
 800f474:	4648      	mov	r0, r9
 800f476:	f000 fb63 	bl	800fb40 <__lshift>
 800f47a:	4605      	mov	r5, r0
 800f47c:	9b08      	ldr	r3, [sp, #32]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d05c      	beq.n	800f53c <_dtoa_r+0xa3c>
 800f482:	6869      	ldr	r1, [r5, #4]
 800f484:	4648      	mov	r0, r9
 800f486:	f000 f955 	bl	800f734 <_Balloc>
 800f48a:	4606      	mov	r6, r0
 800f48c:	b928      	cbnz	r0, 800f49a <_dtoa_r+0x99a>
 800f48e:	4b82      	ldr	r3, [pc, #520]	@ (800f698 <_dtoa_r+0xb98>)
 800f490:	4602      	mov	r2, r0
 800f492:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f496:	f7ff bb4a 	b.w	800eb2e <_dtoa_r+0x2e>
 800f49a:	692a      	ldr	r2, [r5, #16]
 800f49c:	3202      	adds	r2, #2
 800f49e:	0092      	lsls	r2, r2, #2
 800f4a0:	f105 010c 	add.w	r1, r5, #12
 800f4a4:	300c      	adds	r0, #12
 800f4a6:	f7ff fa92 	bl	800e9ce <memcpy>
 800f4aa:	2201      	movs	r2, #1
 800f4ac:	4631      	mov	r1, r6
 800f4ae:	4648      	mov	r0, r9
 800f4b0:	f000 fb46 	bl	800fb40 <__lshift>
 800f4b4:	f10a 0301 	add.w	r3, sl, #1
 800f4b8:	9300      	str	r3, [sp, #0]
 800f4ba:	eb0a 030b 	add.w	r3, sl, fp
 800f4be:	9308      	str	r3, [sp, #32]
 800f4c0:	9b04      	ldr	r3, [sp, #16]
 800f4c2:	f003 0301 	and.w	r3, r3, #1
 800f4c6:	462f      	mov	r7, r5
 800f4c8:	9306      	str	r3, [sp, #24]
 800f4ca:	4605      	mov	r5, r0
 800f4cc:	9b00      	ldr	r3, [sp, #0]
 800f4ce:	9802      	ldr	r0, [sp, #8]
 800f4d0:	4621      	mov	r1, r4
 800f4d2:	f103 3bff 	add.w	fp, r3, #4294967295
 800f4d6:	f7ff fa88 	bl	800e9ea <quorem>
 800f4da:	4603      	mov	r3, r0
 800f4dc:	3330      	adds	r3, #48	@ 0x30
 800f4de:	9003      	str	r0, [sp, #12]
 800f4e0:	4639      	mov	r1, r7
 800f4e2:	9802      	ldr	r0, [sp, #8]
 800f4e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800f4e6:	f000 fb97 	bl	800fc18 <__mcmp>
 800f4ea:	462a      	mov	r2, r5
 800f4ec:	9004      	str	r0, [sp, #16]
 800f4ee:	4621      	mov	r1, r4
 800f4f0:	4648      	mov	r0, r9
 800f4f2:	f000 fbad 	bl	800fc50 <__mdiff>
 800f4f6:	68c2      	ldr	r2, [r0, #12]
 800f4f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f4fa:	4606      	mov	r6, r0
 800f4fc:	bb02      	cbnz	r2, 800f540 <_dtoa_r+0xa40>
 800f4fe:	4601      	mov	r1, r0
 800f500:	9802      	ldr	r0, [sp, #8]
 800f502:	f000 fb89 	bl	800fc18 <__mcmp>
 800f506:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f508:	4602      	mov	r2, r0
 800f50a:	4631      	mov	r1, r6
 800f50c:	4648      	mov	r0, r9
 800f50e:	920c      	str	r2, [sp, #48]	@ 0x30
 800f510:	9309      	str	r3, [sp, #36]	@ 0x24
 800f512:	f000 f94f 	bl	800f7b4 <_Bfree>
 800f516:	9b07      	ldr	r3, [sp, #28]
 800f518:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f51a:	9e00      	ldr	r6, [sp, #0]
 800f51c:	ea42 0103 	orr.w	r1, r2, r3
 800f520:	9b06      	ldr	r3, [sp, #24]
 800f522:	4319      	orrs	r1, r3
 800f524:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f526:	d10d      	bne.n	800f544 <_dtoa_r+0xa44>
 800f528:	2b39      	cmp	r3, #57	@ 0x39
 800f52a:	d027      	beq.n	800f57c <_dtoa_r+0xa7c>
 800f52c:	9a04      	ldr	r2, [sp, #16]
 800f52e:	2a00      	cmp	r2, #0
 800f530:	dd01      	ble.n	800f536 <_dtoa_r+0xa36>
 800f532:	9b03      	ldr	r3, [sp, #12]
 800f534:	3331      	adds	r3, #49	@ 0x31
 800f536:	f88b 3000 	strb.w	r3, [fp]
 800f53a:	e52e      	b.n	800ef9a <_dtoa_r+0x49a>
 800f53c:	4628      	mov	r0, r5
 800f53e:	e7b9      	b.n	800f4b4 <_dtoa_r+0x9b4>
 800f540:	2201      	movs	r2, #1
 800f542:	e7e2      	b.n	800f50a <_dtoa_r+0xa0a>
 800f544:	9904      	ldr	r1, [sp, #16]
 800f546:	2900      	cmp	r1, #0
 800f548:	db04      	blt.n	800f554 <_dtoa_r+0xa54>
 800f54a:	9807      	ldr	r0, [sp, #28]
 800f54c:	4301      	orrs	r1, r0
 800f54e:	9806      	ldr	r0, [sp, #24]
 800f550:	4301      	orrs	r1, r0
 800f552:	d120      	bne.n	800f596 <_dtoa_r+0xa96>
 800f554:	2a00      	cmp	r2, #0
 800f556:	ddee      	ble.n	800f536 <_dtoa_r+0xa36>
 800f558:	9902      	ldr	r1, [sp, #8]
 800f55a:	9300      	str	r3, [sp, #0]
 800f55c:	2201      	movs	r2, #1
 800f55e:	4648      	mov	r0, r9
 800f560:	f000 faee 	bl	800fb40 <__lshift>
 800f564:	4621      	mov	r1, r4
 800f566:	9002      	str	r0, [sp, #8]
 800f568:	f000 fb56 	bl	800fc18 <__mcmp>
 800f56c:	2800      	cmp	r0, #0
 800f56e:	9b00      	ldr	r3, [sp, #0]
 800f570:	dc02      	bgt.n	800f578 <_dtoa_r+0xa78>
 800f572:	d1e0      	bne.n	800f536 <_dtoa_r+0xa36>
 800f574:	07da      	lsls	r2, r3, #31
 800f576:	d5de      	bpl.n	800f536 <_dtoa_r+0xa36>
 800f578:	2b39      	cmp	r3, #57	@ 0x39
 800f57a:	d1da      	bne.n	800f532 <_dtoa_r+0xa32>
 800f57c:	2339      	movs	r3, #57	@ 0x39
 800f57e:	f88b 3000 	strb.w	r3, [fp]
 800f582:	4633      	mov	r3, r6
 800f584:	461e      	mov	r6, r3
 800f586:	3b01      	subs	r3, #1
 800f588:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f58c:	2a39      	cmp	r2, #57	@ 0x39
 800f58e:	d04e      	beq.n	800f62e <_dtoa_r+0xb2e>
 800f590:	3201      	adds	r2, #1
 800f592:	701a      	strb	r2, [r3, #0]
 800f594:	e501      	b.n	800ef9a <_dtoa_r+0x49a>
 800f596:	2a00      	cmp	r2, #0
 800f598:	dd03      	ble.n	800f5a2 <_dtoa_r+0xaa2>
 800f59a:	2b39      	cmp	r3, #57	@ 0x39
 800f59c:	d0ee      	beq.n	800f57c <_dtoa_r+0xa7c>
 800f59e:	3301      	adds	r3, #1
 800f5a0:	e7c9      	b.n	800f536 <_dtoa_r+0xa36>
 800f5a2:	9a00      	ldr	r2, [sp, #0]
 800f5a4:	9908      	ldr	r1, [sp, #32]
 800f5a6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f5aa:	428a      	cmp	r2, r1
 800f5ac:	d028      	beq.n	800f600 <_dtoa_r+0xb00>
 800f5ae:	9902      	ldr	r1, [sp, #8]
 800f5b0:	2300      	movs	r3, #0
 800f5b2:	220a      	movs	r2, #10
 800f5b4:	4648      	mov	r0, r9
 800f5b6:	f000 f91f 	bl	800f7f8 <__multadd>
 800f5ba:	42af      	cmp	r7, r5
 800f5bc:	9002      	str	r0, [sp, #8]
 800f5be:	f04f 0300 	mov.w	r3, #0
 800f5c2:	f04f 020a 	mov.w	r2, #10
 800f5c6:	4639      	mov	r1, r7
 800f5c8:	4648      	mov	r0, r9
 800f5ca:	d107      	bne.n	800f5dc <_dtoa_r+0xadc>
 800f5cc:	f000 f914 	bl	800f7f8 <__multadd>
 800f5d0:	4607      	mov	r7, r0
 800f5d2:	4605      	mov	r5, r0
 800f5d4:	9b00      	ldr	r3, [sp, #0]
 800f5d6:	3301      	adds	r3, #1
 800f5d8:	9300      	str	r3, [sp, #0]
 800f5da:	e777      	b.n	800f4cc <_dtoa_r+0x9cc>
 800f5dc:	f000 f90c 	bl	800f7f8 <__multadd>
 800f5e0:	4629      	mov	r1, r5
 800f5e2:	4607      	mov	r7, r0
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	220a      	movs	r2, #10
 800f5e8:	4648      	mov	r0, r9
 800f5ea:	f000 f905 	bl	800f7f8 <__multadd>
 800f5ee:	4605      	mov	r5, r0
 800f5f0:	e7f0      	b.n	800f5d4 <_dtoa_r+0xad4>
 800f5f2:	f1bb 0f00 	cmp.w	fp, #0
 800f5f6:	bfcc      	ite	gt
 800f5f8:	465e      	movgt	r6, fp
 800f5fa:	2601      	movle	r6, #1
 800f5fc:	4456      	add	r6, sl
 800f5fe:	2700      	movs	r7, #0
 800f600:	9902      	ldr	r1, [sp, #8]
 800f602:	9300      	str	r3, [sp, #0]
 800f604:	2201      	movs	r2, #1
 800f606:	4648      	mov	r0, r9
 800f608:	f000 fa9a 	bl	800fb40 <__lshift>
 800f60c:	4621      	mov	r1, r4
 800f60e:	9002      	str	r0, [sp, #8]
 800f610:	f000 fb02 	bl	800fc18 <__mcmp>
 800f614:	2800      	cmp	r0, #0
 800f616:	dcb4      	bgt.n	800f582 <_dtoa_r+0xa82>
 800f618:	d102      	bne.n	800f620 <_dtoa_r+0xb20>
 800f61a:	9b00      	ldr	r3, [sp, #0]
 800f61c:	07db      	lsls	r3, r3, #31
 800f61e:	d4b0      	bmi.n	800f582 <_dtoa_r+0xa82>
 800f620:	4633      	mov	r3, r6
 800f622:	461e      	mov	r6, r3
 800f624:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f628:	2a30      	cmp	r2, #48	@ 0x30
 800f62a:	d0fa      	beq.n	800f622 <_dtoa_r+0xb22>
 800f62c:	e4b5      	b.n	800ef9a <_dtoa_r+0x49a>
 800f62e:	459a      	cmp	sl, r3
 800f630:	d1a8      	bne.n	800f584 <_dtoa_r+0xa84>
 800f632:	2331      	movs	r3, #49	@ 0x31
 800f634:	f108 0801 	add.w	r8, r8, #1
 800f638:	f88a 3000 	strb.w	r3, [sl]
 800f63c:	e4ad      	b.n	800ef9a <_dtoa_r+0x49a>
 800f63e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f640:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800f69c <_dtoa_r+0xb9c>
 800f644:	b11b      	cbz	r3, 800f64e <_dtoa_r+0xb4e>
 800f646:	f10a 0308 	add.w	r3, sl, #8
 800f64a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800f64c:	6013      	str	r3, [r2, #0]
 800f64e:	4650      	mov	r0, sl
 800f650:	b017      	add	sp, #92	@ 0x5c
 800f652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f656:	9b07      	ldr	r3, [sp, #28]
 800f658:	2b01      	cmp	r3, #1
 800f65a:	f77f ae2e 	ble.w	800f2ba <_dtoa_r+0x7ba>
 800f65e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f660:	9308      	str	r3, [sp, #32]
 800f662:	2001      	movs	r0, #1
 800f664:	e64d      	b.n	800f302 <_dtoa_r+0x802>
 800f666:	f1bb 0f00 	cmp.w	fp, #0
 800f66a:	f77f aed9 	ble.w	800f420 <_dtoa_r+0x920>
 800f66e:	4656      	mov	r6, sl
 800f670:	9802      	ldr	r0, [sp, #8]
 800f672:	4621      	mov	r1, r4
 800f674:	f7ff f9b9 	bl	800e9ea <quorem>
 800f678:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800f67c:	f806 3b01 	strb.w	r3, [r6], #1
 800f680:	eba6 020a 	sub.w	r2, r6, sl
 800f684:	4593      	cmp	fp, r2
 800f686:	ddb4      	ble.n	800f5f2 <_dtoa_r+0xaf2>
 800f688:	9902      	ldr	r1, [sp, #8]
 800f68a:	2300      	movs	r3, #0
 800f68c:	220a      	movs	r2, #10
 800f68e:	4648      	mov	r0, r9
 800f690:	f000 f8b2 	bl	800f7f8 <__multadd>
 800f694:	9002      	str	r0, [sp, #8]
 800f696:	e7eb      	b.n	800f670 <_dtoa_r+0xb70>
 800f698:	08010768 	.word	0x08010768
 800f69c:	080106ec 	.word	0x080106ec

0800f6a0 <_free_r>:
 800f6a0:	b538      	push	{r3, r4, r5, lr}
 800f6a2:	4605      	mov	r5, r0
 800f6a4:	2900      	cmp	r1, #0
 800f6a6:	d041      	beq.n	800f72c <_free_r+0x8c>
 800f6a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f6ac:	1f0c      	subs	r4, r1, #4
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	bfb8      	it	lt
 800f6b2:	18e4      	addlt	r4, r4, r3
 800f6b4:	f7fe fb36 	bl	800dd24 <__malloc_lock>
 800f6b8:	4a1d      	ldr	r2, [pc, #116]	@ (800f730 <_free_r+0x90>)
 800f6ba:	6813      	ldr	r3, [r2, #0]
 800f6bc:	b933      	cbnz	r3, 800f6cc <_free_r+0x2c>
 800f6be:	6063      	str	r3, [r4, #4]
 800f6c0:	6014      	str	r4, [r2, #0]
 800f6c2:	4628      	mov	r0, r5
 800f6c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f6c8:	f7fe bb32 	b.w	800dd30 <__malloc_unlock>
 800f6cc:	42a3      	cmp	r3, r4
 800f6ce:	d908      	bls.n	800f6e2 <_free_r+0x42>
 800f6d0:	6820      	ldr	r0, [r4, #0]
 800f6d2:	1821      	adds	r1, r4, r0
 800f6d4:	428b      	cmp	r3, r1
 800f6d6:	bf01      	itttt	eq
 800f6d8:	6819      	ldreq	r1, [r3, #0]
 800f6da:	685b      	ldreq	r3, [r3, #4]
 800f6dc:	1809      	addeq	r1, r1, r0
 800f6de:	6021      	streq	r1, [r4, #0]
 800f6e0:	e7ed      	b.n	800f6be <_free_r+0x1e>
 800f6e2:	461a      	mov	r2, r3
 800f6e4:	685b      	ldr	r3, [r3, #4]
 800f6e6:	b10b      	cbz	r3, 800f6ec <_free_r+0x4c>
 800f6e8:	42a3      	cmp	r3, r4
 800f6ea:	d9fa      	bls.n	800f6e2 <_free_r+0x42>
 800f6ec:	6811      	ldr	r1, [r2, #0]
 800f6ee:	1850      	adds	r0, r2, r1
 800f6f0:	42a0      	cmp	r0, r4
 800f6f2:	d10b      	bne.n	800f70c <_free_r+0x6c>
 800f6f4:	6820      	ldr	r0, [r4, #0]
 800f6f6:	4401      	add	r1, r0
 800f6f8:	1850      	adds	r0, r2, r1
 800f6fa:	4283      	cmp	r3, r0
 800f6fc:	6011      	str	r1, [r2, #0]
 800f6fe:	d1e0      	bne.n	800f6c2 <_free_r+0x22>
 800f700:	6818      	ldr	r0, [r3, #0]
 800f702:	685b      	ldr	r3, [r3, #4]
 800f704:	6053      	str	r3, [r2, #4]
 800f706:	4408      	add	r0, r1
 800f708:	6010      	str	r0, [r2, #0]
 800f70a:	e7da      	b.n	800f6c2 <_free_r+0x22>
 800f70c:	d902      	bls.n	800f714 <_free_r+0x74>
 800f70e:	230c      	movs	r3, #12
 800f710:	602b      	str	r3, [r5, #0]
 800f712:	e7d6      	b.n	800f6c2 <_free_r+0x22>
 800f714:	6820      	ldr	r0, [r4, #0]
 800f716:	1821      	adds	r1, r4, r0
 800f718:	428b      	cmp	r3, r1
 800f71a:	bf04      	itt	eq
 800f71c:	6819      	ldreq	r1, [r3, #0]
 800f71e:	685b      	ldreq	r3, [r3, #4]
 800f720:	6063      	str	r3, [r4, #4]
 800f722:	bf04      	itt	eq
 800f724:	1809      	addeq	r1, r1, r0
 800f726:	6021      	streq	r1, [r4, #0]
 800f728:	6054      	str	r4, [r2, #4]
 800f72a:	e7ca      	b.n	800f6c2 <_free_r+0x22>
 800f72c:	bd38      	pop	{r3, r4, r5, pc}
 800f72e:	bf00      	nop
 800f730:	2000fbd4 	.word	0x2000fbd4

0800f734 <_Balloc>:
 800f734:	b570      	push	{r4, r5, r6, lr}
 800f736:	69c6      	ldr	r6, [r0, #28]
 800f738:	4604      	mov	r4, r0
 800f73a:	460d      	mov	r5, r1
 800f73c:	b976      	cbnz	r6, 800f75c <_Balloc+0x28>
 800f73e:	2010      	movs	r0, #16
 800f740:	f7fe fa3e 	bl	800dbc0 <malloc>
 800f744:	4602      	mov	r2, r0
 800f746:	61e0      	str	r0, [r4, #28]
 800f748:	b920      	cbnz	r0, 800f754 <_Balloc+0x20>
 800f74a:	4b18      	ldr	r3, [pc, #96]	@ (800f7ac <_Balloc+0x78>)
 800f74c:	4818      	ldr	r0, [pc, #96]	@ (800f7b0 <_Balloc+0x7c>)
 800f74e:	216b      	movs	r1, #107	@ 0x6b
 800f750:	f000 fc16 	bl	800ff80 <__assert_func>
 800f754:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f758:	6006      	str	r6, [r0, #0]
 800f75a:	60c6      	str	r6, [r0, #12]
 800f75c:	69e6      	ldr	r6, [r4, #28]
 800f75e:	68f3      	ldr	r3, [r6, #12]
 800f760:	b183      	cbz	r3, 800f784 <_Balloc+0x50>
 800f762:	69e3      	ldr	r3, [r4, #28]
 800f764:	68db      	ldr	r3, [r3, #12]
 800f766:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f76a:	b9b8      	cbnz	r0, 800f79c <_Balloc+0x68>
 800f76c:	2101      	movs	r1, #1
 800f76e:	fa01 f605 	lsl.w	r6, r1, r5
 800f772:	1d72      	adds	r2, r6, #5
 800f774:	0092      	lsls	r2, r2, #2
 800f776:	4620      	mov	r0, r4
 800f778:	f000 fc20 	bl	800ffbc <_calloc_r>
 800f77c:	b160      	cbz	r0, 800f798 <_Balloc+0x64>
 800f77e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f782:	e00e      	b.n	800f7a2 <_Balloc+0x6e>
 800f784:	2221      	movs	r2, #33	@ 0x21
 800f786:	2104      	movs	r1, #4
 800f788:	4620      	mov	r0, r4
 800f78a:	f000 fc17 	bl	800ffbc <_calloc_r>
 800f78e:	69e3      	ldr	r3, [r4, #28]
 800f790:	60f0      	str	r0, [r6, #12]
 800f792:	68db      	ldr	r3, [r3, #12]
 800f794:	2b00      	cmp	r3, #0
 800f796:	d1e4      	bne.n	800f762 <_Balloc+0x2e>
 800f798:	2000      	movs	r0, #0
 800f79a:	bd70      	pop	{r4, r5, r6, pc}
 800f79c:	6802      	ldr	r2, [r0, #0]
 800f79e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f7a2:	2300      	movs	r3, #0
 800f7a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f7a8:	e7f7      	b.n	800f79a <_Balloc+0x66>
 800f7aa:	bf00      	nop
 800f7ac:	080106f9 	.word	0x080106f9
 800f7b0:	08010779 	.word	0x08010779

0800f7b4 <_Bfree>:
 800f7b4:	b570      	push	{r4, r5, r6, lr}
 800f7b6:	69c6      	ldr	r6, [r0, #28]
 800f7b8:	4605      	mov	r5, r0
 800f7ba:	460c      	mov	r4, r1
 800f7bc:	b976      	cbnz	r6, 800f7dc <_Bfree+0x28>
 800f7be:	2010      	movs	r0, #16
 800f7c0:	f7fe f9fe 	bl	800dbc0 <malloc>
 800f7c4:	4602      	mov	r2, r0
 800f7c6:	61e8      	str	r0, [r5, #28]
 800f7c8:	b920      	cbnz	r0, 800f7d4 <_Bfree+0x20>
 800f7ca:	4b09      	ldr	r3, [pc, #36]	@ (800f7f0 <_Bfree+0x3c>)
 800f7cc:	4809      	ldr	r0, [pc, #36]	@ (800f7f4 <_Bfree+0x40>)
 800f7ce:	218f      	movs	r1, #143	@ 0x8f
 800f7d0:	f000 fbd6 	bl	800ff80 <__assert_func>
 800f7d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f7d8:	6006      	str	r6, [r0, #0]
 800f7da:	60c6      	str	r6, [r0, #12]
 800f7dc:	b13c      	cbz	r4, 800f7ee <_Bfree+0x3a>
 800f7de:	69eb      	ldr	r3, [r5, #28]
 800f7e0:	6862      	ldr	r2, [r4, #4]
 800f7e2:	68db      	ldr	r3, [r3, #12]
 800f7e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f7e8:	6021      	str	r1, [r4, #0]
 800f7ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f7ee:	bd70      	pop	{r4, r5, r6, pc}
 800f7f0:	080106f9 	.word	0x080106f9
 800f7f4:	08010779 	.word	0x08010779

0800f7f8 <__multadd>:
 800f7f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7fc:	690d      	ldr	r5, [r1, #16]
 800f7fe:	4607      	mov	r7, r0
 800f800:	460c      	mov	r4, r1
 800f802:	461e      	mov	r6, r3
 800f804:	f101 0c14 	add.w	ip, r1, #20
 800f808:	2000      	movs	r0, #0
 800f80a:	f8dc 3000 	ldr.w	r3, [ip]
 800f80e:	b299      	uxth	r1, r3
 800f810:	fb02 6101 	mla	r1, r2, r1, r6
 800f814:	0c1e      	lsrs	r6, r3, #16
 800f816:	0c0b      	lsrs	r3, r1, #16
 800f818:	fb02 3306 	mla	r3, r2, r6, r3
 800f81c:	b289      	uxth	r1, r1
 800f81e:	3001      	adds	r0, #1
 800f820:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f824:	4285      	cmp	r5, r0
 800f826:	f84c 1b04 	str.w	r1, [ip], #4
 800f82a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f82e:	dcec      	bgt.n	800f80a <__multadd+0x12>
 800f830:	b30e      	cbz	r6, 800f876 <__multadd+0x7e>
 800f832:	68a3      	ldr	r3, [r4, #8]
 800f834:	42ab      	cmp	r3, r5
 800f836:	dc19      	bgt.n	800f86c <__multadd+0x74>
 800f838:	6861      	ldr	r1, [r4, #4]
 800f83a:	4638      	mov	r0, r7
 800f83c:	3101      	adds	r1, #1
 800f83e:	f7ff ff79 	bl	800f734 <_Balloc>
 800f842:	4680      	mov	r8, r0
 800f844:	b928      	cbnz	r0, 800f852 <__multadd+0x5a>
 800f846:	4602      	mov	r2, r0
 800f848:	4b0c      	ldr	r3, [pc, #48]	@ (800f87c <__multadd+0x84>)
 800f84a:	480d      	ldr	r0, [pc, #52]	@ (800f880 <__multadd+0x88>)
 800f84c:	21ba      	movs	r1, #186	@ 0xba
 800f84e:	f000 fb97 	bl	800ff80 <__assert_func>
 800f852:	6922      	ldr	r2, [r4, #16]
 800f854:	3202      	adds	r2, #2
 800f856:	f104 010c 	add.w	r1, r4, #12
 800f85a:	0092      	lsls	r2, r2, #2
 800f85c:	300c      	adds	r0, #12
 800f85e:	f7ff f8b6 	bl	800e9ce <memcpy>
 800f862:	4621      	mov	r1, r4
 800f864:	4638      	mov	r0, r7
 800f866:	f7ff ffa5 	bl	800f7b4 <_Bfree>
 800f86a:	4644      	mov	r4, r8
 800f86c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f870:	3501      	adds	r5, #1
 800f872:	615e      	str	r6, [r3, #20]
 800f874:	6125      	str	r5, [r4, #16]
 800f876:	4620      	mov	r0, r4
 800f878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f87c:	08010768 	.word	0x08010768
 800f880:	08010779 	.word	0x08010779

0800f884 <__hi0bits>:
 800f884:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f888:	4603      	mov	r3, r0
 800f88a:	bf36      	itet	cc
 800f88c:	0403      	lslcc	r3, r0, #16
 800f88e:	2000      	movcs	r0, #0
 800f890:	2010      	movcc	r0, #16
 800f892:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f896:	bf3c      	itt	cc
 800f898:	021b      	lslcc	r3, r3, #8
 800f89a:	3008      	addcc	r0, #8
 800f89c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f8a0:	bf3c      	itt	cc
 800f8a2:	011b      	lslcc	r3, r3, #4
 800f8a4:	3004      	addcc	r0, #4
 800f8a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f8aa:	bf3c      	itt	cc
 800f8ac:	009b      	lslcc	r3, r3, #2
 800f8ae:	3002      	addcc	r0, #2
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	db05      	blt.n	800f8c0 <__hi0bits+0x3c>
 800f8b4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f8b8:	f100 0001 	add.w	r0, r0, #1
 800f8bc:	bf08      	it	eq
 800f8be:	2020      	moveq	r0, #32
 800f8c0:	4770      	bx	lr

0800f8c2 <__lo0bits>:
 800f8c2:	6803      	ldr	r3, [r0, #0]
 800f8c4:	4602      	mov	r2, r0
 800f8c6:	f013 0007 	ands.w	r0, r3, #7
 800f8ca:	d00b      	beq.n	800f8e4 <__lo0bits+0x22>
 800f8cc:	07d9      	lsls	r1, r3, #31
 800f8ce:	d421      	bmi.n	800f914 <__lo0bits+0x52>
 800f8d0:	0798      	lsls	r0, r3, #30
 800f8d2:	bf49      	itett	mi
 800f8d4:	085b      	lsrmi	r3, r3, #1
 800f8d6:	089b      	lsrpl	r3, r3, #2
 800f8d8:	2001      	movmi	r0, #1
 800f8da:	6013      	strmi	r3, [r2, #0]
 800f8dc:	bf5c      	itt	pl
 800f8de:	6013      	strpl	r3, [r2, #0]
 800f8e0:	2002      	movpl	r0, #2
 800f8e2:	4770      	bx	lr
 800f8e4:	b299      	uxth	r1, r3
 800f8e6:	b909      	cbnz	r1, 800f8ec <__lo0bits+0x2a>
 800f8e8:	0c1b      	lsrs	r3, r3, #16
 800f8ea:	2010      	movs	r0, #16
 800f8ec:	b2d9      	uxtb	r1, r3
 800f8ee:	b909      	cbnz	r1, 800f8f4 <__lo0bits+0x32>
 800f8f0:	3008      	adds	r0, #8
 800f8f2:	0a1b      	lsrs	r3, r3, #8
 800f8f4:	0719      	lsls	r1, r3, #28
 800f8f6:	bf04      	itt	eq
 800f8f8:	091b      	lsreq	r3, r3, #4
 800f8fa:	3004      	addeq	r0, #4
 800f8fc:	0799      	lsls	r1, r3, #30
 800f8fe:	bf04      	itt	eq
 800f900:	089b      	lsreq	r3, r3, #2
 800f902:	3002      	addeq	r0, #2
 800f904:	07d9      	lsls	r1, r3, #31
 800f906:	d403      	bmi.n	800f910 <__lo0bits+0x4e>
 800f908:	085b      	lsrs	r3, r3, #1
 800f90a:	f100 0001 	add.w	r0, r0, #1
 800f90e:	d003      	beq.n	800f918 <__lo0bits+0x56>
 800f910:	6013      	str	r3, [r2, #0]
 800f912:	4770      	bx	lr
 800f914:	2000      	movs	r0, #0
 800f916:	4770      	bx	lr
 800f918:	2020      	movs	r0, #32
 800f91a:	4770      	bx	lr

0800f91c <__i2b>:
 800f91c:	b510      	push	{r4, lr}
 800f91e:	460c      	mov	r4, r1
 800f920:	2101      	movs	r1, #1
 800f922:	f7ff ff07 	bl	800f734 <_Balloc>
 800f926:	4602      	mov	r2, r0
 800f928:	b928      	cbnz	r0, 800f936 <__i2b+0x1a>
 800f92a:	4b05      	ldr	r3, [pc, #20]	@ (800f940 <__i2b+0x24>)
 800f92c:	4805      	ldr	r0, [pc, #20]	@ (800f944 <__i2b+0x28>)
 800f92e:	f240 1145 	movw	r1, #325	@ 0x145
 800f932:	f000 fb25 	bl	800ff80 <__assert_func>
 800f936:	2301      	movs	r3, #1
 800f938:	6144      	str	r4, [r0, #20]
 800f93a:	6103      	str	r3, [r0, #16]
 800f93c:	bd10      	pop	{r4, pc}
 800f93e:	bf00      	nop
 800f940:	08010768 	.word	0x08010768
 800f944:	08010779 	.word	0x08010779

0800f948 <__multiply>:
 800f948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f94c:	4617      	mov	r7, r2
 800f94e:	690a      	ldr	r2, [r1, #16]
 800f950:	693b      	ldr	r3, [r7, #16]
 800f952:	429a      	cmp	r2, r3
 800f954:	bfa8      	it	ge
 800f956:	463b      	movge	r3, r7
 800f958:	4689      	mov	r9, r1
 800f95a:	bfa4      	itt	ge
 800f95c:	460f      	movge	r7, r1
 800f95e:	4699      	movge	r9, r3
 800f960:	693d      	ldr	r5, [r7, #16]
 800f962:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f966:	68bb      	ldr	r3, [r7, #8]
 800f968:	6879      	ldr	r1, [r7, #4]
 800f96a:	eb05 060a 	add.w	r6, r5, sl
 800f96e:	42b3      	cmp	r3, r6
 800f970:	b085      	sub	sp, #20
 800f972:	bfb8      	it	lt
 800f974:	3101      	addlt	r1, #1
 800f976:	f7ff fedd 	bl	800f734 <_Balloc>
 800f97a:	b930      	cbnz	r0, 800f98a <__multiply+0x42>
 800f97c:	4602      	mov	r2, r0
 800f97e:	4b41      	ldr	r3, [pc, #260]	@ (800fa84 <__multiply+0x13c>)
 800f980:	4841      	ldr	r0, [pc, #260]	@ (800fa88 <__multiply+0x140>)
 800f982:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f986:	f000 fafb 	bl	800ff80 <__assert_func>
 800f98a:	f100 0414 	add.w	r4, r0, #20
 800f98e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800f992:	4623      	mov	r3, r4
 800f994:	2200      	movs	r2, #0
 800f996:	4573      	cmp	r3, lr
 800f998:	d320      	bcc.n	800f9dc <__multiply+0x94>
 800f99a:	f107 0814 	add.w	r8, r7, #20
 800f99e:	f109 0114 	add.w	r1, r9, #20
 800f9a2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800f9a6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800f9aa:	9302      	str	r3, [sp, #8]
 800f9ac:	1beb      	subs	r3, r5, r7
 800f9ae:	3b15      	subs	r3, #21
 800f9b0:	f023 0303 	bic.w	r3, r3, #3
 800f9b4:	3304      	adds	r3, #4
 800f9b6:	3715      	adds	r7, #21
 800f9b8:	42bd      	cmp	r5, r7
 800f9ba:	bf38      	it	cc
 800f9bc:	2304      	movcc	r3, #4
 800f9be:	9301      	str	r3, [sp, #4]
 800f9c0:	9b02      	ldr	r3, [sp, #8]
 800f9c2:	9103      	str	r1, [sp, #12]
 800f9c4:	428b      	cmp	r3, r1
 800f9c6:	d80c      	bhi.n	800f9e2 <__multiply+0x9a>
 800f9c8:	2e00      	cmp	r6, #0
 800f9ca:	dd03      	ble.n	800f9d4 <__multiply+0x8c>
 800f9cc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d055      	beq.n	800fa80 <__multiply+0x138>
 800f9d4:	6106      	str	r6, [r0, #16]
 800f9d6:	b005      	add	sp, #20
 800f9d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9dc:	f843 2b04 	str.w	r2, [r3], #4
 800f9e0:	e7d9      	b.n	800f996 <__multiply+0x4e>
 800f9e2:	f8b1 a000 	ldrh.w	sl, [r1]
 800f9e6:	f1ba 0f00 	cmp.w	sl, #0
 800f9ea:	d01f      	beq.n	800fa2c <__multiply+0xe4>
 800f9ec:	46c4      	mov	ip, r8
 800f9ee:	46a1      	mov	r9, r4
 800f9f0:	2700      	movs	r7, #0
 800f9f2:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f9f6:	f8d9 3000 	ldr.w	r3, [r9]
 800f9fa:	fa1f fb82 	uxth.w	fp, r2
 800f9fe:	b29b      	uxth	r3, r3
 800fa00:	fb0a 330b 	mla	r3, sl, fp, r3
 800fa04:	443b      	add	r3, r7
 800fa06:	f8d9 7000 	ldr.w	r7, [r9]
 800fa0a:	0c12      	lsrs	r2, r2, #16
 800fa0c:	0c3f      	lsrs	r7, r7, #16
 800fa0e:	fb0a 7202 	mla	r2, sl, r2, r7
 800fa12:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800fa16:	b29b      	uxth	r3, r3
 800fa18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fa1c:	4565      	cmp	r5, ip
 800fa1e:	f849 3b04 	str.w	r3, [r9], #4
 800fa22:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800fa26:	d8e4      	bhi.n	800f9f2 <__multiply+0xaa>
 800fa28:	9b01      	ldr	r3, [sp, #4]
 800fa2a:	50e7      	str	r7, [r4, r3]
 800fa2c:	9b03      	ldr	r3, [sp, #12]
 800fa2e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800fa32:	3104      	adds	r1, #4
 800fa34:	f1b9 0f00 	cmp.w	r9, #0
 800fa38:	d020      	beq.n	800fa7c <__multiply+0x134>
 800fa3a:	6823      	ldr	r3, [r4, #0]
 800fa3c:	4647      	mov	r7, r8
 800fa3e:	46a4      	mov	ip, r4
 800fa40:	f04f 0a00 	mov.w	sl, #0
 800fa44:	f8b7 b000 	ldrh.w	fp, [r7]
 800fa48:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800fa4c:	fb09 220b 	mla	r2, r9, fp, r2
 800fa50:	4452      	add	r2, sl
 800fa52:	b29b      	uxth	r3, r3
 800fa54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fa58:	f84c 3b04 	str.w	r3, [ip], #4
 800fa5c:	f857 3b04 	ldr.w	r3, [r7], #4
 800fa60:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fa64:	f8bc 3000 	ldrh.w	r3, [ip]
 800fa68:	fb09 330a 	mla	r3, r9, sl, r3
 800fa6c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800fa70:	42bd      	cmp	r5, r7
 800fa72:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fa76:	d8e5      	bhi.n	800fa44 <__multiply+0xfc>
 800fa78:	9a01      	ldr	r2, [sp, #4]
 800fa7a:	50a3      	str	r3, [r4, r2]
 800fa7c:	3404      	adds	r4, #4
 800fa7e:	e79f      	b.n	800f9c0 <__multiply+0x78>
 800fa80:	3e01      	subs	r6, #1
 800fa82:	e7a1      	b.n	800f9c8 <__multiply+0x80>
 800fa84:	08010768 	.word	0x08010768
 800fa88:	08010779 	.word	0x08010779

0800fa8c <__pow5mult>:
 800fa8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa90:	4615      	mov	r5, r2
 800fa92:	f012 0203 	ands.w	r2, r2, #3
 800fa96:	4607      	mov	r7, r0
 800fa98:	460e      	mov	r6, r1
 800fa9a:	d007      	beq.n	800faac <__pow5mult+0x20>
 800fa9c:	4c25      	ldr	r4, [pc, #148]	@ (800fb34 <__pow5mult+0xa8>)
 800fa9e:	3a01      	subs	r2, #1
 800faa0:	2300      	movs	r3, #0
 800faa2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800faa6:	f7ff fea7 	bl	800f7f8 <__multadd>
 800faaa:	4606      	mov	r6, r0
 800faac:	10ad      	asrs	r5, r5, #2
 800faae:	d03d      	beq.n	800fb2c <__pow5mult+0xa0>
 800fab0:	69fc      	ldr	r4, [r7, #28]
 800fab2:	b97c      	cbnz	r4, 800fad4 <__pow5mult+0x48>
 800fab4:	2010      	movs	r0, #16
 800fab6:	f7fe f883 	bl	800dbc0 <malloc>
 800faba:	4602      	mov	r2, r0
 800fabc:	61f8      	str	r0, [r7, #28]
 800fabe:	b928      	cbnz	r0, 800facc <__pow5mult+0x40>
 800fac0:	4b1d      	ldr	r3, [pc, #116]	@ (800fb38 <__pow5mult+0xac>)
 800fac2:	481e      	ldr	r0, [pc, #120]	@ (800fb3c <__pow5mult+0xb0>)
 800fac4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800fac8:	f000 fa5a 	bl	800ff80 <__assert_func>
 800facc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fad0:	6004      	str	r4, [r0, #0]
 800fad2:	60c4      	str	r4, [r0, #12]
 800fad4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800fad8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fadc:	b94c      	cbnz	r4, 800faf2 <__pow5mult+0x66>
 800fade:	f240 2171 	movw	r1, #625	@ 0x271
 800fae2:	4638      	mov	r0, r7
 800fae4:	f7ff ff1a 	bl	800f91c <__i2b>
 800fae8:	2300      	movs	r3, #0
 800faea:	f8c8 0008 	str.w	r0, [r8, #8]
 800faee:	4604      	mov	r4, r0
 800faf0:	6003      	str	r3, [r0, #0]
 800faf2:	f04f 0900 	mov.w	r9, #0
 800faf6:	07eb      	lsls	r3, r5, #31
 800faf8:	d50a      	bpl.n	800fb10 <__pow5mult+0x84>
 800fafa:	4631      	mov	r1, r6
 800fafc:	4622      	mov	r2, r4
 800fafe:	4638      	mov	r0, r7
 800fb00:	f7ff ff22 	bl	800f948 <__multiply>
 800fb04:	4631      	mov	r1, r6
 800fb06:	4680      	mov	r8, r0
 800fb08:	4638      	mov	r0, r7
 800fb0a:	f7ff fe53 	bl	800f7b4 <_Bfree>
 800fb0e:	4646      	mov	r6, r8
 800fb10:	106d      	asrs	r5, r5, #1
 800fb12:	d00b      	beq.n	800fb2c <__pow5mult+0xa0>
 800fb14:	6820      	ldr	r0, [r4, #0]
 800fb16:	b938      	cbnz	r0, 800fb28 <__pow5mult+0x9c>
 800fb18:	4622      	mov	r2, r4
 800fb1a:	4621      	mov	r1, r4
 800fb1c:	4638      	mov	r0, r7
 800fb1e:	f7ff ff13 	bl	800f948 <__multiply>
 800fb22:	6020      	str	r0, [r4, #0]
 800fb24:	f8c0 9000 	str.w	r9, [r0]
 800fb28:	4604      	mov	r4, r0
 800fb2a:	e7e4      	b.n	800faf6 <__pow5mult+0x6a>
 800fb2c:	4630      	mov	r0, r6
 800fb2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb32:	bf00      	nop
 800fb34:	0801082c 	.word	0x0801082c
 800fb38:	080106f9 	.word	0x080106f9
 800fb3c:	08010779 	.word	0x08010779

0800fb40 <__lshift>:
 800fb40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb44:	460c      	mov	r4, r1
 800fb46:	6849      	ldr	r1, [r1, #4]
 800fb48:	6923      	ldr	r3, [r4, #16]
 800fb4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fb4e:	68a3      	ldr	r3, [r4, #8]
 800fb50:	4607      	mov	r7, r0
 800fb52:	4691      	mov	r9, r2
 800fb54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fb58:	f108 0601 	add.w	r6, r8, #1
 800fb5c:	42b3      	cmp	r3, r6
 800fb5e:	db0b      	blt.n	800fb78 <__lshift+0x38>
 800fb60:	4638      	mov	r0, r7
 800fb62:	f7ff fde7 	bl	800f734 <_Balloc>
 800fb66:	4605      	mov	r5, r0
 800fb68:	b948      	cbnz	r0, 800fb7e <__lshift+0x3e>
 800fb6a:	4602      	mov	r2, r0
 800fb6c:	4b28      	ldr	r3, [pc, #160]	@ (800fc10 <__lshift+0xd0>)
 800fb6e:	4829      	ldr	r0, [pc, #164]	@ (800fc14 <__lshift+0xd4>)
 800fb70:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800fb74:	f000 fa04 	bl	800ff80 <__assert_func>
 800fb78:	3101      	adds	r1, #1
 800fb7a:	005b      	lsls	r3, r3, #1
 800fb7c:	e7ee      	b.n	800fb5c <__lshift+0x1c>
 800fb7e:	2300      	movs	r3, #0
 800fb80:	f100 0114 	add.w	r1, r0, #20
 800fb84:	f100 0210 	add.w	r2, r0, #16
 800fb88:	4618      	mov	r0, r3
 800fb8a:	4553      	cmp	r3, sl
 800fb8c:	db33      	blt.n	800fbf6 <__lshift+0xb6>
 800fb8e:	6920      	ldr	r0, [r4, #16]
 800fb90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fb94:	f104 0314 	add.w	r3, r4, #20
 800fb98:	f019 091f 	ands.w	r9, r9, #31
 800fb9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fba0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fba4:	d02b      	beq.n	800fbfe <__lshift+0xbe>
 800fba6:	f1c9 0e20 	rsb	lr, r9, #32
 800fbaa:	468a      	mov	sl, r1
 800fbac:	2200      	movs	r2, #0
 800fbae:	6818      	ldr	r0, [r3, #0]
 800fbb0:	fa00 f009 	lsl.w	r0, r0, r9
 800fbb4:	4310      	orrs	r0, r2
 800fbb6:	f84a 0b04 	str.w	r0, [sl], #4
 800fbba:	f853 2b04 	ldr.w	r2, [r3], #4
 800fbbe:	459c      	cmp	ip, r3
 800fbc0:	fa22 f20e 	lsr.w	r2, r2, lr
 800fbc4:	d8f3      	bhi.n	800fbae <__lshift+0x6e>
 800fbc6:	ebac 0304 	sub.w	r3, ip, r4
 800fbca:	3b15      	subs	r3, #21
 800fbcc:	f023 0303 	bic.w	r3, r3, #3
 800fbd0:	3304      	adds	r3, #4
 800fbd2:	f104 0015 	add.w	r0, r4, #21
 800fbd6:	4560      	cmp	r0, ip
 800fbd8:	bf88      	it	hi
 800fbda:	2304      	movhi	r3, #4
 800fbdc:	50ca      	str	r2, [r1, r3]
 800fbde:	b10a      	cbz	r2, 800fbe4 <__lshift+0xa4>
 800fbe0:	f108 0602 	add.w	r6, r8, #2
 800fbe4:	3e01      	subs	r6, #1
 800fbe6:	4638      	mov	r0, r7
 800fbe8:	612e      	str	r6, [r5, #16]
 800fbea:	4621      	mov	r1, r4
 800fbec:	f7ff fde2 	bl	800f7b4 <_Bfree>
 800fbf0:	4628      	mov	r0, r5
 800fbf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbf6:	f842 0f04 	str.w	r0, [r2, #4]!
 800fbfa:	3301      	adds	r3, #1
 800fbfc:	e7c5      	b.n	800fb8a <__lshift+0x4a>
 800fbfe:	3904      	subs	r1, #4
 800fc00:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc04:	f841 2f04 	str.w	r2, [r1, #4]!
 800fc08:	459c      	cmp	ip, r3
 800fc0a:	d8f9      	bhi.n	800fc00 <__lshift+0xc0>
 800fc0c:	e7ea      	b.n	800fbe4 <__lshift+0xa4>
 800fc0e:	bf00      	nop
 800fc10:	08010768 	.word	0x08010768
 800fc14:	08010779 	.word	0x08010779

0800fc18 <__mcmp>:
 800fc18:	690a      	ldr	r2, [r1, #16]
 800fc1a:	4603      	mov	r3, r0
 800fc1c:	6900      	ldr	r0, [r0, #16]
 800fc1e:	1a80      	subs	r0, r0, r2
 800fc20:	b530      	push	{r4, r5, lr}
 800fc22:	d10e      	bne.n	800fc42 <__mcmp+0x2a>
 800fc24:	3314      	adds	r3, #20
 800fc26:	3114      	adds	r1, #20
 800fc28:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800fc2c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800fc30:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fc34:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fc38:	4295      	cmp	r5, r2
 800fc3a:	d003      	beq.n	800fc44 <__mcmp+0x2c>
 800fc3c:	d205      	bcs.n	800fc4a <__mcmp+0x32>
 800fc3e:	f04f 30ff 	mov.w	r0, #4294967295
 800fc42:	bd30      	pop	{r4, r5, pc}
 800fc44:	42a3      	cmp	r3, r4
 800fc46:	d3f3      	bcc.n	800fc30 <__mcmp+0x18>
 800fc48:	e7fb      	b.n	800fc42 <__mcmp+0x2a>
 800fc4a:	2001      	movs	r0, #1
 800fc4c:	e7f9      	b.n	800fc42 <__mcmp+0x2a>
	...

0800fc50 <__mdiff>:
 800fc50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc54:	4689      	mov	r9, r1
 800fc56:	4606      	mov	r6, r0
 800fc58:	4611      	mov	r1, r2
 800fc5a:	4648      	mov	r0, r9
 800fc5c:	4614      	mov	r4, r2
 800fc5e:	f7ff ffdb 	bl	800fc18 <__mcmp>
 800fc62:	1e05      	subs	r5, r0, #0
 800fc64:	d112      	bne.n	800fc8c <__mdiff+0x3c>
 800fc66:	4629      	mov	r1, r5
 800fc68:	4630      	mov	r0, r6
 800fc6a:	f7ff fd63 	bl	800f734 <_Balloc>
 800fc6e:	4602      	mov	r2, r0
 800fc70:	b928      	cbnz	r0, 800fc7e <__mdiff+0x2e>
 800fc72:	4b3f      	ldr	r3, [pc, #252]	@ (800fd70 <__mdiff+0x120>)
 800fc74:	f240 2137 	movw	r1, #567	@ 0x237
 800fc78:	483e      	ldr	r0, [pc, #248]	@ (800fd74 <__mdiff+0x124>)
 800fc7a:	f000 f981 	bl	800ff80 <__assert_func>
 800fc7e:	2301      	movs	r3, #1
 800fc80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fc84:	4610      	mov	r0, r2
 800fc86:	b003      	add	sp, #12
 800fc88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc8c:	bfbc      	itt	lt
 800fc8e:	464b      	movlt	r3, r9
 800fc90:	46a1      	movlt	r9, r4
 800fc92:	4630      	mov	r0, r6
 800fc94:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800fc98:	bfba      	itte	lt
 800fc9a:	461c      	movlt	r4, r3
 800fc9c:	2501      	movlt	r5, #1
 800fc9e:	2500      	movge	r5, #0
 800fca0:	f7ff fd48 	bl	800f734 <_Balloc>
 800fca4:	4602      	mov	r2, r0
 800fca6:	b918      	cbnz	r0, 800fcb0 <__mdiff+0x60>
 800fca8:	4b31      	ldr	r3, [pc, #196]	@ (800fd70 <__mdiff+0x120>)
 800fcaa:	f240 2145 	movw	r1, #581	@ 0x245
 800fcae:	e7e3      	b.n	800fc78 <__mdiff+0x28>
 800fcb0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800fcb4:	6926      	ldr	r6, [r4, #16]
 800fcb6:	60c5      	str	r5, [r0, #12]
 800fcb8:	f109 0310 	add.w	r3, r9, #16
 800fcbc:	f109 0514 	add.w	r5, r9, #20
 800fcc0:	f104 0e14 	add.w	lr, r4, #20
 800fcc4:	f100 0b14 	add.w	fp, r0, #20
 800fcc8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800fccc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800fcd0:	9301      	str	r3, [sp, #4]
 800fcd2:	46d9      	mov	r9, fp
 800fcd4:	f04f 0c00 	mov.w	ip, #0
 800fcd8:	9b01      	ldr	r3, [sp, #4]
 800fcda:	f85e 0b04 	ldr.w	r0, [lr], #4
 800fcde:	f853 af04 	ldr.w	sl, [r3, #4]!
 800fce2:	9301      	str	r3, [sp, #4]
 800fce4:	fa1f f38a 	uxth.w	r3, sl
 800fce8:	4619      	mov	r1, r3
 800fcea:	b283      	uxth	r3, r0
 800fcec:	1acb      	subs	r3, r1, r3
 800fcee:	0c00      	lsrs	r0, r0, #16
 800fcf0:	4463      	add	r3, ip
 800fcf2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800fcf6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800fcfa:	b29b      	uxth	r3, r3
 800fcfc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800fd00:	4576      	cmp	r6, lr
 800fd02:	f849 3b04 	str.w	r3, [r9], #4
 800fd06:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fd0a:	d8e5      	bhi.n	800fcd8 <__mdiff+0x88>
 800fd0c:	1b33      	subs	r3, r6, r4
 800fd0e:	3b15      	subs	r3, #21
 800fd10:	f023 0303 	bic.w	r3, r3, #3
 800fd14:	3415      	adds	r4, #21
 800fd16:	3304      	adds	r3, #4
 800fd18:	42a6      	cmp	r6, r4
 800fd1a:	bf38      	it	cc
 800fd1c:	2304      	movcc	r3, #4
 800fd1e:	441d      	add	r5, r3
 800fd20:	445b      	add	r3, fp
 800fd22:	461e      	mov	r6, r3
 800fd24:	462c      	mov	r4, r5
 800fd26:	4544      	cmp	r4, r8
 800fd28:	d30e      	bcc.n	800fd48 <__mdiff+0xf8>
 800fd2a:	f108 0103 	add.w	r1, r8, #3
 800fd2e:	1b49      	subs	r1, r1, r5
 800fd30:	f021 0103 	bic.w	r1, r1, #3
 800fd34:	3d03      	subs	r5, #3
 800fd36:	45a8      	cmp	r8, r5
 800fd38:	bf38      	it	cc
 800fd3a:	2100      	movcc	r1, #0
 800fd3c:	440b      	add	r3, r1
 800fd3e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fd42:	b191      	cbz	r1, 800fd6a <__mdiff+0x11a>
 800fd44:	6117      	str	r7, [r2, #16]
 800fd46:	e79d      	b.n	800fc84 <__mdiff+0x34>
 800fd48:	f854 1b04 	ldr.w	r1, [r4], #4
 800fd4c:	46e6      	mov	lr, ip
 800fd4e:	0c08      	lsrs	r0, r1, #16
 800fd50:	fa1c fc81 	uxtah	ip, ip, r1
 800fd54:	4471      	add	r1, lr
 800fd56:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800fd5a:	b289      	uxth	r1, r1
 800fd5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800fd60:	f846 1b04 	str.w	r1, [r6], #4
 800fd64:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fd68:	e7dd      	b.n	800fd26 <__mdiff+0xd6>
 800fd6a:	3f01      	subs	r7, #1
 800fd6c:	e7e7      	b.n	800fd3e <__mdiff+0xee>
 800fd6e:	bf00      	nop
 800fd70:	08010768 	.word	0x08010768
 800fd74:	08010779 	.word	0x08010779

0800fd78 <__d2b>:
 800fd78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fd7c:	460f      	mov	r7, r1
 800fd7e:	2101      	movs	r1, #1
 800fd80:	ec59 8b10 	vmov	r8, r9, d0
 800fd84:	4616      	mov	r6, r2
 800fd86:	f7ff fcd5 	bl	800f734 <_Balloc>
 800fd8a:	4604      	mov	r4, r0
 800fd8c:	b930      	cbnz	r0, 800fd9c <__d2b+0x24>
 800fd8e:	4602      	mov	r2, r0
 800fd90:	4b23      	ldr	r3, [pc, #140]	@ (800fe20 <__d2b+0xa8>)
 800fd92:	4824      	ldr	r0, [pc, #144]	@ (800fe24 <__d2b+0xac>)
 800fd94:	f240 310f 	movw	r1, #783	@ 0x30f
 800fd98:	f000 f8f2 	bl	800ff80 <__assert_func>
 800fd9c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fda0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fda4:	b10d      	cbz	r5, 800fdaa <__d2b+0x32>
 800fda6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fdaa:	9301      	str	r3, [sp, #4]
 800fdac:	f1b8 0300 	subs.w	r3, r8, #0
 800fdb0:	d023      	beq.n	800fdfa <__d2b+0x82>
 800fdb2:	4668      	mov	r0, sp
 800fdb4:	9300      	str	r3, [sp, #0]
 800fdb6:	f7ff fd84 	bl	800f8c2 <__lo0bits>
 800fdba:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fdbe:	b1d0      	cbz	r0, 800fdf6 <__d2b+0x7e>
 800fdc0:	f1c0 0320 	rsb	r3, r0, #32
 800fdc4:	fa02 f303 	lsl.w	r3, r2, r3
 800fdc8:	430b      	orrs	r3, r1
 800fdca:	40c2      	lsrs	r2, r0
 800fdcc:	6163      	str	r3, [r4, #20]
 800fdce:	9201      	str	r2, [sp, #4]
 800fdd0:	9b01      	ldr	r3, [sp, #4]
 800fdd2:	61a3      	str	r3, [r4, #24]
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	bf0c      	ite	eq
 800fdd8:	2201      	moveq	r2, #1
 800fdda:	2202      	movne	r2, #2
 800fddc:	6122      	str	r2, [r4, #16]
 800fdde:	b1a5      	cbz	r5, 800fe0a <__d2b+0x92>
 800fde0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800fde4:	4405      	add	r5, r0
 800fde6:	603d      	str	r5, [r7, #0]
 800fde8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800fdec:	6030      	str	r0, [r6, #0]
 800fdee:	4620      	mov	r0, r4
 800fdf0:	b003      	add	sp, #12
 800fdf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fdf6:	6161      	str	r1, [r4, #20]
 800fdf8:	e7ea      	b.n	800fdd0 <__d2b+0x58>
 800fdfa:	a801      	add	r0, sp, #4
 800fdfc:	f7ff fd61 	bl	800f8c2 <__lo0bits>
 800fe00:	9b01      	ldr	r3, [sp, #4]
 800fe02:	6163      	str	r3, [r4, #20]
 800fe04:	3020      	adds	r0, #32
 800fe06:	2201      	movs	r2, #1
 800fe08:	e7e8      	b.n	800fddc <__d2b+0x64>
 800fe0a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fe0e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800fe12:	6038      	str	r0, [r7, #0]
 800fe14:	6918      	ldr	r0, [r3, #16]
 800fe16:	f7ff fd35 	bl	800f884 <__hi0bits>
 800fe1a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fe1e:	e7e5      	b.n	800fdec <__d2b+0x74>
 800fe20:	08010768 	.word	0x08010768
 800fe24:	08010779 	.word	0x08010779

0800fe28 <__sflush_r>:
 800fe28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fe2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe30:	0716      	lsls	r6, r2, #28
 800fe32:	4605      	mov	r5, r0
 800fe34:	460c      	mov	r4, r1
 800fe36:	d454      	bmi.n	800fee2 <__sflush_r+0xba>
 800fe38:	684b      	ldr	r3, [r1, #4]
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	dc02      	bgt.n	800fe44 <__sflush_r+0x1c>
 800fe3e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	dd48      	ble.n	800fed6 <__sflush_r+0xae>
 800fe44:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fe46:	2e00      	cmp	r6, #0
 800fe48:	d045      	beq.n	800fed6 <__sflush_r+0xae>
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800fe50:	682f      	ldr	r7, [r5, #0]
 800fe52:	6a21      	ldr	r1, [r4, #32]
 800fe54:	602b      	str	r3, [r5, #0]
 800fe56:	d030      	beq.n	800feba <__sflush_r+0x92>
 800fe58:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fe5a:	89a3      	ldrh	r3, [r4, #12]
 800fe5c:	0759      	lsls	r1, r3, #29
 800fe5e:	d505      	bpl.n	800fe6c <__sflush_r+0x44>
 800fe60:	6863      	ldr	r3, [r4, #4]
 800fe62:	1ad2      	subs	r2, r2, r3
 800fe64:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fe66:	b10b      	cbz	r3, 800fe6c <__sflush_r+0x44>
 800fe68:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fe6a:	1ad2      	subs	r2, r2, r3
 800fe6c:	2300      	movs	r3, #0
 800fe6e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fe70:	6a21      	ldr	r1, [r4, #32]
 800fe72:	4628      	mov	r0, r5
 800fe74:	47b0      	blx	r6
 800fe76:	1c43      	adds	r3, r0, #1
 800fe78:	89a3      	ldrh	r3, [r4, #12]
 800fe7a:	d106      	bne.n	800fe8a <__sflush_r+0x62>
 800fe7c:	6829      	ldr	r1, [r5, #0]
 800fe7e:	291d      	cmp	r1, #29
 800fe80:	d82b      	bhi.n	800feda <__sflush_r+0xb2>
 800fe82:	4a2a      	ldr	r2, [pc, #168]	@ (800ff2c <__sflush_r+0x104>)
 800fe84:	40ca      	lsrs	r2, r1
 800fe86:	07d6      	lsls	r6, r2, #31
 800fe88:	d527      	bpl.n	800feda <__sflush_r+0xb2>
 800fe8a:	2200      	movs	r2, #0
 800fe8c:	6062      	str	r2, [r4, #4]
 800fe8e:	04d9      	lsls	r1, r3, #19
 800fe90:	6922      	ldr	r2, [r4, #16]
 800fe92:	6022      	str	r2, [r4, #0]
 800fe94:	d504      	bpl.n	800fea0 <__sflush_r+0x78>
 800fe96:	1c42      	adds	r2, r0, #1
 800fe98:	d101      	bne.n	800fe9e <__sflush_r+0x76>
 800fe9a:	682b      	ldr	r3, [r5, #0]
 800fe9c:	b903      	cbnz	r3, 800fea0 <__sflush_r+0x78>
 800fe9e:	6560      	str	r0, [r4, #84]	@ 0x54
 800fea0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fea2:	602f      	str	r7, [r5, #0]
 800fea4:	b1b9      	cbz	r1, 800fed6 <__sflush_r+0xae>
 800fea6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800feaa:	4299      	cmp	r1, r3
 800feac:	d002      	beq.n	800feb4 <__sflush_r+0x8c>
 800feae:	4628      	mov	r0, r5
 800feb0:	f7ff fbf6 	bl	800f6a0 <_free_r>
 800feb4:	2300      	movs	r3, #0
 800feb6:	6363      	str	r3, [r4, #52]	@ 0x34
 800feb8:	e00d      	b.n	800fed6 <__sflush_r+0xae>
 800feba:	2301      	movs	r3, #1
 800febc:	4628      	mov	r0, r5
 800febe:	47b0      	blx	r6
 800fec0:	4602      	mov	r2, r0
 800fec2:	1c50      	adds	r0, r2, #1
 800fec4:	d1c9      	bne.n	800fe5a <__sflush_r+0x32>
 800fec6:	682b      	ldr	r3, [r5, #0]
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d0c6      	beq.n	800fe5a <__sflush_r+0x32>
 800fecc:	2b1d      	cmp	r3, #29
 800fece:	d001      	beq.n	800fed4 <__sflush_r+0xac>
 800fed0:	2b16      	cmp	r3, #22
 800fed2:	d11e      	bne.n	800ff12 <__sflush_r+0xea>
 800fed4:	602f      	str	r7, [r5, #0]
 800fed6:	2000      	movs	r0, #0
 800fed8:	e022      	b.n	800ff20 <__sflush_r+0xf8>
 800feda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fede:	b21b      	sxth	r3, r3
 800fee0:	e01b      	b.n	800ff1a <__sflush_r+0xf2>
 800fee2:	690f      	ldr	r7, [r1, #16]
 800fee4:	2f00      	cmp	r7, #0
 800fee6:	d0f6      	beq.n	800fed6 <__sflush_r+0xae>
 800fee8:	0793      	lsls	r3, r2, #30
 800feea:	680e      	ldr	r6, [r1, #0]
 800feec:	bf08      	it	eq
 800feee:	694b      	ldreq	r3, [r1, #20]
 800fef0:	600f      	str	r7, [r1, #0]
 800fef2:	bf18      	it	ne
 800fef4:	2300      	movne	r3, #0
 800fef6:	eba6 0807 	sub.w	r8, r6, r7
 800fefa:	608b      	str	r3, [r1, #8]
 800fefc:	f1b8 0f00 	cmp.w	r8, #0
 800ff00:	dde9      	ble.n	800fed6 <__sflush_r+0xae>
 800ff02:	6a21      	ldr	r1, [r4, #32]
 800ff04:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ff06:	4643      	mov	r3, r8
 800ff08:	463a      	mov	r2, r7
 800ff0a:	4628      	mov	r0, r5
 800ff0c:	47b0      	blx	r6
 800ff0e:	2800      	cmp	r0, #0
 800ff10:	dc08      	bgt.n	800ff24 <__sflush_r+0xfc>
 800ff12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ff1a:	81a3      	strh	r3, [r4, #12]
 800ff1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ff20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff24:	4407      	add	r7, r0
 800ff26:	eba8 0800 	sub.w	r8, r8, r0
 800ff2a:	e7e7      	b.n	800fefc <__sflush_r+0xd4>
 800ff2c:	20400001 	.word	0x20400001

0800ff30 <_fflush_r>:
 800ff30:	b538      	push	{r3, r4, r5, lr}
 800ff32:	690b      	ldr	r3, [r1, #16]
 800ff34:	4605      	mov	r5, r0
 800ff36:	460c      	mov	r4, r1
 800ff38:	b913      	cbnz	r3, 800ff40 <_fflush_r+0x10>
 800ff3a:	2500      	movs	r5, #0
 800ff3c:	4628      	mov	r0, r5
 800ff3e:	bd38      	pop	{r3, r4, r5, pc}
 800ff40:	b118      	cbz	r0, 800ff4a <_fflush_r+0x1a>
 800ff42:	6a03      	ldr	r3, [r0, #32]
 800ff44:	b90b      	cbnz	r3, 800ff4a <_fflush_r+0x1a>
 800ff46:	f7fe fbdb 	bl	800e700 <__sinit>
 800ff4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d0f3      	beq.n	800ff3a <_fflush_r+0xa>
 800ff52:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ff54:	07d0      	lsls	r0, r2, #31
 800ff56:	d404      	bmi.n	800ff62 <_fflush_r+0x32>
 800ff58:	0599      	lsls	r1, r3, #22
 800ff5a:	d402      	bmi.n	800ff62 <_fflush_r+0x32>
 800ff5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ff5e:	f7fe fd34 	bl	800e9ca <__retarget_lock_acquire_recursive>
 800ff62:	4628      	mov	r0, r5
 800ff64:	4621      	mov	r1, r4
 800ff66:	f7ff ff5f 	bl	800fe28 <__sflush_r>
 800ff6a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ff6c:	07da      	lsls	r2, r3, #31
 800ff6e:	4605      	mov	r5, r0
 800ff70:	d4e4      	bmi.n	800ff3c <_fflush_r+0xc>
 800ff72:	89a3      	ldrh	r3, [r4, #12]
 800ff74:	059b      	lsls	r3, r3, #22
 800ff76:	d4e1      	bmi.n	800ff3c <_fflush_r+0xc>
 800ff78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ff7a:	f7fe fd27 	bl	800e9cc <__retarget_lock_release_recursive>
 800ff7e:	e7dd      	b.n	800ff3c <_fflush_r+0xc>

0800ff80 <__assert_func>:
 800ff80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ff82:	4614      	mov	r4, r2
 800ff84:	461a      	mov	r2, r3
 800ff86:	4b09      	ldr	r3, [pc, #36]	@ (800ffac <__assert_func+0x2c>)
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	4605      	mov	r5, r0
 800ff8c:	68d8      	ldr	r0, [r3, #12]
 800ff8e:	b14c      	cbz	r4, 800ffa4 <__assert_func+0x24>
 800ff90:	4b07      	ldr	r3, [pc, #28]	@ (800ffb0 <__assert_func+0x30>)
 800ff92:	9100      	str	r1, [sp, #0]
 800ff94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ff98:	4906      	ldr	r1, [pc, #24]	@ (800ffb4 <__assert_func+0x34>)
 800ff9a:	462b      	mov	r3, r5
 800ff9c:	f000 f842 	bl	8010024 <fiprintf>
 800ffa0:	f000 f852 	bl	8010048 <abort>
 800ffa4:	4b04      	ldr	r3, [pc, #16]	@ (800ffb8 <__assert_func+0x38>)
 800ffa6:	461c      	mov	r4, r3
 800ffa8:	e7f3      	b.n	800ff92 <__assert_func+0x12>
 800ffaa:	bf00      	nop
 800ffac:	2000011c 	.word	0x2000011c
 800ffb0:	080107dc 	.word	0x080107dc
 800ffb4:	080107e9 	.word	0x080107e9
 800ffb8:	08010817 	.word	0x08010817

0800ffbc <_calloc_r>:
 800ffbc:	b570      	push	{r4, r5, r6, lr}
 800ffbe:	fba1 5402 	umull	r5, r4, r1, r2
 800ffc2:	b934      	cbnz	r4, 800ffd2 <_calloc_r+0x16>
 800ffc4:	4629      	mov	r1, r5
 800ffc6:	f7fd fe2d 	bl	800dc24 <_malloc_r>
 800ffca:	4606      	mov	r6, r0
 800ffcc:	b928      	cbnz	r0, 800ffda <_calloc_r+0x1e>
 800ffce:	4630      	mov	r0, r6
 800ffd0:	bd70      	pop	{r4, r5, r6, pc}
 800ffd2:	220c      	movs	r2, #12
 800ffd4:	6002      	str	r2, [r0, #0]
 800ffd6:	2600      	movs	r6, #0
 800ffd8:	e7f9      	b.n	800ffce <_calloc_r+0x12>
 800ffda:	462a      	mov	r2, r5
 800ffdc:	4621      	mov	r1, r4
 800ffde:	f7fe fc08 	bl	800e7f2 <memset>
 800ffe2:	e7f4      	b.n	800ffce <_calloc_r+0x12>

0800ffe4 <__ascii_mbtowc>:
 800ffe4:	b082      	sub	sp, #8
 800ffe6:	b901      	cbnz	r1, 800ffea <__ascii_mbtowc+0x6>
 800ffe8:	a901      	add	r1, sp, #4
 800ffea:	b142      	cbz	r2, 800fffe <__ascii_mbtowc+0x1a>
 800ffec:	b14b      	cbz	r3, 8010002 <__ascii_mbtowc+0x1e>
 800ffee:	7813      	ldrb	r3, [r2, #0]
 800fff0:	600b      	str	r3, [r1, #0]
 800fff2:	7812      	ldrb	r2, [r2, #0]
 800fff4:	1e10      	subs	r0, r2, #0
 800fff6:	bf18      	it	ne
 800fff8:	2001      	movne	r0, #1
 800fffa:	b002      	add	sp, #8
 800fffc:	4770      	bx	lr
 800fffe:	4610      	mov	r0, r2
 8010000:	e7fb      	b.n	800fffa <__ascii_mbtowc+0x16>
 8010002:	f06f 0001 	mvn.w	r0, #1
 8010006:	e7f8      	b.n	800fffa <__ascii_mbtowc+0x16>

08010008 <__ascii_wctomb>:
 8010008:	4603      	mov	r3, r0
 801000a:	4608      	mov	r0, r1
 801000c:	b141      	cbz	r1, 8010020 <__ascii_wctomb+0x18>
 801000e:	2aff      	cmp	r2, #255	@ 0xff
 8010010:	d904      	bls.n	801001c <__ascii_wctomb+0x14>
 8010012:	228a      	movs	r2, #138	@ 0x8a
 8010014:	601a      	str	r2, [r3, #0]
 8010016:	f04f 30ff 	mov.w	r0, #4294967295
 801001a:	4770      	bx	lr
 801001c:	700a      	strb	r2, [r1, #0]
 801001e:	2001      	movs	r0, #1
 8010020:	4770      	bx	lr
	...

08010024 <fiprintf>:
 8010024:	b40e      	push	{r1, r2, r3}
 8010026:	b503      	push	{r0, r1, lr}
 8010028:	4601      	mov	r1, r0
 801002a:	ab03      	add	r3, sp, #12
 801002c:	4805      	ldr	r0, [pc, #20]	@ (8010044 <fiprintf+0x20>)
 801002e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010032:	6800      	ldr	r0, [r0, #0]
 8010034:	9301      	str	r3, [sp, #4]
 8010036:	f000 f837 	bl	80100a8 <_vfiprintf_r>
 801003a:	b002      	add	sp, #8
 801003c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010040:	b003      	add	sp, #12
 8010042:	4770      	bx	lr
 8010044:	2000011c 	.word	0x2000011c

08010048 <abort>:
 8010048:	b508      	push	{r3, lr}
 801004a:	2006      	movs	r0, #6
 801004c:	f000 fa00 	bl	8010450 <raise>
 8010050:	2001      	movs	r0, #1
 8010052:	f7f1 fd3b 	bl	8001acc <_exit>

08010056 <__sfputc_r>:
 8010056:	6893      	ldr	r3, [r2, #8]
 8010058:	3b01      	subs	r3, #1
 801005a:	2b00      	cmp	r3, #0
 801005c:	b410      	push	{r4}
 801005e:	6093      	str	r3, [r2, #8]
 8010060:	da08      	bge.n	8010074 <__sfputc_r+0x1e>
 8010062:	6994      	ldr	r4, [r2, #24]
 8010064:	42a3      	cmp	r3, r4
 8010066:	db01      	blt.n	801006c <__sfputc_r+0x16>
 8010068:	290a      	cmp	r1, #10
 801006a:	d103      	bne.n	8010074 <__sfputc_r+0x1e>
 801006c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010070:	f000 b932 	b.w	80102d8 <__swbuf_r>
 8010074:	6813      	ldr	r3, [r2, #0]
 8010076:	1c58      	adds	r0, r3, #1
 8010078:	6010      	str	r0, [r2, #0]
 801007a:	7019      	strb	r1, [r3, #0]
 801007c:	4608      	mov	r0, r1
 801007e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010082:	4770      	bx	lr

08010084 <__sfputs_r>:
 8010084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010086:	4606      	mov	r6, r0
 8010088:	460f      	mov	r7, r1
 801008a:	4614      	mov	r4, r2
 801008c:	18d5      	adds	r5, r2, r3
 801008e:	42ac      	cmp	r4, r5
 8010090:	d101      	bne.n	8010096 <__sfputs_r+0x12>
 8010092:	2000      	movs	r0, #0
 8010094:	e007      	b.n	80100a6 <__sfputs_r+0x22>
 8010096:	f814 1b01 	ldrb.w	r1, [r4], #1
 801009a:	463a      	mov	r2, r7
 801009c:	4630      	mov	r0, r6
 801009e:	f7ff ffda 	bl	8010056 <__sfputc_r>
 80100a2:	1c43      	adds	r3, r0, #1
 80100a4:	d1f3      	bne.n	801008e <__sfputs_r+0xa>
 80100a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080100a8 <_vfiprintf_r>:
 80100a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100ac:	460d      	mov	r5, r1
 80100ae:	b09d      	sub	sp, #116	@ 0x74
 80100b0:	4614      	mov	r4, r2
 80100b2:	4698      	mov	r8, r3
 80100b4:	4606      	mov	r6, r0
 80100b6:	b118      	cbz	r0, 80100c0 <_vfiprintf_r+0x18>
 80100b8:	6a03      	ldr	r3, [r0, #32]
 80100ba:	b90b      	cbnz	r3, 80100c0 <_vfiprintf_r+0x18>
 80100bc:	f7fe fb20 	bl	800e700 <__sinit>
 80100c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80100c2:	07d9      	lsls	r1, r3, #31
 80100c4:	d405      	bmi.n	80100d2 <_vfiprintf_r+0x2a>
 80100c6:	89ab      	ldrh	r3, [r5, #12]
 80100c8:	059a      	lsls	r2, r3, #22
 80100ca:	d402      	bmi.n	80100d2 <_vfiprintf_r+0x2a>
 80100cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80100ce:	f7fe fc7c 	bl	800e9ca <__retarget_lock_acquire_recursive>
 80100d2:	89ab      	ldrh	r3, [r5, #12]
 80100d4:	071b      	lsls	r3, r3, #28
 80100d6:	d501      	bpl.n	80100dc <_vfiprintf_r+0x34>
 80100d8:	692b      	ldr	r3, [r5, #16]
 80100da:	b99b      	cbnz	r3, 8010104 <_vfiprintf_r+0x5c>
 80100dc:	4629      	mov	r1, r5
 80100de:	4630      	mov	r0, r6
 80100e0:	f000 f938 	bl	8010354 <__swsetup_r>
 80100e4:	b170      	cbz	r0, 8010104 <_vfiprintf_r+0x5c>
 80100e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80100e8:	07dc      	lsls	r4, r3, #31
 80100ea:	d504      	bpl.n	80100f6 <_vfiprintf_r+0x4e>
 80100ec:	f04f 30ff 	mov.w	r0, #4294967295
 80100f0:	b01d      	add	sp, #116	@ 0x74
 80100f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100f6:	89ab      	ldrh	r3, [r5, #12]
 80100f8:	0598      	lsls	r0, r3, #22
 80100fa:	d4f7      	bmi.n	80100ec <_vfiprintf_r+0x44>
 80100fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80100fe:	f7fe fc65 	bl	800e9cc <__retarget_lock_release_recursive>
 8010102:	e7f3      	b.n	80100ec <_vfiprintf_r+0x44>
 8010104:	2300      	movs	r3, #0
 8010106:	9309      	str	r3, [sp, #36]	@ 0x24
 8010108:	2320      	movs	r3, #32
 801010a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801010e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010112:	2330      	movs	r3, #48	@ 0x30
 8010114:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80102c4 <_vfiprintf_r+0x21c>
 8010118:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801011c:	f04f 0901 	mov.w	r9, #1
 8010120:	4623      	mov	r3, r4
 8010122:	469a      	mov	sl, r3
 8010124:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010128:	b10a      	cbz	r2, 801012e <_vfiprintf_r+0x86>
 801012a:	2a25      	cmp	r2, #37	@ 0x25
 801012c:	d1f9      	bne.n	8010122 <_vfiprintf_r+0x7a>
 801012e:	ebba 0b04 	subs.w	fp, sl, r4
 8010132:	d00b      	beq.n	801014c <_vfiprintf_r+0xa4>
 8010134:	465b      	mov	r3, fp
 8010136:	4622      	mov	r2, r4
 8010138:	4629      	mov	r1, r5
 801013a:	4630      	mov	r0, r6
 801013c:	f7ff ffa2 	bl	8010084 <__sfputs_r>
 8010140:	3001      	adds	r0, #1
 8010142:	f000 80a7 	beq.w	8010294 <_vfiprintf_r+0x1ec>
 8010146:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010148:	445a      	add	r2, fp
 801014a:	9209      	str	r2, [sp, #36]	@ 0x24
 801014c:	f89a 3000 	ldrb.w	r3, [sl]
 8010150:	2b00      	cmp	r3, #0
 8010152:	f000 809f 	beq.w	8010294 <_vfiprintf_r+0x1ec>
 8010156:	2300      	movs	r3, #0
 8010158:	f04f 32ff 	mov.w	r2, #4294967295
 801015c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010160:	f10a 0a01 	add.w	sl, sl, #1
 8010164:	9304      	str	r3, [sp, #16]
 8010166:	9307      	str	r3, [sp, #28]
 8010168:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801016c:	931a      	str	r3, [sp, #104]	@ 0x68
 801016e:	4654      	mov	r4, sl
 8010170:	2205      	movs	r2, #5
 8010172:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010176:	4853      	ldr	r0, [pc, #332]	@ (80102c4 <_vfiprintf_r+0x21c>)
 8010178:	f7f0 f85a 	bl	8000230 <memchr>
 801017c:	9a04      	ldr	r2, [sp, #16]
 801017e:	b9d8      	cbnz	r0, 80101b8 <_vfiprintf_r+0x110>
 8010180:	06d1      	lsls	r1, r2, #27
 8010182:	bf44      	itt	mi
 8010184:	2320      	movmi	r3, #32
 8010186:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801018a:	0713      	lsls	r3, r2, #28
 801018c:	bf44      	itt	mi
 801018e:	232b      	movmi	r3, #43	@ 0x2b
 8010190:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010194:	f89a 3000 	ldrb.w	r3, [sl]
 8010198:	2b2a      	cmp	r3, #42	@ 0x2a
 801019a:	d015      	beq.n	80101c8 <_vfiprintf_r+0x120>
 801019c:	9a07      	ldr	r2, [sp, #28]
 801019e:	4654      	mov	r4, sl
 80101a0:	2000      	movs	r0, #0
 80101a2:	f04f 0c0a 	mov.w	ip, #10
 80101a6:	4621      	mov	r1, r4
 80101a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80101ac:	3b30      	subs	r3, #48	@ 0x30
 80101ae:	2b09      	cmp	r3, #9
 80101b0:	d94b      	bls.n	801024a <_vfiprintf_r+0x1a2>
 80101b2:	b1b0      	cbz	r0, 80101e2 <_vfiprintf_r+0x13a>
 80101b4:	9207      	str	r2, [sp, #28]
 80101b6:	e014      	b.n	80101e2 <_vfiprintf_r+0x13a>
 80101b8:	eba0 0308 	sub.w	r3, r0, r8
 80101bc:	fa09 f303 	lsl.w	r3, r9, r3
 80101c0:	4313      	orrs	r3, r2
 80101c2:	9304      	str	r3, [sp, #16]
 80101c4:	46a2      	mov	sl, r4
 80101c6:	e7d2      	b.n	801016e <_vfiprintf_r+0xc6>
 80101c8:	9b03      	ldr	r3, [sp, #12]
 80101ca:	1d19      	adds	r1, r3, #4
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	9103      	str	r1, [sp, #12]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	bfbb      	ittet	lt
 80101d4:	425b      	neglt	r3, r3
 80101d6:	f042 0202 	orrlt.w	r2, r2, #2
 80101da:	9307      	strge	r3, [sp, #28]
 80101dc:	9307      	strlt	r3, [sp, #28]
 80101de:	bfb8      	it	lt
 80101e0:	9204      	strlt	r2, [sp, #16]
 80101e2:	7823      	ldrb	r3, [r4, #0]
 80101e4:	2b2e      	cmp	r3, #46	@ 0x2e
 80101e6:	d10a      	bne.n	80101fe <_vfiprintf_r+0x156>
 80101e8:	7863      	ldrb	r3, [r4, #1]
 80101ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80101ec:	d132      	bne.n	8010254 <_vfiprintf_r+0x1ac>
 80101ee:	9b03      	ldr	r3, [sp, #12]
 80101f0:	1d1a      	adds	r2, r3, #4
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	9203      	str	r2, [sp, #12]
 80101f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80101fa:	3402      	adds	r4, #2
 80101fc:	9305      	str	r3, [sp, #20]
 80101fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80102d4 <_vfiprintf_r+0x22c>
 8010202:	7821      	ldrb	r1, [r4, #0]
 8010204:	2203      	movs	r2, #3
 8010206:	4650      	mov	r0, sl
 8010208:	f7f0 f812 	bl	8000230 <memchr>
 801020c:	b138      	cbz	r0, 801021e <_vfiprintf_r+0x176>
 801020e:	9b04      	ldr	r3, [sp, #16]
 8010210:	eba0 000a 	sub.w	r0, r0, sl
 8010214:	2240      	movs	r2, #64	@ 0x40
 8010216:	4082      	lsls	r2, r0
 8010218:	4313      	orrs	r3, r2
 801021a:	3401      	adds	r4, #1
 801021c:	9304      	str	r3, [sp, #16]
 801021e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010222:	4829      	ldr	r0, [pc, #164]	@ (80102c8 <_vfiprintf_r+0x220>)
 8010224:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010228:	2206      	movs	r2, #6
 801022a:	f7f0 f801 	bl	8000230 <memchr>
 801022e:	2800      	cmp	r0, #0
 8010230:	d03f      	beq.n	80102b2 <_vfiprintf_r+0x20a>
 8010232:	4b26      	ldr	r3, [pc, #152]	@ (80102cc <_vfiprintf_r+0x224>)
 8010234:	bb1b      	cbnz	r3, 801027e <_vfiprintf_r+0x1d6>
 8010236:	9b03      	ldr	r3, [sp, #12]
 8010238:	3307      	adds	r3, #7
 801023a:	f023 0307 	bic.w	r3, r3, #7
 801023e:	3308      	adds	r3, #8
 8010240:	9303      	str	r3, [sp, #12]
 8010242:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010244:	443b      	add	r3, r7
 8010246:	9309      	str	r3, [sp, #36]	@ 0x24
 8010248:	e76a      	b.n	8010120 <_vfiprintf_r+0x78>
 801024a:	fb0c 3202 	mla	r2, ip, r2, r3
 801024e:	460c      	mov	r4, r1
 8010250:	2001      	movs	r0, #1
 8010252:	e7a8      	b.n	80101a6 <_vfiprintf_r+0xfe>
 8010254:	2300      	movs	r3, #0
 8010256:	3401      	adds	r4, #1
 8010258:	9305      	str	r3, [sp, #20]
 801025a:	4619      	mov	r1, r3
 801025c:	f04f 0c0a 	mov.w	ip, #10
 8010260:	4620      	mov	r0, r4
 8010262:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010266:	3a30      	subs	r2, #48	@ 0x30
 8010268:	2a09      	cmp	r2, #9
 801026a:	d903      	bls.n	8010274 <_vfiprintf_r+0x1cc>
 801026c:	2b00      	cmp	r3, #0
 801026e:	d0c6      	beq.n	80101fe <_vfiprintf_r+0x156>
 8010270:	9105      	str	r1, [sp, #20]
 8010272:	e7c4      	b.n	80101fe <_vfiprintf_r+0x156>
 8010274:	fb0c 2101 	mla	r1, ip, r1, r2
 8010278:	4604      	mov	r4, r0
 801027a:	2301      	movs	r3, #1
 801027c:	e7f0      	b.n	8010260 <_vfiprintf_r+0x1b8>
 801027e:	ab03      	add	r3, sp, #12
 8010280:	9300      	str	r3, [sp, #0]
 8010282:	462a      	mov	r2, r5
 8010284:	4b12      	ldr	r3, [pc, #72]	@ (80102d0 <_vfiprintf_r+0x228>)
 8010286:	a904      	add	r1, sp, #16
 8010288:	4630      	mov	r0, r6
 801028a:	f7fd fdf7 	bl	800de7c <_printf_float>
 801028e:	4607      	mov	r7, r0
 8010290:	1c78      	adds	r0, r7, #1
 8010292:	d1d6      	bne.n	8010242 <_vfiprintf_r+0x19a>
 8010294:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010296:	07d9      	lsls	r1, r3, #31
 8010298:	d405      	bmi.n	80102a6 <_vfiprintf_r+0x1fe>
 801029a:	89ab      	ldrh	r3, [r5, #12]
 801029c:	059a      	lsls	r2, r3, #22
 801029e:	d402      	bmi.n	80102a6 <_vfiprintf_r+0x1fe>
 80102a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80102a2:	f7fe fb93 	bl	800e9cc <__retarget_lock_release_recursive>
 80102a6:	89ab      	ldrh	r3, [r5, #12]
 80102a8:	065b      	lsls	r3, r3, #25
 80102aa:	f53f af1f 	bmi.w	80100ec <_vfiprintf_r+0x44>
 80102ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80102b0:	e71e      	b.n	80100f0 <_vfiprintf_r+0x48>
 80102b2:	ab03      	add	r3, sp, #12
 80102b4:	9300      	str	r3, [sp, #0]
 80102b6:	462a      	mov	r2, r5
 80102b8:	4b05      	ldr	r3, [pc, #20]	@ (80102d0 <_vfiprintf_r+0x228>)
 80102ba:	a904      	add	r1, sp, #16
 80102bc:	4630      	mov	r0, r6
 80102be:	f7fe f875 	bl	800e3ac <_printf_i>
 80102c2:	e7e4      	b.n	801028e <_vfiprintf_r+0x1e6>
 80102c4:	08010818 	.word	0x08010818
 80102c8:	08010822 	.word	0x08010822
 80102cc:	0800de7d 	.word	0x0800de7d
 80102d0:	08010085 	.word	0x08010085
 80102d4:	0801081e 	.word	0x0801081e

080102d8 <__swbuf_r>:
 80102d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102da:	460e      	mov	r6, r1
 80102dc:	4614      	mov	r4, r2
 80102de:	4605      	mov	r5, r0
 80102e0:	b118      	cbz	r0, 80102ea <__swbuf_r+0x12>
 80102e2:	6a03      	ldr	r3, [r0, #32]
 80102e4:	b90b      	cbnz	r3, 80102ea <__swbuf_r+0x12>
 80102e6:	f7fe fa0b 	bl	800e700 <__sinit>
 80102ea:	69a3      	ldr	r3, [r4, #24]
 80102ec:	60a3      	str	r3, [r4, #8]
 80102ee:	89a3      	ldrh	r3, [r4, #12]
 80102f0:	071a      	lsls	r2, r3, #28
 80102f2:	d501      	bpl.n	80102f8 <__swbuf_r+0x20>
 80102f4:	6923      	ldr	r3, [r4, #16]
 80102f6:	b943      	cbnz	r3, 801030a <__swbuf_r+0x32>
 80102f8:	4621      	mov	r1, r4
 80102fa:	4628      	mov	r0, r5
 80102fc:	f000 f82a 	bl	8010354 <__swsetup_r>
 8010300:	b118      	cbz	r0, 801030a <__swbuf_r+0x32>
 8010302:	f04f 37ff 	mov.w	r7, #4294967295
 8010306:	4638      	mov	r0, r7
 8010308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801030a:	6823      	ldr	r3, [r4, #0]
 801030c:	6922      	ldr	r2, [r4, #16]
 801030e:	1a98      	subs	r0, r3, r2
 8010310:	6963      	ldr	r3, [r4, #20]
 8010312:	b2f6      	uxtb	r6, r6
 8010314:	4283      	cmp	r3, r0
 8010316:	4637      	mov	r7, r6
 8010318:	dc05      	bgt.n	8010326 <__swbuf_r+0x4e>
 801031a:	4621      	mov	r1, r4
 801031c:	4628      	mov	r0, r5
 801031e:	f7ff fe07 	bl	800ff30 <_fflush_r>
 8010322:	2800      	cmp	r0, #0
 8010324:	d1ed      	bne.n	8010302 <__swbuf_r+0x2a>
 8010326:	68a3      	ldr	r3, [r4, #8]
 8010328:	3b01      	subs	r3, #1
 801032a:	60a3      	str	r3, [r4, #8]
 801032c:	6823      	ldr	r3, [r4, #0]
 801032e:	1c5a      	adds	r2, r3, #1
 8010330:	6022      	str	r2, [r4, #0]
 8010332:	701e      	strb	r6, [r3, #0]
 8010334:	6962      	ldr	r2, [r4, #20]
 8010336:	1c43      	adds	r3, r0, #1
 8010338:	429a      	cmp	r2, r3
 801033a:	d004      	beq.n	8010346 <__swbuf_r+0x6e>
 801033c:	89a3      	ldrh	r3, [r4, #12]
 801033e:	07db      	lsls	r3, r3, #31
 8010340:	d5e1      	bpl.n	8010306 <__swbuf_r+0x2e>
 8010342:	2e0a      	cmp	r6, #10
 8010344:	d1df      	bne.n	8010306 <__swbuf_r+0x2e>
 8010346:	4621      	mov	r1, r4
 8010348:	4628      	mov	r0, r5
 801034a:	f7ff fdf1 	bl	800ff30 <_fflush_r>
 801034e:	2800      	cmp	r0, #0
 8010350:	d0d9      	beq.n	8010306 <__swbuf_r+0x2e>
 8010352:	e7d6      	b.n	8010302 <__swbuf_r+0x2a>

08010354 <__swsetup_r>:
 8010354:	b538      	push	{r3, r4, r5, lr}
 8010356:	4b29      	ldr	r3, [pc, #164]	@ (80103fc <__swsetup_r+0xa8>)
 8010358:	4605      	mov	r5, r0
 801035a:	6818      	ldr	r0, [r3, #0]
 801035c:	460c      	mov	r4, r1
 801035e:	b118      	cbz	r0, 8010368 <__swsetup_r+0x14>
 8010360:	6a03      	ldr	r3, [r0, #32]
 8010362:	b90b      	cbnz	r3, 8010368 <__swsetup_r+0x14>
 8010364:	f7fe f9cc 	bl	800e700 <__sinit>
 8010368:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801036c:	0719      	lsls	r1, r3, #28
 801036e:	d422      	bmi.n	80103b6 <__swsetup_r+0x62>
 8010370:	06da      	lsls	r2, r3, #27
 8010372:	d407      	bmi.n	8010384 <__swsetup_r+0x30>
 8010374:	2209      	movs	r2, #9
 8010376:	602a      	str	r2, [r5, #0]
 8010378:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801037c:	81a3      	strh	r3, [r4, #12]
 801037e:	f04f 30ff 	mov.w	r0, #4294967295
 8010382:	e033      	b.n	80103ec <__swsetup_r+0x98>
 8010384:	0758      	lsls	r0, r3, #29
 8010386:	d512      	bpl.n	80103ae <__swsetup_r+0x5a>
 8010388:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801038a:	b141      	cbz	r1, 801039e <__swsetup_r+0x4a>
 801038c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010390:	4299      	cmp	r1, r3
 8010392:	d002      	beq.n	801039a <__swsetup_r+0x46>
 8010394:	4628      	mov	r0, r5
 8010396:	f7ff f983 	bl	800f6a0 <_free_r>
 801039a:	2300      	movs	r3, #0
 801039c:	6363      	str	r3, [r4, #52]	@ 0x34
 801039e:	89a3      	ldrh	r3, [r4, #12]
 80103a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80103a4:	81a3      	strh	r3, [r4, #12]
 80103a6:	2300      	movs	r3, #0
 80103a8:	6063      	str	r3, [r4, #4]
 80103aa:	6923      	ldr	r3, [r4, #16]
 80103ac:	6023      	str	r3, [r4, #0]
 80103ae:	89a3      	ldrh	r3, [r4, #12]
 80103b0:	f043 0308 	orr.w	r3, r3, #8
 80103b4:	81a3      	strh	r3, [r4, #12]
 80103b6:	6923      	ldr	r3, [r4, #16]
 80103b8:	b94b      	cbnz	r3, 80103ce <__swsetup_r+0x7a>
 80103ba:	89a3      	ldrh	r3, [r4, #12]
 80103bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80103c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80103c4:	d003      	beq.n	80103ce <__swsetup_r+0x7a>
 80103c6:	4621      	mov	r1, r4
 80103c8:	4628      	mov	r0, r5
 80103ca:	f000 f883 	bl	80104d4 <__smakebuf_r>
 80103ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80103d2:	f013 0201 	ands.w	r2, r3, #1
 80103d6:	d00a      	beq.n	80103ee <__swsetup_r+0x9a>
 80103d8:	2200      	movs	r2, #0
 80103da:	60a2      	str	r2, [r4, #8]
 80103dc:	6962      	ldr	r2, [r4, #20]
 80103de:	4252      	negs	r2, r2
 80103e0:	61a2      	str	r2, [r4, #24]
 80103e2:	6922      	ldr	r2, [r4, #16]
 80103e4:	b942      	cbnz	r2, 80103f8 <__swsetup_r+0xa4>
 80103e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80103ea:	d1c5      	bne.n	8010378 <__swsetup_r+0x24>
 80103ec:	bd38      	pop	{r3, r4, r5, pc}
 80103ee:	0799      	lsls	r1, r3, #30
 80103f0:	bf58      	it	pl
 80103f2:	6962      	ldrpl	r2, [r4, #20]
 80103f4:	60a2      	str	r2, [r4, #8]
 80103f6:	e7f4      	b.n	80103e2 <__swsetup_r+0x8e>
 80103f8:	2000      	movs	r0, #0
 80103fa:	e7f7      	b.n	80103ec <__swsetup_r+0x98>
 80103fc:	2000011c 	.word	0x2000011c

08010400 <_raise_r>:
 8010400:	291f      	cmp	r1, #31
 8010402:	b538      	push	{r3, r4, r5, lr}
 8010404:	4605      	mov	r5, r0
 8010406:	460c      	mov	r4, r1
 8010408:	d904      	bls.n	8010414 <_raise_r+0x14>
 801040a:	2316      	movs	r3, #22
 801040c:	6003      	str	r3, [r0, #0]
 801040e:	f04f 30ff 	mov.w	r0, #4294967295
 8010412:	bd38      	pop	{r3, r4, r5, pc}
 8010414:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010416:	b112      	cbz	r2, 801041e <_raise_r+0x1e>
 8010418:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801041c:	b94b      	cbnz	r3, 8010432 <_raise_r+0x32>
 801041e:	4628      	mov	r0, r5
 8010420:	f000 f830 	bl	8010484 <_getpid_r>
 8010424:	4622      	mov	r2, r4
 8010426:	4601      	mov	r1, r0
 8010428:	4628      	mov	r0, r5
 801042a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801042e:	f000 b817 	b.w	8010460 <_kill_r>
 8010432:	2b01      	cmp	r3, #1
 8010434:	d00a      	beq.n	801044c <_raise_r+0x4c>
 8010436:	1c59      	adds	r1, r3, #1
 8010438:	d103      	bne.n	8010442 <_raise_r+0x42>
 801043a:	2316      	movs	r3, #22
 801043c:	6003      	str	r3, [r0, #0]
 801043e:	2001      	movs	r0, #1
 8010440:	e7e7      	b.n	8010412 <_raise_r+0x12>
 8010442:	2100      	movs	r1, #0
 8010444:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010448:	4620      	mov	r0, r4
 801044a:	4798      	blx	r3
 801044c:	2000      	movs	r0, #0
 801044e:	e7e0      	b.n	8010412 <_raise_r+0x12>

08010450 <raise>:
 8010450:	4b02      	ldr	r3, [pc, #8]	@ (801045c <raise+0xc>)
 8010452:	4601      	mov	r1, r0
 8010454:	6818      	ldr	r0, [r3, #0]
 8010456:	f7ff bfd3 	b.w	8010400 <_raise_r>
 801045a:	bf00      	nop
 801045c:	2000011c 	.word	0x2000011c

08010460 <_kill_r>:
 8010460:	b538      	push	{r3, r4, r5, lr}
 8010462:	4d07      	ldr	r5, [pc, #28]	@ (8010480 <_kill_r+0x20>)
 8010464:	2300      	movs	r3, #0
 8010466:	4604      	mov	r4, r0
 8010468:	4608      	mov	r0, r1
 801046a:	4611      	mov	r1, r2
 801046c:	602b      	str	r3, [r5, #0]
 801046e:	f7f1 fb1d 	bl	8001aac <_kill>
 8010472:	1c43      	adds	r3, r0, #1
 8010474:	d102      	bne.n	801047c <_kill_r+0x1c>
 8010476:	682b      	ldr	r3, [r5, #0]
 8010478:	b103      	cbz	r3, 801047c <_kill_r+0x1c>
 801047a:	6023      	str	r3, [r4, #0]
 801047c:	bd38      	pop	{r3, r4, r5, pc}
 801047e:	bf00      	nop
 8010480:	2000fd14 	.word	0x2000fd14

08010484 <_getpid_r>:
 8010484:	f7f1 bb0a 	b.w	8001a9c <_getpid>

08010488 <__swhatbuf_r>:
 8010488:	b570      	push	{r4, r5, r6, lr}
 801048a:	460c      	mov	r4, r1
 801048c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010490:	2900      	cmp	r1, #0
 8010492:	b096      	sub	sp, #88	@ 0x58
 8010494:	4615      	mov	r5, r2
 8010496:	461e      	mov	r6, r3
 8010498:	da0d      	bge.n	80104b6 <__swhatbuf_r+0x2e>
 801049a:	89a3      	ldrh	r3, [r4, #12]
 801049c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80104a0:	f04f 0100 	mov.w	r1, #0
 80104a4:	bf14      	ite	ne
 80104a6:	2340      	movne	r3, #64	@ 0x40
 80104a8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80104ac:	2000      	movs	r0, #0
 80104ae:	6031      	str	r1, [r6, #0]
 80104b0:	602b      	str	r3, [r5, #0]
 80104b2:	b016      	add	sp, #88	@ 0x58
 80104b4:	bd70      	pop	{r4, r5, r6, pc}
 80104b6:	466a      	mov	r2, sp
 80104b8:	f000 f848 	bl	801054c <_fstat_r>
 80104bc:	2800      	cmp	r0, #0
 80104be:	dbec      	blt.n	801049a <__swhatbuf_r+0x12>
 80104c0:	9901      	ldr	r1, [sp, #4]
 80104c2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80104c6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80104ca:	4259      	negs	r1, r3
 80104cc:	4159      	adcs	r1, r3
 80104ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80104d2:	e7eb      	b.n	80104ac <__swhatbuf_r+0x24>

080104d4 <__smakebuf_r>:
 80104d4:	898b      	ldrh	r3, [r1, #12]
 80104d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80104d8:	079d      	lsls	r5, r3, #30
 80104da:	4606      	mov	r6, r0
 80104dc:	460c      	mov	r4, r1
 80104de:	d507      	bpl.n	80104f0 <__smakebuf_r+0x1c>
 80104e0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80104e4:	6023      	str	r3, [r4, #0]
 80104e6:	6123      	str	r3, [r4, #16]
 80104e8:	2301      	movs	r3, #1
 80104ea:	6163      	str	r3, [r4, #20]
 80104ec:	b003      	add	sp, #12
 80104ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80104f0:	ab01      	add	r3, sp, #4
 80104f2:	466a      	mov	r2, sp
 80104f4:	f7ff ffc8 	bl	8010488 <__swhatbuf_r>
 80104f8:	9f00      	ldr	r7, [sp, #0]
 80104fa:	4605      	mov	r5, r0
 80104fc:	4639      	mov	r1, r7
 80104fe:	4630      	mov	r0, r6
 8010500:	f7fd fb90 	bl	800dc24 <_malloc_r>
 8010504:	b948      	cbnz	r0, 801051a <__smakebuf_r+0x46>
 8010506:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801050a:	059a      	lsls	r2, r3, #22
 801050c:	d4ee      	bmi.n	80104ec <__smakebuf_r+0x18>
 801050e:	f023 0303 	bic.w	r3, r3, #3
 8010512:	f043 0302 	orr.w	r3, r3, #2
 8010516:	81a3      	strh	r3, [r4, #12]
 8010518:	e7e2      	b.n	80104e0 <__smakebuf_r+0xc>
 801051a:	89a3      	ldrh	r3, [r4, #12]
 801051c:	6020      	str	r0, [r4, #0]
 801051e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010522:	81a3      	strh	r3, [r4, #12]
 8010524:	9b01      	ldr	r3, [sp, #4]
 8010526:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801052a:	b15b      	cbz	r3, 8010544 <__smakebuf_r+0x70>
 801052c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010530:	4630      	mov	r0, r6
 8010532:	f000 f81d 	bl	8010570 <_isatty_r>
 8010536:	b128      	cbz	r0, 8010544 <__smakebuf_r+0x70>
 8010538:	89a3      	ldrh	r3, [r4, #12]
 801053a:	f023 0303 	bic.w	r3, r3, #3
 801053e:	f043 0301 	orr.w	r3, r3, #1
 8010542:	81a3      	strh	r3, [r4, #12]
 8010544:	89a3      	ldrh	r3, [r4, #12]
 8010546:	431d      	orrs	r5, r3
 8010548:	81a5      	strh	r5, [r4, #12]
 801054a:	e7cf      	b.n	80104ec <__smakebuf_r+0x18>

0801054c <_fstat_r>:
 801054c:	b538      	push	{r3, r4, r5, lr}
 801054e:	4d07      	ldr	r5, [pc, #28]	@ (801056c <_fstat_r+0x20>)
 8010550:	2300      	movs	r3, #0
 8010552:	4604      	mov	r4, r0
 8010554:	4608      	mov	r0, r1
 8010556:	4611      	mov	r1, r2
 8010558:	602b      	str	r3, [r5, #0]
 801055a:	f7f1 fb07 	bl	8001b6c <_fstat>
 801055e:	1c43      	adds	r3, r0, #1
 8010560:	d102      	bne.n	8010568 <_fstat_r+0x1c>
 8010562:	682b      	ldr	r3, [r5, #0]
 8010564:	b103      	cbz	r3, 8010568 <_fstat_r+0x1c>
 8010566:	6023      	str	r3, [r4, #0]
 8010568:	bd38      	pop	{r3, r4, r5, pc}
 801056a:	bf00      	nop
 801056c:	2000fd14 	.word	0x2000fd14

08010570 <_isatty_r>:
 8010570:	b538      	push	{r3, r4, r5, lr}
 8010572:	4d06      	ldr	r5, [pc, #24]	@ (801058c <_isatty_r+0x1c>)
 8010574:	2300      	movs	r3, #0
 8010576:	4604      	mov	r4, r0
 8010578:	4608      	mov	r0, r1
 801057a:	602b      	str	r3, [r5, #0]
 801057c:	f7f1 fb06 	bl	8001b8c <_isatty>
 8010580:	1c43      	adds	r3, r0, #1
 8010582:	d102      	bne.n	801058a <_isatty_r+0x1a>
 8010584:	682b      	ldr	r3, [r5, #0]
 8010586:	b103      	cbz	r3, 801058a <_isatty_r+0x1a>
 8010588:	6023      	str	r3, [r4, #0]
 801058a:	bd38      	pop	{r3, r4, r5, pc}
 801058c:	2000fd14 	.word	0x2000fd14

08010590 <_init>:
 8010590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010592:	bf00      	nop
 8010594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010596:	bc08      	pop	{r3}
 8010598:	469e      	mov	lr, r3
 801059a:	4770      	bx	lr

0801059c <_fini>:
 801059c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801059e:	bf00      	nop
 80105a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80105a2:	bc08      	pop	{r3}
 80105a4:	469e      	mov	lr, r3
 80105a6:	4770      	bx	lr
